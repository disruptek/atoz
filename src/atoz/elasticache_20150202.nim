
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_592364 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_592364](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_592364): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_592975 = ref object of OpenApiRestCall_592364
proc url_PostAddTagsToResource_592977(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_592976(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_592978 = query.getOrDefault("Action")
  valid_592978 = validateParameter(valid_592978, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_592978 != nil:
    section.add "Action", valid_592978
  var valid_592979 = query.getOrDefault("Version")
  valid_592979 = validateParameter(valid_592979, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592979 != nil:
    section.add "Version", valid_592979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592980 = header.getOrDefault("X-Amz-Signature")
  valid_592980 = validateParameter(valid_592980, JString, required = false,
                                 default = nil)
  if valid_592980 != nil:
    section.add "X-Amz-Signature", valid_592980
  var valid_592981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592981 = validateParameter(valid_592981, JString, required = false,
                                 default = nil)
  if valid_592981 != nil:
    section.add "X-Amz-Content-Sha256", valid_592981
  var valid_592982 = header.getOrDefault("X-Amz-Date")
  valid_592982 = validateParameter(valid_592982, JString, required = false,
                                 default = nil)
  if valid_592982 != nil:
    section.add "X-Amz-Date", valid_592982
  var valid_592983 = header.getOrDefault("X-Amz-Credential")
  valid_592983 = validateParameter(valid_592983, JString, required = false,
                                 default = nil)
  if valid_592983 != nil:
    section.add "X-Amz-Credential", valid_592983
  var valid_592984 = header.getOrDefault("X-Amz-Security-Token")
  valid_592984 = validateParameter(valid_592984, JString, required = false,
                                 default = nil)
  if valid_592984 != nil:
    section.add "X-Amz-Security-Token", valid_592984
  var valid_592985 = header.getOrDefault("X-Amz-Algorithm")
  valid_592985 = validateParameter(valid_592985, JString, required = false,
                                 default = nil)
  if valid_592985 != nil:
    section.add "X-Amz-Algorithm", valid_592985
  var valid_592986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592986 = validateParameter(valid_592986, JString, required = false,
                                 default = nil)
  if valid_592986 != nil:
    section.add "X-Amz-SignedHeaders", valid_592986
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_592987 = formData.getOrDefault("Tags")
  valid_592987 = validateParameter(valid_592987, JArray, required = true, default = nil)
  if valid_592987 != nil:
    section.add "Tags", valid_592987
  var valid_592988 = formData.getOrDefault("ResourceName")
  valid_592988 = validateParameter(valid_592988, JString, required = true,
                                 default = nil)
  if valid_592988 != nil:
    section.add "ResourceName", valid_592988
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592989: Call_PostAddTagsToResource_592975; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_592989.validator(path, query, header, formData, body)
  let scheme = call_592989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592989.url(scheme.get, call_592989.host, call_592989.base,
                         call_592989.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592989, url, valid)

proc call*(call_592990: Call_PostAddTagsToResource_592975; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_592991 = newJObject()
  var formData_592992 = newJObject()
  add(query_592991, "Action", newJString(Action))
  if Tags != nil:
    formData_592992.add "Tags", Tags
  add(query_592991, "Version", newJString(Version))
  add(formData_592992, "ResourceName", newJString(ResourceName))
  result = call_592990.call(nil, query_592991, nil, formData_592992, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_592975(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_592976, base: "/",
    url: url_PostAddTagsToResource_592977, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_592703 = ref object of OpenApiRestCall_592364
proc url_GetAddTagsToResource_592705(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_592704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_592817 = query.getOrDefault("Tags")
  valid_592817 = validateParameter(valid_592817, JArray, required = true, default = nil)
  if valid_592817 != nil:
    section.add "Tags", valid_592817
  var valid_592818 = query.getOrDefault("ResourceName")
  valid_592818 = validateParameter(valid_592818, JString, required = true,
                                 default = nil)
  if valid_592818 != nil:
    section.add "ResourceName", valid_592818
  var valid_592832 = query.getOrDefault("Action")
  valid_592832 = validateParameter(valid_592832, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_592832 != nil:
    section.add "Action", valid_592832
  var valid_592833 = query.getOrDefault("Version")
  valid_592833 = validateParameter(valid_592833, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_592833 != nil:
    section.add "Version", valid_592833
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_592834 = header.getOrDefault("X-Amz-Signature")
  valid_592834 = validateParameter(valid_592834, JString, required = false,
                                 default = nil)
  if valid_592834 != nil:
    section.add "X-Amz-Signature", valid_592834
  var valid_592835 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_592835 = validateParameter(valid_592835, JString, required = false,
                                 default = nil)
  if valid_592835 != nil:
    section.add "X-Amz-Content-Sha256", valid_592835
  var valid_592836 = header.getOrDefault("X-Amz-Date")
  valid_592836 = validateParameter(valid_592836, JString, required = false,
                                 default = nil)
  if valid_592836 != nil:
    section.add "X-Amz-Date", valid_592836
  var valid_592837 = header.getOrDefault("X-Amz-Credential")
  valid_592837 = validateParameter(valid_592837, JString, required = false,
                                 default = nil)
  if valid_592837 != nil:
    section.add "X-Amz-Credential", valid_592837
  var valid_592838 = header.getOrDefault("X-Amz-Security-Token")
  valid_592838 = validateParameter(valid_592838, JString, required = false,
                                 default = nil)
  if valid_592838 != nil:
    section.add "X-Amz-Security-Token", valid_592838
  var valid_592839 = header.getOrDefault("X-Amz-Algorithm")
  valid_592839 = validateParameter(valid_592839, JString, required = false,
                                 default = nil)
  if valid_592839 != nil:
    section.add "X-Amz-Algorithm", valid_592839
  var valid_592840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_592840 = validateParameter(valid_592840, JString, required = false,
                                 default = nil)
  if valid_592840 != nil:
    section.add "X-Amz-SignedHeaders", valid_592840
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_592863: Call_GetAddTagsToResource_592703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_592863.validator(path, query, header, formData, body)
  let scheme = call_592863.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_592863.url(scheme.get, call_592863.host, call_592863.base,
                         call_592863.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_592863, url, valid)

proc call*(call_592934: Call_GetAddTagsToResource_592703; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_592935 = newJObject()
  if Tags != nil:
    query_592935.add "Tags", Tags
  add(query_592935, "ResourceName", newJString(ResourceName))
  add(query_592935, "Action", newJString(Action))
  add(query_592935, "Version", newJString(Version))
  result = call_592934.call(nil, query_592935, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_592703(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_592704, base: "/",
    url: url_GetAddTagsToResource_592705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_593011 = ref object of OpenApiRestCall_592364
proc url_PostAuthorizeCacheSecurityGroupIngress_593013(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_593012(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593014 = query.getOrDefault("Action")
  valid_593014 = validateParameter(valid_593014, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_593014 != nil:
    section.add "Action", valid_593014
  var valid_593015 = query.getOrDefault("Version")
  valid_593015 = validateParameter(valid_593015, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593015 != nil:
    section.add "Version", valid_593015
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593016 = header.getOrDefault("X-Amz-Signature")
  valid_593016 = validateParameter(valid_593016, JString, required = false,
                                 default = nil)
  if valid_593016 != nil:
    section.add "X-Amz-Signature", valid_593016
  var valid_593017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593017 = validateParameter(valid_593017, JString, required = false,
                                 default = nil)
  if valid_593017 != nil:
    section.add "X-Amz-Content-Sha256", valid_593017
  var valid_593018 = header.getOrDefault("X-Amz-Date")
  valid_593018 = validateParameter(valid_593018, JString, required = false,
                                 default = nil)
  if valid_593018 != nil:
    section.add "X-Amz-Date", valid_593018
  var valid_593019 = header.getOrDefault("X-Amz-Credential")
  valid_593019 = validateParameter(valid_593019, JString, required = false,
                                 default = nil)
  if valid_593019 != nil:
    section.add "X-Amz-Credential", valid_593019
  var valid_593020 = header.getOrDefault("X-Amz-Security-Token")
  valid_593020 = validateParameter(valid_593020, JString, required = false,
                                 default = nil)
  if valid_593020 != nil:
    section.add "X-Amz-Security-Token", valid_593020
  var valid_593021 = header.getOrDefault("X-Amz-Algorithm")
  valid_593021 = validateParameter(valid_593021, JString, required = false,
                                 default = nil)
  if valid_593021 != nil:
    section.add "X-Amz-Algorithm", valid_593021
  var valid_593022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593022 = validateParameter(valid_593022, JString, required = false,
                                 default = nil)
  if valid_593022 != nil:
    section.add "X-Amz-SignedHeaders", valid_593022
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_593023 = formData.getOrDefault("CacheSecurityGroupName")
  valid_593023 = validateParameter(valid_593023, JString, required = true,
                                 default = nil)
  if valid_593023 != nil:
    section.add "CacheSecurityGroupName", valid_593023
  var valid_593024 = formData.getOrDefault("EC2SecurityGroupName")
  valid_593024 = validateParameter(valid_593024, JString, required = true,
                                 default = nil)
  if valid_593024 != nil:
    section.add "EC2SecurityGroupName", valid_593024
  var valid_593025 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_593025 = validateParameter(valid_593025, JString, required = true,
                                 default = nil)
  if valid_593025 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_593025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593026: Call_PostAuthorizeCacheSecurityGroupIngress_593011;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_593026.validator(path, query, header, formData, body)
  let scheme = call_593026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593026.url(scheme.get, call_593026.host, call_593026.base,
                         call_593026.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593026, url, valid)

proc call*(call_593027: Call_PostAuthorizeCacheSecurityGroupIngress_593011;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593028 = newJObject()
  var formData_593029 = newJObject()
  add(formData_593029, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_593029, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_593029, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_593028, "Action", newJString(Action))
  add(query_593028, "Version", newJString(Version))
  result = call_593027.call(nil, query_593028, nil, formData_593029, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_593011(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_593012, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_593013,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_592993 = ref object of OpenApiRestCall_592364
proc url_GetAuthorizeCacheSecurityGroupIngress_592995(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_592994(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_592996 = query.getOrDefault("EC2SecurityGroupName")
  valid_592996 = validateParameter(valid_592996, JString, required = true,
                                 default = nil)
  if valid_592996 != nil:
    section.add "EC2SecurityGroupName", valid_592996
  var valid_592997 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_592997 = validateParameter(valid_592997, JString, required = true,
                                 default = nil)
  if valid_592997 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_592997
  var valid_592998 = query.getOrDefault("Action")
  valid_592998 = validateParameter(valid_592998, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_592998 != nil:
    section.add "Action", valid_592998
  var valid_592999 = query.getOrDefault("CacheSecurityGroupName")
  valid_592999 = validateParameter(valid_592999, JString, required = true,
                                 default = nil)
  if valid_592999 != nil:
    section.add "CacheSecurityGroupName", valid_592999
  var valid_593000 = query.getOrDefault("Version")
  valid_593000 = validateParameter(valid_593000, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593000 != nil:
    section.add "Version", valid_593000
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593001 = header.getOrDefault("X-Amz-Signature")
  valid_593001 = validateParameter(valid_593001, JString, required = false,
                                 default = nil)
  if valid_593001 != nil:
    section.add "X-Amz-Signature", valid_593001
  var valid_593002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593002 = validateParameter(valid_593002, JString, required = false,
                                 default = nil)
  if valid_593002 != nil:
    section.add "X-Amz-Content-Sha256", valid_593002
  var valid_593003 = header.getOrDefault("X-Amz-Date")
  valid_593003 = validateParameter(valid_593003, JString, required = false,
                                 default = nil)
  if valid_593003 != nil:
    section.add "X-Amz-Date", valid_593003
  var valid_593004 = header.getOrDefault("X-Amz-Credential")
  valid_593004 = validateParameter(valid_593004, JString, required = false,
                                 default = nil)
  if valid_593004 != nil:
    section.add "X-Amz-Credential", valid_593004
  var valid_593005 = header.getOrDefault("X-Amz-Security-Token")
  valid_593005 = validateParameter(valid_593005, JString, required = false,
                                 default = nil)
  if valid_593005 != nil:
    section.add "X-Amz-Security-Token", valid_593005
  var valid_593006 = header.getOrDefault("X-Amz-Algorithm")
  valid_593006 = validateParameter(valid_593006, JString, required = false,
                                 default = nil)
  if valid_593006 != nil:
    section.add "X-Amz-Algorithm", valid_593006
  var valid_593007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593007 = validateParameter(valid_593007, JString, required = false,
                                 default = nil)
  if valid_593007 != nil:
    section.add "X-Amz-SignedHeaders", valid_593007
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593008: Call_GetAuthorizeCacheSecurityGroupIngress_592993;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_593008.validator(path, query, header, formData, body)
  let scheme = call_593008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593008.url(scheme.get, call_593008.host, call_593008.base,
                         call_593008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593008, url, valid)

proc call*(call_593009: Call_GetAuthorizeCacheSecurityGroupIngress_592993;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: string (required)
  var query_593010 = newJObject()
  add(query_593010, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_593010, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_593010, "Action", newJString(Action))
  add(query_593010, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_593010, "Version", newJString(Version))
  result = call_593009.call(nil, query_593010, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_592993(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_592994, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_592995,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_593047 = ref object of OpenApiRestCall_592364
proc url_PostBatchApplyUpdateAction_593049(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchApplyUpdateAction_593048(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593050 = query.getOrDefault("Action")
  valid_593050 = validateParameter(valid_593050, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_593050 != nil:
    section.add "Action", valid_593050
  var valid_593051 = query.getOrDefault("Version")
  valid_593051 = validateParameter(valid_593051, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593051 != nil:
    section.add "Version", valid_593051
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593052 = header.getOrDefault("X-Amz-Signature")
  valid_593052 = validateParameter(valid_593052, JString, required = false,
                                 default = nil)
  if valid_593052 != nil:
    section.add "X-Amz-Signature", valid_593052
  var valid_593053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593053 = validateParameter(valid_593053, JString, required = false,
                                 default = nil)
  if valid_593053 != nil:
    section.add "X-Amz-Content-Sha256", valid_593053
  var valid_593054 = header.getOrDefault("X-Amz-Date")
  valid_593054 = validateParameter(valid_593054, JString, required = false,
                                 default = nil)
  if valid_593054 != nil:
    section.add "X-Amz-Date", valid_593054
  var valid_593055 = header.getOrDefault("X-Amz-Credential")
  valid_593055 = validateParameter(valid_593055, JString, required = false,
                                 default = nil)
  if valid_593055 != nil:
    section.add "X-Amz-Credential", valid_593055
  var valid_593056 = header.getOrDefault("X-Amz-Security-Token")
  valid_593056 = validateParameter(valid_593056, JString, required = false,
                                 default = nil)
  if valid_593056 != nil:
    section.add "X-Amz-Security-Token", valid_593056
  var valid_593057 = header.getOrDefault("X-Amz-Algorithm")
  valid_593057 = validateParameter(valid_593057, JString, required = false,
                                 default = nil)
  if valid_593057 != nil:
    section.add "X-Amz-Algorithm", valid_593057
  var valid_593058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593058 = validateParameter(valid_593058, JString, required = false,
                                 default = nil)
  if valid_593058 != nil:
    section.add "X-Amz-SignedHeaders", valid_593058
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_593059 = formData.getOrDefault("ServiceUpdateName")
  valid_593059 = validateParameter(valid_593059, JString, required = true,
                                 default = nil)
  if valid_593059 != nil:
    section.add "ServiceUpdateName", valid_593059
  var valid_593060 = formData.getOrDefault("ReplicationGroupIds")
  valid_593060 = validateParameter(valid_593060, JArray, required = true, default = nil)
  if valid_593060 != nil:
    section.add "ReplicationGroupIds", valid_593060
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593061: Call_PostBatchApplyUpdateAction_593047; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_593061.validator(path, query, header, formData, body)
  let scheme = call_593061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593061.url(scheme.get, call_593061.host, call_593061.base,
                         call_593061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593061, url, valid)

proc call*(call_593062: Call_PostBatchApplyUpdateAction_593047;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593063 = newJObject()
  var formData_593064 = newJObject()
  add(formData_593064, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_593064.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_593063, "Action", newJString(Action))
  add(query_593063, "Version", newJString(Version))
  result = call_593062.call(nil, query_593063, nil, formData_593064, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_593047(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_593048, base: "/",
    url: url_PostBatchApplyUpdateAction_593049,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_593030 = ref object of OpenApiRestCall_592364
proc url_GetBatchApplyUpdateAction_593032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchApplyUpdateAction_593031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_593033 = query.getOrDefault("ServiceUpdateName")
  valid_593033 = validateParameter(valid_593033, JString, required = true,
                                 default = nil)
  if valid_593033 != nil:
    section.add "ServiceUpdateName", valid_593033
  var valid_593034 = query.getOrDefault("Action")
  valid_593034 = validateParameter(valid_593034, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_593034 != nil:
    section.add "Action", valid_593034
  var valid_593035 = query.getOrDefault("ReplicationGroupIds")
  valid_593035 = validateParameter(valid_593035, JArray, required = true, default = nil)
  if valid_593035 != nil:
    section.add "ReplicationGroupIds", valid_593035
  var valid_593036 = query.getOrDefault("Version")
  valid_593036 = validateParameter(valid_593036, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593036 != nil:
    section.add "Version", valid_593036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593037 = header.getOrDefault("X-Amz-Signature")
  valid_593037 = validateParameter(valid_593037, JString, required = false,
                                 default = nil)
  if valid_593037 != nil:
    section.add "X-Amz-Signature", valid_593037
  var valid_593038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593038 = validateParameter(valid_593038, JString, required = false,
                                 default = nil)
  if valid_593038 != nil:
    section.add "X-Amz-Content-Sha256", valid_593038
  var valid_593039 = header.getOrDefault("X-Amz-Date")
  valid_593039 = validateParameter(valid_593039, JString, required = false,
                                 default = nil)
  if valid_593039 != nil:
    section.add "X-Amz-Date", valid_593039
  var valid_593040 = header.getOrDefault("X-Amz-Credential")
  valid_593040 = validateParameter(valid_593040, JString, required = false,
                                 default = nil)
  if valid_593040 != nil:
    section.add "X-Amz-Credential", valid_593040
  var valid_593041 = header.getOrDefault("X-Amz-Security-Token")
  valid_593041 = validateParameter(valid_593041, JString, required = false,
                                 default = nil)
  if valid_593041 != nil:
    section.add "X-Amz-Security-Token", valid_593041
  var valid_593042 = header.getOrDefault("X-Amz-Algorithm")
  valid_593042 = validateParameter(valid_593042, JString, required = false,
                                 default = nil)
  if valid_593042 != nil:
    section.add "X-Amz-Algorithm", valid_593042
  var valid_593043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593043 = validateParameter(valid_593043, JString, required = false,
                                 default = nil)
  if valid_593043 != nil:
    section.add "X-Amz-SignedHeaders", valid_593043
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593044: Call_GetBatchApplyUpdateAction_593030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_593044.validator(path, query, header, formData, body)
  let scheme = call_593044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593044.url(scheme.get, call_593044.host, call_593044.base,
                         call_593044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593044, url, valid)

proc call*(call_593045: Call_GetBatchApplyUpdateAction_593030;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_593046 = newJObject()
  add(query_593046, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_593046, "Action", newJString(Action))
  if ReplicationGroupIds != nil:
    query_593046.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_593046, "Version", newJString(Version))
  result = call_593045.call(nil, query_593046, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_593030(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_593031, base: "/",
    url: url_GetBatchApplyUpdateAction_593032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_593082 = ref object of OpenApiRestCall_592364
proc url_PostBatchStopUpdateAction_593084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostBatchStopUpdateAction_593083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593085 = query.getOrDefault("Action")
  valid_593085 = validateParameter(valid_593085, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_593085 != nil:
    section.add "Action", valid_593085
  var valid_593086 = query.getOrDefault("Version")
  valid_593086 = validateParameter(valid_593086, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593086 != nil:
    section.add "Version", valid_593086
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593087 = header.getOrDefault("X-Amz-Signature")
  valid_593087 = validateParameter(valid_593087, JString, required = false,
                                 default = nil)
  if valid_593087 != nil:
    section.add "X-Amz-Signature", valid_593087
  var valid_593088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593088 = validateParameter(valid_593088, JString, required = false,
                                 default = nil)
  if valid_593088 != nil:
    section.add "X-Amz-Content-Sha256", valid_593088
  var valid_593089 = header.getOrDefault("X-Amz-Date")
  valid_593089 = validateParameter(valid_593089, JString, required = false,
                                 default = nil)
  if valid_593089 != nil:
    section.add "X-Amz-Date", valid_593089
  var valid_593090 = header.getOrDefault("X-Amz-Credential")
  valid_593090 = validateParameter(valid_593090, JString, required = false,
                                 default = nil)
  if valid_593090 != nil:
    section.add "X-Amz-Credential", valid_593090
  var valid_593091 = header.getOrDefault("X-Amz-Security-Token")
  valid_593091 = validateParameter(valid_593091, JString, required = false,
                                 default = nil)
  if valid_593091 != nil:
    section.add "X-Amz-Security-Token", valid_593091
  var valid_593092 = header.getOrDefault("X-Amz-Algorithm")
  valid_593092 = validateParameter(valid_593092, JString, required = false,
                                 default = nil)
  if valid_593092 != nil:
    section.add "X-Amz-Algorithm", valid_593092
  var valid_593093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593093 = validateParameter(valid_593093, JString, required = false,
                                 default = nil)
  if valid_593093 != nil:
    section.add "X-Amz-SignedHeaders", valid_593093
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_593094 = formData.getOrDefault("ServiceUpdateName")
  valid_593094 = validateParameter(valid_593094, JString, required = true,
                                 default = nil)
  if valid_593094 != nil:
    section.add "ServiceUpdateName", valid_593094
  var valid_593095 = formData.getOrDefault("ReplicationGroupIds")
  valid_593095 = validateParameter(valid_593095, JArray, required = true, default = nil)
  if valid_593095 != nil:
    section.add "ReplicationGroupIds", valid_593095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593096: Call_PostBatchStopUpdateAction_593082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_593096.validator(path, query, header, formData, body)
  let scheme = call_593096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593096.url(scheme.get, call_593096.host, call_593096.base,
                         call_593096.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593096, url, valid)

proc call*(call_593097: Call_PostBatchStopUpdateAction_593082;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode;
          Action: string = "BatchStopUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593098 = newJObject()
  var formData_593099 = newJObject()
  add(formData_593099, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_593099.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_593098, "Action", newJString(Action))
  add(query_593098, "Version", newJString(Version))
  result = call_593097.call(nil, query_593098, nil, formData_593099, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_593082(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_593083, base: "/",
    url: url_PostBatchStopUpdateAction_593084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_593065 = ref object of OpenApiRestCall_592364
proc url_GetBatchStopUpdateAction_593067(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetBatchStopUpdateAction_593066(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_593068 = query.getOrDefault("ServiceUpdateName")
  valid_593068 = validateParameter(valid_593068, JString, required = true,
                                 default = nil)
  if valid_593068 != nil:
    section.add "ServiceUpdateName", valid_593068
  var valid_593069 = query.getOrDefault("Action")
  valid_593069 = validateParameter(valid_593069, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_593069 != nil:
    section.add "Action", valid_593069
  var valid_593070 = query.getOrDefault("ReplicationGroupIds")
  valid_593070 = validateParameter(valid_593070, JArray, required = true, default = nil)
  if valid_593070 != nil:
    section.add "ReplicationGroupIds", valid_593070
  var valid_593071 = query.getOrDefault("Version")
  valid_593071 = validateParameter(valid_593071, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593071 != nil:
    section.add "Version", valid_593071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593072 = header.getOrDefault("X-Amz-Signature")
  valid_593072 = validateParameter(valid_593072, JString, required = false,
                                 default = nil)
  if valid_593072 != nil:
    section.add "X-Amz-Signature", valid_593072
  var valid_593073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593073 = validateParameter(valid_593073, JString, required = false,
                                 default = nil)
  if valid_593073 != nil:
    section.add "X-Amz-Content-Sha256", valid_593073
  var valid_593074 = header.getOrDefault("X-Amz-Date")
  valid_593074 = validateParameter(valid_593074, JString, required = false,
                                 default = nil)
  if valid_593074 != nil:
    section.add "X-Amz-Date", valid_593074
  var valid_593075 = header.getOrDefault("X-Amz-Credential")
  valid_593075 = validateParameter(valid_593075, JString, required = false,
                                 default = nil)
  if valid_593075 != nil:
    section.add "X-Amz-Credential", valid_593075
  var valid_593076 = header.getOrDefault("X-Amz-Security-Token")
  valid_593076 = validateParameter(valid_593076, JString, required = false,
                                 default = nil)
  if valid_593076 != nil:
    section.add "X-Amz-Security-Token", valid_593076
  var valid_593077 = header.getOrDefault("X-Amz-Algorithm")
  valid_593077 = validateParameter(valid_593077, JString, required = false,
                                 default = nil)
  if valid_593077 != nil:
    section.add "X-Amz-Algorithm", valid_593077
  var valid_593078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593078 = validateParameter(valid_593078, JString, required = false,
                                 default = nil)
  if valid_593078 != nil:
    section.add "X-Amz-SignedHeaders", valid_593078
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593079: Call_GetBatchStopUpdateAction_593065; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_593079.validator(path, query, header, formData, body)
  let scheme = call_593079.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593079.url(scheme.get, call_593079.host, call_593079.base,
                         call_593079.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593079, url, valid)

proc call*(call_593080: Call_GetBatchStopUpdateAction_593065;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode;
          Action: string = "BatchStopUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_593081 = newJObject()
  add(query_593081, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_593081, "Action", newJString(Action))
  if ReplicationGroupIds != nil:
    query_593081.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_593081, "Version", newJString(Version))
  result = call_593080.call(nil, query_593081, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_593065(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_593066, base: "/",
    url: url_GetBatchStopUpdateAction_593067, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_593119 = ref object of OpenApiRestCall_592364
proc url_PostCopySnapshot_593121(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopySnapshot_593120(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593122 = query.getOrDefault("Action")
  valid_593122 = validateParameter(valid_593122, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_593122 != nil:
    section.add "Action", valid_593122
  var valid_593123 = query.getOrDefault("Version")
  valid_593123 = validateParameter(valid_593123, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593123 != nil:
    section.add "Version", valid_593123
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593124 = header.getOrDefault("X-Amz-Signature")
  valid_593124 = validateParameter(valid_593124, JString, required = false,
                                 default = nil)
  if valid_593124 != nil:
    section.add "X-Amz-Signature", valid_593124
  var valid_593125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593125 = validateParameter(valid_593125, JString, required = false,
                                 default = nil)
  if valid_593125 != nil:
    section.add "X-Amz-Content-Sha256", valid_593125
  var valid_593126 = header.getOrDefault("X-Amz-Date")
  valid_593126 = validateParameter(valid_593126, JString, required = false,
                                 default = nil)
  if valid_593126 != nil:
    section.add "X-Amz-Date", valid_593126
  var valid_593127 = header.getOrDefault("X-Amz-Credential")
  valid_593127 = validateParameter(valid_593127, JString, required = false,
                                 default = nil)
  if valid_593127 != nil:
    section.add "X-Amz-Credential", valid_593127
  var valid_593128 = header.getOrDefault("X-Amz-Security-Token")
  valid_593128 = validateParameter(valid_593128, JString, required = false,
                                 default = nil)
  if valid_593128 != nil:
    section.add "X-Amz-Security-Token", valid_593128
  var valid_593129 = header.getOrDefault("X-Amz-Algorithm")
  valid_593129 = validateParameter(valid_593129, JString, required = false,
                                 default = nil)
  if valid_593129 != nil:
    section.add "X-Amz-Algorithm", valid_593129
  var valid_593130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593130 = validateParameter(valid_593130, JString, required = false,
                                 default = nil)
  if valid_593130 != nil:
    section.add "X-Amz-SignedHeaders", valid_593130
  result.add "header", section
  ## parameters in `formData` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  section = newJObject()
  var valid_593131 = formData.getOrDefault("KmsKeyId")
  valid_593131 = validateParameter(valid_593131, JString, required = false,
                                 default = nil)
  if valid_593131 != nil:
    section.add "KmsKeyId", valid_593131
  var valid_593132 = formData.getOrDefault("TargetBucket")
  valid_593132 = validateParameter(valid_593132, JString, required = false,
                                 default = nil)
  if valid_593132 != nil:
    section.add "TargetBucket", valid_593132
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotName` field"
  var valid_593133 = formData.getOrDefault("SourceSnapshotName")
  valid_593133 = validateParameter(valid_593133, JString, required = true,
                                 default = nil)
  if valid_593133 != nil:
    section.add "SourceSnapshotName", valid_593133
  var valid_593134 = formData.getOrDefault("TargetSnapshotName")
  valid_593134 = validateParameter(valid_593134, JString, required = true,
                                 default = nil)
  if valid_593134 != nil:
    section.add "TargetSnapshotName", valid_593134
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593135: Call_PostCopySnapshot_593119; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_593135.validator(path, query, header, formData, body)
  let scheme = call_593135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593135.url(scheme.get, call_593135.host, call_593135.base,
                         call_593135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593135, url, valid)

proc call*(call_593136: Call_PostCopySnapshot_593119; SourceSnapshotName: string;
          TargetSnapshotName: string; KmsKeyId: string = "";
          Action: string = "CopySnapshot"; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Action: string (required)
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_593137 = newJObject()
  var formData_593138 = newJObject()
  add(formData_593138, "KmsKeyId", newJString(KmsKeyId))
  add(query_593137, "Action", newJString(Action))
  add(formData_593138, "TargetBucket", newJString(TargetBucket))
  add(formData_593138, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(formData_593138, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_593137, "Version", newJString(Version))
  result = call_593136.call(nil, query_593137, nil, formData_593138, nil)

var postCopySnapshot* = Call_PostCopySnapshot_593119(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_593120,
    base: "/", url: url_PostCopySnapshot_593121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_593100 = ref object of OpenApiRestCall_592364
proc url_GetCopySnapshot_593102(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopySnapshot_593101(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: JString (required)
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_593103 = query.getOrDefault("KmsKeyId")
  valid_593103 = validateParameter(valid_593103, JString, required = false,
                                 default = nil)
  if valid_593103 != nil:
    section.add "KmsKeyId", valid_593103
  var valid_593104 = query.getOrDefault("TargetBucket")
  valid_593104 = validateParameter(valid_593104, JString, required = false,
                                 default = nil)
  if valid_593104 != nil:
    section.add "TargetBucket", valid_593104
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593105 = query.getOrDefault("Action")
  valid_593105 = validateParameter(valid_593105, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_593105 != nil:
    section.add "Action", valid_593105
  var valid_593106 = query.getOrDefault("TargetSnapshotName")
  valid_593106 = validateParameter(valid_593106, JString, required = true,
                                 default = nil)
  if valid_593106 != nil:
    section.add "TargetSnapshotName", valid_593106
  var valid_593107 = query.getOrDefault("SourceSnapshotName")
  valid_593107 = validateParameter(valid_593107, JString, required = true,
                                 default = nil)
  if valid_593107 != nil:
    section.add "SourceSnapshotName", valid_593107
  var valid_593108 = query.getOrDefault("Version")
  valid_593108 = validateParameter(valid_593108, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593108 != nil:
    section.add "Version", valid_593108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593109 = header.getOrDefault("X-Amz-Signature")
  valid_593109 = validateParameter(valid_593109, JString, required = false,
                                 default = nil)
  if valid_593109 != nil:
    section.add "X-Amz-Signature", valid_593109
  var valid_593110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593110 = validateParameter(valid_593110, JString, required = false,
                                 default = nil)
  if valid_593110 != nil:
    section.add "X-Amz-Content-Sha256", valid_593110
  var valid_593111 = header.getOrDefault("X-Amz-Date")
  valid_593111 = validateParameter(valid_593111, JString, required = false,
                                 default = nil)
  if valid_593111 != nil:
    section.add "X-Amz-Date", valid_593111
  var valid_593112 = header.getOrDefault("X-Amz-Credential")
  valid_593112 = validateParameter(valid_593112, JString, required = false,
                                 default = nil)
  if valid_593112 != nil:
    section.add "X-Amz-Credential", valid_593112
  var valid_593113 = header.getOrDefault("X-Amz-Security-Token")
  valid_593113 = validateParameter(valid_593113, JString, required = false,
                                 default = nil)
  if valid_593113 != nil:
    section.add "X-Amz-Security-Token", valid_593113
  var valid_593114 = header.getOrDefault("X-Amz-Algorithm")
  valid_593114 = validateParameter(valid_593114, JString, required = false,
                                 default = nil)
  if valid_593114 != nil:
    section.add "X-Amz-Algorithm", valid_593114
  var valid_593115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593115 = validateParameter(valid_593115, JString, required = false,
                                 default = nil)
  if valid_593115 != nil:
    section.add "X-Amz-SignedHeaders", valid_593115
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593116: Call_GetCopySnapshot_593100; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_593116.validator(path, query, header, formData, body)
  let scheme = call_593116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593116.url(scheme.get, call_593116.host, call_593116.base,
                         call_593116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593116, url, valid)

proc call*(call_593117: Call_GetCopySnapshot_593100; TargetSnapshotName: string;
          SourceSnapshotName: string; KmsKeyId: string = "";
          TargetBucket: string = ""; Action: string = "CopySnapshot";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: string (required)
  var query_593118 = newJObject()
  add(query_593118, "KmsKeyId", newJString(KmsKeyId))
  add(query_593118, "TargetBucket", newJString(TargetBucket))
  add(query_593118, "Action", newJString(Action))
  add(query_593118, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_593118, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_593118, "Version", newJString(Version))
  result = call_593117.call(nil, query_593118, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_593100(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_593101,
    base: "/", url: url_GetCopySnapshot_593102, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_593177 = ref object of OpenApiRestCall_592364
proc url_PostCreateCacheCluster_593179(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheCluster_593178(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593180 = query.getOrDefault("Action")
  valid_593180 = validateParameter(valid_593180, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_593180 != nil:
    section.add "Action", valid_593180
  var valid_593181 = query.getOrDefault("Version")
  valid_593181 = validateParameter(valid_593181, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593181 != nil:
    section.add "Version", valid_593181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593182 = header.getOrDefault("X-Amz-Signature")
  valid_593182 = validateParameter(valid_593182, JString, required = false,
                                 default = nil)
  if valid_593182 != nil:
    section.add "X-Amz-Signature", valid_593182
  var valid_593183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593183 = validateParameter(valid_593183, JString, required = false,
                                 default = nil)
  if valid_593183 != nil:
    section.add "X-Amz-Content-Sha256", valid_593183
  var valid_593184 = header.getOrDefault("X-Amz-Date")
  valid_593184 = validateParameter(valid_593184, JString, required = false,
                                 default = nil)
  if valid_593184 != nil:
    section.add "X-Amz-Date", valid_593184
  var valid_593185 = header.getOrDefault("X-Amz-Credential")
  valid_593185 = validateParameter(valid_593185, JString, required = false,
                                 default = nil)
  if valid_593185 != nil:
    section.add "X-Amz-Credential", valid_593185
  var valid_593186 = header.getOrDefault("X-Amz-Security-Token")
  valid_593186 = validateParameter(valid_593186, JString, required = false,
                                 default = nil)
  if valid_593186 != nil:
    section.add "X-Amz-Security-Token", valid_593186
  var valid_593187 = header.getOrDefault("X-Amz-Algorithm")
  valid_593187 = validateParameter(valid_593187, JString, required = false,
                                 default = nil)
  if valid_593187 != nil:
    section.add "X-Amz-Algorithm", valid_593187
  var valid_593188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593188 = validateParameter(valid_593188, JString, required = false,
                                 default = nil)
  if valid_593188 != nil:
    section.add "X-Amz-SignedHeaders", valid_593188
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_593189 = formData.getOrDefault("SecurityGroupIds")
  valid_593189 = validateParameter(valid_593189, JArray, required = false,
                                 default = nil)
  if valid_593189 != nil:
    section.add "SecurityGroupIds", valid_593189
  var valid_593190 = formData.getOrDefault("ReplicationGroupId")
  valid_593190 = validateParameter(valid_593190, JString, required = false,
                                 default = nil)
  if valid_593190 != nil:
    section.add "ReplicationGroupId", valid_593190
  var valid_593191 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_593191 = validateParameter(valid_593191, JString, required = false,
                                 default = nil)
  if valid_593191 != nil:
    section.add "PreferredMaintenanceWindow", valid_593191
  var valid_593192 = formData.getOrDefault("Port")
  valid_593192 = validateParameter(valid_593192, JInt, required = false, default = nil)
  if valid_593192 != nil:
    section.add "Port", valid_593192
  var valid_593193 = formData.getOrDefault("NumCacheNodes")
  valid_593193 = validateParameter(valid_593193, JInt, required = false, default = nil)
  if valid_593193 != nil:
    section.add "NumCacheNodes", valid_593193
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_593194 = formData.getOrDefault("CacheClusterId")
  valid_593194 = validateParameter(valid_593194, JString, required = true,
                                 default = nil)
  if valid_593194 != nil:
    section.add "CacheClusterId", valid_593194
  var valid_593195 = formData.getOrDefault("NotificationTopicArn")
  valid_593195 = validateParameter(valid_593195, JString, required = false,
                                 default = nil)
  if valid_593195 != nil:
    section.add "NotificationTopicArn", valid_593195
  var valid_593196 = formData.getOrDefault("EngineVersion")
  valid_593196 = validateParameter(valid_593196, JString, required = false,
                                 default = nil)
  if valid_593196 != nil:
    section.add "EngineVersion", valid_593196
  var valid_593197 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_593197 = validateParameter(valid_593197, JString, required = false,
                                 default = nil)
  if valid_593197 != nil:
    section.add "PreferredAvailabilityZone", valid_593197
  var valid_593198 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_593198 = validateParameter(valid_593198, JArray, required = false,
                                 default = nil)
  if valid_593198 != nil:
    section.add "PreferredAvailabilityZones", valid_593198
  var valid_593199 = formData.getOrDefault("AZMode")
  valid_593199 = validateParameter(valid_593199, JString, required = false,
                                 default = newJString("single-az"))
  if valid_593199 != nil:
    section.add "AZMode", valid_593199
  var valid_593200 = formData.getOrDefault("Engine")
  valid_593200 = validateParameter(valid_593200, JString, required = false,
                                 default = nil)
  if valid_593200 != nil:
    section.add "Engine", valid_593200
  var valid_593201 = formData.getOrDefault("CacheParameterGroupName")
  valid_593201 = validateParameter(valid_593201, JString, required = false,
                                 default = nil)
  if valid_593201 != nil:
    section.add "CacheParameterGroupName", valid_593201
  var valid_593202 = formData.getOrDefault("SnapshotName")
  valid_593202 = validateParameter(valid_593202, JString, required = false,
                                 default = nil)
  if valid_593202 != nil:
    section.add "SnapshotName", valid_593202
  var valid_593203 = formData.getOrDefault("SnapshotArns")
  valid_593203 = validateParameter(valid_593203, JArray, required = false,
                                 default = nil)
  if valid_593203 != nil:
    section.add "SnapshotArns", valid_593203
  var valid_593204 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_593204 = validateParameter(valid_593204, JBool, required = false, default = nil)
  if valid_593204 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593204
  var valid_593205 = formData.getOrDefault("CacheSubnetGroupName")
  valid_593205 = validateParameter(valid_593205, JString, required = false,
                                 default = nil)
  if valid_593205 != nil:
    section.add "CacheSubnetGroupName", valid_593205
  var valid_593206 = formData.getOrDefault("AuthToken")
  valid_593206 = validateParameter(valid_593206, JString, required = false,
                                 default = nil)
  if valid_593206 != nil:
    section.add "AuthToken", valid_593206
  var valid_593207 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_593207 = validateParameter(valid_593207, JArray, required = false,
                                 default = nil)
  if valid_593207 != nil:
    section.add "CacheSecurityGroupNames", valid_593207
  var valid_593208 = formData.getOrDefault("Tags")
  valid_593208 = validateParameter(valid_593208, JArray, required = false,
                                 default = nil)
  if valid_593208 != nil:
    section.add "Tags", valid_593208
  var valid_593209 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_593209 = validateParameter(valid_593209, JInt, required = false, default = nil)
  if valid_593209 != nil:
    section.add "SnapshotRetentionLimit", valid_593209
  var valid_593210 = formData.getOrDefault("CacheNodeType")
  valid_593210 = validateParameter(valid_593210, JString, required = false,
                                 default = nil)
  if valid_593210 != nil:
    section.add "CacheNodeType", valid_593210
  var valid_593211 = formData.getOrDefault("SnapshotWindow")
  valid_593211 = validateParameter(valid_593211, JString, required = false,
                                 default = nil)
  if valid_593211 != nil:
    section.add "SnapshotWindow", valid_593211
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593212: Call_PostCreateCacheCluster_593177; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_593212.validator(path, query, header, formData, body)
  let scheme = call_593212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593212.url(scheme.get, call_593212.host, call_593212.base,
                         call_593212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593212, url, valid)

proc call*(call_593213: Call_PostCreateCacheCluster_593177; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; ReplicationGroupId: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          NumCacheNodes: int = 0; NotificationTopicArn: string = "";
          EngineVersion: string = ""; PreferredAvailabilityZone: string = "";
          PreferredAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          Engine: string = ""; CacheParameterGroupName: string = "";
          SnapshotName: string = ""; SnapshotArns: JsonNode = nil;
          AutoMinorVersionUpgrade: bool = false; CacheSubnetGroupName: string = "";
          Action: string = "CreateCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; Version: string = "2015-02-02";
          CacheNodeType: string = ""; SnapshotWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_593214 = newJObject()
  var formData_593215 = newJObject()
  if SecurityGroupIds != nil:
    formData_593215.add "SecurityGroupIds", SecurityGroupIds
  add(formData_593215, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_593215, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_593215, "Port", newJInt(Port))
  add(formData_593215, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_593215, "CacheClusterId", newJString(CacheClusterId))
  add(formData_593215, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_593215, "EngineVersion", newJString(EngineVersion))
  add(formData_593215, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if PreferredAvailabilityZones != nil:
    formData_593215.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(formData_593215, "AZMode", newJString(AZMode))
  add(formData_593215, "Engine", newJString(Engine))
  add(formData_593215, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_593215, "SnapshotName", newJString(SnapshotName))
  if SnapshotArns != nil:
    formData_593215.add "SnapshotArns", SnapshotArns
  add(formData_593215, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_593215, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593214, "Action", newJString(Action))
  add(formData_593215, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_593215.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_593215.add "Tags", Tags
  add(formData_593215, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_593214, "Version", newJString(Version))
  add(formData_593215, "CacheNodeType", newJString(CacheNodeType))
  add(formData_593215, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_593213.call(nil, query_593214, nil, formData_593215, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_593177(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_593178, base: "/",
    url: url_PostCreateCacheCluster_593179, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_593139 = ref object of OpenApiRestCall_592364
proc url_GetCreateCacheCluster_593141(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheCluster_593140(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_593142 = query.getOrDefault("SnapshotArns")
  valid_593142 = validateParameter(valid_593142, JArray, required = false,
                                 default = nil)
  if valid_593142 != nil:
    section.add "SnapshotArns", valid_593142
  var valid_593143 = query.getOrDefault("AuthToken")
  valid_593143 = validateParameter(valid_593143, JString, required = false,
                                 default = nil)
  if valid_593143 != nil:
    section.add "AuthToken", valid_593143
  var valid_593144 = query.getOrDefault("Engine")
  valid_593144 = validateParameter(valid_593144, JString, required = false,
                                 default = nil)
  if valid_593144 != nil:
    section.add "Engine", valid_593144
  var valid_593145 = query.getOrDefault("CacheParameterGroupName")
  valid_593145 = validateParameter(valid_593145, JString, required = false,
                                 default = nil)
  if valid_593145 != nil:
    section.add "CacheParameterGroupName", valid_593145
  var valid_593146 = query.getOrDefault("Tags")
  valid_593146 = validateParameter(valid_593146, JArray, required = false,
                                 default = nil)
  if valid_593146 != nil:
    section.add "Tags", valid_593146
  var valid_593147 = query.getOrDefault("AZMode")
  valid_593147 = validateParameter(valid_593147, JString, required = false,
                                 default = newJString("single-az"))
  if valid_593147 != nil:
    section.add "AZMode", valid_593147
  var valid_593148 = query.getOrDefault("NumCacheNodes")
  valid_593148 = validateParameter(valid_593148, JInt, required = false, default = nil)
  if valid_593148 != nil:
    section.add "NumCacheNodes", valid_593148
  var valid_593149 = query.getOrDefault("SnapshotRetentionLimit")
  valid_593149 = validateParameter(valid_593149, JInt, required = false, default = nil)
  if valid_593149 != nil:
    section.add "SnapshotRetentionLimit", valid_593149
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_593150 = query.getOrDefault("CacheClusterId")
  valid_593150 = validateParameter(valid_593150, JString, required = true,
                                 default = nil)
  if valid_593150 != nil:
    section.add "CacheClusterId", valid_593150
  var valid_593151 = query.getOrDefault("PreferredAvailabilityZone")
  valid_593151 = validateParameter(valid_593151, JString, required = false,
                                 default = nil)
  if valid_593151 != nil:
    section.add "PreferredAvailabilityZone", valid_593151
  var valid_593152 = query.getOrDefault("CacheSecurityGroupNames")
  valid_593152 = validateParameter(valid_593152, JArray, required = false,
                                 default = nil)
  if valid_593152 != nil:
    section.add "CacheSecurityGroupNames", valid_593152
  var valid_593153 = query.getOrDefault("CacheNodeType")
  valid_593153 = validateParameter(valid_593153, JString, required = false,
                                 default = nil)
  if valid_593153 != nil:
    section.add "CacheNodeType", valid_593153
  var valid_593154 = query.getOrDefault("EngineVersion")
  valid_593154 = validateParameter(valid_593154, JString, required = false,
                                 default = nil)
  if valid_593154 != nil:
    section.add "EngineVersion", valid_593154
  var valid_593155 = query.getOrDefault("Action")
  valid_593155 = validateParameter(valid_593155, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_593155 != nil:
    section.add "Action", valid_593155
  var valid_593156 = query.getOrDefault("Port")
  valid_593156 = validateParameter(valid_593156, JInt, required = false, default = nil)
  if valid_593156 != nil:
    section.add "Port", valid_593156
  var valid_593157 = query.getOrDefault("ReplicationGroupId")
  valid_593157 = validateParameter(valid_593157, JString, required = false,
                                 default = nil)
  if valid_593157 != nil:
    section.add "ReplicationGroupId", valid_593157
  var valid_593158 = query.getOrDefault("CacheSubnetGroupName")
  valid_593158 = validateParameter(valid_593158, JString, required = false,
                                 default = nil)
  if valid_593158 != nil:
    section.add "CacheSubnetGroupName", valid_593158
  var valid_593159 = query.getOrDefault("NotificationTopicArn")
  valid_593159 = validateParameter(valid_593159, JString, required = false,
                                 default = nil)
  if valid_593159 != nil:
    section.add "NotificationTopicArn", valid_593159
  var valid_593160 = query.getOrDefault("PreferredAvailabilityZones")
  valid_593160 = validateParameter(valid_593160, JArray, required = false,
                                 default = nil)
  if valid_593160 != nil:
    section.add "PreferredAvailabilityZones", valid_593160
  var valid_593161 = query.getOrDefault("Version")
  valid_593161 = validateParameter(valid_593161, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593161 != nil:
    section.add "Version", valid_593161
  var valid_593162 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_593162 = validateParameter(valid_593162, JString, required = false,
                                 default = nil)
  if valid_593162 != nil:
    section.add "PreferredMaintenanceWindow", valid_593162
  var valid_593163 = query.getOrDefault("SnapshotName")
  valid_593163 = validateParameter(valid_593163, JString, required = false,
                                 default = nil)
  if valid_593163 != nil:
    section.add "SnapshotName", valid_593163
  var valid_593164 = query.getOrDefault("SnapshotWindow")
  valid_593164 = validateParameter(valid_593164, JString, required = false,
                                 default = nil)
  if valid_593164 != nil:
    section.add "SnapshotWindow", valid_593164
  var valid_593165 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_593165 = validateParameter(valid_593165, JBool, required = false, default = nil)
  if valid_593165 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593165
  var valid_593166 = query.getOrDefault("SecurityGroupIds")
  valid_593166 = validateParameter(valid_593166, JArray, required = false,
                                 default = nil)
  if valid_593166 != nil:
    section.add "SecurityGroupIds", valid_593166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593167 = header.getOrDefault("X-Amz-Signature")
  valid_593167 = validateParameter(valid_593167, JString, required = false,
                                 default = nil)
  if valid_593167 != nil:
    section.add "X-Amz-Signature", valid_593167
  var valid_593168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593168 = validateParameter(valid_593168, JString, required = false,
                                 default = nil)
  if valid_593168 != nil:
    section.add "X-Amz-Content-Sha256", valid_593168
  var valid_593169 = header.getOrDefault("X-Amz-Date")
  valid_593169 = validateParameter(valid_593169, JString, required = false,
                                 default = nil)
  if valid_593169 != nil:
    section.add "X-Amz-Date", valid_593169
  var valid_593170 = header.getOrDefault("X-Amz-Credential")
  valid_593170 = validateParameter(valid_593170, JString, required = false,
                                 default = nil)
  if valid_593170 != nil:
    section.add "X-Amz-Credential", valid_593170
  var valid_593171 = header.getOrDefault("X-Amz-Security-Token")
  valid_593171 = validateParameter(valid_593171, JString, required = false,
                                 default = nil)
  if valid_593171 != nil:
    section.add "X-Amz-Security-Token", valid_593171
  var valid_593172 = header.getOrDefault("X-Amz-Algorithm")
  valid_593172 = validateParameter(valid_593172, JString, required = false,
                                 default = nil)
  if valid_593172 != nil:
    section.add "X-Amz-Algorithm", valid_593172
  var valid_593173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593173 = validateParameter(valid_593173, JString, required = false,
                                 default = nil)
  if valid_593173 != nil:
    section.add "X-Amz-SignedHeaders", valid_593173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593174: Call_GetCreateCacheCluster_593139; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_593174.validator(path, query, header, formData, body)
  let scheme = call_593174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593174.url(scheme.get, call_593174.host, call_593174.base,
                         call_593174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593174, url, valid)

proc call*(call_593175: Call_GetCreateCacheCluster_593139; CacheClusterId: string;
          SnapshotArns: JsonNode = nil; AuthToken: string = ""; Engine: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          AZMode: string = "single-az"; NumCacheNodes: int = 0;
          SnapshotRetentionLimit: int = 0; PreferredAvailabilityZone: string = "";
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "CreateCacheCluster";
          Port: int = 0; ReplicationGroupId: string = "";
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotName: string = ""; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_593176 = newJObject()
  if SnapshotArns != nil:
    query_593176.add "SnapshotArns", SnapshotArns
  add(query_593176, "AuthToken", newJString(AuthToken))
  add(query_593176, "Engine", newJString(Engine))
  add(query_593176, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_593176.add "Tags", Tags
  add(query_593176, "AZMode", newJString(AZMode))
  add(query_593176, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_593176, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_593176, "CacheClusterId", newJString(CacheClusterId))
  add(query_593176, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if CacheSecurityGroupNames != nil:
    query_593176.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_593176, "CacheNodeType", newJString(CacheNodeType))
  add(query_593176, "EngineVersion", newJString(EngineVersion))
  add(query_593176, "Action", newJString(Action))
  add(query_593176, "Port", newJInt(Port))
  add(query_593176, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593176, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593176, "NotificationTopicArn", newJString(NotificationTopicArn))
  if PreferredAvailabilityZones != nil:
    query_593176.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_593176, "Version", newJString(Version))
  add(query_593176, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_593176, "SnapshotName", newJString(SnapshotName))
  add(query_593176, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_593176, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_593176.add "SecurityGroupIds", SecurityGroupIds
  result = call_593175.call(nil, query_593176, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_593139(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_593140, base: "/",
    url: url_GetCreateCacheCluster_593141, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_593234 = ref object of OpenApiRestCall_592364
proc url_PostCreateCacheParameterGroup_593236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheParameterGroup_593235(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593237 = query.getOrDefault("Action")
  valid_593237 = validateParameter(valid_593237, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_593237 != nil:
    section.add "Action", valid_593237
  var valid_593238 = query.getOrDefault("Version")
  valid_593238 = validateParameter(valid_593238, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593238 != nil:
    section.add "Version", valid_593238
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593239 = header.getOrDefault("X-Amz-Signature")
  valid_593239 = validateParameter(valid_593239, JString, required = false,
                                 default = nil)
  if valid_593239 != nil:
    section.add "X-Amz-Signature", valid_593239
  var valid_593240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593240 = validateParameter(valid_593240, JString, required = false,
                                 default = nil)
  if valid_593240 != nil:
    section.add "X-Amz-Content-Sha256", valid_593240
  var valid_593241 = header.getOrDefault("X-Amz-Date")
  valid_593241 = validateParameter(valid_593241, JString, required = false,
                                 default = nil)
  if valid_593241 != nil:
    section.add "X-Amz-Date", valid_593241
  var valid_593242 = header.getOrDefault("X-Amz-Credential")
  valid_593242 = validateParameter(valid_593242, JString, required = false,
                                 default = nil)
  if valid_593242 != nil:
    section.add "X-Amz-Credential", valid_593242
  var valid_593243 = header.getOrDefault("X-Amz-Security-Token")
  valid_593243 = validateParameter(valid_593243, JString, required = false,
                                 default = nil)
  if valid_593243 != nil:
    section.add "X-Amz-Security-Token", valid_593243
  var valid_593244 = header.getOrDefault("X-Amz-Algorithm")
  valid_593244 = validateParameter(valid_593244, JString, required = false,
                                 default = nil)
  if valid_593244 != nil:
    section.add "X-Amz-Algorithm", valid_593244
  var valid_593245 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593245 = validateParameter(valid_593245, JString, required = false,
                                 default = nil)
  if valid_593245 != nil:
    section.add "X-Amz-SignedHeaders", valid_593245
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_593246 = formData.getOrDefault("Description")
  valid_593246 = validateParameter(valid_593246, JString, required = true,
                                 default = nil)
  if valid_593246 != nil:
    section.add "Description", valid_593246
  var valid_593247 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_593247 = validateParameter(valid_593247, JString, required = true,
                                 default = nil)
  if valid_593247 != nil:
    section.add "CacheParameterGroupFamily", valid_593247
  var valid_593248 = formData.getOrDefault("CacheParameterGroupName")
  valid_593248 = validateParameter(valid_593248, JString, required = true,
                                 default = nil)
  if valid_593248 != nil:
    section.add "CacheParameterGroupName", valid_593248
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593249: Call_PostCreateCacheParameterGroup_593234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_593249.validator(path, query, header, formData, body)
  let scheme = call_593249.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593249.url(scheme.get, call_593249.host, call_593249.base,
                         call_593249.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593249, url, valid)

proc call*(call_593250: Call_PostCreateCacheParameterGroup_593234;
          Description: string; CacheParameterGroupFamily: string;
          CacheParameterGroupName: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593251 = newJObject()
  var formData_593252 = newJObject()
  add(formData_593252, "Description", newJString(Description))
  add(formData_593252, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_593252, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_593251, "Action", newJString(Action))
  add(query_593251, "Version", newJString(Version))
  result = call_593250.call(nil, query_593251, nil, formData_593252, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_593234(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_593235, base: "/",
    url: url_PostCreateCacheParameterGroup_593236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_593216 = ref object of OpenApiRestCall_592364
proc url_GetCreateCacheParameterGroup_593218(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheParameterGroup_593217(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593219 = query.getOrDefault("CacheParameterGroupName")
  valid_593219 = validateParameter(valid_593219, JString, required = true,
                                 default = nil)
  if valid_593219 != nil:
    section.add "CacheParameterGroupName", valid_593219
  var valid_593220 = query.getOrDefault("CacheParameterGroupFamily")
  valid_593220 = validateParameter(valid_593220, JString, required = true,
                                 default = nil)
  if valid_593220 != nil:
    section.add "CacheParameterGroupFamily", valid_593220
  var valid_593221 = query.getOrDefault("Action")
  valid_593221 = validateParameter(valid_593221, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_593221 != nil:
    section.add "Action", valid_593221
  var valid_593222 = query.getOrDefault("Description")
  valid_593222 = validateParameter(valid_593222, JString, required = true,
                                 default = nil)
  if valid_593222 != nil:
    section.add "Description", valid_593222
  var valid_593223 = query.getOrDefault("Version")
  valid_593223 = validateParameter(valid_593223, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593223 != nil:
    section.add "Version", valid_593223
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593224 = header.getOrDefault("X-Amz-Signature")
  valid_593224 = validateParameter(valid_593224, JString, required = false,
                                 default = nil)
  if valid_593224 != nil:
    section.add "X-Amz-Signature", valid_593224
  var valid_593225 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593225 = validateParameter(valid_593225, JString, required = false,
                                 default = nil)
  if valid_593225 != nil:
    section.add "X-Amz-Content-Sha256", valid_593225
  var valid_593226 = header.getOrDefault("X-Amz-Date")
  valid_593226 = validateParameter(valid_593226, JString, required = false,
                                 default = nil)
  if valid_593226 != nil:
    section.add "X-Amz-Date", valid_593226
  var valid_593227 = header.getOrDefault("X-Amz-Credential")
  valid_593227 = validateParameter(valid_593227, JString, required = false,
                                 default = nil)
  if valid_593227 != nil:
    section.add "X-Amz-Credential", valid_593227
  var valid_593228 = header.getOrDefault("X-Amz-Security-Token")
  valid_593228 = validateParameter(valid_593228, JString, required = false,
                                 default = nil)
  if valid_593228 != nil:
    section.add "X-Amz-Security-Token", valid_593228
  var valid_593229 = header.getOrDefault("X-Amz-Algorithm")
  valid_593229 = validateParameter(valid_593229, JString, required = false,
                                 default = nil)
  if valid_593229 != nil:
    section.add "X-Amz-Algorithm", valid_593229
  var valid_593230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593230 = validateParameter(valid_593230, JString, required = false,
                                 default = nil)
  if valid_593230 != nil:
    section.add "X-Amz-SignedHeaders", valid_593230
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593231: Call_GetCreateCacheParameterGroup_593216; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_593231.validator(path, query, header, formData, body)
  let scheme = call_593231.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593231.url(scheme.get, call_593231.host, call_593231.base,
                         call_593231.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593231, url, valid)

proc call*(call_593232: Call_GetCreateCacheParameterGroup_593216;
          CacheParameterGroupName: string; CacheParameterGroupFamily: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: string (required)
  var query_593233 = newJObject()
  add(query_593233, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_593233, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_593233, "Action", newJString(Action))
  add(query_593233, "Description", newJString(Description))
  add(query_593233, "Version", newJString(Version))
  result = call_593232.call(nil, query_593233, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_593216(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_593217, base: "/",
    url: url_GetCreateCacheParameterGroup_593218,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_593270 = ref object of OpenApiRestCall_592364
proc url_PostCreateCacheSecurityGroup_593272(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSecurityGroup_593271(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593273 = query.getOrDefault("Action")
  valid_593273 = validateParameter(valid_593273, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_593273 != nil:
    section.add "Action", valid_593273
  var valid_593274 = query.getOrDefault("Version")
  valid_593274 = validateParameter(valid_593274, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593274 != nil:
    section.add "Version", valid_593274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593275 = header.getOrDefault("X-Amz-Signature")
  valid_593275 = validateParameter(valid_593275, JString, required = false,
                                 default = nil)
  if valid_593275 != nil:
    section.add "X-Amz-Signature", valid_593275
  var valid_593276 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593276 = validateParameter(valid_593276, JString, required = false,
                                 default = nil)
  if valid_593276 != nil:
    section.add "X-Amz-Content-Sha256", valid_593276
  var valid_593277 = header.getOrDefault("X-Amz-Date")
  valid_593277 = validateParameter(valid_593277, JString, required = false,
                                 default = nil)
  if valid_593277 != nil:
    section.add "X-Amz-Date", valid_593277
  var valid_593278 = header.getOrDefault("X-Amz-Credential")
  valid_593278 = validateParameter(valid_593278, JString, required = false,
                                 default = nil)
  if valid_593278 != nil:
    section.add "X-Amz-Credential", valid_593278
  var valid_593279 = header.getOrDefault("X-Amz-Security-Token")
  valid_593279 = validateParameter(valid_593279, JString, required = false,
                                 default = nil)
  if valid_593279 != nil:
    section.add "X-Amz-Security-Token", valid_593279
  var valid_593280 = header.getOrDefault("X-Amz-Algorithm")
  valid_593280 = validateParameter(valid_593280, JString, required = false,
                                 default = nil)
  if valid_593280 != nil:
    section.add "X-Amz-Algorithm", valid_593280
  var valid_593281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593281 = validateParameter(valid_593281, JString, required = false,
                                 default = nil)
  if valid_593281 != nil:
    section.add "X-Amz-SignedHeaders", valid_593281
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_593282 = formData.getOrDefault("Description")
  valid_593282 = validateParameter(valid_593282, JString, required = true,
                                 default = nil)
  if valid_593282 != nil:
    section.add "Description", valid_593282
  var valid_593283 = formData.getOrDefault("CacheSecurityGroupName")
  valid_593283 = validateParameter(valid_593283, JString, required = true,
                                 default = nil)
  if valid_593283 != nil:
    section.add "CacheSecurityGroupName", valid_593283
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593284: Call_PostCreateCacheSecurityGroup_593270; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_593284.validator(path, query, header, formData, body)
  let scheme = call_593284.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593284.url(scheme.get, call_593284.host, call_593284.base,
                         call_593284.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593284, url, valid)

proc call*(call_593285: Call_PostCreateCacheSecurityGroup_593270;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593286 = newJObject()
  var formData_593287 = newJObject()
  add(formData_593287, "Description", newJString(Description))
  add(formData_593287, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_593286, "Action", newJString(Action))
  add(query_593286, "Version", newJString(Version))
  result = call_593285.call(nil, query_593286, nil, formData_593287, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_593270(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_593271, base: "/",
    url: url_PostCreateCacheSecurityGroup_593272,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_593253 = ref object of OpenApiRestCall_592364
proc url_GetCreateCacheSecurityGroup_593255(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSecurityGroup_593254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593256 = query.getOrDefault("Action")
  valid_593256 = validateParameter(valid_593256, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_593256 != nil:
    section.add "Action", valid_593256
  var valid_593257 = query.getOrDefault("Description")
  valid_593257 = validateParameter(valid_593257, JString, required = true,
                                 default = nil)
  if valid_593257 != nil:
    section.add "Description", valid_593257
  var valid_593258 = query.getOrDefault("CacheSecurityGroupName")
  valid_593258 = validateParameter(valid_593258, JString, required = true,
                                 default = nil)
  if valid_593258 != nil:
    section.add "CacheSecurityGroupName", valid_593258
  var valid_593259 = query.getOrDefault("Version")
  valid_593259 = validateParameter(valid_593259, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593259 != nil:
    section.add "Version", valid_593259
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593260 = header.getOrDefault("X-Amz-Signature")
  valid_593260 = validateParameter(valid_593260, JString, required = false,
                                 default = nil)
  if valid_593260 != nil:
    section.add "X-Amz-Signature", valid_593260
  var valid_593261 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593261 = validateParameter(valid_593261, JString, required = false,
                                 default = nil)
  if valid_593261 != nil:
    section.add "X-Amz-Content-Sha256", valid_593261
  var valid_593262 = header.getOrDefault("X-Amz-Date")
  valid_593262 = validateParameter(valid_593262, JString, required = false,
                                 default = nil)
  if valid_593262 != nil:
    section.add "X-Amz-Date", valid_593262
  var valid_593263 = header.getOrDefault("X-Amz-Credential")
  valid_593263 = validateParameter(valid_593263, JString, required = false,
                                 default = nil)
  if valid_593263 != nil:
    section.add "X-Amz-Credential", valid_593263
  var valid_593264 = header.getOrDefault("X-Amz-Security-Token")
  valid_593264 = validateParameter(valid_593264, JString, required = false,
                                 default = nil)
  if valid_593264 != nil:
    section.add "X-Amz-Security-Token", valid_593264
  var valid_593265 = header.getOrDefault("X-Amz-Algorithm")
  valid_593265 = validateParameter(valid_593265, JString, required = false,
                                 default = nil)
  if valid_593265 != nil:
    section.add "X-Amz-Algorithm", valid_593265
  var valid_593266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593266 = validateParameter(valid_593266, JString, required = false,
                                 default = nil)
  if valid_593266 != nil:
    section.add "X-Amz-SignedHeaders", valid_593266
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593267: Call_GetCreateCacheSecurityGroup_593253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_593267.validator(path, query, header, formData, body)
  let scheme = call_593267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593267.url(scheme.get, call_593267.host, call_593267.base,
                         call_593267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593267, url, valid)

proc call*(call_593268: Call_GetCreateCacheSecurityGroup_593253;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: string (required)
  var query_593269 = newJObject()
  add(query_593269, "Action", newJString(Action))
  add(query_593269, "Description", newJString(Description))
  add(query_593269, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_593269, "Version", newJString(Version))
  result = call_593268.call(nil, query_593269, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_593253(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_593254, base: "/",
    url: url_GetCreateCacheSecurityGroup_593255,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_593306 = ref object of OpenApiRestCall_592364
proc url_PostCreateCacheSubnetGroup_593308(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateCacheSubnetGroup_593307(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593309 = query.getOrDefault("Action")
  valid_593309 = validateParameter(valid_593309, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_593309 != nil:
    section.add "Action", valid_593309
  var valid_593310 = query.getOrDefault("Version")
  valid_593310 = validateParameter(valid_593310, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593310 != nil:
    section.add "Version", valid_593310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593311 = header.getOrDefault("X-Amz-Signature")
  valid_593311 = validateParameter(valid_593311, JString, required = false,
                                 default = nil)
  if valid_593311 != nil:
    section.add "X-Amz-Signature", valid_593311
  var valid_593312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593312 = validateParameter(valid_593312, JString, required = false,
                                 default = nil)
  if valid_593312 != nil:
    section.add "X-Amz-Content-Sha256", valid_593312
  var valid_593313 = header.getOrDefault("X-Amz-Date")
  valid_593313 = validateParameter(valid_593313, JString, required = false,
                                 default = nil)
  if valid_593313 != nil:
    section.add "X-Amz-Date", valid_593313
  var valid_593314 = header.getOrDefault("X-Amz-Credential")
  valid_593314 = validateParameter(valid_593314, JString, required = false,
                                 default = nil)
  if valid_593314 != nil:
    section.add "X-Amz-Credential", valid_593314
  var valid_593315 = header.getOrDefault("X-Amz-Security-Token")
  valid_593315 = validateParameter(valid_593315, JString, required = false,
                                 default = nil)
  if valid_593315 != nil:
    section.add "X-Amz-Security-Token", valid_593315
  var valid_593316 = header.getOrDefault("X-Amz-Algorithm")
  valid_593316 = validateParameter(valid_593316, JString, required = false,
                                 default = nil)
  if valid_593316 != nil:
    section.add "X-Amz-Algorithm", valid_593316
  var valid_593317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593317 = validateParameter(valid_593317, JString, required = false,
                                 default = nil)
  if valid_593317 != nil:
    section.add "X-Amz-SignedHeaders", valid_593317
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_593318 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_593318 = validateParameter(valid_593318, JString, required = true,
                                 default = nil)
  if valid_593318 != nil:
    section.add "CacheSubnetGroupDescription", valid_593318
  var valid_593319 = formData.getOrDefault("CacheSubnetGroupName")
  valid_593319 = validateParameter(valid_593319, JString, required = true,
                                 default = nil)
  if valid_593319 != nil:
    section.add "CacheSubnetGroupName", valid_593319
  var valid_593320 = formData.getOrDefault("SubnetIds")
  valid_593320 = validateParameter(valid_593320, JArray, required = true, default = nil)
  if valid_593320 != nil:
    section.add "SubnetIds", valid_593320
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593321: Call_PostCreateCacheSubnetGroup_593306; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_593321.validator(path, query, header, formData, body)
  let scheme = call_593321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593321.url(scheme.get, call_593321.host, call_593321.base,
                         call_593321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593321, url, valid)

proc call*(call_593322: Call_PostCreateCacheSubnetGroup_593306;
          CacheSubnetGroupDescription: string; CacheSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  var query_593323 = newJObject()
  var formData_593324 = newJObject()
  add(formData_593324, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_593324, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593323, "Action", newJString(Action))
  add(query_593323, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_593324.add "SubnetIds", SubnetIds
  result = call_593322.call(nil, query_593323, nil, formData_593324, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_593306(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_593307, base: "/",
    url: url_PostCreateCacheSubnetGroup_593308,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_593288 = ref object of OpenApiRestCall_592364
proc url_GetCreateCacheSubnetGroup_593290(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateCacheSubnetGroup_593289(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_593291 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_593291 = validateParameter(valid_593291, JString, required = true,
                                 default = nil)
  if valid_593291 != nil:
    section.add "CacheSubnetGroupDescription", valid_593291
  var valid_593292 = query.getOrDefault("SubnetIds")
  valid_593292 = validateParameter(valid_593292, JArray, required = true, default = nil)
  if valid_593292 != nil:
    section.add "SubnetIds", valid_593292
  var valid_593293 = query.getOrDefault("Action")
  valid_593293 = validateParameter(valid_593293, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_593293 != nil:
    section.add "Action", valid_593293
  var valid_593294 = query.getOrDefault("CacheSubnetGroupName")
  valid_593294 = validateParameter(valid_593294, JString, required = true,
                                 default = nil)
  if valid_593294 != nil:
    section.add "CacheSubnetGroupName", valid_593294
  var valid_593295 = query.getOrDefault("Version")
  valid_593295 = validateParameter(valid_593295, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593295 != nil:
    section.add "Version", valid_593295
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593296 = header.getOrDefault("X-Amz-Signature")
  valid_593296 = validateParameter(valid_593296, JString, required = false,
                                 default = nil)
  if valid_593296 != nil:
    section.add "X-Amz-Signature", valid_593296
  var valid_593297 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593297 = validateParameter(valid_593297, JString, required = false,
                                 default = nil)
  if valid_593297 != nil:
    section.add "X-Amz-Content-Sha256", valid_593297
  var valid_593298 = header.getOrDefault("X-Amz-Date")
  valid_593298 = validateParameter(valid_593298, JString, required = false,
                                 default = nil)
  if valid_593298 != nil:
    section.add "X-Amz-Date", valid_593298
  var valid_593299 = header.getOrDefault("X-Amz-Credential")
  valid_593299 = validateParameter(valid_593299, JString, required = false,
                                 default = nil)
  if valid_593299 != nil:
    section.add "X-Amz-Credential", valid_593299
  var valid_593300 = header.getOrDefault("X-Amz-Security-Token")
  valid_593300 = validateParameter(valid_593300, JString, required = false,
                                 default = nil)
  if valid_593300 != nil:
    section.add "X-Amz-Security-Token", valid_593300
  var valid_593301 = header.getOrDefault("X-Amz-Algorithm")
  valid_593301 = validateParameter(valid_593301, JString, required = false,
                                 default = nil)
  if valid_593301 != nil:
    section.add "X-Amz-Algorithm", valid_593301
  var valid_593302 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593302 = validateParameter(valid_593302, JString, required = false,
                                 default = nil)
  if valid_593302 != nil:
    section.add "X-Amz-SignedHeaders", valid_593302
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593303: Call_GetCreateCacheSubnetGroup_593288; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_593303.validator(path, query, header, formData, body)
  let scheme = call_593303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593303.url(scheme.get, call_593303.host, call_593303.base,
                         call_593303.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593303, url, valid)

proc call*(call_593304: Call_GetCreateCacheSubnetGroup_593288;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_593305 = newJObject()
  add(query_593305, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_593305.add "SubnetIds", SubnetIds
  add(query_593305, "Action", newJString(Action))
  add(query_593305, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593305, "Version", newJString(Version))
  result = call_593304.call(nil, query_593305, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_593288(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_593289, base: "/",
    url: url_GetCreateCacheSubnetGroup_593290,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_593369 = ref object of OpenApiRestCall_592364
proc url_PostCreateReplicationGroup_593371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateReplicationGroup_593370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593372 = query.getOrDefault("Action")
  valid_593372 = validateParameter(valid_593372, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_593372 != nil:
    section.add "Action", valid_593372
  var valid_593373 = query.getOrDefault("Version")
  valid_593373 = validateParameter(valid_593373, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593373 != nil:
    section.add "Version", valid_593373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593374 = header.getOrDefault("X-Amz-Signature")
  valid_593374 = validateParameter(valid_593374, JString, required = false,
                                 default = nil)
  if valid_593374 != nil:
    section.add "X-Amz-Signature", valid_593374
  var valid_593375 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593375 = validateParameter(valid_593375, JString, required = false,
                                 default = nil)
  if valid_593375 != nil:
    section.add "X-Amz-Content-Sha256", valid_593375
  var valid_593376 = header.getOrDefault("X-Amz-Date")
  valid_593376 = validateParameter(valid_593376, JString, required = false,
                                 default = nil)
  if valid_593376 != nil:
    section.add "X-Amz-Date", valid_593376
  var valid_593377 = header.getOrDefault("X-Amz-Credential")
  valid_593377 = validateParameter(valid_593377, JString, required = false,
                                 default = nil)
  if valid_593377 != nil:
    section.add "X-Amz-Credential", valid_593377
  var valid_593378 = header.getOrDefault("X-Amz-Security-Token")
  valid_593378 = validateParameter(valid_593378, JString, required = false,
                                 default = nil)
  if valid_593378 != nil:
    section.add "X-Amz-Security-Token", valid_593378
  var valid_593379 = header.getOrDefault("X-Amz-Algorithm")
  valid_593379 = validateParameter(valid_593379, JString, required = false,
                                 default = nil)
  if valid_593379 != nil:
    section.add "X-Amz-Algorithm", valid_593379
  var valid_593380 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593380 = validateParameter(valid_593380, JString, required = false,
                                 default = nil)
  if valid_593380 != nil:
    section.add "X-Amz-SignedHeaders", valid_593380
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  section = newJObject()
  var valid_593381 = formData.getOrDefault("SecurityGroupIds")
  valid_593381 = validateParameter(valid_593381, JArray, required = false,
                                 default = nil)
  if valid_593381 != nil:
    section.add "SecurityGroupIds", valid_593381
  var valid_593382 = formData.getOrDefault("SnapshotWindow")
  valid_593382 = validateParameter(valid_593382, JString, required = false,
                                 default = nil)
  if valid_593382 != nil:
    section.add "SnapshotWindow", valid_593382
  var valid_593383 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_593383 = validateParameter(valid_593383, JString, required = false,
                                 default = nil)
  if valid_593383 != nil:
    section.add "PreferredMaintenanceWindow", valid_593383
  var valid_593384 = formData.getOrDefault("Port")
  valid_593384 = validateParameter(valid_593384, JInt, required = false, default = nil)
  if valid_593384 != nil:
    section.add "Port", valid_593384
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_593385 = formData.getOrDefault("ReplicationGroupId")
  valid_593385 = validateParameter(valid_593385, JString, required = true,
                                 default = nil)
  if valid_593385 != nil:
    section.add "ReplicationGroupId", valid_593385
  var valid_593386 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_593386 = validateParameter(valid_593386, JArray, required = false,
                                 default = nil)
  if valid_593386 != nil:
    section.add "PreferredCacheClusterAZs", valid_593386
  var valid_593387 = formData.getOrDefault("PrimaryClusterId")
  valid_593387 = validateParameter(valid_593387, JString, required = false,
                                 default = nil)
  if valid_593387 != nil:
    section.add "PrimaryClusterId", valid_593387
  var valid_593388 = formData.getOrDefault("NotificationTopicArn")
  valid_593388 = validateParameter(valid_593388, JString, required = false,
                                 default = nil)
  if valid_593388 != nil:
    section.add "NotificationTopicArn", valid_593388
  var valid_593389 = formData.getOrDefault("EngineVersion")
  valid_593389 = validateParameter(valid_593389, JString, required = false,
                                 default = nil)
  if valid_593389 != nil:
    section.add "EngineVersion", valid_593389
  var valid_593390 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_593390 = validateParameter(valid_593390, JBool, required = false, default = nil)
  if valid_593390 != nil:
    section.add "TransitEncryptionEnabled", valid_593390
  var valid_593391 = formData.getOrDefault("KmsKeyId")
  valid_593391 = validateParameter(valid_593391, JString, required = false,
                                 default = nil)
  if valid_593391 != nil:
    section.add "KmsKeyId", valid_593391
  var valid_593392 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_593392 = validateParameter(valid_593392, JBool, required = false, default = nil)
  if valid_593392 != nil:
    section.add "AutomaticFailoverEnabled", valid_593392
  var valid_593393 = formData.getOrDefault("Engine")
  valid_593393 = validateParameter(valid_593393, JString, required = false,
                                 default = nil)
  if valid_593393 != nil:
    section.add "Engine", valid_593393
  var valid_593394 = formData.getOrDefault("NumNodeGroups")
  valid_593394 = validateParameter(valid_593394, JInt, required = false, default = nil)
  if valid_593394 != nil:
    section.add "NumNodeGroups", valid_593394
  var valid_593395 = formData.getOrDefault("CacheParameterGroupName")
  valid_593395 = validateParameter(valid_593395, JString, required = false,
                                 default = nil)
  if valid_593395 != nil:
    section.add "CacheParameterGroupName", valid_593395
  var valid_593396 = formData.getOrDefault("SnapshotArns")
  valid_593396 = validateParameter(valid_593396, JArray, required = false,
                                 default = nil)
  if valid_593396 != nil:
    section.add "SnapshotArns", valid_593396
  var valid_593397 = formData.getOrDefault("SnapshotName")
  valid_593397 = validateParameter(valid_593397, JString, required = false,
                                 default = nil)
  if valid_593397 != nil:
    section.add "SnapshotName", valid_593397
  var valid_593398 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_593398 = validateParameter(valid_593398, JBool, required = false, default = nil)
  if valid_593398 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593398
  var valid_593399 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_593399 = validateParameter(valid_593399, JBool, required = false, default = nil)
  if valid_593399 != nil:
    section.add "AtRestEncryptionEnabled", valid_593399
  var valid_593400 = formData.getOrDefault("NodeGroupConfiguration")
  valid_593400 = validateParameter(valid_593400, JArray, required = false,
                                 default = nil)
  if valid_593400 != nil:
    section.add "NodeGroupConfiguration", valid_593400
  var valid_593401 = formData.getOrDefault("CacheSubnetGroupName")
  valid_593401 = validateParameter(valid_593401, JString, required = false,
                                 default = nil)
  if valid_593401 != nil:
    section.add "CacheSubnetGroupName", valid_593401
  var valid_593402 = formData.getOrDefault("AuthToken")
  valid_593402 = validateParameter(valid_593402, JString, required = false,
                                 default = nil)
  if valid_593402 != nil:
    section.add "AuthToken", valid_593402
  var valid_593403 = formData.getOrDefault("ReplicationGroupDescription")
  valid_593403 = validateParameter(valid_593403, JString, required = true,
                                 default = nil)
  if valid_593403 != nil:
    section.add "ReplicationGroupDescription", valid_593403
  var valid_593404 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_593404 = validateParameter(valid_593404, JArray, required = false,
                                 default = nil)
  if valid_593404 != nil:
    section.add "CacheSecurityGroupNames", valid_593404
  var valid_593405 = formData.getOrDefault("Tags")
  valid_593405 = validateParameter(valid_593405, JArray, required = false,
                                 default = nil)
  if valid_593405 != nil:
    section.add "Tags", valid_593405
  var valid_593406 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_593406 = validateParameter(valid_593406, JInt, required = false, default = nil)
  if valid_593406 != nil:
    section.add "SnapshotRetentionLimit", valid_593406
  var valid_593407 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_593407 = validateParameter(valid_593407, JInt, required = false, default = nil)
  if valid_593407 != nil:
    section.add "ReplicasPerNodeGroup", valid_593407
  var valid_593408 = formData.getOrDefault("CacheNodeType")
  valid_593408 = validateParameter(valid_593408, JString, required = false,
                                 default = nil)
  if valid_593408 != nil:
    section.add "CacheNodeType", valid_593408
  var valid_593409 = formData.getOrDefault("NumCacheClusters")
  valid_593409 = validateParameter(valid_593409, JInt, required = false, default = nil)
  if valid_593409 != nil:
    section.add "NumCacheClusters", valid_593409
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593410: Call_PostCreateReplicationGroup_593369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593410.validator(path, query, header, formData, body)
  let scheme = call_593410.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593410.url(scheme.get, call_593410.host, call_593410.base,
                         call_593410.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593410, url, valid)

proc call*(call_593411: Call_PostCreateReplicationGroup_593369;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          SecurityGroupIds: JsonNode = nil; SnapshotWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          PreferredCacheClusterAZs: JsonNode = nil; PrimaryClusterId: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          TransitEncryptionEnabled: bool = false; KmsKeyId: string = "";
          AutomaticFailoverEnabled: bool = false; Engine: string = "";
          NumNodeGroups: int = 0; CacheParameterGroupName: string = "";
          SnapshotArns: JsonNode = nil; SnapshotName: string = "";
          AutoMinorVersionUpgrade: bool = false;
          AtRestEncryptionEnabled: bool = false;
          NodeGroupConfiguration: JsonNode = nil; CacheSubnetGroupName: string = "";
          Action: string = "CreateReplicationGroup"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; ReplicasPerNodeGroup: int = 0;
          Version: string = "2015-02-02"; CacheNodeType: string = "";
          NumCacheClusters: int = 0): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  var query_593412 = newJObject()
  var formData_593413 = newJObject()
  if SecurityGroupIds != nil:
    formData_593413.add "SecurityGroupIds", SecurityGroupIds
  add(formData_593413, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_593413, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_593413, "Port", newJInt(Port))
  add(formData_593413, "ReplicationGroupId", newJString(ReplicationGroupId))
  if PreferredCacheClusterAZs != nil:
    formData_593413.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_593413, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_593413, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_593413, "EngineVersion", newJString(EngineVersion))
  add(formData_593413, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_593413, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593413, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_593413, "Engine", newJString(Engine))
  add(formData_593413, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_593413, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if SnapshotArns != nil:
    formData_593413.add "SnapshotArns", SnapshotArns
  add(formData_593413, "SnapshotName", newJString(SnapshotName))
  add(formData_593413, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_593413, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  if NodeGroupConfiguration != nil:
    formData_593413.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_593413, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593412, "Action", newJString(Action))
  add(formData_593413, "AuthToken", newJString(AuthToken))
  add(formData_593413, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_593413.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_593413.add "Tags", Tags
  add(formData_593413, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_593413, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_593412, "Version", newJString(Version))
  add(formData_593413, "CacheNodeType", newJString(CacheNodeType))
  add(formData_593413, "NumCacheClusters", newJInt(NumCacheClusters))
  result = call_593411.call(nil, query_593412, nil, formData_593413, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_593369(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_593370, base: "/",
    url: url_PostCreateReplicationGroup_593371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_593325 = ref object of OpenApiRestCall_592364
proc url_GetCreateReplicationGroup_593327(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateReplicationGroup_593326(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  section = newJObject()
  var valid_593328 = query.getOrDefault("SnapshotArns")
  valid_593328 = validateParameter(valid_593328, JArray, required = false,
                                 default = nil)
  if valid_593328 != nil:
    section.add "SnapshotArns", valid_593328
  var valid_593329 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_593329 = validateParameter(valid_593329, JArray, required = false,
                                 default = nil)
  if valid_593329 != nil:
    section.add "PreferredCacheClusterAZs", valid_593329
  var valid_593330 = query.getOrDefault("AuthToken")
  valid_593330 = validateParameter(valid_593330, JString, required = false,
                                 default = nil)
  if valid_593330 != nil:
    section.add "AuthToken", valid_593330
  assert query != nil, "query argument is necessary due to required `ReplicationGroupDescription` field"
  var valid_593331 = query.getOrDefault("ReplicationGroupDescription")
  valid_593331 = validateParameter(valid_593331, JString, required = true,
                                 default = nil)
  if valid_593331 != nil:
    section.add "ReplicationGroupDescription", valid_593331
  var valid_593332 = query.getOrDefault("Engine")
  valid_593332 = validateParameter(valid_593332, JString, required = false,
                                 default = nil)
  if valid_593332 != nil:
    section.add "Engine", valid_593332
  var valid_593333 = query.getOrDefault("NumNodeGroups")
  valid_593333 = validateParameter(valid_593333, JInt, required = false, default = nil)
  if valid_593333 != nil:
    section.add "NumNodeGroups", valid_593333
  var valid_593334 = query.getOrDefault("CacheParameterGroupName")
  valid_593334 = validateParameter(valid_593334, JString, required = false,
                                 default = nil)
  if valid_593334 != nil:
    section.add "CacheParameterGroupName", valid_593334
  var valid_593335 = query.getOrDefault("Tags")
  valid_593335 = validateParameter(valid_593335, JArray, required = false,
                                 default = nil)
  if valid_593335 != nil:
    section.add "Tags", valid_593335
  var valid_593336 = query.getOrDefault("KmsKeyId")
  valid_593336 = validateParameter(valid_593336, JString, required = false,
                                 default = nil)
  if valid_593336 != nil:
    section.add "KmsKeyId", valid_593336
  var valid_593337 = query.getOrDefault("SnapshotRetentionLimit")
  valid_593337 = validateParameter(valid_593337, JInt, required = false, default = nil)
  if valid_593337 != nil:
    section.add "SnapshotRetentionLimit", valid_593337
  var valid_593338 = query.getOrDefault("TransitEncryptionEnabled")
  valid_593338 = validateParameter(valid_593338, JBool, required = false, default = nil)
  if valid_593338 != nil:
    section.add "TransitEncryptionEnabled", valid_593338
  var valid_593339 = query.getOrDefault("CacheSecurityGroupNames")
  valid_593339 = validateParameter(valid_593339, JArray, required = false,
                                 default = nil)
  if valid_593339 != nil:
    section.add "CacheSecurityGroupNames", valid_593339
  var valid_593340 = query.getOrDefault("PrimaryClusterId")
  valid_593340 = validateParameter(valid_593340, JString, required = false,
                                 default = nil)
  if valid_593340 != nil:
    section.add "PrimaryClusterId", valid_593340
  var valid_593341 = query.getOrDefault("CacheNodeType")
  valid_593341 = validateParameter(valid_593341, JString, required = false,
                                 default = nil)
  if valid_593341 != nil:
    section.add "CacheNodeType", valid_593341
  var valid_593342 = query.getOrDefault("EngineVersion")
  valid_593342 = validateParameter(valid_593342, JString, required = false,
                                 default = nil)
  if valid_593342 != nil:
    section.add "EngineVersion", valid_593342
  var valid_593343 = query.getOrDefault("NumCacheClusters")
  valid_593343 = validateParameter(valid_593343, JInt, required = false, default = nil)
  if valid_593343 != nil:
    section.add "NumCacheClusters", valid_593343
  var valid_593344 = query.getOrDefault("Action")
  valid_593344 = validateParameter(valid_593344, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_593344 != nil:
    section.add "Action", valid_593344
  var valid_593345 = query.getOrDefault("NodeGroupConfiguration")
  valid_593345 = validateParameter(valid_593345, JArray, required = false,
                                 default = nil)
  if valid_593345 != nil:
    section.add "NodeGroupConfiguration", valid_593345
  var valid_593346 = query.getOrDefault("Port")
  valid_593346 = validateParameter(valid_593346, JInt, required = false, default = nil)
  if valid_593346 != nil:
    section.add "Port", valid_593346
  var valid_593347 = query.getOrDefault("ReplicationGroupId")
  valid_593347 = validateParameter(valid_593347, JString, required = true,
                                 default = nil)
  if valid_593347 != nil:
    section.add "ReplicationGroupId", valid_593347
  var valid_593348 = query.getOrDefault("CacheSubnetGroupName")
  valid_593348 = validateParameter(valid_593348, JString, required = false,
                                 default = nil)
  if valid_593348 != nil:
    section.add "CacheSubnetGroupName", valid_593348
  var valid_593349 = query.getOrDefault("NotificationTopicArn")
  valid_593349 = validateParameter(valid_593349, JString, required = false,
                                 default = nil)
  if valid_593349 != nil:
    section.add "NotificationTopicArn", valid_593349
  var valid_593350 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_593350 = validateParameter(valid_593350, JBool, required = false, default = nil)
  if valid_593350 != nil:
    section.add "AutomaticFailoverEnabled", valid_593350
  var valid_593351 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_593351 = validateParameter(valid_593351, JBool, required = false, default = nil)
  if valid_593351 != nil:
    section.add "AtRestEncryptionEnabled", valid_593351
  var valid_593352 = query.getOrDefault("Version")
  valid_593352 = validateParameter(valid_593352, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593352 != nil:
    section.add "Version", valid_593352
  var valid_593353 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_593353 = validateParameter(valid_593353, JString, required = false,
                                 default = nil)
  if valid_593353 != nil:
    section.add "PreferredMaintenanceWindow", valid_593353
  var valid_593354 = query.getOrDefault("SnapshotName")
  valid_593354 = validateParameter(valid_593354, JString, required = false,
                                 default = nil)
  if valid_593354 != nil:
    section.add "SnapshotName", valid_593354
  var valid_593355 = query.getOrDefault("SnapshotWindow")
  valid_593355 = validateParameter(valid_593355, JString, required = false,
                                 default = nil)
  if valid_593355 != nil:
    section.add "SnapshotWindow", valid_593355
  var valid_593356 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_593356 = validateParameter(valid_593356, JInt, required = false, default = nil)
  if valid_593356 != nil:
    section.add "ReplicasPerNodeGroup", valid_593356
  var valid_593357 = query.getOrDefault("SecurityGroupIds")
  valid_593357 = validateParameter(valid_593357, JArray, required = false,
                                 default = nil)
  if valid_593357 != nil:
    section.add "SecurityGroupIds", valid_593357
  var valid_593358 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_593358 = validateParameter(valid_593358, JBool, required = false, default = nil)
  if valid_593358 != nil:
    section.add "AutoMinorVersionUpgrade", valid_593358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593359 = header.getOrDefault("X-Amz-Signature")
  valid_593359 = validateParameter(valid_593359, JString, required = false,
                                 default = nil)
  if valid_593359 != nil:
    section.add "X-Amz-Signature", valid_593359
  var valid_593360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593360 = validateParameter(valid_593360, JString, required = false,
                                 default = nil)
  if valid_593360 != nil:
    section.add "X-Amz-Content-Sha256", valid_593360
  var valid_593361 = header.getOrDefault("X-Amz-Date")
  valid_593361 = validateParameter(valid_593361, JString, required = false,
                                 default = nil)
  if valid_593361 != nil:
    section.add "X-Amz-Date", valid_593361
  var valid_593362 = header.getOrDefault("X-Amz-Credential")
  valid_593362 = validateParameter(valid_593362, JString, required = false,
                                 default = nil)
  if valid_593362 != nil:
    section.add "X-Amz-Credential", valid_593362
  var valid_593363 = header.getOrDefault("X-Amz-Security-Token")
  valid_593363 = validateParameter(valid_593363, JString, required = false,
                                 default = nil)
  if valid_593363 != nil:
    section.add "X-Amz-Security-Token", valid_593363
  var valid_593364 = header.getOrDefault("X-Amz-Algorithm")
  valid_593364 = validateParameter(valid_593364, JString, required = false,
                                 default = nil)
  if valid_593364 != nil:
    section.add "X-Amz-Algorithm", valid_593364
  var valid_593365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593365 = validateParameter(valid_593365, JString, required = false,
                                 default = nil)
  if valid_593365 != nil:
    section.add "X-Amz-SignedHeaders", valid_593365
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593366: Call_GetCreateReplicationGroup_593325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593366.validator(path, query, header, formData, body)
  let scheme = call_593366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593366.url(scheme.get, call_593366.host, call_593366.base,
                         call_593366.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593366, url, valid)

proc call*(call_593367: Call_GetCreateReplicationGroup_593325;
          ReplicationGroupDescription: string; ReplicationGroupId: string;
          SnapshotArns: JsonNode = nil; PreferredCacheClusterAZs: JsonNode = nil;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          KmsKeyId: string = ""; SnapshotRetentionLimit: int = 0;
          TransitEncryptionEnabled: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          NumCacheClusters: int = 0; Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; Port: int = 0;
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          AutomaticFailoverEnabled: bool = false;
          AtRestEncryptionEnabled: bool = false; Version: string = "2015-02-02";
          PreferredMaintenanceWindow: string = ""; SnapshotName: string = "";
          SnapshotWindow: string = ""; ReplicasPerNodeGroup: int = 0;
          SecurityGroupIds: JsonNode = nil; AutoMinorVersionUpgrade: bool = false): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  var query_593368 = newJObject()
  if SnapshotArns != nil:
    query_593368.add "SnapshotArns", SnapshotArns
  if PreferredCacheClusterAZs != nil:
    query_593368.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(query_593368, "AuthToken", newJString(AuthToken))
  add(query_593368, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_593368, "Engine", newJString(Engine))
  add(query_593368, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_593368, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_593368.add "Tags", Tags
  add(query_593368, "KmsKeyId", newJString(KmsKeyId))
  add(query_593368, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_593368, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  if CacheSecurityGroupNames != nil:
    query_593368.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_593368, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_593368, "CacheNodeType", newJString(CacheNodeType))
  add(query_593368, "EngineVersion", newJString(EngineVersion))
  add(query_593368, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_593368, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_593368.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_593368, "Port", newJInt(Port))
  add(query_593368, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593368, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593368, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_593368, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_593368, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  add(query_593368, "Version", newJString(Version))
  add(query_593368, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_593368, "SnapshotName", newJString(SnapshotName))
  add(query_593368, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_593368, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  if SecurityGroupIds != nil:
    query_593368.add "SecurityGroupIds", SecurityGroupIds
  add(query_593368, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  result = call_593367.call(nil, query_593368, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_593325(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_593326, base: "/",
    url: url_GetCreateReplicationGroup_593327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_593433 = ref object of OpenApiRestCall_592364
proc url_PostCreateSnapshot_593435(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateSnapshot_593434(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593436 = query.getOrDefault("Action")
  valid_593436 = validateParameter(valid_593436, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_593436 != nil:
    section.add "Action", valid_593436
  var valid_593437 = query.getOrDefault("Version")
  valid_593437 = validateParameter(valid_593437, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593437 != nil:
    section.add "Version", valid_593437
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593438 = header.getOrDefault("X-Amz-Signature")
  valid_593438 = validateParameter(valid_593438, JString, required = false,
                                 default = nil)
  if valid_593438 != nil:
    section.add "X-Amz-Signature", valid_593438
  var valid_593439 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593439 = validateParameter(valid_593439, JString, required = false,
                                 default = nil)
  if valid_593439 != nil:
    section.add "X-Amz-Content-Sha256", valid_593439
  var valid_593440 = header.getOrDefault("X-Amz-Date")
  valid_593440 = validateParameter(valid_593440, JString, required = false,
                                 default = nil)
  if valid_593440 != nil:
    section.add "X-Amz-Date", valid_593440
  var valid_593441 = header.getOrDefault("X-Amz-Credential")
  valid_593441 = validateParameter(valid_593441, JString, required = false,
                                 default = nil)
  if valid_593441 != nil:
    section.add "X-Amz-Credential", valid_593441
  var valid_593442 = header.getOrDefault("X-Amz-Security-Token")
  valid_593442 = validateParameter(valid_593442, JString, required = false,
                                 default = nil)
  if valid_593442 != nil:
    section.add "X-Amz-Security-Token", valid_593442
  var valid_593443 = header.getOrDefault("X-Amz-Algorithm")
  valid_593443 = validateParameter(valid_593443, JString, required = false,
                                 default = nil)
  if valid_593443 != nil:
    section.add "X-Amz-Algorithm", valid_593443
  var valid_593444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593444 = validateParameter(valid_593444, JString, required = false,
                                 default = nil)
  if valid_593444 != nil:
    section.add "X-Amz-SignedHeaders", valid_593444
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  section = newJObject()
  var valid_593445 = formData.getOrDefault("CacheClusterId")
  valid_593445 = validateParameter(valid_593445, JString, required = false,
                                 default = nil)
  if valid_593445 != nil:
    section.add "CacheClusterId", valid_593445
  var valid_593446 = formData.getOrDefault("KmsKeyId")
  valid_593446 = validateParameter(valid_593446, JString, required = false,
                                 default = nil)
  if valid_593446 != nil:
    section.add "KmsKeyId", valid_593446
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_593447 = formData.getOrDefault("SnapshotName")
  valid_593447 = validateParameter(valid_593447, JString, required = true,
                                 default = nil)
  if valid_593447 != nil:
    section.add "SnapshotName", valid_593447
  var valid_593448 = formData.getOrDefault("ReplicationGroupId")
  valid_593448 = validateParameter(valid_593448, JString, required = false,
                                 default = nil)
  if valid_593448 != nil:
    section.add "ReplicationGroupId", valid_593448
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593449: Call_PostCreateSnapshot_593433; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593449.validator(path, query, header, formData, body)
  let scheme = call_593449.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593449.url(scheme.get, call_593449.host, call_593449.base,
                         call_593449.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593449, url, valid)

proc call*(call_593450: Call_PostCreateSnapshot_593433; SnapshotName: string;
          CacheClusterId: string = ""; KmsKeyId: string = "";
          Action: string = "CreateSnapshot"; Version: string = "2015-02-02";
          ReplicationGroupId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  var query_593451 = newJObject()
  var formData_593452 = newJObject()
  add(formData_593452, "CacheClusterId", newJString(CacheClusterId))
  add(formData_593452, "KmsKeyId", newJString(KmsKeyId))
  add(formData_593452, "SnapshotName", newJString(SnapshotName))
  add(query_593451, "Action", newJString(Action))
  add(query_593451, "Version", newJString(Version))
  add(formData_593452, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593450.call(nil, query_593451, nil, formData_593452, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_593433(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_593434, base: "/",
    url: url_PostCreateSnapshot_593435, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_593414 = ref object of OpenApiRestCall_592364
proc url_GetCreateSnapshot_593416(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateSnapshot_593415(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  section = newJObject()
  var valid_593417 = query.getOrDefault("KmsKeyId")
  valid_593417 = validateParameter(valid_593417, JString, required = false,
                                 default = nil)
  if valid_593417 != nil:
    section.add "KmsKeyId", valid_593417
  var valid_593418 = query.getOrDefault("CacheClusterId")
  valid_593418 = validateParameter(valid_593418, JString, required = false,
                                 default = nil)
  if valid_593418 != nil:
    section.add "CacheClusterId", valid_593418
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593419 = query.getOrDefault("Action")
  valid_593419 = validateParameter(valid_593419, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_593419 != nil:
    section.add "Action", valid_593419
  var valid_593420 = query.getOrDefault("ReplicationGroupId")
  valid_593420 = validateParameter(valid_593420, JString, required = false,
                                 default = nil)
  if valid_593420 != nil:
    section.add "ReplicationGroupId", valid_593420
  var valid_593421 = query.getOrDefault("Version")
  valid_593421 = validateParameter(valid_593421, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593421 != nil:
    section.add "Version", valid_593421
  var valid_593422 = query.getOrDefault("SnapshotName")
  valid_593422 = validateParameter(valid_593422, JString, required = true,
                                 default = nil)
  if valid_593422 != nil:
    section.add "SnapshotName", valid_593422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593423 = header.getOrDefault("X-Amz-Signature")
  valid_593423 = validateParameter(valid_593423, JString, required = false,
                                 default = nil)
  if valid_593423 != nil:
    section.add "X-Amz-Signature", valid_593423
  var valid_593424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593424 = validateParameter(valid_593424, JString, required = false,
                                 default = nil)
  if valid_593424 != nil:
    section.add "X-Amz-Content-Sha256", valid_593424
  var valid_593425 = header.getOrDefault("X-Amz-Date")
  valid_593425 = validateParameter(valid_593425, JString, required = false,
                                 default = nil)
  if valid_593425 != nil:
    section.add "X-Amz-Date", valid_593425
  var valid_593426 = header.getOrDefault("X-Amz-Credential")
  valid_593426 = validateParameter(valid_593426, JString, required = false,
                                 default = nil)
  if valid_593426 != nil:
    section.add "X-Amz-Credential", valid_593426
  var valid_593427 = header.getOrDefault("X-Amz-Security-Token")
  valid_593427 = validateParameter(valid_593427, JString, required = false,
                                 default = nil)
  if valid_593427 != nil:
    section.add "X-Amz-Security-Token", valid_593427
  var valid_593428 = header.getOrDefault("X-Amz-Algorithm")
  valid_593428 = validateParameter(valid_593428, JString, required = false,
                                 default = nil)
  if valid_593428 != nil:
    section.add "X-Amz-Algorithm", valid_593428
  var valid_593429 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593429 = validateParameter(valid_593429, JString, required = false,
                                 default = nil)
  if valid_593429 != nil:
    section.add "X-Amz-SignedHeaders", valid_593429
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593430: Call_GetCreateSnapshot_593414; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593430.validator(path, query, header, formData, body)
  let scheme = call_593430.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593430.url(scheme.get, call_593430.host, call_593430.base,
                         call_593430.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593430, url, valid)

proc call*(call_593431: Call_GetCreateSnapshot_593414; SnapshotName: string;
          KmsKeyId: string = ""; CacheClusterId: string = "";
          Action: string = "CreateSnapshot"; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  var query_593432 = newJObject()
  add(query_593432, "KmsKeyId", newJString(KmsKeyId))
  add(query_593432, "CacheClusterId", newJString(CacheClusterId))
  add(query_593432, "Action", newJString(Action))
  add(query_593432, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593432, "Version", newJString(Version))
  add(query_593432, "SnapshotName", newJString(SnapshotName))
  result = call_593431.call(nil, query_593432, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_593414(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_593415,
    base: "/", url: url_GetCreateSnapshot_593416,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_593473 = ref object of OpenApiRestCall_592364
proc url_PostDecreaseReplicaCount_593475(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDecreaseReplicaCount_593474(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593476 = query.getOrDefault("Action")
  valid_593476 = validateParameter(valid_593476, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_593476 != nil:
    section.add "Action", valid_593476
  var valid_593477 = query.getOrDefault("Version")
  valid_593477 = validateParameter(valid_593477, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593477 != nil:
    section.add "Version", valid_593477
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593478 = header.getOrDefault("X-Amz-Signature")
  valid_593478 = validateParameter(valid_593478, JString, required = false,
                                 default = nil)
  if valid_593478 != nil:
    section.add "X-Amz-Signature", valid_593478
  var valid_593479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593479 = validateParameter(valid_593479, JString, required = false,
                                 default = nil)
  if valid_593479 != nil:
    section.add "X-Amz-Content-Sha256", valid_593479
  var valid_593480 = header.getOrDefault("X-Amz-Date")
  valid_593480 = validateParameter(valid_593480, JString, required = false,
                                 default = nil)
  if valid_593480 != nil:
    section.add "X-Amz-Date", valid_593480
  var valid_593481 = header.getOrDefault("X-Amz-Credential")
  valid_593481 = validateParameter(valid_593481, JString, required = false,
                                 default = nil)
  if valid_593481 != nil:
    section.add "X-Amz-Credential", valid_593481
  var valid_593482 = header.getOrDefault("X-Amz-Security-Token")
  valid_593482 = validateParameter(valid_593482, JString, required = false,
                                 default = nil)
  if valid_593482 != nil:
    section.add "X-Amz-Security-Token", valid_593482
  var valid_593483 = header.getOrDefault("X-Amz-Algorithm")
  valid_593483 = validateParameter(valid_593483, JString, required = false,
                                 default = nil)
  if valid_593483 != nil:
    section.add "X-Amz-Algorithm", valid_593483
  var valid_593484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593484 = validateParameter(valid_593484, JString, required = false,
                                 default = nil)
  if valid_593484 != nil:
    section.add "X-Amz-SignedHeaders", valid_593484
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  section = newJObject()
  var valid_593485 = formData.getOrDefault("ReplicaConfiguration")
  valid_593485 = validateParameter(valid_593485, JArray, required = false,
                                 default = nil)
  if valid_593485 != nil:
    section.add "ReplicaConfiguration", valid_593485
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_593486 = formData.getOrDefault("ApplyImmediately")
  valid_593486 = validateParameter(valid_593486, JBool, required = true, default = nil)
  if valid_593486 != nil:
    section.add "ApplyImmediately", valid_593486
  var valid_593487 = formData.getOrDefault("ReplicasToRemove")
  valid_593487 = validateParameter(valid_593487, JArray, required = false,
                                 default = nil)
  if valid_593487 != nil:
    section.add "ReplicasToRemove", valid_593487
  var valid_593488 = formData.getOrDefault("NewReplicaCount")
  valid_593488 = validateParameter(valid_593488, JInt, required = false, default = nil)
  if valid_593488 != nil:
    section.add "NewReplicaCount", valid_593488
  var valid_593489 = formData.getOrDefault("ReplicationGroupId")
  valid_593489 = validateParameter(valid_593489, JString, required = true,
                                 default = nil)
  if valid_593489 != nil:
    section.add "ReplicationGroupId", valid_593489
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593490: Call_PostDecreaseReplicaCount_593473; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_593490.validator(path, query, header, formData, body)
  let scheme = call_593490.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593490.url(scheme.get, call_593490.host, call_593490.base,
                         call_593490.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593490, url, valid)

proc call*(call_593491: Call_PostDecreaseReplicaCount_593473;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil; ReplicasToRemove: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  var query_593492 = newJObject()
  var formData_593493 = newJObject()
  if ReplicaConfiguration != nil:
    formData_593493.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_593493, "ApplyImmediately", newJBool(ApplyImmediately))
  if ReplicasToRemove != nil:
    formData_593493.add "ReplicasToRemove", ReplicasToRemove
  add(query_593492, "Action", newJString(Action))
  add(formData_593493, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_593492, "Version", newJString(Version))
  add(formData_593493, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593491.call(nil, query_593492, nil, formData_593493, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_593473(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_593474, base: "/",
    url: url_PostDecreaseReplicaCount_593475, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_593453 = ref object of OpenApiRestCall_592364
proc url_GetDecreaseReplicaCount_593455(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDecreaseReplicaCount_593454(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  section = newJObject()
  var valid_593456 = query.getOrDefault("NewReplicaCount")
  valid_593456 = validateParameter(valid_593456, JInt, required = false, default = nil)
  if valid_593456 != nil:
    section.add "NewReplicaCount", valid_593456
  var valid_593457 = query.getOrDefault("ReplicaConfiguration")
  valid_593457 = validateParameter(valid_593457, JArray, required = false,
                                 default = nil)
  if valid_593457 != nil:
    section.add "ReplicaConfiguration", valid_593457
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593458 = query.getOrDefault("Action")
  valid_593458 = validateParameter(valid_593458, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_593458 != nil:
    section.add "Action", valid_593458
  var valid_593459 = query.getOrDefault("ApplyImmediately")
  valid_593459 = validateParameter(valid_593459, JBool, required = true, default = nil)
  if valid_593459 != nil:
    section.add "ApplyImmediately", valid_593459
  var valid_593460 = query.getOrDefault("ReplicationGroupId")
  valid_593460 = validateParameter(valid_593460, JString, required = true,
                                 default = nil)
  if valid_593460 != nil:
    section.add "ReplicationGroupId", valid_593460
  var valid_593461 = query.getOrDefault("Version")
  valid_593461 = validateParameter(valid_593461, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593461 != nil:
    section.add "Version", valid_593461
  var valid_593462 = query.getOrDefault("ReplicasToRemove")
  valid_593462 = validateParameter(valid_593462, JArray, required = false,
                                 default = nil)
  if valid_593462 != nil:
    section.add "ReplicasToRemove", valid_593462
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593463 = header.getOrDefault("X-Amz-Signature")
  valid_593463 = validateParameter(valid_593463, JString, required = false,
                                 default = nil)
  if valid_593463 != nil:
    section.add "X-Amz-Signature", valid_593463
  var valid_593464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593464 = validateParameter(valid_593464, JString, required = false,
                                 default = nil)
  if valid_593464 != nil:
    section.add "X-Amz-Content-Sha256", valid_593464
  var valid_593465 = header.getOrDefault("X-Amz-Date")
  valid_593465 = validateParameter(valid_593465, JString, required = false,
                                 default = nil)
  if valid_593465 != nil:
    section.add "X-Amz-Date", valid_593465
  var valid_593466 = header.getOrDefault("X-Amz-Credential")
  valid_593466 = validateParameter(valid_593466, JString, required = false,
                                 default = nil)
  if valid_593466 != nil:
    section.add "X-Amz-Credential", valid_593466
  var valid_593467 = header.getOrDefault("X-Amz-Security-Token")
  valid_593467 = validateParameter(valid_593467, JString, required = false,
                                 default = nil)
  if valid_593467 != nil:
    section.add "X-Amz-Security-Token", valid_593467
  var valid_593468 = header.getOrDefault("X-Amz-Algorithm")
  valid_593468 = validateParameter(valid_593468, JString, required = false,
                                 default = nil)
  if valid_593468 != nil:
    section.add "X-Amz-Algorithm", valid_593468
  var valid_593469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593469 = validateParameter(valid_593469, JString, required = false,
                                 default = nil)
  if valid_593469 != nil:
    section.add "X-Amz-SignedHeaders", valid_593469
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593470: Call_GetDecreaseReplicaCount_593453; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_593470.validator(path, query, header, formData, body)
  let scheme = call_593470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593470.url(scheme.get, call_593470.host, call_593470.base,
                         call_593470.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593470, url, valid)

proc call*(call_593471: Call_GetDecreaseReplicaCount_593453;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; Version: string = "2015-02-02";
          ReplicasToRemove: JsonNode = nil): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  var query_593472 = newJObject()
  add(query_593472, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_593472.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_593472, "Action", newJString(Action))
  add(query_593472, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_593472, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593472, "Version", newJString(Version))
  if ReplicasToRemove != nil:
    query_593472.add "ReplicasToRemove", ReplicasToRemove
  result = call_593471.call(nil, query_593472, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_593453(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_593454, base: "/",
    url: url_GetDecreaseReplicaCount_593455, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_593511 = ref object of OpenApiRestCall_592364
proc url_PostDeleteCacheCluster_593513(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheCluster_593512(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593514 = query.getOrDefault("Action")
  valid_593514 = validateParameter(valid_593514, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_593514 != nil:
    section.add "Action", valid_593514
  var valid_593515 = query.getOrDefault("Version")
  valid_593515 = validateParameter(valid_593515, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593515 != nil:
    section.add "Version", valid_593515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593516 = header.getOrDefault("X-Amz-Signature")
  valid_593516 = validateParameter(valid_593516, JString, required = false,
                                 default = nil)
  if valid_593516 != nil:
    section.add "X-Amz-Signature", valid_593516
  var valid_593517 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593517 = validateParameter(valid_593517, JString, required = false,
                                 default = nil)
  if valid_593517 != nil:
    section.add "X-Amz-Content-Sha256", valid_593517
  var valid_593518 = header.getOrDefault("X-Amz-Date")
  valid_593518 = validateParameter(valid_593518, JString, required = false,
                                 default = nil)
  if valid_593518 != nil:
    section.add "X-Amz-Date", valid_593518
  var valid_593519 = header.getOrDefault("X-Amz-Credential")
  valid_593519 = validateParameter(valid_593519, JString, required = false,
                                 default = nil)
  if valid_593519 != nil:
    section.add "X-Amz-Credential", valid_593519
  var valid_593520 = header.getOrDefault("X-Amz-Security-Token")
  valid_593520 = validateParameter(valid_593520, JString, required = false,
                                 default = nil)
  if valid_593520 != nil:
    section.add "X-Amz-Security-Token", valid_593520
  var valid_593521 = header.getOrDefault("X-Amz-Algorithm")
  valid_593521 = validateParameter(valid_593521, JString, required = false,
                                 default = nil)
  if valid_593521 != nil:
    section.add "X-Amz-Algorithm", valid_593521
  var valid_593522 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593522 = validateParameter(valid_593522, JString, required = false,
                                 default = nil)
  if valid_593522 != nil:
    section.add "X-Amz-SignedHeaders", valid_593522
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_593523 = formData.getOrDefault("CacheClusterId")
  valid_593523 = validateParameter(valid_593523, JString, required = true,
                                 default = nil)
  if valid_593523 != nil:
    section.add "CacheClusterId", valid_593523
  var valid_593524 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_593524 = validateParameter(valid_593524, JString, required = false,
                                 default = nil)
  if valid_593524 != nil:
    section.add "FinalSnapshotIdentifier", valid_593524
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593525: Call_PostDeleteCacheCluster_593511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_593525.validator(path, query, header, formData, body)
  let scheme = call_593525.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593525.url(scheme.get, call_593525.host, call_593525.base,
                         call_593525.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593525, url, valid)

proc call*(call_593526: Call_PostDeleteCacheCluster_593511; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593527 = newJObject()
  var formData_593528 = newJObject()
  add(formData_593528, "CacheClusterId", newJString(CacheClusterId))
  add(formData_593528, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_593527, "Action", newJString(Action))
  add(query_593527, "Version", newJString(Version))
  result = call_593526.call(nil, query_593527, nil, formData_593528, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_593511(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_593512, base: "/",
    url: url_PostDeleteCacheCluster_593513, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_593494 = ref object of OpenApiRestCall_592364
proc url_GetDeleteCacheCluster_593496(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheCluster_593495(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_593497 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_593497 = validateParameter(valid_593497, JString, required = false,
                                 default = nil)
  if valid_593497 != nil:
    section.add "FinalSnapshotIdentifier", valid_593497
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_593498 = query.getOrDefault("CacheClusterId")
  valid_593498 = validateParameter(valid_593498, JString, required = true,
                                 default = nil)
  if valid_593498 != nil:
    section.add "CacheClusterId", valid_593498
  var valid_593499 = query.getOrDefault("Action")
  valid_593499 = validateParameter(valid_593499, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_593499 != nil:
    section.add "Action", valid_593499
  var valid_593500 = query.getOrDefault("Version")
  valid_593500 = validateParameter(valid_593500, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593500 != nil:
    section.add "Version", valid_593500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593501 = header.getOrDefault("X-Amz-Signature")
  valid_593501 = validateParameter(valid_593501, JString, required = false,
                                 default = nil)
  if valid_593501 != nil:
    section.add "X-Amz-Signature", valid_593501
  var valid_593502 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593502 = validateParameter(valid_593502, JString, required = false,
                                 default = nil)
  if valid_593502 != nil:
    section.add "X-Amz-Content-Sha256", valid_593502
  var valid_593503 = header.getOrDefault("X-Amz-Date")
  valid_593503 = validateParameter(valid_593503, JString, required = false,
                                 default = nil)
  if valid_593503 != nil:
    section.add "X-Amz-Date", valid_593503
  var valid_593504 = header.getOrDefault("X-Amz-Credential")
  valid_593504 = validateParameter(valid_593504, JString, required = false,
                                 default = nil)
  if valid_593504 != nil:
    section.add "X-Amz-Credential", valid_593504
  var valid_593505 = header.getOrDefault("X-Amz-Security-Token")
  valid_593505 = validateParameter(valid_593505, JString, required = false,
                                 default = nil)
  if valid_593505 != nil:
    section.add "X-Amz-Security-Token", valid_593505
  var valid_593506 = header.getOrDefault("X-Amz-Algorithm")
  valid_593506 = validateParameter(valid_593506, JString, required = false,
                                 default = nil)
  if valid_593506 != nil:
    section.add "X-Amz-Algorithm", valid_593506
  var valid_593507 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593507 = validateParameter(valid_593507, JString, required = false,
                                 default = nil)
  if valid_593507 != nil:
    section.add "X-Amz-SignedHeaders", valid_593507
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593508: Call_GetDeleteCacheCluster_593494; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_593508.validator(path, query, header, formData, body)
  let scheme = call_593508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593508.url(scheme.get, call_593508.host, call_593508.base,
                         call_593508.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593508, url, valid)

proc call*(call_593509: Call_GetDeleteCacheCluster_593494; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593510 = newJObject()
  add(query_593510, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_593510, "CacheClusterId", newJString(CacheClusterId))
  add(query_593510, "Action", newJString(Action))
  add(query_593510, "Version", newJString(Version))
  result = call_593509.call(nil, query_593510, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_593494(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_593495, base: "/",
    url: url_GetDeleteCacheCluster_593496, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_593545 = ref object of OpenApiRestCall_592364
proc url_PostDeleteCacheParameterGroup_593547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheParameterGroup_593546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593548 = query.getOrDefault("Action")
  valid_593548 = validateParameter(valid_593548, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_593548 != nil:
    section.add "Action", valid_593548
  var valid_593549 = query.getOrDefault("Version")
  valid_593549 = validateParameter(valid_593549, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593549 != nil:
    section.add "Version", valid_593549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593550 = header.getOrDefault("X-Amz-Signature")
  valid_593550 = validateParameter(valid_593550, JString, required = false,
                                 default = nil)
  if valid_593550 != nil:
    section.add "X-Amz-Signature", valid_593550
  var valid_593551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593551 = validateParameter(valid_593551, JString, required = false,
                                 default = nil)
  if valid_593551 != nil:
    section.add "X-Amz-Content-Sha256", valid_593551
  var valid_593552 = header.getOrDefault("X-Amz-Date")
  valid_593552 = validateParameter(valid_593552, JString, required = false,
                                 default = nil)
  if valid_593552 != nil:
    section.add "X-Amz-Date", valid_593552
  var valid_593553 = header.getOrDefault("X-Amz-Credential")
  valid_593553 = validateParameter(valid_593553, JString, required = false,
                                 default = nil)
  if valid_593553 != nil:
    section.add "X-Amz-Credential", valid_593553
  var valid_593554 = header.getOrDefault("X-Amz-Security-Token")
  valid_593554 = validateParameter(valid_593554, JString, required = false,
                                 default = nil)
  if valid_593554 != nil:
    section.add "X-Amz-Security-Token", valid_593554
  var valid_593555 = header.getOrDefault("X-Amz-Algorithm")
  valid_593555 = validateParameter(valid_593555, JString, required = false,
                                 default = nil)
  if valid_593555 != nil:
    section.add "X-Amz-Algorithm", valid_593555
  var valid_593556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593556 = validateParameter(valid_593556, JString, required = false,
                                 default = nil)
  if valid_593556 != nil:
    section.add "X-Amz-SignedHeaders", valid_593556
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593557 = formData.getOrDefault("CacheParameterGroupName")
  valid_593557 = validateParameter(valid_593557, JString, required = true,
                                 default = nil)
  if valid_593557 != nil:
    section.add "CacheParameterGroupName", valid_593557
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593558: Call_PostDeleteCacheParameterGroup_593545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_593558.validator(path, query, header, formData, body)
  let scheme = call_593558.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593558.url(scheme.get, call_593558.host, call_593558.base,
                         call_593558.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593558, url, valid)

proc call*(call_593559: Call_PostDeleteCacheParameterGroup_593545;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593560 = newJObject()
  var formData_593561 = newJObject()
  add(formData_593561, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_593560, "Action", newJString(Action))
  add(query_593560, "Version", newJString(Version))
  result = call_593559.call(nil, query_593560, nil, formData_593561, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_593545(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_593546, base: "/",
    url: url_PostDeleteCacheParameterGroup_593547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_593529 = ref object of OpenApiRestCall_592364
proc url_GetDeleteCacheParameterGroup_593531(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheParameterGroup_593530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593532 = query.getOrDefault("CacheParameterGroupName")
  valid_593532 = validateParameter(valid_593532, JString, required = true,
                                 default = nil)
  if valid_593532 != nil:
    section.add "CacheParameterGroupName", valid_593532
  var valid_593533 = query.getOrDefault("Action")
  valid_593533 = validateParameter(valid_593533, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_593533 != nil:
    section.add "Action", valid_593533
  var valid_593534 = query.getOrDefault("Version")
  valid_593534 = validateParameter(valid_593534, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593534 != nil:
    section.add "Version", valid_593534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593535 = header.getOrDefault("X-Amz-Signature")
  valid_593535 = validateParameter(valid_593535, JString, required = false,
                                 default = nil)
  if valid_593535 != nil:
    section.add "X-Amz-Signature", valid_593535
  var valid_593536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593536 = validateParameter(valid_593536, JString, required = false,
                                 default = nil)
  if valid_593536 != nil:
    section.add "X-Amz-Content-Sha256", valid_593536
  var valid_593537 = header.getOrDefault("X-Amz-Date")
  valid_593537 = validateParameter(valid_593537, JString, required = false,
                                 default = nil)
  if valid_593537 != nil:
    section.add "X-Amz-Date", valid_593537
  var valid_593538 = header.getOrDefault("X-Amz-Credential")
  valid_593538 = validateParameter(valid_593538, JString, required = false,
                                 default = nil)
  if valid_593538 != nil:
    section.add "X-Amz-Credential", valid_593538
  var valid_593539 = header.getOrDefault("X-Amz-Security-Token")
  valid_593539 = validateParameter(valid_593539, JString, required = false,
                                 default = nil)
  if valid_593539 != nil:
    section.add "X-Amz-Security-Token", valid_593539
  var valid_593540 = header.getOrDefault("X-Amz-Algorithm")
  valid_593540 = validateParameter(valid_593540, JString, required = false,
                                 default = nil)
  if valid_593540 != nil:
    section.add "X-Amz-Algorithm", valid_593540
  var valid_593541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593541 = validateParameter(valid_593541, JString, required = false,
                                 default = nil)
  if valid_593541 != nil:
    section.add "X-Amz-SignedHeaders", valid_593541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593542: Call_GetDeleteCacheParameterGroup_593529; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_593542.validator(path, query, header, formData, body)
  let scheme = call_593542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593542.url(scheme.get, call_593542.host, call_593542.base,
                         call_593542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593542, url, valid)

proc call*(call_593543: Call_GetDeleteCacheParameterGroup_593529;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593544 = newJObject()
  add(query_593544, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_593544, "Action", newJString(Action))
  add(query_593544, "Version", newJString(Version))
  result = call_593543.call(nil, query_593544, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_593529(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_593530, base: "/",
    url: url_GetDeleteCacheParameterGroup_593531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_593578 = ref object of OpenApiRestCall_592364
proc url_PostDeleteCacheSecurityGroup_593580(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_593579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593581 = query.getOrDefault("Action")
  valid_593581 = validateParameter(valid_593581, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_593581 != nil:
    section.add "Action", valid_593581
  var valid_593582 = query.getOrDefault("Version")
  valid_593582 = validateParameter(valid_593582, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593582 != nil:
    section.add "Version", valid_593582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593583 = header.getOrDefault("X-Amz-Signature")
  valid_593583 = validateParameter(valid_593583, JString, required = false,
                                 default = nil)
  if valid_593583 != nil:
    section.add "X-Amz-Signature", valid_593583
  var valid_593584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593584 = validateParameter(valid_593584, JString, required = false,
                                 default = nil)
  if valid_593584 != nil:
    section.add "X-Amz-Content-Sha256", valid_593584
  var valid_593585 = header.getOrDefault("X-Amz-Date")
  valid_593585 = validateParameter(valid_593585, JString, required = false,
                                 default = nil)
  if valid_593585 != nil:
    section.add "X-Amz-Date", valid_593585
  var valid_593586 = header.getOrDefault("X-Amz-Credential")
  valid_593586 = validateParameter(valid_593586, JString, required = false,
                                 default = nil)
  if valid_593586 != nil:
    section.add "X-Amz-Credential", valid_593586
  var valid_593587 = header.getOrDefault("X-Amz-Security-Token")
  valid_593587 = validateParameter(valid_593587, JString, required = false,
                                 default = nil)
  if valid_593587 != nil:
    section.add "X-Amz-Security-Token", valid_593587
  var valid_593588 = header.getOrDefault("X-Amz-Algorithm")
  valid_593588 = validateParameter(valid_593588, JString, required = false,
                                 default = nil)
  if valid_593588 != nil:
    section.add "X-Amz-Algorithm", valid_593588
  var valid_593589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593589 = validateParameter(valid_593589, JString, required = false,
                                 default = nil)
  if valid_593589 != nil:
    section.add "X-Amz-SignedHeaders", valid_593589
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_593590 = formData.getOrDefault("CacheSecurityGroupName")
  valid_593590 = validateParameter(valid_593590, JString, required = true,
                                 default = nil)
  if valid_593590 != nil:
    section.add "CacheSecurityGroupName", valid_593590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593591: Call_PostDeleteCacheSecurityGroup_593578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_593591.validator(path, query, header, formData, body)
  let scheme = call_593591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593591.url(scheme.get, call_593591.host, call_593591.base,
                         call_593591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593591, url, valid)

proc call*(call_593592: Call_PostDeleteCacheSecurityGroup_593578;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593593 = newJObject()
  var formData_593594 = newJObject()
  add(formData_593594, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_593593, "Action", newJString(Action))
  add(query_593593, "Version", newJString(Version))
  result = call_593592.call(nil, query_593593, nil, formData_593594, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_593578(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_593579, base: "/",
    url: url_PostDeleteCacheSecurityGroup_593580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_593562 = ref object of OpenApiRestCall_592364
proc url_GetDeleteCacheSecurityGroup_593564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_593563(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593565 = query.getOrDefault("Action")
  valid_593565 = validateParameter(valid_593565, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_593565 != nil:
    section.add "Action", valid_593565
  var valid_593566 = query.getOrDefault("CacheSecurityGroupName")
  valid_593566 = validateParameter(valid_593566, JString, required = true,
                                 default = nil)
  if valid_593566 != nil:
    section.add "CacheSecurityGroupName", valid_593566
  var valid_593567 = query.getOrDefault("Version")
  valid_593567 = validateParameter(valid_593567, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593567 != nil:
    section.add "Version", valid_593567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593568 = header.getOrDefault("X-Amz-Signature")
  valid_593568 = validateParameter(valid_593568, JString, required = false,
                                 default = nil)
  if valid_593568 != nil:
    section.add "X-Amz-Signature", valid_593568
  var valid_593569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593569 = validateParameter(valid_593569, JString, required = false,
                                 default = nil)
  if valid_593569 != nil:
    section.add "X-Amz-Content-Sha256", valid_593569
  var valid_593570 = header.getOrDefault("X-Amz-Date")
  valid_593570 = validateParameter(valid_593570, JString, required = false,
                                 default = nil)
  if valid_593570 != nil:
    section.add "X-Amz-Date", valid_593570
  var valid_593571 = header.getOrDefault("X-Amz-Credential")
  valid_593571 = validateParameter(valid_593571, JString, required = false,
                                 default = nil)
  if valid_593571 != nil:
    section.add "X-Amz-Credential", valid_593571
  var valid_593572 = header.getOrDefault("X-Amz-Security-Token")
  valid_593572 = validateParameter(valid_593572, JString, required = false,
                                 default = nil)
  if valid_593572 != nil:
    section.add "X-Amz-Security-Token", valid_593572
  var valid_593573 = header.getOrDefault("X-Amz-Algorithm")
  valid_593573 = validateParameter(valid_593573, JString, required = false,
                                 default = nil)
  if valid_593573 != nil:
    section.add "X-Amz-Algorithm", valid_593573
  var valid_593574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593574 = validateParameter(valid_593574, JString, required = false,
                                 default = nil)
  if valid_593574 != nil:
    section.add "X-Amz-SignedHeaders", valid_593574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593575: Call_GetDeleteCacheSecurityGroup_593562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_593575.validator(path, query, header, formData, body)
  let scheme = call_593575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593575.url(scheme.get, call_593575.host, call_593575.base,
                         call_593575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593575, url, valid)

proc call*(call_593576: Call_GetDeleteCacheSecurityGroup_593562;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: string (required)
  var query_593577 = newJObject()
  add(query_593577, "Action", newJString(Action))
  add(query_593577, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_593577, "Version", newJString(Version))
  result = call_593576.call(nil, query_593577, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_593562(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_593563, base: "/",
    url: url_GetDeleteCacheSecurityGroup_593564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_593611 = ref object of OpenApiRestCall_592364
proc url_PostDeleteCacheSubnetGroup_593613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_593612(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593614 = query.getOrDefault("Action")
  valid_593614 = validateParameter(valid_593614, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_593614 != nil:
    section.add "Action", valid_593614
  var valid_593615 = query.getOrDefault("Version")
  valid_593615 = validateParameter(valid_593615, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593615 != nil:
    section.add "Version", valid_593615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593616 = header.getOrDefault("X-Amz-Signature")
  valid_593616 = validateParameter(valid_593616, JString, required = false,
                                 default = nil)
  if valid_593616 != nil:
    section.add "X-Amz-Signature", valid_593616
  var valid_593617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593617 = validateParameter(valid_593617, JString, required = false,
                                 default = nil)
  if valid_593617 != nil:
    section.add "X-Amz-Content-Sha256", valid_593617
  var valid_593618 = header.getOrDefault("X-Amz-Date")
  valid_593618 = validateParameter(valid_593618, JString, required = false,
                                 default = nil)
  if valid_593618 != nil:
    section.add "X-Amz-Date", valid_593618
  var valid_593619 = header.getOrDefault("X-Amz-Credential")
  valid_593619 = validateParameter(valid_593619, JString, required = false,
                                 default = nil)
  if valid_593619 != nil:
    section.add "X-Amz-Credential", valid_593619
  var valid_593620 = header.getOrDefault("X-Amz-Security-Token")
  valid_593620 = validateParameter(valid_593620, JString, required = false,
                                 default = nil)
  if valid_593620 != nil:
    section.add "X-Amz-Security-Token", valid_593620
  var valid_593621 = header.getOrDefault("X-Amz-Algorithm")
  valid_593621 = validateParameter(valid_593621, JString, required = false,
                                 default = nil)
  if valid_593621 != nil:
    section.add "X-Amz-Algorithm", valid_593621
  var valid_593622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593622 = validateParameter(valid_593622, JString, required = false,
                                 default = nil)
  if valid_593622 != nil:
    section.add "X-Amz-SignedHeaders", valid_593622
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_593623 = formData.getOrDefault("CacheSubnetGroupName")
  valid_593623 = validateParameter(valid_593623, JString, required = true,
                                 default = nil)
  if valid_593623 != nil:
    section.add "CacheSubnetGroupName", valid_593623
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593624: Call_PostDeleteCacheSubnetGroup_593611; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_593624.validator(path, query, header, formData, body)
  let scheme = call_593624.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593624.url(scheme.get, call_593624.host, call_593624.base,
                         call_593624.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593624, url, valid)

proc call*(call_593625: Call_PostDeleteCacheSubnetGroup_593611;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593626 = newJObject()
  var formData_593627 = newJObject()
  add(formData_593627, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593626, "Action", newJString(Action))
  add(query_593626, "Version", newJString(Version))
  result = call_593625.call(nil, query_593626, nil, formData_593627, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_593611(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_593612, base: "/",
    url: url_PostDeleteCacheSubnetGroup_593613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_593595 = ref object of OpenApiRestCall_592364
proc url_GetDeleteCacheSubnetGroup_593597(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_593596(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593598 = query.getOrDefault("Action")
  valid_593598 = validateParameter(valid_593598, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_593598 != nil:
    section.add "Action", valid_593598
  var valid_593599 = query.getOrDefault("CacheSubnetGroupName")
  valid_593599 = validateParameter(valid_593599, JString, required = true,
                                 default = nil)
  if valid_593599 != nil:
    section.add "CacheSubnetGroupName", valid_593599
  var valid_593600 = query.getOrDefault("Version")
  valid_593600 = validateParameter(valid_593600, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593600 != nil:
    section.add "Version", valid_593600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593601 = header.getOrDefault("X-Amz-Signature")
  valid_593601 = validateParameter(valid_593601, JString, required = false,
                                 default = nil)
  if valid_593601 != nil:
    section.add "X-Amz-Signature", valid_593601
  var valid_593602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593602 = validateParameter(valid_593602, JString, required = false,
                                 default = nil)
  if valid_593602 != nil:
    section.add "X-Amz-Content-Sha256", valid_593602
  var valid_593603 = header.getOrDefault("X-Amz-Date")
  valid_593603 = validateParameter(valid_593603, JString, required = false,
                                 default = nil)
  if valid_593603 != nil:
    section.add "X-Amz-Date", valid_593603
  var valid_593604 = header.getOrDefault("X-Amz-Credential")
  valid_593604 = validateParameter(valid_593604, JString, required = false,
                                 default = nil)
  if valid_593604 != nil:
    section.add "X-Amz-Credential", valid_593604
  var valid_593605 = header.getOrDefault("X-Amz-Security-Token")
  valid_593605 = validateParameter(valid_593605, JString, required = false,
                                 default = nil)
  if valid_593605 != nil:
    section.add "X-Amz-Security-Token", valid_593605
  var valid_593606 = header.getOrDefault("X-Amz-Algorithm")
  valid_593606 = validateParameter(valid_593606, JString, required = false,
                                 default = nil)
  if valid_593606 != nil:
    section.add "X-Amz-Algorithm", valid_593606
  var valid_593607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593607 = validateParameter(valid_593607, JString, required = false,
                                 default = nil)
  if valid_593607 != nil:
    section.add "X-Amz-SignedHeaders", valid_593607
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593608: Call_GetDeleteCacheSubnetGroup_593595; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_593608.validator(path, query, header, formData, body)
  let scheme = call_593608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593608.url(scheme.get, call_593608.host, call_593608.base,
                         call_593608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593608, url, valid)

proc call*(call_593609: Call_GetDeleteCacheSubnetGroup_593595;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_593610 = newJObject()
  add(query_593610, "Action", newJString(Action))
  add(query_593610, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593610, "Version", newJString(Version))
  result = call_593609.call(nil, query_593610, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_593595(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_593596, base: "/",
    url: url_GetDeleteCacheSubnetGroup_593597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_593646 = ref object of OpenApiRestCall_592364
proc url_PostDeleteReplicationGroup_593648(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteReplicationGroup_593647(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593649 = query.getOrDefault("Action")
  valid_593649 = validateParameter(valid_593649, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_593649 != nil:
    section.add "Action", valid_593649
  var valid_593650 = query.getOrDefault("Version")
  valid_593650 = validateParameter(valid_593650, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593650 != nil:
    section.add "Version", valid_593650
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593651 = header.getOrDefault("X-Amz-Signature")
  valid_593651 = validateParameter(valid_593651, JString, required = false,
                                 default = nil)
  if valid_593651 != nil:
    section.add "X-Amz-Signature", valid_593651
  var valid_593652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593652 = validateParameter(valid_593652, JString, required = false,
                                 default = nil)
  if valid_593652 != nil:
    section.add "X-Amz-Content-Sha256", valid_593652
  var valid_593653 = header.getOrDefault("X-Amz-Date")
  valid_593653 = validateParameter(valid_593653, JString, required = false,
                                 default = nil)
  if valid_593653 != nil:
    section.add "X-Amz-Date", valid_593653
  var valid_593654 = header.getOrDefault("X-Amz-Credential")
  valid_593654 = validateParameter(valid_593654, JString, required = false,
                                 default = nil)
  if valid_593654 != nil:
    section.add "X-Amz-Credential", valid_593654
  var valid_593655 = header.getOrDefault("X-Amz-Security-Token")
  valid_593655 = validateParameter(valid_593655, JString, required = false,
                                 default = nil)
  if valid_593655 != nil:
    section.add "X-Amz-Security-Token", valid_593655
  var valid_593656 = header.getOrDefault("X-Amz-Algorithm")
  valid_593656 = validateParameter(valid_593656, JString, required = false,
                                 default = nil)
  if valid_593656 != nil:
    section.add "X-Amz-Algorithm", valid_593656
  var valid_593657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593657 = validateParameter(valid_593657, JString, required = false,
                                 default = nil)
  if valid_593657 != nil:
    section.add "X-Amz-SignedHeaders", valid_593657
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_593658 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_593658 = validateParameter(valid_593658, JString, required = false,
                                 default = nil)
  if valid_593658 != nil:
    section.add "FinalSnapshotIdentifier", valid_593658
  var valid_593659 = formData.getOrDefault("RetainPrimaryCluster")
  valid_593659 = validateParameter(valid_593659, JBool, required = false, default = nil)
  if valid_593659 != nil:
    section.add "RetainPrimaryCluster", valid_593659
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_593660 = formData.getOrDefault("ReplicationGroupId")
  valid_593660 = validateParameter(valid_593660, JString, required = true,
                                 default = nil)
  if valid_593660 != nil:
    section.add "ReplicationGroupId", valid_593660
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593661: Call_PostDeleteReplicationGroup_593646; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593661.validator(path, query, header, formData, body)
  let scheme = call_593661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593661.url(scheme.get, call_593661.host, call_593661.base,
                         call_593661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593661, url, valid)

proc call*(call_593662: Call_PostDeleteReplicationGroup_593646;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_593663 = newJObject()
  var formData_593664 = newJObject()
  add(formData_593664, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_593663, "Action", newJString(Action))
  add(formData_593664, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_593663, "Version", newJString(Version))
  add(formData_593664, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_593662.call(nil, query_593663, nil, formData_593664, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_593646(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_593647, base: "/",
    url: url_PostDeleteReplicationGroup_593648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_593628 = ref object of OpenApiRestCall_592364
proc url_GetDeleteReplicationGroup_593630(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteReplicationGroup_593629(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: JString (required)
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  section = newJObject()
  var valid_593631 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_593631 = validateParameter(valid_593631, JString, required = false,
                                 default = nil)
  if valid_593631 != nil:
    section.add "FinalSnapshotIdentifier", valid_593631
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593632 = query.getOrDefault("Action")
  valid_593632 = validateParameter(valid_593632, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_593632 != nil:
    section.add "Action", valid_593632
  var valid_593633 = query.getOrDefault("ReplicationGroupId")
  valid_593633 = validateParameter(valid_593633, JString, required = true,
                                 default = nil)
  if valid_593633 != nil:
    section.add "ReplicationGroupId", valid_593633
  var valid_593634 = query.getOrDefault("Version")
  valid_593634 = validateParameter(valid_593634, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593634 != nil:
    section.add "Version", valid_593634
  var valid_593635 = query.getOrDefault("RetainPrimaryCluster")
  valid_593635 = validateParameter(valid_593635, JBool, required = false, default = nil)
  if valid_593635 != nil:
    section.add "RetainPrimaryCluster", valid_593635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593636 = header.getOrDefault("X-Amz-Signature")
  valid_593636 = validateParameter(valid_593636, JString, required = false,
                                 default = nil)
  if valid_593636 != nil:
    section.add "X-Amz-Signature", valid_593636
  var valid_593637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593637 = validateParameter(valid_593637, JString, required = false,
                                 default = nil)
  if valid_593637 != nil:
    section.add "X-Amz-Content-Sha256", valid_593637
  var valid_593638 = header.getOrDefault("X-Amz-Date")
  valid_593638 = validateParameter(valid_593638, JString, required = false,
                                 default = nil)
  if valid_593638 != nil:
    section.add "X-Amz-Date", valid_593638
  var valid_593639 = header.getOrDefault("X-Amz-Credential")
  valid_593639 = validateParameter(valid_593639, JString, required = false,
                                 default = nil)
  if valid_593639 != nil:
    section.add "X-Amz-Credential", valid_593639
  var valid_593640 = header.getOrDefault("X-Amz-Security-Token")
  valid_593640 = validateParameter(valid_593640, JString, required = false,
                                 default = nil)
  if valid_593640 != nil:
    section.add "X-Amz-Security-Token", valid_593640
  var valid_593641 = header.getOrDefault("X-Amz-Algorithm")
  valid_593641 = validateParameter(valid_593641, JString, required = false,
                                 default = nil)
  if valid_593641 != nil:
    section.add "X-Amz-Algorithm", valid_593641
  var valid_593642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593642 = validateParameter(valid_593642, JString, required = false,
                                 default = nil)
  if valid_593642 != nil:
    section.add "X-Amz-SignedHeaders", valid_593642
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593643: Call_GetDeleteReplicationGroup_593628; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593643.validator(path, query, header, formData, body)
  let scheme = call_593643.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593643.url(scheme.get, call_593643.host, call_593643.base,
                         call_593643.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593643, url, valid)

proc call*(call_593644: Call_GetDeleteReplicationGroup_593628;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02";
          RetainPrimaryCluster: bool = false): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  var query_593645 = newJObject()
  add(query_593645, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_593645, "Action", newJString(Action))
  add(query_593645, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_593645, "Version", newJString(Version))
  add(query_593645, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  result = call_593644.call(nil, query_593645, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_593628(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_593629, base: "/",
    url: url_GetDeleteReplicationGroup_593630,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_593681 = ref object of OpenApiRestCall_592364
proc url_PostDeleteSnapshot_593683(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteSnapshot_593682(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593684 = query.getOrDefault("Action")
  valid_593684 = validateParameter(valid_593684, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_593684 != nil:
    section.add "Action", valid_593684
  var valid_593685 = query.getOrDefault("Version")
  valid_593685 = validateParameter(valid_593685, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593685 != nil:
    section.add "Version", valid_593685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593686 = header.getOrDefault("X-Amz-Signature")
  valid_593686 = validateParameter(valid_593686, JString, required = false,
                                 default = nil)
  if valid_593686 != nil:
    section.add "X-Amz-Signature", valid_593686
  var valid_593687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593687 = validateParameter(valid_593687, JString, required = false,
                                 default = nil)
  if valid_593687 != nil:
    section.add "X-Amz-Content-Sha256", valid_593687
  var valid_593688 = header.getOrDefault("X-Amz-Date")
  valid_593688 = validateParameter(valid_593688, JString, required = false,
                                 default = nil)
  if valid_593688 != nil:
    section.add "X-Amz-Date", valid_593688
  var valid_593689 = header.getOrDefault("X-Amz-Credential")
  valid_593689 = validateParameter(valid_593689, JString, required = false,
                                 default = nil)
  if valid_593689 != nil:
    section.add "X-Amz-Credential", valid_593689
  var valid_593690 = header.getOrDefault("X-Amz-Security-Token")
  valid_593690 = validateParameter(valid_593690, JString, required = false,
                                 default = nil)
  if valid_593690 != nil:
    section.add "X-Amz-Security-Token", valid_593690
  var valid_593691 = header.getOrDefault("X-Amz-Algorithm")
  valid_593691 = validateParameter(valid_593691, JString, required = false,
                                 default = nil)
  if valid_593691 != nil:
    section.add "X-Amz-Algorithm", valid_593691
  var valid_593692 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593692 = validateParameter(valid_593692, JString, required = false,
                                 default = nil)
  if valid_593692 != nil:
    section.add "X-Amz-SignedHeaders", valid_593692
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_593693 = formData.getOrDefault("SnapshotName")
  valid_593693 = validateParameter(valid_593693, JString, required = true,
                                 default = nil)
  if valid_593693 != nil:
    section.add "SnapshotName", valid_593693
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593694: Call_PostDeleteSnapshot_593681; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593694.validator(path, query, header, formData, body)
  let scheme = call_593694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593694.url(scheme.get, call_593694.host, call_593694.base,
                         call_593694.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593694, url, valid)

proc call*(call_593695: Call_PostDeleteSnapshot_593681; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593696 = newJObject()
  var formData_593697 = newJObject()
  add(formData_593697, "SnapshotName", newJString(SnapshotName))
  add(query_593696, "Action", newJString(Action))
  add(query_593696, "Version", newJString(Version))
  result = call_593695.call(nil, query_593696, nil, formData_593697, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_593681(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_593682, base: "/",
    url: url_PostDeleteSnapshot_593683, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_593665 = ref object of OpenApiRestCall_592364
proc url_GetDeleteSnapshot_593667(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteSnapshot_593666(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593668 = query.getOrDefault("Action")
  valid_593668 = validateParameter(valid_593668, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_593668 != nil:
    section.add "Action", valid_593668
  var valid_593669 = query.getOrDefault("Version")
  valid_593669 = validateParameter(valid_593669, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593669 != nil:
    section.add "Version", valid_593669
  var valid_593670 = query.getOrDefault("SnapshotName")
  valid_593670 = validateParameter(valid_593670, JString, required = true,
                                 default = nil)
  if valid_593670 != nil:
    section.add "SnapshotName", valid_593670
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593671 = header.getOrDefault("X-Amz-Signature")
  valid_593671 = validateParameter(valid_593671, JString, required = false,
                                 default = nil)
  if valid_593671 != nil:
    section.add "X-Amz-Signature", valid_593671
  var valid_593672 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593672 = validateParameter(valid_593672, JString, required = false,
                                 default = nil)
  if valid_593672 != nil:
    section.add "X-Amz-Content-Sha256", valid_593672
  var valid_593673 = header.getOrDefault("X-Amz-Date")
  valid_593673 = validateParameter(valid_593673, JString, required = false,
                                 default = nil)
  if valid_593673 != nil:
    section.add "X-Amz-Date", valid_593673
  var valid_593674 = header.getOrDefault("X-Amz-Credential")
  valid_593674 = validateParameter(valid_593674, JString, required = false,
                                 default = nil)
  if valid_593674 != nil:
    section.add "X-Amz-Credential", valid_593674
  var valid_593675 = header.getOrDefault("X-Amz-Security-Token")
  valid_593675 = validateParameter(valid_593675, JString, required = false,
                                 default = nil)
  if valid_593675 != nil:
    section.add "X-Amz-Security-Token", valid_593675
  var valid_593676 = header.getOrDefault("X-Amz-Algorithm")
  valid_593676 = validateParameter(valid_593676, JString, required = false,
                                 default = nil)
  if valid_593676 != nil:
    section.add "X-Amz-Algorithm", valid_593676
  var valid_593677 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593677 = validateParameter(valid_593677, JString, required = false,
                                 default = nil)
  if valid_593677 != nil:
    section.add "X-Amz-SignedHeaders", valid_593677
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593678: Call_GetDeleteSnapshot_593665; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_593678.validator(path, query, header, formData, body)
  let scheme = call_593678.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593678.url(scheme.get, call_593678.host, call_593678.base,
                         call_593678.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593678, url, valid)

proc call*(call_593679: Call_GetDeleteSnapshot_593665; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_593680 = newJObject()
  add(query_593680, "Action", newJString(Action))
  add(query_593680, "Version", newJString(Version))
  add(query_593680, "SnapshotName", newJString(SnapshotName))
  result = call_593679.call(nil, query_593680, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_593665(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_593666,
    base: "/", url: url_GetDeleteSnapshot_593667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_593718 = ref object of OpenApiRestCall_592364
proc url_PostDescribeCacheClusters_593720(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheClusters_593719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593721 = query.getOrDefault("Action")
  valid_593721 = validateParameter(valid_593721, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_593721 != nil:
    section.add "Action", valid_593721
  var valid_593722 = query.getOrDefault("Version")
  valid_593722 = validateParameter(valid_593722, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593722 != nil:
    section.add "Version", valid_593722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593723 = header.getOrDefault("X-Amz-Signature")
  valid_593723 = validateParameter(valid_593723, JString, required = false,
                                 default = nil)
  if valid_593723 != nil:
    section.add "X-Amz-Signature", valid_593723
  var valid_593724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593724 = validateParameter(valid_593724, JString, required = false,
                                 default = nil)
  if valid_593724 != nil:
    section.add "X-Amz-Content-Sha256", valid_593724
  var valid_593725 = header.getOrDefault("X-Amz-Date")
  valid_593725 = validateParameter(valid_593725, JString, required = false,
                                 default = nil)
  if valid_593725 != nil:
    section.add "X-Amz-Date", valid_593725
  var valid_593726 = header.getOrDefault("X-Amz-Credential")
  valid_593726 = validateParameter(valid_593726, JString, required = false,
                                 default = nil)
  if valid_593726 != nil:
    section.add "X-Amz-Credential", valid_593726
  var valid_593727 = header.getOrDefault("X-Amz-Security-Token")
  valid_593727 = validateParameter(valid_593727, JString, required = false,
                                 default = nil)
  if valid_593727 != nil:
    section.add "X-Amz-Security-Token", valid_593727
  var valid_593728 = header.getOrDefault("X-Amz-Algorithm")
  valid_593728 = validateParameter(valid_593728, JString, required = false,
                                 default = nil)
  if valid_593728 != nil:
    section.add "X-Amz-Algorithm", valid_593728
  var valid_593729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593729 = validateParameter(valid_593729, JString, required = false,
                                 default = nil)
  if valid_593729 != nil:
    section.add "X-Amz-SignedHeaders", valid_593729
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  section = newJObject()
  var valid_593730 = formData.getOrDefault("CacheClusterId")
  valid_593730 = validateParameter(valid_593730, JString, required = false,
                                 default = nil)
  if valid_593730 != nil:
    section.add "CacheClusterId", valid_593730
  var valid_593731 = formData.getOrDefault("MaxRecords")
  valid_593731 = validateParameter(valid_593731, JInt, required = false, default = nil)
  if valid_593731 != nil:
    section.add "MaxRecords", valid_593731
  var valid_593732 = formData.getOrDefault("Marker")
  valid_593732 = validateParameter(valid_593732, JString, required = false,
                                 default = nil)
  if valid_593732 != nil:
    section.add "Marker", valid_593732
  var valid_593733 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_593733 = validateParameter(valid_593733, JBool, required = false, default = nil)
  if valid_593733 != nil:
    section.add "ShowCacheNodeInfo", valid_593733
  var valid_593734 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_593734 = validateParameter(valid_593734, JBool, required = false, default = nil)
  if valid_593734 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_593734
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593735: Call_PostDescribeCacheClusters_593718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_593735.validator(path, query, header, formData, body)
  let scheme = call_593735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593735.url(scheme.get, call_593735.host, call_593735.base,
                         call_593735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593735, url, valid)

proc call*(call_593736: Call_PostDescribeCacheClusters_593718;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Version: string = "2015-02-02";
          ShowCacheClustersNotInReplicationGroups: bool = false): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  var query_593737 = newJObject()
  var formData_593738 = newJObject()
  add(formData_593738, "CacheClusterId", newJString(CacheClusterId))
  add(formData_593738, "MaxRecords", newJInt(MaxRecords))
  add(formData_593738, "Marker", newJString(Marker))
  add(formData_593738, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_593737, "Action", newJString(Action))
  add(query_593737, "Version", newJString(Version))
  add(formData_593738, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  result = call_593736.call(nil, query_593737, nil, formData_593738, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_593718(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_593719, base: "/",
    url: url_PostDescribeCacheClusters_593720,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_593698 = ref object of OpenApiRestCall_592364
proc url_GetDescribeCacheClusters_593700(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheClusters_593699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: JString (required)
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593701 = query.getOrDefault("Marker")
  valid_593701 = validateParameter(valid_593701, JString, required = false,
                                 default = nil)
  if valid_593701 != nil:
    section.add "Marker", valid_593701
  var valid_593702 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_593702 = validateParameter(valid_593702, JBool, required = false, default = nil)
  if valid_593702 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_593702
  var valid_593703 = query.getOrDefault("CacheClusterId")
  valid_593703 = validateParameter(valid_593703, JString, required = false,
                                 default = nil)
  if valid_593703 != nil:
    section.add "CacheClusterId", valid_593703
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593704 = query.getOrDefault("Action")
  valid_593704 = validateParameter(valid_593704, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_593704 != nil:
    section.add "Action", valid_593704
  var valid_593705 = query.getOrDefault("ShowCacheNodeInfo")
  valid_593705 = validateParameter(valid_593705, JBool, required = false, default = nil)
  if valid_593705 != nil:
    section.add "ShowCacheNodeInfo", valid_593705
  var valid_593706 = query.getOrDefault("Version")
  valid_593706 = validateParameter(valid_593706, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593706 != nil:
    section.add "Version", valid_593706
  var valid_593707 = query.getOrDefault("MaxRecords")
  valid_593707 = validateParameter(valid_593707, JInt, required = false, default = nil)
  if valid_593707 != nil:
    section.add "MaxRecords", valid_593707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593708 = header.getOrDefault("X-Amz-Signature")
  valid_593708 = validateParameter(valid_593708, JString, required = false,
                                 default = nil)
  if valid_593708 != nil:
    section.add "X-Amz-Signature", valid_593708
  var valid_593709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593709 = validateParameter(valid_593709, JString, required = false,
                                 default = nil)
  if valid_593709 != nil:
    section.add "X-Amz-Content-Sha256", valid_593709
  var valid_593710 = header.getOrDefault("X-Amz-Date")
  valid_593710 = validateParameter(valid_593710, JString, required = false,
                                 default = nil)
  if valid_593710 != nil:
    section.add "X-Amz-Date", valid_593710
  var valid_593711 = header.getOrDefault("X-Amz-Credential")
  valid_593711 = validateParameter(valid_593711, JString, required = false,
                                 default = nil)
  if valid_593711 != nil:
    section.add "X-Amz-Credential", valid_593711
  var valid_593712 = header.getOrDefault("X-Amz-Security-Token")
  valid_593712 = validateParameter(valid_593712, JString, required = false,
                                 default = nil)
  if valid_593712 != nil:
    section.add "X-Amz-Security-Token", valid_593712
  var valid_593713 = header.getOrDefault("X-Amz-Algorithm")
  valid_593713 = validateParameter(valid_593713, JString, required = false,
                                 default = nil)
  if valid_593713 != nil:
    section.add "X-Amz-Algorithm", valid_593713
  var valid_593714 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593714 = validateParameter(valid_593714, JString, required = false,
                                 default = nil)
  if valid_593714 != nil:
    section.add "X-Amz-SignedHeaders", valid_593714
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593715: Call_GetDescribeCacheClusters_593698; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_593715.validator(path, query, header, formData, body)
  let scheme = call_593715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593715.url(scheme.get, call_593715.host, call_593715.base,
                         call_593715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593715, url, valid)

proc call*(call_593716: Call_GetDescribeCacheClusters_593698; Marker: string = "";
          ShowCacheClustersNotInReplicationGroups: bool = false;
          CacheClusterId: string = ""; Action: string = "DescribeCacheClusters";
          ShowCacheNodeInfo: bool = false; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: string (required)
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593717 = newJObject()
  add(query_593717, "Marker", newJString(Marker))
  add(query_593717, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_593717, "CacheClusterId", newJString(CacheClusterId))
  add(query_593717, "Action", newJString(Action))
  add(query_593717, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_593717, "Version", newJString(Version))
  add(query_593717, "MaxRecords", newJInt(MaxRecords))
  result = call_593716.call(nil, query_593717, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_593698(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_593699, base: "/",
    url: url_GetDescribeCacheClusters_593700, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_593760 = ref object of OpenApiRestCall_592364
proc url_PostDescribeCacheEngineVersions_593762(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheEngineVersions_593761(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593763 = query.getOrDefault("Action")
  valid_593763 = validateParameter(valid_593763, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_593763 != nil:
    section.add "Action", valid_593763
  var valid_593764 = query.getOrDefault("Version")
  valid_593764 = validateParameter(valid_593764, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593764 != nil:
    section.add "Version", valid_593764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593765 = header.getOrDefault("X-Amz-Signature")
  valid_593765 = validateParameter(valid_593765, JString, required = false,
                                 default = nil)
  if valid_593765 != nil:
    section.add "X-Amz-Signature", valid_593765
  var valid_593766 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593766 = validateParameter(valid_593766, JString, required = false,
                                 default = nil)
  if valid_593766 != nil:
    section.add "X-Amz-Content-Sha256", valid_593766
  var valid_593767 = header.getOrDefault("X-Amz-Date")
  valid_593767 = validateParameter(valid_593767, JString, required = false,
                                 default = nil)
  if valid_593767 != nil:
    section.add "X-Amz-Date", valid_593767
  var valid_593768 = header.getOrDefault("X-Amz-Credential")
  valid_593768 = validateParameter(valid_593768, JString, required = false,
                                 default = nil)
  if valid_593768 != nil:
    section.add "X-Amz-Credential", valid_593768
  var valid_593769 = header.getOrDefault("X-Amz-Security-Token")
  valid_593769 = validateParameter(valid_593769, JString, required = false,
                                 default = nil)
  if valid_593769 != nil:
    section.add "X-Amz-Security-Token", valid_593769
  var valid_593770 = header.getOrDefault("X-Amz-Algorithm")
  valid_593770 = validateParameter(valid_593770, JString, required = false,
                                 default = nil)
  if valid_593770 != nil:
    section.add "X-Amz-Algorithm", valid_593770
  var valid_593771 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593771 = validateParameter(valid_593771, JString, required = false,
                                 default = nil)
  if valid_593771 != nil:
    section.add "X-Amz-SignedHeaders", valid_593771
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  section = newJObject()
  var valid_593772 = formData.getOrDefault("DefaultOnly")
  valid_593772 = validateParameter(valid_593772, JBool, required = false, default = nil)
  if valid_593772 != nil:
    section.add "DefaultOnly", valid_593772
  var valid_593773 = formData.getOrDefault("MaxRecords")
  valid_593773 = validateParameter(valid_593773, JInt, required = false, default = nil)
  if valid_593773 != nil:
    section.add "MaxRecords", valid_593773
  var valid_593774 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_593774 = validateParameter(valid_593774, JString, required = false,
                                 default = nil)
  if valid_593774 != nil:
    section.add "CacheParameterGroupFamily", valid_593774
  var valid_593775 = formData.getOrDefault("EngineVersion")
  valid_593775 = validateParameter(valid_593775, JString, required = false,
                                 default = nil)
  if valid_593775 != nil:
    section.add "EngineVersion", valid_593775
  var valid_593776 = formData.getOrDefault("Marker")
  valid_593776 = validateParameter(valid_593776, JString, required = false,
                                 default = nil)
  if valid_593776 != nil:
    section.add "Marker", valid_593776
  var valid_593777 = formData.getOrDefault("Engine")
  valid_593777 = validateParameter(valid_593777, JString, required = false,
                                 default = nil)
  if valid_593777 != nil:
    section.add "Engine", valid_593777
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593778: Call_PostDescribeCacheEngineVersions_593760;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_593778.validator(path, query, header, formData, body)
  let scheme = call_593778.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593778.url(scheme.get, call_593778.host, call_593778.base,
                         call_593778.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593778, url, valid)

proc call*(call_593779: Call_PostDescribeCacheEngineVersions_593760;
          DefaultOnly: bool = false; MaxRecords: int = 0;
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593780 = newJObject()
  var formData_593781 = newJObject()
  add(formData_593781, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_593781, "MaxRecords", newJInt(MaxRecords))
  add(formData_593781, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_593781, "EngineVersion", newJString(EngineVersion))
  add(formData_593781, "Marker", newJString(Marker))
  add(formData_593781, "Engine", newJString(Engine))
  add(query_593780, "Action", newJString(Action))
  add(query_593780, "Version", newJString(Version))
  result = call_593779.call(nil, query_593780, nil, formData_593781, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_593760(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_593761, base: "/",
    url: url_PostDescribeCacheEngineVersions_593762,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_593739 = ref object of OpenApiRestCall_592364
proc url_GetDescribeCacheEngineVersions_593741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheEngineVersions_593740(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_593742 = query.getOrDefault("Marker")
  valid_593742 = validateParameter(valid_593742, JString, required = false,
                                 default = nil)
  if valid_593742 != nil:
    section.add "Marker", valid_593742
  var valid_593743 = query.getOrDefault("Engine")
  valid_593743 = validateParameter(valid_593743, JString, required = false,
                                 default = nil)
  if valid_593743 != nil:
    section.add "Engine", valid_593743
  var valid_593744 = query.getOrDefault("CacheParameterGroupFamily")
  valid_593744 = validateParameter(valid_593744, JString, required = false,
                                 default = nil)
  if valid_593744 != nil:
    section.add "CacheParameterGroupFamily", valid_593744
  var valid_593745 = query.getOrDefault("EngineVersion")
  valid_593745 = validateParameter(valid_593745, JString, required = false,
                                 default = nil)
  if valid_593745 != nil:
    section.add "EngineVersion", valid_593745
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593746 = query.getOrDefault("Action")
  valid_593746 = validateParameter(valid_593746, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_593746 != nil:
    section.add "Action", valid_593746
  var valid_593747 = query.getOrDefault("Version")
  valid_593747 = validateParameter(valid_593747, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593747 != nil:
    section.add "Version", valid_593747
  var valid_593748 = query.getOrDefault("MaxRecords")
  valid_593748 = validateParameter(valid_593748, JInt, required = false, default = nil)
  if valid_593748 != nil:
    section.add "MaxRecords", valid_593748
  var valid_593749 = query.getOrDefault("DefaultOnly")
  valid_593749 = validateParameter(valid_593749, JBool, required = false, default = nil)
  if valid_593749 != nil:
    section.add "DefaultOnly", valid_593749
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593750 = header.getOrDefault("X-Amz-Signature")
  valid_593750 = validateParameter(valid_593750, JString, required = false,
                                 default = nil)
  if valid_593750 != nil:
    section.add "X-Amz-Signature", valid_593750
  var valid_593751 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593751 = validateParameter(valid_593751, JString, required = false,
                                 default = nil)
  if valid_593751 != nil:
    section.add "X-Amz-Content-Sha256", valid_593751
  var valid_593752 = header.getOrDefault("X-Amz-Date")
  valid_593752 = validateParameter(valid_593752, JString, required = false,
                                 default = nil)
  if valid_593752 != nil:
    section.add "X-Amz-Date", valid_593752
  var valid_593753 = header.getOrDefault("X-Amz-Credential")
  valid_593753 = validateParameter(valid_593753, JString, required = false,
                                 default = nil)
  if valid_593753 != nil:
    section.add "X-Amz-Credential", valid_593753
  var valid_593754 = header.getOrDefault("X-Amz-Security-Token")
  valid_593754 = validateParameter(valid_593754, JString, required = false,
                                 default = nil)
  if valid_593754 != nil:
    section.add "X-Amz-Security-Token", valid_593754
  var valid_593755 = header.getOrDefault("X-Amz-Algorithm")
  valid_593755 = validateParameter(valid_593755, JString, required = false,
                                 default = nil)
  if valid_593755 != nil:
    section.add "X-Amz-Algorithm", valid_593755
  var valid_593756 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593756 = validateParameter(valid_593756, JString, required = false,
                                 default = nil)
  if valid_593756 != nil:
    section.add "X-Amz-SignedHeaders", valid_593756
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593757: Call_GetDescribeCacheEngineVersions_593739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_593757.validator(path, query, header, formData, body)
  let scheme = call_593757.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593757.url(scheme.get, call_593757.host, call_593757.base,
                         call_593757.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593757, url, valid)

proc call*(call_593758: Call_GetDescribeCacheEngineVersions_593739;
          Marker: string = ""; Engine: string = "";
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_593759 = newJObject()
  add(query_593759, "Marker", newJString(Marker))
  add(query_593759, "Engine", newJString(Engine))
  add(query_593759, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_593759, "EngineVersion", newJString(EngineVersion))
  add(query_593759, "Action", newJString(Action))
  add(query_593759, "Version", newJString(Version))
  add(query_593759, "MaxRecords", newJInt(MaxRecords))
  add(query_593759, "DefaultOnly", newJBool(DefaultOnly))
  result = call_593758.call(nil, query_593759, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_593739(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_593740, base: "/",
    url: url_GetDescribeCacheEngineVersions_593741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_593800 = ref object of OpenApiRestCall_592364
proc url_PostDescribeCacheParameterGroups_593802(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameterGroups_593801(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593803 = query.getOrDefault("Action")
  valid_593803 = validateParameter(valid_593803, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_593803 != nil:
    section.add "Action", valid_593803
  var valid_593804 = query.getOrDefault("Version")
  valid_593804 = validateParameter(valid_593804, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593804 != nil:
    section.add "Version", valid_593804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593805 = header.getOrDefault("X-Amz-Signature")
  valid_593805 = validateParameter(valid_593805, JString, required = false,
                                 default = nil)
  if valid_593805 != nil:
    section.add "X-Amz-Signature", valid_593805
  var valid_593806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593806 = validateParameter(valid_593806, JString, required = false,
                                 default = nil)
  if valid_593806 != nil:
    section.add "X-Amz-Content-Sha256", valid_593806
  var valid_593807 = header.getOrDefault("X-Amz-Date")
  valid_593807 = validateParameter(valid_593807, JString, required = false,
                                 default = nil)
  if valid_593807 != nil:
    section.add "X-Amz-Date", valid_593807
  var valid_593808 = header.getOrDefault("X-Amz-Credential")
  valid_593808 = validateParameter(valid_593808, JString, required = false,
                                 default = nil)
  if valid_593808 != nil:
    section.add "X-Amz-Credential", valid_593808
  var valid_593809 = header.getOrDefault("X-Amz-Security-Token")
  valid_593809 = validateParameter(valid_593809, JString, required = false,
                                 default = nil)
  if valid_593809 != nil:
    section.add "X-Amz-Security-Token", valid_593809
  var valid_593810 = header.getOrDefault("X-Amz-Algorithm")
  valid_593810 = validateParameter(valid_593810, JString, required = false,
                                 default = nil)
  if valid_593810 != nil:
    section.add "X-Amz-Algorithm", valid_593810
  var valid_593811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593811 = validateParameter(valid_593811, JString, required = false,
                                 default = nil)
  if valid_593811 != nil:
    section.add "X-Amz-SignedHeaders", valid_593811
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_593812 = formData.getOrDefault("MaxRecords")
  valid_593812 = validateParameter(valid_593812, JInt, required = false, default = nil)
  if valid_593812 != nil:
    section.add "MaxRecords", valid_593812
  var valid_593813 = formData.getOrDefault("Marker")
  valid_593813 = validateParameter(valid_593813, JString, required = false,
                                 default = nil)
  if valid_593813 != nil:
    section.add "Marker", valid_593813
  var valid_593814 = formData.getOrDefault("CacheParameterGroupName")
  valid_593814 = validateParameter(valid_593814, JString, required = false,
                                 default = nil)
  if valid_593814 != nil:
    section.add "CacheParameterGroupName", valid_593814
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593815: Call_PostDescribeCacheParameterGroups_593800;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_593815.validator(path, query, header, formData, body)
  let scheme = call_593815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593815.url(scheme.get, call_593815.host, call_593815.base,
                         call_593815.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593815, url, valid)

proc call*(call_593816: Call_PostDescribeCacheParameterGroups_593800;
          MaxRecords: int = 0; Marker: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593817 = newJObject()
  var formData_593818 = newJObject()
  add(formData_593818, "MaxRecords", newJInt(MaxRecords))
  add(formData_593818, "Marker", newJString(Marker))
  add(formData_593818, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_593817, "Action", newJString(Action))
  add(query_593817, "Version", newJString(Version))
  result = call_593816.call(nil, query_593817, nil, formData_593818, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_593800(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_593801, base: "/",
    url: url_PostDescribeCacheParameterGroups_593802,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_593782 = ref object of OpenApiRestCall_592364
proc url_GetDescribeCacheParameterGroups_593784(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameterGroups_593783(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593785 = query.getOrDefault("Marker")
  valid_593785 = validateParameter(valid_593785, JString, required = false,
                                 default = nil)
  if valid_593785 != nil:
    section.add "Marker", valid_593785
  var valid_593786 = query.getOrDefault("CacheParameterGroupName")
  valid_593786 = validateParameter(valid_593786, JString, required = false,
                                 default = nil)
  if valid_593786 != nil:
    section.add "CacheParameterGroupName", valid_593786
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593787 = query.getOrDefault("Action")
  valid_593787 = validateParameter(valid_593787, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_593787 != nil:
    section.add "Action", valid_593787
  var valid_593788 = query.getOrDefault("Version")
  valid_593788 = validateParameter(valid_593788, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593788 != nil:
    section.add "Version", valid_593788
  var valid_593789 = query.getOrDefault("MaxRecords")
  valid_593789 = validateParameter(valid_593789, JInt, required = false, default = nil)
  if valid_593789 != nil:
    section.add "MaxRecords", valid_593789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593790 = header.getOrDefault("X-Amz-Signature")
  valid_593790 = validateParameter(valid_593790, JString, required = false,
                                 default = nil)
  if valid_593790 != nil:
    section.add "X-Amz-Signature", valid_593790
  var valid_593791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593791 = validateParameter(valid_593791, JString, required = false,
                                 default = nil)
  if valid_593791 != nil:
    section.add "X-Amz-Content-Sha256", valid_593791
  var valid_593792 = header.getOrDefault("X-Amz-Date")
  valid_593792 = validateParameter(valid_593792, JString, required = false,
                                 default = nil)
  if valid_593792 != nil:
    section.add "X-Amz-Date", valid_593792
  var valid_593793 = header.getOrDefault("X-Amz-Credential")
  valid_593793 = validateParameter(valid_593793, JString, required = false,
                                 default = nil)
  if valid_593793 != nil:
    section.add "X-Amz-Credential", valid_593793
  var valid_593794 = header.getOrDefault("X-Amz-Security-Token")
  valid_593794 = validateParameter(valid_593794, JString, required = false,
                                 default = nil)
  if valid_593794 != nil:
    section.add "X-Amz-Security-Token", valid_593794
  var valid_593795 = header.getOrDefault("X-Amz-Algorithm")
  valid_593795 = validateParameter(valid_593795, JString, required = false,
                                 default = nil)
  if valid_593795 != nil:
    section.add "X-Amz-Algorithm", valid_593795
  var valid_593796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593796 = validateParameter(valid_593796, JString, required = false,
                                 default = nil)
  if valid_593796 != nil:
    section.add "X-Amz-SignedHeaders", valid_593796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593797: Call_GetDescribeCacheParameterGroups_593782;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_593797.validator(path, query, header, formData, body)
  let scheme = call_593797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593797.url(scheme.get, call_593797.host, call_593797.base,
                         call_593797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593797, url, valid)

proc call*(call_593798: Call_GetDescribeCacheParameterGroups_593782;
          Marker: string = ""; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593799 = newJObject()
  add(query_593799, "Marker", newJString(Marker))
  add(query_593799, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_593799, "Action", newJString(Action))
  add(query_593799, "Version", newJString(Version))
  add(query_593799, "MaxRecords", newJInt(MaxRecords))
  result = call_593798.call(nil, query_593799, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_593782(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_593783, base: "/",
    url: url_GetDescribeCacheParameterGroups_593784,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_593838 = ref object of OpenApiRestCall_592364
proc url_PostDescribeCacheParameters_593840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheParameters_593839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593841 = query.getOrDefault("Action")
  valid_593841 = validateParameter(valid_593841, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_593841 != nil:
    section.add "Action", valid_593841
  var valid_593842 = query.getOrDefault("Version")
  valid_593842 = validateParameter(valid_593842, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593842 != nil:
    section.add "Version", valid_593842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593843 = header.getOrDefault("X-Amz-Signature")
  valid_593843 = validateParameter(valid_593843, JString, required = false,
                                 default = nil)
  if valid_593843 != nil:
    section.add "X-Amz-Signature", valid_593843
  var valid_593844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593844 = validateParameter(valid_593844, JString, required = false,
                                 default = nil)
  if valid_593844 != nil:
    section.add "X-Amz-Content-Sha256", valid_593844
  var valid_593845 = header.getOrDefault("X-Amz-Date")
  valid_593845 = validateParameter(valid_593845, JString, required = false,
                                 default = nil)
  if valid_593845 != nil:
    section.add "X-Amz-Date", valid_593845
  var valid_593846 = header.getOrDefault("X-Amz-Credential")
  valid_593846 = validateParameter(valid_593846, JString, required = false,
                                 default = nil)
  if valid_593846 != nil:
    section.add "X-Amz-Credential", valid_593846
  var valid_593847 = header.getOrDefault("X-Amz-Security-Token")
  valid_593847 = validateParameter(valid_593847, JString, required = false,
                                 default = nil)
  if valid_593847 != nil:
    section.add "X-Amz-Security-Token", valid_593847
  var valid_593848 = header.getOrDefault("X-Amz-Algorithm")
  valid_593848 = validateParameter(valid_593848, JString, required = false,
                                 default = nil)
  if valid_593848 != nil:
    section.add "X-Amz-Algorithm", valid_593848
  var valid_593849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593849 = validateParameter(valid_593849, JString, required = false,
                                 default = nil)
  if valid_593849 != nil:
    section.add "X-Amz-SignedHeaders", valid_593849
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_593850 = formData.getOrDefault("Source")
  valid_593850 = validateParameter(valid_593850, JString, required = false,
                                 default = nil)
  if valid_593850 != nil:
    section.add "Source", valid_593850
  var valid_593851 = formData.getOrDefault("MaxRecords")
  valid_593851 = validateParameter(valid_593851, JInt, required = false, default = nil)
  if valid_593851 != nil:
    section.add "MaxRecords", valid_593851
  var valid_593852 = formData.getOrDefault("Marker")
  valid_593852 = validateParameter(valid_593852, JString, required = false,
                                 default = nil)
  if valid_593852 != nil:
    section.add "Marker", valid_593852
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593853 = formData.getOrDefault("CacheParameterGroupName")
  valid_593853 = validateParameter(valid_593853, JString, required = true,
                                 default = nil)
  if valid_593853 != nil:
    section.add "CacheParameterGroupName", valid_593853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593854: Call_PostDescribeCacheParameters_593838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_593854.validator(path, query, header, formData, body)
  let scheme = call_593854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593854.url(scheme.get, call_593854.host, call_593854.base,
                         call_593854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593854, url, valid)

proc call*(call_593855: Call_PostDescribeCacheParameters_593838;
          CacheParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593856 = newJObject()
  var formData_593857 = newJObject()
  add(formData_593857, "Source", newJString(Source))
  add(formData_593857, "MaxRecords", newJInt(MaxRecords))
  add(formData_593857, "Marker", newJString(Marker))
  add(formData_593857, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_593856, "Action", newJString(Action))
  add(query_593856, "Version", newJString(Version))
  result = call_593855.call(nil, query_593856, nil, formData_593857, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_593838(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_593839, base: "/",
    url: url_PostDescribeCacheParameters_593840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_593819 = ref object of OpenApiRestCall_592364
proc url_GetDescribeCacheParameters_593821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheParameters_593820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593822 = query.getOrDefault("Marker")
  valid_593822 = validateParameter(valid_593822, JString, required = false,
                                 default = nil)
  if valid_593822 != nil:
    section.add "Marker", valid_593822
  var valid_593823 = query.getOrDefault("Source")
  valid_593823 = validateParameter(valid_593823, JString, required = false,
                                 default = nil)
  if valid_593823 != nil:
    section.add "Source", valid_593823
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_593824 = query.getOrDefault("CacheParameterGroupName")
  valid_593824 = validateParameter(valid_593824, JString, required = true,
                                 default = nil)
  if valid_593824 != nil:
    section.add "CacheParameterGroupName", valid_593824
  var valid_593825 = query.getOrDefault("Action")
  valid_593825 = validateParameter(valid_593825, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_593825 != nil:
    section.add "Action", valid_593825
  var valid_593826 = query.getOrDefault("Version")
  valid_593826 = validateParameter(valid_593826, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593826 != nil:
    section.add "Version", valid_593826
  var valid_593827 = query.getOrDefault("MaxRecords")
  valid_593827 = validateParameter(valid_593827, JInt, required = false, default = nil)
  if valid_593827 != nil:
    section.add "MaxRecords", valid_593827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593828 = header.getOrDefault("X-Amz-Signature")
  valid_593828 = validateParameter(valid_593828, JString, required = false,
                                 default = nil)
  if valid_593828 != nil:
    section.add "X-Amz-Signature", valid_593828
  var valid_593829 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593829 = validateParameter(valid_593829, JString, required = false,
                                 default = nil)
  if valid_593829 != nil:
    section.add "X-Amz-Content-Sha256", valid_593829
  var valid_593830 = header.getOrDefault("X-Amz-Date")
  valid_593830 = validateParameter(valid_593830, JString, required = false,
                                 default = nil)
  if valid_593830 != nil:
    section.add "X-Amz-Date", valid_593830
  var valid_593831 = header.getOrDefault("X-Amz-Credential")
  valid_593831 = validateParameter(valid_593831, JString, required = false,
                                 default = nil)
  if valid_593831 != nil:
    section.add "X-Amz-Credential", valid_593831
  var valid_593832 = header.getOrDefault("X-Amz-Security-Token")
  valid_593832 = validateParameter(valid_593832, JString, required = false,
                                 default = nil)
  if valid_593832 != nil:
    section.add "X-Amz-Security-Token", valid_593832
  var valid_593833 = header.getOrDefault("X-Amz-Algorithm")
  valid_593833 = validateParameter(valid_593833, JString, required = false,
                                 default = nil)
  if valid_593833 != nil:
    section.add "X-Amz-Algorithm", valid_593833
  var valid_593834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593834 = validateParameter(valid_593834, JString, required = false,
                                 default = nil)
  if valid_593834 != nil:
    section.add "X-Amz-SignedHeaders", valid_593834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593835: Call_GetDescribeCacheParameters_593819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_593835.validator(path, query, header, formData, body)
  let scheme = call_593835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593835.url(scheme.get, call_593835.host, call_593835.base,
                         call_593835.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593835, url, valid)

proc call*(call_593836: Call_GetDescribeCacheParameters_593819;
          CacheParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593837 = newJObject()
  add(query_593837, "Marker", newJString(Marker))
  add(query_593837, "Source", newJString(Source))
  add(query_593837, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_593837, "Action", newJString(Action))
  add(query_593837, "Version", newJString(Version))
  add(query_593837, "MaxRecords", newJInt(MaxRecords))
  result = call_593836.call(nil, query_593837, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_593819(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_593820, base: "/",
    url: url_GetDescribeCacheParameters_593821,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_593876 = ref object of OpenApiRestCall_592364
proc url_PostDescribeCacheSecurityGroups_593878(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_593877(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593879 = query.getOrDefault("Action")
  valid_593879 = validateParameter(valid_593879, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_593879 != nil:
    section.add "Action", valid_593879
  var valid_593880 = query.getOrDefault("Version")
  valid_593880 = validateParameter(valid_593880, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593880 != nil:
    section.add "Version", valid_593880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593881 = header.getOrDefault("X-Amz-Signature")
  valid_593881 = validateParameter(valid_593881, JString, required = false,
                                 default = nil)
  if valid_593881 != nil:
    section.add "X-Amz-Signature", valid_593881
  var valid_593882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593882 = validateParameter(valid_593882, JString, required = false,
                                 default = nil)
  if valid_593882 != nil:
    section.add "X-Amz-Content-Sha256", valid_593882
  var valid_593883 = header.getOrDefault("X-Amz-Date")
  valid_593883 = validateParameter(valid_593883, JString, required = false,
                                 default = nil)
  if valid_593883 != nil:
    section.add "X-Amz-Date", valid_593883
  var valid_593884 = header.getOrDefault("X-Amz-Credential")
  valid_593884 = validateParameter(valid_593884, JString, required = false,
                                 default = nil)
  if valid_593884 != nil:
    section.add "X-Amz-Credential", valid_593884
  var valid_593885 = header.getOrDefault("X-Amz-Security-Token")
  valid_593885 = validateParameter(valid_593885, JString, required = false,
                                 default = nil)
  if valid_593885 != nil:
    section.add "X-Amz-Security-Token", valid_593885
  var valid_593886 = header.getOrDefault("X-Amz-Algorithm")
  valid_593886 = validateParameter(valid_593886, JString, required = false,
                                 default = nil)
  if valid_593886 != nil:
    section.add "X-Amz-Algorithm", valid_593886
  var valid_593887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593887 = validateParameter(valid_593887, JString, required = false,
                                 default = nil)
  if valid_593887 != nil:
    section.add "X-Amz-SignedHeaders", valid_593887
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_593888 = formData.getOrDefault("MaxRecords")
  valid_593888 = validateParameter(valid_593888, JInt, required = false, default = nil)
  if valid_593888 != nil:
    section.add "MaxRecords", valid_593888
  var valid_593889 = formData.getOrDefault("CacheSecurityGroupName")
  valid_593889 = validateParameter(valid_593889, JString, required = false,
                                 default = nil)
  if valid_593889 != nil:
    section.add "CacheSecurityGroupName", valid_593889
  var valid_593890 = formData.getOrDefault("Marker")
  valid_593890 = validateParameter(valid_593890, JString, required = false,
                                 default = nil)
  if valid_593890 != nil:
    section.add "Marker", valid_593890
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593891: Call_PostDescribeCacheSecurityGroups_593876;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_593891.validator(path, query, header, formData, body)
  let scheme = call_593891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593891.url(scheme.get, call_593891.host, call_593891.base,
                         call_593891.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593891, url, valid)

proc call*(call_593892: Call_PostDescribeCacheSecurityGroups_593876;
          MaxRecords: int = 0; CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593893 = newJObject()
  var formData_593894 = newJObject()
  add(formData_593894, "MaxRecords", newJInt(MaxRecords))
  add(formData_593894, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_593894, "Marker", newJString(Marker))
  add(query_593893, "Action", newJString(Action))
  add(query_593893, "Version", newJString(Version))
  result = call_593892.call(nil, query_593893, nil, formData_593894, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_593876(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_593877, base: "/",
    url: url_PostDescribeCacheSecurityGroups_593878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_593858 = ref object of OpenApiRestCall_592364
proc url_GetDescribeCacheSecurityGroups_593860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_593859(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593861 = query.getOrDefault("Marker")
  valid_593861 = validateParameter(valid_593861, JString, required = false,
                                 default = nil)
  if valid_593861 != nil:
    section.add "Marker", valid_593861
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593862 = query.getOrDefault("Action")
  valid_593862 = validateParameter(valid_593862, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_593862 != nil:
    section.add "Action", valid_593862
  var valid_593863 = query.getOrDefault("CacheSecurityGroupName")
  valid_593863 = validateParameter(valid_593863, JString, required = false,
                                 default = nil)
  if valid_593863 != nil:
    section.add "CacheSecurityGroupName", valid_593863
  var valid_593864 = query.getOrDefault("Version")
  valid_593864 = validateParameter(valid_593864, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593864 != nil:
    section.add "Version", valid_593864
  var valid_593865 = query.getOrDefault("MaxRecords")
  valid_593865 = validateParameter(valid_593865, JInt, required = false, default = nil)
  if valid_593865 != nil:
    section.add "MaxRecords", valid_593865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593866 = header.getOrDefault("X-Amz-Signature")
  valid_593866 = validateParameter(valid_593866, JString, required = false,
                                 default = nil)
  if valid_593866 != nil:
    section.add "X-Amz-Signature", valid_593866
  var valid_593867 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593867 = validateParameter(valid_593867, JString, required = false,
                                 default = nil)
  if valid_593867 != nil:
    section.add "X-Amz-Content-Sha256", valid_593867
  var valid_593868 = header.getOrDefault("X-Amz-Date")
  valid_593868 = validateParameter(valid_593868, JString, required = false,
                                 default = nil)
  if valid_593868 != nil:
    section.add "X-Amz-Date", valid_593868
  var valid_593869 = header.getOrDefault("X-Amz-Credential")
  valid_593869 = validateParameter(valid_593869, JString, required = false,
                                 default = nil)
  if valid_593869 != nil:
    section.add "X-Amz-Credential", valid_593869
  var valid_593870 = header.getOrDefault("X-Amz-Security-Token")
  valid_593870 = validateParameter(valid_593870, JString, required = false,
                                 default = nil)
  if valid_593870 != nil:
    section.add "X-Amz-Security-Token", valid_593870
  var valid_593871 = header.getOrDefault("X-Amz-Algorithm")
  valid_593871 = validateParameter(valid_593871, JString, required = false,
                                 default = nil)
  if valid_593871 != nil:
    section.add "X-Amz-Algorithm", valid_593871
  var valid_593872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593872 = validateParameter(valid_593872, JString, required = false,
                                 default = nil)
  if valid_593872 != nil:
    section.add "X-Amz-SignedHeaders", valid_593872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593873: Call_GetDescribeCacheSecurityGroups_593858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_593873.validator(path, query, header, formData, body)
  let scheme = call_593873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593873.url(scheme.get, call_593873.host, call_593873.base,
                         call_593873.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593873, url, valid)

proc call*(call_593874: Call_GetDescribeCacheSecurityGroups_593858;
          Marker: string = ""; Action: string = "DescribeCacheSecurityGroups";
          CacheSecurityGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593875 = newJObject()
  add(query_593875, "Marker", newJString(Marker))
  add(query_593875, "Action", newJString(Action))
  add(query_593875, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_593875, "Version", newJString(Version))
  add(query_593875, "MaxRecords", newJInt(MaxRecords))
  result = call_593874.call(nil, query_593875, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_593858(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_593859, base: "/",
    url: url_GetDescribeCacheSecurityGroups_593860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_593913 = ref object of OpenApiRestCall_592364
proc url_PostDescribeCacheSubnetGroups_593915(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_593914(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593916 = query.getOrDefault("Action")
  valid_593916 = validateParameter(valid_593916, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_593916 != nil:
    section.add "Action", valid_593916
  var valid_593917 = query.getOrDefault("Version")
  valid_593917 = validateParameter(valid_593917, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593917 != nil:
    section.add "Version", valid_593917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593918 = header.getOrDefault("X-Amz-Signature")
  valid_593918 = validateParameter(valid_593918, JString, required = false,
                                 default = nil)
  if valid_593918 != nil:
    section.add "X-Amz-Signature", valid_593918
  var valid_593919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593919 = validateParameter(valid_593919, JString, required = false,
                                 default = nil)
  if valid_593919 != nil:
    section.add "X-Amz-Content-Sha256", valid_593919
  var valid_593920 = header.getOrDefault("X-Amz-Date")
  valid_593920 = validateParameter(valid_593920, JString, required = false,
                                 default = nil)
  if valid_593920 != nil:
    section.add "X-Amz-Date", valid_593920
  var valid_593921 = header.getOrDefault("X-Amz-Credential")
  valid_593921 = validateParameter(valid_593921, JString, required = false,
                                 default = nil)
  if valid_593921 != nil:
    section.add "X-Amz-Credential", valid_593921
  var valid_593922 = header.getOrDefault("X-Amz-Security-Token")
  valid_593922 = validateParameter(valid_593922, JString, required = false,
                                 default = nil)
  if valid_593922 != nil:
    section.add "X-Amz-Security-Token", valid_593922
  var valid_593923 = header.getOrDefault("X-Amz-Algorithm")
  valid_593923 = validateParameter(valid_593923, JString, required = false,
                                 default = nil)
  if valid_593923 != nil:
    section.add "X-Amz-Algorithm", valid_593923
  var valid_593924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593924 = validateParameter(valid_593924, JString, required = false,
                                 default = nil)
  if valid_593924 != nil:
    section.add "X-Amz-SignedHeaders", valid_593924
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  section = newJObject()
  var valid_593925 = formData.getOrDefault("MaxRecords")
  valid_593925 = validateParameter(valid_593925, JInt, required = false, default = nil)
  if valid_593925 != nil:
    section.add "MaxRecords", valid_593925
  var valid_593926 = formData.getOrDefault("Marker")
  valid_593926 = validateParameter(valid_593926, JString, required = false,
                                 default = nil)
  if valid_593926 != nil:
    section.add "Marker", valid_593926
  var valid_593927 = formData.getOrDefault("CacheSubnetGroupName")
  valid_593927 = validateParameter(valid_593927, JString, required = false,
                                 default = nil)
  if valid_593927 != nil:
    section.add "CacheSubnetGroupName", valid_593927
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593928: Call_PostDescribeCacheSubnetGroups_593913; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_593928.validator(path, query, header, formData, body)
  let scheme = call_593928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593928.url(scheme.get, call_593928.host, call_593928.base,
                         call_593928.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593928, url, valid)

proc call*(call_593929: Call_PostDescribeCacheSubnetGroups_593913;
          MaxRecords: int = 0; Marker: string = ""; CacheSubnetGroupName: string = "";
          Action: string = "DescribeCacheSubnetGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593930 = newJObject()
  var formData_593931 = newJObject()
  add(formData_593931, "MaxRecords", newJInt(MaxRecords))
  add(formData_593931, "Marker", newJString(Marker))
  add(formData_593931, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593930, "Action", newJString(Action))
  add(query_593930, "Version", newJString(Version))
  result = call_593929.call(nil, query_593930, nil, formData_593931, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_593913(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_593914, base: "/",
    url: url_PostDescribeCacheSubnetGroups_593915,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_593895 = ref object of OpenApiRestCall_592364
proc url_GetDescribeCacheSubnetGroups_593897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_593896(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593898 = query.getOrDefault("Marker")
  valid_593898 = validateParameter(valid_593898, JString, required = false,
                                 default = nil)
  if valid_593898 != nil:
    section.add "Marker", valid_593898
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593899 = query.getOrDefault("Action")
  valid_593899 = validateParameter(valid_593899, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_593899 != nil:
    section.add "Action", valid_593899
  var valid_593900 = query.getOrDefault("CacheSubnetGroupName")
  valid_593900 = validateParameter(valid_593900, JString, required = false,
                                 default = nil)
  if valid_593900 != nil:
    section.add "CacheSubnetGroupName", valid_593900
  var valid_593901 = query.getOrDefault("Version")
  valid_593901 = validateParameter(valid_593901, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593901 != nil:
    section.add "Version", valid_593901
  var valid_593902 = query.getOrDefault("MaxRecords")
  valid_593902 = validateParameter(valid_593902, JInt, required = false, default = nil)
  if valid_593902 != nil:
    section.add "MaxRecords", valid_593902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593903 = header.getOrDefault("X-Amz-Signature")
  valid_593903 = validateParameter(valid_593903, JString, required = false,
                                 default = nil)
  if valid_593903 != nil:
    section.add "X-Amz-Signature", valid_593903
  var valid_593904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593904 = validateParameter(valid_593904, JString, required = false,
                                 default = nil)
  if valid_593904 != nil:
    section.add "X-Amz-Content-Sha256", valid_593904
  var valid_593905 = header.getOrDefault("X-Amz-Date")
  valid_593905 = validateParameter(valid_593905, JString, required = false,
                                 default = nil)
  if valid_593905 != nil:
    section.add "X-Amz-Date", valid_593905
  var valid_593906 = header.getOrDefault("X-Amz-Credential")
  valid_593906 = validateParameter(valid_593906, JString, required = false,
                                 default = nil)
  if valid_593906 != nil:
    section.add "X-Amz-Credential", valid_593906
  var valid_593907 = header.getOrDefault("X-Amz-Security-Token")
  valid_593907 = validateParameter(valid_593907, JString, required = false,
                                 default = nil)
  if valid_593907 != nil:
    section.add "X-Amz-Security-Token", valid_593907
  var valid_593908 = header.getOrDefault("X-Amz-Algorithm")
  valid_593908 = validateParameter(valid_593908, JString, required = false,
                                 default = nil)
  if valid_593908 != nil:
    section.add "X-Amz-Algorithm", valid_593908
  var valid_593909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593909 = validateParameter(valid_593909, JString, required = false,
                                 default = nil)
  if valid_593909 != nil:
    section.add "X-Amz-SignedHeaders", valid_593909
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593910: Call_GetDescribeCacheSubnetGroups_593895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_593910.validator(path, query, header, formData, body)
  let scheme = call_593910.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593910.url(scheme.get, call_593910.host, call_593910.base,
                         call_593910.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593910, url, valid)

proc call*(call_593911: Call_GetDescribeCacheSubnetGroups_593895;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593912 = newJObject()
  add(query_593912, "Marker", newJString(Marker))
  add(query_593912, "Action", newJString(Action))
  add(query_593912, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_593912, "Version", newJString(Version))
  add(query_593912, "MaxRecords", newJInt(MaxRecords))
  result = call_593911.call(nil, query_593912, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_593895(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_593896, base: "/",
    url: url_GetDescribeCacheSubnetGroups_593897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_593950 = ref object of OpenApiRestCall_592364
proc url_PostDescribeEngineDefaultParameters_593952(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_593951(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593953 = query.getOrDefault("Action")
  valid_593953 = validateParameter(valid_593953, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_593953 != nil:
    section.add "Action", valid_593953
  var valid_593954 = query.getOrDefault("Version")
  valid_593954 = validateParameter(valid_593954, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593954 != nil:
    section.add "Version", valid_593954
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593955 = header.getOrDefault("X-Amz-Signature")
  valid_593955 = validateParameter(valid_593955, JString, required = false,
                                 default = nil)
  if valid_593955 != nil:
    section.add "X-Amz-Signature", valid_593955
  var valid_593956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593956 = validateParameter(valid_593956, JString, required = false,
                                 default = nil)
  if valid_593956 != nil:
    section.add "X-Amz-Content-Sha256", valid_593956
  var valid_593957 = header.getOrDefault("X-Amz-Date")
  valid_593957 = validateParameter(valid_593957, JString, required = false,
                                 default = nil)
  if valid_593957 != nil:
    section.add "X-Amz-Date", valid_593957
  var valid_593958 = header.getOrDefault("X-Amz-Credential")
  valid_593958 = validateParameter(valid_593958, JString, required = false,
                                 default = nil)
  if valid_593958 != nil:
    section.add "X-Amz-Credential", valid_593958
  var valid_593959 = header.getOrDefault("X-Amz-Security-Token")
  valid_593959 = validateParameter(valid_593959, JString, required = false,
                                 default = nil)
  if valid_593959 != nil:
    section.add "X-Amz-Security-Token", valid_593959
  var valid_593960 = header.getOrDefault("X-Amz-Algorithm")
  valid_593960 = validateParameter(valid_593960, JString, required = false,
                                 default = nil)
  if valid_593960 != nil:
    section.add "X-Amz-Algorithm", valid_593960
  var valid_593961 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593961 = validateParameter(valid_593961, JString, required = false,
                                 default = nil)
  if valid_593961 != nil:
    section.add "X-Amz-SignedHeaders", valid_593961
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_593962 = formData.getOrDefault("MaxRecords")
  valid_593962 = validateParameter(valid_593962, JInt, required = false, default = nil)
  if valid_593962 != nil:
    section.add "MaxRecords", valid_593962
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_593963 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_593963 = validateParameter(valid_593963, JString, required = true,
                                 default = nil)
  if valid_593963 != nil:
    section.add "CacheParameterGroupFamily", valid_593963
  var valid_593964 = formData.getOrDefault("Marker")
  valid_593964 = validateParameter(valid_593964, JString, required = false,
                                 default = nil)
  if valid_593964 != nil:
    section.add "Marker", valid_593964
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593965: Call_PostDescribeEngineDefaultParameters_593950;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_593965.validator(path, query, header, formData, body)
  let scheme = call_593965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593965.url(scheme.get, call_593965.host, call_593965.base,
                         call_593965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593965, url, valid)

proc call*(call_593966: Call_PostDescribeEngineDefaultParameters_593950;
          CacheParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_593967 = newJObject()
  var formData_593968 = newJObject()
  add(formData_593968, "MaxRecords", newJInt(MaxRecords))
  add(formData_593968, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_593968, "Marker", newJString(Marker))
  add(query_593967, "Action", newJString(Action))
  add(query_593967, "Version", newJString(Version))
  result = call_593966.call(nil, query_593967, nil, formData_593968, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_593950(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_593951, base: "/",
    url: url_PostDescribeEngineDefaultParameters_593952,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_593932 = ref object of OpenApiRestCall_592364
proc url_GetDescribeEngineDefaultParameters_593934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_593933(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593935 = query.getOrDefault("Marker")
  valid_593935 = validateParameter(valid_593935, JString, required = false,
                                 default = nil)
  if valid_593935 != nil:
    section.add "Marker", valid_593935
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_593936 = query.getOrDefault("CacheParameterGroupFamily")
  valid_593936 = validateParameter(valid_593936, JString, required = true,
                                 default = nil)
  if valid_593936 != nil:
    section.add "CacheParameterGroupFamily", valid_593936
  var valid_593937 = query.getOrDefault("Action")
  valid_593937 = validateParameter(valid_593937, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_593937 != nil:
    section.add "Action", valid_593937
  var valid_593938 = query.getOrDefault("Version")
  valid_593938 = validateParameter(valid_593938, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593938 != nil:
    section.add "Version", valid_593938
  var valid_593939 = query.getOrDefault("MaxRecords")
  valid_593939 = validateParameter(valid_593939, JInt, required = false, default = nil)
  if valid_593939 != nil:
    section.add "MaxRecords", valid_593939
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593940 = header.getOrDefault("X-Amz-Signature")
  valid_593940 = validateParameter(valid_593940, JString, required = false,
                                 default = nil)
  if valid_593940 != nil:
    section.add "X-Amz-Signature", valid_593940
  var valid_593941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593941 = validateParameter(valid_593941, JString, required = false,
                                 default = nil)
  if valid_593941 != nil:
    section.add "X-Amz-Content-Sha256", valid_593941
  var valid_593942 = header.getOrDefault("X-Amz-Date")
  valid_593942 = validateParameter(valid_593942, JString, required = false,
                                 default = nil)
  if valid_593942 != nil:
    section.add "X-Amz-Date", valid_593942
  var valid_593943 = header.getOrDefault("X-Amz-Credential")
  valid_593943 = validateParameter(valid_593943, JString, required = false,
                                 default = nil)
  if valid_593943 != nil:
    section.add "X-Amz-Credential", valid_593943
  var valid_593944 = header.getOrDefault("X-Amz-Security-Token")
  valid_593944 = validateParameter(valid_593944, JString, required = false,
                                 default = nil)
  if valid_593944 != nil:
    section.add "X-Amz-Security-Token", valid_593944
  var valid_593945 = header.getOrDefault("X-Amz-Algorithm")
  valid_593945 = validateParameter(valid_593945, JString, required = false,
                                 default = nil)
  if valid_593945 != nil:
    section.add "X-Amz-Algorithm", valid_593945
  var valid_593946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593946 = validateParameter(valid_593946, JString, required = false,
                                 default = nil)
  if valid_593946 != nil:
    section.add "X-Amz-SignedHeaders", valid_593946
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593947: Call_GetDescribeEngineDefaultParameters_593932;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_593947.validator(path, query, header, formData, body)
  let scheme = call_593947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593947.url(scheme.get, call_593947.host, call_593947.base,
                         call_593947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593947, url, valid)

proc call*(call_593948: Call_GetDescribeEngineDefaultParameters_593932;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593949 = newJObject()
  add(query_593949, "Marker", newJString(Marker))
  add(query_593949, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_593949, "Action", newJString(Action))
  add(query_593949, "Version", newJString(Version))
  add(query_593949, "MaxRecords", newJInt(MaxRecords))
  result = call_593948.call(nil, query_593949, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_593932(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_593933, base: "/",
    url: url_GetDescribeEngineDefaultParameters_593934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_593991 = ref object of OpenApiRestCall_592364
proc url_PostDescribeEvents_593993(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_593992(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593994 = query.getOrDefault("Action")
  valid_593994 = validateParameter(valid_593994, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_593994 != nil:
    section.add "Action", valid_593994
  var valid_593995 = query.getOrDefault("Version")
  valid_593995 = validateParameter(valid_593995, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593995 != nil:
    section.add "Version", valid_593995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593996 = header.getOrDefault("X-Amz-Signature")
  valid_593996 = validateParameter(valid_593996, JString, required = false,
                                 default = nil)
  if valid_593996 != nil:
    section.add "X-Amz-Signature", valid_593996
  var valid_593997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593997 = validateParameter(valid_593997, JString, required = false,
                                 default = nil)
  if valid_593997 != nil:
    section.add "X-Amz-Content-Sha256", valid_593997
  var valid_593998 = header.getOrDefault("X-Amz-Date")
  valid_593998 = validateParameter(valid_593998, JString, required = false,
                                 default = nil)
  if valid_593998 != nil:
    section.add "X-Amz-Date", valid_593998
  var valid_593999 = header.getOrDefault("X-Amz-Credential")
  valid_593999 = validateParameter(valid_593999, JString, required = false,
                                 default = nil)
  if valid_593999 != nil:
    section.add "X-Amz-Credential", valid_593999
  var valid_594000 = header.getOrDefault("X-Amz-Security-Token")
  valid_594000 = validateParameter(valid_594000, JString, required = false,
                                 default = nil)
  if valid_594000 != nil:
    section.add "X-Amz-Security-Token", valid_594000
  var valid_594001 = header.getOrDefault("X-Amz-Algorithm")
  valid_594001 = validateParameter(valid_594001, JString, required = false,
                                 default = nil)
  if valid_594001 != nil:
    section.add "X-Amz-Algorithm", valid_594001
  var valid_594002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594002 = validateParameter(valid_594002, JString, required = false,
                                 default = nil)
  if valid_594002 != nil:
    section.add "X-Amz-SignedHeaders", valid_594002
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  section = newJObject()
  var valid_594003 = formData.getOrDefault("MaxRecords")
  valid_594003 = validateParameter(valid_594003, JInt, required = false, default = nil)
  if valid_594003 != nil:
    section.add "MaxRecords", valid_594003
  var valid_594004 = formData.getOrDefault("Marker")
  valid_594004 = validateParameter(valid_594004, JString, required = false,
                                 default = nil)
  if valid_594004 != nil:
    section.add "Marker", valid_594004
  var valid_594005 = formData.getOrDefault("SourceIdentifier")
  valid_594005 = validateParameter(valid_594005, JString, required = false,
                                 default = nil)
  if valid_594005 != nil:
    section.add "SourceIdentifier", valid_594005
  var valid_594006 = formData.getOrDefault("SourceType")
  valid_594006 = validateParameter(valid_594006, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_594006 != nil:
    section.add "SourceType", valid_594006
  var valid_594007 = formData.getOrDefault("Duration")
  valid_594007 = validateParameter(valid_594007, JInt, required = false, default = nil)
  if valid_594007 != nil:
    section.add "Duration", valid_594007
  var valid_594008 = formData.getOrDefault("EndTime")
  valid_594008 = validateParameter(valid_594008, JString, required = false,
                                 default = nil)
  if valid_594008 != nil:
    section.add "EndTime", valid_594008
  var valid_594009 = formData.getOrDefault("StartTime")
  valid_594009 = validateParameter(valid_594009, JString, required = false,
                                 default = nil)
  if valid_594009 != nil:
    section.add "StartTime", valid_594009
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594010: Call_PostDescribeEvents_593991; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_594010.validator(path, query, header, formData, body)
  let scheme = call_594010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594010.url(scheme.get, call_594010.host, call_594010.base,
                         call_594010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594010, url, valid)

proc call*(call_594011: Call_PostDescribeEvents_593991; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "cache-cluster"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; Action: string = "DescribeEvents";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594012 = newJObject()
  var formData_594013 = newJObject()
  add(formData_594013, "MaxRecords", newJInt(MaxRecords))
  add(formData_594013, "Marker", newJString(Marker))
  add(formData_594013, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_594013, "SourceType", newJString(SourceType))
  add(formData_594013, "Duration", newJInt(Duration))
  add(formData_594013, "EndTime", newJString(EndTime))
  add(formData_594013, "StartTime", newJString(StartTime))
  add(query_594012, "Action", newJString(Action))
  add(query_594012, "Version", newJString(Version))
  result = call_594011.call(nil, query_594012, nil, formData_594013, nil)

var postDescribeEvents* = Call_PostDescribeEvents_593991(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_593992, base: "/",
    url: url_PostDescribeEvents_593993, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_593969 = ref object of OpenApiRestCall_592364
proc url_GetDescribeEvents_593971(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_593970(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_593972 = query.getOrDefault("Marker")
  valid_593972 = validateParameter(valid_593972, JString, required = false,
                                 default = nil)
  if valid_593972 != nil:
    section.add "Marker", valid_593972
  var valid_593973 = query.getOrDefault("SourceType")
  valid_593973 = validateParameter(valid_593973, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_593973 != nil:
    section.add "SourceType", valid_593973
  var valid_593974 = query.getOrDefault("SourceIdentifier")
  valid_593974 = validateParameter(valid_593974, JString, required = false,
                                 default = nil)
  if valid_593974 != nil:
    section.add "SourceIdentifier", valid_593974
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_593975 = query.getOrDefault("Action")
  valid_593975 = validateParameter(valid_593975, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_593975 != nil:
    section.add "Action", valid_593975
  var valid_593976 = query.getOrDefault("StartTime")
  valid_593976 = validateParameter(valid_593976, JString, required = false,
                                 default = nil)
  if valid_593976 != nil:
    section.add "StartTime", valid_593976
  var valid_593977 = query.getOrDefault("Duration")
  valid_593977 = validateParameter(valid_593977, JInt, required = false, default = nil)
  if valid_593977 != nil:
    section.add "Duration", valid_593977
  var valid_593978 = query.getOrDefault("EndTime")
  valid_593978 = validateParameter(valid_593978, JString, required = false,
                                 default = nil)
  if valid_593978 != nil:
    section.add "EndTime", valid_593978
  var valid_593979 = query.getOrDefault("Version")
  valid_593979 = validateParameter(valid_593979, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_593979 != nil:
    section.add "Version", valid_593979
  var valid_593980 = query.getOrDefault("MaxRecords")
  valid_593980 = validateParameter(valid_593980, JInt, required = false, default = nil)
  if valid_593980 != nil:
    section.add "MaxRecords", valid_593980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_593981 = header.getOrDefault("X-Amz-Signature")
  valid_593981 = validateParameter(valid_593981, JString, required = false,
                                 default = nil)
  if valid_593981 != nil:
    section.add "X-Amz-Signature", valid_593981
  var valid_593982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_593982 = validateParameter(valid_593982, JString, required = false,
                                 default = nil)
  if valid_593982 != nil:
    section.add "X-Amz-Content-Sha256", valid_593982
  var valid_593983 = header.getOrDefault("X-Amz-Date")
  valid_593983 = validateParameter(valid_593983, JString, required = false,
                                 default = nil)
  if valid_593983 != nil:
    section.add "X-Amz-Date", valid_593983
  var valid_593984 = header.getOrDefault("X-Amz-Credential")
  valid_593984 = validateParameter(valid_593984, JString, required = false,
                                 default = nil)
  if valid_593984 != nil:
    section.add "X-Amz-Credential", valid_593984
  var valid_593985 = header.getOrDefault("X-Amz-Security-Token")
  valid_593985 = validateParameter(valid_593985, JString, required = false,
                                 default = nil)
  if valid_593985 != nil:
    section.add "X-Amz-Security-Token", valid_593985
  var valid_593986 = header.getOrDefault("X-Amz-Algorithm")
  valid_593986 = validateParameter(valid_593986, JString, required = false,
                                 default = nil)
  if valid_593986 != nil:
    section.add "X-Amz-Algorithm", valid_593986
  var valid_593987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_593987 = validateParameter(valid_593987, JString, required = false,
                                 default = nil)
  if valid_593987 != nil:
    section.add "X-Amz-SignedHeaders", valid_593987
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_593988: Call_GetDescribeEvents_593969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_593988.validator(path, query, header, formData, body)
  let scheme = call_593988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_593988.url(scheme.get, call_593988.host, call_593988.base,
                         call_593988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_593988, url, valid)

proc call*(call_593989: Call_GetDescribeEvents_593969; Marker: string = "";
          SourceType: string = "cache-cluster"; SourceIdentifier: string = "";
          Action: string = "DescribeEvents"; StartTime: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_593990 = newJObject()
  add(query_593990, "Marker", newJString(Marker))
  add(query_593990, "SourceType", newJString(SourceType))
  add(query_593990, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_593990, "Action", newJString(Action))
  add(query_593990, "StartTime", newJString(StartTime))
  add(query_593990, "Duration", newJInt(Duration))
  add(query_593990, "EndTime", newJString(EndTime))
  add(query_593990, "Version", newJString(Version))
  add(query_593990, "MaxRecords", newJInt(MaxRecords))
  result = call_593989.call(nil, query_593990, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_593969(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_593970,
    base: "/", url: url_GetDescribeEvents_593971,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_594032 = ref object of OpenApiRestCall_592364
proc url_PostDescribeReplicationGroups_594034(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReplicationGroups_594033(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594035 = query.getOrDefault("Action")
  valid_594035 = validateParameter(valid_594035, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_594035 != nil:
    section.add "Action", valid_594035
  var valid_594036 = query.getOrDefault("Version")
  valid_594036 = validateParameter(valid_594036, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594036 != nil:
    section.add "Version", valid_594036
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594037 = header.getOrDefault("X-Amz-Signature")
  valid_594037 = validateParameter(valid_594037, JString, required = false,
                                 default = nil)
  if valid_594037 != nil:
    section.add "X-Amz-Signature", valid_594037
  var valid_594038 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594038 = validateParameter(valid_594038, JString, required = false,
                                 default = nil)
  if valid_594038 != nil:
    section.add "X-Amz-Content-Sha256", valid_594038
  var valid_594039 = header.getOrDefault("X-Amz-Date")
  valid_594039 = validateParameter(valid_594039, JString, required = false,
                                 default = nil)
  if valid_594039 != nil:
    section.add "X-Amz-Date", valid_594039
  var valid_594040 = header.getOrDefault("X-Amz-Credential")
  valid_594040 = validateParameter(valid_594040, JString, required = false,
                                 default = nil)
  if valid_594040 != nil:
    section.add "X-Amz-Credential", valid_594040
  var valid_594041 = header.getOrDefault("X-Amz-Security-Token")
  valid_594041 = validateParameter(valid_594041, JString, required = false,
                                 default = nil)
  if valid_594041 != nil:
    section.add "X-Amz-Security-Token", valid_594041
  var valid_594042 = header.getOrDefault("X-Amz-Algorithm")
  valid_594042 = validateParameter(valid_594042, JString, required = false,
                                 default = nil)
  if valid_594042 != nil:
    section.add "X-Amz-Algorithm", valid_594042
  var valid_594043 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594043 = validateParameter(valid_594043, JString, required = false,
                                 default = nil)
  if valid_594043 != nil:
    section.add "X-Amz-SignedHeaders", valid_594043
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  section = newJObject()
  var valid_594044 = formData.getOrDefault("MaxRecords")
  valid_594044 = validateParameter(valid_594044, JInt, required = false, default = nil)
  if valid_594044 != nil:
    section.add "MaxRecords", valid_594044
  var valid_594045 = formData.getOrDefault("Marker")
  valid_594045 = validateParameter(valid_594045, JString, required = false,
                                 default = nil)
  if valid_594045 != nil:
    section.add "Marker", valid_594045
  var valid_594046 = formData.getOrDefault("ReplicationGroupId")
  valid_594046 = validateParameter(valid_594046, JString, required = false,
                                 default = nil)
  if valid_594046 != nil:
    section.add "ReplicationGroupId", valid_594046
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594047: Call_PostDescribeReplicationGroups_594032; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_594047.validator(path, query, header, formData, body)
  let scheme = call_594047.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594047.url(scheme.get, call_594047.host, call_594047.base,
                         call_594047.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594047, url, valid)

proc call*(call_594048: Call_PostDescribeReplicationGroups_594032;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeReplicationGroups";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  var query_594049 = newJObject()
  var formData_594050 = newJObject()
  add(formData_594050, "MaxRecords", newJInt(MaxRecords))
  add(formData_594050, "Marker", newJString(Marker))
  add(query_594049, "Action", newJString(Action))
  add(query_594049, "Version", newJString(Version))
  add(formData_594050, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_594048.call(nil, query_594049, nil, formData_594050, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_594032(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_594033, base: "/",
    url: url_PostDescribeReplicationGroups_594034,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_594014 = ref object of OpenApiRestCall_592364
proc url_GetDescribeReplicationGroups_594016(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReplicationGroups_594015(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_594017 = query.getOrDefault("Marker")
  valid_594017 = validateParameter(valid_594017, JString, required = false,
                                 default = nil)
  if valid_594017 != nil:
    section.add "Marker", valid_594017
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594018 = query.getOrDefault("Action")
  valid_594018 = validateParameter(valid_594018, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_594018 != nil:
    section.add "Action", valid_594018
  var valid_594019 = query.getOrDefault("ReplicationGroupId")
  valid_594019 = validateParameter(valid_594019, JString, required = false,
                                 default = nil)
  if valid_594019 != nil:
    section.add "ReplicationGroupId", valid_594019
  var valid_594020 = query.getOrDefault("Version")
  valid_594020 = validateParameter(valid_594020, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594020 != nil:
    section.add "Version", valid_594020
  var valid_594021 = query.getOrDefault("MaxRecords")
  valid_594021 = validateParameter(valid_594021, JInt, required = false, default = nil)
  if valid_594021 != nil:
    section.add "MaxRecords", valid_594021
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594022 = header.getOrDefault("X-Amz-Signature")
  valid_594022 = validateParameter(valid_594022, JString, required = false,
                                 default = nil)
  if valid_594022 != nil:
    section.add "X-Amz-Signature", valid_594022
  var valid_594023 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594023 = validateParameter(valid_594023, JString, required = false,
                                 default = nil)
  if valid_594023 != nil:
    section.add "X-Amz-Content-Sha256", valid_594023
  var valid_594024 = header.getOrDefault("X-Amz-Date")
  valid_594024 = validateParameter(valid_594024, JString, required = false,
                                 default = nil)
  if valid_594024 != nil:
    section.add "X-Amz-Date", valid_594024
  var valid_594025 = header.getOrDefault("X-Amz-Credential")
  valid_594025 = validateParameter(valid_594025, JString, required = false,
                                 default = nil)
  if valid_594025 != nil:
    section.add "X-Amz-Credential", valid_594025
  var valid_594026 = header.getOrDefault("X-Amz-Security-Token")
  valid_594026 = validateParameter(valid_594026, JString, required = false,
                                 default = nil)
  if valid_594026 != nil:
    section.add "X-Amz-Security-Token", valid_594026
  var valid_594027 = header.getOrDefault("X-Amz-Algorithm")
  valid_594027 = validateParameter(valid_594027, JString, required = false,
                                 default = nil)
  if valid_594027 != nil:
    section.add "X-Amz-Algorithm", valid_594027
  var valid_594028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594028 = validateParameter(valid_594028, JString, required = false,
                                 default = nil)
  if valid_594028 != nil:
    section.add "X-Amz-SignedHeaders", valid_594028
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594029: Call_GetDescribeReplicationGroups_594014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_594029.validator(path, query, header, formData, body)
  let scheme = call_594029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594029.url(scheme.get, call_594029.host, call_594029.base,
                         call_594029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594029, url, valid)

proc call*(call_594030: Call_GetDescribeReplicationGroups_594014;
          Marker: string = ""; Action: string = "DescribeReplicationGroups";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_594031 = newJObject()
  add(query_594031, "Marker", newJString(Marker))
  add(query_594031, "Action", newJString(Action))
  add(query_594031, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_594031, "Version", newJString(Version))
  add(query_594031, "MaxRecords", newJInt(MaxRecords))
  result = call_594030.call(nil, query_594031, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_594014(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_594015, base: "/",
    url: url_GetDescribeReplicationGroups_594016,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_594074 = ref object of OpenApiRestCall_592364
proc url_PostDescribeReservedCacheNodes_594076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodes_594075(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594077 = query.getOrDefault("Action")
  valid_594077 = validateParameter(valid_594077, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_594077 != nil:
    section.add "Action", valid_594077
  var valid_594078 = query.getOrDefault("Version")
  valid_594078 = validateParameter(valid_594078, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594078 != nil:
    section.add "Version", valid_594078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594079 = header.getOrDefault("X-Amz-Signature")
  valid_594079 = validateParameter(valid_594079, JString, required = false,
                                 default = nil)
  if valid_594079 != nil:
    section.add "X-Amz-Signature", valid_594079
  var valid_594080 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594080 = validateParameter(valid_594080, JString, required = false,
                                 default = nil)
  if valid_594080 != nil:
    section.add "X-Amz-Content-Sha256", valid_594080
  var valid_594081 = header.getOrDefault("X-Amz-Date")
  valid_594081 = validateParameter(valid_594081, JString, required = false,
                                 default = nil)
  if valid_594081 != nil:
    section.add "X-Amz-Date", valid_594081
  var valid_594082 = header.getOrDefault("X-Amz-Credential")
  valid_594082 = validateParameter(valid_594082, JString, required = false,
                                 default = nil)
  if valid_594082 != nil:
    section.add "X-Amz-Credential", valid_594082
  var valid_594083 = header.getOrDefault("X-Amz-Security-Token")
  valid_594083 = validateParameter(valid_594083, JString, required = false,
                                 default = nil)
  if valid_594083 != nil:
    section.add "X-Amz-Security-Token", valid_594083
  var valid_594084 = header.getOrDefault("X-Amz-Algorithm")
  valid_594084 = validateParameter(valid_594084, JString, required = false,
                                 default = nil)
  if valid_594084 != nil:
    section.add "X-Amz-Algorithm", valid_594084
  var valid_594085 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594085 = validateParameter(valid_594085, JString, required = false,
                                 default = nil)
  if valid_594085 != nil:
    section.add "X-Amz-SignedHeaders", valid_594085
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_594086 = formData.getOrDefault("MaxRecords")
  valid_594086 = validateParameter(valid_594086, JInt, required = false, default = nil)
  if valid_594086 != nil:
    section.add "MaxRecords", valid_594086
  var valid_594087 = formData.getOrDefault("Marker")
  valid_594087 = validateParameter(valid_594087, JString, required = false,
                                 default = nil)
  if valid_594087 != nil:
    section.add "Marker", valid_594087
  var valid_594088 = formData.getOrDefault("Duration")
  valid_594088 = validateParameter(valid_594088, JString, required = false,
                                 default = nil)
  if valid_594088 != nil:
    section.add "Duration", valid_594088
  var valid_594089 = formData.getOrDefault("OfferingType")
  valid_594089 = validateParameter(valid_594089, JString, required = false,
                                 default = nil)
  if valid_594089 != nil:
    section.add "OfferingType", valid_594089
  var valid_594090 = formData.getOrDefault("ProductDescription")
  valid_594090 = validateParameter(valid_594090, JString, required = false,
                                 default = nil)
  if valid_594090 != nil:
    section.add "ProductDescription", valid_594090
  var valid_594091 = formData.getOrDefault("ReservedCacheNodeId")
  valid_594091 = validateParameter(valid_594091, JString, required = false,
                                 default = nil)
  if valid_594091 != nil:
    section.add "ReservedCacheNodeId", valid_594091
  var valid_594092 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_594092 = validateParameter(valid_594092, JString, required = false,
                                 default = nil)
  if valid_594092 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_594092
  var valid_594093 = formData.getOrDefault("CacheNodeType")
  valid_594093 = validateParameter(valid_594093, JString, required = false,
                                 default = nil)
  if valid_594093 != nil:
    section.add "CacheNodeType", valid_594093
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594094: Call_PostDescribeReservedCacheNodes_594074; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_594094.validator(path, query, header, formData, body)
  let scheme = call_594094.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594094.url(scheme.get, call_594094.host, call_594094.base,
                         call_594094.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594094, url, valid)

proc call*(call_594095: Call_PostDescribeReservedCacheNodes_594074;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodes";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_594096 = newJObject()
  var formData_594097 = newJObject()
  add(formData_594097, "MaxRecords", newJInt(MaxRecords))
  add(formData_594097, "Marker", newJString(Marker))
  add(formData_594097, "Duration", newJString(Duration))
  add(formData_594097, "OfferingType", newJString(OfferingType))
  add(formData_594097, "ProductDescription", newJString(ProductDescription))
  add(query_594096, "Action", newJString(Action))
  add(query_594096, "Version", newJString(Version))
  add(formData_594097, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_594097, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_594097, "CacheNodeType", newJString(CacheNodeType))
  result = call_594095.call(nil, query_594096, nil, formData_594097, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_594074(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_594075, base: "/",
    url: url_PostDescribeReservedCacheNodes_594076,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_594051 = ref object of OpenApiRestCall_592364
proc url_GetDescribeReservedCacheNodes_594053(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodes_594052(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_594054 = query.getOrDefault("Marker")
  valid_594054 = validateParameter(valid_594054, JString, required = false,
                                 default = nil)
  if valid_594054 != nil:
    section.add "Marker", valid_594054
  var valid_594055 = query.getOrDefault("ProductDescription")
  valid_594055 = validateParameter(valid_594055, JString, required = false,
                                 default = nil)
  if valid_594055 != nil:
    section.add "ProductDescription", valid_594055
  var valid_594056 = query.getOrDefault("OfferingType")
  valid_594056 = validateParameter(valid_594056, JString, required = false,
                                 default = nil)
  if valid_594056 != nil:
    section.add "OfferingType", valid_594056
  var valid_594057 = query.getOrDefault("CacheNodeType")
  valid_594057 = validateParameter(valid_594057, JString, required = false,
                                 default = nil)
  if valid_594057 != nil:
    section.add "CacheNodeType", valid_594057
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594058 = query.getOrDefault("Action")
  valid_594058 = validateParameter(valid_594058, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_594058 != nil:
    section.add "Action", valid_594058
  var valid_594059 = query.getOrDefault("Duration")
  valid_594059 = validateParameter(valid_594059, JString, required = false,
                                 default = nil)
  if valid_594059 != nil:
    section.add "Duration", valid_594059
  var valid_594060 = query.getOrDefault("ReservedCacheNodeId")
  valid_594060 = validateParameter(valid_594060, JString, required = false,
                                 default = nil)
  if valid_594060 != nil:
    section.add "ReservedCacheNodeId", valid_594060
  var valid_594061 = query.getOrDefault("Version")
  valid_594061 = validateParameter(valid_594061, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594061 != nil:
    section.add "Version", valid_594061
  var valid_594062 = query.getOrDefault("MaxRecords")
  valid_594062 = validateParameter(valid_594062, JInt, required = false, default = nil)
  if valid_594062 != nil:
    section.add "MaxRecords", valid_594062
  var valid_594063 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_594063 = validateParameter(valid_594063, JString, required = false,
                                 default = nil)
  if valid_594063 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_594063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594064 = header.getOrDefault("X-Amz-Signature")
  valid_594064 = validateParameter(valid_594064, JString, required = false,
                                 default = nil)
  if valid_594064 != nil:
    section.add "X-Amz-Signature", valid_594064
  var valid_594065 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594065 = validateParameter(valid_594065, JString, required = false,
                                 default = nil)
  if valid_594065 != nil:
    section.add "X-Amz-Content-Sha256", valid_594065
  var valid_594066 = header.getOrDefault("X-Amz-Date")
  valid_594066 = validateParameter(valid_594066, JString, required = false,
                                 default = nil)
  if valid_594066 != nil:
    section.add "X-Amz-Date", valid_594066
  var valid_594067 = header.getOrDefault("X-Amz-Credential")
  valid_594067 = validateParameter(valid_594067, JString, required = false,
                                 default = nil)
  if valid_594067 != nil:
    section.add "X-Amz-Credential", valid_594067
  var valid_594068 = header.getOrDefault("X-Amz-Security-Token")
  valid_594068 = validateParameter(valid_594068, JString, required = false,
                                 default = nil)
  if valid_594068 != nil:
    section.add "X-Amz-Security-Token", valid_594068
  var valid_594069 = header.getOrDefault("X-Amz-Algorithm")
  valid_594069 = validateParameter(valid_594069, JString, required = false,
                                 default = nil)
  if valid_594069 != nil:
    section.add "X-Amz-Algorithm", valid_594069
  var valid_594070 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594070 = validateParameter(valid_594070, JString, required = false,
                                 default = nil)
  if valid_594070 != nil:
    section.add "X-Amz-SignedHeaders", valid_594070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594071: Call_GetDescribeReservedCacheNodes_594051; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_594071.validator(path, query, header, formData, body)
  let scheme = call_594071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594071.url(scheme.get, call_594071.host, call_594071.base,
                         call_594071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594071, url, valid)

proc call*(call_594072: Call_GetDescribeReservedCacheNodes_594051;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0; ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  var query_594073 = newJObject()
  add(query_594073, "Marker", newJString(Marker))
  add(query_594073, "ProductDescription", newJString(ProductDescription))
  add(query_594073, "OfferingType", newJString(OfferingType))
  add(query_594073, "CacheNodeType", newJString(CacheNodeType))
  add(query_594073, "Action", newJString(Action))
  add(query_594073, "Duration", newJString(Duration))
  add(query_594073, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_594073, "Version", newJString(Version))
  add(query_594073, "MaxRecords", newJInt(MaxRecords))
  add(query_594073, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_594072.call(nil, query_594073, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_594051(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_594052, base: "/",
    url: url_GetDescribeReservedCacheNodes_594053,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_594120 = ref object of OpenApiRestCall_592364
proc url_PostDescribeReservedCacheNodesOfferings_594122(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_594121(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594123 = query.getOrDefault("Action")
  valid_594123 = validateParameter(valid_594123, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_594123 != nil:
    section.add "Action", valid_594123
  var valid_594124 = query.getOrDefault("Version")
  valid_594124 = validateParameter(valid_594124, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594124 != nil:
    section.add "Version", valid_594124
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594125 = header.getOrDefault("X-Amz-Signature")
  valid_594125 = validateParameter(valid_594125, JString, required = false,
                                 default = nil)
  if valid_594125 != nil:
    section.add "X-Amz-Signature", valid_594125
  var valid_594126 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594126 = validateParameter(valid_594126, JString, required = false,
                                 default = nil)
  if valid_594126 != nil:
    section.add "X-Amz-Content-Sha256", valid_594126
  var valid_594127 = header.getOrDefault("X-Amz-Date")
  valid_594127 = validateParameter(valid_594127, JString, required = false,
                                 default = nil)
  if valid_594127 != nil:
    section.add "X-Amz-Date", valid_594127
  var valid_594128 = header.getOrDefault("X-Amz-Credential")
  valid_594128 = validateParameter(valid_594128, JString, required = false,
                                 default = nil)
  if valid_594128 != nil:
    section.add "X-Amz-Credential", valid_594128
  var valid_594129 = header.getOrDefault("X-Amz-Security-Token")
  valid_594129 = validateParameter(valid_594129, JString, required = false,
                                 default = nil)
  if valid_594129 != nil:
    section.add "X-Amz-Security-Token", valid_594129
  var valid_594130 = header.getOrDefault("X-Amz-Algorithm")
  valid_594130 = validateParameter(valid_594130, JString, required = false,
                                 default = nil)
  if valid_594130 != nil:
    section.add "X-Amz-Algorithm", valid_594130
  var valid_594131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594131 = validateParameter(valid_594131, JString, required = false,
                                 default = nil)
  if valid_594131 != nil:
    section.add "X-Amz-SignedHeaders", valid_594131
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_594132 = formData.getOrDefault("MaxRecords")
  valid_594132 = validateParameter(valid_594132, JInt, required = false, default = nil)
  if valid_594132 != nil:
    section.add "MaxRecords", valid_594132
  var valid_594133 = formData.getOrDefault("Marker")
  valid_594133 = validateParameter(valid_594133, JString, required = false,
                                 default = nil)
  if valid_594133 != nil:
    section.add "Marker", valid_594133
  var valid_594134 = formData.getOrDefault("Duration")
  valid_594134 = validateParameter(valid_594134, JString, required = false,
                                 default = nil)
  if valid_594134 != nil:
    section.add "Duration", valid_594134
  var valid_594135 = formData.getOrDefault("OfferingType")
  valid_594135 = validateParameter(valid_594135, JString, required = false,
                                 default = nil)
  if valid_594135 != nil:
    section.add "OfferingType", valid_594135
  var valid_594136 = formData.getOrDefault("ProductDescription")
  valid_594136 = validateParameter(valid_594136, JString, required = false,
                                 default = nil)
  if valid_594136 != nil:
    section.add "ProductDescription", valid_594136
  var valid_594137 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_594137 = validateParameter(valid_594137, JString, required = false,
                                 default = nil)
  if valid_594137 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_594137
  var valid_594138 = formData.getOrDefault("CacheNodeType")
  valid_594138 = validateParameter(valid_594138, JString, required = false,
                                 default = nil)
  if valid_594138 != nil:
    section.add "CacheNodeType", valid_594138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594139: Call_PostDescribeReservedCacheNodesOfferings_594120;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_594139.validator(path, query, header, formData, body)
  let scheme = call_594139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594139.url(scheme.get, call_594139.host, call_594139.base,
                         call_594139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594139, url, valid)

proc call*(call_594140: Call_PostDescribeReservedCacheNodesOfferings_594120;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Version: string = "2015-02-02"; ReservedCacheNodesOfferingId: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_594141 = newJObject()
  var formData_594142 = newJObject()
  add(formData_594142, "MaxRecords", newJInt(MaxRecords))
  add(formData_594142, "Marker", newJString(Marker))
  add(formData_594142, "Duration", newJString(Duration))
  add(formData_594142, "OfferingType", newJString(OfferingType))
  add(formData_594142, "ProductDescription", newJString(ProductDescription))
  add(query_594141, "Action", newJString(Action))
  add(query_594141, "Version", newJString(Version))
  add(formData_594142, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_594142, "CacheNodeType", newJString(CacheNodeType))
  result = call_594140.call(nil, query_594141, nil, formData_594142, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_594120(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_594121, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_594122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_594098 = ref object of OpenApiRestCall_592364
proc url_GetDescribeReservedCacheNodesOfferings_594100(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_594099(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_594101 = query.getOrDefault("Marker")
  valid_594101 = validateParameter(valid_594101, JString, required = false,
                                 default = nil)
  if valid_594101 != nil:
    section.add "Marker", valid_594101
  var valid_594102 = query.getOrDefault("ProductDescription")
  valid_594102 = validateParameter(valid_594102, JString, required = false,
                                 default = nil)
  if valid_594102 != nil:
    section.add "ProductDescription", valid_594102
  var valid_594103 = query.getOrDefault("OfferingType")
  valid_594103 = validateParameter(valid_594103, JString, required = false,
                                 default = nil)
  if valid_594103 != nil:
    section.add "OfferingType", valid_594103
  var valid_594104 = query.getOrDefault("CacheNodeType")
  valid_594104 = validateParameter(valid_594104, JString, required = false,
                                 default = nil)
  if valid_594104 != nil:
    section.add "CacheNodeType", valid_594104
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594105 = query.getOrDefault("Action")
  valid_594105 = validateParameter(valid_594105, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_594105 != nil:
    section.add "Action", valid_594105
  var valid_594106 = query.getOrDefault("Duration")
  valid_594106 = validateParameter(valid_594106, JString, required = false,
                                 default = nil)
  if valid_594106 != nil:
    section.add "Duration", valid_594106
  var valid_594107 = query.getOrDefault("Version")
  valid_594107 = validateParameter(valid_594107, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594107 != nil:
    section.add "Version", valid_594107
  var valid_594108 = query.getOrDefault("MaxRecords")
  valid_594108 = validateParameter(valid_594108, JInt, required = false, default = nil)
  if valid_594108 != nil:
    section.add "MaxRecords", valid_594108
  var valid_594109 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_594109 = validateParameter(valid_594109, JString, required = false,
                                 default = nil)
  if valid_594109 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_594109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594110 = header.getOrDefault("X-Amz-Signature")
  valid_594110 = validateParameter(valid_594110, JString, required = false,
                                 default = nil)
  if valid_594110 != nil:
    section.add "X-Amz-Signature", valid_594110
  var valid_594111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594111 = validateParameter(valid_594111, JString, required = false,
                                 default = nil)
  if valid_594111 != nil:
    section.add "X-Amz-Content-Sha256", valid_594111
  var valid_594112 = header.getOrDefault("X-Amz-Date")
  valid_594112 = validateParameter(valid_594112, JString, required = false,
                                 default = nil)
  if valid_594112 != nil:
    section.add "X-Amz-Date", valid_594112
  var valid_594113 = header.getOrDefault("X-Amz-Credential")
  valid_594113 = validateParameter(valid_594113, JString, required = false,
                                 default = nil)
  if valid_594113 != nil:
    section.add "X-Amz-Credential", valid_594113
  var valid_594114 = header.getOrDefault("X-Amz-Security-Token")
  valid_594114 = validateParameter(valid_594114, JString, required = false,
                                 default = nil)
  if valid_594114 != nil:
    section.add "X-Amz-Security-Token", valid_594114
  var valid_594115 = header.getOrDefault("X-Amz-Algorithm")
  valid_594115 = validateParameter(valid_594115, JString, required = false,
                                 default = nil)
  if valid_594115 != nil:
    section.add "X-Amz-Algorithm", valid_594115
  var valid_594116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594116 = validateParameter(valid_594116, JString, required = false,
                                 default = nil)
  if valid_594116 != nil:
    section.add "X-Amz-SignedHeaders", valid_594116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594117: Call_GetDescribeReservedCacheNodesOfferings_594098;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_594117.validator(path, query, header, formData, body)
  let scheme = call_594117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594117.url(scheme.get, call_594117.host, call_594117.base,
                         call_594117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594117, url, valid)

proc call*(call_594118: Call_GetDescribeReservedCacheNodesOfferings_594098;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0;
          ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_594119 = newJObject()
  add(query_594119, "Marker", newJString(Marker))
  add(query_594119, "ProductDescription", newJString(ProductDescription))
  add(query_594119, "OfferingType", newJString(OfferingType))
  add(query_594119, "CacheNodeType", newJString(CacheNodeType))
  add(query_594119, "Action", newJString(Action))
  add(query_594119, "Duration", newJString(Duration))
  add(query_594119, "Version", newJString(Version))
  add(query_594119, "MaxRecords", newJInt(MaxRecords))
  add(query_594119, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_594118.call(nil, query_594119, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_594098(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_594099, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_594100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_594162 = ref object of OpenApiRestCall_592364
proc url_PostDescribeServiceUpdates_594164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeServiceUpdates_594163(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594165 = query.getOrDefault("Action")
  valid_594165 = validateParameter(valid_594165, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_594165 != nil:
    section.add "Action", valid_594165
  var valid_594166 = query.getOrDefault("Version")
  valid_594166 = validateParameter(valid_594166, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594166 != nil:
    section.add "Version", valid_594166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594167 = header.getOrDefault("X-Amz-Signature")
  valid_594167 = validateParameter(valid_594167, JString, required = false,
                                 default = nil)
  if valid_594167 != nil:
    section.add "X-Amz-Signature", valid_594167
  var valid_594168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594168 = validateParameter(valid_594168, JString, required = false,
                                 default = nil)
  if valid_594168 != nil:
    section.add "X-Amz-Content-Sha256", valid_594168
  var valid_594169 = header.getOrDefault("X-Amz-Date")
  valid_594169 = validateParameter(valid_594169, JString, required = false,
                                 default = nil)
  if valid_594169 != nil:
    section.add "X-Amz-Date", valid_594169
  var valid_594170 = header.getOrDefault("X-Amz-Credential")
  valid_594170 = validateParameter(valid_594170, JString, required = false,
                                 default = nil)
  if valid_594170 != nil:
    section.add "X-Amz-Credential", valid_594170
  var valid_594171 = header.getOrDefault("X-Amz-Security-Token")
  valid_594171 = validateParameter(valid_594171, JString, required = false,
                                 default = nil)
  if valid_594171 != nil:
    section.add "X-Amz-Security-Token", valid_594171
  var valid_594172 = header.getOrDefault("X-Amz-Algorithm")
  valid_594172 = validateParameter(valid_594172, JString, required = false,
                                 default = nil)
  if valid_594172 != nil:
    section.add "X-Amz-Algorithm", valid_594172
  var valid_594173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594173 = validateParameter(valid_594173, JString, required = false,
                                 default = nil)
  if valid_594173 != nil:
    section.add "X-Amz-SignedHeaders", valid_594173
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_594174 = formData.getOrDefault("MaxRecords")
  valid_594174 = validateParameter(valid_594174, JInt, required = false, default = nil)
  if valid_594174 != nil:
    section.add "MaxRecords", valid_594174
  var valid_594175 = formData.getOrDefault("ServiceUpdateName")
  valid_594175 = validateParameter(valid_594175, JString, required = false,
                                 default = nil)
  if valid_594175 != nil:
    section.add "ServiceUpdateName", valid_594175
  var valid_594176 = formData.getOrDefault("Marker")
  valid_594176 = validateParameter(valid_594176, JString, required = false,
                                 default = nil)
  if valid_594176 != nil:
    section.add "Marker", valid_594176
  var valid_594177 = formData.getOrDefault("ServiceUpdateStatus")
  valid_594177 = validateParameter(valid_594177, JArray, required = false,
                                 default = nil)
  if valid_594177 != nil:
    section.add "ServiceUpdateStatus", valid_594177
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594178: Call_PostDescribeServiceUpdates_594162; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_594178.validator(path, query, header, formData, body)
  let scheme = call_594178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594178.url(scheme.get, call_594178.host, call_594178.base,
                         call_594178.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594178, url, valid)

proc call*(call_594179: Call_PostDescribeServiceUpdates_594162;
          MaxRecords: int = 0; ServiceUpdateName: string = ""; Marker: string = "";
          Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_594180 = newJObject()
  var formData_594181 = newJObject()
  add(formData_594181, "MaxRecords", newJInt(MaxRecords))
  add(formData_594181, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_594181, "Marker", newJString(Marker))
  add(query_594180, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_594181.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_594180, "Version", newJString(Version))
  result = call_594179.call(nil, query_594180, nil, formData_594181, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_594162(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_594163, base: "/",
    url: url_PostDescribeServiceUpdates_594164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_594143 = ref object of OpenApiRestCall_592364
proc url_GetDescribeServiceUpdates_594145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeServiceUpdates_594144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_594146 = query.getOrDefault("Marker")
  valid_594146 = validateParameter(valid_594146, JString, required = false,
                                 default = nil)
  if valid_594146 != nil:
    section.add "Marker", valid_594146
  var valid_594147 = query.getOrDefault("ServiceUpdateName")
  valid_594147 = validateParameter(valid_594147, JString, required = false,
                                 default = nil)
  if valid_594147 != nil:
    section.add "ServiceUpdateName", valid_594147
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594148 = query.getOrDefault("Action")
  valid_594148 = validateParameter(valid_594148, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_594148 != nil:
    section.add "Action", valid_594148
  var valid_594149 = query.getOrDefault("ServiceUpdateStatus")
  valid_594149 = validateParameter(valid_594149, JArray, required = false,
                                 default = nil)
  if valid_594149 != nil:
    section.add "ServiceUpdateStatus", valid_594149
  var valid_594150 = query.getOrDefault("Version")
  valid_594150 = validateParameter(valid_594150, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594150 != nil:
    section.add "Version", valid_594150
  var valid_594151 = query.getOrDefault("MaxRecords")
  valid_594151 = validateParameter(valid_594151, JInt, required = false, default = nil)
  if valid_594151 != nil:
    section.add "MaxRecords", valid_594151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594152 = header.getOrDefault("X-Amz-Signature")
  valid_594152 = validateParameter(valid_594152, JString, required = false,
                                 default = nil)
  if valid_594152 != nil:
    section.add "X-Amz-Signature", valid_594152
  var valid_594153 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594153 = validateParameter(valid_594153, JString, required = false,
                                 default = nil)
  if valid_594153 != nil:
    section.add "X-Amz-Content-Sha256", valid_594153
  var valid_594154 = header.getOrDefault("X-Amz-Date")
  valid_594154 = validateParameter(valid_594154, JString, required = false,
                                 default = nil)
  if valid_594154 != nil:
    section.add "X-Amz-Date", valid_594154
  var valid_594155 = header.getOrDefault("X-Amz-Credential")
  valid_594155 = validateParameter(valid_594155, JString, required = false,
                                 default = nil)
  if valid_594155 != nil:
    section.add "X-Amz-Credential", valid_594155
  var valid_594156 = header.getOrDefault("X-Amz-Security-Token")
  valid_594156 = validateParameter(valid_594156, JString, required = false,
                                 default = nil)
  if valid_594156 != nil:
    section.add "X-Amz-Security-Token", valid_594156
  var valid_594157 = header.getOrDefault("X-Amz-Algorithm")
  valid_594157 = validateParameter(valid_594157, JString, required = false,
                                 default = nil)
  if valid_594157 != nil:
    section.add "X-Amz-Algorithm", valid_594157
  var valid_594158 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594158 = validateParameter(valid_594158, JString, required = false,
                                 default = nil)
  if valid_594158 != nil:
    section.add "X-Amz-SignedHeaders", valid_594158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594159: Call_GetDescribeServiceUpdates_594143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_594159.validator(path, query, header, formData, body)
  let scheme = call_594159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594159.url(scheme.get, call_594159.host, call_594159.base,
                         call_594159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594159, url, valid)

proc call*(call_594160: Call_GetDescribeServiceUpdates_594143; Marker: string = "";
          ServiceUpdateName: string = ""; Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_594161 = newJObject()
  add(query_594161, "Marker", newJString(Marker))
  add(query_594161, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_594161, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_594161.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_594161, "Version", newJString(Version))
  add(query_594161, "MaxRecords", newJInt(MaxRecords))
  result = call_594160.call(nil, query_594161, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_594143(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_594144, base: "/",
    url: url_GetDescribeServiceUpdates_594145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_594204 = ref object of OpenApiRestCall_592364
proc url_PostDescribeSnapshots_594206(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeSnapshots_594205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594207 = query.getOrDefault("Action")
  valid_594207 = validateParameter(valid_594207, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_594207 != nil:
    section.add "Action", valid_594207
  var valid_594208 = query.getOrDefault("Version")
  valid_594208 = validateParameter(valid_594208, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594208 != nil:
    section.add "Version", valid_594208
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594209 = header.getOrDefault("X-Amz-Signature")
  valid_594209 = validateParameter(valid_594209, JString, required = false,
                                 default = nil)
  if valid_594209 != nil:
    section.add "X-Amz-Signature", valid_594209
  var valid_594210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594210 = validateParameter(valid_594210, JString, required = false,
                                 default = nil)
  if valid_594210 != nil:
    section.add "X-Amz-Content-Sha256", valid_594210
  var valid_594211 = header.getOrDefault("X-Amz-Date")
  valid_594211 = validateParameter(valid_594211, JString, required = false,
                                 default = nil)
  if valid_594211 != nil:
    section.add "X-Amz-Date", valid_594211
  var valid_594212 = header.getOrDefault("X-Amz-Credential")
  valid_594212 = validateParameter(valid_594212, JString, required = false,
                                 default = nil)
  if valid_594212 != nil:
    section.add "X-Amz-Credential", valid_594212
  var valid_594213 = header.getOrDefault("X-Amz-Security-Token")
  valid_594213 = validateParameter(valid_594213, JString, required = false,
                                 default = nil)
  if valid_594213 != nil:
    section.add "X-Amz-Security-Token", valid_594213
  var valid_594214 = header.getOrDefault("X-Amz-Algorithm")
  valid_594214 = validateParameter(valid_594214, JString, required = false,
                                 default = nil)
  if valid_594214 != nil:
    section.add "X-Amz-Algorithm", valid_594214
  var valid_594215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594215 = validateParameter(valid_594215, JString, required = false,
                                 default = nil)
  if valid_594215 != nil:
    section.add "X-Amz-SignedHeaders", valid_594215
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  section = newJObject()
  var valid_594216 = formData.getOrDefault("CacheClusterId")
  valid_594216 = validateParameter(valid_594216, JString, required = false,
                                 default = nil)
  if valid_594216 != nil:
    section.add "CacheClusterId", valid_594216
  var valid_594217 = formData.getOrDefault("MaxRecords")
  valid_594217 = validateParameter(valid_594217, JInt, required = false, default = nil)
  if valid_594217 != nil:
    section.add "MaxRecords", valid_594217
  var valid_594218 = formData.getOrDefault("Marker")
  valid_594218 = validateParameter(valid_594218, JString, required = false,
                                 default = nil)
  if valid_594218 != nil:
    section.add "Marker", valid_594218
  var valid_594219 = formData.getOrDefault("SnapshotName")
  valid_594219 = validateParameter(valid_594219, JString, required = false,
                                 default = nil)
  if valid_594219 != nil:
    section.add "SnapshotName", valid_594219
  var valid_594220 = formData.getOrDefault("SnapshotSource")
  valid_594220 = validateParameter(valid_594220, JString, required = false,
                                 default = nil)
  if valid_594220 != nil:
    section.add "SnapshotSource", valid_594220
  var valid_594221 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_594221 = validateParameter(valid_594221, JBool, required = false, default = nil)
  if valid_594221 != nil:
    section.add "ShowNodeGroupConfig", valid_594221
  var valid_594222 = formData.getOrDefault("ReplicationGroupId")
  valid_594222 = validateParameter(valid_594222, JString, required = false,
                                 default = nil)
  if valid_594222 != nil:
    section.add "ReplicationGroupId", valid_594222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594223: Call_PostDescribeSnapshots_594204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_594223.validator(path, query, header, formData, body)
  let scheme = call_594223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594223.url(scheme.get, call_594223.host, call_594223.base,
                         call_594223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594223, url, valid)

proc call*(call_594224: Call_PostDescribeSnapshots_594204;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          SnapshotName: string = ""; SnapshotSource: string = "";
          Action: string = "DescribeSnapshots"; ShowNodeGroupConfig: bool = false;
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   Action: string (required)
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  var query_594225 = newJObject()
  var formData_594226 = newJObject()
  add(formData_594226, "CacheClusterId", newJString(CacheClusterId))
  add(formData_594226, "MaxRecords", newJInt(MaxRecords))
  add(formData_594226, "Marker", newJString(Marker))
  add(formData_594226, "SnapshotName", newJString(SnapshotName))
  add(formData_594226, "SnapshotSource", newJString(SnapshotSource))
  add(query_594225, "Action", newJString(Action))
  add(formData_594226, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_594225, "Version", newJString(Version))
  add(formData_594226, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_594224.call(nil, query_594225, nil, formData_594226, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_594204(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_594205, base: "/",
    url: url_PostDescribeSnapshots_594206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_594182 = ref object of OpenApiRestCall_592364
proc url_GetDescribeSnapshots_594184(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeSnapshots_594183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  section = newJObject()
  var valid_594185 = query.getOrDefault("Marker")
  valid_594185 = validateParameter(valid_594185, JString, required = false,
                                 default = nil)
  if valid_594185 != nil:
    section.add "Marker", valid_594185
  var valid_594186 = query.getOrDefault("CacheClusterId")
  valid_594186 = validateParameter(valid_594186, JString, required = false,
                                 default = nil)
  if valid_594186 != nil:
    section.add "CacheClusterId", valid_594186
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594187 = query.getOrDefault("Action")
  valid_594187 = validateParameter(valid_594187, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_594187 != nil:
    section.add "Action", valid_594187
  var valid_594188 = query.getOrDefault("ReplicationGroupId")
  valid_594188 = validateParameter(valid_594188, JString, required = false,
                                 default = nil)
  if valid_594188 != nil:
    section.add "ReplicationGroupId", valid_594188
  var valid_594189 = query.getOrDefault("Version")
  valid_594189 = validateParameter(valid_594189, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594189 != nil:
    section.add "Version", valid_594189
  var valid_594190 = query.getOrDefault("SnapshotName")
  valid_594190 = validateParameter(valid_594190, JString, required = false,
                                 default = nil)
  if valid_594190 != nil:
    section.add "SnapshotName", valid_594190
  var valid_594191 = query.getOrDefault("SnapshotSource")
  valid_594191 = validateParameter(valid_594191, JString, required = false,
                                 default = nil)
  if valid_594191 != nil:
    section.add "SnapshotSource", valid_594191
  var valid_594192 = query.getOrDefault("MaxRecords")
  valid_594192 = validateParameter(valid_594192, JInt, required = false, default = nil)
  if valid_594192 != nil:
    section.add "MaxRecords", valid_594192
  var valid_594193 = query.getOrDefault("ShowNodeGroupConfig")
  valid_594193 = validateParameter(valid_594193, JBool, required = false, default = nil)
  if valid_594193 != nil:
    section.add "ShowNodeGroupConfig", valid_594193
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594194 = header.getOrDefault("X-Amz-Signature")
  valid_594194 = validateParameter(valid_594194, JString, required = false,
                                 default = nil)
  if valid_594194 != nil:
    section.add "X-Amz-Signature", valid_594194
  var valid_594195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594195 = validateParameter(valid_594195, JString, required = false,
                                 default = nil)
  if valid_594195 != nil:
    section.add "X-Amz-Content-Sha256", valid_594195
  var valid_594196 = header.getOrDefault("X-Amz-Date")
  valid_594196 = validateParameter(valid_594196, JString, required = false,
                                 default = nil)
  if valid_594196 != nil:
    section.add "X-Amz-Date", valid_594196
  var valid_594197 = header.getOrDefault("X-Amz-Credential")
  valid_594197 = validateParameter(valid_594197, JString, required = false,
                                 default = nil)
  if valid_594197 != nil:
    section.add "X-Amz-Credential", valid_594197
  var valid_594198 = header.getOrDefault("X-Amz-Security-Token")
  valid_594198 = validateParameter(valid_594198, JString, required = false,
                                 default = nil)
  if valid_594198 != nil:
    section.add "X-Amz-Security-Token", valid_594198
  var valid_594199 = header.getOrDefault("X-Amz-Algorithm")
  valid_594199 = validateParameter(valid_594199, JString, required = false,
                                 default = nil)
  if valid_594199 != nil:
    section.add "X-Amz-Algorithm", valid_594199
  var valid_594200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594200 = validateParameter(valid_594200, JString, required = false,
                                 default = nil)
  if valid_594200 != nil:
    section.add "X-Amz-SignedHeaders", valid_594200
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594201: Call_GetDescribeSnapshots_594182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_594201.validator(path, query, header, formData, body)
  let scheme = call_594201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594201.url(scheme.get, call_594201.host, call_594201.base,
                         call_594201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594201, url, valid)

proc call*(call_594202: Call_GetDescribeSnapshots_594182; Marker: string = "";
          CacheClusterId: string = ""; Action: string = "DescribeSnapshots";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotName: string = ""; SnapshotSource: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  var query_594203 = newJObject()
  add(query_594203, "Marker", newJString(Marker))
  add(query_594203, "CacheClusterId", newJString(CacheClusterId))
  add(query_594203, "Action", newJString(Action))
  add(query_594203, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_594203, "Version", newJString(Version))
  add(query_594203, "SnapshotName", newJString(SnapshotName))
  add(query_594203, "SnapshotSource", newJString(SnapshotSource))
  add(query_594203, "MaxRecords", newJInt(MaxRecords))
  add(query_594203, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  result = call_594202.call(nil, query_594203, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_594182(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_594183, base: "/",
    url: url_GetDescribeSnapshots_594184, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_594251 = ref object of OpenApiRestCall_592364
proc url_PostDescribeUpdateActions_594253(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeUpdateActions_594252(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594254 = query.getOrDefault("Action")
  valid_594254 = validateParameter(valid_594254, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_594254 != nil:
    section.add "Action", valid_594254
  var valid_594255 = query.getOrDefault("Version")
  valid_594255 = validateParameter(valid_594255, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594255 != nil:
    section.add "Version", valid_594255
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594256 = header.getOrDefault("X-Amz-Signature")
  valid_594256 = validateParameter(valid_594256, JString, required = false,
                                 default = nil)
  if valid_594256 != nil:
    section.add "X-Amz-Signature", valid_594256
  var valid_594257 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594257 = validateParameter(valid_594257, JString, required = false,
                                 default = nil)
  if valid_594257 != nil:
    section.add "X-Amz-Content-Sha256", valid_594257
  var valid_594258 = header.getOrDefault("X-Amz-Date")
  valid_594258 = validateParameter(valid_594258, JString, required = false,
                                 default = nil)
  if valid_594258 != nil:
    section.add "X-Amz-Date", valid_594258
  var valid_594259 = header.getOrDefault("X-Amz-Credential")
  valid_594259 = validateParameter(valid_594259, JString, required = false,
                                 default = nil)
  if valid_594259 != nil:
    section.add "X-Amz-Credential", valid_594259
  var valid_594260 = header.getOrDefault("X-Amz-Security-Token")
  valid_594260 = validateParameter(valid_594260, JString, required = false,
                                 default = nil)
  if valid_594260 != nil:
    section.add "X-Amz-Security-Token", valid_594260
  var valid_594261 = header.getOrDefault("X-Amz-Algorithm")
  valid_594261 = validateParameter(valid_594261, JString, required = false,
                                 default = nil)
  if valid_594261 != nil:
    section.add "X-Amz-Algorithm", valid_594261
  var valid_594262 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594262 = validateParameter(valid_594262, JString, required = false,
                                 default = nil)
  if valid_594262 != nil:
    section.add "X-Amz-SignedHeaders", valid_594262
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_594263 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_594263 = validateParameter(valid_594263, JString, required = false,
                                 default = nil)
  if valid_594263 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_594263
  var valid_594264 = formData.getOrDefault("MaxRecords")
  valid_594264 = validateParameter(valid_594264, JInt, required = false, default = nil)
  if valid_594264 != nil:
    section.add "MaxRecords", valid_594264
  var valid_594265 = formData.getOrDefault("ServiceUpdateName")
  valid_594265 = validateParameter(valid_594265, JString, required = false,
                                 default = nil)
  if valid_594265 != nil:
    section.add "ServiceUpdateName", valid_594265
  var valid_594266 = formData.getOrDefault("ReplicationGroupIds")
  valid_594266 = validateParameter(valid_594266, JArray, required = false,
                                 default = nil)
  if valid_594266 != nil:
    section.add "ReplicationGroupIds", valid_594266
  var valid_594267 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_594267 = validateParameter(valid_594267, JString, required = false,
                                 default = nil)
  if valid_594267 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_594267
  var valid_594268 = formData.getOrDefault("Marker")
  valid_594268 = validateParameter(valid_594268, JString, required = false,
                                 default = nil)
  if valid_594268 != nil:
    section.add "Marker", valid_594268
  var valid_594269 = formData.getOrDefault("UpdateActionStatus")
  valid_594269 = validateParameter(valid_594269, JArray, required = false,
                                 default = nil)
  if valid_594269 != nil:
    section.add "UpdateActionStatus", valid_594269
  var valid_594270 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_594270 = validateParameter(valid_594270, JBool, required = false, default = nil)
  if valid_594270 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_594270
  var valid_594271 = formData.getOrDefault("ServiceUpdateStatus")
  valid_594271 = validateParameter(valid_594271, JArray, required = false,
                                 default = nil)
  if valid_594271 != nil:
    section.add "ServiceUpdateStatus", valid_594271
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594272: Call_PostDescribeUpdateActions_594251; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_594272.validator(path, query, header, formData, body)
  let scheme = call_594272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594272.url(scheme.get, call_594272.host, call_594272.base,
                         call_594272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594272, url, valid)

proc call*(call_594273: Call_PostDescribeUpdateActions_594251;
          ServiceUpdateTimeRangeEndTime: string = ""; MaxRecords: int = 0;
          ServiceUpdateName: string = ""; ReplicationGroupIds: JsonNode = nil;
          ServiceUpdateTimeRangeStartTime: string = ""; Marker: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_594274 = newJObject()
  var formData_594275 = newJObject()
  add(formData_594275, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_594275, "MaxRecords", newJInt(MaxRecords))
  add(formData_594275, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_594275.add "ReplicationGroupIds", ReplicationGroupIds
  add(formData_594275, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(formData_594275, "Marker", newJString(Marker))
  if UpdateActionStatus != nil:
    formData_594275.add "UpdateActionStatus", UpdateActionStatus
  add(formData_594275, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_594274, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_594275.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_594274, "Version", newJString(Version))
  result = call_594273.call(nil, query_594274, nil, formData_594275, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_594251(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_594252, base: "/",
    url: url_PostDescribeUpdateActions_594253,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_594227 = ref object of OpenApiRestCall_592364
proc url_GetDescribeUpdateActions_594229(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeUpdateActions_594228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_594230 = query.getOrDefault("Marker")
  valid_594230 = validateParameter(valid_594230, JString, required = false,
                                 default = nil)
  if valid_594230 != nil:
    section.add "Marker", valid_594230
  var valid_594231 = query.getOrDefault("ServiceUpdateName")
  valid_594231 = validateParameter(valid_594231, JString, required = false,
                                 default = nil)
  if valid_594231 != nil:
    section.add "ServiceUpdateName", valid_594231
  var valid_594232 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_594232 = validateParameter(valid_594232, JString, required = false,
                                 default = nil)
  if valid_594232 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_594232
  var valid_594233 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_594233 = validateParameter(valid_594233, JBool, required = false, default = nil)
  if valid_594233 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_594233
  var valid_594234 = query.getOrDefault("UpdateActionStatus")
  valid_594234 = validateParameter(valid_594234, JArray, required = false,
                                 default = nil)
  if valid_594234 != nil:
    section.add "UpdateActionStatus", valid_594234
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594235 = query.getOrDefault("Action")
  valid_594235 = validateParameter(valid_594235, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_594235 != nil:
    section.add "Action", valid_594235
  var valid_594236 = query.getOrDefault("ServiceUpdateStatus")
  valid_594236 = validateParameter(valid_594236, JArray, required = false,
                                 default = nil)
  if valid_594236 != nil:
    section.add "ServiceUpdateStatus", valid_594236
  var valid_594237 = query.getOrDefault("ReplicationGroupIds")
  valid_594237 = validateParameter(valid_594237, JArray, required = false,
                                 default = nil)
  if valid_594237 != nil:
    section.add "ReplicationGroupIds", valid_594237
  var valid_594238 = query.getOrDefault("Version")
  valid_594238 = validateParameter(valid_594238, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594238 != nil:
    section.add "Version", valid_594238
  var valid_594239 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_594239 = validateParameter(valid_594239, JString, required = false,
                                 default = nil)
  if valid_594239 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_594239
  var valid_594240 = query.getOrDefault("MaxRecords")
  valid_594240 = validateParameter(valid_594240, JInt, required = false, default = nil)
  if valid_594240 != nil:
    section.add "MaxRecords", valid_594240
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594241 = header.getOrDefault("X-Amz-Signature")
  valid_594241 = validateParameter(valid_594241, JString, required = false,
                                 default = nil)
  if valid_594241 != nil:
    section.add "X-Amz-Signature", valid_594241
  var valid_594242 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594242 = validateParameter(valid_594242, JString, required = false,
                                 default = nil)
  if valid_594242 != nil:
    section.add "X-Amz-Content-Sha256", valid_594242
  var valid_594243 = header.getOrDefault("X-Amz-Date")
  valid_594243 = validateParameter(valid_594243, JString, required = false,
                                 default = nil)
  if valid_594243 != nil:
    section.add "X-Amz-Date", valid_594243
  var valid_594244 = header.getOrDefault("X-Amz-Credential")
  valid_594244 = validateParameter(valid_594244, JString, required = false,
                                 default = nil)
  if valid_594244 != nil:
    section.add "X-Amz-Credential", valid_594244
  var valid_594245 = header.getOrDefault("X-Amz-Security-Token")
  valid_594245 = validateParameter(valid_594245, JString, required = false,
                                 default = nil)
  if valid_594245 != nil:
    section.add "X-Amz-Security-Token", valid_594245
  var valid_594246 = header.getOrDefault("X-Amz-Algorithm")
  valid_594246 = validateParameter(valid_594246, JString, required = false,
                                 default = nil)
  if valid_594246 != nil:
    section.add "X-Amz-Algorithm", valid_594246
  var valid_594247 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594247 = validateParameter(valid_594247, JString, required = false,
                                 default = nil)
  if valid_594247 != nil:
    section.add "X-Amz-SignedHeaders", valid_594247
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594248: Call_GetDescribeUpdateActions_594227; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_594248.validator(path, query, header, formData, body)
  let scheme = call_594248.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594248.url(scheme.get, call_594248.host, call_594248.base,
                         call_594248.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594248, url, valid)

proc call*(call_594249: Call_GetDescribeUpdateActions_594227; Marker: string = "";
          ServiceUpdateName: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02";
          ServiceUpdateTimeRangeStartTime: string = ""; MaxRecords: int = 0): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_594250 = newJObject()
  add(query_594250, "Marker", newJString(Marker))
  add(query_594250, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_594250, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(query_594250, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    query_594250.add "UpdateActionStatus", UpdateActionStatus
  add(query_594250, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_594250.add "ServiceUpdateStatus", ServiceUpdateStatus
  if ReplicationGroupIds != nil:
    query_594250.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_594250, "Version", newJString(Version))
  add(query_594250, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_594250, "MaxRecords", newJInt(MaxRecords))
  result = call_594249.call(nil, query_594250, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_594227(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_594228, base: "/",
    url: url_GetDescribeUpdateActions_594229, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_594295 = ref object of OpenApiRestCall_592364
proc url_PostIncreaseReplicaCount_594297(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostIncreaseReplicaCount_594296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594298 = query.getOrDefault("Action")
  valid_594298 = validateParameter(valid_594298, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_594298 != nil:
    section.add "Action", valid_594298
  var valid_594299 = query.getOrDefault("Version")
  valid_594299 = validateParameter(valid_594299, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594299 != nil:
    section.add "Version", valid_594299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594300 = header.getOrDefault("X-Amz-Signature")
  valid_594300 = validateParameter(valid_594300, JString, required = false,
                                 default = nil)
  if valid_594300 != nil:
    section.add "X-Amz-Signature", valid_594300
  var valid_594301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594301 = validateParameter(valid_594301, JString, required = false,
                                 default = nil)
  if valid_594301 != nil:
    section.add "X-Amz-Content-Sha256", valid_594301
  var valid_594302 = header.getOrDefault("X-Amz-Date")
  valid_594302 = validateParameter(valid_594302, JString, required = false,
                                 default = nil)
  if valid_594302 != nil:
    section.add "X-Amz-Date", valid_594302
  var valid_594303 = header.getOrDefault("X-Amz-Credential")
  valid_594303 = validateParameter(valid_594303, JString, required = false,
                                 default = nil)
  if valid_594303 != nil:
    section.add "X-Amz-Credential", valid_594303
  var valid_594304 = header.getOrDefault("X-Amz-Security-Token")
  valid_594304 = validateParameter(valid_594304, JString, required = false,
                                 default = nil)
  if valid_594304 != nil:
    section.add "X-Amz-Security-Token", valid_594304
  var valid_594305 = header.getOrDefault("X-Amz-Algorithm")
  valid_594305 = validateParameter(valid_594305, JString, required = false,
                                 default = nil)
  if valid_594305 != nil:
    section.add "X-Amz-Algorithm", valid_594305
  var valid_594306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594306 = validateParameter(valid_594306, JString, required = false,
                                 default = nil)
  if valid_594306 != nil:
    section.add "X-Amz-SignedHeaders", valid_594306
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  section = newJObject()
  var valid_594307 = formData.getOrDefault("ReplicaConfiguration")
  valid_594307 = validateParameter(valid_594307, JArray, required = false,
                                 default = nil)
  if valid_594307 != nil:
    section.add "ReplicaConfiguration", valid_594307
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_594308 = formData.getOrDefault("ApplyImmediately")
  valid_594308 = validateParameter(valid_594308, JBool, required = true, default = nil)
  if valid_594308 != nil:
    section.add "ApplyImmediately", valid_594308
  var valid_594309 = formData.getOrDefault("NewReplicaCount")
  valid_594309 = validateParameter(valid_594309, JInt, required = false, default = nil)
  if valid_594309 != nil:
    section.add "NewReplicaCount", valid_594309
  var valid_594310 = formData.getOrDefault("ReplicationGroupId")
  valid_594310 = validateParameter(valid_594310, JString, required = true,
                                 default = nil)
  if valid_594310 != nil:
    section.add "ReplicationGroupId", valid_594310
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594311: Call_PostIncreaseReplicaCount_594295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_594311.validator(path, query, header, formData, body)
  let scheme = call_594311.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594311.url(scheme.get, call_594311.host, call_594311.base,
                         call_594311.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594311, url, valid)

proc call*(call_594312: Call_PostIncreaseReplicaCount_594295;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  var query_594313 = newJObject()
  var formData_594314 = newJObject()
  if ReplicaConfiguration != nil:
    formData_594314.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_594314, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594313, "Action", newJString(Action))
  add(formData_594314, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_594313, "Version", newJString(Version))
  add(formData_594314, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_594312.call(nil, query_594313, nil, formData_594314, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_594295(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_594296, base: "/",
    url: url_PostIncreaseReplicaCount_594297, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_594276 = ref object of OpenApiRestCall_592364
proc url_GetIncreaseReplicaCount_594278(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetIncreaseReplicaCount_594277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  section = newJObject()
  var valid_594279 = query.getOrDefault("NewReplicaCount")
  valid_594279 = validateParameter(valid_594279, JInt, required = false, default = nil)
  if valid_594279 != nil:
    section.add "NewReplicaCount", valid_594279
  var valid_594280 = query.getOrDefault("ReplicaConfiguration")
  valid_594280 = validateParameter(valid_594280, JArray, required = false,
                                 default = nil)
  if valid_594280 != nil:
    section.add "ReplicaConfiguration", valid_594280
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594281 = query.getOrDefault("Action")
  valid_594281 = validateParameter(valid_594281, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_594281 != nil:
    section.add "Action", valid_594281
  var valid_594282 = query.getOrDefault("ApplyImmediately")
  valid_594282 = validateParameter(valid_594282, JBool, required = true, default = nil)
  if valid_594282 != nil:
    section.add "ApplyImmediately", valid_594282
  var valid_594283 = query.getOrDefault("ReplicationGroupId")
  valid_594283 = validateParameter(valid_594283, JString, required = true,
                                 default = nil)
  if valid_594283 != nil:
    section.add "ReplicationGroupId", valid_594283
  var valid_594284 = query.getOrDefault("Version")
  valid_594284 = validateParameter(valid_594284, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594284 != nil:
    section.add "Version", valid_594284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594285 = header.getOrDefault("X-Amz-Signature")
  valid_594285 = validateParameter(valid_594285, JString, required = false,
                                 default = nil)
  if valid_594285 != nil:
    section.add "X-Amz-Signature", valid_594285
  var valid_594286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594286 = validateParameter(valid_594286, JString, required = false,
                                 default = nil)
  if valid_594286 != nil:
    section.add "X-Amz-Content-Sha256", valid_594286
  var valid_594287 = header.getOrDefault("X-Amz-Date")
  valid_594287 = validateParameter(valid_594287, JString, required = false,
                                 default = nil)
  if valid_594287 != nil:
    section.add "X-Amz-Date", valid_594287
  var valid_594288 = header.getOrDefault("X-Amz-Credential")
  valid_594288 = validateParameter(valid_594288, JString, required = false,
                                 default = nil)
  if valid_594288 != nil:
    section.add "X-Amz-Credential", valid_594288
  var valid_594289 = header.getOrDefault("X-Amz-Security-Token")
  valid_594289 = validateParameter(valid_594289, JString, required = false,
                                 default = nil)
  if valid_594289 != nil:
    section.add "X-Amz-Security-Token", valid_594289
  var valid_594290 = header.getOrDefault("X-Amz-Algorithm")
  valid_594290 = validateParameter(valid_594290, JString, required = false,
                                 default = nil)
  if valid_594290 != nil:
    section.add "X-Amz-Algorithm", valid_594290
  var valid_594291 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594291 = validateParameter(valid_594291, JString, required = false,
                                 default = nil)
  if valid_594291 != nil:
    section.add "X-Amz-SignedHeaders", valid_594291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594292: Call_GetIncreaseReplicaCount_594276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_594292.validator(path, query, header, formData, body)
  let scheme = call_594292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594292.url(scheme.get, call_594292.host, call_594292.base,
                         call_594292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594292, url, valid)

proc call*(call_594293: Call_GetIncreaseReplicaCount_594276;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  var query_594294 = newJObject()
  add(query_594294, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_594294.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_594294, "Action", newJString(Action))
  add(query_594294, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594294, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_594294, "Version", newJString(Version))
  result = call_594293.call(nil, query_594294, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_594276(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_594277, base: "/",
    url: url_GetIncreaseReplicaCount_594278, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_594332 = ref object of OpenApiRestCall_592364
proc url_PostListAllowedNodeTypeModifications_594334(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_594333(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594335 = query.getOrDefault("Action")
  valid_594335 = validateParameter(valid_594335, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_594335 != nil:
    section.add "Action", valid_594335
  var valid_594336 = query.getOrDefault("Version")
  valid_594336 = validateParameter(valid_594336, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594336 != nil:
    section.add "Version", valid_594336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594337 = header.getOrDefault("X-Amz-Signature")
  valid_594337 = validateParameter(valid_594337, JString, required = false,
                                 default = nil)
  if valid_594337 != nil:
    section.add "X-Amz-Signature", valid_594337
  var valid_594338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594338 = validateParameter(valid_594338, JString, required = false,
                                 default = nil)
  if valid_594338 != nil:
    section.add "X-Amz-Content-Sha256", valid_594338
  var valid_594339 = header.getOrDefault("X-Amz-Date")
  valid_594339 = validateParameter(valid_594339, JString, required = false,
                                 default = nil)
  if valid_594339 != nil:
    section.add "X-Amz-Date", valid_594339
  var valid_594340 = header.getOrDefault("X-Amz-Credential")
  valid_594340 = validateParameter(valid_594340, JString, required = false,
                                 default = nil)
  if valid_594340 != nil:
    section.add "X-Amz-Credential", valid_594340
  var valid_594341 = header.getOrDefault("X-Amz-Security-Token")
  valid_594341 = validateParameter(valid_594341, JString, required = false,
                                 default = nil)
  if valid_594341 != nil:
    section.add "X-Amz-Security-Token", valid_594341
  var valid_594342 = header.getOrDefault("X-Amz-Algorithm")
  valid_594342 = validateParameter(valid_594342, JString, required = false,
                                 default = nil)
  if valid_594342 != nil:
    section.add "X-Amz-Algorithm", valid_594342
  var valid_594343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594343 = validateParameter(valid_594343, JString, required = false,
                                 default = nil)
  if valid_594343 != nil:
    section.add "X-Amz-SignedHeaders", valid_594343
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_594344 = formData.getOrDefault("CacheClusterId")
  valid_594344 = validateParameter(valid_594344, JString, required = false,
                                 default = nil)
  if valid_594344 != nil:
    section.add "CacheClusterId", valid_594344
  var valid_594345 = formData.getOrDefault("ReplicationGroupId")
  valid_594345 = validateParameter(valid_594345, JString, required = false,
                                 default = nil)
  if valid_594345 != nil:
    section.add "ReplicationGroupId", valid_594345
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594346: Call_PostListAllowedNodeTypeModifications_594332;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_594346.validator(path, query, header, formData, body)
  let scheme = call_594346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594346.url(scheme.get, call_594346.host, call_594346.base,
                         call_594346.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594346, url, valid)

proc call*(call_594347: Call_PostListAllowedNodeTypeModifications_594332;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_594348 = newJObject()
  var formData_594349 = newJObject()
  add(formData_594349, "CacheClusterId", newJString(CacheClusterId))
  add(query_594348, "Action", newJString(Action))
  add(query_594348, "Version", newJString(Version))
  add(formData_594349, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_594347.call(nil, query_594348, nil, formData_594349, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_594332(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_594333, base: "/",
    url: url_PostListAllowedNodeTypeModifications_594334,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_594315 = ref object of OpenApiRestCall_592364
proc url_GetListAllowedNodeTypeModifications_594317(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_594316(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594318 = query.getOrDefault("CacheClusterId")
  valid_594318 = validateParameter(valid_594318, JString, required = false,
                                 default = nil)
  if valid_594318 != nil:
    section.add "CacheClusterId", valid_594318
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594319 = query.getOrDefault("Action")
  valid_594319 = validateParameter(valid_594319, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_594319 != nil:
    section.add "Action", valid_594319
  var valid_594320 = query.getOrDefault("ReplicationGroupId")
  valid_594320 = validateParameter(valid_594320, JString, required = false,
                                 default = nil)
  if valid_594320 != nil:
    section.add "ReplicationGroupId", valid_594320
  var valid_594321 = query.getOrDefault("Version")
  valid_594321 = validateParameter(valid_594321, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594321 != nil:
    section.add "Version", valid_594321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594322 = header.getOrDefault("X-Amz-Signature")
  valid_594322 = validateParameter(valid_594322, JString, required = false,
                                 default = nil)
  if valid_594322 != nil:
    section.add "X-Amz-Signature", valid_594322
  var valid_594323 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594323 = validateParameter(valid_594323, JString, required = false,
                                 default = nil)
  if valid_594323 != nil:
    section.add "X-Amz-Content-Sha256", valid_594323
  var valid_594324 = header.getOrDefault("X-Amz-Date")
  valid_594324 = validateParameter(valid_594324, JString, required = false,
                                 default = nil)
  if valid_594324 != nil:
    section.add "X-Amz-Date", valid_594324
  var valid_594325 = header.getOrDefault("X-Amz-Credential")
  valid_594325 = validateParameter(valid_594325, JString, required = false,
                                 default = nil)
  if valid_594325 != nil:
    section.add "X-Amz-Credential", valid_594325
  var valid_594326 = header.getOrDefault("X-Amz-Security-Token")
  valid_594326 = validateParameter(valid_594326, JString, required = false,
                                 default = nil)
  if valid_594326 != nil:
    section.add "X-Amz-Security-Token", valid_594326
  var valid_594327 = header.getOrDefault("X-Amz-Algorithm")
  valid_594327 = validateParameter(valid_594327, JString, required = false,
                                 default = nil)
  if valid_594327 != nil:
    section.add "X-Amz-Algorithm", valid_594327
  var valid_594328 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594328 = validateParameter(valid_594328, JString, required = false,
                                 default = nil)
  if valid_594328 != nil:
    section.add "X-Amz-SignedHeaders", valid_594328
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594329: Call_GetListAllowedNodeTypeModifications_594315;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_594329.validator(path, query, header, formData, body)
  let scheme = call_594329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594329.url(scheme.get, call_594329.host, call_594329.base,
                         call_594329.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594329, url, valid)

proc call*(call_594330: Call_GetListAllowedNodeTypeModifications_594315;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_594331 = newJObject()
  add(query_594331, "CacheClusterId", newJString(CacheClusterId))
  add(query_594331, "Action", newJString(Action))
  add(query_594331, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_594331, "Version", newJString(Version))
  result = call_594330.call(nil, query_594331, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_594315(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_594316, base: "/",
    url: url_GetListAllowedNodeTypeModifications_594317,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_594366 = ref object of OpenApiRestCall_592364
proc url_PostListTagsForResource_594368(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_594367(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594369 = query.getOrDefault("Action")
  valid_594369 = validateParameter(valid_594369, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_594369 != nil:
    section.add "Action", valid_594369
  var valid_594370 = query.getOrDefault("Version")
  valid_594370 = validateParameter(valid_594370, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594370 != nil:
    section.add "Version", valid_594370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594371 = header.getOrDefault("X-Amz-Signature")
  valid_594371 = validateParameter(valid_594371, JString, required = false,
                                 default = nil)
  if valid_594371 != nil:
    section.add "X-Amz-Signature", valid_594371
  var valid_594372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594372 = validateParameter(valid_594372, JString, required = false,
                                 default = nil)
  if valid_594372 != nil:
    section.add "X-Amz-Content-Sha256", valid_594372
  var valid_594373 = header.getOrDefault("X-Amz-Date")
  valid_594373 = validateParameter(valid_594373, JString, required = false,
                                 default = nil)
  if valid_594373 != nil:
    section.add "X-Amz-Date", valid_594373
  var valid_594374 = header.getOrDefault("X-Amz-Credential")
  valid_594374 = validateParameter(valid_594374, JString, required = false,
                                 default = nil)
  if valid_594374 != nil:
    section.add "X-Amz-Credential", valid_594374
  var valid_594375 = header.getOrDefault("X-Amz-Security-Token")
  valid_594375 = validateParameter(valid_594375, JString, required = false,
                                 default = nil)
  if valid_594375 != nil:
    section.add "X-Amz-Security-Token", valid_594375
  var valid_594376 = header.getOrDefault("X-Amz-Algorithm")
  valid_594376 = validateParameter(valid_594376, JString, required = false,
                                 default = nil)
  if valid_594376 != nil:
    section.add "X-Amz-Algorithm", valid_594376
  var valid_594377 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594377 = validateParameter(valid_594377, JString, required = false,
                                 default = nil)
  if valid_594377 != nil:
    section.add "X-Amz-SignedHeaders", valid_594377
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_594378 = formData.getOrDefault("ResourceName")
  valid_594378 = validateParameter(valid_594378, JString, required = true,
                                 default = nil)
  if valid_594378 != nil:
    section.add "ResourceName", valid_594378
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594379: Call_PostListTagsForResource_594366; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_594379.validator(path, query, header, formData, body)
  let scheme = call_594379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594379.url(scheme.get, call_594379.host, call_594379.base,
                         call_594379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594379, url, valid)

proc call*(call_594380: Call_PostListTagsForResource_594366; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_594381 = newJObject()
  var formData_594382 = newJObject()
  add(query_594381, "Action", newJString(Action))
  add(query_594381, "Version", newJString(Version))
  add(formData_594382, "ResourceName", newJString(ResourceName))
  result = call_594380.call(nil, query_594381, nil, formData_594382, nil)

var postListTagsForResource* = Call_PostListTagsForResource_594366(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_594367, base: "/",
    url: url_PostListTagsForResource_594368, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_594350 = ref object of OpenApiRestCall_592364
proc url_GetListTagsForResource_594352(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_594351(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_594353 = query.getOrDefault("ResourceName")
  valid_594353 = validateParameter(valid_594353, JString, required = true,
                                 default = nil)
  if valid_594353 != nil:
    section.add "ResourceName", valid_594353
  var valid_594354 = query.getOrDefault("Action")
  valid_594354 = validateParameter(valid_594354, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_594354 != nil:
    section.add "Action", valid_594354
  var valid_594355 = query.getOrDefault("Version")
  valid_594355 = validateParameter(valid_594355, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594355 != nil:
    section.add "Version", valid_594355
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594356 = header.getOrDefault("X-Amz-Signature")
  valid_594356 = validateParameter(valid_594356, JString, required = false,
                                 default = nil)
  if valid_594356 != nil:
    section.add "X-Amz-Signature", valid_594356
  var valid_594357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594357 = validateParameter(valid_594357, JString, required = false,
                                 default = nil)
  if valid_594357 != nil:
    section.add "X-Amz-Content-Sha256", valid_594357
  var valid_594358 = header.getOrDefault("X-Amz-Date")
  valid_594358 = validateParameter(valid_594358, JString, required = false,
                                 default = nil)
  if valid_594358 != nil:
    section.add "X-Amz-Date", valid_594358
  var valid_594359 = header.getOrDefault("X-Amz-Credential")
  valid_594359 = validateParameter(valid_594359, JString, required = false,
                                 default = nil)
  if valid_594359 != nil:
    section.add "X-Amz-Credential", valid_594359
  var valid_594360 = header.getOrDefault("X-Amz-Security-Token")
  valid_594360 = validateParameter(valid_594360, JString, required = false,
                                 default = nil)
  if valid_594360 != nil:
    section.add "X-Amz-Security-Token", valid_594360
  var valid_594361 = header.getOrDefault("X-Amz-Algorithm")
  valid_594361 = validateParameter(valid_594361, JString, required = false,
                                 default = nil)
  if valid_594361 != nil:
    section.add "X-Amz-Algorithm", valid_594361
  var valid_594362 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594362 = validateParameter(valid_594362, JString, required = false,
                                 default = nil)
  if valid_594362 != nil:
    section.add "X-Amz-SignedHeaders", valid_594362
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594363: Call_GetListTagsForResource_594350; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_594363.validator(path, query, header, formData, body)
  let scheme = call_594363.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594363.url(scheme.get, call_594363.host, call_594363.base,
                         call_594363.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594363, url, valid)

proc call*(call_594364: Call_GetListTagsForResource_594350; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594365 = newJObject()
  add(query_594365, "ResourceName", newJString(ResourceName))
  add(query_594365, "Action", newJString(Action))
  add(query_594365, "Version", newJString(Version))
  result = call_594364.call(nil, query_594365, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_594350(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_594351, base: "/",
    url: url_GetListTagsForResource_594352, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_594415 = ref object of OpenApiRestCall_592364
proc url_PostModifyCacheCluster_594417(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheCluster_594416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594418 = query.getOrDefault("Action")
  valid_594418 = validateParameter(valid_594418, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_594418 != nil:
    section.add "Action", valid_594418
  var valid_594419 = query.getOrDefault("Version")
  valid_594419 = validateParameter(valid_594419, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594419 != nil:
    section.add "Version", valid_594419
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594420 = header.getOrDefault("X-Amz-Signature")
  valid_594420 = validateParameter(valid_594420, JString, required = false,
                                 default = nil)
  if valid_594420 != nil:
    section.add "X-Amz-Signature", valid_594420
  var valid_594421 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594421 = validateParameter(valid_594421, JString, required = false,
                                 default = nil)
  if valid_594421 != nil:
    section.add "X-Amz-Content-Sha256", valid_594421
  var valid_594422 = header.getOrDefault("X-Amz-Date")
  valid_594422 = validateParameter(valid_594422, JString, required = false,
                                 default = nil)
  if valid_594422 != nil:
    section.add "X-Amz-Date", valid_594422
  var valid_594423 = header.getOrDefault("X-Amz-Credential")
  valid_594423 = validateParameter(valid_594423, JString, required = false,
                                 default = nil)
  if valid_594423 != nil:
    section.add "X-Amz-Credential", valid_594423
  var valid_594424 = header.getOrDefault("X-Amz-Security-Token")
  valid_594424 = validateParameter(valid_594424, JString, required = false,
                                 default = nil)
  if valid_594424 != nil:
    section.add "X-Amz-Security-Token", valid_594424
  var valid_594425 = header.getOrDefault("X-Amz-Algorithm")
  valid_594425 = validateParameter(valid_594425, JString, required = false,
                                 default = nil)
  if valid_594425 != nil:
    section.add "X-Amz-Algorithm", valid_594425
  var valid_594426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594426 = validateParameter(valid_594426, JString, required = false,
                                 default = nil)
  if valid_594426 != nil:
    section.add "X-Amz-SignedHeaders", valid_594426
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  section = newJObject()
  var valid_594427 = formData.getOrDefault("SecurityGroupIds")
  valid_594427 = validateParameter(valid_594427, JArray, required = false,
                                 default = nil)
  if valid_594427 != nil:
    section.add "SecurityGroupIds", valid_594427
  var valid_594428 = formData.getOrDefault("NewAvailabilityZones")
  valid_594428 = validateParameter(valid_594428, JArray, required = false,
                                 default = nil)
  if valid_594428 != nil:
    section.add "NewAvailabilityZones", valid_594428
  var valid_594429 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_594429 = validateParameter(valid_594429, JString, required = false,
                                 default = nil)
  if valid_594429 != nil:
    section.add "PreferredMaintenanceWindow", valid_594429
  var valid_594430 = formData.getOrDefault("NumCacheNodes")
  valid_594430 = validateParameter(valid_594430, JInt, required = false, default = nil)
  if valid_594430 != nil:
    section.add "NumCacheNodes", valid_594430
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_594431 = formData.getOrDefault("CacheClusterId")
  valid_594431 = validateParameter(valid_594431, JString, required = true,
                                 default = nil)
  if valid_594431 != nil:
    section.add "CacheClusterId", valid_594431
  var valid_594432 = formData.getOrDefault("NotificationTopicStatus")
  valid_594432 = validateParameter(valid_594432, JString, required = false,
                                 default = nil)
  if valid_594432 != nil:
    section.add "NotificationTopicStatus", valid_594432
  var valid_594433 = formData.getOrDefault("NotificationTopicArn")
  valid_594433 = validateParameter(valid_594433, JString, required = false,
                                 default = nil)
  if valid_594433 != nil:
    section.add "NotificationTopicArn", valid_594433
  var valid_594434 = formData.getOrDefault("EngineVersion")
  valid_594434 = validateParameter(valid_594434, JString, required = false,
                                 default = nil)
  if valid_594434 != nil:
    section.add "EngineVersion", valid_594434
  var valid_594435 = formData.getOrDefault("AZMode")
  valid_594435 = validateParameter(valid_594435, JString, required = false,
                                 default = newJString("single-az"))
  if valid_594435 != nil:
    section.add "AZMode", valid_594435
  var valid_594436 = formData.getOrDefault("CacheParameterGroupName")
  valid_594436 = validateParameter(valid_594436, JString, required = false,
                                 default = nil)
  if valid_594436 != nil:
    section.add "CacheParameterGroupName", valid_594436
  var valid_594437 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_594437 = validateParameter(valid_594437, JBool, required = false, default = nil)
  if valid_594437 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594437
  var valid_594438 = formData.getOrDefault("ApplyImmediately")
  valid_594438 = validateParameter(valid_594438, JBool, required = false, default = nil)
  if valid_594438 != nil:
    section.add "ApplyImmediately", valid_594438
  var valid_594439 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_594439 = validateParameter(valid_594439, JArray, required = false,
                                 default = nil)
  if valid_594439 != nil:
    section.add "CacheNodeIdsToRemove", valid_594439
  var valid_594440 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_594440 = validateParameter(valid_594440, JArray, required = false,
                                 default = nil)
  if valid_594440 != nil:
    section.add "CacheSecurityGroupNames", valid_594440
  var valid_594441 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_594441 = validateParameter(valid_594441, JInt, required = false, default = nil)
  if valid_594441 != nil:
    section.add "SnapshotRetentionLimit", valid_594441
  var valid_594442 = formData.getOrDefault("SnapshotWindow")
  valid_594442 = validateParameter(valid_594442, JString, required = false,
                                 default = nil)
  if valid_594442 != nil:
    section.add "SnapshotWindow", valid_594442
  var valid_594443 = formData.getOrDefault("CacheNodeType")
  valid_594443 = validateParameter(valid_594443, JString, required = false,
                                 default = nil)
  if valid_594443 != nil:
    section.add "CacheNodeType", valid_594443
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594444: Call_PostModifyCacheCluster_594415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_594444.validator(path, query, header, formData, body)
  let scheme = call_594444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594444.url(scheme.get, call_594444.host, call_594444.base,
                         call_594444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594444, url, valid)

proc call*(call_594445: Call_PostModifyCacheCluster_594415; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; NewAvailabilityZones: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NumCacheNodes: int = 0;
          NotificationTopicStatus: string = ""; NotificationTopicArn: string = "";
          EngineVersion: string = ""; AZMode: string = "single-az";
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          CacheNodeIdsToRemove: JsonNode = nil;
          Action: string = "ModifyCacheCluster";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          Version: string = "2015-02-02"; SnapshotWindow: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   Action: string (required)
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  var query_594446 = newJObject()
  var formData_594447 = newJObject()
  if SecurityGroupIds != nil:
    formData_594447.add "SecurityGroupIds", SecurityGroupIds
  if NewAvailabilityZones != nil:
    formData_594447.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_594447, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_594447, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_594447, "CacheClusterId", newJString(CacheClusterId))
  add(formData_594447, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_594447, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_594447, "EngineVersion", newJString(EngineVersion))
  add(formData_594447, "AZMode", newJString(AZMode))
  add(formData_594447, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_594447, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_594447, "ApplyImmediately", newJBool(ApplyImmediately))
  if CacheNodeIdsToRemove != nil:
    formData_594447.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_594446, "Action", newJString(Action))
  if CacheSecurityGroupNames != nil:
    formData_594447.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_594447, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_594446, "Version", newJString(Version))
  add(formData_594447, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_594447, "CacheNodeType", newJString(CacheNodeType))
  result = call_594445.call(nil, query_594446, nil, formData_594447, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_594415(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_594416, base: "/",
    url: url_PostModifyCacheCluster_594417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_594383 = ref object of OpenApiRestCall_592364
proc url_GetModifyCacheCluster_594385(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheCluster_594384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_594386 = query.getOrDefault("NotificationTopicStatus")
  valid_594386 = validateParameter(valid_594386, JString, required = false,
                                 default = nil)
  if valid_594386 != nil:
    section.add "NotificationTopicStatus", valid_594386
  var valid_594387 = query.getOrDefault("CacheParameterGroupName")
  valid_594387 = validateParameter(valid_594387, JString, required = false,
                                 default = nil)
  if valid_594387 != nil:
    section.add "CacheParameterGroupName", valid_594387
  var valid_594388 = query.getOrDefault("NewAvailabilityZones")
  valid_594388 = validateParameter(valid_594388, JArray, required = false,
                                 default = nil)
  if valid_594388 != nil:
    section.add "NewAvailabilityZones", valid_594388
  var valid_594389 = query.getOrDefault("AZMode")
  valid_594389 = validateParameter(valid_594389, JString, required = false,
                                 default = newJString("single-az"))
  if valid_594389 != nil:
    section.add "AZMode", valid_594389
  var valid_594390 = query.getOrDefault("NumCacheNodes")
  valid_594390 = validateParameter(valid_594390, JInt, required = false, default = nil)
  if valid_594390 != nil:
    section.add "NumCacheNodes", valid_594390
  var valid_594391 = query.getOrDefault("SnapshotRetentionLimit")
  valid_594391 = validateParameter(valid_594391, JInt, required = false, default = nil)
  if valid_594391 != nil:
    section.add "SnapshotRetentionLimit", valid_594391
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_594392 = query.getOrDefault("CacheClusterId")
  valid_594392 = validateParameter(valid_594392, JString, required = true,
                                 default = nil)
  if valid_594392 != nil:
    section.add "CacheClusterId", valid_594392
  var valid_594393 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_594393 = validateParameter(valid_594393, JArray, required = false,
                                 default = nil)
  if valid_594393 != nil:
    section.add "CacheNodeIdsToRemove", valid_594393
  var valid_594394 = query.getOrDefault("CacheSecurityGroupNames")
  valid_594394 = validateParameter(valid_594394, JArray, required = false,
                                 default = nil)
  if valid_594394 != nil:
    section.add "CacheSecurityGroupNames", valid_594394
  var valid_594395 = query.getOrDefault("CacheNodeType")
  valid_594395 = validateParameter(valid_594395, JString, required = false,
                                 default = nil)
  if valid_594395 != nil:
    section.add "CacheNodeType", valid_594395
  var valid_594396 = query.getOrDefault("EngineVersion")
  valid_594396 = validateParameter(valid_594396, JString, required = false,
                                 default = nil)
  if valid_594396 != nil:
    section.add "EngineVersion", valid_594396
  var valid_594397 = query.getOrDefault("Action")
  valid_594397 = validateParameter(valid_594397, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_594397 != nil:
    section.add "Action", valid_594397
  var valid_594398 = query.getOrDefault("ApplyImmediately")
  valid_594398 = validateParameter(valid_594398, JBool, required = false, default = nil)
  if valid_594398 != nil:
    section.add "ApplyImmediately", valid_594398
  var valid_594399 = query.getOrDefault("NotificationTopicArn")
  valid_594399 = validateParameter(valid_594399, JString, required = false,
                                 default = nil)
  if valid_594399 != nil:
    section.add "NotificationTopicArn", valid_594399
  var valid_594400 = query.getOrDefault("Version")
  valid_594400 = validateParameter(valid_594400, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594400 != nil:
    section.add "Version", valid_594400
  var valid_594401 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_594401 = validateParameter(valid_594401, JString, required = false,
                                 default = nil)
  if valid_594401 != nil:
    section.add "PreferredMaintenanceWindow", valid_594401
  var valid_594402 = query.getOrDefault("SnapshotWindow")
  valid_594402 = validateParameter(valid_594402, JString, required = false,
                                 default = nil)
  if valid_594402 != nil:
    section.add "SnapshotWindow", valid_594402
  var valid_594403 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_594403 = validateParameter(valid_594403, JBool, required = false, default = nil)
  if valid_594403 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594403
  var valid_594404 = query.getOrDefault("SecurityGroupIds")
  valid_594404 = validateParameter(valid_594404, JArray, required = false,
                                 default = nil)
  if valid_594404 != nil:
    section.add "SecurityGroupIds", valid_594404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594405 = header.getOrDefault("X-Amz-Signature")
  valid_594405 = validateParameter(valid_594405, JString, required = false,
                                 default = nil)
  if valid_594405 != nil:
    section.add "X-Amz-Signature", valid_594405
  var valid_594406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594406 = validateParameter(valid_594406, JString, required = false,
                                 default = nil)
  if valid_594406 != nil:
    section.add "X-Amz-Content-Sha256", valid_594406
  var valid_594407 = header.getOrDefault("X-Amz-Date")
  valid_594407 = validateParameter(valid_594407, JString, required = false,
                                 default = nil)
  if valid_594407 != nil:
    section.add "X-Amz-Date", valid_594407
  var valid_594408 = header.getOrDefault("X-Amz-Credential")
  valid_594408 = validateParameter(valid_594408, JString, required = false,
                                 default = nil)
  if valid_594408 != nil:
    section.add "X-Amz-Credential", valid_594408
  var valid_594409 = header.getOrDefault("X-Amz-Security-Token")
  valid_594409 = validateParameter(valid_594409, JString, required = false,
                                 default = nil)
  if valid_594409 != nil:
    section.add "X-Amz-Security-Token", valid_594409
  var valid_594410 = header.getOrDefault("X-Amz-Algorithm")
  valid_594410 = validateParameter(valid_594410, JString, required = false,
                                 default = nil)
  if valid_594410 != nil:
    section.add "X-Amz-Algorithm", valid_594410
  var valid_594411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594411 = validateParameter(valid_594411, JString, required = false,
                                 default = nil)
  if valid_594411 != nil:
    section.add "X-Amz-SignedHeaders", valid_594411
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594412: Call_GetModifyCacheCluster_594383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_594412.validator(path, query, header, formData, body)
  let scheme = call_594412.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594412.url(scheme.get, call_594412.host, call_594412.base,
                         call_594412.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594412, url, valid)

proc call*(call_594413: Call_GetModifyCacheCluster_594383; CacheClusterId: string;
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          NumCacheNodes: int = 0; SnapshotRetentionLimit: int = 0;
          CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "ModifyCacheCluster";
          ApplyImmediately: bool = false; NotificationTopicArn: string = "";
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_594414 = newJObject()
  add(query_594414, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_594414, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    query_594414.add "NewAvailabilityZones", NewAvailabilityZones
  add(query_594414, "AZMode", newJString(AZMode))
  add(query_594414, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_594414, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_594414, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToRemove != nil:
    query_594414.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    query_594414.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_594414, "CacheNodeType", newJString(CacheNodeType))
  add(query_594414, "EngineVersion", newJString(EngineVersion))
  add(query_594414, "Action", newJString(Action))
  add(query_594414, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594414, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_594414, "Version", newJString(Version))
  add(query_594414, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_594414, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_594414, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_594414.add "SecurityGroupIds", SecurityGroupIds
  result = call_594413.call(nil, query_594414, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_594383(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_594384, base: "/",
    url: url_GetModifyCacheCluster_594385, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_594465 = ref object of OpenApiRestCall_592364
proc url_PostModifyCacheParameterGroup_594467(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheParameterGroup_594466(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594468 = query.getOrDefault("Action")
  valid_594468 = validateParameter(valid_594468, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_594468 != nil:
    section.add "Action", valid_594468
  var valid_594469 = query.getOrDefault("Version")
  valid_594469 = validateParameter(valid_594469, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594469 != nil:
    section.add "Version", valid_594469
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594470 = header.getOrDefault("X-Amz-Signature")
  valid_594470 = validateParameter(valid_594470, JString, required = false,
                                 default = nil)
  if valid_594470 != nil:
    section.add "X-Amz-Signature", valid_594470
  var valid_594471 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594471 = validateParameter(valid_594471, JString, required = false,
                                 default = nil)
  if valid_594471 != nil:
    section.add "X-Amz-Content-Sha256", valid_594471
  var valid_594472 = header.getOrDefault("X-Amz-Date")
  valid_594472 = validateParameter(valid_594472, JString, required = false,
                                 default = nil)
  if valid_594472 != nil:
    section.add "X-Amz-Date", valid_594472
  var valid_594473 = header.getOrDefault("X-Amz-Credential")
  valid_594473 = validateParameter(valid_594473, JString, required = false,
                                 default = nil)
  if valid_594473 != nil:
    section.add "X-Amz-Credential", valid_594473
  var valid_594474 = header.getOrDefault("X-Amz-Security-Token")
  valid_594474 = validateParameter(valid_594474, JString, required = false,
                                 default = nil)
  if valid_594474 != nil:
    section.add "X-Amz-Security-Token", valid_594474
  var valid_594475 = header.getOrDefault("X-Amz-Algorithm")
  valid_594475 = validateParameter(valid_594475, JString, required = false,
                                 default = nil)
  if valid_594475 != nil:
    section.add "X-Amz-Algorithm", valid_594475
  var valid_594476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594476 = validateParameter(valid_594476, JString, required = false,
                                 default = nil)
  if valid_594476 != nil:
    section.add "X-Amz-SignedHeaders", valid_594476
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_594477 = formData.getOrDefault("CacheParameterGroupName")
  valid_594477 = validateParameter(valid_594477, JString, required = true,
                                 default = nil)
  if valid_594477 != nil:
    section.add "CacheParameterGroupName", valid_594477
  var valid_594478 = formData.getOrDefault("ParameterNameValues")
  valid_594478 = validateParameter(valid_594478, JArray, required = true, default = nil)
  if valid_594478 != nil:
    section.add "ParameterNameValues", valid_594478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594479: Call_PostModifyCacheParameterGroup_594465; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_594479.validator(path, query, header, formData, body)
  let scheme = call_594479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594479.url(scheme.get, call_594479.host, call_594479.base,
                         call_594479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594479, url, valid)

proc call*(call_594480: Call_PostModifyCacheParameterGroup_594465;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  var query_594481 = newJObject()
  var formData_594482 = newJObject()
  add(formData_594482, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_594481, "Action", newJString(Action))
  add(query_594481, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_594482.add "ParameterNameValues", ParameterNameValues
  result = call_594480.call(nil, query_594481, nil, formData_594482, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_594465(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_594466, base: "/",
    url: url_PostModifyCacheParameterGroup_594467,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_594448 = ref object of OpenApiRestCall_592364
proc url_GetModifyCacheParameterGroup_594450(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheParameterGroup_594449(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_594451 = query.getOrDefault("CacheParameterGroupName")
  valid_594451 = validateParameter(valid_594451, JString, required = true,
                                 default = nil)
  if valid_594451 != nil:
    section.add "CacheParameterGroupName", valid_594451
  var valid_594452 = query.getOrDefault("ParameterNameValues")
  valid_594452 = validateParameter(valid_594452, JArray, required = true, default = nil)
  if valid_594452 != nil:
    section.add "ParameterNameValues", valid_594452
  var valid_594453 = query.getOrDefault("Action")
  valid_594453 = validateParameter(valid_594453, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_594453 != nil:
    section.add "Action", valid_594453
  var valid_594454 = query.getOrDefault("Version")
  valid_594454 = validateParameter(valid_594454, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594454 != nil:
    section.add "Version", valid_594454
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594455 = header.getOrDefault("X-Amz-Signature")
  valid_594455 = validateParameter(valid_594455, JString, required = false,
                                 default = nil)
  if valid_594455 != nil:
    section.add "X-Amz-Signature", valid_594455
  var valid_594456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594456 = validateParameter(valid_594456, JString, required = false,
                                 default = nil)
  if valid_594456 != nil:
    section.add "X-Amz-Content-Sha256", valid_594456
  var valid_594457 = header.getOrDefault("X-Amz-Date")
  valid_594457 = validateParameter(valid_594457, JString, required = false,
                                 default = nil)
  if valid_594457 != nil:
    section.add "X-Amz-Date", valid_594457
  var valid_594458 = header.getOrDefault("X-Amz-Credential")
  valid_594458 = validateParameter(valid_594458, JString, required = false,
                                 default = nil)
  if valid_594458 != nil:
    section.add "X-Amz-Credential", valid_594458
  var valid_594459 = header.getOrDefault("X-Amz-Security-Token")
  valid_594459 = validateParameter(valid_594459, JString, required = false,
                                 default = nil)
  if valid_594459 != nil:
    section.add "X-Amz-Security-Token", valid_594459
  var valid_594460 = header.getOrDefault("X-Amz-Algorithm")
  valid_594460 = validateParameter(valid_594460, JString, required = false,
                                 default = nil)
  if valid_594460 != nil:
    section.add "X-Amz-Algorithm", valid_594460
  var valid_594461 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594461 = validateParameter(valid_594461, JString, required = false,
                                 default = nil)
  if valid_594461 != nil:
    section.add "X-Amz-SignedHeaders", valid_594461
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594462: Call_GetModifyCacheParameterGroup_594448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_594462.validator(path, query, header, formData, body)
  let scheme = call_594462.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594462.url(scheme.get, call_594462.host, call_594462.base,
                         call_594462.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594462, url, valid)

proc call*(call_594463: Call_GetModifyCacheParameterGroup_594448;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594464 = newJObject()
  add(query_594464, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    query_594464.add "ParameterNameValues", ParameterNameValues
  add(query_594464, "Action", newJString(Action))
  add(query_594464, "Version", newJString(Version))
  result = call_594463.call(nil, query_594464, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_594448(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_594449, base: "/",
    url: url_GetModifyCacheParameterGroup_594450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_594501 = ref object of OpenApiRestCall_592364
proc url_PostModifyCacheSubnetGroup_594503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyCacheSubnetGroup_594502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594504 = query.getOrDefault("Action")
  valid_594504 = validateParameter(valid_594504, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_594504 != nil:
    section.add "Action", valid_594504
  var valid_594505 = query.getOrDefault("Version")
  valid_594505 = validateParameter(valid_594505, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594505 != nil:
    section.add "Version", valid_594505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594506 = header.getOrDefault("X-Amz-Signature")
  valid_594506 = validateParameter(valid_594506, JString, required = false,
                                 default = nil)
  if valid_594506 != nil:
    section.add "X-Amz-Signature", valid_594506
  var valid_594507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594507 = validateParameter(valid_594507, JString, required = false,
                                 default = nil)
  if valid_594507 != nil:
    section.add "X-Amz-Content-Sha256", valid_594507
  var valid_594508 = header.getOrDefault("X-Amz-Date")
  valid_594508 = validateParameter(valid_594508, JString, required = false,
                                 default = nil)
  if valid_594508 != nil:
    section.add "X-Amz-Date", valid_594508
  var valid_594509 = header.getOrDefault("X-Amz-Credential")
  valid_594509 = validateParameter(valid_594509, JString, required = false,
                                 default = nil)
  if valid_594509 != nil:
    section.add "X-Amz-Credential", valid_594509
  var valid_594510 = header.getOrDefault("X-Amz-Security-Token")
  valid_594510 = validateParameter(valid_594510, JString, required = false,
                                 default = nil)
  if valid_594510 != nil:
    section.add "X-Amz-Security-Token", valid_594510
  var valid_594511 = header.getOrDefault("X-Amz-Algorithm")
  valid_594511 = validateParameter(valid_594511, JString, required = false,
                                 default = nil)
  if valid_594511 != nil:
    section.add "X-Amz-Algorithm", valid_594511
  var valid_594512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594512 = validateParameter(valid_594512, JString, required = false,
                                 default = nil)
  if valid_594512 != nil:
    section.add "X-Amz-SignedHeaders", valid_594512
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  section = newJObject()
  var valid_594513 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_594513 = validateParameter(valid_594513, JString, required = false,
                                 default = nil)
  if valid_594513 != nil:
    section.add "CacheSubnetGroupDescription", valid_594513
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_594514 = formData.getOrDefault("CacheSubnetGroupName")
  valid_594514 = validateParameter(valid_594514, JString, required = true,
                                 default = nil)
  if valid_594514 != nil:
    section.add "CacheSubnetGroupName", valid_594514
  var valid_594515 = formData.getOrDefault("SubnetIds")
  valid_594515 = validateParameter(valid_594515, JArray, required = false,
                                 default = nil)
  if valid_594515 != nil:
    section.add "SubnetIds", valid_594515
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594516: Call_PostModifyCacheSubnetGroup_594501; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_594516.validator(path, query, header, formData, body)
  let scheme = call_594516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594516.url(scheme.get, call_594516.host, call_594516.base,
                         call_594516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594516, url, valid)

proc call*(call_594517: Call_PostModifyCacheSubnetGroup_594501;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; Version: string = "2015-02-02";
          SubnetIds: JsonNode = nil): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  var query_594518 = newJObject()
  var formData_594519 = newJObject()
  add(formData_594519, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_594519, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_594518, "Action", newJString(Action))
  add(query_594518, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_594519.add "SubnetIds", SubnetIds
  result = call_594517.call(nil, query_594518, nil, formData_594519, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_594501(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_594502, base: "/",
    url: url_PostModifyCacheSubnetGroup_594503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_594483 = ref object of OpenApiRestCall_592364
proc url_GetModifyCacheSubnetGroup_594485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyCacheSubnetGroup_594484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_594486 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_594486 = validateParameter(valid_594486, JString, required = false,
                                 default = nil)
  if valid_594486 != nil:
    section.add "CacheSubnetGroupDescription", valid_594486
  var valid_594487 = query.getOrDefault("SubnetIds")
  valid_594487 = validateParameter(valid_594487, JArray, required = false,
                                 default = nil)
  if valid_594487 != nil:
    section.add "SubnetIds", valid_594487
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594488 = query.getOrDefault("Action")
  valid_594488 = validateParameter(valid_594488, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_594488 != nil:
    section.add "Action", valid_594488
  var valid_594489 = query.getOrDefault("CacheSubnetGroupName")
  valid_594489 = validateParameter(valid_594489, JString, required = true,
                                 default = nil)
  if valid_594489 != nil:
    section.add "CacheSubnetGroupName", valid_594489
  var valid_594490 = query.getOrDefault("Version")
  valid_594490 = validateParameter(valid_594490, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594490 != nil:
    section.add "Version", valid_594490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594491 = header.getOrDefault("X-Amz-Signature")
  valid_594491 = validateParameter(valid_594491, JString, required = false,
                                 default = nil)
  if valid_594491 != nil:
    section.add "X-Amz-Signature", valid_594491
  var valid_594492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594492 = validateParameter(valid_594492, JString, required = false,
                                 default = nil)
  if valid_594492 != nil:
    section.add "X-Amz-Content-Sha256", valid_594492
  var valid_594493 = header.getOrDefault("X-Amz-Date")
  valid_594493 = validateParameter(valid_594493, JString, required = false,
                                 default = nil)
  if valid_594493 != nil:
    section.add "X-Amz-Date", valid_594493
  var valid_594494 = header.getOrDefault("X-Amz-Credential")
  valid_594494 = validateParameter(valid_594494, JString, required = false,
                                 default = nil)
  if valid_594494 != nil:
    section.add "X-Amz-Credential", valid_594494
  var valid_594495 = header.getOrDefault("X-Amz-Security-Token")
  valid_594495 = validateParameter(valid_594495, JString, required = false,
                                 default = nil)
  if valid_594495 != nil:
    section.add "X-Amz-Security-Token", valid_594495
  var valid_594496 = header.getOrDefault("X-Amz-Algorithm")
  valid_594496 = validateParameter(valid_594496, JString, required = false,
                                 default = nil)
  if valid_594496 != nil:
    section.add "X-Amz-Algorithm", valid_594496
  var valid_594497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594497 = validateParameter(valid_594497, JString, required = false,
                                 default = nil)
  if valid_594497 != nil:
    section.add "X-Amz-SignedHeaders", valid_594497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594498: Call_GetModifyCacheSubnetGroup_594483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_594498.validator(path, query, header, formData, body)
  let scheme = call_594498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594498.url(scheme.get, call_594498.host, call_594498.base,
                         call_594498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594498, url, valid)

proc call*(call_594499: Call_GetModifyCacheSubnetGroup_594483;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_594500 = newJObject()
  add(query_594500, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_594500.add "SubnetIds", SubnetIds
  add(query_594500, "Action", newJString(Action))
  add(query_594500, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_594500, "Version", newJString(Version))
  result = call_594499.call(nil, query_594500, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_594483(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_594484, base: "/",
    url: url_GetModifyCacheSubnetGroup_594485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_594553 = ref object of OpenApiRestCall_592364
proc url_PostModifyReplicationGroup_594555(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroup_594554(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594556 = query.getOrDefault("Action")
  valid_594556 = validateParameter(valid_594556, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_594556 != nil:
    section.add "Action", valid_594556
  var valid_594557 = query.getOrDefault("Version")
  valid_594557 = validateParameter(valid_594557, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594557 != nil:
    section.add "Version", valid_594557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594558 = header.getOrDefault("X-Amz-Signature")
  valid_594558 = validateParameter(valid_594558, JString, required = false,
                                 default = nil)
  if valid_594558 != nil:
    section.add "X-Amz-Signature", valid_594558
  var valid_594559 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594559 = validateParameter(valid_594559, JString, required = false,
                                 default = nil)
  if valid_594559 != nil:
    section.add "X-Amz-Content-Sha256", valid_594559
  var valid_594560 = header.getOrDefault("X-Amz-Date")
  valid_594560 = validateParameter(valid_594560, JString, required = false,
                                 default = nil)
  if valid_594560 != nil:
    section.add "X-Amz-Date", valid_594560
  var valid_594561 = header.getOrDefault("X-Amz-Credential")
  valid_594561 = validateParameter(valid_594561, JString, required = false,
                                 default = nil)
  if valid_594561 != nil:
    section.add "X-Amz-Credential", valid_594561
  var valid_594562 = header.getOrDefault("X-Amz-Security-Token")
  valid_594562 = validateParameter(valid_594562, JString, required = false,
                                 default = nil)
  if valid_594562 != nil:
    section.add "X-Amz-Security-Token", valid_594562
  var valid_594563 = header.getOrDefault("X-Amz-Algorithm")
  valid_594563 = validateParameter(valid_594563, JString, required = false,
                                 default = nil)
  if valid_594563 != nil:
    section.add "X-Amz-Algorithm", valid_594563
  var valid_594564 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594564 = validateParameter(valid_594564, JString, required = false,
                                 default = nil)
  if valid_594564 != nil:
    section.add "X-Amz-SignedHeaders", valid_594564
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  section = newJObject()
  var valid_594565 = formData.getOrDefault("SecurityGroupIds")
  valid_594565 = validateParameter(valid_594565, JArray, required = false,
                                 default = nil)
  if valid_594565 != nil:
    section.add "SecurityGroupIds", valid_594565
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_594566 = formData.getOrDefault("ReplicationGroupId")
  valid_594566 = validateParameter(valid_594566, JString, required = true,
                                 default = nil)
  if valid_594566 != nil:
    section.add "ReplicationGroupId", valid_594566
  var valid_594567 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_594567 = validateParameter(valid_594567, JString, required = false,
                                 default = nil)
  if valid_594567 != nil:
    section.add "PreferredMaintenanceWindow", valid_594567
  var valid_594568 = formData.getOrDefault("NodeGroupId")
  valid_594568 = validateParameter(valid_594568, JString, required = false,
                                 default = nil)
  if valid_594568 != nil:
    section.add "NodeGroupId", valid_594568
  var valid_594569 = formData.getOrDefault("PrimaryClusterId")
  valid_594569 = validateParameter(valid_594569, JString, required = false,
                                 default = nil)
  if valid_594569 != nil:
    section.add "PrimaryClusterId", valid_594569
  var valid_594570 = formData.getOrDefault("NotificationTopicStatus")
  valid_594570 = validateParameter(valid_594570, JString, required = false,
                                 default = nil)
  if valid_594570 != nil:
    section.add "NotificationTopicStatus", valid_594570
  var valid_594571 = formData.getOrDefault("NotificationTopicArn")
  valid_594571 = validateParameter(valid_594571, JString, required = false,
                                 default = nil)
  if valid_594571 != nil:
    section.add "NotificationTopicArn", valid_594571
  var valid_594572 = formData.getOrDefault("EngineVersion")
  valid_594572 = validateParameter(valid_594572, JString, required = false,
                                 default = nil)
  if valid_594572 != nil:
    section.add "EngineVersion", valid_594572
  var valid_594573 = formData.getOrDefault("SnapshottingClusterId")
  valid_594573 = validateParameter(valid_594573, JString, required = false,
                                 default = nil)
  if valid_594573 != nil:
    section.add "SnapshottingClusterId", valid_594573
  var valid_594574 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_594574 = validateParameter(valid_594574, JBool, required = false, default = nil)
  if valid_594574 != nil:
    section.add "AutomaticFailoverEnabled", valid_594574
  var valid_594575 = formData.getOrDefault("CacheParameterGroupName")
  valid_594575 = validateParameter(valid_594575, JString, required = false,
                                 default = nil)
  if valid_594575 != nil:
    section.add "CacheParameterGroupName", valid_594575
  var valid_594576 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_594576 = validateParameter(valid_594576, JBool, required = false, default = nil)
  if valid_594576 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594576
  var valid_594577 = formData.getOrDefault("ApplyImmediately")
  valid_594577 = validateParameter(valid_594577, JBool, required = false, default = nil)
  if valid_594577 != nil:
    section.add "ApplyImmediately", valid_594577
  var valid_594578 = formData.getOrDefault("ReplicationGroupDescription")
  valid_594578 = validateParameter(valid_594578, JString, required = false,
                                 default = nil)
  if valid_594578 != nil:
    section.add "ReplicationGroupDescription", valid_594578
  var valid_594579 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_594579 = validateParameter(valid_594579, JArray, required = false,
                                 default = nil)
  if valid_594579 != nil:
    section.add "CacheSecurityGroupNames", valid_594579
  var valid_594580 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_594580 = validateParameter(valid_594580, JInt, required = false, default = nil)
  if valid_594580 != nil:
    section.add "SnapshotRetentionLimit", valid_594580
  var valid_594581 = formData.getOrDefault("SnapshotWindow")
  valid_594581 = validateParameter(valid_594581, JString, required = false,
                                 default = nil)
  if valid_594581 != nil:
    section.add "SnapshotWindow", valid_594581
  var valid_594582 = formData.getOrDefault("CacheNodeType")
  valid_594582 = validateParameter(valid_594582, JString, required = false,
                                 default = nil)
  if valid_594582 != nil:
    section.add "CacheNodeType", valid_594582
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594583: Call_PostModifyReplicationGroup_594553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_594583.validator(path, query, header, formData, body)
  let scheme = call_594583.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594583.url(scheme.get, call_594583.host, call_594583.base,
                         call_594583.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594583, url, valid)

proc call*(call_594584: Call_PostModifyReplicationGroup_594553;
          ReplicationGroupId: string; SecurityGroupIds: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NodeGroupId: string = "";
          PrimaryClusterId: string = ""; NotificationTopicStatus: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          SnapshottingClusterId: string = "";
          AutomaticFailoverEnabled: bool = false;
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          Action: string = "ModifyReplicationGroup";
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          Version: string = "2015-02-02"; SnapshotWindow: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  var query_594585 = newJObject()
  var formData_594586 = newJObject()
  if SecurityGroupIds != nil:
    formData_594586.add "SecurityGroupIds", SecurityGroupIds
  add(formData_594586, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_594586, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_594586, "NodeGroupId", newJString(NodeGroupId))
  add(formData_594586, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_594586, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_594586, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_594586, "EngineVersion", newJString(EngineVersion))
  add(formData_594586, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(formData_594586, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_594586, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_594586, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_594586, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594585, "Action", newJString(Action))
  add(formData_594586, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_594586.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_594586, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_594585, "Version", newJString(Version))
  add(formData_594586, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_594586, "CacheNodeType", newJString(CacheNodeType))
  result = call_594584.call(nil, query_594585, nil, formData_594586, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_594553(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_594554, base: "/",
    url: url_PostModifyReplicationGroup_594555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_594520 = ref object of OpenApiRestCall_592364
proc url_GetModifyReplicationGroup_594522(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroup_594521(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  section = newJObject()
  var valid_594523 = query.getOrDefault("ReplicationGroupDescription")
  valid_594523 = validateParameter(valid_594523, JString, required = false,
                                 default = nil)
  if valid_594523 != nil:
    section.add "ReplicationGroupDescription", valid_594523
  var valid_594524 = query.getOrDefault("NotificationTopicStatus")
  valid_594524 = validateParameter(valid_594524, JString, required = false,
                                 default = nil)
  if valid_594524 != nil:
    section.add "NotificationTopicStatus", valid_594524
  var valid_594525 = query.getOrDefault("CacheParameterGroupName")
  valid_594525 = validateParameter(valid_594525, JString, required = false,
                                 default = nil)
  if valid_594525 != nil:
    section.add "CacheParameterGroupName", valid_594525
  var valid_594526 = query.getOrDefault("SnapshotRetentionLimit")
  valid_594526 = validateParameter(valid_594526, JInt, required = false, default = nil)
  if valid_594526 != nil:
    section.add "SnapshotRetentionLimit", valid_594526
  var valid_594527 = query.getOrDefault("SnapshottingClusterId")
  valid_594527 = validateParameter(valid_594527, JString, required = false,
                                 default = nil)
  if valid_594527 != nil:
    section.add "SnapshottingClusterId", valid_594527
  var valid_594528 = query.getOrDefault("CacheSecurityGroupNames")
  valid_594528 = validateParameter(valid_594528, JArray, required = false,
                                 default = nil)
  if valid_594528 != nil:
    section.add "CacheSecurityGroupNames", valid_594528
  var valid_594529 = query.getOrDefault("PrimaryClusterId")
  valid_594529 = validateParameter(valid_594529, JString, required = false,
                                 default = nil)
  if valid_594529 != nil:
    section.add "PrimaryClusterId", valid_594529
  var valid_594530 = query.getOrDefault("CacheNodeType")
  valid_594530 = validateParameter(valid_594530, JString, required = false,
                                 default = nil)
  if valid_594530 != nil:
    section.add "CacheNodeType", valid_594530
  var valid_594531 = query.getOrDefault("EngineVersion")
  valid_594531 = validateParameter(valid_594531, JString, required = false,
                                 default = nil)
  if valid_594531 != nil:
    section.add "EngineVersion", valid_594531
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594532 = query.getOrDefault("Action")
  valid_594532 = validateParameter(valid_594532, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_594532 != nil:
    section.add "Action", valid_594532
  var valid_594533 = query.getOrDefault("ApplyImmediately")
  valid_594533 = validateParameter(valid_594533, JBool, required = false, default = nil)
  if valid_594533 != nil:
    section.add "ApplyImmediately", valid_594533
  var valid_594534 = query.getOrDefault("ReplicationGroupId")
  valid_594534 = validateParameter(valid_594534, JString, required = true,
                                 default = nil)
  if valid_594534 != nil:
    section.add "ReplicationGroupId", valid_594534
  var valid_594535 = query.getOrDefault("NotificationTopicArn")
  valid_594535 = validateParameter(valid_594535, JString, required = false,
                                 default = nil)
  if valid_594535 != nil:
    section.add "NotificationTopicArn", valid_594535
  var valid_594536 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_594536 = validateParameter(valid_594536, JBool, required = false, default = nil)
  if valid_594536 != nil:
    section.add "AutomaticFailoverEnabled", valid_594536
  var valid_594537 = query.getOrDefault("Version")
  valid_594537 = validateParameter(valid_594537, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594537 != nil:
    section.add "Version", valid_594537
  var valid_594538 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_594538 = validateParameter(valid_594538, JString, required = false,
                                 default = nil)
  if valid_594538 != nil:
    section.add "PreferredMaintenanceWindow", valid_594538
  var valid_594539 = query.getOrDefault("SnapshotWindow")
  valid_594539 = validateParameter(valid_594539, JString, required = false,
                                 default = nil)
  if valid_594539 != nil:
    section.add "SnapshotWindow", valid_594539
  var valid_594540 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_594540 = validateParameter(valid_594540, JBool, required = false, default = nil)
  if valid_594540 != nil:
    section.add "AutoMinorVersionUpgrade", valid_594540
  var valid_594541 = query.getOrDefault("SecurityGroupIds")
  valid_594541 = validateParameter(valid_594541, JArray, required = false,
                                 default = nil)
  if valid_594541 != nil:
    section.add "SecurityGroupIds", valid_594541
  var valid_594542 = query.getOrDefault("NodeGroupId")
  valid_594542 = validateParameter(valid_594542, JString, required = false,
                                 default = nil)
  if valid_594542 != nil:
    section.add "NodeGroupId", valid_594542
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594543 = header.getOrDefault("X-Amz-Signature")
  valid_594543 = validateParameter(valid_594543, JString, required = false,
                                 default = nil)
  if valid_594543 != nil:
    section.add "X-Amz-Signature", valid_594543
  var valid_594544 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594544 = validateParameter(valid_594544, JString, required = false,
                                 default = nil)
  if valid_594544 != nil:
    section.add "X-Amz-Content-Sha256", valid_594544
  var valid_594545 = header.getOrDefault("X-Amz-Date")
  valid_594545 = validateParameter(valid_594545, JString, required = false,
                                 default = nil)
  if valid_594545 != nil:
    section.add "X-Amz-Date", valid_594545
  var valid_594546 = header.getOrDefault("X-Amz-Credential")
  valid_594546 = validateParameter(valid_594546, JString, required = false,
                                 default = nil)
  if valid_594546 != nil:
    section.add "X-Amz-Credential", valid_594546
  var valid_594547 = header.getOrDefault("X-Amz-Security-Token")
  valid_594547 = validateParameter(valid_594547, JString, required = false,
                                 default = nil)
  if valid_594547 != nil:
    section.add "X-Amz-Security-Token", valid_594547
  var valid_594548 = header.getOrDefault("X-Amz-Algorithm")
  valid_594548 = validateParameter(valid_594548, JString, required = false,
                                 default = nil)
  if valid_594548 != nil:
    section.add "X-Amz-Algorithm", valid_594548
  var valid_594549 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594549 = validateParameter(valid_594549, JString, required = false,
                                 default = nil)
  if valid_594549 != nil:
    section.add "X-Amz-SignedHeaders", valid_594549
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594550: Call_GetModifyReplicationGroup_594520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_594550.validator(path, query, header, formData, body)
  let scheme = call_594550.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594550.url(scheme.get, call_594550.host, call_594550.base,
                         call_594550.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594550, url, valid)

proc call*(call_594551: Call_GetModifyReplicationGroup_594520;
          ReplicationGroupId: string; ReplicationGroupDescription: string = "";
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshottingClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          Action: string = "ModifyReplicationGroup"; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; AutomaticFailoverEnabled: bool = false;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; NodeGroupId: string = ""): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  var query_594552 = newJObject()
  add(query_594552, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_594552, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_594552, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_594552, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_594552, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  if CacheSecurityGroupNames != nil:
    query_594552.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_594552, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_594552, "CacheNodeType", newJString(CacheNodeType))
  add(query_594552, "EngineVersion", newJString(EngineVersion))
  add(query_594552, "Action", newJString(Action))
  add(query_594552, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594552, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_594552, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_594552, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_594552, "Version", newJString(Version))
  add(query_594552, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_594552, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_594552, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_594552.add "SecurityGroupIds", SecurityGroupIds
  add(query_594552, "NodeGroupId", newJString(NodeGroupId))
  result = call_594551.call(nil, query_594552, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_594520(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_594521, base: "/",
    url: url_GetModifyReplicationGroup_594522,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_594608 = ref object of OpenApiRestCall_592364
proc url_PostModifyReplicationGroupShardConfiguration_594610(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_594609(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594611 = query.getOrDefault("Action")
  valid_594611 = validateParameter(valid_594611, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_594611 != nil:
    section.add "Action", valid_594611
  var valid_594612 = query.getOrDefault("Version")
  valid_594612 = validateParameter(valid_594612, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594612 != nil:
    section.add "Version", valid_594612
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594613 = header.getOrDefault("X-Amz-Signature")
  valid_594613 = validateParameter(valid_594613, JString, required = false,
                                 default = nil)
  if valid_594613 != nil:
    section.add "X-Amz-Signature", valid_594613
  var valid_594614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594614 = validateParameter(valid_594614, JString, required = false,
                                 default = nil)
  if valid_594614 != nil:
    section.add "X-Amz-Content-Sha256", valid_594614
  var valid_594615 = header.getOrDefault("X-Amz-Date")
  valid_594615 = validateParameter(valid_594615, JString, required = false,
                                 default = nil)
  if valid_594615 != nil:
    section.add "X-Amz-Date", valid_594615
  var valid_594616 = header.getOrDefault("X-Amz-Credential")
  valid_594616 = validateParameter(valid_594616, JString, required = false,
                                 default = nil)
  if valid_594616 != nil:
    section.add "X-Amz-Credential", valid_594616
  var valid_594617 = header.getOrDefault("X-Amz-Security-Token")
  valid_594617 = validateParameter(valid_594617, JString, required = false,
                                 default = nil)
  if valid_594617 != nil:
    section.add "X-Amz-Security-Token", valid_594617
  var valid_594618 = header.getOrDefault("X-Amz-Algorithm")
  valid_594618 = validateParameter(valid_594618, JString, required = false,
                                 default = nil)
  if valid_594618 != nil:
    section.add "X-Amz-Algorithm", valid_594618
  var valid_594619 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594619 = validateParameter(valid_594619, JString, required = false,
                                 default = nil)
  if valid_594619 != nil:
    section.add "X-Amz-SignedHeaders", valid_594619
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  section = newJObject()
  var valid_594620 = formData.getOrDefault("NodeGroupsToRemove")
  valid_594620 = validateParameter(valid_594620, JArray, required = false,
                                 default = nil)
  if valid_594620 != nil:
    section.add "NodeGroupsToRemove", valid_594620
  var valid_594621 = formData.getOrDefault("NodeGroupsToRetain")
  valid_594621 = validateParameter(valid_594621, JArray, required = false,
                                 default = nil)
  if valid_594621 != nil:
    section.add "NodeGroupsToRetain", valid_594621
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupCount` field"
  var valid_594622 = formData.getOrDefault("NodeGroupCount")
  valid_594622 = validateParameter(valid_594622, JInt, required = true, default = nil)
  if valid_594622 != nil:
    section.add "NodeGroupCount", valid_594622
  var valid_594623 = formData.getOrDefault("ReshardingConfiguration")
  valid_594623 = validateParameter(valid_594623, JArray, required = false,
                                 default = nil)
  if valid_594623 != nil:
    section.add "ReshardingConfiguration", valid_594623
  var valid_594624 = formData.getOrDefault("ApplyImmediately")
  valid_594624 = validateParameter(valid_594624, JBool, required = true, default = nil)
  if valid_594624 != nil:
    section.add "ApplyImmediately", valid_594624
  var valid_594625 = formData.getOrDefault("ReplicationGroupId")
  valid_594625 = validateParameter(valid_594625, JString, required = true,
                                 default = nil)
  if valid_594625 != nil:
    section.add "ReplicationGroupId", valid_594625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594626: Call_PostModifyReplicationGroupShardConfiguration_594608;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_594626.validator(path, query, header, formData, body)
  let scheme = call_594626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594626.url(scheme.get, call_594626.host, call_594626.base,
                         call_594626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594626, url, valid)

proc call*(call_594627: Call_PostModifyReplicationGroupShardConfiguration_594608;
          NodeGroupCount: int; ApplyImmediately: bool; ReplicationGroupId: string;
          NodeGroupsToRemove: JsonNode = nil; NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  var query_594628 = newJObject()
  var formData_594629 = newJObject()
  if NodeGroupsToRemove != nil:
    formData_594629.add "NodeGroupsToRemove", NodeGroupsToRemove
  if NodeGroupsToRetain != nil:
    formData_594629.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(formData_594629, "NodeGroupCount", newJInt(NodeGroupCount))
  if ReshardingConfiguration != nil:
    formData_594629.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_594629, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594628, "Action", newJString(Action))
  add(query_594628, "Version", newJString(Version))
  add(formData_594629, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_594627.call(nil, query_594628, nil, formData_594629, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_594608(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_594609,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_594610,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_594587 = ref object of OpenApiRestCall_592364
proc url_GetModifyReplicationGroupShardConfiguration_594589(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_594588(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: JString (required)
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  section = newJObject()
  var valid_594590 = query.getOrDefault("ReshardingConfiguration")
  valid_594590 = validateParameter(valid_594590, JArray, required = false,
                                 default = nil)
  if valid_594590 != nil:
    section.add "ReshardingConfiguration", valid_594590
  var valid_594591 = query.getOrDefault("NodeGroupsToRemove")
  valid_594591 = validateParameter(valid_594591, JArray, required = false,
                                 default = nil)
  if valid_594591 != nil:
    section.add "NodeGroupsToRemove", valid_594591
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594592 = query.getOrDefault("Action")
  valid_594592 = validateParameter(valid_594592, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_594592 != nil:
    section.add "Action", valid_594592
  var valid_594593 = query.getOrDefault("ApplyImmediately")
  valid_594593 = validateParameter(valid_594593, JBool, required = true, default = nil)
  if valid_594593 != nil:
    section.add "ApplyImmediately", valid_594593
  var valid_594594 = query.getOrDefault("ReplicationGroupId")
  valid_594594 = validateParameter(valid_594594, JString, required = true,
                                 default = nil)
  if valid_594594 != nil:
    section.add "ReplicationGroupId", valid_594594
  var valid_594595 = query.getOrDefault("NodeGroupsToRetain")
  valid_594595 = validateParameter(valid_594595, JArray, required = false,
                                 default = nil)
  if valid_594595 != nil:
    section.add "NodeGroupsToRetain", valid_594595
  var valid_594596 = query.getOrDefault("Version")
  valid_594596 = validateParameter(valid_594596, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594596 != nil:
    section.add "Version", valid_594596
  var valid_594597 = query.getOrDefault("NodeGroupCount")
  valid_594597 = validateParameter(valid_594597, JInt, required = true, default = nil)
  if valid_594597 != nil:
    section.add "NodeGroupCount", valid_594597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594598 = header.getOrDefault("X-Amz-Signature")
  valid_594598 = validateParameter(valid_594598, JString, required = false,
                                 default = nil)
  if valid_594598 != nil:
    section.add "X-Amz-Signature", valid_594598
  var valid_594599 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594599 = validateParameter(valid_594599, JString, required = false,
                                 default = nil)
  if valid_594599 != nil:
    section.add "X-Amz-Content-Sha256", valid_594599
  var valid_594600 = header.getOrDefault("X-Amz-Date")
  valid_594600 = validateParameter(valid_594600, JString, required = false,
                                 default = nil)
  if valid_594600 != nil:
    section.add "X-Amz-Date", valid_594600
  var valid_594601 = header.getOrDefault("X-Amz-Credential")
  valid_594601 = validateParameter(valid_594601, JString, required = false,
                                 default = nil)
  if valid_594601 != nil:
    section.add "X-Amz-Credential", valid_594601
  var valid_594602 = header.getOrDefault("X-Amz-Security-Token")
  valid_594602 = validateParameter(valid_594602, JString, required = false,
                                 default = nil)
  if valid_594602 != nil:
    section.add "X-Amz-Security-Token", valid_594602
  var valid_594603 = header.getOrDefault("X-Amz-Algorithm")
  valid_594603 = validateParameter(valid_594603, JString, required = false,
                                 default = nil)
  if valid_594603 != nil:
    section.add "X-Amz-Algorithm", valid_594603
  var valid_594604 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594604 = validateParameter(valid_594604, JString, required = false,
                                 default = nil)
  if valid_594604 != nil:
    section.add "X-Amz-SignedHeaders", valid_594604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594605: Call_GetModifyReplicationGroupShardConfiguration_594587;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_594605.validator(path, query, header, formData, body)
  let scheme = call_594605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594605.url(scheme.get, call_594605.host, call_594605.base,
                         call_594605.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594605, url, valid)

proc call*(call_594606: Call_GetModifyReplicationGroupShardConfiguration_594587;
          ApplyImmediately: bool; ReplicationGroupId: string; NodeGroupCount: int;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRetain: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: string (required)
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  var query_594607 = newJObject()
  if ReshardingConfiguration != nil:
    query_594607.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_594607.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_594607, "Action", newJString(Action))
  add(query_594607, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_594607, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    query_594607.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_594607, "Version", newJString(Version))
  add(query_594607, "NodeGroupCount", newJInt(NodeGroupCount))
  result = call_594606.call(nil, query_594607, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_594587(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_594588,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_594589,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_594648 = ref object of OpenApiRestCall_592364
proc url_PostPurchaseReservedCacheNodesOffering_594650(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_594649(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594651 = query.getOrDefault("Action")
  valid_594651 = validateParameter(valid_594651, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_594651 != nil:
    section.add "Action", valid_594651
  var valid_594652 = query.getOrDefault("Version")
  valid_594652 = validateParameter(valid_594652, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594652 != nil:
    section.add "Version", valid_594652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594653 = header.getOrDefault("X-Amz-Signature")
  valid_594653 = validateParameter(valid_594653, JString, required = false,
                                 default = nil)
  if valid_594653 != nil:
    section.add "X-Amz-Signature", valid_594653
  var valid_594654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594654 = validateParameter(valid_594654, JString, required = false,
                                 default = nil)
  if valid_594654 != nil:
    section.add "X-Amz-Content-Sha256", valid_594654
  var valid_594655 = header.getOrDefault("X-Amz-Date")
  valid_594655 = validateParameter(valid_594655, JString, required = false,
                                 default = nil)
  if valid_594655 != nil:
    section.add "X-Amz-Date", valid_594655
  var valid_594656 = header.getOrDefault("X-Amz-Credential")
  valid_594656 = validateParameter(valid_594656, JString, required = false,
                                 default = nil)
  if valid_594656 != nil:
    section.add "X-Amz-Credential", valid_594656
  var valid_594657 = header.getOrDefault("X-Amz-Security-Token")
  valid_594657 = validateParameter(valid_594657, JString, required = false,
                                 default = nil)
  if valid_594657 != nil:
    section.add "X-Amz-Security-Token", valid_594657
  var valid_594658 = header.getOrDefault("X-Amz-Algorithm")
  valid_594658 = validateParameter(valid_594658, JString, required = false,
                                 default = nil)
  if valid_594658 != nil:
    section.add "X-Amz-Algorithm", valid_594658
  var valid_594659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594659 = validateParameter(valid_594659, JString, required = false,
                                 default = nil)
  if valid_594659 != nil:
    section.add "X-Amz-SignedHeaders", valid_594659
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  section = newJObject()
  var valid_594660 = formData.getOrDefault("CacheNodeCount")
  valid_594660 = validateParameter(valid_594660, JInt, required = false, default = nil)
  if valid_594660 != nil:
    section.add "CacheNodeCount", valid_594660
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_594661 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_594661 = validateParameter(valid_594661, JString, required = true,
                                 default = nil)
  if valid_594661 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_594661
  var valid_594662 = formData.getOrDefault("ReservedCacheNodeId")
  valid_594662 = validateParameter(valid_594662, JString, required = false,
                                 default = nil)
  if valid_594662 != nil:
    section.add "ReservedCacheNodeId", valid_594662
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594663: Call_PostPurchaseReservedCacheNodesOffering_594648;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_594663.validator(path, query, header, formData, body)
  let scheme = call_594663.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594663.url(scheme.get, call_594663.host, call_594663.base,
                         call_594663.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594663, url, valid)

proc call*(call_594664: Call_PostPurchaseReservedCacheNodesOffering_594648;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = ""): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  var query_594665 = newJObject()
  var formData_594666 = newJObject()
  add(formData_594666, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_594665, "Action", newJString(Action))
  add(query_594665, "Version", newJString(Version))
  add(formData_594666, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_594666, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  result = call_594664.call(nil, query_594665, nil, formData_594666, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_594648(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_594649, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_594650,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_594630 = ref object of OpenApiRestCall_592364
proc url_GetPurchaseReservedCacheNodesOffering_594632(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_594631(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: JString (required)
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_594633 = query.getOrDefault("CacheNodeCount")
  valid_594633 = validateParameter(valid_594633, JInt, required = false, default = nil)
  if valid_594633 != nil:
    section.add "CacheNodeCount", valid_594633
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594634 = query.getOrDefault("Action")
  valid_594634 = validateParameter(valid_594634, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_594634 != nil:
    section.add "Action", valid_594634
  var valid_594635 = query.getOrDefault("ReservedCacheNodeId")
  valid_594635 = validateParameter(valid_594635, JString, required = false,
                                 default = nil)
  if valid_594635 != nil:
    section.add "ReservedCacheNodeId", valid_594635
  var valid_594636 = query.getOrDefault("Version")
  valid_594636 = validateParameter(valid_594636, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594636 != nil:
    section.add "Version", valid_594636
  var valid_594637 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_594637 = validateParameter(valid_594637, JString, required = true,
                                 default = nil)
  if valid_594637 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_594637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594638 = header.getOrDefault("X-Amz-Signature")
  valid_594638 = validateParameter(valid_594638, JString, required = false,
                                 default = nil)
  if valid_594638 != nil:
    section.add "X-Amz-Signature", valid_594638
  var valid_594639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594639 = validateParameter(valid_594639, JString, required = false,
                                 default = nil)
  if valid_594639 != nil:
    section.add "X-Amz-Content-Sha256", valid_594639
  var valid_594640 = header.getOrDefault("X-Amz-Date")
  valid_594640 = validateParameter(valid_594640, JString, required = false,
                                 default = nil)
  if valid_594640 != nil:
    section.add "X-Amz-Date", valid_594640
  var valid_594641 = header.getOrDefault("X-Amz-Credential")
  valid_594641 = validateParameter(valid_594641, JString, required = false,
                                 default = nil)
  if valid_594641 != nil:
    section.add "X-Amz-Credential", valid_594641
  var valid_594642 = header.getOrDefault("X-Amz-Security-Token")
  valid_594642 = validateParameter(valid_594642, JString, required = false,
                                 default = nil)
  if valid_594642 != nil:
    section.add "X-Amz-Security-Token", valid_594642
  var valid_594643 = header.getOrDefault("X-Amz-Algorithm")
  valid_594643 = validateParameter(valid_594643, JString, required = false,
                                 default = nil)
  if valid_594643 != nil:
    section.add "X-Amz-Algorithm", valid_594643
  var valid_594644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594644 = validateParameter(valid_594644, JString, required = false,
                                 default = nil)
  if valid_594644 != nil:
    section.add "X-Amz-SignedHeaders", valid_594644
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594645: Call_GetPurchaseReservedCacheNodesOffering_594630;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_594645.validator(path, query, header, formData, body)
  let scheme = call_594645.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594645.url(scheme.get, call_594645.host, call_594645.base,
                         call_594645.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594645, url, valid)

proc call*(call_594646: Call_GetPurchaseReservedCacheNodesOffering_594630;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_594647 = newJObject()
  add(query_594647, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_594647, "Action", newJString(Action))
  add(query_594647, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_594647, "Version", newJString(Version))
  add(query_594647, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_594646.call(nil, query_594647, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_594630(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_594631, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_594632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_594684 = ref object of OpenApiRestCall_592364
proc url_PostRebootCacheCluster_594686(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootCacheCluster_594685(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594687 = query.getOrDefault("Action")
  valid_594687 = validateParameter(valid_594687, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_594687 != nil:
    section.add "Action", valid_594687
  var valid_594688 = query.getOrDefault("Version")
  valid_594688 = validateParameter(valid_594688, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594688 != nil:
    section.add "Version", valid_594688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594689 = header.getOrDefault("X-Amz-Signature")
  valid_594689 = validateParameter(valid_594689, JString, required = false,
                                 default = nil)
  if valid_594689 != nil:
    section.add "X-Amz-Signature", valid_594689
  var valid_594690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594690 = validateParameter(valid_594690, JString, required = false,
                                 default = nil)
  if valid_594690 != nil:
    section.add "X-Amz-Content-Sha256", valid_594690
  var valid_594691 = header.getOrDefault("X-Amz-Date")
  valid_594691 = validateParameter(valid_594691, JString, required = false,
                                 default = nil)
  if valid_594691 != nil:
    section.add "X-Amz-Date", valid_594691
  var valid_594692 = header.getOrDefault("X-Amz-Credential")
  valid_594692 = validateParameter(valid_594692, JString, required = false,
                                 default = nil)
  if valid_594692 != nil:
    section.add "X-Amz-Credential", valid_594692
  var valid_594693 = header.getOrDefault("X-Amz-Security-Token")
  valid_594693 = validateParameter(valid_594693, JString, required = false,
                                 default = nil)
  if valid_594693 != nil:
    section.add "X-Amz-Security-Token", valid_594693
  var valid_594694 = header.getOrDefault("X-Amz-Algorithm")
  valid_594694 = validateParameter(valid_594694, JString, required = false,
                                 default = nil)
  if valid_594694 != nil:
    section.add "X-Amz-Algorithm", valid_594694
  var valid_594695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594695 = validateParameter(valid_594695, JString, required = false,
                                 default = nil)
  if valid_594695 != nil:
    section.add "X-Amz-SignedHeaders", valid_594695
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_594696 = formData.getOrDefault("CacheClusterId")
  valid_594696 = validateParameter(valid_594696, JString, required = true,
                                 default = nil)
  if valid_594696 != nil:
    section.add "CacheClusterId", valid_594696
  var valid_594697 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_594697 = validateParameter(valid_594697, JArray, required = true, default = nil)
  if valid_594697 != nil:
    section.add "CacheNodeIdsToReboot", valid_594697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594698: Call_PostRebootCacheCluster_594684; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_594698.validator(path, query, header, formData, body)
  let scheme = call_594698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594698.url(scheme.get, call_594698.host, call_594698.base,
                         call_594698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594698, url, valid)

proc call*(call_594699: Call_PostRebootCacheCluster_594684; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  var query_594700 = newJObject()
  var formData_594701 = newJObject()
  add(formData_594701, "CacheClusterId", newJString(CacheClusterId))
  add(query_594700, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_594701.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_594700, "Version", newJString(Version))
  result = call_594699.call(nil, query_594700, nil, formData_594701, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_594684(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_594685, base: "/",
    url: url_PostRebootCacheCluster_594686, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_594667 = ref object of OpenApiRestCall_592364
proc url_GetRebootCacheCluster_594669(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootCacheCluster_594668(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_594670 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_594670 = validateParameter(valid_594670, JArray, required = true, default = nil)
  if valid_594670 != nil:
    section.add "CacheNodeIdsToReboot", valid_594670
  var valid_594671 = query.getOrDefault("CacheClusterId")
  valid_594671 = validateParameter(valid_594671, JString, required = true,
                                 default = nil)
  if valid_594671 != nil:
    section.add "CacheClusterId", valid_594671
  var valid_594672 = query.getOrDefault("Action")
  valid_594672 = validateParameter(valid_594672, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_594672 != nil:
    section.add "Action", valid_594672
  var valid_594673 = query.getOrDefault("Version")
  valid_594673 = validateParameter(valid_594673, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594673 != nil:
    section.add "Version", valid_594673
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594674 = header.getOrDefault("X-Amz-Signature")
  valid_594674 = validateParameter(valid_594674, JString, required = false,
                                 default = nil)
  if valid_594674 != nil:
    section.add "X-Amz-Signature", valid_594674
  var valid_594675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594675 = validateParameter(valid_594675, JString, required = false,
                                 default = nil)
  if valid_594675 != nil:
    section.add "X-Amz-Content-Sha256", valid_594675
  var valid_594676 = header.getOrDefault("X-Amz-Date")
  valid_594676 = validateParameter(valid_594676, JString, required = false,
                                 default = nil)
  if valid_594676 != nil:
    section.add "X-Amz-Date", valid_594676
  var valid_594677 = header.getOrDefault("X-Amz-Credential")
  valid_594677 = validateParameter(valid_594677, JString, required = false,
                                 default = nil)
  if valid_594677 != nil:
    section.add "X-Amz-Credential", valid_594677
  var valid_594678 = header.getOrDefault("X-Amz-Security-Token")
  valid_594678 = validateParameter(valid_594678, JString, required = false,
                                 default = nil)
  if valid_594678 != nil:
    section.add "X-Amz-Security-Token", valid_594678
  var valid_594679 = header.getOrDefault("X-Amz-Algorithm")
  valid_594679 = validateParameter(valid_594679, JString, required = false,
                                 default = nil)
  if valid_594679 != nil:
    section.add "X-Amz-Algorithm", valid_594679
  var valid_594680 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594680 = validateParameter(valid_594680, JString, required = false,
                                 default = nil)
  if valid_594680 != nil:
    section.add "X-Amz-SignedHeaders", valid_594680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594681: Call_GetRebootCacheCluster_594667; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_594681.validator(path, query, header, formData, body)
  let scheme = call_594681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594681.url(scheme.get, call_594681.host, call_594681.base,
                         call_594681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594681, url, valid)

proc call*(call_594682: Call_GetRebootCacheCluster_594667;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594683 = newJObject()
  if CacheNodeIdsToReboot != nil:
    query_594683.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_594683, "CacheClusterId", newJString(CacheClusterId))
  add(query_594683, "Action", newJString(Action))
  add(query_594683, "Version", newJString(Version))
  result = call_594682.call(nil, query_594683, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_594667(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_594668, base: "/",
    url: url_GetRebootCacheCluster_594669, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_594719 = ref object of OpenApiRestCall_592364
proc url_PostRemoveTagsFromResource_594721(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_594720(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594722 = query.getOrDefault("Action")
  valid_594722 = validateParameter(valid_594722, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_594722 != nil:
    section.add "Action", valid_594722
  var valid_594723 = query.getOrDefault("Version")
  valid_594723 = validateParameter(valid_594723, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594723 != nil:
    section.add "Version", valid_594723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594724 = header.getOrDefault("X-Amz-Signature")
  valid_594724 = validateParameter(valid_594724, JString, required = false,
                                 default = nil)
  if valid_594724 != nil:
    section.add "X-Amz-Signature", valid_594724
  var valid_594725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594725 = validateParameter(valid_594725, JString, required = false,
                                 default = nil)
  if valid_594725 != nil:
    section.add "X-Amz-Content-Sha256", valid_594725
  var valid_594726 = header.getOrDefault("X-Amz-Date")
  valid_594726 = validateParameter(valid_594726, JString, required = false,
                                 default = nil)
  if valid_594726 != nil:
    section.add "X-Amz-Date", valid_594726
  var valid_594727 = header.getOrDefault("X-Amz-Credential")
  valid_594727 = validateParameter(valid_594727, JString, required = false,
                                 default = nil)
  if valid_594727 != nil:
    section.add "X-Amz-Credential", valid_594727
  var valid_594728 = header.getOrDefault("X-Amz-Security-Token")
  valid_594728 = validateParameter(valid_594728, JString, required = false,
                                 default = nil)
  if valid_594728 != nil:
    section.add "X-Amz-Security-Token", valid_594728
  var valid_594729 = header.getOrDefault("X-Amz-Algorithm")
  valid_594729 = validateParameter(valid_594729, JString, required = false,
                                 default = nil)
  if valid_594729 != nil:
    section.add "X-Amz-Algorithm", valid_594729
  var valid_594730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594730 = validateParameter(valid_594730, JString, required = false,
                                 default = nil)
  if valid_594730 != nil:
    section.add "X-Amz-SignedHeaders", valid_594730
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_594731 = formData.getOrDefault("TagKeys")
  valid_594731 = validateParameter(valid_594731, JArray, required = true, default = nil)
  if valid_594731 != nil:
    section.add "TagKeys", valid_594731
  var valid_594732 = formData.getOrDefault("ResourceName")
  valid_594732 = validateParameter(valid_594732, JString, required = true,
                                 default = nil)
  if valid_594732 != nil:
    section.add "ResourceName", valid_594732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594733: Call_PostRemoveTagsFromResource_594719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_594733.validator(path, query, header, formData, body)
  let scheme = call_594733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594733.url(scheme.get, call_594733.host, call_594733.base,
                         call_594733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594733, url, valid)

proc call*(call_594734: Call_PostRemoveTagsFromResource_594719; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_594735 = newJObject()
  var formData_594736 = newJObject()
  if TagKeys != nil:
    formData_594736.add "TagKeys", TagKeys
  add(query_594735, "Action", newJString(Action))
  add(query_594735, "Version", newJString(Version))
  add(formData_594736, "ResourceName", newJString(ResourceName))
  result = call_594734.call(nil, query_594735, nil, formData_594736, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_594719(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_594720, base: "/",
    url: url_PostRemoveTagsFromResource_594721,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_594702 = ref object of OpenApiRestCall_592364
proc url_GetRemoveTagsFromResource_594704(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_594703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_594705 = query.getOrDefault("ResourceName")
  valid_594705 = validateParameter(valid_594705, JString, required = true,
                                 default = nil)
  if valid_594705 != nil:
    section.add "ResourceName", valid_594705
  var valid_594706 = query.getOrDefault("TagKeys")
  valid_594706 = validateParameter(valid_594706, JArray, required = true, default = nil)
  if valid_594706 != nil:
    section.add "TagKeys", valid_594706
  var valid_594707 = query.getOrDefault("Action")
  valid_594707 = validateParameter(valid_594707, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_594707 != nil:
    section.add "Action", valid_594707
  var valid_594708 = query.getOrDefault("Version")
  valid_594708 = validateParameter(valid_594708, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594708 != nil:
    section.add "Version", valid_594708
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594709 = header.getOrDefault("X-Amz-Signature")
  valid_594709 = validateParameter(valid_594709, JString, required = false,
                                 default = nil)
  if valid_594709 != nil:
    section.add "X-Amz-Signature", valid_594709
  var valid_594710 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594710 = validateParameter(valid_594710, JString, required = false,
                                 default = nil)
  if valid_594710 != nil:
    section.add "X-Amz-Content-Sha256", valid_594710
  var valid_594711 = header.getOrDefault("X-Amz-Date")
  valid_594711 = validateParameter(valid_594711, JString, required = false,
                                 default = nil)
  if valid_594711 != nil:
    section.add "X-Amz-Date", valid_594711
  var valid_594712 = header.getOrDefault("X-Amz-Credential")
  valid_594712 = validateParameter(valid_594712, JString, required = false,
                                 default = nil)
  if valid_594712 != nil:
    section.add "X-Amz-Credential", valid_594712
  var valid_594713 = header.getOrDefault("X-Amz-Security-Token")
  valid_594713 = validateParameter(valid_594713, JString, required = false,
                                 default = nil)
  if valid_594713 != nil:
    section.add "X-Amz-Security-Token", valid_594713
  var valid_594714 = header.getOrDefault("X-Amz-Algorithm")
  valid_594714 = validateParameter(valid_594714, JString, required = false,
                                 default = nil)
  if valid_594714 != nil:
    section.add "X-Amz-Algorithm", valid_594714
  var valid_594715 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594715 = validateParameter(valid_594715, JString, required = false,
                                 default = nil)
  if valid_594715 != nil:
    section.add "X-Amz-SignedHeaders", valid_594715
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594716: Call_GetRemoveTagsFromResource_594702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_594716.validator(path, query, header, formData, body)
  let scheme = call_594716.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594716.url(scheme.get, call_594716.host, call_594716.base,
                         call_594716.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594716, url, valid)

proc call*(call_594717: Call_GetRemoveTagsFromResource_594702;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594718 = newJObject()
  add(query_594718, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_594718.add "TagKeys", TagKeys
  add(query_594718, "Action", newJString(Action))
  add(query_594718, "Version", newJString(Version))
  result = call_594717.call(nil, query_594718, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_594702(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_594703, base: "/",
    url: url_GetRemoveTagsFromResource_594704,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_594755 = ref object of OpenApiRestCall_592364
proc url_PostResetCacheParameterGroup_594757(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetCacheParameterGroup_594756(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594758 = query.getOrDefault("Action")
  valid_594758 = validateParameter(valid_594758, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_594758 != nil:
    section.add "Action", valid_594758
  var valid_594759 = query.getOrDefault("Version")
  valid_594759 = validateParameter(valid_594759, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594759 != nil:
    section.add "Version", valid_594759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594760 = header.getOrDefault("X-Amz-Signature")
  valid_594760 = validateParameter(valid_594760, JString, required = false,
                                 default = nil)
  if valid_594760 != nil:
    section.add "X-Amz-Signature", valid_594760
  var valid_594761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594761 = validateParameter(valid_594761, JString, required = false,
                                 default = nil)
  if valid_594761 != nil:
    section.add "X-Amz-Content-Sha256", valid_594761
  var valid_594762 = header.getOrDefault("X-Amz-Date")
  valid_594762 = validateParameter(valid_594762, JString, required = false,
                                 default = nil)
  if valid_594762 != nil:
    section.add "X-Amz-Date", valid_594762
  var valid_594763 = header.getOrDefault("X-Amz-Credential")
  valid_594763 = validateParameter(valid_594763, JString, required = false,
                                 default = nil)
  if valid_594763 != nil:
    section.add "X-Amz-Credential", valid_594763
  var valid_594764 = header.getOrDefault("X-Amz-Security-Token")
  valid_594764 = validateParameter(valid_594764, JString, required = false,
                                 default = nil)
  if valid_594764 != nil:
    section.add "X-Amz-Security-Token", valid_594764
  var valid_594765 = header.getOrDefault("X-Amz-Algorithm")
  valid_594765 = validateParameter(valid_594765, JString, required = false,
                                 default = nil)
  if valid_594765 != nil:
    section.add "X-Amz-Algorithm", valid_594765
  var valid_594766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594766 = validateParameter(valid_594766, JString, required = false,
                                 default = nil)
  if valid_594766 != nil:
    section.add "X-Amz-SignedHeaders", valid_594766
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  var valid_594767 = formData.getOrDefault("ResetAllParameters")
  valid_594767 = validateParameter(valid_594767, JBool, required = false, default = nil)
  if valid_594767 != nil:
    section.add "ResetAllParameters", valid_594767
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_594768 = formData.getOrDefault("CacheParameterGroupName")
  valid_594768 = validateParameter(valid_594768, JString, required = true,
                                 default = nil)
  if valid_594768 != nil:
    section.add "CacheParameterGroupName", valid_594768
  var valid_594769 = formData.getOrDefault("ParameterNameValues")
  valid_594769 = validateParameter(valid_594769, JArray, required = false,
                                 default = nil)
  if valid_594769 != nil:
    section.add "ParameterNameValues", valid_594769
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594770: Call_PostResetCacheParameterGroup_594755; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_594770.validator(path, query, header, formData, body)
  let scheme = call_594770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594770.url(scheme.get, call_594770.host, call_594770.base,
                         call_594770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594770, url, valid)

proc call*(call_594771: Call_PostResetCacheParameterGroup_594755;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"; ParameterNameValues: JsonNode = nil): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  var query_594772 = newJObject()
  var formData_594773 = newJObject()
  add(formData_594773, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_594773, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_594772, "Action", newJString(Action))
  add(query_594772, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_594773.add "ParameterNameValues", ParameterNameValues
  result = call_594771.call(nil, query_594772, nil, formData_594773, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_594755(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_594756, base: "/",
    url: url_PostResetCacheParameterGroup_594757,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_594737 = ref object of OpenApiRestCall_592364
proc url_GetResetCacheParameterGroup_594739(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetCacheParameterGroup_594738(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_594740 = query.getOrDefault("CacheParameterGroupName")
  valid_594740 = validateParameter(valid_594740, JString, required = true,
                                 default = nil)
  if valid_594740 != nil:
    section.add "CacheParameterGroupName", valid_594740
  var valid_594741 = query.getOrDefault("ResetAllParameters")
  valid_594741 = validateParameter(valid_594741, JBool, required = false, default = nil)
  if valid_594741 != nil:
    section.add "ResetAllParameters", valid_594741
  var valid_594742 = query.getOrDefault("ParameterNameValues")
  valid_594742 = validateParameter(valid_594742, JArray, required = false,
                                 default = nil)
  if valid_594742 != nil:
    section.add "ParameterNameValues", valid_594742
  var valid_594743 = query.getOrDefault("Action")
  valid_594743 = validateParameter(valid_594743, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_594743 != nil:
    section.add "Action", valid_594743
  var valid_594744 = query.getOrDefault("Version")
  valid_594744 = validateParameter(valid_594744, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594744 != nil:
    section.add "Version", valid_594744
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594745 = header.getOrDefault("X-Amz-Signature")
  valid_594745 = validateParameter(valid_594745, JString, required = false,
                                 default = nil)
  if valid_594745 != nil:
    section.add "X-Amz-Signature", valid_594745
  var valid_594746 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594746 = validateParameter(valid_594746, JString, required = false,
                                 default = nil)
  if valid_594746 != nil:
    section.add "X-Amz-Content-Sha256", valid_594746
  var valid_594747 = header.getOrDefault("X-Amz-Date")
  valid_594747 = validateParameter(valid_594747, JString, required = false,
                                 default = nil)
  if valid_594747 != nil:
    section.add "X-Amz-Date", valid_594747
  var valid_594748 = header.getOrDefault("X-Amz-Credential")
  valid_594748 = validateParameter(valid_594748, JString, required = false,
                                 default = nil)
  if valid_594748 != nil:
    section.add "X-Amz-Credential", valid_594748
  var valid_594749 = header.getOrDefault("X-Amz-Security-Token")
  valid_594749 = validateParameter(valid_594749, JString, required = false,
                                 default = nil)
  if valid_594749 != nil:
    section.add "X-Amz-Security-Token", valid_594749
  var valid_594750 = header.getOrDefault("X-Amz-Algorithm")
  valid_594750 = validateParameter(valid_594750, JString, required = false,
                                 default = nil)
  if valid_594750 != nil:
    section.add "X-Amz-Algorithm", valid_594750
  var valid_594751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594751 = validateParameter(valid_594751, JString, required = false,
                                 default = nil)
  if valid_594751 != nil:
    section.add "X-Amz-SignedHeaders", valid_594751
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594752: Call_GetResetCacheParameterGroup_594737; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_594752.validator(path, query, header, formData, body)
  let scheme = call_594752.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594752.url(scheme.get, call_594752.host, call_594752.base,
                         call_594752.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594752, url, valid)

proc call*(call_594753: Call_GetResetCacheParameterGroup_594737;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594754 = newJObject()
  add(query_594754, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_594754, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    query_594754.add "ParameterNameValues", ParameterNameValues
  add(query_594754, "Action", newJString(Action))
  add(query_594754, "Version", newJString(Version))
  result = call_594753.call(nil, query_594754, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_594737(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_594738, base: "/",
    url: url_GetResetCacheParameterGroup_594739,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_594792 = ref object of OpenApiRestCall_592364
proc url_PostRevokeCacheSecurityGroupIngress_594794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_594793(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594795 = query.getOrDefault("Action")
  valid_594795 = validateParameter(valid_594795, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_594795 != nil:
    section.add "Action", valid_594795
  var valid_594796 = query.getOrDefault("Version")
  valid_594796 = validateParameter(valid_594796, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594796 != nil:
    section.add "Version", valid_594796
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594797 = header.getOrDefault("X-Amz-Signature")
  valid_594797 = validateParameter(valid_594797, JString, required = false,
                                 default = nil)
  if valid_594797 != nil:
    section.add "X-Amz-Signature", valid_594797
  var valid_594798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594798 = validateParameter(valid_594798, JString, required = false,
                                 default = nil)
  if valid_594798 != nil:
    section.add "X-Amz-Content-Sha256", valid_594798
  var valid_594799 = header.getOrDefault("X-Amz-Date")
  valid_594799 = validateParameter(valid_594799, JString, required = false,
                                 default = nil)
  if valid_594799 != nil:
    section.add "X-Amz-Date", valid_594799
  var valid_594800 = header.getOrDefault("X-Amz-Credential")
  valid_594800 = validateParameter(valid_594800, JString, required = false,
                                 default = nil)
  if valid_594800 != nil:
    section.add "X-Amz-Credential", valid_594800
  var valid_594801 = header.getOrDefault("X-Amz-Security-Token")
  valid_594801 = validateParameter(valid_594801, JString, required = false,
                                 default = nil)
  if valid_594801 != nil:
    section.add "X-Amz-Security-Token", valid_594801
  var valid_594802 = header.getOrDefault("X-Amz-Algorithm")
  valid_594802 = validateParameter(valid_594802, JString, required = false,
                                 default = nil)
  if valid_594802 != nil:
    section.add "X-Amz-Algorithm", valid_594802
  var valid_594803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594803 = validateParameter(valid_594803, JString, required = false,
                                 default = nil)
  if valid_594803 != nil:
    section.add "X-Amz-SignedHeaders", valid_594803
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_594804 = formData.getOrDefault("CacheSecurityGroupName")
  valid_594804 = validateParameter(valid_594804, JString, required = true,
                                 default = nil)
  if valid_594804 != nil:
    section.add "CacheSecurityGroupName", valid_594804
  var valid_594805 = formData.getOrDefault("EC2SecurityGroupName")
  valid_594805 = validateParameter(valid_594805, JString, required = true,
                                 default = nil)
  if valid_594805 != nil:
    section.add "EC2SecurityGroupName", valid_594805
  var valid_594806 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_594806 = validateParameter(valid_594806, JString, required = true,
                                 default = nil)
  if valid_594806 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_594806
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594807: Call_PostRevokeCacheSecurityGroupIngress_594792;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_594807.validator(path, query, header, formData, body)
  let scheme = call_594807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594807.url(scheme.get, call_594807.host, call_594807.base,
                         call_594807.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594807, url, valid)

proc call*(call_594808: Call_PostRevokeCacheSecurityGroupIngress_594792;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_594809 = newJObject()
  var formData_594810 = newJObject()
  add(formData_594810, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_594810, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_594810, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_594809, "Action", newJString(Action))
  add(query_594809, "Version", newJString(Version))
  result = call_594808.call(nil, query_594809, nil, formData_594810, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_594792(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_594793, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_594794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_594774 = ref object of OpenApiRestCall_592364
proc url_GetRevokeCacheSecurityGroupIngress_594776(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_594775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_594777 = query.getOrDefault("EC2SecurityGroupName")
  valid_594777 = validateParameter(valid_594777, JString, required = true,
                                 default = nil)
  if valid_594777 != nil:
    section.add "EC2SecurityGroupName", valid_594777
  var valid_594778 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_594778 = validateParameter(valid_594778, JString, required = true,
                                 default = nil)
  if valid_594778 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_594778
  var valid_594779 = query.getOrDefault("Action")
  valid_594779 = validateParameter(valid_594779, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_594779 != nil:
    section.add "Action", valid_594779
  var valid_594780 = query.getOrDefault("CacheSecurityGroupName")
  valid_594780 = validateParameter(valid_594780, JString, required = true,
                                 default = nil)
  if valid_594780 != nil:
    section.add "CacheSecurityGroupName", valid_594780
  var valid_594781 = query.getOrDefault("Version")
  valid_594781 = validateParameter(valid_594781, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594781 != nil:
    section.add "Version", valid_594781
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594782 = header.getOrDefault("X-Amz-Signature")
  valid_594782 = validateParameter(valid_594782, JString, required = false,
                                 default = nil)
  if valid_594782 != nil:
    section.add "X-Amz-Signature", valid_594782
  var valid_594783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594783 = validateParameter(valid_594783, JString, required = false,
                                 default = nil)
  if valid_594783 != nil:
    section.add "X-Amz-Content-Sha256", valid_594783
  var valid_594784 = header.getOrDefault("X-Amz-Date")
  valid_594784 = validateParameter(valid_594784, JString, required = false,
                                 default = nil)
  if valid_594784 != nil:
    section.add "X-Amz-Date", valid_594784
  var valid_594785 = header.getOrDefault("X-Amz-Credential")
  valid_594785 = validateParameter(valid_594785, JString, required = false,
                                 default = nil)
  if valid_594785 != nil:
    section.add "X-Amz-Credential", valid_594785
  var valid_594786 = header.getOrDefault("X-Amz-Security-Token")
  valid_594786 = validateParameter(valid_594786, JString, required = false,
                                 default = nil)
  if valid_594786 != nil:
    section.add "X-Amz-Security-Token", valid_594786
  var valid_594787 = header.getOrDefault("X-Amz-Algorithm")
  valid_594787 = validateParameter(valid_594787, JString, required = false,
                                 default = nil)
  if valid_594787 != nil:
    section.add "X-Amz-Algorithm", valid_594787
  var valid_594788 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594788 = validateParameter(valid_594788, JString, required = false,
                                 default = nil)
  if valid_594788 != nil:
    section.add "X-Amz-SignedHeaders", valid_594788
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594789: Call_GetRevokeCacheSecurityGroupIngress_594774;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_594789.validator(path, query, header, formData, body)
  let scheme = call_594789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594789.url(scheme.get, call_594789.host, call_594789.base,
                         call_594789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594789, url, valid)

proc call*(call_594790: Call_GetRevokeCacheSecurityGroupIngress_594774;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: string (required)
  var query_594791 = newJObject()
  add(query_594791, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_594791, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_594791, "Action", newJString(Action))
  add(query_594791, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_594791, "Version", newJString(Version))
  result = call_594790.call(nil, query_594791, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_594774(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_594775, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_594776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_594828 = ref object of OpenApiRestCall_592364
proc url_PostTestFailover_594830(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostTestFailover_594829(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594831 = query.getOrDefault("Action")
  valid_594831 = validateParameter(valid_594831, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_594831 != nil:
    section.add "Action", valid_594831
  var valid_594832 = query.getOrDefault("Version")
  valid_594832 = validateParameter(valid_594832, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594832 != nil:
    section.add "Version", valid_594832
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594833 = header.getOrDefault("X-Amz-Signature")
  valid_594833 = validateParameter(valid_594833, JString, required = false,
                                 default = nil)
  if valid_594833 != nil:
    section.add "X-Amz-Signature", valid_594833
  var valid_594834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594834 = validateParameter(valid_594834, JString, required = false,
                                 default = nil)
  if valid_594834 != nil:
    section.add "X-Amz-Content-Sha256", valid_594834
  var valid_594835 = header.getOrDefault("X-Amz-Date")
  valid_594835 = validateParameter(valid_594835, JString, required = false,
                                 default = nil)
  if valid_594835 != nil:
    section.add "X-Amz-Date", valid_594835
  var valid_594836 = header.getOrDefault("X-Amz-Credential")
  valid_594836 = validateParameter(valid_594836, JString, required = false,
                                 default = nil)
  if valid_594836 != nil:
    section.add "X-Amz-Credential", valid_594836
  var valid_594837 = header.getOrDefault("X-Amz-Security-Token")
  valid_594837 = validateParameter(valid_594837, JString, required = false,
                                 default = nil)
  if valid_594837 != nil:
    section.add "X-Amz-Security-Token", valid_594837
  var valid_594838 = header.getOrDefault("X-Amz-Algorithm")
  valid_594838 = validateParameter(valid_594838, JString, required = false,
                                 default = nil)
  if valid_594838 != nil:
    section.add "X-Amz-Algorithm", valid_594838
  var valid_594839 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594839 = validateParameter(valid_594839, JString, required = false,
                                 default = nil)
  if valid_594839 != nil:
    section.add "X-Amz-SignedHeaders", valid_594839
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_594840 = formData.getOrDefault("NodeGroupId")
  valid_594840 = validateParameter(valid_594840, JString, required = true,
                                 default = nil)
  if valid_594840 != nil:
    section.add "NodeGroupId", valid_594840
  var valid_594841 = formData.getOrDefault("ReplicationGroupId")
  valid_594841 = validateParameter(valid_594841, JString, required = true,
                                 default = nil)
  if valid_594841 != nil:
    section.add "ReplicationGroupId", valid_594841
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594842: Call_PostTestFailover_594828; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_594842.validator(path, query, header, formData, body)
  let scheme = call_594842.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594842.url(scheme.get, call_594842.host, call_594842.base,
                         call_594842.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594842, url, valid)

proc call*(call_594843: Call_PostTestFailover_594828; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  var query_594844 = newJObject()
  var formData_594845 = newJObject()
  add(formData_594845, "NodeGroupId", newJString(NodeGroupId))
  add(query_594844, "Action", newJString(Action))
  add(query_594844, "Version", newJString(Version))
  add(formData_594845, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_594843.call(nil, query_594844, nil, formData_594845, nil)

var postTestFailover* = Call_PostTestFailover_594828(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_594829,
    base: "/", url: url_PostTestFailover_594830,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_594811 = ref object of OpenApiRestCall_592364
proc url_GetTestFailover_594813(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetTestFailover_594812(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_594814 = query.getOrDefault("Action")
  valid_594814 = validateParameter(valid_594814, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_594814 != nil:
    section.add "Action", valid_594814
  var valid_594815 = query.getOrDefault("ReplicationGroupId")
  valid_594815 = validateParameter(valid_594815, JString, required = true,
                                 default = nil)
  if valid_594815 != nil:
    section.add "ReplicationGroupId", valid_594815
  var valid_594816 = query.getOrDefault("Version")
  valid_594816 = validateParameter(valid_594816, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_594816 != nil:
    section.add "Version", valid_594816
  var valid_594817 = query.getOrDefault("NodeGroupId")
  valid_594817 = validateParameter(valid_594817, JString, required = true,
                                 default = nil)
  if valid_594817 != nil:
    section.add "NodeGroupId", valid_594817
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_594818 = header.getOrDefault("X-Amz-Signature")
  valid_594818 = validateParameter(valid_594818, JString, required = false,
                                 default = nil)
  if valid_594818 != nil:
    section.add "X-Amz-Signature", valid_594818
  var valid_594819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_594819 = validateParameter(valid_594819, JString, required = false,
                                 default = nil)
  if valid_594819 != nil:
    section.add "X-Amz-Content-Sha256", valid_594819
  var valid_594820 = header.getOrDefault("X-Amz-Date")
  valid_594820 = validateParameter(valid_594820, JString, required = false,
                                 default = nil)
  if valid_594820 != nil:
    section.add "X-Amz-Date", valid_594820
  var valid_594821 = header.getOrDefault("X-Amz-Credential")
  valid_594821 = validateParameter(valid_594821, JString, required = false,
                                 default = nil)
  if valid_594821 != nil:
    section.add "X-Amz-Credential", valid_594821
  var valid_594822 = header.getOrDefault("X-Amz-Security-Token")
  valid_594822 = validateParameter(valid_594822, JString, required = false,
                                 default = nil)
  if valid_594822 != nil:
    section.add "X-Amz-Security-Token", valid_594822
  var valid_594823 = header.getOrDefault("X-Amz-Algorithm")
  valid_594823 = validateParameter(valid_594823, JString, required = false,
                                 default = nil)
  if valid_594823 != nil:
    section.add "X-Amz-Algorithm", valid_594823
  var valid_594824 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_594824 = validateParameter(valid_594824, JString, required = false,
                                 default = nil)
  if valid_594824 != nil:
    section.add "X-Amz-SignedHeaders", valid_594824
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_594825: Call_GetTestFailover_594811; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_594825.validator(path, query, header, formData, body)
  let scheme = call_594825.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_594825.url(scheme.get, call_594825.host, call_594825.base,
                         call_594825.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_594825, url, valid)

proc call*(call_594826: Call_GetTestFailover_594811; ReplicationGroupId: string;
          NodeGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  var query_594827 = newJObject()
  add(query_594827, "Action", newJString(Action))
  add(query_594827, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_594827, "Version", newJString(Version))
  add(query_594827, "NodeGroupId", newJString(NodeGroupId))
  result = call_594826.call(nil, query_594827, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_594811(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_594812,
    base: "/", url: url_GetTestFailover_594813, schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
