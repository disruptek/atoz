
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_605589 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_605589](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_605589): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_606199 = ref object of OpenApiRestCall_605589
proc url_PostAddTagsToResource_606201(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_606200(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606202 = query.getOrDefault("Action")
  valid_606202 = validateParameter(valid_606202, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606202 != nil:
    section.add "Action", valid_606202
  var valid_606203 = query.getOrDefault("Version")
  valid_606203 = validateParameter(valid_606203, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606203 != nil:
    section.add "Version", valid_606203
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606204 = header.getOrDefault("X-Amz-Signature")
  valid_606204 = validateParameter(valid_606204, JString, required = false,
                                 default = nil)
  if valid_606204 != nil:
    section.add "X-Amz-Signature", valid_606204
  var valid_606205 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = nil)
  if valid_606205 != nil:
    section.add "X-Amz-Content-Sha256", valid_606205
  var valid_606206 = header.getOrDefault("X-Amz-Date")
  valid_606206 = validateParameter(valid_606206, JString, required = false,
                                 default = nil)
  if valid_606206 != nil:
    section.add "X-Amz-Date", valid_606206
  var valid_606207 = header.getOrDefault("X-Amz-Credential")
  valid_606207 = validateParameter(valid_606207, JString, required = false,
                                 default = nil)
  if valid_606207 != nil:
    section.add "X-Amz-Credential", valid_606207
  var valid_606208 = header.getOrDefault("X-Amz-Security-Token")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Security-Token", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Algorithm")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Algorithm", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-SignedHeaders", valid_606210
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_606211 = formData.getOrDefault("Tags")
  valid_606211 = validateParameter(valid_606211, JArray, required = true, default = nil)
  if valid_606211 != nil:
    section.add "Tags", valid_606211
  var valid_606212 = formData.getOrDefault("ResourceName")
  valid_606212 = validateParameter(valid_606212, JString, required = true,
                                 default = nil)
  if valid_606212 != nil:
    section.add "ResourceName", valid_606212
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606213: Call_PostAddTagsToResource_606199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_606213.validator(path, query, header, formData, body)
  let scheme = call_606213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606213.url(scheme.get, call_606213.host, call_606213.base,
                         call_606213.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606213, url, valid)

proc call*(call_606214: Call_PostAddTagsToResource_606199; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_606215 = newJObject()
  var formData_606216 = newJObject()
  add(query_606215, "Action", newJString(Action))
  if Tags != nil:
    formData_606216.add "Tags", Tags
  add(query_606215, "Version", newJString(Version))
  add(formData_606216, "ResourceName", newJString(ResourceName))
  result = call_606214.call(nil, query_606215, nil, formData_606216, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_606199(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_606200, base: "/",
    url: url_PostAddTagsToResource_606201, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_605927 = ref object of OpenApiRestCall_605589
proc url_GetAddTagsToResource_605929(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_605928(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_606041 = query.getOrDefault("Tags")
  valid_606041 = validateParameter(valid_606041, JArray, required = true, default = nil)
  if valid_606041 != nil:
    section.add "Tags", valid_606041
  var valid_606042 = query.getOrDefault("ResourceName")
  valid_606042 = validateParameter(valid_606042, JString, required = true,
                                 default = nil)
  if valid_606042 != nil:
    section.add "ResourceName", valid_606042
  var valid_606056 = query.getOrDefault("Action")
  valid_606056 = validateParameter(valid_606056, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606056 != nil:
    section.add "Action", valid_606056
  var valid_606057 = query.getOrDefault("Version")
  valid_606057 = validateParameter(valid_606057, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606057 != nil:
    section.add "Version", valid_606057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606058 = header.getOrDefault("X-Amz-Signature")
  valid_606058 = validateParameter(valid_606058, JString, required = false,
                                 default = nil)
  if valid_606058 != nil:
    section.add "X-Amz-Signature", valid_606058
  var valid_606059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606059 = validateParameter(valid_606059, JString, required = false,
                                 default = nil)
  if valid_606059 != nil:
    section.add "X-Amz-Content-Sha256", valid_606059
  var valid_606060 = header.getOrDefault("X-Amz-Date")
  valid_606060 = validateParameter(valid_606060, JString, required = false,
                                 default = nil)
  if valid_606060 != nil:
    section.add "X-Amz-Date", valid_606060
  var valid_606061 = header.getOrDefault("X-Amz-Credential")
  valid_606061 = validateParameter(valid_606061, JString, required = false,
                                 default = nil)
  if valid_606061 != nil:
    section.add "X-Amz-Credential", valid_606061
  var valid_606062 = header.getOrDefault("X-Amz-Security-Token")
  valid_606062 = validateParameter(valid_606062, JString, required = false,
                                 default = nil)
  if valid_606062 != nil:
    section.add "X-Amz-Security-Token", valid_606062
  var valid_606063 = header.getOrDefault("X-Amz-Algorithm")
  valid_606063 = validateParameter(valid_606063, JString, required = false,
                                 default = nil)
  if valid_606063 != nil:
    section.add "X-Amz-Algorithm", valid_606063
  var valid_606064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606064 = validateParameter(valid_606064, JString, required = false,
                                 default = nil)
  if valid_606064 != nil:
    section.add "X-Amz-SignedHeaders", valid_606064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606087: Call_GetAddTagsToResource_605927; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_606087.validator(path, query, header, formData, body)
  let scheme = call_606087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606087.url(scheme.get, call_606087.host, call_606087.base,
                         call_606087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606087, url, valid)

proc call*(call_606158: Call_GetAddTagsToResource_605927; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606159 = newJObject()
  if Tags != nil:
    query_606159.add "Tags", Tags
  add(query_606159, "ResourceName", newJString(ResourceName))
  add(query_606159, "Action", newJString(Action))
  add(query_606159, "Version", newJString(Version))
  result = call_606158.call(nil, query_606159, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_605927(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_605928, base: "/",
    url: url_GetAddTagsToResource_605929, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_606235 = ref object of OpenApiRestCall_605589
proc url_PostAuthorizeCacheSecurityGroupIngress_606237(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_606236(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606238 = query.getOrDefault("Action")
  valid_606238 = validateParameter(valid_606238, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_606238 != nil:
    section.add "Action", valid_606238
  var valid_606239 = query.getOrDefault("Version")
  valid_606239 = validateParameter(valid_606239, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606239 != nil:
    section.add "Version", valid_606239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606240 = header.getOrDefault("X-Amz-Signature")
  valid_606240 = validateParameter(valid_606240, JString, required = false,
                                 default = nil)
  if valid_606240 != nil:
    section.add "X-Amz-Signature", valid_606240
  var valid_606241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606241 = validateParameter(valid_606241, JString, required = false,
                                 default = nil)
  if valid_606241 != nil:
    section.add "X-Amz-Content-Sha256", valid_606241
  var valid_606242 = header.getOrDefault("X-Amz-Date")
  valid_606242 = validateParameter(valid_606242, JString, required = false,
                                 default = nil)
  if valid_606242 != nil:
    section.add "X-Amz-Date", valid_606242
  var valid_606243 = header.getOrDefault("X-Amz-Credential")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Credential", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-Security-Token")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-Security-Token", valid_606244
  var valid_606245 = header.getOrDefault("X-Amz-Algorithm")
  valid_606245 = validateParameter(valid_606245, JString, required = false,
                                 default = nil)
  if valid_606245 != nil:
    section.add "X-Amz-Algorithm", valid_606245
  var valid_606246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606246 = validateParameter(valid_606246, JString, required = false,
                                 default = nil)
  if valid_606246 != nil:
    section.add "X-Amz-SignedHeaders", valid_606246
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_606247 = formData.getOrDefault("CacheSecurityGroupName")
  valid_606247 = validateParameter(valid_606247, JString, required = true,
                                 default = nil)
  if valid_606247 != nil:
    section.add "CacheSecurityGroupName", valid_606247
  var valid_606248 = formData.getOrDefault("EC2SecurityGroupName")
  valid_606248 = validateParameter(valid_606248, JString, required = true,
                                 default = nil)
  if valid_606248 != nil:
    section.add "EC2SecurityGroupName", valid_606248
  var valid_606249 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_606249 = validateParameter(valid_606249, JString, required = true,
                                 default = nil)
  if valid_606249 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_606249
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606250: Call_PostAuthorizeCacheSecurityGroupIngress_606235;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_606250.validator(path, query, header, formData, body)
  let scheme = call_606250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606250.url(scheme.get, call_606250.host, call_606250.base,
                         call_606250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606250, url, valid)

proc call*(call_606251: Call_PostAuthorizeCacheSecurityGroupIngress_606235;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606252 = newJObject()
  var formData_606253 = newJObject()
  add(formData_606253, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_606253, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_606253, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_606252, "Action", newJString(Action))
  add(query_606252, "Version", newJString(Version))
  result = call_606251.call(nil, query_606252, nil, formData_606253, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_606235(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_606236, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_606237,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_606217 = ref object of OpenApiRestCall_605589
proc url_GetAuthorizeCacheSecurityGroupIngress_606219(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_606218(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_606220 = query.getOrDefault("EC2SecurityGroupName")
  valid_606220 = validateParameter(valid_606220, JString, required = true,
                                 default = nil)
  if valid_606220 != nil:
    section.add "EC2SecurityGroupName", valid_606220
  var valid_606221 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_606221 = validateParameter(valid_606221, JString, required = true,
                                 default = nil)
  if valid_606221 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_606221
  var valid_606222 = query.getOrDefault("Action")
  valid_606222 = validateParameter(valid_606222, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_606222 != nil:
    section.add "Action", valid_606222
  var valid_606223 = query.getOrDefault("CacheSecurityGroupName")
  valid_606223 = validateParameter(valid_606223, JString, required = true,
                                 default = nil)
  if valid_606223 != nil:
    section.add "CacheSecurityGroupName", valid_606223
  var valid_606224 = query.getOrDefault("Version")
  valid_606224 = validateParameter(valid_606224, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606224 != nil:
    section.add "Version", valid_606224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606225 = header.getOrDefault("X-Amz-Signature")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-Signature", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-Content-Sha256", valid_606226
  var valid_606227 = header.getOrDefault("X-Amz-Date")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "X-Amz-Date", valid_606227
  var valid_606228 = header.getOrDefault("X-Amz-Credential")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "X-Amz-Credential", valid_606228
  var valid_606229 = header.getOrDefault("X-Amz-Security-Token")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "X-Amz-Security-Token", valid_606229
  var valid_606230 = header.getOrDefault("X-Amz-Algorithm")
  valid_606230 = validateParameter(valid_606230, JString, required = false,
                                 default = nil)
  if valid_606230 != nil:
    section.add "X-Amz-Algorithm", valid_606230
  var valid_606231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606231 = validateParameter(valid_606231, JString, required = false,
                                 default = nil)
  if valid_606231 != nil:
    section.add "X-Amz-SignedHeaders", valid_606231
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606232: Call_GetAuthorizeCacheSecurityGroupIngress_606217;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_606232.validator(path, query, header, formData, body)
  let scheme = call_606232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606232.url(scheme.get, call_606232.host, call_606232.base,
                         call_606232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606232, url, valid)

proc call*(call_606233: Call_GetAuthorizeCacheSecurityGroupIngress_606217;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Version: string (required)
  var query_606234 = newJObject()
  add(query_606234, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_606234, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_606234, "Action", newJString(Action))
  add(query_606234, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_606234, "Version", newJString(Version))
  result = call_606233.call(nil, query_606234, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_606217(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_606218, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_606219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_606272 = ref object of OpenApiRestCall_605589
proc url_PostBatchApplyUpdateAction_606274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchApplyUpdateAction_606273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606275 = query.getOrDefault("Action")
  valid_606275 = validateParameter(valid_606275, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_606275 != nil:
    section.add "Action", valid_606275
  var valid_606276 = query.getOrDefault("Version")
  valid_606276 = validateParameter(valid_606276, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606276 != nil:
    section.add "Version", valid_606276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606277 = header.getOrDefault("X-Amz-Signature")
  valid_606277 = validateParameter(valid_606277, JString, required = false,
                                 default = nil)
  if valid_606277 != nil:
    section.add "X-Amz-Signature", valid_606277
  var valid_606278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606278 = validateParameter(valid_606278, JString, required = false,
                                 default = nil)
  if valid_606278 != nil:
    section.add "X-Amz-Content-Sha256", valid_606278
  var valid_606279 = header.getOrDefault("X-Amz-Date")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Date", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-Credential")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-Credential", valid_606280
  var valid_606281 = header.getOrDefault("X-Amz-Security-Token")
  valid_606281 = validateParameter(valid_606281, JString, required = false,
                                 default = nil)
  if valid_606281 != nil:
    section.add "X-Amz-Security-Token", valid_606281
  var valid_606282 = header.getOrDefault("X-Amz-Algorithm")
  valid_606282 = validateParameter(valid_606282, JString, required = false,
                                 default = nil)
  if valid_606282 != nil:
    section.add "X-Amz-Algorithm", valid_606282
  var valid_606283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606283 = validateParameter(valid_606283, JString, required = false,
                                 default = nil)
  if valid_606283 != nil:
    section.add "X-Amz-SignedHeaders", valid_606283
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_606284 = formData.getOrDefault("ServiceUpdateName")
  valid_606284 = validateParameter(valid_606284, JString, required = true,
                                 default = nil)
  if valid_606284 != nil:
    section.add "ServiceUpdateName", valid_606284
  var valid_606285 = formData.getOrDefault("ReplicationGroupIds")
  valid_606285 = validateParameter(valid_606285, JArray, required = false,
                                 default = nil)
  if valid_606285 != nil:
    section.add "ReplicationGroupIds", valid_606285
  var valid_606286 = formData.getOrDefault("CacheClusterIds")
  valid_606286 = validateParameter(valid_606286, JArray, required = false,
                                 default = nil)
  if valid_606286 != nil:
    section.add "CacheClusterIds", valid_606286
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606287: Call_PostBatchApplyUpdateAction_606272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_606287.validator(path, query, header, formData, body)
  let scheme = call_606287.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606287.url(scheme.get, call_606287.host, call_606287.base,
                         call_606287.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606287, url, valid)

proc call*(call_606288: Call_PostBatchApplyUpdateAction_606272;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606289 = newJObject()
  var formData_606290 = newJObject()
  add(formData_606290, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_606290.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_606290.add "CacheClusterIds", CacheClusterIds
  add(query_606289, "Action", newJString(Action))
  add(query_606289, "Version", newJString(Version))
  result = call_606288.call(nil, query_606289, nil, formData_606290, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_606272(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_606273, base: "/",
    url: url_PostBatchApplyUpdateAction_606274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_606254 = ref object of OpenApiRestCall_605589
proc url_GetBatchApplyUpdateAction_606256(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchApplyUpdateAction_606255(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_606257 = query.getOrDefault("ServiceUpdateName")
  valid_606257 = validateParameter(valid_606257, JString, required = true,
                                 default = nil)
  if valid_606257 != nil:
    section.add "ServiceUpdateName", valid_606257
  var valid_606258 = query.getOrDefault("Action")
  valid_606258 = validateParameter(valid_606258, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_606258 != nil:
    section.add "Action", valid_606258
  var valid_606259 = query.getOrDefault("CacheClusterIds")
  valid_606259 = validateParameter(valid_606259, JArray, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "CacheClusterIds", valid_606259
  var valid_606260 = query.getOrDefault("ReplicationGroupIds")
  valid_606260 = validateParameter(valid_606260, JArray, required = false,
                                 default = nil)
  if valid_606260 != nil:
    section.add "ReplicationGroupIds", valid_606260
  var valid_606261 = query.getOrDefault("Version")
  valid_606261 = validateParameter(valid_606261, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606261 != nil:
    section.add "Version", valid_606261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606262 = header.getOrDefault("X-Amz-Signature")
  valid_606262 = validateParameter(valid_606262, JString, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "X-Amz-Signature", valid_606262
  var valid_606263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Content-Sha256", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-Date")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-Date", valid_606264
  var valid_606265 = header.getOrDefault("X-Amz-Credential")
  valid_606265 = validateParameter(valid_606265, JString, required = false,
                                 default = nil)
  if valid_606265 != nil:
    section.add "X-Amz-Credential", valid_606265
  var valid_606266 = header.getOrDefault("X-Amz-Security-Token")
  valid_606266 = validateParameter(valid_606266, JString, required = false,
                                 default = nil)
  if valid_606266 != nil:
    section.add "X-Amz-Security-Token", valid_606266
  var valid_606267 = header.getOrDefault("X-Amz-Algorithm")
  valid_606267 = validateParameter(valid_606267, JString, required = false,
                                 default = nil)
  if valid_606267 != nil:
    section.add "X-Amz-Algorithm", valid_606267
  var valid_606268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606268 = validateParameter(valid_606268, JString, required = false,
                                 default = nil)
  if valid_606268 != nil:
    section.add "X-Amz-SignedHeaders", valid_606268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606269: Call_GetBatchApplyUpdateAction_606254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_606269.validator(path, query, header, formData, body)
  let scheme = call_606269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606269.url(scheme.get, call_606269.host, call_606269.base,
                         call_606269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606269, url, valid)

proc call*(call_606270: Call_GetBatchApplyUpdateAction_606254;
          ServiceUpdateName: string; Action: string = "BatchApplyUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_606271 = newJObject()
  add(query_606271, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_606271, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_606271.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_606271.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_606271, "Version", newJString(Version))
  result = call_606270.call(nil, query_606271, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_606254(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_606255, base: "/",
    url: url_GetBatchApplyUpdateAction_606256,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_606309 = ref object of OpenApiRestCall_605589
proc url_PostBatchStopUpdateAction_606311(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBatchStopUpdateAction_606310(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606312 = query.getOrDefault("Action")
  valid_606312 = validateParameter(valid_606312, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_606312 != nil:
    section.add "Action", valid_606312
  var valid_606313 = query.getOrDefault("Version")
  valid_606313 = validateParameter(valid_606313, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606313 != nil:
    section.add "Version", valid_606313
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606314 = header.getOrDefault("X-Amz-Signature")
  valid_606314 = validateParameter(valid_606314, JString, required = false,
                                 default = nil)
  if valid_606314 != nil:
    section.add "X-Amz-Signature", valid_606314
  var valid_606315 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606315 = validateParameter(valid_606315, JString, required = false,
                                 default = nil)
  if valid_606315 != nil:
    section.add "X-Amz-Content-Sha256", valid_606315
  var valid_606316 = header.getOrDefault("X-Amz-Date")
  valid_606316 = validateParameter(valid_606316, JString, required = false,
                                 default = nil)
  if valid_606316 != nil:
    section.add "X-Amz-Date", valid_606316
  var valid_606317 = header.getOrDefault("X-Amz-Credential")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "X-Amz-Credential", valid_606317
  var valid_606318 = header.getOrDefault("X-Amz-Security-Token")
  valid_606318 = validateParameter(valid_606318, JString, required = false,
                                 default = nil)
  if valid_606318 != nil:
    section.add "X-Amz-Security-Token", valid_606318
  var valid_606319 = header.getOrDefault("X-Amz-Algorithm")
  valid_606319 = validateParameter(valid_606319, JString, required = false,
                                 default = nil)
  if valid_606319 != nil:
    section.add "X-Amz-Algorithm", valid_606319
  var valid_606320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606320 = validateParameter(valid_606320, JString, required = false,
                                 default = nil)
  if valid_606320 != nil:
    section.add "X-Amz-SignedHeaders", valid_606320
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ServiceUpdateName` field"
  var valid_606321 = formData.getOrDefault("ServiceUpdateName")
  valid_606321 = validateParameter(valid_606321, JString, required = true,
                                 default = nil)
  if valid_606321 != nil:
    section.add "ServiceUpdateName", valid_606321
  var valid_606322 = formData.getOrDefault("ReplicationGroupIds")
  valid_606322 = validateParameter(valid_606322, JArray, required = false,
                                 default = nil)
  if valid_606322 != nil:
    section.add "ReplicationGroupIds", valid_606322
  var valid_606323 = formData.getOrDefault("CacheClusterIds")
  valid_606323 = validateParameter(valid_606323, JArray, required = false,
                                 default = nil)
  if valid_606323 != nil:
    section.add "CacheClusterIds", valid_606323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606324: Call_PostBatchStopUpdateAction_606309; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_606324.validator(path, query, header, formData, body)
  let scheme = call_606324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606324.url(scheme.get, call_606324.host, call_606324.base,
                         call_606324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606324, url, valid)

proc call*(call_606325: Call_PostBatchStopUpdateAction_606309;
          ServiceUpdateName: string; ReplicationGroupIds: JsonNode = nil;
          CacheClusterIds: JsonNode = nil; Action: string = "BatchStopUpdateAction";
          Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606326 = newJObject()
  var formData_606327 = newJObject()
  add(formData_606327, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_606327.add "ReplicationGroupIds", ReplicationGroupIds
  if CacheClusterIds != nil:
    formData_606327.add "CacheClusterIds", CacheClusterIds
  add(query_606326, "Action", newJString(Action))
  add(query_606326, "Version", newJString(Version))
  result = call_606325.call(nil, query_606326, nil, formData_606327, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_606309(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_606310, base: "/",
    url: url_PostBatchStopUpdateAction_606311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_606291 = ref object of OpenApiRestCall_605589
proc url_GetBatchStopUpdateAction_606293(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBatchStopUpdateAction_606292(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ServiceUpdateName` field"
  var valid_606294 = query.getOrDefault("ServiceUpdateName")
  valid_606294 = validateParameter(valid_606294, JString, required = true,
                                 default = nil)
  if valid_606294 != nil:
    section.add "ServiceUpdateName", valid_606294
  var valid_606295 = query.getOrDefault("Action")
  valid_606295 = validateParameter(valid_606295, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_606295 != nil:
    section.add "Action", valid_606295
  var valid_606296 = query.getOrDefault("CacheClusterIds")
  valid_606296 = validateParameter(valid_606296, JArray, required = false,
                                 default = nil)
  if valid_606296 != nil:
    section.add "CacheClusterIds", valid_606296
  var valid_606297 = query.getOrDefault("ReplicationGroupIds")
  valid_606297 = validateParameter(valid_606297, JArray, required = false,
                                 default = nil)
  if valid_606297 != nil:
    section.add "ReplicationGroupIds", valid_606297
  var valid_606298 = query.getOrDefault("Version")
  valid_606298 = validateParameter(valid_606298, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606298 != nil:
    section.add "Version", valid_606298
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606299 = header.getOrDefault("X-Amz-Signature")
  valid_606299 = validateParameter(valid_606299, JString, required = false,
                                 default = nil)
  if valid_606299 != nil:
    section.add "X-Amz-Signature", valid_606299
  var valid_606300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-Content-Sha256", valid_606300
  var valid_606301 = header.getOrDefault("X-Amz-Date")
  valid_606301 = validateParameter(valid_606301, JString, required = false,
                                 default = nil)
  if valid_606301 != nil:
    section.add "X-Amz-Date", valid_606301
  var valid_606302 = header.getOrDefault("X-Amz-Credential")
  valid_606302 = validateParameter(valid_606302, JString, required = false,
                                 default = nil)
  if valid_606302 != nil:
    section.add "X-Amz-Credential", valid_606302
  var valid_606303 = header.getOrDefault("X-Amz-Security-Token")
  valid_606303 = validateParameter(valid_606303, JString, required = false,
                                 default = nil)
  if valid_606303 != nil:
    section.add "X-Amz-Security-Token", valid_606303
  var valid_606304 = header.getOrDefault("X-Amz-Algorithm")
  valid_606304 = validateParameter(valid_606304, JString, required = false,
                                 default = nil)
  if valid_606304 != nil:
    section.add "X-Amz-Algorithm", valid_606304
  var valid_606305 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606305 = validateParameter(valid_606305, JString, required = false,
                                 default = nil)
  if valid_606305 != nil:
    section.add "X-Amz-SignedHeaders", valid_606305
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606306: Call_GetBatchStopUpdateAction_606291; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_606306.validator(path, query, header, formData, body)
  let scheme = call_606306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606306.url(scheme.get, call_606306.host, call_606306.base,
                         call_606306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606306, url, valid)

proc call*(call_606307: Call_GetBatchStopUpdateAction_606291;
          ServiceUpdateName: string; Action: string = "BatchStopUpdateAction";
          CacheClusterIds: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  var query_606308 = newJObject()
  add(query_606308, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_606308, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_606308.add "CacheClusterIds", CacheClusterIds
  if ReplicationGroupIds != nil:
    query_606308.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_606308, "Version", newJString(Version))
  result = call_606307.call(nil, query_606308, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_606291(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_606292, base: "/",
    url: url_GetBatchStopUpdateAction_606293, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCompleteMigration_606345 = ref object of OpenApiRestCall_605589
proc url_PostCompleteMigration_606347(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCompleteMigration_606346(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606348 = query.getOrDefault("Action")
  valid_606348 = validateParameter(valid_606348, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_606348 != nil:
    section.add "Action", valid_606348
  var valid_606349 = query.getOrDefault("Version")
  valid_606349 = validateParameter(valid_606349, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606349 != nil:
    section.add "Version", valid_606349
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606350 = header.getOrDefault("X-Amz-Signature")
  valid_606350 = validateParameter(valid_606350, JString, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "X-Amz-Signature", valid_606350
  var valid_606351 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606351 = validateParameter(valid_606351, JString, required = false,
                                 default = nil)
  if valid_606351 != nil:
    section.add "X-Amz-Content-Sha256", valid_606351
  var valid_606352 = header.getOrDefault("X-Amz-Date")
  valid_606352 = validateParameter(valid_606352, JString, required = false,
                                 default = nil)
  if valid_606352 != nil:
    section.add "X-Amz-Date", valid_606352
  var valid_606353 = header.getOrDefault("X-Amz-Credential")
  valid_606353 = validateParameter(valid_606353, JString, required = false,
                                 default = nil)
  if valid_606353 != nil:
    section.add "X-Amz-Credential", valid_606353
  var valid_606354 = header.getOrDefault("X-Amz-Security-Token")
  valid_606354 = validateParameter(valid_606354, JString, required = false,
                                 default = nil)
  if valid_606354 != nil:
    section.add "X-Amz-Security-Token", valid_606354
  var valid_606355 = header.getOrDefault("X-Amz-Algorithm")
  valid_606355 = validateParameter(valid_606355, JString, required = false,
                                 default = nil)
  if valid_606355 != nil:
    section.add "X-Amz-Algorithm", valid_606355
  var valid_606356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606356 = validateParameter(valid_606356, JString, required = false,
                                 default = nil)
  if valid_606356 != nil:
    section.add "X-Amz-SignedHeaders", valid_606356
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  section = newJObject()
  var valid_606357 = formData.getOrDefault("Force")
  valid_606357 = validateParameter(valid_606357, JBool, required = false, default = nil)
  if valid_606357 != nil:
    section.add "Force", valid_606357
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_606358 = formData.getOrDefault("ReplicationGroupId")
  valid_606358 = validateParameter(valid_606358, JString, required = true,
                                 default = nil)
  if valid_606358 != nil:
    section.add "ReplicationGroupId", valid_606358
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606359: Call_PostCompleteMigration_606345; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_606359.validator(path, query, header, formData, body)
  let scheme = call_606359.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606359.url(scheme.get, call_606359.host, call_606359.base,
                         call_606359.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606359, url, valid)

proc call*(call_606360: Call_PostCompleteMigration_606345;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## postCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  var query_606361 = newJObject()
  var formData_606362 = newJObject()
  add(formData_606362, "Force", newJBool(Force))
  add(query_606361, "Action", newJString(Action))
  add(query_606361, "Version", newJString(Version))
  add(formData_606362, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_606360.call(nil, query_606361, nil, formData_606362, nil)

var postCompleteMigration* = Call_PostCompleteMigration_606345(
    name: "postCompleteMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_PostCompleteMigration_606346, base: "/",
    url: url_PostCompleteMigration_606347, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCompleteMigration_606328 = ref object of OpenApiRestCall_605589
proc url_GetCompleteMigration_606330(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCompleteMigration_606329(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Complete the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Force: JBool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606331 = query.getOrDefault("Force")
  valid_606331 = validateParameter(valid_606331, JBool, required = false, default = nil)
  if valid_606331 != nil:
    section.add "Force", valid_606331
  var valid_606332 = query.getOrDefault("Action")
  valid_606332 = validateParameter(valid_606332, JString, required = true,
                                 default = newJString("CompleteMigration"))
  if valid_606332 != nil:
    section.add "Action", valid_606332
  var valid_606333 = query.getOrDefault("ReplicationGroupId")
  valid_606333 = validateParameter(valid_606333, JString, required = true,
                                 default = nil)
  if valid_606333 != nil:
    section.add "ReplicationGroupId", valid_606333
  var valid_606334 = query.getOrDefault("Version")
  valid_606334 = validateParameter(valid_606334, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606334 != nil:
    section.add "Version", valid_606334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606335 = header.getOrDefault("X-Amz-Signature")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-Signature", valid_606335
  var valid_606336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606336 = validateParameter(valid_606336, JString, required = false,
                                 default = nil)
  if valid_606336 != nil:
    section.add "X-Amz-Content-Sha256", valid_606336
  var valid_606337 = header.getOrDefault("X-Amz-Date")
  valid_606337 = validateParameter(valid_606337, JString, required = false,
                                 default = nil)
  if valid_606337 != nil:
    section.add "X-Amz-Date", valid_606337
  var valid_606338 = header.getOrDefault("X-Amz-Credential")
  valid_606338 = validateParameter(valid_606338, JString, required = false,
                                 default = nil)
  if valid_606338 != nil:
    section.add "X-Amz-Credential", valid_606338
  var valid_606339 = header.getOrDefault("X-Amz-Security-Token")
  valid_606339 = validateParameter(valid_606339, JString, required = false,
                                 default = nil)
  if valid_606339 != nil:
    section.add "X-Amz-Security-Token", valid_606339
  var valid_606340 = header.getOrDefault("X-Amz-Algorithm")
  valid_606340 = validateParameter(valid_606340, JString, required = false,
                                 default = nil)
  if valid_606340 != nil:
    section.add "X-Amz-Algorithm", valid_606340
  var valid_606341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606341 = validateParameter(valid_606341, JString, required = false,
                                 default = nil)
  if valid_606341 != nil:
    section.add "X-Amz-SignedHeaders", valid_606341
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606342: Call_GetCompleteMigration_606328; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Complete the migration of data.
  ## 
  let valid = call_606342.validator(path, query, header, formData, body)
  let scheme = call_606342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606342.url(scheme.get, call_606342.host, call_606342.base,
                         call_606342.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606342, url, valid)

proc call*(call_606343: Call_GetCompleteMigration_606328;
          ReplicationGroupId: string; Force: bool = false;
          Action: string = "CompleteMigration"; Version: string = "2015-02-02"): Recallable =
  ## getCompleteMigration
  ## Complete the migration of data.
  ##   Force: bool
  ##        : Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data is being migrated.
  ##   Version: string (required)
  var query_606344 = newJObject()
  add(query_606344, "Force", newJBool(Force))
  add(query_606344, "Action", newJString(Action))
  add(query_606344, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_606344, "Version", newJString(Version))
  result = call_606343.call(nil, query_606344, nil, nil, nil)

var getCompleteMigration* = Call_GetCompleteMigration_606328(
    name: "getCompleteMigration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CompleteMigration",
    validator: validate_GetCompleteMigration_606329, base: "/",
    url: url_GetCompleteMigration_606330, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_606382 = ref object of OpenApiRestCall_605589
proc url_PostCopySnapshot_606384(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopySnapshot_606383(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606385 = query.getOrDefault("Action")
  valid_606385 = validateParameter(valid_606385, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_606385 != nil:
    section.add "Action", valid_606385
  var valid_606386 = query.getOrDefault("Version")
  valid_606386 = validateParameter(valid_606386, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606386 != nil:
    section.add "Version", valid_606386
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606387 = header.getOrDefault("X-Amz-Signature")
  valid_606387 = validateParameter(valid_606387, JString, required = false,
                                 default = nil)
  if valid_606387 != nil:
    section.add "X-Amz-Signature", valid_606387
  var valid_606388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606388 = validateParameter(valid_606388, JString, required = false,
                                 default = nil)
  if valid_606388 != nil:
    section.add "X-Amz-Content-Sha256", valid_606388
  var valid_606389 = header.getOrDefault("X-Amz-Date")
  valid_606389 = validateParameter(valid_606389, JString, required = false,
                                 default = nil)
  if valid_606389 != nil:
    section.add "X-Amz-Date", valid_606389
  var valid_606390 = header.getOrDefault("X-Amz-Credential")
  valid_606390 = validateParameter(valid_606390, JString, required = false,
                                 default = nil)
  if valid_606390 != nil:
    section.add "X-Amz-Credential", valid_606390
  var valid_606391 = header.getOrDefault("X-Amz-Security-Token")
  valid_606391 = validateParameter(valid_606391, JString, required = false,
                                 default = nil)
  if valid_606391 != nil:
    section.add "X-Amz-Security-Token", valid_606391
  var valid_606392 = header.getOrDefault("X-Amz-Algorithm")
  valid_606392 = validateParameter(valid_606392, JString, required = false,
                                 default = nil)
  if valid_606392 != nil:
    section.add "X-Amz-Algorithm", valid_606392
  var valid_606393 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606393 = validateParameter(valid_606393, JString, required = false,
                                 default = nil)
  if valid_606393 != nil:
    section.add "X-Amz-SignedHeaders", valid_606393
  result.add "header", section
  ## parameters in `formData` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  section = newJObject()
  var valid_606394 = formData.getOrDefault("KmsKeyId")
  valid_606394 = validateParameter(valid_606394, JString, required = false,
                                 default = nil)
  if valid_606394 != nil:
    section.add "KmsKeyId", valid_606394
  var valid_606395 = formData.getOrDefault("TargetBucket")
  valid_606395 = validateParameter(valid_606395, JString, required = false,
                                 default = nil)
  if valid_606395 != nil:
    section.add "TargetBucket", valid_606395
  assert formData != nil, "formData argument is necessary due to required `SourceSnapshotName` field"
  var valid_606396 = formData.getOrDefault("SourceSnapshotName")
  valid_606396 = validateParameter(valid_606396, JString, required = true,
                                 default = nil)
  if valid_606396 != nil:
    section.add "SourceSnapshotName", valid_606396
  var valid_606397 = formData.getOrDefault("TargetSnapshotName")
  valid_606397 = validateParameter(valid_606397, JString, required = true,
                                 default = nil)
  if valid_606397 != nil:
    section.add "TargetSnapshotName", valid_606397
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606398: Call_PostCopySnapshot_606382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_606398.validator(path, query, header, formData, body)
  let scheme = call_606398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606398.url(scheme.get, call_606398.host, call_606398.base,
                         call_606398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606398, url, valid)

proc call*(call_606399: Call_PostCopySnapshot_606382; SourceSnapshotName: string;
          TargetSnapshotName: string; KmsKeyId: string = "";
          Action: string = "CopySnapshot"; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Action: string (required)
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_606400 = newJObject()
  var formData_606401 = newJObject()
  add(formData_606401, "KmsKeyId", newJString(KmsKeyId))
  add(query_606400, "Action", newJString(Action))
  add(formData_606401, "TargetBucket", newJString(TargetBucket))
  add(formData_606401, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(formData_606401, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_606400, "Version", newJString(Version))
  result = call_606399.call(nil, query_606400, nil, formData_606401, nil)

var postCopySnapshot* = Call_PostCopySnapshot_606382(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_606383,
    base: "/", url: url_PostCopySnapshot_606384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_606363 = ref object of OpenApiRestCall_605589
proc url_GetCopySnapshot_606365(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopySnapshot_606364(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: JString (required)
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606366 = query.getOrDefault("KmsKeyId")
  valid_606366 = validateParameter(valid_606366, JString, required = false,
                                 default = nil)
  if valid_606366 != nil:
    section.add "KmsKeyId", valid_606366
  var valid_606367 = query.getOrDefault("TargetBucket")
  valid_606367 = validateParameter(valid_606367, JString, required = false,
                                 default = nil)
  if valid_606367 != nil:
    section.add "TargetBucket", valid_606367
  var valid_606368 = query.getOrDefault("Action")
  valid_606368 = validateParameter(valid_606368, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_606368 != nil:
    section.add "Action", valid_606368
  var valid_606369 = query.getOrDefault("TargetSnapshotName")
  valid_606369 = validateParameter(valid_606369, JString, required = true,
                                 default = nil)
  if valid_606369 != nil:
    section.add "TargetSnapshotName", valid_606369
  var valid_606370 = query.getOrDefault("SourceSnapshotName")
  valid_606370 = validateParameter(valid_606370, JString, required = true,
                                 default = nil)
  if valid_606370 != nil:
    section.add "SourceSnapshotName", valid_606370
  var valid_606371 = query.getOrDefault("Version")
  valid_606371 = validateParameter(valid_606371, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606371 != nil:
    section.add "Version", valid_606371
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606372 = header.getOrDefault("X-Amz-Signature")
  valid_606372 = validateParameter(valid_606372, JString, required = false,
                                 default = nil)
  if valid_606372 != nil:
    section.add "X-Amz-Signature", valid_606372
  var valid_606373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606373 = validateParameter(valid_606373, JString, required = false,
                                 default = nil)
  if valid_606373 != nil:
    section.add "X-Amz-Content-Sha256", valid_606373
  var valid_606374 = header.getOrDefault("X-Amz-Date")
  valid_606374 = validateParameter(valid_606374, JString, required = false,
                                 default = nil)
  if valid_606374 != nil:
    section.add "X-Amz-Date", valid_606374
  var valid_606375 = header.getOrDefault("X-Amz-Credential")
  valid_606375 = validateParameter(valid_606375, JString, required = false,
                                 default = nil)
  if valid_606375 != nil:
    section.add "X-Amz-Credential", valid_606375
  var valid_606376 = header.getOrDefault("X-Amz-Security-Token")
  valid_606376 = validateParameter(valid_606376, JString, required = false,
                                 default = nil)
  if valid_606376 != nil:
    section.add "X-Amz-Security-Token", valid_606376
  var valid_606377 = header.getOrDefault("X-Amz-Algorithm")
  valid_606377 = validateParameter(valid_606377, JString, required = false,
                                 default = nil)
  if valid_606377 != nil:
    section.add "X-Amz-Algorithm", valid_606377
  var valid_606378 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606378 = validateParameter(valid_606378, JString, required = false,
                                 default = nil)
  if valid_606378 != nil:
    section.add "X-Amz-SignedHeaders", valid_606378
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606379: Call_GetCopySnapshot_606363; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_606379.validator(path, query, header, formData, body)
  let scheme = call_606379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606379.url(scheme.get, call_606379.host, call_606379.base,
                         call_606379.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606379, url, valid)

proc call*(call_606380: Call_GetCopySnapshot_606363; TargetSnapshotName: string;
          SourceSnapshotName: string; KmsKeyId: string = "";
          TargetBucket: string = ""; Action: string = "CopySnapshot";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Version: string (required)
  var query_606381 = newJObject()
  add(query_606381, "KmsKeyId", newJString(KmsKeyId))
  add(query_606381, "TargetBucket", newJString(TargetBucket))
  add(query_606381, "Action", newJString(Action))
  add(query_606381, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_606381, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_606381, "Version", newJString(Version))
  result = call_606380.call(nil, query_606381, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_606363(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_606364,
    base: "/", url: url_GetCopySnapshot_606365, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_606440 = ref object of OpenApiRestCall_605589
proc url_PostCreateCacheCluster_606442(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheCluster_606441(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606443 = query.getOrDefault("Action")
  valid_606443 = validateParameter(valid_606443, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_606443 != nil:
    section.add "Action", valid_606443
  var valid_606444 = query.getOrDefault("Version")
  valid_606444 = validateParameter(valid_606444, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606444 != nil:
    section.add "Version", valid_606444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606445 = header.getOrDefault("X-Amz-Signature")
  valid_606445 = validateParameter(valid_606445, JString, required = false,
                                 default = nil)
  if valid_606445 != nil:
    section.add "X-Amz-Signature", valid_606445
  var valid_606446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606446 = validateParameter(valid_606446, JString, required = false,
                                 default = nil)
  if valid_606446 != nil:
    section.add "X-Amz-Content-Sha256", valid_606446
  var valid_606447 = header.getOrDefault("X-Amz-Date")
  valid_606447 = validateParameter(valid_606447, JString, required = false,
                                 default = nil)
  if valid_606447 != nil:
    section.add "X-Amz-Date", valid_606447
  var valid_606448 = header.getOrDefault("X-Amz-Credential")
  valid_606448 = validateParameter(valid_606448, JString, required = false,
                                 default = nil)
  if valid_606448 != nil:
    section.add "X-Amz-Credential", valid_606448
  var valid_606449 = header.getOrDefault("X-Amz-Security-Token")
  valid_606449 = validateParameter(valid_606449, JString, required = false,
                                 default = nil)
  if valid_606449 != nil:
    section.add "X-Amz-Security-Token", valid_606449
  var valid_606450 = header.getOrDefault("X-Amz-Algorithm")
  valid_606450 = validateParameter(valid_606450, JString, required = false,
                                 default = nil)
  if valid_606450 != nil:
    section.add "X-Amz-Algorithm", valid_606450
  var valid_606451 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606451 = validateParameter(valid_606451, JString, required = false,
                                 default = nil)
  if valid_606451 != nil:
    section.add "X-Amz-SignedHeaders", valid_606451
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_606452 = formData.getOrDefault("SecurityGroupIds")
  valid_606452 = validateParameter(valid_606452, JArray, required = false,
                                 default = nil)
  if valid_606452 != nil:
    section.add "SecurityGroupIds", valid_606452
  var valid_606453 = formData.getOrDefault("ReplicationGroupId")
  valid_606453 = validateParameter(valid_606453, JString, required = false,
                                 default = nil)
  if valid_606453 != nil:
    section.add "ReplicationGroupId", valid_606453
  var valid_606454 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "PreferredMaintenanceWindow", valid_606454
  var valid_606455 = formData.getOrDefault("Port")
  valid_606455 = validateParameter(valid_606455, JInt, required = false, default = nil)
  if valid_606455 != nil:
    section.add "Port", valid_606455
  var valid_606456 = formData.getOrDefault("NumCacheNodes")
  valid_606456 = validateParameter(valid_606456, JInt, required = false, default = nil)
  if valid_606456 != nil:
    section.add "NumCacheNodes", valid_606456
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_606457 = formData.getOrDefault("CacheClusterId")
  valid_606457 = validateParameter(valid_606457, JString, required = true,
                                 default = nil)
  if valid_606457 != nil:
    section.add "CacheClusterId", valid_606457
  var valid_606458 = formData.getOrDefault("NotificationTopicArn")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "NotificationTopicArn", valid_606458
  var valid_606459 = formData.getOrDefault("EngineVersion")
  valid_606459 = validateParameter(valid_606459, JString, required = false,
                                 default = nil)
  if valid_606459 != nil:
    section.add "EngineVersion", valid_606459
  var valid_606460 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_606460 = validateParameter(valid_606460, JString, required = false,
                                 default = nil)
  if valid_606460 != nil:
    section.add "PreferredAvailabilityZone", valid_606460
  var valid_606461 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_606461 = validateParameter(valid_606461, JArray, required = false,
                                 default = nil)
  if valid_606461 != nil:
    section.add "PreferredAvailabilityZones", valid_606461
  var valid_606462 = formData.getOrDefault("AZMode")
  valid_606462 = validateParameter(valid_606462, JString, required = false,
                                 default = newJString("single-az"))
  if valid_606462 != nil:
    section.add "AZMode", valid_606462
  var valid_606463 = formData.getOrDefault("Engine")
  valid_606463 = validateParameter(valid_606463, JString, required = false,
                                 default = nil)
  if valid_606463 != nil:
    section.add "Engine", valid_606463
  var valid_606464 = formData.getOrDefault("CacheParameterGroupName")
  valid_606464 = validateParameter(valid_606464, JString, required = false,
                                 default = nil)
  if valid_606464 != nil:
    section.add "CacheParameterGroupName", valid_606464
  var valid_606465 = formData.getOrDefault("SnapshotName")
  valid_606465 = validateParameter(valid_606465, JString, required = false,
                                 default = nil)
  if valid_606465 != nil:
    section.add "SnapshotName", valid_606465
  var valid_606466 = formData.getOrDefault("SnapshotArns")
  valid_606466 = validateParameter(valid_606466, JArray, required = false,
                                 default = nil)
  if valid_606466 != nil:
    section.add "SnapshotArns", valid_606466
  var valid_606467 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_606467 = validateParameter(valid_606467, JBool, required = false, default = nil)
  if valid_606467 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606467
  var valid_606468 = formData.getOrDefault("CacheSubnetGroupName")
  valid_606468 = validateParameter(valid_606468, JString, required = false,
                                 default = nil)
  if valid_606468 != nil:
    section.add "CacheSubnetGroupName", valid_606468
  var valid_606469 = formData.getOrDefault("AuthToken")
  valid_606469 = validateParameter(valid_606469, JString, required = false,
                                 default = nil)
  if valid_606469 != nil:
    section.add "AuthToken", valid_606469
  var valid_606470 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_606470 = validateParameter(valid_606470, JArray, required = false,
                                 default = nil)
  if valid_606470 != nil:
    section.add "CacheSecurityGroupNames", valid_606470
  var valid_606471 = formData.getOrDefault("Tags")
  valid_606471 = validateParameter(valid_606471, JArray, required = false,
                                 default = nil)
  if valid_606471 != nil:
    section.add "Tags", valid_606471
  var valid_606472 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_606472 = validateParameter(valid_606472, JInt, required = false, default = nil)
  if valid_606472 != nil:
    section.add "SnapshotRetentionLimit", valid_606472
  var valid_606473 = formData.getOrDefault("CacheNodeType")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "CacheNodeType", valid_606473
  var valid_606474 = formData.getOrDefault("SnapshotWindow")
  valid_606474 = validateParameter(valid_606474, JString, required = false,
                                 default = nil)
  if valid_606474 != nil:
    section.add "SnapshotWindow", valid_606474
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606475: Call_PostCreateCacheCluster_606440; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_606475.validator(path, query, header, formData, body)
  let scheme = call_606475.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606475.url(scheme.get, call_606475.host, call_606475.base,
                         call_606475.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606475, url, valid)

proc call*(call_606476: Call_PostCreateCacheCluster_606440; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; ReplicationGroupId: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          NumCacheNodes: int = 0; NotificationTopicArn: string = "";
          EngineVersion: string = ""; PreferredAvailabilityZone: string = "";
          PreferredAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          Engine: string = ""; CacheParameterGroupName: string = "";
          SnapshotName: string = ""; SnapshotArns: JsonNode = nil;
          AutoMinorVersionUpgrade: bool = false; CacheSubnetGroupName: string = "";
          Action: string = "CreateCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; Version: string = "2015-02-02";
          CacheNodeType: string = ""; SnapshotWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_606477 = newJObject()
  var formData_606478 = newJObject()
  if SecurityGroupIds != nil:
    formData_606478.add "SecurityGroupIds", SecurityGroupIds
  add(formData_606478, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_606478, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606478, "Port", newJInt(Port))
  add(formData_606478, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_606478, "CacheClusterId", newJString(CacheClusterId))
  add(formData_606478, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_606478, "EngineVersion", newJString(EngineVersion))
  add(formData_606478, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if PreferredAvailabilityZones != nil:
    formData_606478.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(formData_606478, "AZMode", newJString(AZMode))
  add(formData_606478, "Engine", newJString(Engine))
  add(formData_606478, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_606478, "SnapshotName", newJString(SnapshotName))
  if SnapshotArns != nil:
    formData_606478.add "SnapshotArns", SnapshotArns
  add(formData_606478, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_606478, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606477, "Action", newJString(Action))
  add(formData_606478, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_606478.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_606478.add "Tags", Tags
  add(formData_606478, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_606477, "Version", newJString(Version))
  add(formData_606478, "CacheNodeType", newJString(CacheNodeType))
  add(formData_606478, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_606476.call(nil, query_606477, nil, formData_606478, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_606440(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_606441, base: "/",
    url: url_PostCreateCacheCluster_606442, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_606402 = ref object of OpenApiRestCall_605589
proc url_GetCreateCacheCluster_606404(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheCluster_606403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  section = newJObject()
  var valid_606405 = query.getOrDefault("SnapshotArns")
  valid_606405 = validateParameter(valid_606405, JArray, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "SnapshotArns", valid_606405
  var valid_606406 = query.getOrDefault("AuthToken")
  valid_606406 = validateParameter(valid_606406, JString, required = false,
                                 default = nil)
  if valid_606406 != nil:
    section.add "AuthToken", valid_606406
  var valid_606407 = query.getOrDefault("Engine")
  valid_606407 = validateParameter(valid_606407, JString, required = false,
                                 default = nil)
  if valid_606407 != nil:
    section.add "Engine", valid_606407
  var valid_606408 = query.getOrDefault("CacheParameterGroupName")
  valid_606408 = validateParameter(valid_606408, JString, required = false,
                                 default = nil)
  if valid_606408 != nil:
    section.add "CacheParameterGroupName", valid_606408
  var valid_606409 = query.getOrDefault("Tags")
  valid_606409 = validateParameter(valid_606409, JArray, required = false,
                                 default = nil)
  if valid_606409 != nil:
    section.add "Tags", valid_606409
  var valid_606410 = query.getOrDefault("AZMode")
  valid_606410 = validateParameter(valid_606410, JString, required = false,
                                 default = newJString("single-az"))
  if valid_606410 != nil:
    section.add "AZMode", valid_606410
  var valid_606411 = query.getOrDefault("NumCacheNodes")
  valid_606411 = validateParameter(valid_606411, JInt, required = false, default = nil)
  if valid_606411 != nil:
    section.add "NumCacheNodes", valid_606411
  var valid_606412 = query.getOrDefault("SnapshotRetentionLimit")
  valid_606412 = validateParameter(valid_606412, JInt, required = false, default = nil)
  if valid_606412 != nil:
    section.add "SnapshotRetentionLimit", valid_606412
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_606413 = query.getOrDefault("CacheClusterId")
  valid_606413 = validateParameter(valid_606413, JString, required = true,
                                 default = nil)
  if valid_606413 != nil:
    section.add "CacheClusterId", valid_606413
  var valid_606414 = query.getOrDefault("PreferredAvailabilityZone")
  valid_606414 = validateParameter(valid_606414, JString, required = false,
                                 default = nil)
  if valid_606414 != nil:
    section.add "PreferredAvailabilityZone", valid_606414
  var valid_606415 = query.getOrDefault("CacheSecurityGroupNames")
  valid_606415 = validateParameter(valid_606415, JArray, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "CacheSecurityGroupNames", valid_606415
  var valid_606416 = query.getOrDefault("CacheNodeType")
  valid_606416 = validateParameter(valid_606416, JString, required = false,
                                 default = nil)
  if valid_606416 != nil:
    section.add "CacheNodeType", valid_606416
  var valid_606417 = query.getOrDefault("EngineVersion")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "EngineVersion", valid_606417
  var valid_606418 = query.getOrDefault("Action")
  valid_606418 = validateParameter(valid_606418, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_606418 != nil:
    section.add "Action", valid_606418
  var valid_606419 = query.getOrDefault("Port")
  valid_606419 = validateParameter(valid_606419, JInt, required = false, default = nil)
  if valid_606419 != nil:
    section.add "Port", valid_606419
  var valid_606420 = query.getOrDefault("ReplicationGroupId")
  valid_606420 = validateParameter(valid_606420, JString, required = false,
                                 default = nil)
  if valid_606420 != nil:
    section.add "ReplicationGroupId", valid_606420
  var valid_606421 = query.getOrDefault("CacheSubnetGroupName")
  valid_606421 = validateParameter(valid_606421, JString, required = false,
                                 default = nil)
  if valid_606421 != nil:
    section.add "CacheSubnetGroupName", valid_606421
  var valid_606422 = query.getOrDefault("NotificationTopicArn")
  valid_606422 = validateParameter(valid_606422, JString, required = false,
                                 default = nil)
  if valid_606422 != nil:
    section.add "NotificationTopicArn", valid_606422
  var valid_606423 = query.getOrDefault("PreferredAvailabilityZones")
  valid_606423 = validateParameter(valid_606423, JArray, required = false,
                                 default = nil)
  if valid_606423 != nil:
    section.add "PreferredAvailabilityZones", valid_606423
  var valid_606424 = query.getOrDefault("Version")
  valid_606424 = validateParameter(valid_606424, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606424 != nil:
    section.add "Version", valid_606424
  var valid_606425 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606425 = validateParameter(valid_606425, JString, required = false,
                                 default = nil)
  if valid_606425 != nil:
    section.add "PreferredMaintenanceWindow", valid_606425
  var valid_606426 = query.getOrDefault("SnapshotName")
  valid_606426 = validateParameter(valid_606426, JString, required = false,
                                 default = nil)
  if valid_606426 != nil:
    section.add "SnapshotName", valid_606426
  var valid_606427 = query.getOrDefault("SnapshotWindow")
  valid_606427 = validateParameter(valid_606427, JString, required = false,
                                 default = nil)
  if valid_606427 != nil:
    section.add "SnapshotWindow", valid_606427
  var valid_606428 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_606428 = validateParameter(valid_606428, JBool, required = false, default = nil)
  if valid_606428 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606428
  var valid_606429 = query.getOrDefault("SecurityGroupIds")
  valid_606429 = validateParameter(valid_606429, JArray, required = false,
                                 default = nil)
  if valid_606429 != nil:
    section.add "SecurityGroupIds", valid_606429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606430 = header.getOrDefault("X-Amz-Signature")
  valid_606430 = validateParameter(valid_606430, JString, required = false,
                                 default = nil)
  if valid_606430 != nil:
    section.add "X-Amz-Signature", valid_606430
  var valid_606431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606431 = validateParameter(valid_606431, JString, required = false,
                                 default = nil)
  if valid_606431 != nil:
    section.add "X-Amz-Content-Sha256", valid_606431
  var valid_606432 = header.getOrDefault("X-Amz-Date")
  valid_606432 = validateParameter(valid_606432, JString, required = false,
                                 default = nil)
  if valid_606432 != nil:
    section.add "X-Amz-Date", valid_606432
  var valid_606433 = header.getOrDefault("X-Amz-Credential")
  valid_606433 = validateParameter(valid_606433, JString, required = false,
                                 default = nil)
  if valid_606433 != nil:
    section.add "X-Amz-Credential", valid_606433
  var valid_606434 = header.getOrDefault("X-Amz-Security-Token")
  valid_606434 = validateParameter(valid_606434, JString, required = false,
                                 default = nil)
  if valid_606434 != nil:
    section.add "X-Amz-Security-Token", valid_606434
  var valid_606435 = header.getOrDefault("X-Amz-Algorithm")
  valid_606435 = validateParameter(valid_606435, JString, required = false,
                                 default = nil)
  if valid_606435 != nil:
    section.add "X-Amz-Algorithm", valid_606435
  var valid_606436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "X-Amz-SignedHeaders", valid_606436
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606437: Call_GetCreateCacheCluster_606402; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_606437.validator(path, query, header, formData, body)
  let scheme = call_606437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606437.url(scheme.get, call_606437.host, call_606437.base,
                         call_606437.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606437, url, valid)

proc call*(call_606438: Call_GetCreateCacheCluster_606402; CacheClusterId: string;
          SnapshotArns: JsonNode = nil; AuthToken: string = ""; Engine: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          AZMode: string = "single-az"; NumCacheNodes: int = 0;
          SnapshotRetentionLimit: int = 0; PreferredAvailabilityZone: string = "";
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "CreateCacheCluster";
          Port: int = 0; ReplicationGroupId: string = "";
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotName: string = ""; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  var query_606439 = newJObject()
  if SnapshotArns != nil:
    query_606439.add "SnapshotArns", SnapshotArns
  add(query_606439, "AuthToken", newJString(AuthToken))
  add(query_606439, "Engine", newJString(Engine))
  add(query_606439, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_606439.add "Tags", Tags
  add(query_606439, "AZMode", newJString(AZMode))
  add(query_606439, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_606439, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_606439, "CacheClusterId", newJString(CacheClusterId))
  add(query_606439, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  if CacheSecurityGroupNames != nil:
    query_606439.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_606439, "CacheNodeType", newJString(CacheNodeType))
  add(query_606439, "EngineVersion", newJString(EngineVersion))
  add(query_606439, "Action", newJString(Action))
  add(query_606439, "Port", newJInt(Port))
  add(query_606439, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_606439, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606439, "NotificationTopicArn", newJString(NotificationTopicArn))
  if PreferredAvailabilityZones != nil:
    query_606439.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_606439, "Version", newJString(Version))
  add(query_606439, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606439, "SnapshotName", newJString(SnapshotName))
  add(query_606439, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_606439, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_606439.add "SecurityGroupIds", SecurityGroupIds
  result = call_606438.call(nil, query_606439, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_606402(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_606403, base: "/",
    url: url_GetCreateCacheCluster_606404, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_606497 = ref object of OpenApiRestCall_605589
proc url_PostCreateCacheParameterGroup_606499(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheParameterGroup_606498(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606500 = query.getOrDefault("Action")
  valid_606500 = validateParameter(valid_606500, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_606500 != nil:
    section.add "Action", valid_606500
  var valid_606501 = query.getOrDefault("Version")
  valid_606501 = validateParameter(valid_606501, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606501 != nil:
    section.add "Version", valid_606501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606502 = header.getOrDefault("X-Amz-Signature")
  valid_606502 = validateParameter(valid_606502, JString, required = false,
                                 default = nil)
  if valid_606502 != nil:
    section.add "X-Amz-Signature", valid_606502
  var valid_606503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606503 = validateParameter(valid_606503, JString, required = false,
                                 default = nil)
  if valid_606503 != nil:
    section.add "X-Amz-Content-Sha256", valid_606503
  var valid_606504 = header.getOrDefault("X-Amz-Date")
  valid_606504 = validateParameter(valid_606504, JString, required = false,
                                 default = nil)
  if valid_606504 != nil:
    section.add "X-Amz-Date", valid_606504
  var valid_606505 = header.getOrDefault("X-Amz-Credential")
  valid_606505 = validateParameter(valid_606505, JString, required = false,
                                 default = nil)
  if valid_606505 != nil:
    section.add "X-Amz-Credential", valid_606505
  var valid_606506 = header.getOrDefault("X-Amz-Security-Token")
  valid_606506 = validateParameter(valid_606506, JString, required = false,
                                 default = nil)
  if valid_606506 != nil:
    section.add "X-Amz-Security-Token", valid_606506
  var valid_606507 = header.getOrDefault("X-Amz-Algorithm")
  valid_606507 = validateParameter(valid_606507, JString, required = false,
                                 default = nil)
  if valid_606507 != nil:
    section.add "X-Amz-Algorithm", valid_606507
  var valid_606508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606508 = validateParameter(valid_606508, JString, required = false,
                                 default = nil)
  if valid_606508 != nil:
    section.add "X-Amz-SignedHeaders", valid_606508
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606509 = formData.getOrDefault("Description")
  valid_606509 = validateParameter(valid_606509, JString, required = true,
                                 default = nil)
  if valid_606509 != nil:
    section.add "Description", valid_606509
  var valid_606510 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_606510 = validateParameter(valid_606510, JString, required = true,
                                 default = nil)
  if valid_606510 != nil:
    section.add "CacheParameterGroupFamily", valid_606510
  var valid_606511 = formData.getOrDefault("CacheParameterGroupName")
  valid_606511 = validateParameter(valid_606511, JString, required = true,
                                 default = nil)
  if valid_606511 != nil:
    section.add "CacheParameterGroupName", valid_606511
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606512: Call_PostCreateCacheParameterGroup_606497; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_606512.validator(path, query, header, formData, body)
  let scheme = call_606512.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606512.url(scheme.get, call_606512.host, call_606512.base,
                         call_606512.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606512, url, valid)

proc call*(call_606513: Call_PostCreateCacheParameterGroup_606497;
          Description: string; CacheParameterGroupFamily: string;
          CacheParameterGroupName: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606514 = newJObject()
  var formData_606515 = newJObject()
  add(formData_606515, "Description", newJString(Description))
  add(formData_606515, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_606515, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_606514, "Action", newJString(Action))
  add(query_606514, "Version", newJString(Version))
  result = call_606513.call(nil, query_606514, nil, formData_606515, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_606497(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_606498, base: "/",
    url: url_PostCreateCacheParameterGroup_606499,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_606479 = ref object of OpenApiRestCall_605589
proc url_GetCreateCacheParameterGroup_606481(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheParameterGroup_606480(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_606482 = query.getOrDefault("CacheParameterGroupName")
  valid_606482 = validateParameter(valid_606482, JString, required = true,
                                 default = nil)
  if valid_606482 != nil:
    section.add "CacheParameterGroupName", valid_606482
  var valid_606483 = query.getOrDefault("CacheParameterGroupFamily")
  valid_606483 = validateParameter(valid_606483, JString, required = true,
                                 default = nil)
  if valid_606483 != nil:
    section.add "CacheParameterGroupFamily", valid_606483
  var valid_606484 = query.getOrDefault("Action")
  valid_606484 = validateParameter(valid_606484, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_606484 != nil:
    section.add "Action", valid_606484
  var valid_606485 = query.getOrDefault("Description")
  valid_606485 = validateParameter(valid_606485, JString, required = true,
                                 default = nil)
  if valid_606485 != nil:
    section.add "Description", valid_606485
  var valid_606486 = query.getOrDefault("Version")
  valid_606486 = validateParameter(valid_606486, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606486 != nil:
    section.add "Version", valid_606486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606487 = header.getOrDefault("X-Amz-Signature")
  valid_606487 = validateParameter(valid_606487, JString, required = false,
                                 default = nil)
  if valid_606487 != nil:
    section.add "X-Amz-Signature", valid_606487
  var valid_606488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606488 = validateParameter(valid_606488, JString, required = false,
                                 default = nil)
  if valid_606488 != nil:
    section.add "X-Amz-Content-Sha256", valid_606488
  var valid_606489 = header.getOrDefault("X-Amz-Date")
  valid_606489 = validateParameter(valid_606489, JString, required = false,
                                 default = nil)
  if valid_606489 != nil:
    section.add "X-Amz-Date", valid_606489
  var valid_606490 = header.getOrDefault("X-Amz-Credential")
  valid_606490 = validateParameter(valid_606490, JString, required = false,
                                 default = nil)
  if valid_606490 != nil:
    section.add "X-Amz-Credential", valid_606490
  var valid_606491 = header.getOrDefault("X-Amz-Security-Token")
  valid_606491 = validateParameter(valid_606491, JString, required = false,
                                 default = nil)
  if valid_606491 != nil:
    section.add "X-Amz-Security-Token", valid_606491
  var valid_606492 = header.getOrDefault("X-Amz-Algorithm")
  valid_606492 = validateParameter(valid_606492, JString, required = false,
                                 default = nil)
  if valid_606492 != nil:
    section.add "X-Amz-Algorithm", valid_606492
  var valid_606493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606493 = validateParameter(valid_606493, JString, required = false,
                                 default = nil)
  if valid_606493 != nil:
    section.add "X-Amz-SignedHeaders", valid_606493
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606494: Call_GetCreateCacheParameterGroup_606479; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_606494.validator(path, query, header, formData, body)
  let scheme = call_606494.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606494.url(scheme.get, call_606494.host, call_606494.base,
                         call_606494.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606494, url, valid)

proc call*(call_606495: Call_GetCreateCacheParameterGroup_606479;
          CacheParameterGroupName: string; CacheParameterGroupFamily: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   Version: string (required)
  var query_606496 = newJObject()
  add(query_606496, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_606496, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_606496, "Action", newJString(Action))
  add(query_606496, "Description", newJString(Description))
  add(query_606496, "Version", newJString(Version))
  result = call_606495.call(nil, query_606496, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_606479(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_606480, base: "/",
    url: url_GetCreateCacheParameterGroup_606481,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_606533 = ref object of OpenApiRestCall_605589
proc url_PostCreateCacheSecurityGroup_606535(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheSecurityGroup_606534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606536 = query.getOrDefault("Action")
  valid_606536 = validateParameter(valid_606536, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_606536 != nil:
    section.add "Action", valid_606536
  var valid_606537 = query.getOrDefault("Version")
  valid_606537 = validateParameter(valid_606537, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606537 != nil:
    section.add "Version", valid_606537
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606538 = header.getOrDefault("X-Amz-Signature")
  valid_606538 = validateParameter(valid_606538, JString, required = false,
                                 default = nil)
  if valid_606538 != nil:
    section.add "X-Amz-Signature", valid_606538
  var valid_606539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606539 = validateParameter(valid_606539, JString, required = false,
                                 default = nil)
  if valid_606539 != nil:
    section.add "X-Amz-Content-Sha256", valid_606539
  var valid_606540 = header.getOrDefault("X-Amz-Date")
  valid_606540 = validateParameter(valid_606540, JString, required = false,
                                 default = nil)
  if valid_606540 != nil:
    section.add "X-Amz-Date", valid_606540
  var valid_606541 = header.getOrDefault("X-Amz-Credential")
  valid_606541 = validateParameter(valid_606541, JString, required = false,
                                 default = nil)
  if valid_606541 != nil:
    section.add "X-Amz-Credential", valid_606541
  var valid_606542 = header.getOrDefault("X-Amz-Security-Token")
  valid_606542 = validateParameter(valid_606542, JString, required = false,
                                 default = nil)
  if valid_606542 != nil:
    section.add "X-Amz-Security-Token", valid_606542
  var valid_606543 = header.getOrDefault("X-Amz-Algorithm")
  valid_606543 = validateParameter(valid_606543, JString, required = false,
                                 default = nil)
  if valid_606543 != nil:
    section.add "X-Amz-Algorithm", valid_606543
  var valid_606544 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606544 = validateParameter(valid_606544, JString, required = false,
                                 default = nil)
  if valid_606544 != nil:
    section.add "X-Amz-SignedHeaders", valid_606544
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606545 = formData.getOrDefault("Description")
  valid_606545 = validateParameter(valid_606545, JString, required = true,
                                 default = nil)
  if valid_606545 != nil:
    section.add "Description", valid_606545
  var valid_606546 = formData.getOrDefault("CacheSecurityGroupName")
  valid_606546 = validateParameter(valid_606546, JString, required = true,
                                 default = nil)
  if valid_606546 != nil:
    section.add "CacheSecurityGroupName", valid_606546
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606547: Call_PostCreateCacheSecurityGroup_606533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_606547.validator(path, query, header, formData, body)
  let scheme = call_606547.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606547.url(scheme.get, call_606547.host, call_606547.base,
                         call_606547.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606547, url, valid)

proc call*(call_606548: Call_PostCreateCacheSecurityGroup_606533;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606549 = newJObject()
  var formData_606550 = newJObject()
  add(formData_606550, "Description", newJString(Description))
  add(formData_606550, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_606549, "Action", newJString(Action))
  add(query_606549, "Version", newJString(Version))
  result = call_606548.call(nil, query_606549, nil, formData_606550, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_606533(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_606534, base: "/",
    url: url_PostCreateCacheSecurityGroup_606535,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_606516 = ref object of OpenApiRestCall_605589
proc url_GetCreateCacheSecurityGroup_606518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheSecurityGroup_606517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606519 = query.getOrDefault("Action")
  valid_606519 = validateParameter(valid_606519, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_606519 != nil:
    section.add "Action", valid_606519
  var valid_606520 = query.getOrDefault("Description")
  valid_606520 = validateParameter(valid_606520, JString, required = true,
                                 default = nil)
  if valid_606520 != nil:
    section.add "Description", valid_606520
  var valid_606521 = query.getOrDefault("CacheSecurityGroupName")
  valid_606521 = validateParameter(valid_606521, JString, required = true,
                                 default = nil)
  if valid_606521 != nil:
    section.add "CacheSecurityGroupName", valid_606521
  var valid_606522 = query.getOrDefault("Version")
  valid_606522 = validateParameter(valid_606522, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606522 != nil:
    section.add "Version", valid_606522
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606523 = header.getOrDefault("X-Amz-Signature")
  valid_606523 = validateParameter(valid_606523, JString, required = false,
                                 default = nil)
  if valid_606523 != nil:
    section.add "X-Amz-Signature", valid_606523
  var valid_606524 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606524 = validateParameter(valid_606524, JString, required = false,
                                 default = nil)
  if valid_606524 != nil:
    section.add "X-Amz-Content-Sha256", valid_606524
  var valid_606525 = header.getOrDefault("X-Amz-Date")
  valid_606525 = validateParameter(valid_606525, JString, required = false,
                                 default = nil)
  if valid_606525 != nil:
    section.add "X-Amz-Date", valid_606525
  var valid_606526 = header.getOrDefault("X-Amz-Credential")
  valid_606526 = validateParameter(valid_606526, JString, required = false,
                                 default = nil)
  if valid_606526 != nil:
    section.add "X-Amz-Credential", valid_606526
  var valid_606527 = header.getOrDefault("X-Amz-Security-Token")
  valid_606527 = validateParameter(valid_606527, JString, required = false,
                                 default = nil)
  if valid_606527 != nil:
    section.add "X-Amz-Security-Token", valid_606527
  var valid_606528 = header.getOrDefault("X-Amz-Algorithm")
  valid_606528 = validateParameter(valid_606528, JString, required = false,
                                 default = nil)
  if valid_606528 != nil:
    section.add "X-Amz-Algorithm", valid_606528
  var valid_606529 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606529 = validateParameter(valid_606529, JString, required = false,
                                 default = nil)
  if valid_606529 != nil:
    section.add "X-Amz-SignedHeaders", valid_606529
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606530: Call_GetCreateCacheSecurityGroup_606516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_606530.validator(path, query, header, formData, body)
  let scheme = call_606530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606530.url(scheme.get, call_606530.host, call_606530.base,
                         call_606530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606530, url, valid)

proc call*(call_606531: Call_GetCreateCacheSecurityGroup_606516;
          Description: string; CacheSecurityGroupName: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Version: string (required)
  var query_606532 = newJObject()
  add(query_606532, "Action", newJString(Action))
  add(query_606532, "Description", newJString(Description))
  add(query_606532, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_606532, "Version", newJString(Version))
  result = call_606531.call(nil, query_606532, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_606516(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_606517, base: "/",
    url: url_GetCreateCacheSecurityGroup_606518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_606569 = ref object of OpenApiRestCall_605589
proc url_PostCreateCacheSubnetGroup_606571(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCacheSubnetGroup_606570(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606572 = query.getOrDefault("Action")
  valid_606572 = validateParameter(valid_606572, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_606572 != nil:
    section.add "Action", valid_606572
  var valid_606573 = query.getOrDefault("Version")
  valid_606573 = validateParameter(valid_606573, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606573 != nil:
    section.add "Version", valid_606573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606574 = header.getOrDefault("X-Amz-Signature")
  valid_606574 = validateParameter(valid_606574, JString, required = false,
                                 default = nil)
  if valid_606574 != nil:
    section.add "X-Amz-Signature", valid_606574
  var valid_606575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606575 = validateParameter(valid_606575, JString, required = false,
                                 default = nil)
  if valid_606575 != nil:
    section.add "X-Amz-Content-Sha256", valid_606575
  var valid_606576 = header.getOrDefault("X-Amz-Date")
  valid_606576 = validateParameter(valid_606576, JString, required = false,
                                 default = nil)
  if valid_606576 != nil:
    section.add "X-Amz-Date", valid_606576
  var valid_606577 = header.getOrDefault("X-Amz-Credential")
  valid_606577 = validateParameter(valid_606577, JString, required = false,
                                 default = nil)
  if valid_606577 != nil:
    section.add "X-Amz-Credential", valid_606577
  var valid_606578 = header.getOrDefault("X-Amz-Security-Token")
  valid_606578 = validateParameter(valid_606578, JString, required = false,
                                 default = nil)
  if valid_606578 != nil:
    section.add "X-Amz-Security-Token", valid_606578
  var valid_606579 = header.getOrDefault("X-Amz-Algorithm")
  valid_606579 = validateParameter(valid_606579, JString, required = false,
                                 default = nil)
  if valid_606579 != nil:
    section.add "X-Amz-Algorithm", valid_606579
  var valid_606580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606580 = validateParameter(valid_606580, JString, required = false,
                                 default = nil)
  if valid_606580 != nil:
    section.add "X-Amz-SignedHeaders", valid_606580
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_606581 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_606581 = validateParameter(valid_606581, JString, required = true,
                                 default = nil)
  if valid_606581 != nil:
    section.add "CacheSubnetGroupDescription", valid_606581
  var valid_606582 = formData.getOrDefault("CacheSubnetGroupName")
  valid_606582 = validateParameter(valid_606582, JString, required = true,
                                 default = nil)
  if valid_606582 != nil:
    section.add "CacheSubnetGroupName", valid_606582
  var valid_606583 = formData.getOrDefault("SubnetIds")
  valid_606583 = validateParameter(valid_606583, JArray, required = true, default = nil)
  if valid_606583 != nil:
    section.add "SubnetIds", valid_606583
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606584: Call_PostCreateCacheSubnetGroup_606569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_606584.validator(path, query, header, formData, body)
  let scheme = call_606584.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606584.url(scheme.get, call_606584.host, call_606584.base,
                         call_606584.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606584, url, valid)

proc call*(call_606585: Call_PostCreateCacheSubnetGroup_606569;
          CacheSubnetGroupDescription: string; CacheSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  var query_606586 = newJObject()
  var formData_606587 = newJObject()
  add(formData_606587, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_606587, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606586, "Action", newJString(Action))
  add(query_606586, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_606587.add "SubnetIds", SubnetIds
  result = call_606585.call(nil, query_606586, nil, formData_606587, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_606569(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_606570, base: "/",
    url: url_PostCreateCacheSubnetGroup_606571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_606551 = ref object of OpenApiRestCall_605589
proc url_GetCreateCacheSubnetGroup_606553(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCacheSubnetGroup_606552(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_606554 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_606554 = validateParameter(valid_606554, JString, required = true,
                                 default = nil)
  if valid_606554 != nil:
    section.add "CacheSubnetGroupDescription", valid_606554
  var valid_606555 = query.getOrDefault("SubnetIds")
  valid_606555 = validateParameter(valid_606555, JArray, required = true, default = nil)
  if valid_606555 != nil:
    section.add "SubnetIds", valid_606555
  var valid_606556 = query.getOrDefault("Action")
  valid_606556 = validateParameter(valid_606556, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_606556 != nil:
    section.add "Action", valid_606556
  var valid_606557 = query.getOrDefault("CacheSubnetGroupName")
  valid_606557 = validateParameter(valid_606557, JString, required = true,
                                 default = nil)
  if valid_606557 != nil:
    section.add "CacheSubnetGroupName", valid_606557
  var valid_606558 = query.getOrDefault("Version")
  valid_606558 = validateParameter(valid_606558, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606558 != nil:
    section.add "Version", valid_606558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606559 = header.getOrDefault("X-Amz-Signature")
  valid_606559 = validateParameter(valid_606559, JString, required = false,
                                 default = nil)
  if valid_606559 != nil:
    section.add "X-Amz-Signature", valid_606559
  var valid_606560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606560 = validateParameter(valid_606560, JString, required = false,
                                 default = nil)
  if valid_606560 != nil:
    section.add "X-Amz-Content-Sha256", valid_606560
  var valid_606561 = header.getOrDefault("X-Amz-Date")
  valid_606561 = validateParameter(valid_606561, JString, required = false,
                                 default = nil)
  if valid_606561 != nil:
    section.add "X-Amz-Date", valid_606561
  var valid_606562 = header.getOrDefault("X-Amz-Credential")
  valid_606562 = validateParameter(valid_606562, JString, required = false,
                                 default = nil)
  if valid_606562 != nil:
    section.add "X-Amz-Credential", valid_606562
  var valid_606563 = header.getOrDefault("X-Amz-Security-Token")
  valid_606563 = validateParameter(valid_606563, JString, required = false,
                                 default = nil)
  if valid_606563 != nil:
    section.add "X-Amz-Security-Token", valid_606563
  var valid_606564 = header.getOrDefault("X-Amz-Algorithm")
  valid_606564 = validateParameter(valid_606564, JString, required = false,
                                 default = nil)
  if valid_606564 != nil:
    section.add "X-Amz-Algorithm", valid_606564
  var valid_606565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606565 = validateParameter(valid_606565, JString, required = false,
                                 default = nil)
  if valid_606565 != nil:
    section.add "X-Amz-SignedHeaders", valid_606565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606566: Call_GetCreateCacheSubnetGroup_606551; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_606566.validator(path, query, header, formData, body)
  let scheme = call_606566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606566.url(scheme.get, call_606566.host, call_606566.base,
                         call_606566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606566, url, valid)

proc call*(call_606567: Call_GetCreateCacheSubnetGroup_606551;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606568 = newJObject()
  add(query_606568, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_606568.add "SubnetIds", SubnetIds
  add(query_606568, "Action", newJString(Action))
  add(query_606568, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606568, "Version", newJString(Version))
  result = call_606567.call(nil, query_606568, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_606551(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_606552, base: "/",
    url: url_GetCreateCacheSubnetGroup_606553,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_606632 = ref object of OpenApiRestCall_605589
proc url_PostCreateReplicationGroup_606634(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateReplicationGroup_606633(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606635 = query.getOrDefault("Action")
  valid_606635 = validateParameter(valid_606635, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_606635 != nil:
    section.add "Action", valid_606635
  var valid_606636 = query.getOrDefault("Version")
  valid_606636 = validateParameter(valid_606636, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606636 != nil:
    section.add "Version", valid_606636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606637 = header.getOrDefault("X-Amz-Signature")
  valid_606637 = validateParameter(valid_606637, JString, required = false,
                                 default = nil)
  if valid_606637 != nil:
    section.add "X-Amz-Signature", valid_606637
  var valid_606638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "X-Amz-Content-Sha256", valid_606638
  var valid_606639 = header.getOrDefault("X-Amz-Date")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "X-Amz-Date", valid_606639
  var valid_606640 = header.getOrDefault("X-Amz-Credential")
  valid_606640 = validateParameter(valid_606640, JString, required = false,
                                 default = nil)
  if valid_606640 != nil:
    section.add "X-Amz-Credential", valid_606640
  var valid_606641 = header.getOrDefault("X-Amz-Security-Token")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "X-Amz-Security-Token", valid_606641
  var valid_606642 = header.getOrDefault("X-Amz-Algorithm")
  valid_606642 = validateParameter(valid_606642, JString, required = false,
                                 default = nil)
  if valid_606642 != nil:
    section.add "X-Amz-Algorithm", valid_606642
  var valid_606643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606643 = validateParameter(valid_606643, JString, required = false,
                                 default = nil)
  if valid_606643 != nil:
    section.add "X-Amz-SignedHeaders", valid_606643
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  section = newJObject()
  var valid_606644 = formData.getOrDefault("SecurityGroupIds")
  valid_606644 = validateParameter(valid_606644, JArray, required = false,
                                 default = nil)
  if valid_606644 != nil:
    section.add "SecurityGroupIds", valid_606644
  var valid_606645 = formData.getOrDefault("SnapshotWindow")
  valid_606645 = validateParameter(valid_606645, JString, required = false,
                                 default = nil)
  if valid_606645 != nil:
    section.add "SnapshotWindow", valid_606645
  var valid_606646 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606646 = validateParameter(valid_606646, JString, required = false,
                                 default = nil)
  if valid_606646 != nil:
    section.add "PreferredMaintenanceWindow", valid_606646
  var valid_606647 = formData.getOrDefault("Port")
  valid_606647 = validateParameter(valid_606647, JInt, required = false, default = nil)
  if valid_606647 != nil:
    section.add "Port", valid_606647
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_606648 = formData.getOrDefault("ReplicationGroupId")
  valid_606648 = validateParameter(valid_606648, JString, required = true,
                                 default = nil)
  if valid_606648 != nil:
    section.add "ReplicationGroupId", valid_606648
  var valid_606649 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_606649 = validateParameter(valid_606649, JArray, required = false,
                                 default = nil)
  if valid_606649 != nil:
    section.add "PreferredCacheClusterAZs", valid_606649
  var valid_606650 = formData.getOrDefault("PrimaryClusterId")
  valid_606650 = validateParameter(valid_606650, JString, required = false,
                                 default = nil)
  if valid_606650 != nil:
    section.add "PrimaryClusterId", valid_606650
  var valid_606651 = formData.getOrDefault("NotificationTopicArn")
  valid_606651 = validateParameter(valid_606651, JString, required = false,
                                 default = nil)
  if valid_606651 != nil:
    section.add "NotificationTopicArn", valid_606651
  var valid_606652 = formData.getOrDefault("EngineVersion")
  valid_606652 = validateParameter(valid_606652, JString, required = false,
                                 default = nil)
  if valid_606652 != nil:
    section.add "EngineVersion", valid_606652
  var valid_606653 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_606653 = validateParameter(valid_606653, JBool, required = false, default = nil)
  if valid_606653 != nil:
    section.add "TransitEncryptionEnabled", valid_606653
  var valid_606654 = formData.getOrDefault("KmsKeyId")
  valid_606654 = validateParameter(valid_606654, JString, required = false,
                                 default = nil)
  if valid_606654 != nil:
    section.add "KmsKeyId", valid_606654
  var valid_606655 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_606655 = validateParameter(valid_606655, JBool, required = false, default = nil)
  if valid_606655 != nil:
    section.add "AutomaticFailoverEnabled", valid_606655
  var valid_606656 = formData.getOrDefault("Engine")
  valid_606656 = validateParameter(valid_606656, JString, required = false,
                                 default = nil)
  if valid_606656 != nil:
    section.add "Engine", valid_606656
  var valid_606657 = formData.getOrDefault("NumNodeGroups")
  valid_606657 = validateParameter(valid_606657, JInt, required = false, default = nil)
  if valid_606657 != nil:
    section.add "NumNodeGroups", valid_606657
  var valid_606658 = formData.getOrDefault("CacheParameterGroupName")
  valid_606658 = validateParameter(valid_606658, JString, required = false,
                                 default = nil)
  if valid_606658 != nil:
    section.add "CacheParameterGroupName", valid_606658
  var valid_606659 = formData.getOrDefault("SnapshotArns")
  valid_606659 = validateParameter(valid_606659, JArray, required = false,
                                 default = nil)
  if valid_606659 != nil:
    section.add "SnapshotArns", valid_606659
  var valid_606660 = formData.getOrDefault("SnapshotName")
  valid_606660 = validateParameter(valid_606660, JString, required = false,
                                 default = nil)
  if valid_606660 != nil:
    section.add "SnapshotName", valid_606660
  var valid_606661 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_606661 = validateParameter(valid_606661, JBool, required = false, default = nil)
  if valid_606661 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606661
  var valid_606662 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_606662 = validateParameter(valid_606662, JBool, required = false, default = nil)
  if valid_606662 != nil:
    section.add "AtRestEncryptionEnabled", valid_606662
  var valid_606663 = formData.getOrDefault("NodeGroupConfiguration")
  valid_606663 = validateParameter(valid_606663, JArray, required = false,
                                 default = nil)
  if valid_606663 != nil:
    section.add "NodeGroupConfiguration", valid_606663
  var valid_606664 = formData.getOrDefault("CacheSubnetGroupName")
  valid_606664 = validateParameter(valid_606664, JString, required = false,
                                 default = nil)
  if valid_606664 != nil:
    section.add "CacheSubnetGroupName", valid_606664
  var valid_606665 = formData.getOrDefault("AuthToken")
  valid_606665 = validateParameter(valid_606665, JString, required = false,
                                 default = nil)
  if valid_606665 != nil:
    section.add "AuthToken", valid_606665
  var valid_606666 = formData.getOrDefault("ReplicationGroupDescription")
  valid_606666 = validateParameter(valid_606666, JString, required = true,
                                 default = nil)
  if valid_606666 != nil:
    section.add "ReplicationGroupDescription", valid_606666
  var valid_606667 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_606667 = validateParameter(valid_606667, JArray, required = false,
                                 default = nil)
  if valid_606667 != nil:
    section.add "CacheSecurityGroupNames", valid_606667
  var valid_606668 = formData.getOrDefault("Tags")
  valid_606668 = validateParameter(valid_606668, JArray, required = false,
                                 default = nil)
  if valid_606668 != nil:
    section.add "Tags", valid_606668
  var valid_606669 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_606669 = validateParameter(valid_606669, JInt, required = false, default = nil)
  if valid_606669 != nil:
    section.add "SnapshotRetentionLimit", valid_606669
  var valid_606670 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_606670 = validateParameter(valid_606670, JInt, required = false, default = nil)
  if valid_606670 != nil:
    section.add "ReplicasPerNodeGroup", valid_606670
  var valid_606671 = formData.getOrDefault("CacheNodeType")
  valid_606671 = validateParameter(valid_606671, JString, required = false,
                                 default = nil)
  if valid_606671 != nil:
    section.add "CacheNodeType", valid_606671
  var valid_606672 = formData.getOrDefault("NumCacheClusters")
  valid_606672 = validateParameter(valid_606672, JInt, required = false, default = nil)
  if valid_606672 != nil:
    section.add "NumCacheClusters", valid_606672
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606673: Call_PostCreateReplicationGroup_606632; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606673.validator(path, query, header, formData, body)
  let scheme = call_606673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606673.url(scheme.get, call_606673.host, call_606673.base,
                         call_606673.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606673, url, valid)

proc call*(call_606674: Call_PostCreateReplicationGroup_606632;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          SecurityGroupIds: JsonNode = nil; SnapshotWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Port: int = 0;
          PreferredCacheClusterAZs: JsonNode = nil; PrimaryClusterId: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          TransitEncryptionEnabled: bool = false; KmsKeyId: string = "";
          AutomaticFailoverEnabled: bool = false; Engine: string = "";
          NumNodeGroups: int = 0; CacheParameterGroupName: string = "";
          SnapshotArns: JsonNode = nil; SnapshotName: string = "";
          AutoMinorVersionUpgrade: bool = false;
          AtRestEncryptionEnabled: bool = false;
          NodeGroupConfiguration: JsonNode = nil; CacheSubnetGroupName: string = "";
          Action: string = "CreateReplicationGroup"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; Tags: JsonNode = nil;
          SnapshotRetentionLimit: int = 0; ReplicasPerNodeGroup: int = 0;
          Version: string = "2015-02-02"; CacheNodeType: string = "";
          NumCacheClusters: int = 0): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   Version: string (required)
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  var query_606675 = newJObject()
  var formData_606676 = newJObject()
  if SecurityGroupIds != nil:
    formData_606676.add "SecurityGroupIds", SecurityGroupIds
  add(formData_606676, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_606676, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606676, "Port", newJInt(Port))
  add(formData_606676, "ReplicationGroupId", newJString(ReplicationGroupId))
  if PreferredCacheClusterAZs != nil:
    formData_606676.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_606676, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_606676, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_606676, "EngineVersion", newJString(EngineVersion))
  add(formData_606676, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_606676, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606676, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_606676, "Engine", newJString(Engine))
  add(formData_606676, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_606676, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if SnapshotArns != nil:
    formData_606676.add "SnapshotArns", SnapshotArns
  add(formData_606676, "SnapshotName", newJString(SnapshotName))
  add(formData_606676, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_606676, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  if NodeGroupConfiguration != nil:
    formData_606676.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_606676, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606675, "Action", newJString(Action))
  add(formData_606676, "AuthToken", newJString(AuthToken))
  add(formData_606676, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_606676.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  if Tags != nil:
    formData_606676.add "Tags", Tags
  add(formData_606676, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_606676, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_606675, "Version", newJString(Version))
  add(formData_606676, "CacheNodeType", newJString(CacheNodeType))
  add(formData_606676, "NumCacheClusters", newJInt(NumCacheClusters))
  result = call_606674.call(nil, query_606675, nil, formData_606676, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_606632(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_606633, base: "/",
    url: url_PostCreateReplicationGroup_606634,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_606588 = ref object of OpenApiRestCall_605589
proc url_GetCreateReplicationGroup_606590(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateReplicationGroup_606589(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  section = newJObject()
  var valid_606591 = query.getOrDefault("SnapshotArns")
  valid_606591 = validateParameter(valid_606591, JArray, required = false,
                                 default = nil)
  if valid_606591 != nil:
    section.add "SnapshotArns", valid_606591
  var valid_606592 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_606592 = validateParameter(valid_606592, JArray, required = false,
                                 default = nil)
  if valid_606592 != nil:
    section.add "PreferredCacheClusterAZs", valid_606592
  var valid_606593 = query.getOrDefault("AuthToken")
  valid_606593 = validateParameter(valid_606593, JString, required = false,
                                 default = nil)
  if valid_606593 != nil:
    section.add "AuthToken", valid_606593
  assert query != nil, "query argument is necessary due to required `ReplicationGroupDescription` field"
  var valid_606594 = query.getOrDefault("ReplicationGroupDescription")
  valid_606594 = validateParameter(valid_606594, JString, required = true,
                                 default = nil)
  if valid_606594 != nil:
    section.add "ReplicationGroupDescription", valid_606594
  var valid_606595 = query.getOrDefault("Engine")
  valid_606595 = validateParameter(valid_606595, JString, required = false,
                                 default = nil)
  if valid_606595 != nil:
    section.add "Engine", valid_606595
  var valid_606596 = query.getOrDefault("NumNodeGroups")
  valid_606596 = validateParameter(valid_606596, JInt, required = false, default = nil)
  if valid_606596 != nil:
    section.add "NumNodeGroups", valid_606596
  var valid_606597 = query.getOrDefault("CacheParameterGroupName")
  valid_606597 = validateParameter(valid_606597, JString, required = false,
                                 default = nil)
  if valid_606597 != nil:
    section.add "CacheParameterGroupName", valid_606597
  var valid_606598 = query.getOrDefault("Tags")
  valid_606598 = validateParameter(valid_606598, JArray, required = false,
                                 default = nil)
  if valid_606598 != nil:
    section.add "Tags", valid_606598
  var valid_606599 = query.getOrDefault("KmsKeyId")
  valid_606599 = validateParameter(valid_606599, JString, required = false,
                                 default = nil)
  if valid_606599 != nil:
    section.add "KmsKeyId", valid_606599
  var valid_606600 = query.getOrDefault("SnapshotRetentionLimit")
  valid_606600 = validateParameter(valid_606600, JInt, required = false, default = nil)
  if valid_606600 != nil:
    section.add "SnapshotRetentionLimit", valid_606600
  var valid_606601 = query.getOrDefault("TransitEncryptionEnabled")
  valid_606601 = validateParameter(valid_606601, JBool, required = false, default = nil)
  if valid_606601 != nil:
    section.add "TransitEncryptionEnabled", valid_606601
  var valid_606602 = query.getOrDefault("CacheSecurityGroupNames")
  valid_606602 = validateParameter(valid_606602, JArray, required = false,
                                 default = nil)
  if valid_606602 != nil:
    section.add "CacheSecurityGroupNames", valid_606602
  var valid_606603 = query.getOrDefault("PrimaryClusterId")
  valid_606603 = validateParameter(valid_606603, JString, required = false,
                                 default = nil)
  if valid_606603 != nil:
    section.add "PrimaryClusterId", valid_606603
  var valid_606604 = query.getOrDefault("CacheNodeType")
  valid_606604 = validateParameter(valid_606604, JString, required = false,
                                 default = nil)
  if valid_606604 != nil:
    section.add "CacheNodeType", valid_606604
  var valid_606605 = query.getOrDefault("EngineVersion")
  valid_606605 = validateParameter(valid_606605, JString, required = false,
                                 default = nil)
  if valid_606605 != nil:
    section.add "EngineVersion", valid_606605
  var valid_606606 = query.getOrDefault("NumCacheClusters")
  valid_606606 = validateParameter(valid_606606, JInt, required = false, default = nil)
  if valid_606606 != nil:
    section.add "NumCacheClusters", valid_606606
  var valid_606607 = query.getOrDefault("Action")
  valid_606607 = validateParameter(valid_606607, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_606607 != nil:
    section.add "Action", valid_606607
  var valid_606608 = query.getOrDefault("NodeGroupConfiguration")
  valid_606608 = validateParameter(valid_606608, JArray, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "NodeGroupConfiguration", valid_606608
  var valid_606609 = query.getOrDefault("Port")
  valid_606609 = validateParameter(valid_606609, JInt, required = false, default = nil)
  if valid_606609 != nil:
    section.add "Port", valid_606609
  var valid_606610 = query.getOrDefault("ReplicationGroupId")
  valid_606610 = validateParameter(valid_606610, JString, required = true,
                                 default = nil)
  if valid_606610 != nil:
    section.add "ReplicationGroupId", valid_606610
  var valid_606611 = query.getOrDefault("CacheSubnetGroupName")
  valid_606611 = validateParameter(valid_606611, JString, required = false,
                                 default = nil)
  if valid_606611 != nil:
    section.add "CacheSubnetGroupName", valid_606611
  var valid_606612 = query.getOrDefault("NotificationTopicArn")
  valid_606612 = validateParameter(valid_606612, JString, required = false,
                                 default = nil)
  if valid_606612 != nil:
    section.add "NotificationTopicArn", valid_606612
  var valid_606613 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_606613 = validateParameter(valid_606613, JBool, required = false, default = nil)
  if valid_606613 != nil:
    section.add "AutomaticFailoverEnabled", valid_606613
  var valid_606614 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_606614 = validateParameter(valid_606614, JBool, required = false, default = nil)
  if valid_606614 != nil:
    section.add "AtRestEncryptionEnabled", valid_606614
  var valid_606615 = query.getOrDefault("Version")
  valid_606615 = validateParameter(valid_606615, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606615 != nil:
    section.add "Version", valid_606615
  var valid_606616 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606616 = validateParameter(valid_606616, JString, required = false,
                                 default = nil)
  if valid_606616 != nil:
    section.add "PreferredMaintenanceWindow", valid_606616
  var valid_606617 = query.getOrDefault("SnapshotName")
  valid_606617 = validateParameter(valid_606617, JString, required = false,
                                 default = nil)
  if valid_606617 != nil:
    section.add "SnapshotName", valid_606617
  var valid_606618 = query.getOrDefault("SnapshotWindow")
  valid_606618 = validateParameter(valid_606618, JString, required = false,
                                 default = nil)
  if valid_606618 != nil:
    section.add "SnapshotWindow", valid_606618
  var valid_606619 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_606619 = validateParameter(valid_606619, JInt, required = false, default = nil)
  if valid_606619 != nil:
    section.add "ReplicasPerNodeGroup", valid_606619
  var valid_606620 = query.getOrDefault("SecurityGroupIds")
  valid_606620 = validateParameter(valid_606620, JArray, required = false,
                                 default = nil)
  if valid_606620 != nil:
    section.add "SecurityGroupIds", valid_606620
  var valid_606621 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_606621 = validateParameter(valid_606621, JBool, required = false, default = nil)
  if valid_606621 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606621
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606622 = header.getOrDefault("X-Amz-Signature")
  valid_606622 = validateParameter(valid_606622, JString, required = false,
                                 default = nil)
  if valid_606622 != nil:
    section.add "X-Amz-Signature", valid_606622
  var valid_606623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606623 = validateParameter(valid_606623, JString, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "X-Amz-Content-Sha256", valid_606623
  var valid_606624 = header.getOrDefault("X-Amz-Date")
  valid_606624 = validateParameter(valid_606624, JString, required = false,
                                 default = nil)
  if valid_606624 != nil:
    section.add "X-Amz-Date", valid_606624
  var valid_606625 = header.getOrDefault("X-Amz-Credential")
  valid_606625 = validateParameter(valid_606625, JString, required = false,
                                 default = nil)
  if valid_606625 != nil:
    section.add "X-Amz-Credential", valid_606625
  var valid_606626 = header.getOrDefault("X-Amz-Security-Token")
  valid_606626 = validateParameter(valid_606626, JString, required = false,
                                 default = nil)
  if valid_606626 != nil:
    section.add "X-Amz-Security-Token", valid_606626
  var valid_606627 = header.getOrDefault("X-Amz-Algorithm")
  valid_606627 = validateParameter(valid_606627, JString, required = false,
                                 default = nil)
  if valid_606627 != nil:
    section.add "X-Amz-Algorithm", valid_606627
  var valid_606628 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606628 = validateParameter(valid_606628, JString, required = false,
                                 default = nil)
  if valid_606628 != nil:
    section.add "X-Amz-SignedHeaders", valid_606628
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606629: Call_GetCreateReplicationGroup_606588; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606629.validator(path, query, header, formData, body)
  let scheme = call_606629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606629.url(scheme.get, call_606629.host, call_606629.base,
                         call_606629.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606629, url, valid)

proc call*(call_606630: Call_GetCreateReplicationGroup_606588;
          ReplicationGroupDescription: string; ReplicationGroupId: string;
          SnapshotArns: JsonNode = nil; PreferredCacheClusterAZs: JsonNode = nil;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          KmsKeyId: string = ""; SnapshotRetentionLimit: int = 0;
          TransitEncryptionEnabled: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          NumCacheClusters: int = 0; Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; Port: int = 0;
          CacheSubnetGroupName: string = ""; NotificationTopicArn: string = "";
          AutomaticFailoverEnabled: bool = false;
          AtRestEncryptionEnabled: bool = false; Version: string = "2015-02-02";
          PreferredMaintenanceWindow: string = ""; SnapshotName: string = "";
          SnapshotWindow: string = ""; ReplicasPerNodeGroup: int = 0;
          SecurityGroupIds: JsonNode = nil; AutoMinorVersionUpgrade: bool = false): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>The only permitted printable special characters are !, &amp;, #, $, ^, &lt;, &gt;, and -. Other printable special characters cannot be used in the AUTH token.</p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  var query_606631 = newJObject()
  if SnapshotArns != nil:
    query_606631.add "SnapshotArns", SnapshotArns
  if PreferredCacheClusterAZs != nil:
    query_606631.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(query_606631, "AuthToken", newJString(AuthToken))
  add(query_606631, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_606631, "Engine", newJString(Engine))
  add(query_606631, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_606631, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_606631.add "Tags", Tags
  add(query_606631, "KmsKeyId", newJString(KmsKeyId))
  add(query_606631, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_606631, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  if CacheSecurityGroupNames != nil:
    query_606631.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_606631, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_606631, "CacheNodeType", newJString(CacheNodeType))
  add(query_606631, "EngineVersion", newJString(EngineVersion))
  add(query_606631, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_606631, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_606631.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_606631, "Port", newJInt(Port))
  add(query_606631, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_606631, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606631, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_606631, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_606631, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  add(query_606631, "Version", newJString(Version))
  add(query_606631, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606631, "SnapshotName", newJString(SnapshotName))
  add(query_606631, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_606631, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  if SecurityGroupIds != nil:
    query_606631.add "SecurityGroupIds", SecurityGroupIds
  add(query_606631, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  result = call_606630.call(nil, query_606631, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_606588(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_606589, base: "/",
    url: url_GetCreateReplicationGroup_606590,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_606696 = ref object of OpenApiRestCall_605589
proc url_PostCreateSnapshot_606698(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateSnapshot_606697(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606699 = query.getOrDefault("Action")
  valid_606699 = validateParameter(valid_606699, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_606699 != nil:
    section.add "Action", valid_606699
  var valid_606700 = query.getOrDefault("Version")
  valid_606700 = validateParameter(valid_606700, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606700 != nil:
    section.add "Version", valid_606700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606701 = header.getOrDefault("X-Amz-Signature")
  valid_606701 = validateParameter(valid_606701, JString, required = false,
                                 default = nil)
  if valid_606701 != nil:
    section.add "X-Amz-Signature", valid_606701
  var valid_606702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606702 = validateParameter(valid_606702, JString, required = false,
                                 default = nil)
  if valid_606702 != nil:
    section.add "X-Amz-Content-Sha256", valid_606702
  var valid_606703 = header.getOrDefault("X-Amz-Date")
  valid_606703 = validateParameter(valid_606703, JString, required = false,
                                 default = nil)
  if valid_606703 != nil:
    section.add "X-Amz-Date", valid_606703
  var valid_606704 = header.getOrDefault("X-Amz-Credential")
  valid_606704 = validateParameter(valid_606704, JString, required = false,
                                 default = nil)
  if valid_606704 != nil:
    section.add "X-Amz-Credential", valid_606704
  var valid_606705 = header.getOrDefault("X-Amz-Security-Token")
  valid_606705 = validateParameter(valid_606705, JString, required = false,
                                 default = nil)
  if valid_606705 != nil:
    section.add "X-Amz-Security-Token", valid_606705
  var valid_606706 = header.getOrDefault("X-Amz-Algorithm")
  valid_606706 = validateParameter(valid_606706, JString, required = false,
                                 default = nil)
  if valid_606706 != nil:
    section.add "X-Amz-Algorithm", valid_606706
  var valid_606707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "X-Amz-SignedHeaders", valid_606707
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  section = newJObject()
  var valid_606708 = formData.getOrDefault("CacheClusterId")
  valid_606708 = validateParameter(valid_606708, JString, required = false,
                                 default = nil)
  if valid_606708 != nil:
    section.add "CacheClusterId", valid_606708
  var valid_606709 = formData.getOrDefault("KmsKeyId")
  valid_606709 = validateParameter(valid_606709, JString, required = false,
                                 default = nil)
  if valid_606709 != nil:
    section.add "KmsKeyId", valid_606709
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_606710 = formData.getOrDefault("SnapshotName")
  valid_606710 = validateParameter(valid_606710, JString, required = true,
                                 default = nil)
  if valid_606710 != nil:
    section.add "SnapshotName", valid_606710
  var valid_606711 = formData.getOrDefault("ReplicationGroupId")
  valid_606711 = validateParameter(valid_606711, JString, required = false,
                                 default = nil)
  if valid_606711 != nil:
    section.add "ReplicationGroupId", valid_606711
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606712: Call_PostCreateSnapshot_606696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606712.validator(path, query, header, formData, body)
  let scheme = call_606712.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606712.url(scheme.get, call_606712.host, call_606712.base,
                         call_606712.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606712, url, valid)

proc call*(call_606713: Call_PostCreateSnapshot_606696; SnapshotName: string;
          CacheClusterId: string = ""; KmsKeyId: string = "";
          Action: string = "CreateSnapshot"; Version: string = "2015-02-02";
          ReplicationGroupId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  var query_606714 = newJObject()
  var formData_606715 = newJObject()
  add(formData_606715, "CacheClusterId", newJString(CacheClusterId))
  add(formData_606715, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606715, "SnapshotName", newJString(SnapshotName))
  add(query_606714, "Action", newJString(Action))
  add(query_606714, "Version", newJString(Version))
  add(formData_606715, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_606713.call(nil, query_606714, nil, formData_606715, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_606696(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_606697, base: "/",
    url: url_PostCreateSnapshot_606698, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_606677 = ref object of OpenApiRestCall_605589
proc url_GetCreateSnapshot_606679(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateSnapshot_606678(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  section = newJObject()
  var valid_606680 = query.getOrDefault("KmsKeyId")
  valid_606680 = validateParameter(valid_606680, JString, required = false,
                                 default = nil)
  if valid_606680 != nil:
    section.add "KmsKeyId", valid_606680
  var valid_606681 = query.getOrDefault("CacheClusterId")
  valid_606681 = validateParameter(valid_606681, JString, required = false,
                                 default = nil)
  if valid_606681 != nil:
    section.add "CacheClusterId", valid_606681
  var valid_606682 = query.getOrDefault("Action")
  valid_606682 = validateParameter(valid_606682, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_606682 != nil:
    section.add "Action", valid_606682
  var valid_606683 = query.getOrDefault("ReplicationGroupId")
  valid_606683 = validateParameter(valid_606683, JString, required = false,
                                 default = nil)
  if valid_606683 != nil:
    section.add "ReplicationGroupId", valid_606683
  var valid_606684 = query.getOrDefault("Version")
  valid_606684 = validateParameter(valid_606684, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606684 != nil:
    section.add "Version", valid_606684
  var valid_606685 = query.getOrDefault("SnapshotName")
  valid_606685 = validateParameter(valid_606685, JString, required = true,
                                 default = nil)
  if valid_606685 != nil:
    section.add "SnapshotName", valid_606685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606686 = header.getOrDefault("X-Amz-Signature")
  valid_606686 = validateParameter(valid_606686, JString, required = false,
                                 default = nil)
  if valid_606686 != nil:
    section.add "X-Amz-Signature", valid_606686
  var valid_606687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606687 = validateParameter(valid_606687, JString, required = false,
                                 default = nil)
  if valid_606687 != nil:
    section.add "X-Amz-Content-Sha256", valid_606687
  var valid_606688 = header.getOrDefault("X-Amz-Date")
  valid_606688 = validateParameter(valid_606688, JString, required = false,
                                 default = nil)
  if valid_606688 != nil:
    section.add "X-Amz-Date", valid_606688
  var valid_606689 = header.getOrDefault("X-Amz-Credential")
  valid_606689 = validateParameter(valid_606689, JString, required = false,
                                 default = nil)
  if valid_606689 != nil:
    section.add "X-Amz-Credential", valid_606689
  var valid_606690 = header.getOrDefault("X-Amz-Security-Token")
  valid_606690 = validateParameter(valid_606690, JString, required = false,
                                 default = nil)
  if valid_606690 != nil:
    section.add "X-Amz-Security-Token", valid_606690
  var valid_606691 = header.getOrDefault("X-Amz-Algorithm")
  valid_606691 = validateParameter(valid_606691, JString, required = false,
                                 default = nil)
  if valid_606691 != nil:
    section.add "X-Amz-Algorithm", valid_606691
  var valid_606692 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606692 = validateParameter(valid_606692, JString, required = false,
                                 default = nil)
  if valid_606692 != nil:
    section.add "X-Amz-SignedHeaders", valid_606692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606693: Call_GetCreateSnapshot_606677; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606693.validator(path, query, header, formData, body)
  let scheme = call_606693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606693.url(scheme.get, call_606693.host, call_606693.base,
                         call_606693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606693, url, valid)

proc call*(call_606694: Call_GetCreateSnapshot_606677; SnapshotName: string;
          KmsKeyId: string = ""; CacheClusterId: string = "";
          Action: string = "CreateSnapshot"; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  var query_606695 = newJObject()
  add(query_606695, "KmsKeyId", newJString(KmsKeyId))
  add(query_606695, "CacheClusterId", newJString(CacheClusterId))
  add(query_606695, "Action", newJString(Action))
  add(query_606695, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_606695, "Version", newJString(Version))
  add(query_606695, "SnapshotName", newJString(SnapshotName))
  result = call_606694.call(nil, query_606695, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_606677(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_606678,
    base: "/", url: url_GetCreateSnapshot_606679,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_606736 = ref object of OpenApiRestCall_605589
proc url_PostDecreaseReplicaCount_606738(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDecreaseReplicaCount_606737(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606739 = query.getOrDefault("Action")
  valid_606739 = validateParameter(valid_606739, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_606739 != nil:
    section.add "Action", valid_606739
  var valid_606740 = query.getOrDefault("Version")
  valid_606740 = validateParameter(valid_606740, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606740 != nil:
    section.add "Version", valid_606740
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606741 = header.getOrDefault("X-Amz-Signature")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "X-Amz-Signature", valid_606741
  var valid_606742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606742 = validateParameter(valid_606742, JString, required = false,
                                 default = nil)
  if valid_606742 != nil:
    section.add "X-Amz-Content-Sha256", valid_606742
  var valid_606743 = header.getOrDefault("X-Amz-Date")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "X-Amz-Date", valid_606743
  var valid_606744 = header.getOrDefault("X-Amz-Credential")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-Credential", valid_606744
  var valid_606745 = header.getOrDefault("X-Amz-Security-Token")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "X-Amz-Security-Token", valid_606745
  var valid_606746 = header.getOrDefault("X-Amz-Algorithm")
  valid_606746 = validateParameter(valid_606746, JString, required = false,
                                 default = nil)
  if valid_606746 != nil:
    section.add "X-Amz-Algorithm", valid_606746
  var valid_606747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606747 = validateParameter(valid_606747, JString, required = false,
                                 default = nil)
  if valid_606747 != nil:
    section.add "X-Amz-SignedHeaders", valid_606747
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  section = newJObject()
  var valid_606748 = formData.getOrDefault("ReplicaConfiguration")
  valid_606748 = validateParameter(valid_606748, JArray, required = false,
                                 default = nil)
  if valid_606748 != nil:
    section.add "ReplicaConfiguration", valid_606748
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_606749 = formData.getOrDefault("ApplyImmediately")
  valid_606749 = validateParameter(valid_606749, JBool, required = true, default = nil)
  if valid_606749 != nil:
    section.add "ApplyImmediately", valid_606749
  var valid_606750 = formData.getOrDefault("ReplicasToRemove")
  valid_606750 = validateParameter(valid_606750, JArray, required = false,
                                 default = nil)
  if valid_606750 != nil:
    section.add "ReplicasToRemove", valid_606750
  var valid_606751 = formData.getOrDefault("NewReplicaCount")
  valid_606751 = validateParameter(valid_606751, JInt, required = false, default = nil)
  if valid_606751 != nil:
    section.add "NewReplicaCount", valid_606751
  var valid_606752 = formData.getOrDefault("ReplicationGroupId")
  valid_606752 = validateParameter(valid_606752, JString, required = true,
                                 default = nil)
  if valid_606752 != nil:
    section.add "ReplicationGroupId", valid_606752
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606753: Call_PostDecreaseReplicaCount_606736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_606753.validator(path, query, header, formData, body)
  let scheme = call_606753.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606753.url(scheme.get, call_606753.host, call_606753.base,
                         call_606753.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606753, url, valid)

proc call*(call_606754: Call_PostDecreaseReplicaCount_606736;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil; ReplicasToRemove: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  var query_606755 = newJObject()
  var formData_606756 = newJObject()
  if ReplicaConfiguration != nil:
    formData_606756.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_606756, "ApplyImmediately", newJBool(ApplyImmediately))
  if ReplicasToRemove != nil:
    formData_606756.add "ReplicasToRemove", ReplicasToRemove
  add(query_606755, "Action", newJString(Action))
  add(formData_606756, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_606755, "Version", newJString(Version))
  add(formData_606756, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_606754.call(nil, query_606755, nil, formData_606756, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_606736(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_606737, base: "/",
    url: url_PostDecreaseReplicaCount_606738, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_606716 = ref object of OpenApiRestCall_605589
proc url_GetDecreaseReplicaCount_606718(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDecreaseReplicaCount_606717(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  section = newJObject()
  var valid_606719 = query.getOrDefault("NewReplicaCount")
  valid_606719 = validateParameter(valid_606719, JInt, required = false, default = nil)
  if valid_606719 != nil:
    section.add "NewReplicaCount", valid_606719
  var valid_606720 = query.getOrDefault("ReplicaConfiguration")
  valid_606720 = validateParameter(valid_606720, JArray, required = false,
                                 default = nil)
  if valid_606720 != nil:
    section.add "ReplicaConfiguration", valid_606720
  var valid_606721 = query.getOrDefault("Action")
  valid_606721 = validateParameter(valid_606721, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_606721 != nil:
    section.add "Action", valid_606721
  var valid_606722 = query.getOrDefault("ApplyImmediately")
  valid_606722 = validateParameter(valid_606722, JBool, required = true, default = nil)
  if valid_606722 != nil:
    section.add "ApplyImmediately", valid_606722
  var valid_606723 = query.getOrDefault("ReplicationGroupId")
  valid_606723 = validateParameter(valid_606723, JString, required = true,
                                 default = nil)
  if valid_606723 != nil:
    section.add "ReplicationGroupId", valid_606723
  var valid_606724 = query.getOrDefault("Version")
  valid_606724 = validateParameter(valid_606724, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606724 != nil:
    section.add "Version", valid_606724
  var valid_606725 = query.getOrDefault("ReplicasToRemove")
  valid_606725 = validateParameter(valid_606725, JArray, required = false,
                                 default = nil)
  if valid_606725 != nil:
    section.add "ReplicasToRemove", valid_606725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606726 = header.getOrDefault("X-Amz-Signature")
  valid_606726 = validateParameter(valid_606726, JString, required = false,
                                 default = nil)
  if valid_606726 != nil:
    section.add "X-Amz-Signature", valid_606726
  var valid_606727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606727 = validateParameter(valid_606727, JString, required = false,
                                 default = nil)
  if valid_606727 != nil:
    section.add "X-Amz-Content-Sha256", valid_606727
  var valid_606728 = header.getOrDefault("X-Amz-Date")
  valid_606728 = validateParameter(valid_606728, JString, required = false,
                                 default = nil)
  if valid_606728 != nil:
    section.add "X-Amz-Date", valid_606728
  var valid_606729 = header.getOrDefault("X-Amz-Credential")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "X-Amz-Credential", valid_606729
  var valid_606730 = header.getOrDefault("X-Amz-Security-Token")
  valid_606730 = validateParameter(valid_606730, JString, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "X-Amz-Security-Token", valid_606730
  var valid_606731 = header.getOrDefault("X-Amz-Algorithm")
  valid_606731 = validateParameter(valid_606731, JString, required = false,
                                 default = nil)
  if valid_606731 != nil:
    section.add "X-Amz-Algorithm", valid_606731
  var valid_606732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606732 = validateParameter(valid_606732, JString, required = false,
                                 default = nil)
  if valid_606732 != nil:
    section.add "X-Amz-SignedHeaders", valid_606732
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606733: Call_GetDecreaseReplicaCount_606716; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_606733.validator(path, query, header, formData, body)
  let scheme = call_606733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606733.url(scheme.get, call_606733.host, call_606733.base,
                         call_606733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606733, url, valid)

proc call*(call_606734: Call_GetDecreaseReplicaCount_606716;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; Version: string = "2015-02-02";
          ReplicasToRemove: JsonNode = nil): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  var query_606735 = newJObject()
  add(query_606735, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_606735.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_606735, "Action", newJString(Action))
  add(query_606735, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_606735, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_606735, "Version", newJString(Version))
  if ReplicasToRemove != nil:
    query_606735.add "ReplicasToRemove", ReplicasToRemove
  result = call_606734.call(nil, query_606735, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_606716(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_606717, base: "/",
    url: url_GetDecreaseReplicaCount_606718, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_606774 = ref object of OpenApiRestCall_605589
proc url_PostDeleteCacheCluster_606776(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheCluster_606775(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606777 = query.getOrDefault("Action")
  valid_606777 = validateParameter(valid_606777, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_606777 != nil:
    section.add "Action", valid_606777
  var valid_606778 = query.getOrDefault("Version")
  valid_606778 = validateParameter(valid_606778, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606778 != nil:
    section.add "Version", valid_606778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606779 = header.getOrDefault("X-Amz-Signature")
  valid_606779 = validateParameter(valid_606779, JString, required = false,
                                 default = nil)
  if valid_606779 != nil:
    section.add "X-Amz-Signature", valid_606779
  var valid_606780 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606780 = validateParameter(valid_606780, JString, required = false,
                                 default = nil)
  if valid_606780 != nil:
    section.add "X-Amz-Content-Sha256", valid_606780
  var valid_606781 = header.getOrDefault("X-Amz-Date")
  valid_606781 = validateParameter(valid_606781, JString, required = false,
                                 default = nil)
  if valid_606781 != nil:
    section.add "X-Amz-Date", valid_606781
  var valid_606782 = header.getOrDefault("X-Amz-Credential")
  valid_606782 = validateParameter(valid_606782, JString, required = false,
                                 default = nil)
  if valid_606782 != nil:
    section.add "X-Amz-Credential", valid_606782
  var valid_606783 = header.getOrDefault("X-Amz-Security-Token")
  valid_606783 = validateParameter(valid_606783, JString, required = false,
                                 default = nil)
  if valid_606783 != nil:
    section.add "X-Amz-Security-Token", valid_606783
  var valid_606784 = header.getOrDefault("X-Amz-Algorithm")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "X-Amz-Algorithm", valid_606784
  var valid_606785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606785 = validateParameter(valid_606785, JString, required = false,
                                 default = nil)
  if valid_606785 != nil:
    section.add "X-Amz-SignedHeaders", valid_606785
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_606786 = formData.getOrDefault("CacheClusterId")
  valid_606786 = validateParameter(valid_606786, JString, required = true,
                                 default = nil)
  if valid_606786 != nil:
    section.add "CacheClusterId", valid_606786
  var valid_606787 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_606787 = validateParameter(valid_606787, JString, required = false,
                                 default = nil)
  if valid_606787 != nil:
    section.add "FinalSnapshotIdentifier", valid_606787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606788: Call_PostDeleteCacheCluster_606774; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_606788.validator(path, query, header, formData, body)
  let scheme = call_606788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606788.url(scheme.get, call_606788.host, call_606788.base,
                         call_606788.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606788, url, valid)

proc call*(call_606789: Call_PostDeleteCacheCluster_606774; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606790 = newJObject()
  var formData_606791 = newJObject()
  add(formData_606791, "CacheClusterId", newJString(CacheClusterId))
  add(formData_606791, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_606790, "Action", newJString(Action))
  add(query_606790, "Version", newJString(Version))
  result = call_606789.call(nil, query_606790, nil, formData_606791, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_606774(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_606775, base: "/",
    url: url_PostDeleteCacheCluster_606776, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_606757 = ref object of OpenApiRestCall_605589
proc url_GetDeleteCacheCluster_606759(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheCluster_606758(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606760 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_606760 = validateParameter(valid_606760, JString, required = false,
                                 default = nil)
  if valid_606760 != nil:
    section.add "FinalSnapshotIdentifier", valid_606760
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_606761 = query.getOrDefault("CacheClusterId")
  valid_606761 = validateParameter(valid_606761, JString, required = true,
                                 default = nil)
  if valid_606761 != nil:
    section.add "CacheClusterId", valid_606761
  var valid_606762 = query.getOrDefault("Action")
  valid_606762 = validateParameter(valid_606762, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_606762 != nil:
    section.add "Action", valid_606762
  var valid_606763 = query.getOrDefault("Version")
  valid_606763 = validateParameter(valid_606763, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606763 != nil:
    section.add "Version", valid_606763
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606764 = header.getOrDefault("X-Amz-Signature")
  valid_606764 = validateParameter(valid_606764, JString, required = false,
                                 default = nil)
  if valid_606764 != nil:
    section.add "X-Amz-Signature", valid_606764
  var valid_606765 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606765 = validateParameter(valid_606765, JString, required = false,
                                 default = nil)
  if valid_606765 != nil:
    section.add "X-Amz-Content-Sha256", valid_606765
  var valid_606766 = header.getOrDefault("X-Amz-Date")
  valid_606766 = validateParameter(valid_606766, JString, required = false,
                                 default = nil)
  if valid_606766 != nil:
    section.add "X-Amz-Date", valid_606766
  var valid_606767 = header.getOrDefault("X-Amz-Credential")
  valid_606767 = validateParameter(valid_606767, JString, required = false,
                                 default = nil)
  if valid_606767 != nil:
    section.add "X-Amz-Credential", valid_606767
  var valid_606768 = header.getOrDefault("X-Amz-Security-Token")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "X-Amz-Security-Token", valid_606768
  var valid_606769 = header.getOrDefault("X-Amz-Algorithm")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-Algorithm", valid_606769
  var valid_606770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "X-Amz-SignedHeaders", valid_606770
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606771: Call_GetDeleteCacheCluster_606757; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_606771.validator(path, query, header, formData, body)
  let scheme = call_606771.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606771.url(scheme.get, call_606771.host, call_606771.base,
                         call_606771.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606771, url, valid)

proc call*(call_606772: Call_GetDeleteCacheCluster_606757; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606773 = newJObject()
  add(query_606773, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_606773, "CacheClusterId", newJString(CacheClusterId))
  add(query_606773, "Action", newJString(Action))
  add(query_606773, "Version", newJString(Version))
  result = call_606772.call(nil, query_606773, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_606757(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_606758, base: "/",
    url: url_GetDeleteCacheCluster_606759, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_606808 = ref object of OpenApiRestCall_605589
proc url_PostDeleteCacheParameterGroup_606810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheParameterGroup_606809(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606811 = query.getOrDefault("Action")
  valid_606811 = validateParameter(valid_606811, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_606811 != nil:
    section.add "Action", valid_606811
  var valid_606812 = query.getOrDefault("Version")
  valid_606812 = validateParameter(valid_606812, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606812 != nil:
    section.add "Version", valid_606812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606813 = header.getOrDefault("X-Amz-Signature")
  valid_606813 = validateParameter(valid_606813, JString, required = false,
                                 default = nil)
  if valid_606813 != nil:
    section.add "X-Amz-Signature", valid_606813
  var valid_606814 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606814 = validateParameter(valid_606814, JString, required = false,
                                 default = nil)
  if valid_606814 != nil:
    section.add "X-Amz-Content-Sha256", valid_606814
  var valid_606815 = header.getOrDefault("X-Amz-Date")
  valid_606815 = validateParameter(valid_606815, JString, required = false,
                                 default = nil)
  if valid_606815 != nil:
    section.add "X-Amz-Date", valid_606815
  var valid_606816 = header.getOrDefault("X-Amz-Credential")
  valid_606816 = validateParameter(valid_606816, JString, required = false,
                                 default = nil)
  if valid_606816 != nil:
    section.add "X-Amz-Credential", valid_606816
  var valid_606817 = header.getOrDefault("X-Amz-Security-Token")
  valid_606817 = validateParameter(valid_606817, JString, required = false,
                                 default = nil)
  if valid_606817 != nil:
    section.add "X-Amz-Security-Token", valid_606817
  var valid_606818 = header.getOrDefault("X-Amz-Algorithm")
  valid_606818 = validateParameter(valid_606818, JString, required = false,
                                 default = nil)
  if valid_606818 != nil:
    section.add "X-Amz-Algorithm", valid_606818
  var valid_606819 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606819 = validateParameter(valid_606819, JString, required = false,
                                 default = nil)
  if valid_606819 != nil:
    section.add "X-Amz-SignedHeaders", valid_606819
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_606820 = formData.getOrDefault("CacheParameterGroupName")
  valid_606820 = validateParameter(valid_606820, JString, required = true,
                                 default = nil)
  if valid_606820 != nil:
    section.add "CacheParameterGroupName", valid_606820
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606821: Call_PostDeleteCacheParameterGroup_606808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_606821.validator(path, query, header, formData, body)
  let scheme = call_606821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606821.url(scheme.get, call_606821.host, call_606821.base,
                         call_606821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606821, url, valid)

proc call*(call_606822: Call_PostDeleteCacheParameterGroup_606808;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606823 = newJObject()
  var formData_606824 = newJObject()
  add(formData_606824, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_606823, "Action", newJString(Action))
  add(query_606823, "Version", newJString(Version))
  result = call_606822.call(nil, query_606823, nil, formData_606824, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_606808(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_606809, base: "/",
    url: url_PostDeleteCacheParameterGroup_606810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_606792 = ref object of OpenApiRestCall_605589
proc url_GetDeleteCacheParameterGroup_606794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheParameterGroup_606793(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_606795 = query.getOrDefault("CacheParameterGroupName")
  valid_606795 = validateParameter(valid_606795, JString, required = true,
                                 default = nil)
  if valid_606795 != nil:
    section.add "CacheParameterGroupName", valid_606795
  var valid_606796 = query.getOrDefault("Action")
  valid_606796 = validateParameter(valid_606796, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_606796 != nil:
    section.add "Action", valid_606796
  var valid_606797 = query.getOrDefault("Version")
  valid_606797 = validateParameter(valid_606797, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606797 != nil:
    section.add "Version", valid_606797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606798 = header.getOrDefault("X-Amz-Signature")
  valid_606798 = validateParameter(valid_606798, JString, required = false,
                                 default = nil)
  if valid_606798 != nil:
    section.add "X-Amz-Signature", valid_606798
  var valid_606799 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606799 = validateParameter(valid_606799, JString, required = false,
                                 default = nil)
  if valid_606799 != nil:
    section.add "X-Amz-Content-Sha256", valid_606799
  var valid_606800 = header.getOrDefault("X-Amz-Date")
  valid_606800 = validateParameter(valid_606800, JString, required = false,
                                 default = nil)
  if valid_606800 != nil:
    section.add "X-Amz-Date", valid_606800
  var valid_606801 = header.getOrDefault("X-Amz-Credential")
  valid_606801 = validateParameter(valid_606801, JString, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "X-Amz-Credential", valid_606801
  var valid_606802 = header.getOrDefault("X-Amz-Security-Token")
  valid_606802 = validateParameter(valid_606802, JString, required = false,
                                 default = nil)
  if valid_606802 != nil:
    section.add "X-Amz-Security-Token", valid_606802
  var valid_606803 = header.getOrDefault("X-Amz-Algorithm")
  valid_606803 = validateParameter(valid_606803, JString, required = false,
                                 default = nil)
  if valid_606803 != nil:
    section.add "X-Amz-Algorithm", valid_606803
  var valid_606804 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606804 = validateParameter(valid_606804, JString, required = false,
                                 default = nil)
  if valid_606804 != nil:
    section.add "X-Amz-SignedHeaders", valid_606804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606805: Call_GetDeleteCacheParameterGroup_606792; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_606805.validator(path, query, header, formData, body)
  let scheme = call_606805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606805.url(scheme.get, call_606805.host, call_606805.base,
                         call_606805.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606805, url, valid)

proc call*(call_606806: Call_GetDeleteCacheParameterGroup_606792;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606807 = newJObject()
  add(query_606807, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_606807, "Action", newJString(Action))
  add(query_606807, "Version", newJString(Version))
  result = call_606806.call(nil, query_606807, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_606792(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_606793, base: "/",
    url: url_GetDeleteCacheParameterGroup_606794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_606841 = ref object of OpenApiRestCall_605589
proc url_PostDeleteCacheSecurityGroup_606843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheSecurityGroup_606842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606844 = query.getOrDefault("Action")
  valid_606844 = validateParameter(valid_606844, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_606844 != nil:
    section.add "Action", valid_606844
  var valid_606845 = query.getOrDefault("Version")
  valid_606845 = validateParameter(valid_606845, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606845 != nil:
    section.add "Version", valid_606845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606846 = header.getOrDefault("X-Amz-Signature")
  valid_606846 = validateParameter(valid_606846, JString, required = false,
                                 default = nil)
  if valid_606846 != nil:
    section.add "X-Amz-Signature", valid_606846
  var valid_606847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606847 = validateParameter(valid_606847, JString, required = false,
                                 default = nil)
  if valid_606847 != nil:
    section.add "X-Amz-Content-Sha256", valid_606847
  var valid_606848 = header.getOrDefault("X-Amz-Date")
  valid_606848 = validateParameter(valid_606848, JString, required = false,
                                 default = nil)
  if valid_606848 != nil:
    section.add "X-Amz-Date", valid_606848
  var valid_606849 = header.getOrDefault("X-Amz-Credential")
  valid_606849 = validateParameter(valid_606849, JString, required = false,
                                 default = nil)
  if valid_606849 != nil:
    section.add "X-Amz-Credential", valid_606849
  var valid_606850 = header.getOrDefault("X-Amz-Security-Token")
  valid_606850 = validateParameter(valid_606850, JString, required = false,
                                 default = nil)
  if valid_606850 != nil:
    section.add "X-Amz-Security-Token", valid_606850
  var valid_606851 = header.getOrDefault("X-Amz-Algorithm")
  valid_606851 = validateParameter(valid_606851, JString, required = false,
                                 default = nil)
  if valid_606851 != nil:
    section.add "X-Amz-Algorithm", valid_606851
  var valid_606852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606852 = validateParameter(valid_606852, JString, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "X-Amz-SignedHeaders", valid_606852
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_606853 = formData.getOrDefault("CacheSecurityGroupName")
  valid_606853 = validateParameter(valid_606853, JString, required = true,
                                 default = nil)
  if valid_606853 != nil:
    section.add "CacheSecurityGroupName", valid_606853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606854: Call_PostDeleteCacheSecurityGroup_606841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_606854.validator(path, query, header, formData, body)
  let scheme = call_606854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606854.url(scheme.get, call_606854.host, call_606854.base,
                         call_606854.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606854, url, valid)

proc call*(call_606855: Call_PostDeleteCacheSecurityGroup_606841;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606856 = newJObject()
  var formData_606857 = newJObject()
  add(formData_606857, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_606856, "Action", newJString(Action))
  add(query_606856, "Version", newJString(Version))
  result = call_606855.call(nil, query_606856, nil, formData_606857, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_606841(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_606842, base: "/",
    url: url_PostDeleteCacheSecurityGroup_606843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_606825 = ref object of OpenApiRestCall_605589
proc url_GetDeleteCacheSecurityGroup_606827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheSecurityGroup_606826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606828 = query.getOrDefault("Action")
  valid_606828 = validateParameter(valid_606828, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_606828 != nil:
    section.add "Action", valid_606828
  var valid_606829 = query.getOrDefault("CacheSecurityGroupName")
  valid_606829 = validateParameter(valid_606829, JString, required = true,
                                 default = nil)
  if valid_606829 != nil:
    section.add "CacheSecurityGroupName", valid_606829
  var valid_606830 = query.getOrDefault("Version")
  valid_606830 = validateParameter(valid_606830, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606830 != nil:
    section.add "Version", valid_606830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606831 = header.getOrDefault("X-Amz-Signature")
  valid_606831 = validateParameter(valid_606831, JString, required = false,
                                 default = nil)
  if valid_606831 != nil:
    section.add "X-Amz-Signature", valid_606831
  var valid_606832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606832 = validateParameter(valid_606832, JString, required = false,
                                 default = nil)
  if valid_606832 != nil:
    section.add "X-Amz-Content-Sha256", valid_606832
  var valid_606833 = header.getOrDefault("X-Amz-Date")
  valid_606833 = validateParameter(valid_606833, JString, required = false,
                                 default = nil)
  if valid_606833 != nil:
    section.add "X-Amz-Date", valid_606833
  var valid_606834 = header.getOrDefault("X-Amz-Credential")
  valid_606834 = validateParameter(valid_606834, JString, required = false,
                                 default = nil)
  if valid_606834 != nil:
    section.add "X-Amz-Credential", valid_606834
  var valid_606835 = header.getOrDefault("X-Amz-Security-Token")
  valid_606835 = validateParameter(valid_606835, JString, required = false,
                                 default = nil)
  if valid_606835 != nil:
    section.add "X-Amz-Security-Token", valid_606835
  var valid_606836 = header.getOrDefault("X-Amz-Algorithm")
  valid_606836 = validateParameter(valid_606836, JString, required = false,
                                 default = nil)
  if valid_606836 != nil:
    section.add "X-Amz-Algorithm", valid_606836
  var valid_606837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606837 = validateParameter(valid_606837, JString, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "X-Amz-SignedHeaders", valid_606837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606838: Call_GetDeleteCacheSecurityGroup_606825; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_606838.validator(path, query, header, formData, body)
  let scheme = call_606838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606838.url(scheme.get, call_606838.host, call_606838.base,
                         call_606838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606838, url, valid)

proc call*(call_606839: Call_GetDeleteCacheSecurityGroup_606825;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Version: string (required)
  var query_606840 = newJObject()
  add(query_606840, "Action", newJString(Action))
  add(query_606840, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_606840, "Version", newJString(Version))
  result = call_606839.call(nil, query_606840, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_606825(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_606826, base: "/",
    url: url_GetDeleteCacheSecurityGroup_606827,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_606874 = ref object of OpenApiRestCall_605589
proc url_PostDeleteCacheSubnetGroup_606876(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCacheSubnetGroup_606875(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606877 = query.getOrDefault("Action")
  valid_606877 = validateParameter(valid_606877, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_606877 != nil:
    section.add "Action", valid_606877
  var valid_606878 = query.getOrDefault("Version")
  valid_606878 = validateParameter(valid_606878, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606878 != nil:
    section.add "Version", valid_606878
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606879 = header.getOrDefault("X-Amz-Signature")
  valid_606879 = validateParameter(valid_606879, JString, required = false,
                                 default = nil)
  if valid_606879 != nil:
    section.add "X-Amz-Signature", valid_606879
  var valid_606880 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606880 = validateParameter(valid_606880, JString, required = false,
                                 default = nil)
  if valid_606880 != nil:
    section.add "X-Amz-Content-Sha256", valid_606880
  var valid_606881 = header.getOrDefault("X-Amz-Date")
  valid_606881 = validateParameter(valid_606881, JString, required = false,
                                 default = nil)
  if valid_606881 != nil:
    section.add "X-Amz-Date", valid_606881
  var valid_606882 = header.getOrDefault("X-Amz-Credential")
  valid_606882 = validateParameter(valid_606882, JString, required = false,
                                 default = nil)
  if valid_606882 != nil:
    section.add "X-Amz-Credential", valid_606882
  var valid_606883 = header.getOrDefault("X-Amz-Security-Token")
  valid_606883 = validateParameter(valid_606883, JString, required = false,
                                 default = nil)
  if valid_606883 != nil:
    section.add "X-Amz-Security-Token", valid_606883
  var valid_606884 = header.getOrDefault("X-Amz-Algorithm")
  valid_606884 = validateParameter(valid_606884, JString, required = false,
                                 default = nil)
  if valid_606884 != nil:
    section.add "X-Amz-Algorithm", valid_606884
  var valid_606885 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606885 = validateParameter(valid_606885, JString, required = false,
                                 default = nil)
  if valid_606885 != nil:
    section.add "X-Amz-SignedHeaders", valid_606885
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_606886 = formData.getOrDefault("CacheSubnetGroupName")
  valid_606886 = validateParameter(valid_606886, JString, required = true,
                                 default = nil)
  if valid_606886 != nil:
    section.add "CacheSubnetGroupName", valid_606886
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606887: Call_PostDeleteCacheSubnetGroup_606874; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_606887.validator(path, query, header, formData, body)
  let scheme = call_606887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606887.url(scheme.get, call_606887.host, call_606887.base,
                         call_606887.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606887, url, valid)

proc call*(call_606888: Call_PostDeleteCacheSubnetGroup_606874;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606889 = newJObject()
  var formData_606890 = newJObject()
  add(formData_606890, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606889, "Action", newJString(Action))
  add(query_606889, "Version", newJString(Version))
  result = call_606888.call(nil, query_606889, nil, formData_606890, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_606874(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_606875, base: "/",
    url: url_PostDeleteCacheSubnetGroup_606876,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_606858 = ref object of OpenApiRestCall_605589
proc url_GetDeleteCacheSubnetGroup_606860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCacheSubnetGroup_606859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606861 = query.getOrDefault("Action")
  valid_606861 = validateParameter(valid_606861, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_606861 != nil:
    section.add "Action", valid_606861
  var valid_606862 = query.getOrDefault("CacheSubnetGroupName")
  valid_606862 = validateParameter(valid_606862, JString, required = true,
                                 default = nil)
  if valid_606862 != nil:
    section.add "CacheSubnetGroupName", valid_606862
  var valid_606863 = query.getOrDefault("Version")
  valid_606863 = validateParameter(valid_606863, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606863 != nil:
    section.add "Version", valid_606863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606864 = header.getOrDefault("X-Amz-Signature")
  valid_606864 = validateParameter(valid_606864, JString, required = false,
                                 default = nil)
  if valid_606864 != nil:
    section.add "X-Amz-Signature", valid_606864
  var valid_606865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606865 = validateParameter(valid_606865, JString, required = false,
                                 default = nil)
  if valid_606865 != nil:
    section.add "X-Amz-Content-Sha256", valid_606865
  var valid_606866 = header.getOrDefault("X-Amz-Date")
  valid_606866 = validateParameter(valid_606866, JString, required = false,
                                 default = nil)
  if valid_606866 != nil:
    section.add "X-Amz-Date", valid_606866
  var valid_606867 = header.getOrDefault("X-Amz-Credential")
  valid_606867 = validateParameter(valid_606867, JString, required = false,
                                 default = nil)
  if valid_606867 != nil:
    section.add "X-Amz-Credential", valid_606867
  var valid_606868 = header.getOrDefault("X-Amz-Security-Token")
  valid_606868 = validateParameter(valid_606868, JString, required = false,
                                 default = nil)
  if valid_606868 != nil:
    section.add "X-Amz-Security-Token", valid_606868
  var valid_606869 = header.getOrDefault("X-Amz-Algorithm")
  valid_606869 = validateParameter(valid_606869, JString, required = false,
                                 default = nil)
  if valid_606869 != nil:
    section.add "X-Amz-Algorithm", valid_606869
  var valid_606870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606870 = validateParameter(valid_606870, JString, required = false,
                                 default = nil)
  if valid_606870 != nil:
    section.add "X-Amz-SignedHeaders", valid_606870
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606871: Call_GetDeleteCacheSubnetGroup_606858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_606871.validator(path, query, header, formData, body)
  let scheme = call_606871.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606871.url(scheme.get, call_606871.host, call_606871.base,
                         call_606871.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606871, url, valid)

proc call*(call_606872: Call_GetDeleteCacheSubnetGroup_606858;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_606873 = newJObject()
  add(query_606873, "Action", newJString(Action))
  add(query_606873, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_606873, "Version", newJString(Version))
  result = call_606872.call(nil, query_606873, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_606858(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_606859, base: "/",
    url: url_GetDeleteCacheSubnetGroup_606860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_606909 = ref object of OpenApiRestCall_605589
proc url_PostDeleteReplicationGroup_606911(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteReplicationGroup_606910(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606912 = query.getOrDefault("Action")
  valid_606912 = validateParameter(valid_606912, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_606912 != nil:
    section.add "Action", valid_606912
  var valid_606913 = query.getOrDefault("Version")
  valid_606913 = validateParameter(valid_606913, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606913 != nil:
    section.add "Version", valid_606913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606914 = header.getOrDefault("X-Amz-Signature")
  valid_606914 = validateParameter(valid_606914, JString, required = false,
                                 default = nil)
  if valid_606914 != nil:
    section.add "X-Amz-Signature", valid_606914
  var valid_606915 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-Content-Sha256", valid_606915
  var valid_606916 = header.getOrDefault("X-Amz-Date")
  valid_606916 = validateParameter(valid_606916, JString, required = false,
                                 default = nil)
  if valid_606916 != nil:
    section.add "X-Amz-Date", valid_606916
  var valid_606917 = header.getOrDefault("X-Amz-Credential")
  valid_606917 = validateParameter(valid_606917, JString, required = false,
                                 default = nil)
  if valid_606917 != nil:
    section.add "X-Amz-Credential", valid_606917
  var valid_606918 = header.getOrDefault("X-Amz-Security-Token")
  valid_606918 = validateParameter(valid_606918, JString, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "X-Amz-Security-Token", valid_606918
  var valid_606919 = header.getOrDefault("X-Amz-Algorithm")
  valid_606919 = validateParameter(valid_606919, JString, required = false,
                                 default = nil)
  if valid_606919 != nil:
    section.add "X-Amz-Algorithm", valid_606919
  var valid_606920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606920 = validateParameter(valid_606920, JString, required = false,
                                 default = nil)
  if valid_606920 != nil:
    section.add "X-Amz-SignedHeaders", valid_606920
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_606921 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_606921 = validateParameter(valid_606921, JString, required = false,
                                 default = nil)
  if valid_606921 != nil:
    section.add "FinalSnapshotIdentifier", valid_606921
  var valid_606922 = formData.getOrDefault("RetainPrimaryCluster")
  valid_606922 = validateParameter(valid_606922, JBool, required = false, default = nil)
  if valid_606922 != nil:
    section.add "RetainPrimaryCluster", valid_606922
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_606923 = formData.getOrDefault("ReplicationGroupId")
  valid_606923 = validateParameter(valid_606923, JString, required = true,
                                 default = nil)
  if valid_606923 != nil:
    section.add "ReplicationGroupId", valid_606923
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606924: Call_PostDeleteReplicationGroup_606909; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606924.validator(path, query, header, formData, body)
  let scheme = call_606924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606924.url(scheme.get, call_606924.host, call_606924.base,
                         call_606924.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606924, url, valid)

proc call*(call_606925: Call_PostDeleteReplicationGroup_606909;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_606926 = newJObject()
  var formData_606927 = newJObject()
  add(formData_606927, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_606926, "Action", newJString(Action))
  add(formData_606927, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_606926, "Version", newJString(Version))
  add(formData_606927, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_606925.call(nil, query_606926, nil, formData_606927, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_606909(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_606910, base: "/",
    url: url_PostDeleteReplicationGroup_606911,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_606891 = ref object of OpenApiRestCall_605589
proc url_GetDeleteReplicationGroup_606893(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteReplicationGroup_606892(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: JString (required)
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  section = newJObject()
  var valid_606894 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_606894 = validateParameter(valid_606894, JString, required = false,
                                 default = nil)
  if valid_606894 != nil:
    section.add "FinalSnapshotIdentifier", valid_606894
  var valid_606895 = query.getOrDefault("Action")
  valid_606895 = validateParameter(valid_606895, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_606895 != nil:
    section.add "Action", valid_606895
  var valid_606896 = query.getOrDefault("ReplicationGroupId")
  valid_606896 = validateParameter(valid_606896, JString, required = true,
                                 default = nil)
  if valid_606896 != nil:
    section.add "ReplicationGroupId", valid_606896
  var valid_606897 = query.getOrDefault("Version")
  valid_606897 = validateParameter(valid_606897, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606897 != nil:
    section.add "Version", valid_606897
  var valid_606898 = query.getOrDefault("RetainPrimaryCluster")
  valid_606898 = validateParameter(valid_606898, JBool, required = false, default = nil)
  if valid_606898 != nil:
    section.add "RetainPrimaryCluster", valid_606898
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606899 = header.getOrDefault("X-Amz-Signature")
  valid_606899 = validateParameter(valid_606899, JString, required = false,
                                 default = nil)
  if valid_606899 != nil:
    section.add "X-Amz-Signature", valid_606899
  var valid_606900 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606900 = validateParameter(valid_606900, JString, required = false,
                                 default = nil)
  if valid_606900 != nil:
    section.add "X-Amz-Content-Sha256", valid_606900
  var valid_606901 = header.getOrDefault("X-Amz-Date")
  valid_606901 = validateParameter(valid_606901, JString, required = false,
                                 default = nil)
  if valid_606901 != nil:
    section.add "X-Amz-Date", valid_606901
  var valid_606902 = header.getOrDefault("X-Amz-Credential")
  valid_606902 = validateParameter(valid_606902, JString, required = false,
                                 default = nil)
  if valid_606902 != nil:
    section.add "X-Amz-Credential", valid_606902
  var valid_606903 = header.getOrDefault("X-Amz-Security-Token")
  valid_606903 = validateParameter(valid_606903, JString, required = false,
                                 default = nil)
  if valid_606903 != nil:
    section.add "X-Amz-Security-Token", valid_606903
  var valid_606904 = header.getOrDefault("X-Amz-Algorithm")
  valid_606904 = validateParameter(valid_606904, JString, required = false,
                                 default = nil)
  if valid_606904 != nil:
    section.add "X-Amz-Algorithm", valid_606904
  var valid_606905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606905 = validateParameter(valid_606905, JString, required = false,
                                 default = nil)
  if valid_606905 != nil:
    section.add "X-Amz-SignedHeaders", valid_606905
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606906: Call_GetDeleteReplicationGroup_606891; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606906.validator(path, query, header, formData, body)
  let scheme = call_606906.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606906.url(scheme.get, call_606906.host, call_606906.base,
                         call_606906.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606906, url, valid)

proc call*(call_606907: Call_GetDeleteReplicationGroup_606891;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02";
          RetainPrimaryCluster: bool = false): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Version: string (required)
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  var query_606908 = newJObject()
  add(query_606908, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_606908, "Action", newJString(Action))
  add(query_606908, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_606908, "Version", newJString(Version))
  add(query_606908, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  result = call_606907.call(nil, query_606908, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_606891(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_606892, base: "/",
    url: url_GetDeleteReplicationGroup_606893,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_606944 = ref object of OpenApiRestCall_605589
proc url_PostDeleteSnapshot_606946(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteSnapshot_606945(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606947 = query.getOrDefault("Action")
  valid_606947 = validateParameter(valid_606947, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_606947 != nil:
    section.add "Action", valid_606947
  var valid_606948 = query.getOrDefault("Version")
  valid_606948 = validateParameter(valid_606948, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606948 != nil:
    section.add "Version", valid_606948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606949 = header.getOrDefault("X-Amz-Signature")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "X-Amz-Signature", valid_606949
  var valid_606950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "X-Amz-Content-Sha256", valid_606950
  var valid_606951 = header.getOrDefault("X-Amz-Date")
  valid_606951 = validateParameter(valid_606951, JString, required = false,
                                 default = nil)
  if valid_606951 != nil:
    section.add "X-Amz-Date", valid_606951
  var valid_606952 = header.getOrDefault("X-Amz-Credential")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "X-Amz-Credential", valid_606952
  var valid_606953 = header.getOrDefault("X-Amz-Security-Token")
  valid_606953 = validateParameter(valid_606953, JString, required = false,
                                 default = nil)
  if valid_606953 != nil:
    section.add "X-Amz-Security-Token", valid_606953
  var valid_606954 = header.getOrDefault("X-Amz-Algorithm")
  valid_606954 = validateParameter(valid_606954, JString, required = false,
                                 default = nil)
  if valid_606954 != nil:
    section.add "X-Amz-Algorithm", valid_606954
  var valid_606955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606955 = validateParameter(valid_606955, JString, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "X-Amz-SignedHeaders", valid_606955
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_606956 = formData.getOrDefault("SnapshotName")
  valid_606956 = validateParameter(valid_606956, JString, required = true,
                                 default = nil)
  if valid_606956 != nil:
    section.add "SnapshotName", valid_606956
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606957: Call_PostDeleteSnapshot_606944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606957.validator(path, query, header, formData, body)
  let scheme = call_606957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606957.url(scheme.get, call_606957.host, call_606957.base,
                         call_606957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606957, url, valid)

proc call*(call_606958: Call_PostDeleteSnapshot_606944; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606959 = newJObject()
  var formData_606960 = newJObject()
  add(formData_606960, "SnapshotName", newJString(SnapshotName))
  add(query_606959, "Action", newJString(Action))
  add(query_606959, "Version", newJString(Version))
  result = call_606958.call(nil, query_606959, nil, formData_606960, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_606944(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_606945, base: "/",
    url: url_PostDeleteSnapshot_606946, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_606928 = ref object of OpenApiRestCall_605589
proc url_GetDeleteSnapshot_606930(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteSnapshot_606929(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  var valid_606931 = query.getOrDefault("Action")
  valid_606931 = validateParameter(valid_606931, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_606931 != nil:
    section.add "Action", valid_606931
  var valid_606932 = query.getOrDefault("Version")
  valid_606932 = validateParameter(valid_606932, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606932 != nil:
    section.add "Version", valid_606932
  var valid_606933 = query.getOrDefault("SnapshotName")
  valid_606933 = validateParameter(valid_606933, JString, required = true,
                                 default = nil)
  if valid_606933 != nil:
    section.add "SnapshotName", valid_606933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606934 = header.getOrDefault("X-Amz-Signature")
  valid_606934 = validateParameter(valid_606934, JString, required = false,
                                 default = nil)
  if valid_606934 != nil:
    section.add "X-Amz-Signature", valid_606934
  var valid_606935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606935 = validateParameter(valid_606935, JString, required = false,
                                 default = nil)
  if valid_606935 != nil:
    section.add "X-Amz-Content-Sha256", valid_606935
  var valid_606936 = header.getOrDefault("X-Amz-Date")
  valid_606936 = validateParameter(valid_606936, JString, required = false,
                                 default = nil)
  if valid_606936 != nil:
    section.add "X-Amz-Date", valid_606936
  var valid_606937 = header.getOrDefault("X-Amz-Credential")
  valid_606937 = validateParameter(valid_606937, JString, required = false,
                                 default = nil)
  if valid_606937 != nil:
    section.add "X-Amz-Credential", valid_606937
  var valid_606938 = header.getOrDefault("X-Amz-Security-Token")
  valid_606938 = validateParameter(valid_606938, JString, required = false,
                                 default = nil)
  if valid_606938 != nil:
    section.add "X-Amz-Security-Token", valid_606938
  var valid_606939 = header.getOrDefault("X-Amz-Algorithm")
  valid_606939 = validateParameter(valid_606939, JString, required = false,
                                 default = nil)
  if valid_606939 != nil:
    section.add "X-Amz-Algorithm", valid_606939
  var valid_606940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606940 = validateParameter(valid_606940, JString, required = false,
                                 default = nil)
  if valid_606940 != nil:
    section.add "X-Amz-SignedHeaders", valid_606940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606941: Call_GetDeleteSnapshot_606928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_606941.validator(path, query, header, formData, body)
  let scheme = call_606941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606941.url(scheme.get, call_606941.host, call_606941.base,
                         call_606941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606941, url, valid)

proc call*(call_606942: Call_GetDeleteSnapshot_606928; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_606943 = newJObject()
  add(query_606943, "Action", newJString(Action))
  add(query_606943, "Version", newJString(Version))
  add(query_606943, "SnapshotName", newJString(SnapshotName))
  result = call_606942.call(nil, query_606943, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_606928(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_606929,
    base: "/", url: url_GetDeleteSnapshot_606930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_606981 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCacheClusters_606983(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheClusters_606982(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606984 = query.getOrDefault("Action")
  valid_606984 = validateParameter(valid_606984, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_606984 != nil:
    section.add "Action", valid_606984
  var valid_606985 = query.getOrDefault("Version")
  valid_606985 = validateParameter(valid_606985, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606985 != nil:
    section.add "Version", valid_606985
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606986 = header.getOrDefault("X-Amz-Signature")
  valid_606986 = validateParameter(valid_606986, JString, required = false,
                                 default = nil)
  if valid_606986 != nil:
    section.add "X-Amz-Signature", valid_606986
  var valid_606987 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606987 = validateParameter(valid_606987, JString, required = false,
                                 default = nil)
  if valid_606987 != nil:
    section.add "X-Amz-Content-Sha256", valid_606987
  var valid_606988 = header.getOrDefault("X-Amz-Date")
  valid_606988 = validateParameter(valid_606988, JString, required = false,
                                 default = nil)
  if valid_606988 != nil:
    section.add "X-Amz-Date", valid_606988
  var valid_606989 = header.getOrDefault("X-Amz-Credential")
  valid_606989 = validateParameter(valid_606989, JString, required = false,
                                 default = nil)
  if valid_606989 != nil:
    section.add "X-Amz-Credential", valid_606989
  var valid_606990 = header.getOrDefault("X-Amz-Security-Token")
  valid_606990 = validateParameter(valid_606990, JString, required = false,
                                 default = nil)
  if valid_606990 != nil:
    section.add "X-Amz-Security-Token", valid_606990
  var valid_606991 = header.getOrDefault("X-Amz-Algorithm")
  valid_606991 = validateParameter(valid_606991, JString, required = false,
                                 default = nil)
  if valid_606991 != nil:
    section.add "X-Amz-Algorithm", valid_606991
  var valid_606992 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606992 = validateParameter(valid_606992, JString, required = false,
                                 default = nil)
  if valid_606992 != nil:
    section.add "X-Amz-SignedHeaders", valid_606992
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  section = newJObject()
  var valid_606993 = formData.getOrDefault("CacheClusterId")
  valid_606993 = validateParameter(valid_606993, JString, required = false,
                                 default = nil)
  if valid_606993 != nil:
    section.add "CacheClusterId", valid_606993
  var valid_606994 = formData.getOrDefault("MaxRecords")
  valid_606994 = validateParameter(valid_606994, JInt, required = false, default = nil)
  if valid_606994 != nil:
    section.add "MaxRecords", valid_606994
  var valid_606995 = formData.getOrDefault("Marker")
  valid_606995 = validateParameter(valid_606995, JString, required = false,
                                 default = nil)
  if valid_606995 != nil:
    section.add "Marker", valid_606995
  var valid_606996 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_606996 = validateParameter(valid_606996, JBool, required = false, default = nil)
  if valid_606996 != nil:
    section.add "ShowCacheNodeInfo", valid_606996
  var valid_606997 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_606997 = validateParameter(valid_606997, JBool, required = false, default = nil)
  if valid_606997 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_606997
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606998: Call_PostDescribeCacheClusters_606981; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_606998.validator(path, query, header, formData, body)
  let scheme = call_606998.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606998.url(scheme.get, call_606998.host, call_606998.base,
                         call_606998.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606998, url, valid)

proc call*(call_606999: Call_PostDescribeCacheClusters_606981;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Version: string = "2015-02-02";
          ShowCacheClustersNotInReplicationGroups: bool = false): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  var query_607000 = newJObject()
  var formData_607001 = newJObject()
  add(formData_607001, "CacheClusterId", newJString(CacheClusterId))
  add(formData_607001, "MaxRecords", newJInt(MaxRecords))
  add(formData_607001, "Marker", newJString(Marker))
  add(formData_607001, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_607000, "Action", newJString(Action))
  add(query_607000, "Version", newJString(Version))
  add(formData_607001, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  result = call_606999.call(nil, query_607000, nil, formData_607001, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_606981(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_606982, base: "/",
    url: url_PostDescribeCacheClusters_606983,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_606961 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCacheClusters_606963(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheClusters_606962(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: JString (required)
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_606964 = query.getOrDefault("Marker")
  valid_606964 = validateParameter(valid_606964, JString, required = false,
                                 default = nil)
  if valid_606964 != nil:
    section.add "Marker", valid_606964
  var valid_606965 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_606965 = validateParameter(valid_606965, JBool, required = false, default = nil)
  if valid_606965 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_606965
  var valid_606966 = query.getOrDefault("CacheClusterId")
  valid_606966 = validateParameter(valid_606966, JString, required = false,
                                 default = nil)
  if valid_606966 != nil:
    section.add "CacheClusterId", valid_606966
  var valid_606967 = query.getOrDefault("Action")
  valid_606967 = validateParameter(valid_606967, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_606967 != nil:
    section.add "Action", valid_606967
  var valid_606968 = query.getOrDefault("ShowCacheNodeInfo")
  valid_606968 = validateParameter(valid_606968, JBool, required = false, default = nil)
  if valid_606968 != nil:
    section.add "ShowCacheNodeInfo", valid_606968
  var valid_606969 = query.getOrDefault("Version")
  valid_606969 = validateParameter(valid_606969, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_606969 != nil:
    section.add "Version", valid_606969
  var valid_606970 = query.getOrDefault("MaxRecords")
  valid_606970 = validateParameter(valid_606970, JInt, required = false, default = nil)
  if valid_606970 != nil:
    section.add "MaxRecords", valid_606970
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606971 = header.getOrDefault("X-Amz-Signature")
  valid_606971 = validateParameter(valid_606971, JString, required = false,
                                 default = nil)
  if valid_606971 != nil:
    section.add "X-Amz-Signature", valid_606971
  var valid_606972 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606972 = validateParameter(valid_606972, JString, required = false,
                                 default = nil)
  if valid_606972 != nil:
    section.add "X-Amz-Content-Sha256", valid_606972
  var valid_606973 = header.getOrDefault("X-Amz-Date")
  valid_606973 = validateParameter(valid_606973, JString, required = false,
                                 default = nil)
  if valid_606973 != nil:
    section.add "X-Amz-Date", valid_606973
  var valid_606974 = header.getOrDefault("X-Amz-Credential")
  valid_606974 = validateParameter(valid_606974, JString, required = false,
                                 default = nil)
  if valid_606974 != nil:
    section.add "X-Amz-Credential", valid_606974
  var valid_606975 = header.getOrDefault("X-Amz-Security-Token")
  valid_606975 = validateParameter(valid_606975, JString, required = false,
                                 default = nil)
  if valid_606975 != nil:
    section.add "X-Amz-Security-Token", valid_606975
  var valid_606976 = header.getOrDefault("X-Amz-Algorithm")
  valid_606976 = validateParameter(valid_606976, JString, required = false,
                                 default = nil)
  if valid_606976 != nil:
    section.add "X-Amz-Algorithm", valid_606976
  var valid_606977 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606977 = validateParameter(valid_606977, JString, required = false,
                                 default = nil)
  if valid_606977 != nil:
    section.add "X-Amz-SignedHeaders", valid_606977
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606978: Call_GetDescribeCacheClusters_606961; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_606978.validator(path, query, header, formData, body)
  let scheme = call_606978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606978.url(scheme.get, call_606978.host, call_606978.base,
                         call_606978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606978, url, valid)

proc call*(call_606979: Call_GetDescribeCacheClusters_606961; Marker: string = "";
          ShowCacheClustersNotInReplicationGroups: bool = false;
          CacheClusterId: string = ""; Action: string = "DescribeCacheClusters";
          ShowCacheNodeInfo: bool = false; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   Action: string (required)
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_606980 = newJObject()
  add(query_606980, "Marker", newJString(Marker))
  add(query_606980, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_606980, "CacheClusterId", newJString(CacheClusterId))
  add(query_606980, "Action", newJString(Action))
  add(query_606980, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_606980, "Version", newJString(Version))
  add(query_606980, "MaxRecords", newJInt(MaxRecords))
  result = call_606979.call(nil, query_606980, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_606961(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_606962, base: "/",
    url: url_GetDescribeCacheClusters_606963, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_607023 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCacheEngineVersions_607025(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheEngineVersions_607024(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607026 = query.getOrDefault("Action")
  valid_607026 = validateParameter(valid_607026, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_607026 != nil:
    section.add "Action", valid_607026
  var valid_607027 = query.getOrDefault("Version")
  valid_607027 = validateParameter(valid_607027, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607027 != nil:
    section.add "Version", valid_607027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607028 = header.getOrDefault("X-Amz-Signature")
  valid_607028 = validateParameter(valid_607028, JString, required = false,
                                 default = nil)
  if valid_607028 != nil:
    section.add "X-Amz-Signature", valid_607028
  var valid_607029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607029 = validateParameter(valid_607029, JString, required = false,
                                 default = nil)
  if valid_607029 != nil:
    section.add "X-Amz-Content-Sha256", valid_607029
  var valid_607030 = header.getOrDefault("X-Amz-Date")
  valid_607030 = validateParameter(valid_607030, JString, required = false,
                                 default = nil)
  if valid_607030 != nil:
    section.add "X-Amz-Date", valid_607030
  var valid_607031 = header.getOrDefault("X-Amz-Credential")
  valid_607031 = validateParameter(valid_607031, JString, required = false,
                                 default = nil)
  if valid_607031 != nil:
    section.add "X-Amz-Credential", valid_607031
  var valid_607032 = header.getOrDefault("X-Amz-Security-Token")
  valid_607032 = validateParameter(valid_607032, JString, required = false,
                                 default = nil)
  if valid_607032 != nil:
    section.add "X-Amz-Security-Token", valid_607032
  var valid_607033 = header.getOrDefault("X-Amz-Algorithm")
  valid_607033 = validateParameter(valid_607033, JString, required = false,
                                 default = nil)
  if valid_607033 != nil:
    section.add "X-Amz-Algorithm", valid_607033
  var valid_607034 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "X-Amz-SignedHeaders", valid_607034
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  section = newJObject()
  var valid_607035 = formData.getOrDefault("DefaultOnly")
  valid_607035 = validateParameter(valid_607035, JBool, required = false, default = nil)
  if valid_607035 != nil:
    section.add "DefaultOnly", valid_607035
  var valid_607036 = formData.getOrDefault("MaxRecords")
  valid_607036 = validateParameter(valid_607036, JInt, required = false, default = nil)
  if valid_607036 != nil:
    section.add "MaxRecords", valid_607036
  var valid_607037 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_607037 = validateParameter(valid_607037, JString, required = false,
                                 default = nil)
  if valid_607037 != nil:
    section.add "CacheParameterGroupFamily", valid_607037
  var valid_607038 = formData.getOrDefault("EngineVersion")
  valid_607038 = validateParameter(valid_607038, JString, required = false,
                                 default = nil)
  if valid_607038 != nil:
    section.add "EngineVersion", valid_607038
  var valid_607039 = formData.getOrDefault("Marker")
  valid_607039 = validateParameter(valid_607039, JString, required = false,
                                 default = nil)
  if valid_607039 != nil:
    section.add "Marker", valid_607039
  var valid_607040 = formData.getOrDefault("Engine")
  valid_607040 = validateParameter(valid_607040, JString, required = false,
                                 default = nil)
  if valid_607040 != nil:
    section.add "Engine", valid_607040
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607041: Call_PostDescribeCacheEngineVersions_607023;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_607041.validator(path, query, header, formData, body)
  let scheme = call_607041.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607041.url(scheme.get, call_607041.host, call_607041.base,
                         call_607041.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607041, url, valid)

proc call*(call_607042: Call_PostDescribeCacheEngineVersions_607023;
          DefaultOnly: bool = false; MaxRecords: int = 0;
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607043 = newJObject()
  var formData_607044 = newJObject()
  add(formData_607044, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_607044, "MaxRecords", newJInt(MaxRecords))
  add(formData_607044, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_607044, "EngineVersion", newJString(EngineVersion))
  add(formData_607044, "Marker", newJString(Marker))
  add(formData_607044, "Engine", newJString(Engine))
  add(query_607043, "Action", newJString(Action))
  add(query_607043, "Version", newJString(Version))
  result = call_607042.call(nil, query_607043, nil, formData_607044, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_607023(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_607024, base: "/",
    url: url_PostDescribeCacheEngineVersions_607025,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_607002 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCacheEngineVersions_607004(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheEngineVersions_607003(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_607005 = query.getOrDefault("Marker")
  valid_607005 = validateParameter(valid_607005, JString, required = false,
                                 default = nil)
  if valid_607005 != nil:
    section.add "Marker", valid_607005
  var valid_607006 = query.getOrDefault("Engine")
  valid_607006 = validateParameter(valid_607006, JString, required = false,
                                 default = nil)
  if valid_607006 != nil:
    section.add "Engine", valid_607006
  var valid_607007 = query.getOrDefault("CacheParameterGroupFamily")
  valid_607007 = validateParameter(valid_607007, JString, required = false,
                                 default = nil)
  if valid_607007 != nil:
    section.add "CacheParameterGroupFamily", valid_607007
  var valid_607008 = query.getOrDefault("EngineVersion")
  valid_607008 = validateParameter(valid_607008, JString, required = false,
                                 default = nil)
  if valid_607008 != nil:
    section.add "EngineVersion", valid_607008
  var valid_607009 = query.getOrDefault("Action")
  valid_607009 = validateParameter(valid_607009, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_607009 != nil:
    section.add "Action", valid_607009
  var valid_607010 = query.getOrDefault("Version")
  valid_607010 = validateParameter(valid_607010, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607010 != nil:
    section.add "Version", valid_607010
  var valid_607011 = query.getOrDefault("MaxRecords")
  valid_607011 = validateParameter(valid_607011, JInt, required = false, default = nil)
  if valid_607011 != nil:
    section.add "MaxRecords", valid_607011
  var valid_607012 = query.getOrDefault("DefaultOnly")
  valid_607012 = validateParameter(valid_607012, JBool, required = false, default = nil)
  if valid_607012 != nil:
    section.add "DefaultOnly", valid_607012
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607013 = header.getOrDefault("X-Amz-Signature")
  valid_607013 = validateParameter(valid_607013, JString, required = false,
                                 default = nil)
  if valid_607013 != nil:
    section.add "X-Amz-Signature", valid_607013
  var valid_607014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607014 = validateParameter(valid_607014, JString, required = false,
                                 default = nil)
  if valid_607014 != nil:
    section.add "X-Amz-Content-Sha256", valid_607014
  var valid_607015 = header.getOrDefault("X-Amz-Date")
  valid_607015 = validateParameter(valid_607015, JString, required = false,
                                 default = nil)
  if valid_607015 != nil:
    section.add "X-Amz-Date", valid_607015
  var valid_607016 = header.getOrDefault("X-Amz-Credential")
  valid_607016 = validateParameter(valid_607016, JString, required = false,
                                 default = nil)
  if valid_607016 != nil:
    section.add "X-Amz-Credential", valid_607016
  var valid_607017 = header.getOrDefault("X-Amz-Security-Token")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "X-Amz-Security-Token", valid_607017
  var valid_607018 = header.getOrDefault("X-Amz-Algorithm")
  valid_607018 = validateParameter(valid_607018, JString, required = false,
                                 default = nil)
  if valid_607018 != nil:
    section.add "X-Amz-Algorithm", valid_607018
  var valid_607019 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607019 = validateParameter(valid_607019, JString, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "X-Amz-SignedHeaders", valid_607019
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607020: Call_GetDescribeCacheEngineVersions_607002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_607020.validator(path, query, header, formData, body)
  let scheme = call_607020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607020.url(scheme.get, call_607020.host, call_607020.base,
                         call_607020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607020, url, valid)

proc call*(call_607021: Call_GetDescribeCacheEngineVersions_607002;
          Marker: string = ""; Engine: string = "";
          CacheParameterGroupFamily: string = ""; EngineVersion: string = "";
          Action: string = "DescribeCacheEngineVersions";
          Version: string = "2015-02-02"; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_607022 = newJObject()
  add(query_607022, "Marker", newJString(Marker))
  add(query_607022, "Engine", newJString(Engine))
  add(query_607022, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_607022, "EngineVersion", newJString(EngineVersion))
  add(query_607022, "Action", newJString(Action))
  add(query_607022, "Version", newJString(Version))
  add(query_607022, "MaxRecords", newJInt(MaxRecords))
  add(query_607022, "DefaultOnly", newJBool(DefaultOnly))
  result = call_607021.call(nil, query_607022, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_607002(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_607003, base: "/",
    url: url_GetDescribeCacheEngineVersions_607004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_607063 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCacheParameterGroups_607065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheParameterGroups_607064(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607066 = query.getOrDefault("Action")
  valid_607066 = validateParameter(valid_607066, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_607066 != nil:
    section.add "Action", valid_607066
  var valid_607067 = query.getOrDefault("Version")
  valid_607067 = validateParameter(valid_607067, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607067 != nil:
    section.add "Version", valid_607067
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607068 = header.getOrDefault("X-Amz-Signature")
  valid_607068 = validateParameter(valid_607068, JString, required = false,
                                 default = nil)
  if valid_607068 != nil:
    section.add "X-Amz-Signature", valid_607068
  var valid_607069 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607069 = validateParameter(valid_607069, JString, required = false,
                                 default = nil)
  if valid_607069 != nil:
    section.add "X-Amz-Content-Sha256", valid_607069
  var valid_607070 = header.getOrDefault("X-Amz-Date")
  valid_607070 = validateParameter(valid_607070, JString, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "X-Amz-Date", valid_607070
  var valid_607071 = header.getOrDefault("X-Amz-Credential")
  valid_607071 = validateParameter(valid_607071, JString, required = false,
                                 default = nil)
  if valid_607071 != nil:
    section.add "X-Amz-Credential", valid_607071
  var valid_607072 = header.getOrDefault("X-Amz-Security-Token")
  valid_607072 = validateParameter(valid_607072, JString, required = false,
                                 default = nil)
  if valid_607072 != nil:
    section.add "X-Amz-Security-Token", valid_607072
  var valid_607073 = header.getOrDefault("X-Amz-Algorithm")
  valid_607073 = validateParameter(valid_607073, JString, required = false,
                                 default = nil)
  if valid_607073 != nil:
    section.add "X-Amz-Algorithm", valid_607073
  var valid_607074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607074 = validateParameter(valid_607074, JString, required = false,
                                 default = nil)
  if valid_607074 != nil:
    section.add "X-Amz-SignedHeaders", valid_607074
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_607075 = formData.getOrDefault("MaxRecords")
  valid_607075 = validateParameter(valid_607075, JInt, required = false, default = nil)
  if valid_607075 != nil:
    section.add "MaxRecords", valid_607075
  var valid_607076 = formData.getOrDefault("Marker")
  valid_607076 = validateParameter(valid_607076, JString, required = false,
                                 default = nil)
  if valid_607076 != nil:
    section.add "Marker", valid_607076
  var valid_607077 = formData.getOrDefault("CacheParameterGroupName")
  valid_607077 = validateParameter(valid_607077, JString, required = false,
                                 default = nil)
  if valid_607077 != nil:
    section.add "CacheParameterGroupName", valid_607077
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607078: Call_PostDescribeCacheParameterGroups_607063;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_607078.validator(path, query, header, formData, body)
  let scheme = call_607078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607078.url(scheme.get, call_607078.host, call_607078.base,
                         call_607078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607078, url, valid)

proc call*(call_607079: Call_PostDescribeCacheParameterGroups_607063;
          MaxRecords: int = 0; Marker: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607080 = newJObject()
  var formData_607081 = newJObject()
  add(formData_607081, "MaxRecords", newJInt(MaxRecords))
  add(formData_607081, "Marker", newJString(Marker))
  add(formData_607081, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_607080, "Action", newJString(Action))
  add(query_607080, "Version", newJString(Version))
  result = call_607079.call(nil, query_607080, nil, formData_607081, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_607063(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_607064, base: "/",
    url: url_PostDescribeCacheParameterGroups_607065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_607045 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCacheParameterGroups_607047(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheParameterGroups_607046(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607048 = query.getOrDefault("Marker")
  valid_607048 = validateParameter(valid_607048, JString, required = false,
                                 default = nil)
  if valid_607048 != nil:
    section.add "Marker", valid_607048
  var valid_607049 = query.getOrDefault("CacheParameterGroupName")
  valid_607049 = validateParameter(valid_607049, JString, required = false,
                                 default = nil)
  if valid_607049 != nil:
    section.add "CacheParameterGroupName", valid_607049
  var valid_607050 = query.getOrDefault("Action")
  valid_607050 = validateParameter(valid_607050, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_607050 != nil:
    section.add "Action", valid_607050
  var valid_607051 = query.getOrDefault("Version")
  valid_607051 = validateParameter(valid_607051, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607051 != nil:
    section.add "Version", valid_607051
  var valid_607052 = query.getOrDefault("MaxRecords")
  valid_607052 = validateParameter(valid_607052, JInt, required = false, default = nil)
  if valid_607052 != nil:
    section.add "MaxRecords", valid_607052
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607053 = header.getOrDefault("X-Amz-Signature")
  valid_607053 = validateParameter(valid_607053, JString, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "X-Amz-Signature", valid_607053
  var valid_607054 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607054 = validateParameter(valid_607054, JString, required = false,
                                 default = nil)
  if valid_607054 != nil:
    section.add "X-Amz-Content-Sha256", valid_607054
  var valid_607055 = header.getOrDefault("X-Amz-Date")
  valid_607055 = validateParameter(valid_607055, JString, required = false,
                                 default = nil)
  if valid_607055 != nil:
    section.add "X-Amz-Date", valid_607055
  var valid_607056 = header.getOrDefault("X-Amz-Credential")
  valid_607056 = validateParameter(valid_607056, JString, required = false,
                                 default = nil)
  if valid_607056 != nil:
    section.add "X-Amz-Credential", valid_607056
  var valid_607057 = header.getOrDefault("X-Amz-Security-Token")
  valid_607057 = validateParameter(valid_607057, JString, required = false,
                                 default = nil)
  if valid_607057 != nil:
    section.add "X-Amz-Security-Token", valid_607057
  var valid_607058 = header.getOrDefault("X-Amz-Algorithm")
  valid_607058 = validateParameter(valid_607058, JString, required = false,
                                 default = nil)
  if valid_607058 != nil:
    section.add "X-Amz-Algorithm", valid_607058
  var valid_607059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607059 = validateParameter(valid_607059, JString, required = false,
                                 default = nil)
  if valid_607059 != nil:
    section.add "X-Amz-SignedHeaders", valid_607059
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607060: Call_GetDescribeCacheParameterGroups_607045;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_607060.validator(path, query, header, formData, body)
  let scheme = call_607060.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607060.url(scheme.get, call_607060.host, call_607060.base,
                         call_607060.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607060, url, valid)

proc call*(call_607061: Call_GetDescribeCacheParameterGroups_607045;
          Marker: string = ""; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607062 = newJObject()
  add(query_607062, "Marker", newJString(Marker))
  add(query_607062, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_607062, "Action", newJString(Action))
  add(query_607062, "Version", newJString(Version))
  add(query_607062, "MaxRecords", newJInt(MaxRecords))
  result = call_607061.call(nil, query_607062, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_607045(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_607046, base: "/",
    url: url_GetDescribeCacheParameterGroups_607047,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_607101 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCacheParameters_607103(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheParameters_607102(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607104 = query.getOrDefault("Action")
  valid_607104 = validateParameter(valid_607104, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_607104 != nil:
    section.add "Action", valid_607104
  var valid_607105 = query.getOrDefault("Version")
  valid_607105 = validateParameter(valid_607105, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607105 != nil:
    section.add "Version", valid_607105
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607106 = header.getOrDefault("X-Amz-Signature")
  valid_607106 = validateParameter(valid_607106, JString, required = false,
                                 default = nil)
  if valid_607106 != nil:
    section.add "X-Amz-Signature", valid_607106
  var valid_607107 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607107 = validateParameter(valid_607107, JString, required = false,
                                 default = nil)
  if valid_607107 != nil:
    section.add "X-Amz-Content-Sha256", valid_607107
  var valid_607108 = header.getOrDefault("X-Amz-Date")
  valid_607108 = validateParameter(valid_607108, JString, required = false,
                                 default = nil)
  if valid_607108 != nil:
    section.add "X-Amz-Date", valid_607108
  var valid_607109 = header.getOrDefault("X-Amz-Credential")
  valid_607109 = validateParameter(valid_607109, JString, required = false,
                                 default = nil)
  if valid_607109 != nil:
    section.add "X-Amz-Credential", valid_607109
  var valid_607110 = header.getOrDefault("X-Amz-Security-Token")
  valid_607110 = validateParameter(valid_607110, JString, required = false,
                                 default = nil)
  if valid_607110 != nil:
    section.add "X-Amz-Security-Token", valid_607110
  var valid_607111 = header.getOrDefault("X-Amz-Algorithm")
  valid_607111 = validateParameter(valid_607111, JString, required = false,
                                 default = nil)
  if valid_607111 != nil:
    section.add "X-Amz-Algorithm", valid_607111
  var valid_607112 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607112 = validateParameter(valid_607112, JString, required = false,
                                 default = nil)
  if valid_607112 != nil:
    section.add "X-Amz-SignedHeaders", valid_607112
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  section = newJObject()
  var valid_607113 = formData.getOrDefault("Source")
  valid_607113 = validateParameter(valid_607113, JString, required = false,
                                 default = nil)
  if valid_607113 != nil:
    section.add "Source", valid_607113
  var valid_607114 = formData.getOrDefault("MaxRecords")
  valid_607114 = validateParameter(valid_607114, JInt, required = false, default = nil)
  if valid_607114 != nil:
    section.add "MaxRecords", valid_607114
  var valid_607115 = formData.getOrDefault("Marker")
  valid_607115 = validateParameter(valid_607115, JString, required = false,
                                 default = nil)
  if valid_607115 != nil:
    section.add "Marker", valid_607115
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_607116 = formData.getOrDefault("CacheParameterGroupName")
  valid_607116 = validateParameter(valid_607116, JString, required = true,
                                 default = nil)
  if valid_607116 != nil:
    section.add "CacheParameterGroupName", valid_607116
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607117: Call_PostDescribeCacheParameters_607101; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_607117.validator(path, query, header, formData, body)
  let scheme = call_607117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607117.url(scheme.get, call_607117.host, call_607117.base,
                         call_607117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607117, url, valid)

proc call*(call_607118: Call_PostDescribeCacheParameters_607101;
          CacheParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607119 = newJObject()
  var formData_607120 = newJObject()
  add(formData_607120, "Source", newJString(Source))
  add(formData_607120, "MaxRecords", newJInt(MaxRecords))
  add(formData_607120, "Marker", newJString(Marker))
  add(formData_607120, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_607119, "Action", newJString(Action))
  add(query_607119, "Version", newJString(Version))
  result = call_607118.call(nil, query_607119, nil, formData_607120, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_607101(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_607102, base: "/",
    url: url_PostDescribeCacheParameters_607103,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_607082 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCacheParameters_607084(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheParameters_607083(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607085 = query.getOrDefault("Marker")
  valid_607085 = validateParameter(valid_607085, JString, required = false,
                                 default = nil)
  if valid_607085 != nil:
    section.add "Marker", valid_607085
  var valid_607086 = query.getOrDefault("Source")
  valid_607086 = validateParameter(valid_607086, JString, required = false,
                                 default = nil)
  if valid_607086 != nil:
    section.add "Source", valid_607086
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_607087 = query.getOrDefault("CacheParameterGroupName")
  valid_607087 = validateParameter(valid_607087, JString, required = true,
                                 default = nil)
  if valid_607087 != nil:
    section.add "CacheParameterGroupName", valid_607087
  var valid_607088 = query.getOrDefault("Action")
  valid_607088 = validateParameter(valid_607088, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_607088 != nil:
    section.add "Action", valid_607088
  var valid_607089 = query.getOrDefault("Version")
  valid_607089 = validateParameter(valid_607089, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607089 != nil:
    section.add "Version", valid_607089
  var valid_607090 = query.getOrDefault("MaxRecords")
  valid_607090 = validateParameter(valid_607090, JInt, required = false, default = nil)
  if valid_607090 != nil:
    section.add "MaxRecords", valid_607090
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607091 = header.getOrDefault("X-Amz-Signature")
  valid_607091 = validateParameter(valid_607091, JString, required = false,
                                 default = nil)
  if valid_607091 != nil:
    section.add "X-Amz-Signature", valid_607091
  var valid_607092 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607092 = validateParameter(valid_607092, JString, required = false,
                                 default = nil)
  if valid_607092 != nil:
    section.add "X-Amz-Content-Sha256", valid_607092
  var valid_607093 = header.getOrDefault("X-Amz-Date")
  valid_607093 = validateParameter(valid_607093, JString, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "X-Amz-Date", valid_607093
  var valid_607094 = header.getOrDefault("X-Amz-Credential")
  valid_607094 = validateParameter(valid_607094, JString, required = false,
                                 default = nil)
  if valid_607094 != nil:
    section.add "X-Amz-Credential", valid_607094
  var valid_607095 = header.getOrDefault("X-Amz-Security-Token")
  valid_607095 = validateParameter(valid_607095, JString, required = false,
                                 default = nil)
  if valid_607095 != nil:
    section.add "X-Amz-Security-Token", valid_607095
  var valid_607096 = header.getOrDefault("X-Amz-Algorithm")
  valid_607096 = validateParameter(valid_607096, JString, required = false,
                                 default = nil)
  if valid_607096 != nil:
    section.add "X-Amz-Algorithm", valid_607096
  var valid_607097 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607097 = validateParameter(valid_607097, JString, required = false,
                                 default = nil)
  if valid_607097 != nil:
    section.add "X-Amz-SignedHeaders", valid_607097
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607098: Call_GetDescribeCacheParameters_607082; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_607098.validator(path, query, header, formData, body)
  let scheme = call_607098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607098.url(scheme.get, call_607098.host, call_607098.base,
                         call_607098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607098, url, valid)

proc call*(call_607099: Call_GetDescribeCacheParameters_607082;
          CacheParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeCacheParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607100 = newJObject()
  add(query_607100, "Marker", newJString(Marker))
  add(query_607100, "Source", newJString(Source))
  add(query_607100, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_607100, "Action", newJString(Action))
  add(query_607100, "Version", newJString(Version))
  add(query_607100, "MaxRecords", newJInt(MaxRecords))
  result = call_607099.call(nil, query_607100, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_607082(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_607083, base: "/",
    url: url_GetDescribeCacheParameters_607084,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_607139 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCacheSecurityGroups_607141(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheSecurityGroups_607140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607142 = query.getOrDefault("Action")
  valid_607142 = validateParameter(valid_607142, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_607142 != nil:
    section.add "Action", valid_607142
  var valid_607143 = query.getOrDefault("Version")
  valid_607143 = validateParameter(valid_607143, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607143 != nil:
    section.add "Version", valid_607143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607144 = header.getOrDefault("X-Amz-Signature")
  valid_607144 = validateParameter(valid_607144, JString, required = false,
                                 default = nil)
  if valid_607144 != nil:
    section.add "X-Amz-Signature", valid_607144
  var valid_607145 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607145 = validateParameter(valid_607145, JString, required = false,
                                 default = nil)
  if valid_607145 != nil:
    section.add "X-Amz-Content-Sha256", valid_607145
  var valid_607146 = header.getOrDefault("X-Amz-Date")
  valid_607146 = validateParameter(valid_607146, JString, required = false,
                                 default = nil)
  if valid_607146 != nil:
    section.add "X-Amz-Date", valid_607146
  var valid_607147 = header.getOrDefault("X-Amz-Credential")
  valid_607147 = validateParameter(valid_607147, JString, required = false,
                                 default = nil)
  if valid_607147 != nil:
    section.add "X-Amz-Credential", valid_607147
  var valid_607148 = header.getOrDefault("X-Amz-Security-Token")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "X-Amz-Security-Token", valid_607148
  var valid_607149 = header.getOrDefault("X-Amz-Algorithm")
  valid_607149 = validateParameter(valid_607149, JString, required = false,
                                 default = nil)
  if valid_607149 != nil:
    section.add "X-Amz-Algorithm", valid_607149
  var valid_607150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607150 = validateParameter(valid_607150, JString, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "X-Amz-SignedHeaders", valid_607150
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_607151 = formData.getOrDefault("MaxRecords")
  valid_607151 = validateParameter(valid_607151, JInt, required = false, default = nil)
  if valid_607151 != nil:
    section.add "MaxRecords", valid_607151
  var valid_607152 = formData.getOrDefault("CacheSecurityGroupName")
  valid_607152 = validateParameter(valid_607152, JString, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "CacheSecurityGroupName", valid_607152
  var valid_607153 = formData.getOrDefault("Marker")
  valid_607153 = validateParameter(valid_607153, JString, required = false,
                                 default = nil)
  if valid_607153 != nil:
    section.add "Marker", valid_607153
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607154: Call_PostDescribeCacheSecurityGroups_607139;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_607154.validator(path, query, header, formData, body)
  let scheme = call_607154.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607154.url(scheme.get, call_607154.host, call_607154.base,
                         call_607154.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607154, url, valid)

proc call*(call_607155: Call_PostDescribeCacheSecurityGroups_607139;
          MaxRecords: int = 0; CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607156 = newJObject()
  var formData_607157 = newJObject()
  add(formData_607157, "MaxRecords", newJInt(MaxRecords))
  add(formData_607157, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_607157, "Marker", newJString(Marker))
  add(query_607156, "Action", newJString(Action))
  add(query_607156, "Version", newJString(Version))
  result = call_607155.call(nil, query_607156, nil, formData_607157, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_607139(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_607140, base: "/",
    url: url_PostDescribeCacheSecurityGroups_607141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_607121 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCacheSecurityGroups_607123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheSecurityGroups_607122(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607124 = query.getOrDefault("Marker")
  valid_607124 = validateParameter(valid_607124, JString, required = false,
                                 default = nil)
  if valid_607124 != nil:
    section.add "Marker", valid_607124
  var valid_607125 = query.getOrDefault("Action")
  valid_607125 = validateParameter(valid_607125, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_607125 != nil:
    section.add "Action", valid_607125
  var valid_607126 = query.getOrDefault("CacheSecurityGroupName")
  valid_607126 = validateParameter(valid_607126, JString, required = false,
                                 default = nil)
  if valid_607126 != nil:
    section.add "CacheSecurityGroupName", valid_607126
  var valid_607127 = query.getOrDefault("Version")
  valid_607127 = validateParameter(valid_607127, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607127 != nil:
    section.add "Version", valid_607127
  var valid_607128 = query.getOrDefault("MaxRecords")
  valid_607128 = validateParameter(valid_607128, JInt, required = false, default = nil)
  if valid_607128 != nil:
    section.add "MaxRecords", valid_607128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607129 = header.getOrDefault("X-Amz-Signature")
  valid_607129 = validateParameter(valid_607129, JString, required = false,
                                 default = nil)
  if valid_607129 != nil:
    section.add "X-Amz-Signature", valid_607129
  var valid_607130 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607130 = validateParameter(valid_607130, JString, required = false,
                                 default = nil)
  if valid_607130 != nil:
    section.add "X-Amz-Content-Sha256", valid_607130
  var valid_607131 = header.getOrDefault("X-Amz-Date")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "X-Amz-Date", valid_607131
  var valid_607132 = header.getOrDefault("X-Amz-Credential")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "X-Amz-Credential", valid_607132
  var valid_607133 = header.getOrDefault("X-Amz-Security-Token")
  valid_607133 = validateParameter(valid_607133, JString, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "X-Amz-Security-Token", valid_607133
  var valid_607134 = header.getOrDefault("X-Amz-Algorithm")
  valid_607134 = validateParameter(valid_607134, JString, required = false,
                                 default = nil)
  if valid_607134 != nil:
    section.add "X-Amz-Algorithm", valid_607134
  var valid_607135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607135 = validateParameter(valid_607135, JString, required = false,
                                 default = nil)
  if valid_607135 != nil:
    section.add "X-Amz-SignedHeaders", valid_607135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607136: Call_GetDescribeCacheSecurityGroups_607121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_607136.validator(path, query, header, formData, body)
  let scheme = call_607136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607136.url(scheme.get, call_607136.host, call_607136.base,
                         call_607136.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607136, url, valid)

proc call*(call_607137: Call_GetDescribeCacheSecurityGroups_607121;
          Marker: string = ""; Action: string = "DescribeCacheSecurityGroups";
          CacheSecurityGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607138 = newJObject()
  add(query_607138, "Marker", newJString(Marker))
  add(query_607138, "Action", newJString(Action))
  add(query_607138, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_607138, "Version", newJString(Version))
  add(query_607138, "MaxRecords", newJInt(MaxRecords))
  result = call_607137.call(nil, query_607138, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_607121(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_607122, base: "/",
    url: url_GetDescribeCacheSecurityGroups_607123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_607176 = ref object of OpenApiRestCall_605589
proc url_PostDescribeCacheSubnetGroups_607178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCacheSubnetGroups_607177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607179 = query.getOrDefault("Action")
  valid_607179 = validateParameter(valid_607179, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_607179 != nil:
    section.add "Action", valid_607179
  var valid_607180 = query.getOrDefault("Version")
  valid_607180 = validateParameter(valid_607180, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607180 != nil:
    section.add "Version", valid_607180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607181 = header.getOrDefault("X-Amz-Signature")
  valid_607181 = validateParameter(valid_607181, JString, required = false,
                                 default = nil)
  if valid_607181 != nil:
    section.add "X-Amz-Signature", valid_607181
  var valid_607182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Content-Sha256", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-Date")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-Date", valid_607183
  var valid_607184 = header.getOrDefault("X-Amz-Credential")
  valid_607184 = validateParameter(valid_607184, JString, required = false,
                                 default = nil)
  if valid_607184 != nil:
    section.add "X-Amz-Credential", valid_607184
  var valid_607185 = header.getOrDefault("X-Amz-Security-Token")
  valid_607185 = validateParameter(valid_607185, JString, required = false,
                                 default = nil)
  if valid_607185 != nil:
    section.add "X-Amz-Security-Token", valid_607185
  var valid_607186 = header.getOrDefault("X-Amz-Algorithm")
  valid_607186 = validateParameter(valid_607186, JString, required = false,
                                 default = nil)
  if valid_607186 != nil:
    section.add "X-Amz-Algorithm", valid_607186
  var valid_607187 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607187 = validateParameter(valid_607187, JString, required = false,
                                 default = nil)
  if valid_607187 != nil:
    section.add "X-Amz-SignedHeaders", valid_607187
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  section = newJObject()
  var valid_607188 = formData.getOrDefault("MaxRecords")
  valid_607188 = validateParameter(valid_607188, JInt, required = false, default = nil)
  if valid_607188 != nil:
    section.add "MaxRecords", valid_607188
  var valid_607189 = formData.getOrDefault("Marker")
  valid_607189 = validateParameter(valid_607189, JString, required = false,
                                 default = nil)
  if valid_607189 != nil:
    section.add "Marker", valid_607189
  var valid_607190 = formData.getOrDefault("CacheSubnetGroupName")
  valid_607190 = validateParameter(valid_607190, JString, required = false,
                                 default = nil)
  if valid_607190 != nil:
    section.add "CacheSubnetGroupName", valid_607190
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607191: Call_PostDescribeCacheSubnetGroups_607176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_607191.validator(path, query, header, formData, body)
  let scheme = call_607191.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607191.url(scheme.get, call_607191.host, call_607191.base,
                         call_607191.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607191, url, valid)

proc call*(call_607192: Call_PostDescribeCacheSubnetGroups_607176;
          MaxRecords: int = 0; Marker: string = ""; CacheSubnetGroupName: string = "";
          Action: string = "DescribeCacheSubnetGroups";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607193 = newJObject()
  var formData_607194 = newJObject()
  add(formData_607194, "MaxRecords", newJInt(MaxRecords))
  add(formData_607194, "Marker", newJString(Marker))
  add(formData_607194, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_607193, "Action", newJString(Action))
  add(query_607193, "Version", newJString(Version))
  result = call_607192.call(nil, query_607193, nil, formData_607194, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_607176(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_607177, base: "/",
    url: url_PostDescribeCacheSubnetGroups_607178,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_607158 = ref object of OpenApiRestCall_605589
proc url_GetDescribeCacheSubnetGroups_607160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCacheSubnetGroups_607159(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607161 = query.getOrDefault("Marker")
  valid_607161 = validateParameter(valid_607161, JString, required = false,
                                 default = nil)
  if valid_607161 != nil:
    section.add "Marker", valid_607161
  var valid_607162 = query.getOrDefault("Action")
  valid_607162 = validateParameter(valid_607162, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_607162 != nil:
    section.add "Action", valid_607162
  var valid_607163 = query.getOrDefault("CacheSubnetGroupName")
  valid_607163 = validateParameter(valid_607163, JString, required = false,
                                 default = nil)
  if valid_607163 != nil:
    section.add "CacheSubnetGroupName", valid_607163
  var valid_607164 = query.getOrDefault("Version")
  valid_607164 = validateParameter(valid_607164, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607164 != nil:
    section.add "Version", valid_607164
  var valid_607165 = query.getOrDefault("MaxRecords")
  valid_607165 = validateParameter(valid_607165, JInt, required = false, default = nil)
  if valid_607165 != nil:
    section.add "MaxRecords", valid_607165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607166 = header.getOrDefault("X-Amz-Signature")
  valid_607166 = validateParameter(valid_607166, JString, required = false,
                                 default = nil)
  if valid_607166 != nil:
    section.add "X-Amz-Signature", valid_607166
  var valid_607167 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "X-Amz-Content-Sha256", valid_607167
  var valid_607168 = header.getOrDefault("X-Amz-Date")
  valid_607168 = validateParameter(valid_607168, JString, required = false,
                                 default = nil)
  if valid_607168 != nil:
    section.add "X-Amz-Date", valid_607168
  var valid_607169 = header.getOrDefault("X-Amz-Credential")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "X-Amz-Credential", valid_607169
  var valid_607170 = header.getOrDefault("X-Amz-Security-Token")
  valid_607170 = validateParameter(valid_607170, JString, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "X-Amz-Security-Token", valid_607170
  var valid_607171 = header.getOrDefault("X-Amz-Algorithm")
  valid_607171 = validateParameter(valid_607171, JString, required = false,
                                 default = nil)
  if valid_607171 != nil:
    section.add "X-Amz-Algorithm", valid_607171
  var valid_607172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607172 = validateParameter(valid_607172, JString, required = false,
                                 default = nil)
  if valid_607172 != nil:
    section.add "X-Amz-SignedHeaders", valid_607172
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607173: Call_GetDescribeCacheSubnetGroups_607158; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_607173.validator(path, query, header, formData, body)
  let scheme = call_607173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607173.url(scheme.get, call_607173.host, call_607173.base,
                         call_607173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607173, url, valid)

proc call*(call_607174: Call_GetDescribeCacheSubnetGroups_607158;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607175 = newJObject()
  add(query_607175, "Marker", newJString(Marker))
  add(query_607175, "Action", newJString(Action))
  add(query_607175, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_607175, "Version", newJString(Version))
  add(query_607175, "MaxRecords", newJInt(MaxRecords))
  result = call_607174.call(nil, query_607175, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_607158(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_607159, base: "/",
    url: url_GetDescribeCacheSubnetGroups_607160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_607213 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEngineDefaultParameters_607215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_607214(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607216 = query.getOrDefault("Action")
  valid_607216 = validateParameter(valid_607216, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607216 != nil:
    section.add "Action", valid_607216
  var valid_607217 = query.getOrDefault("Version")
  valid_607217 = validateParameter(valid_607217, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607217 != nil:
    section.add "Version", valid_607217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607218 = header.getOrDefault("X-Amz-Signature")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-Signature", valid_607218
  var valid_607219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607219 = validateParameter(valid_607219, JString, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "X-Amz-Content-Sha256", valid_607219
  var valid_607220 = header.getOrDefault("X-Amz-Date")
  valid_607220 = validateParameter(valid_607220, JString, required = false,
                                 default = nil)
  if valid_607220 != nil:
    section.add "X-Amz-Date", valid_607220
  var valid_607221 = header.getOrDefault("X-Amz-Credential")
  valid_607221 = validateParameter(valid_607221, JString, required = false,
                                 default = nil)
  if valid_607221 != nil:
    section.add "X-Amz-Credential", valid_607221
  var valid_607222 = header.getOrDefault("X-Amz-Security-Token")
  valid_607222 = validateParameter(valid_607222, JString, required = false,
                                 default = nil)
  if valid_607222 != nil:
    section.add "X-Amz-Security-Token", valid_607222
  var valid_607223 = header.getOrDefault("X-Amz-Algorithm")
  valid_607223 = validateParameter(valid_607223, JString, required = false,
                                 default = nil)
  if valid_607223 != nil:
    section.add "X-Amz-Algorithm", valid_607223
  var valid_607224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607224 = validateParameter(valid_607224, JString, required = false,
                                 default = nil)
  if valid_607224 != nil:
    section.add "X-Amz-SignedHeaders", valid_607224
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_607225 = formData.getOrDefault("MaxRecords")
  valid_607225 = validateParameter(valid_607225, JInt, required = false, default = nil)
  if valid_607225 != nil:
    section.add "MaxRecords", valid_607225
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_607226 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_607226 = validateParameter(valid_607226, JString, required = true,
                                 default = nil)
  if valid_607226 != nil:
    section.add "CacheParameterGroupFamily", valid_607226
  var valid_607227 = formData.getOrDefault("Marker")
  valid_607227 = validateParameter(valid_607227, JString, required = false,
                                 default = nil)
  if valid_607227 != nil:
    section.add "Marker", valid_607227
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607228: Call_PostDescribeEngineDefaultParameters_607213;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_607228.validator(path, query, header, formData, body)
  let scheme = call_607228.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607228.url(scheme.get, call_607228.host, call_607228.base,
                         call_607228.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607228, url, valid)

proc call*(call_607229: Call_PostDescribeEngineDefaultParameters_607213;
          CacheParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607230 = newJObject()
  var formData_607231 = newJObject()
  add(formData_607231, "MaxRecords", newJInt(MaxRecords))
  add(formData_607231, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_607231, "Marker", newJString(Marker))
  add(query_607230, "Action", newJString(Action))
  add(query_607230, "Version", newJString(Version))
  result = call_607229.call(nil, query_607230, nil, formData_607231, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_607213(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_607214, base: "/",
    url: url_PostDescribeEngineDefaultParameters_607215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_607195 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEngineDefaultParameters_607197(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_607196(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607198 = query.getOrDefault("Marker")
  valid_607198 = validateParameter(valid_607198, JString, required = false,
                                 default = nil)
  if valid_607198 != nil:
    section.add "Marker", valid_607198
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_607199 = query.getOrDefault("CacheParameterGroupFamily")
  valid_607199 = validateParameter(valid_607199, JString, required = true,
                                 default = nil)
  if valid_607199 != nil:
    section.add "CacheParameterGroupFamily", valid_607199
  var valid_607200 = query.getOrDefault("Action")
  valid_607200 = validateParameter(valid_607200, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607200 != nil:
    section.add "Action", valid_607200
  var valid_607201 = query.getOrDefault("Version")
  valid_607201 = validateParameter(valid_607201, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607201 != nil:
    section.add "Version", valid_607201
  var valid_607202 = query.getOrDefault("MaxRecords")
  valid_607202 = validateParameter(valid_607202, JInt, required = false, default = nil)
  if valid_607202 != nil:
    section.add "MaxRecords", valid_607202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607203 = header.getOrDefault("X-Amz-Signature")
  valid_607203 = validateParameter(valid_607203, JString, required = false,
                                 default = nil)
  if valid_607203 != nil:
    section.add "X-Amz-Signature", valid_607203
  var valid_607204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607204 = validateParameter(valid_607204, JString, required = false,
                                 default = nil)
  if valid_607204 != nil:
    section.add "X-Amz-Content-Sha256", valid_607204
  var valid_607205 = header.getOrDefault("X-Amz-Date")
  valid_607205 = validateParameter(valid_607205, JString, required = false,
                                 default = nil)
  if valid_607205 != nil:
    section.add "X-Amz-Date", valid_607205
  var valid_607206 = header.getOrDefault("X-Amz-Credential")
  valid_607206 = validateParameter(valid_607206, JString, required = false,
                                 default = nil)
  if valid_607206 != nil:
    section.add "X-Amz-Credential", valid_607206
  var valid_607207 = header.getOrDefault("X-Amz-Security-Token")
  valid_607207 = validateParameter(valid_607207, JString, required = false,
                                 default = nil)
  if valid_607207 != nil:
    section.add "X-Amz-Security-Token", valid_607207
  var valid_607208 = header.getOrDefault("X-Amz-Algorithm")
  valid_607208 = validateParameter(valid_607208, JString, required = false,
                                 default = nil)
  if valid_607208 != nil:
    section.add "X-Amz-Algorithm", valid_607208
  var valid_607209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607209 = validateParameter(valid_607209, JString, required = false,
                                 default = nil)
  if valid_607209 != nil:
    section.add "X-Amz-SignedHeaders", valid_607209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607210: Call_GetDescribeEngineDefaultParameters_607195;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_607210.validator(path, query, header, formData, body)
  let scheme = call_607210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607210.url(scheme.get, call_607210.host, call_607210.base,
                         call_607210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607210, url, valid)

proc call*(call_607211: Call_GetDescribeEngineDefaultParameters_607195;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607212 = newJObject()
  add(query_607212, "Marker", newJString(Marker))
  add(query_607212, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_607212, "Action", newJString(Action))
  add(query_607212, "Version", newJString(Version))
  add(query_607212, "MaxRecords", newJInt(MaxRecords))
  result = call_607211.call(nil, query_607212, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_607195(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_607196, base: "/",
    url: url_GetDescribeEngineDefaultParameters_607197,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_607254 = ref object of OpenApiRestCall_605589
proc url_PostDescribeEvents_607256(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_607255(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607257 = query.getOrDefault("Action")
  valid_607257 = validateParameter(valid_607257, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607257 != nil:
    section.add "Action", valid_607257
  var valid_607258 = query.getOrDefault("Version")
  valid_607258 = validateParameter(valid_607258, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607258 != nil:
    section.add "Version", valid_607258
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607259 = header.getOrDefault("X-Amz-Signature")
  valid_607259 = validateParameter(valid_607259, JString, required = false,
                                 default = nil)
  if valid_607259 != nil:
    section.add "X-Amz-Signature", valid_607259
  var valid_607260 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607260 = validateParameter(valid_607260, JString, required = false,
                                 default = nil)
  if valid_607260 != nil:
    section.add "X-Amz-Content-Sha256", valid_607260
  var valid_607261 = header.getOrDefault("X-Amz-Date")
  valid_607261 = validateParameter(valid_607261, JString, required = false,
                                 default = nil)
  if valid_607261 != nil:
    section.add "X-Amz-Date", valid_607261
  var valid_607262 = header.getOrDefault("X-Amz-Credential")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Credential", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Security-Token")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Security-Token", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-Algorithm")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Algorithm", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-SignedHeaders", valid_607265
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  section = newJObject()
  var valid_607266 = formData.getOrDefault("MaxRecords")
  valid_607266 = validateParameter(valid_607266, JInt, required = false, default = nil)
  if valid_607266 != nil:
    section.add "MaxRecords", valid_607266
  var valid_607267 = formData.getOrDefault("Marker")
  valid_607267 = validateParameter(valid_607267, JString, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "Marker", valid_607267
  var valid_607268 = formData.getOrDefault("SourceIdentifier")
  valid_607268 = validateParameter(valid_607268, JString, required = false,
                                 default = nil)
  if valid_607268 != nil:
    section.add "SourceIdentifier", valid_607268
  var valid_607269 = formData.getOrDefault("SourceType")
  valid_607269 = validateParameter(valid_607269, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_607269 != nil:
    section.add "SourceType", valid_607269
  var valid_607270 = formData.getOrDefault("Duration")
  valid_607270 = validateParameter(valid_607270, JInt, required = false, default = nil)
  if valid_607270 != nil:
    section.add "Duration", valid_607270
  var valid_607271 = formData.getOrDefault("EndTime")
  valid_607271 = validateParameter(valid_607271, JString, required = false,
                                 default = nil)
  if valid_607271 != nil:
    section.add "EndTime", valid_607271
  var valid_607272 = formData.getOrDefault("StartTime")
  valid_607272 = validateParameter(valid_607272, JString, required = false,
                                 default = nil)
  if valid_607272 != nil:
    section.add "StartTime", valid_607272
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607273: Call_PostDescribeEvents_607254; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_607273.validator(path, query, header, formData, body)
  let scheme = call_607273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607273.url(scheme.get, call_607273.host, call_607273.base,
                         call_607273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607273, url, valid)

proc call*(call_607274: Call_PostDescribeEvents_607254; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "cache-cluster"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; Action: string = "DescribeEvents";
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607275 = newJObject()
  var formData_607276 = newJObject()
  add(formData_607276, "MaxRecords", newJInt(MaxRecords))
  add(formData_607276, "Marker", newJString(Marker))
  add(formData_607276, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_607276, "SourceType", newJString(SourceType))
  add(formData_607276, "Duration", newJInt(Duration))
  add(formData_607276, "EndTime", newJString(EndTime))
  add(formData_607276, "StartTime", newJString(StartTime))
  add(query_607275, "Action", newJString(Action))
  add(query_607275, "Version", newJString(Version))
  result = call_607274.call(nil, query_607275, nil, formData_607276, nil)

var postDescribeEvents* = Call_PostDescribeEvents_607254(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_607255, base: "/",
    url: url_PostDescribeEvents_607256, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_607232 = ref object of OpenApiRestCall_605589
proc url_GetDescribeEvents_607234(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_607233(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607235 = query.getOrDefault("Marker")
  valid_607235 = validateParameter(valid_607235, JString, required = false,
                                 default = nil)
  if valid_607235 != nil:
    section.add "Marker", valid_607235
  var valid_607236 = query.getOrDefault("SourceType")
  valid_607236 = validateParameter(valid_607236, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_607236 != nil:
    section.add "SourceType", valid_607236
  var valid_607237 = query.getOrDefault("SourceIdentifier")
  valid_607237 = validateParameter(valid_607237, JString, required = false,
                                 default = nil)
  if valid_607237 != nil:
    section.add "SourceIdentifier", valid_607237
  var valid_607238 = query.getOrDefault("Action")
  valid_607238 = validateParameter(valid_607238, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607238 != nil:
    section.add "Action", valid_607238
  var valid_607239 = query.getOrDefault("StartTime")
  valid_607239 = validateParameter(valid_607239, JString, required = false,
                                 default = nil)
  if valid_607239 != nil:
    section.add "StartTime", valid_607239
  var valid_607240 = query.getOrDefault("Duration")
  valid_607240 = validateParameter(valid_607240, JInt, required = false, default = nil)
  if valid_607240 != nil:
    section.add "Duration", valid_607240
  var valid_607241 = query.getOrDefault("EndTime")
  valid_607241 = validateParameter(valid_607241, JString, required = false,
                                 default = nil)
  if valid_607241 != nil:
    section.add "EndTime", valid_607241
  var valid_607242 = query.getOrDefault("Version")
  valid_607242 = validateParameter(valid_607242, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607242 != nil:
    section.add "Version", valid_607242
  var valid_607243 = query.getOrDefault("MaxRecords")
  valid_607243 = validateParameter(valid_607243, JInt, required = false, default = nil)
  if valid_607243 != nil:
    section.add "MaxRecords", valid_607243
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607244 = header.getOrDefault("X-Amz-Signature")
  valid_607244 = validateParameter(valid_607244, JString, required = false,
                                 default = nil)
  if valid_607244 != nil:
    section.add "X-Amz-Signature", valid_607244
  var valid_607245 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607245 = validateParameter(valid_607245, JString, required = false,
                                 default = nil)
  if valid_607245 != nil:
    section.add "X-Amz-Content-Sha256", valid_607245
  var valid_607246 = header.getOrDefault("X-Amz-Date")
  valid_607246 = validateParameter(valid_607246, JString, required = false,
                                 default = nil)
  if valid_607246 != nil:
    section.add "X-Amz-Date", valid_607246
  var valid_607247 = header.getOrDefault("X-Amz-Credential")
  valid_607247 = validateParameter(valid_607247, JString, required = false,
                                 default = nil)
  if valid_607247 != nil:
    section.add "X-Amz-Credential", valid_607247
  var valid_607248 = header.getOrDefault("X-Amz-Security-Token")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "X-Amz-Security-Token", valid_607248
  var valid_607249 = header.getOrDefault("X-Amz-Algorithm")
  valid_607249 = validateParameter(valid_607249, JString, required = false,
                                 default = nil)
  if valid_607249 != nil:
    section.add "X-Amz-Algorithm", valid_607249
  var valid_607250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "X-Amz-SignedHeaders", valid_607250
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607251: Call_GetDescribeEvents_607232; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_607251.validator(path, query, header, formData, body)
  let scheme = call_607251.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607251.url(scheme.get, call_607251.host, call_607251.base,
                         call_607251.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607251, url, valid)

proc call*(call_607252: Call_GetDescribeEvents_607232; Marker: string = "";
          SourceType: string = "cache-cluster"; SourceIdentifier: string = "";
          Action: string = "DescribeEvents"; StartTime: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607253 = newJObject()
  add(query_607253, "Marker", newJString(Marker))
  add(query_607253, "SourceType", newJString(SourceType))
  add(query_607253, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_607253, "Action", newJString(Action))
  add(query_607253, "StartTime", newJString(StartTime))
  add(query_607253, "Duration", newJInt(Duration))
  add(query_607253, "EndTime", newJString(EndTime))
  add(query_607253, "Version", newJString(Version))
  add(query_607253, "MaxRecords", newJInt(MaxRecords))
  result = call_607252.call(nil, query_607253, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_607232(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_607233,
    base: "/", url: url_GetDescribeEvents_607234,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_607295 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReplicationGroups_607297(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReplicationGroups_607296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607298 = query.getOrDefault("Action")
  valid_607298 = validateParameter(valid_607298, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_607298 != nil:
    section.add "Action", valid_607298
  var valid_607299 = query.getOrDefault("Version")
  valid_607299 = validateParameter(valid_607299, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607299 != nil:
    section.add "Version", valid_607299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607300 = header.getOrDefault("X-Amz-Signature")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-Signature", valid_607300
  var valid_607301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607301 = validateParameter(valid_607301, JString, required = false,
                                 default = nil)
  if valid_607301 != nil:
    section.add "X-Amz-Content-Sha256", valid_607301
  var valid_607302 = header.getOrDefault("X-Amz-Date")
  valid_607302 = validateParameter(valid_607302, JString, required = false,
                                 default = nil)
  if valid_607302 != nil:
    section.add "X-Amz-Date", valid_607302
  var valid_607303 = header.getOrDefault("X-Amz-Credential")
  valid_607303 = validateParameter(valid_607303, JString, required = false,
                                 default = nil)
  if valid_607303 != nil:
    section.add "X-Amz-Credential", valid_607303
  var valid_607304 = header.getOrDefault("X-Amz-Security-Token")
  valid_607304 = validateParameter(valid_607304, JString, required = false,
                                 default = nil)
  if valid_607304 != nil:
    section.add "X-Amz-Security-Token", valid_607304
  var valid_607305 = header.getOrDefault("X-Amz-Algorithm")
  valid_607305 = validateParameter(valid_607305, JString, required = false,
                                 default = nil)
  if valid_607305 != nil:
    section.add "X-Amz-Algorithm", valid_607305
  var valid_607306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607306 = validateParameter(valid_607306, JString, required = false,
                                 default = nil)
  if valid_607306 != nil:
    section.add "X-Amz-SignedHeaders", valid_607306
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  section = newJObject()
  var valid_607307 = formData.getOrDefault("MaxRecords")
  valid_607307 = validateParameter(valid_607307, JInt, required = false, default = nil)
  if valid_607307 != nil:
    section.add "MaxRecords", valid_607307
  var valid_607308 = formData.getOrDefault("Marker")
  valid_607308 = validateParameter(valid_607308, JString, required = false,
                                 default = nil)
  if valid_607308 != nil:
    section.add "Marker", valid_607308
  var valid_607309 = formData.getOrDefault("ReplicationGroupId")
  valid_607309 = validateParameter(valid_607309, JString, required = false,
                                 default = nil)
  if valid_607309 != nil:
    section.add "ReplicationGroupId", valid_607309
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607310: Call_PostDescribeReplicationGroups_607295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_607310.validator(path, query, header, formData, body)
  let scheme = call_607310.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607310.url(scheme.get, call_607310.host, call_607310.base,
                         call_607310.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607310, url, valid)

proc call*(call_607311: Call_PostDescribeReplicationGroups_607295;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeReplicationGroups";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  var query_607312 = newJObject()
  var formData_607313 = newJObject()
  add(formData_607313, "MaxRecords", newJInt(MaxRecords))
  add(formData_607313, "Marker", newJString(Marker))
  add(query_607312, "Action", newJString(Action))
  add(query_607312, "Version", newJString(Version))
  add(formData_607313, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_607311.call(nil, query_607312, nil, formData_607313, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_607295(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_607296, base: "/",
    url: url_PostDescribeReplicationGroups_607297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_607277 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReplicationGroups_607279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReplicationGroups_607278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_607280 = query.getOrDefault("Marker")
  valid_607280 = validateParameter(valid_607280, JString, required = false,
                                 default = nil)
  if valid_607280 != nil:
    section.add "Marker", valid_607280
  var valid_607281 = query.getOrDefault("Action")
  valid_607281 = validateParameter(valid_607281, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_607281 != nil:
    section.add "Action", valid_607281
  var valid_607282 = query.getOrDefault("ReplicationGroupId")
  valid_607282 = validateParameter(valid_607282, JString, required = false,
                                 default = nil)
  if valid_607282 != nil:
    section.add "ReplicationGroupId", valid_607282
  var valid_607283 = query.getOrDefault("Version")
  valid_607283 = validateParameter(valid_607283, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607283 != nil:
    section.add "Version", valid_607283
  var valid_607284 = query.getOrDefault("MaxRecords")
  valid_607284 = validateParameter(valid_607284, JInt, required = false, default = nil)
  if valid_607284 != nil:
    section.add "MaxRecords", valid_607284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607285 = header.getOrDefault("X-Amz-Signature")
  valid_607285 = validateParameter(valid_607285, JString, required = false,
                                 default = nil)
  if valid_607285 != nil:
    section.add "X-Amz-Signature", valid_607285
  var valid_607286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607286 = validateParameter(valid_607286, JString, required = false,
                                 default = nil)
  if valid_607286 != nil:
    section.add "X-Amz-Content-Sha256", valid_607286
  var valid_607287 = header.getOrDefault("X-Amz-Date")
  valid_607287 = validateParameter(valid_607287, JString, required = false,
                                 default = nil)
  if valid_607287 != nil:
    section.add "X-Amz-Date", valid_607287
  var valid_607288 = header.getOrDefault("X-Amz-Credential")
  valid_607288 = validateParameter(valid_607288, JString, required = false,
                                 default = nil)
  if valid_607288 != nil:
    section.add "X-Amz-Credential", valid_607288
  var valid_607289 = header.getOrDefault("X-Amz-Security-Token")
  valid_607289 = validateParameter(valid_607289, JString, required = false,
                                 default = nil)
  if valid_607289 != nil:
    section.add "X-Amz-Security-Token", valid_607289
  var valid_607290 = header.getOrDefault("X-Amz-Algorithm")
  valid_607290 = validateParameter(valid_607290, JString, required = false,
                                 default = nil)
  if valid_607290 != nil:
    section.add "X-Amz-Algorithm", valid_607290
  var valid_607291 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607291 = validateParameter(valid_607291, JString, required = false,
                                 default = nil)
  if valid_607291 != nil:
    section.add "X-Amz-SignedHeaders", valid_607291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607292: Call_GetDescribeReplicationGroups_607277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_607292.validator(path, query, header, formData, body)
  let scheme = call_607292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607292.url(scheme.get, call_607292.host, call_607292.base,
                         call_607292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607292, url, valid)

proc call*(call_607293: Call_GetDescribeReplicationGroups_607277;
          Marker: string = ""; Action: string = "DescribeReplicationGroups";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  var query_607294 = newJObject()
  add(query_607294, "Marker", newJString(Marker))
  add(query_607294, "Action", newJString(Action))
  add(query_607294, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_607294, "Version", newJString(Version))
  add(query_607294, "MaxRecords", newJInt(MaxRecords))
  result = call_607293.call(nil, query_607294, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_607277(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_607278, base: "/",
    url: url_GetDescribeReplicationGroups_607279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_607337 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReservedCacheNodes_607339(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedCacheNodes_607338(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607340 = query.getOrDefault("Action")
  valid_607340 = validateParameter(valid_607340, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_607340 != nil:
    section.add "Action", valid_607340
  var valid_607341 = query.getOrDefault("Version")
  valid_607341 = validateParameter(valid_607341, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607341 != nil:
    section.add "Version", valid_607341
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607342 = header.getOrDefault("X-Amz-Signature")
  valid_607342 = validateParameter(valid_607342, JString, required = false,
                                 default = nil)
  if valid_607342 != nil:
    section.add "X-Amz-Signature", valid_607342
  var valid_607343 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607343 = validateParameter(valid_607343, JString, required = false,
                                 default = nil)
  if valid_607343 != nil:
    section.add "X-Amz-Content-Sha256", valid_607343
  var valid_607344 = header.getOrDefault("X-Amz-Date")
  valid_607344 = validateParameter(valid_607344, JString, required = false,
                                 default = nil)
  if valid_607344 != nil:
    section.add "X-Amz-Date", valid_607344
  var valid_607345 = header.getOrDefault("X-Amz-Credential")
  valid_607345 = validateParameter(valid_607345, JString, required = false,
                                 default = nil)
  if valid_607345 != nil:
    section.add "X-Amz-Credential", valid_607345
  var valid_607346 = header.getOrDefault("X-Amz-Security-Token")
  valid_607346 = validateParameter(valid_607346, JString, required = false,
                                 default = nil)
  if valid_607346 != nil:
    section.add "X-Amz-Security-Token", valid_607346
  var valid_607347 = header.getOrDefault("X-Amz-Algorithm")
  valid_607347 = validateParameter(valid_607347, JString, required = false,
                                 default = nil)
  if valid_607347 != nil:
    section.add "X-Amz-Algorithm", valid_607347
  var valid_607348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607348 = validateParameter(valid_607348, JString, required = false,
                                 default = nil)
  if valid_607348 != nil:
    section.add "X-Amz-SignedHeaders", valid_607348
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_607349 = formData.getOrDefault("MaxRecords")
  valid_607349 = validateParameter(valid_607349, JInt, required = false, default = nil)
  if valid_607349 != nil:
    section.add "MaxRecords", valid_607349
  var valid_607350 = formData.getOrDefault("Marker")
  valid_607350 = validateParameter(valid_607350, JString, required = false,
                                 default = nil)
  if valid_607350 != nil:
    section.add "Marker", valid_607350
  var valid_607351 = formData.getOrDefault("Duration")
  valid_607351 = validateParameter(valid_607351, JString, required = false,
                                 default = nil)
  if valid_607351 != nil:
    section.add "Duration", valid_607351
  var valid_607352 = formData.getOrDefault("OfferingType")
  valid_607352 = validateParameter(valid_607352, JString, required = false,
                                 default = nil)
  if valid_607352 != nil:
    section.add "OfferingType", valid_607352
  var valid_607353 = formData.getOrDefault("ProductDescription")
  valid_607353 = validateParameter(valid_607353, JString, required = false,
                                 default = nil)
  if valid_607353 != nil:
    section.add "ProductDescription", valid_607353
  var valid_607354 = formData.getOrDefault("ReservedCacheNodeId")
  valid_607354 = validateParameter(valid_607354, JString, required = false,
                                 default = nil)
  if valid_607354 != nil:
    section.add "ReservedCacheNodeId", valid_607354
  var valid_607355 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_607355 = validateParameter(valid_607355, JString, required = false,
                                 default = nil)
  if valid_607355 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_607355
  var valid_607356 = formData.getOrDefault("CacheNodeType")
  valid_607356 = validateParameter(valid_607356, JString, required = false,
                                 default = nil)
  if valid_607356 != nil:
    section.add "CacheNodeType", valid_607356
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607357: Call_PostDescribeReservedCacheNodes_607337; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_607357.validator(path, query, header, formData, body)
  let scheme = call_607357.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607357.url(scheme.get, call_607357.host, call_607357.base,
                         call_607357.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607357, url, valid)

proc call*(call_607358: Call_PostDescribeReservedCacheNodes_607337;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodes";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_607359 = newJObject()
  var formData_607360 = newJObject()
  add(formData_607360, "MaxRecords", newJInt(MaxRecords))
  add(formData_607360, "Marker", newJString(Marker))
  add(formData_607360, "Duration", newJString(Duration))
  add(formData_607360, "OfferingType", newJString(OfferingType))
  add(formData_607360, "ProductDescription", newJString(ProductDescription))
  add(query_607359, "Action", newJString(Action))
  add(query_607359, "Version", newJString(Version))
  add(formData_607360, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_607360, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_607360, "CacheNodeType", newJString(CacheNodeType))
  result = call_607358.call(nil, query_607359, nil, formData_607360, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_607337(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_607338, base: "/",
    url: url_PostDescribeReservedCacheNodes_607339,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_607314 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReservedCacheNodes_607316(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedCacheNodes_607315(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_607317 = query.getOrDefault("Marker")
  valid_607317 = validateParameter(valid_607317, JString, required = false,
                                 default = nil)
  if valid_607317 != nil:
    section.add "Marker", valid_607317
  var valid_607318 = query.getOrDefault("ProductDescription")
  valid_607318 = validateParameter(valid_607318, JString, required = false,
                                 default = nil)
  if valid_607318 != nil:
    section.add "ProductDescription", valid_607318
  var valid_607319 = query.getOrDefault("OfferingType")
  valid_607319 = validateParameter(valid_607319, JString, required = false,
                                 default = nil)
  if valid_607319 != nil:
    section.add "OfferingType", valid_607319
  var valid_607320 = query.getOrDefault("CacheNodeType")
  valid_607320 = validateParameter(valid_607320, JString, required = false,
                                 default = nil)
  if valid_607320 != nil:
    section.add "CacheNodeType", valid_607320
  var valid_607321 = query.getOrDefault("Action")
  valid_607321 = validateParameter(valid_607321, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_607321 != nil:
    section.add "Action", valid_607321
  var valid_607322 = query.getOrDefault("Duration")
  valid_607322 = validateParameter(valid_607322, JString, required = false,
                                 default = nil)
  if valid_607322 != nil:
    section.add "Duration", valid_607322
  var valid_607323 = query.getOrDefault("ReservedCacheNodeId")
  valid_607323 = validateParameter(valid_607323, JString, required = false,
                                 default = nil)
  if valid_607323 != nil:
    section.add "ReservedCacheNodeId", valid_607323
  var valid_607324 = query.getOrDefault("Version")
  valid_607324 = validateParameter(valid_607324, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607324 != nil:
    section.add "Version", valid_607324
  var valid_607325 = query.getOrDefault("MaxRecords")
  valid_607325 = validateParameter(valid_607325, JInt, required = false, default = nil)
  if valid_607325 != nil:
    section.add "MaxRecords", valid_607325
  var valid_607326 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_607326 = validateParameter(valid_607326, JString, required = false,
                                 default = nil)
  if valid_607326 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_607326
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607327 = header.getOrDefault("X-Amz-Signature")
  valid_607327 = validateParameter(valid_607327, JString, required = false,
                                 default = nil)
  if valid_607327 != nil:
    section.add "X-Amz-Signature", valid_607327
  var valid_607328 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607328 = validateParameter(valid_607328, JString, required = false,
                                 default = nil)
  if valid_607328 != nil:
    section.add "X-Amz-Content-Sha256", valid_607328
  var valid_607329 = header.getOrDefault("X-Amz-Date")
  valid_607329 = validateParameter(valid_607329, JString, required = false,
                                 default = nil)
  if valid_607329 != nil:
    section.add "X-Amz-Date", valid_607329
  var valid_607330 = header.getOrDefault("X-Amz-Credential")
  valid_607330 = validateParameter(valid_607330, JString, required = false,
                                 default = nil)
  if valid_607330 != nil:
    section.add "X-Amz-Credential", valid_607330
  var valid_607331 = header.getOrDefault("X-Amz-Security-Token")
  valid_607331 = validateParameter(valid_607331, JString, required = false,
                                 default = nil)
  if valid_607331 != nil:
    section.add "X-Amz-Security-Token", valid_607331
  var valid_607332 = header.getOrDefault("X-Amz-Algorithm")
  valid_607332 = validateParameter(valid_607332, JString, required = false,
                                 default = nil)
  if valid_607332 != nil:
    section.add "X-Amz-Algorithm", valid_607332
  var valid_607333 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607333 = validateParameter(valid_607333, JString, required = false,
                                 default = nil)
  if valid_607333 != nil:
    section.add "X-Amz-SignedHeaders", valid_607333
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607334: Call_GetDescribeReservedCacheNodes_607314; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_607334.validator(path, query, header, formData, body)
  let scheme = call_607334.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607334.url(scheme.get, call_607334.host, call_607334.base,
                         call_607334.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607334, url, valid)

proc call*(call_607335: Call_GetDescribeReservedCacheNodes_607314;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02";
          MaxRecords: int = 0; ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  var query_607336 = newJObject()
  add(query_607336, "Marker", newJString(Marker))
  add(query_607336, "ProductDescription", newJString(ProductDescription))
  add(query_607336, "OfferingType", newJString(OfferingType))
  add(query_607336, "CacheNodeType", newJString(CacheNodeType))
  add(query_607336, "Action", newJString(Action))
  add(query_607336, "Duration", newJString(Duration))
  add(query_607336, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_607336, "Version", newJString(Version))
  add(query_607336, "MaxRecords", newJInt(MaxRecords))
  add(query_607336, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_607335.call(nil, query_607336, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_607314(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_607315, base: "/",
    url: url_GetDescribeReservedCacheNodes_607316,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_607383 = ref object of OpenApiRestCall_605589
proc url_PostDescribeReservedCacheNodesOfferings_607385(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedCacheNodesOfferings_607384(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607386 = query.getOrDefault("Action")
  valid_607386 = validateParameter(valid_607386, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_607386 != nil:
    section.add "Action", valid_607386
  var valid_607387 = query.getOrDefault("Version")
  valid_607387 = validateParameter(valid_607387, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607387 != nil:
    section.add "Version", valid_607387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607388 = header.getOrDefault("X-Amz-Signature")
  valid_607388 = validateParameter(valid_607388, JString, required = false,
                                 default = nil)
  if valid_607388 != nil:
    section.add "X-Amz-Signature", valid_607388
  var valid_607389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607389 = validateParameter(valid_607389, JString, required = false,
                                 default = nil)
  if valid_607389 != nil:
    section.add "X-Amz-Content-Sha256", valid_607389
  var valid_607390 = header.getOrDefault("X-Amz-Date")
  valid_607390 = validateParameter(valid_607390, JString, required = false,
                                 default = nil)
  if valid_607390 != nil:
    section.add "X-Amz-Date", valid_607390
  var valid_607391 = header.getOrDefault("X-Amz-Credential")
  valid_607391 = validateParameter(valid_607391, JString, required = false,
                                 default = nil)
  if valid_607391 != nil:
    section.add "X-Amz-Credential", valid_607391
  var valid_607392 = header.getOrDefault("X-Amz-Security-Token")
  valid_607392 = validateParameter(valid_607392, JString, required = false,
                                 default = nil)
  if valid_607392 != nil:
    section.add "X-Amz-Security-Token", valid_607392
  var valid_607393 = header.getOrDefault("X-Amz-Algorithm")
  valid_607393 = validateParameter(valid_607393, JString, required = false,
                                 default = nil)
  if valid_607393 != nil:
    section.add "X-Amz-Algorithm", valid_607393
  var valid_607394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607394 = validateParameter(valid_607394, JString, required = false,
                                 default = nil)
  if valid_607394 != nil:
    section.add "X-Amz-SignedHeaders", valid_607394
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  section = newJObject()
  var valid_607395 = formData.getOrDefault("MaxRecords")
  valid_607395 = validateParameter(valid_607395, JInt, required = false, default = nil)
  if valid_607395 != nil:
    section.add "MaxRecords", valid_607395
  var valid_607396 = formData.getOrDefault("Marker")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "Marker", valid_607396
  var valid_607397 = formData.getOrDefault("Duration")
  valid_607397 = validateParameter(valid_607397, JString, required = false,
                                 default = nil)
  if valid_607397 != nil:
    section.add "Duration", valid_607397
  var valid_607398 = formData.getOrDefault("OfferingType")
  valid_607398 = validateParameter(valid_607398, JString, required = false,
                                 default = nil)
  if valid_607398 != nil:
    section.add "OfferingType", valid_607398
  var valid_607399 = formData.getOrDefault("ProductDescription")
  valid_607399 = validateParameter(valid_607399, JString, required = false,
                                 default = nil)
  if valid_607399 != nil:
    section.add "ProductDescription", valid_607399
  var valid_607400 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_607400 = validateParameter(valid_607400, JString, required = false,
                                 default = nil)
  if valid_607400 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_607400
  var valid_607401 = formData.getOrDefault("CacheNodeType")
  valid_607401 = validateParameter(valid_607401, JString, required = false,
                                 default = nil)
  if valid_607401 != nil:
    section.add "CacheNodeType", valid_607401
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607402: Call_PostDescribeReservedCacheNodesOfferings_607383;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_607402.validator(path, query, header, formData, body)
  let scheme = call_607402.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607402.url(scheme.get, call_607402.host, call_607402.base,
                         call_607402.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607402, url, valid)

proc call*(call_607403: Call_PostDescribeReservedCacheNodesOfferings_607383;
          MaxRecords: int = 0; Marker: string = ""; Duration: string = "";
          OfferingType: string = ""; ProductDescription: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Version: string = "2015-02-02"; ReservedCacheNodesOfferingId: string = "";
          CacheNodeType: string = ""): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  var query_607404 = newJObject()
  var formData_607405 = newJObject()
  add(formData_607405, "MaxRecords", newJInt(MaxRecords))
  add(formData_607405, "Marker", newJString(Marker))
  add(formData_607405, "Duration", newJString(Duration))
  add(formData_607405, "OfferingType", newJString(OfferingType))
  add(formData_607405, "ProductDescription", newJString(ProductDescription))
  add(query_607404, "Action", newJString(Action))
  add(query_607404, "Version", newJString(Version))
  add(formData_607405, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_607405, "CacheNodeType", newJString(CacheNodeType))
  result = call_607403.call(nil, query_607404, nil, formData_607405, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_607383(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_607384, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_607385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_607361 = ref object of OpenApiRestCall_605589
proc url_GetDescribeReservedCacheNodesOfferings_607363(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedCacheNodesOfferings_607362(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_607364 = query.getOrDefault("Marker")
  valid_607364 = validateParameter(valid_607364, JString, required = false,
                                 default = nil)
  if valid_607364 != nil:
    section.add "Marker", valid_607364
  var valid_607365 = query.getOrDefault("ProductDescription")
  valid_607365 = validateParameter(valid_607365, JString, required = false,
                                 default = nil)
  if valid_607365 != nil:
    section.add "ProductDescription", valid_607365
  var valid_607366 = query.getOrDefault("OfferingType")
  valid_607366 = validateParameter(valid_607366, JString, required = false,
                                 default = nil)
  if valid_607366 != nil:
    section.add "OfferingType", valid_607366
  var valid_607367 = query.getOrDefault("CacheNodeType")
  valid_607367 = validateParameter(valid_607367, JString, required = false,
                                 default = nil)
  if valid_607367 != nil:
    section.add "CacheNodeType", valid_607367
  var valid_607368 = query.getOrDefault("Action")
  valid_607368 = validateParameter(valid_607368, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_607368 != nil:
    section.add "Action", valid_607368
  var valid_607369 = query.getOrDefault("Duration")
  valid_607369 = validateParameter(valid_607369, JString, required = false,
                                 default = nil)
  if valid_607369 != nil:
    section.add "Duration", valid_607369
  var valid_607370 = query.getOrDefault("Version")
  valid_607370 = validateParameter(valid_607370, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607370 != nil:
    section.add "Version", valid_607370
  var valid_607371 = query.getOrDefault("MaxRecords")
  valid_607371 = validateParameter(valid_607371, JInt, required = false, default = nil)
  if valid_607371 != nil:
    section.add "MaxRecords", valid_607371
  var valid_607372 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_607372 = validateParameter(valid_607372, JString, required = false,
                                 default = nil)
  if valid_607372 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_607372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607373 = header.getOrDefault("X-Amz-Signature")
  valid_607373 = validateParameter(valid_607373, JString, required = false,
                                 default = nil)
  if valid_607373 != nil:
    section.add "X-Amz-Signature", valid_607373
  var valid_607374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607374 = validateParameter(valid_607374, JString, required = false,
                                 default = nil)
  if valid_607374 != nil:
    section.add "X-Amz-Content-Sha256", valid_607374
  var valid_607375 = header.getOrDefault("X-Amz-Date")
  valid_607375 = validateParameter(valid_607375, JString, required = false,
                                 default = nil)
  if valid_607375 != nil:
    section.add "X-Amz-Date", valid_607375
  var valid_607376 = header.getOrDefault("X-Amz-Credential")
  valid_607376 = validateParameter(valid_607376, JString, required = false,
                                 default = nil)
  if valid_607376 != nil:
    section.add "X-Amz-Credential", valid_607376
  var valid_607377 = header.getOrDefault("X-Amz-Security-Token")
  valid_607377 = validateParameter(valid_607377, JString, required = false,
                                 default = nil)
  if valid_607377 != nil:
    section.add "X-Amz-Security-Token", valid_607377
  var valid_607378 = header.getOrDefault("X-Amz-Algorithm")
  valid_607378 = validateParameter(valid_607378, JString, required = false,
                                 default = nil)
  if valid_607378 != nil:
    section.add "X-Amz-Algorithm", valid_607378
  var valid_607379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607379 = validateParameter(valid_607379, JString, required = false,
                                 default = nil)
  if valid_607379 != nil:
    section.add "X-Amz-SignedHeaders", valid_607379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607380: Call_GetDescribeReservedCacheNodesOfferings_607361;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_607380.validator(path, query, header, formData, body)
  let scheme = call_607380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607380.url(scheme.get, call_607380.host, call_607380.base,
                         call_607380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607380, url, valid)

proc call*(call_607381: Call_GetDescribeReservedCacheNodesOfferings_607361;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; CacheNodeType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; Version: string = "2015-02-02"; MaxRecords: int = 0;
          ReservedCacheNodesOfferingId: string = ""): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_607382 = newJObject()
  add(query_607382, "Marker", newJString(Marker))
  add(query_607382, "ProductDescription", newJString(ProductDescription))
  add(query_607382, "OfferingType", newJString(OfferingType))
  add(query_607382, "CacheNodeType", newJString(CacheNodeType))
  add(query_607382, "Action", newJString(Action))
  add(query_607382, "Duration", newJString(Duration))
  add(query_607382, "Version", newJString(Version))
  add(query_607382, "MaxRecords", newJInt(MaxRecords))
  add(query_607382, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_607381.call(nil, query_607382, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_607361(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_607362, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_607363,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_607425 = ref object of OpenApiRestCall_605589
proc url_PostDescribeServiceUpdates_607427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeServiceUpdates_607426(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607428 = query.getOrDefault("Action")
  valid_607428 = validateParameter(valid_607428, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_607428 != nil:
    section.add "Action", valid_607428
  var valid_607429 = query.getOrDefault("Version")
  valid_607429 = validateParameter(valid_607429, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607429 != nil:
    section.add "Version", valid_607429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607430 = header.getOrDefault("X-Amz-Signature")
  valid_607430 = validateParameter(valid_607430, JString, required = false,
                                 default = nil)
  if valid_607430 != nil:
    section.add "X-Amz-Signature", valid_607430
  var valid_607431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607431 = validateParameter(valid_607431, JString, required = false,
                                 default = nil)
  if valid_607431 != nil:
    section.add "X-Amz-Content-Sha256", valid_607431
  var valid_607432 = header.getOrDefault("X-Amz-Date")
  valid_607432 = validateParameter(valid_607432, JString, required = false,
                                 default = nil)
  if valid_607432 != nil:
    section.add "X-Amz-Date", valid_607432
  var valid_607433 = header.getOrDefault("X-Amz-Credential")
  valid_607433 = validateParameter(valid_607433, JString, required = false,
                                 default = nil)
  if valid_607433 != nil:
    section.add "X-Amz-Credential", valid_607433
  var valid_607434 = header.getOrDefault("X-Amz-Security-Token")
  valid_607434 = validateParameter(valid_607434, JString, required = false,
                                 default = nil)
  if valid_607434 != nil:
    section.add "X-Amz-Security-Token", valid_607434
  var valid_607435 = header.getOrDefault("X-Amz-Algorithm")
  valid_607435 = validateParameter(valid_607435, JString, required = false,
                                 default = nil)
  if valid_607435 != nil:
    section.add "X-Amz-Algorithm", valid_607435
  var valid_607436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607436 = validateParameter(valid_607436, JString, required = false,
                                 default = nil)
  if valid_607436 != nil:
    section.add "X-Amz-SignedHeaders", valid_607436
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_607437 = formData.getOrDefault("MaxRecords")
  valid_607437 = validateParameter(valid_607437, JInt, required = false, default = nil)
  if valid_607437 != nil:
    section.add "MaxRecords", valid_607437
  var valid_607438 = formData.getOrDefault("ServiceUpdateName")
  valid_607438 = validateParameter(valid_607438, JString, required = false,
                                 default = nil)
  if valid_607438 != nil:
    section.add "ServiceUpdateName", valid_607438
  var valid_607439 = formData.getOrDefault("Marker")
  valid_607439 = validateParameter(valid_607439, JString, required = false,
                                 default = nil)
  if valid_607439 != nil:
    section.add "Marker", valid_607439
  var valid_607440 = formData.getOrDefault("ServiceUpdateStatus")
  valid_607440 = validateParameter(valid_607440, JArray, required = false,
                                 default = nil)
  if valid_607440 != nil:
    section.add "ServiceUpdateStatus", valid_607440
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607441: Call_PostDescribeServiceUpdates_607425; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_607441.validator(path, query, header, formData, body)
  let scheme = call_607441.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607441.url(scheme.get, call_607441.host, call_607441.base,
                         call_607441.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607441, url, valid)

proc call*(call_607442: Call_PostDescribeServiceUpdates_607425;
          MaxRecords: int = 0; ServiceUpdateName: string = ""; Marker: string = "";
          Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_607443 = newJObject()
  var formData_607444 = newJObject()
  add(formData_607444, "MaxRecords", newJInt(MaxRecords))
  add(formData_607444, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_607444, "Marker", newJString(Marker))
  add(query_607443, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_607444.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_607443, "Version", newJString(Version))
  result = call_607442.call(nil, query_607443, nil, formData_607444, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_607425(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_607426, base: "/",
    url: url_PostDescribeServiceUpdates_607427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_607406 = ref object of OpenApiRestCall_605589
proc url_GetDescribeServiceUpdates_607408(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeServiceUpdates_607407(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Action: JString (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_607409 = query.getOrDefault("Marker")
  valid_607409 = validateParameter(valid_607409, JString, required = false,
                                 default = nil)
  if valid_607409 != nil:
    section.add "Marker", valid_607409
  var valid_607410 = query.getOrDefault("ServiceUpdateName")
  valid_607410 = validateParameter(valid_607410, JString, required = false,
                                 default = nil)
  if valid_607410 != nil:
    section.add "ServiceUpdateName", valid_607410
  var valid_607411 = query.getOrDefault("Action")
  valid_607411 = validateParameter(valid_607411, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_607411 != nil:
    section.add "Action", valid_607411
  var valid_607412 = query.getOrDefault("ServiceUpdateStatus")
  valid_607412 = validateParameter(valid_607412, JArray, required = false,
                                 default = nil)
  if valid_607412 != nil:
    section.add "ServiceUpdateStatus", valid_607412
  var valid_607413 = query.getOrDefault("Version")
  valid_607413 = validateParameter(valid_607413, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607413 != nil:
    section.add "Version", valid_607413
  var valid_607414 = query.getOrDefault("MaxRecords")
  valid_607414 = validateParameter(valid_607414, JInt, required = false, default = nil)
  if valid_607414 != nil:
    section.add "MaxRecords", valid_607414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607415 = header.getOrDefault("X-Amz-Signature")
  valid_607415 = validateParameter(valid_607415, JString, required = false,
                                 default = nil)
  if valid_607415 != nil:
    section.add "X-Amz-Signature", valid_607415
  var valid_607416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607416 = validateParameter(valid_607416, JString, required = false,
                                 default = nil)
  if valid_607416 != nil:
    section.add "X-Amz-Content-Sha256", valid_607416
  var valid_607417 = header.getOrDefault("X-Amz-Date")
  valid_607417 = validateParameter(valid_607417, JString, required = false,
                                 default = nil)
  if valid_607417 != nil:
    section.add "X-Amz-Date", valid_607417
  var valid_607418 = header.getOrDefault("X-Amz-Credential")
  valid_607418 = validateParameter(valid_607418, JString, required = false,
                                 default = nil)
  if valid_607418 != nil:
    section.add "X-Amz-Credential", valid_607418
  var valid_607419 = header.getOrDefault("X-Amz-Security-Token")
  valid_607419 = validateParameter(valid_607419, JString, required = false,
                                 default = nil)
  if valid_607419 != nil:
    section.add "X-Amz-Security-Token", valid_607419
  var valid_607420 = header.getOrDefault("X-Amz-Algorithm")
  valid_607420 = validateParameter(valid_607420, JString, required = false,
                                 default = nil)
  if valid_607420 != nil:
    section.add "X-Amz-Algorithm", valid_607420
  var valid_607421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607421 = validateParameter(valid_607421, JString, required = false,
                                 default = nil)
  if valid_607421 != nil:
    section.add "X-Amz-SignedHeaders", valid_607421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607422: Call_GetDescribeServiceUpdates_607406; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_607422.validator(path, query, header, formData, body)
  let scheme = call_607422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607422.url(scheme.get, call_607422.host, call_607422.base,
                         call_607422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607422, url, valid)

proc call*(call_607423: Call_GetDescribeServiceUpdates_607406; Marker: string = "";
          ServiceUpdateName: string = ""; Action: string = "DescribeServiceUpdates";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          MaxRecords: int = 0): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_607424 = newJObject()
  add(query_607424, "Marker", newJString(Marker))
  add(query_607424, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_607424, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    query_607424.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_607424, "Version", newJString(Version))
  add(query_607424, "MaxRecords", newJInt(MaxRecords))
  result = call_607423.call(nil, query_607424, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_607406(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_607407, base: "/",
    url: url_GetDescribeServiceUpdates_607408,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_607467 = ref object of OpenApiRestCall_605589
proc url_PostDescribeSnapshots_607469(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSnapshots_607468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607470 = query.getOrDefault("Action")
  valid_607470 = validateParameter(valid_607470, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_607470 != nil:
    section.add "Action", valid_607470
  var valid_607471 = query.getOrDefault("Version")
  valid_607471 = validateParameter(valid_607471, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607471 != nil:
    section.add "Version", valid_607471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607472 = header.getOrDefault("X-Amz-Signature")
  valid_607472 = validateParameter(valid_607472, JString, required = false,
                                 default = nil)
  if valid_607472 != nil:
    section.add "X-Amz-Signature", valid_607472
  var valid_607473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607473 = validateParameter(valid_607473, JString, required = false,
                                 default = nil)
  if valid_607473 != nil:
    section.add "X-Amz-Content-Sha256", valid_607473
  var valid_607474 = header.getOrDefault("X-Amz-Date")
  valid_607474 = validateParameter(valid_607474, JString, required = false,
                                 default = nil)
  if valid_607474 != nil:
    section.add "X-Amz-Date", valid_607474
  var valid_607475 = header.getOrDefault("X-Amz-Credential")
  valid_607475 = validateParameter(valid_607475, JString, required = false,
                                 default = nil)
  if valid_607475 != nil:
    section.add "X-Amz-Credential", valid_607475
  var valid_607476 = header.getOrDefault("X-Amz-Security-Token")
  valid_607476 = validateParameter(valid_607476, JString, required = false,
                                 default = nil)
  if valid_607476 != nil:
    section.add "X-Amz-Security-Token", valid_607476
  var valid_607477 = header.getOrDefault("X-Amz-Algorithm")
  valid_607477 = validateParameter(valid_607477, JString, required = false,
                                 default = nil)
  if valid_607477 != nil:
    section.add "X-Amz-Algorithm", valid_607477
  var valid_607478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607478 = validateParameter(valid_607478, JString, required = false,
                                 default = nil)
  if valid_607478 != nil:
    section.add "X-Amz-SignedHeaders", valid_607478
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  section = newJObject()
  var valid_607479 = formData.getOrDefault("CacheClusterId")
  valid_607479 = validateParameter(valid_607479, JString, required = false,
                                 default = nil)
  if valid_607479 != nil:
    section.add "CacheClusterId", valid_607479
  var valid_607480 = formData.getOrDefault("MaxRecords")
  valid_607480 = validateParameter(valid_607480, JInt, required = false, default = nil)
  if valid_607480 != nil:
    section.add "MaxRecords", valid_607480
  var valid_607481 = formData.getOrDefault("Marker")
  valid_607481 = validateParameter(valid_607481, JString, required = false,
                                 default = nil)
  if valid_607481 != nil:
    section.add "Marker", valid_607481
  var valid_607482 = formData.getOrDefault("SnapshotName")
  valid_607482 = validateParameter(valid_607482, JString, required = false,
                                 default = nil)
  if valid_607482 != nil:
    section.add "SnapshotName", valid_607482
  var valid_607483 = formData.getOrDefault("SnapshotSource")
  valid_607483 = validateParameter(valid_607483, JString, required = false,
                                 default = nil)
  if valid_607483 != nil:
    section.add "SnapshotSource", valid_607483
  var valid_607484 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_607484 = validateParameter(valid_607484, JBool, required = false, default = nil)
  if valid_607484 != nil:
    section.add "ShowNodeGroupConfig", valid_607484
  var valid_607485 = formData.getOrDefault("ReplicationGroupId")
  valid_607485 = validateParameter(valid_607485, JString, required = false,
                                 default = nil)
  if valid_607485 != nil:
    section.add "ReplicationGroupId", valid_607485
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607486: Call_PostDescribeSnapshots_607467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_607486.validator(path, query, header, formData, body)
  let scheme = call_607486.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607486.url(scheme.get, call_607486.host, call_607486.base,
                         call_607486.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607486, url, valid)

proc call*(call_607487: Call_PostDescribeSnapshots_607467;
          CacheClusterId: string = ""; MaxRecords: int = 0; Marker: string = "";
          SnapshotName: string = ""; SnapshotSource: string = "";
          Action: string = "DescribeSnapshots"; ShowNodeGroupConfig: bool = false;
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   Action: string (required)
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  var query_607488 = newJObject()
  var formData_607489 = newJObject()
  add(formData_607489, "CacheClusterId", newJString(CacheClusterId))
  add(formData_607489, "MaxRecords", newJInt(MaxRecords))
  add(formData_607489, "Marker", newJString(Marker))
  add(formData_607489, "SnapshotName", newJString(SnapshotName))
  add(formData_607489, "SnapshotSource", newJString(SnapshotSource))
  add(query_607488, "Action", newJString(Action))
  add(formData_607489, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_607488, "Version", newJString(Version))
  add(formData_607489, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_607487.call(nil, query_607488, nil, formData_607489, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_607467(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_607468, base: "/",
    url: url_PostDescribeSnapshots_607469, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_607445 = ref object of OpenApiRestCall_605589
proc url_GetDescribeSnapshots_607447(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSnapshots_607446(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  section = newJObject()
  var valid_607448 = query.getOrDefault("Marker")
  valid_607448 = validateParameter(valid_607448, JString, required = false,
                                 default = nil)
  if valid_607448 != nil:
    section.add "Marker", valid_607448
  var valid_607449 = query.getOrDefault("CacheClusterId")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "CacheClusterId", valid_607449
  var valid_607450 = query.getOrDefault("Action")
  valid_607450 = validateParameter(valid_607450, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_607450 != nil:
    section.add "Action", valid_607450
  var valid_607451 = query.getOrDefault("ReplicationGroupId")
  valid_607451 = validateParameter(valid_607451, JString, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "ReplicationGroupId", valid_607451
  var valid_607452 = query.getOrDefault("Version")
  valid_607452 = validateParameter(valid_607452, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607452 != nil:
    section.add "Version", valid_607452
  var valid_607453 = query.getOrDefault("SnapshotName")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = nil)
  if valid_607453 != nil:
    section.add "SnapshotName", valid_607453
  var valid_607454 = query.getOrDefault("SnapshotSource")
  valid_607454 = validateParameter(valid_607454, JString, required = false,
                                 default = nil)
  if valid_607454 != nil:
    section.add "SnapshotSource", valid_607454
  var valid_607455 = query.getOrDefault("MaxRecords")
  valid_607455 = validateParameter(valid_607455, JInt, required = false, default = nil)
  if valid_607455 != nil:
    section.add "MaxRecords", valid_607455
  var valid_607456 = query.getOrDefault("ShowNodeGroupConfig")
  valid_607456 = validateParameter(valid_607456, JBool, required = false, default = nil)
  if valid_607456 != nil:
    section.add "ShowNodeGroupConfig", valid_607456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607457 = header.getOrDefault("X-Amz-Signature")
  valid_607457 = validateParameter(valid_607457, JString, required = false,
                                 default = nil)
  if valid_607457 != nil:
    section.add "X-Amz-Signature", valid_607457
  var valid_607458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607458 = validateParameter(valid_607458, JString, required = false,
                                 default = nil)
  if valid_607458 != nil:
    section.add "X-Amz-Content-Sha256", valid_607458
  var valid_607459 = header.getOrDefault("X-Amz-Date")
  valid_607459 = validateParameter(valid_607459, JString, required = false,
                                 default = nil)
  if valid_607459 != nil:
    section.add "X-Amz-Date", valid_607459
  var valid_607460 = header.getOrDefault("X-Amz-Credential")
  valid_607460 = validateParameter(valid_607460, JString, required = false,
                                 default = nil)
  if valid_607460 != nil:
    section.add "X-Amz-Credential", valid_607460
  var valid_607461 = header.getOrDefault("X-Amz-Security-Token")
  valid_607461 = validateParameter(valid_607461, JString, required = false,
                                 default = nil)
  if valid_607461 != nil:
    section.add "X-Amz-Security-Token", valid_607461
  var valid_607462 = header.getOrDefault("X-Amz-Algorithm")
  valid_607462 = validateParameter(valid_607462, JString, required = false,
                                 default = nil)
  if valid_607462 != nil:
    section.add "X-Amz-Algorithm", valid_607462
  var valid_607463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607463 = validateParameter(valid_607463, JString, required = false,
                                 default = nil)
  if valid_607463 != nil:
    section.add "X-Amz-SignedHeaders", valid_607463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607464: Call_GetDescribeSnapshots_607445; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_607464.validator(path, query, header, formData, body)
  let scheme = call_607464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607464.url(scheme.get, call_607464.host, call_607464.base,
                         call_607464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607464, url, valid)

proc call*(call_607465: Call_GetDescribeSnapshots_607445; Marker: string = "";
          CacheClusterId: string = ""; Action: string = "DescribeSnapshots";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotName: string = ""; SnapshotSource: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  var query_607466 = newJObject()
  add(query_607466, "Marker", newJString(Marker))
  add(query_607466, "CacheClusterId", newJString(CacheClusterId))
  add(query_607466, "Action", newJString(Action))
  add(query_607466, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_607466, "Version", newJString(Version))
  add(query_607466, "SnapshotName", newJString(SnapshotName))
  add(query_607466, "SnapshotSource", newJString(SnapshotSource))
  add(query_607466, "MaxRecords", newJInt(MaxRecords))
  add(query_607466, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  result = call_607465.call(nil, query_607466, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_607445(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_607446, base: "/",
    url: url_GetDescribeSnapshots_607447, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_607516 = ref object of OpenApiRestCall_605589
proc url_PostDescribeUpdateActions_607518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeUpdateActions_607517(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607519 = query.getOrDefault("Action")
  valid_607519 = validateParameter(valid_607519, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_607519 != nil:
    section.add "Action", valid_607519
  var valid_607520 = query.getOrDefault("Version")
  valid_607520 = validateParameter(valid_607520, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607520 != nil:
    section.add "Version", valid_607520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607521 = header.getOrDefault("X-Amz-Signature")
  valid_607521 = validateParameter(valid_607521, JString, required = false,
                                 default = nil)
  if valid_607521 != nil:
    section.add "X-Amz-Signature", valid_607521
  var valid_607522 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607522 = validateParameter(valid_607522, JString, required = false,
                                 default = nil)
  if valid_607522 != nil:
    section.add "X-Amz-Content-Sha256", valid_607522
  var valid_607523 = header.getOrDefault("X-Amz-Date")
  valid_607523 = validateParameter(valid_607523, JString, required = false,
                                 default = nil)
  if valid_607523 != nil:
    section.add "X-Amz-Date", valid_607523
  var valid_607524 = header.getOrDefault("X-Amz-Credential")
  valid_607524 = validateParameter(valid_607524, JString, required = false,
                                 default = nil)
  if valid_607524 != nil:
    section.add "X-Amz-Credential", valid_607524
  var valid_607525 = header.getOrDefault("X-Amz-Security-Token")
  valid_607525 = validateParameter(valid_607525, JString, required = false,
                                 default = nil)
  if valid_607525 != nil:
    section.add "X-Amz-Security-Token", valid_607525
  var valid_607526 = header.getOrDefault("X-Amz-Algorithm")
  valid_607526 = validateParameter(valid_607526, JString, required = false,
                                 default = nil)
  if valid_607526 != nil:
    section.add "X-Amz-Algorithm", valid_607526
  var valid_607527 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607527 = validateParameter(valid_607527, JString, required = false,
                                 default = nil)
  if valid_607527 != nil:
    section.add "X-Amz-SignedHeaders", valid_607527
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  section = newJObject()
  var valid_607528 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_607528 = validateParameter(valid_607528, JString, required = false,
                                 default = nil)
  if valid_607528 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_607528
  var valid_607529 = formData.getOrDefault("MaxRecords")
  valid_607529 = validateParameter(valid_607529, JInt, required = false, default = nil)
  if valid_607529 != nil:
    section.add "MaxRecords", valid_607529
  var valid_607530 = formData.getOrDefault("ServiceUpdateName")
  valid_607530 = validateParameter(valid_607530, JString, required = false,
                                 default = nil)
  if valid_607530 != nil:
    section.add "ServiceUpdateName", valid_607530
  var valid_607531 = formData.getOrDefault("ReplicationGroupIds")
  valid_607531 = validateParameter(valid_607531, JArray, required = false,
                                 default = nil)
  if valid_607531 != nil:
    section.add "ReplicationGroupIds", valid_607531
  var valid_607532 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_607532 = validateParameter(valid_607532, JString, required = false,
                                 default = nil)
  if valid_607532 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_607532
  var valid_607533 = formData.getOrDefault("Marker")
  valid_607533 = validateParameter(valid_607533, JString, required = false,
                                 default = nil)
  if valid_607533 != nil:
    section.add "Marker", valid_607533
  var valid_607534 = formData.getOrDefault("CacheClusterIds")
  valid_607534 = validateParameter(valid_607534, JArray, required = false,
                                 default = nil)
  if valid_607534 != nil:
    section.add "CacheClusterIds", valid_607534
  var valid_607535 = formData.getOrDefault("Engine")
  valid_607535 = validateParameter(valid_607535, JString, required = false,
                                 default = nil)
  if valid_607535 != nil:
    section.add "Engine", valid_607535
  var valid_607536 = formData.getOrDefault("UpdateActionStatus")
  valid_607536 = validateParameter(valid_607536, JArray, required = false,
                                 default = nil)
  if valid_607536 != nil:
    section.add "UpdateActionStatus", valid_607536
  var valid_607537 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_607537 = validateParameter(valid_607537, JBool, required = false, default = nil)
  if valid_607537 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_607537
  var valid_607538 = formData.getOrDefault("ServiceUpdateStatus")
  valid_607538 = validateParameter(valid_607538, JArray, required = false,
                                 default = nil)
  if valid_607538 != nil:
    section.add "ServiceUpdateStatus", valid_607538
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607539: Call_PostDescribeUpdateActions_607516; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_607539.validator(path, query, header, formData, body)
  let scheme = call_607539.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607539.url(scheme.get, call_607539.host, call_607539.base,
                         call_607539.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607539, url, valid)

proc call*(call_607540: Call_PostDescribeUpdateActions_607516;
          ServiceUpdateTimeRangeEndTime: string = ""; MaxRecords: int = 0;
          ServiceUpdateName: string = ""; ReplicationGroupIds: JsonNode = nil;
          ServiceUpdateTimeRangeStartTime: string = ""; Marker: string = "";
          CacheClusterIds: JsonNode = nil; Engine: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          Action: string = "DescribeUpdateActions";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   Action: string (required)
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  var query_607541 = newJObject()
  var formData_607542 = newJObject()
  add(formData_607542, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_607542, "MaxRecords", newJInt(MaxRecords))
  add(formData_607542, "ServiceUpdateName", newJString(ServiceUpdateName))
  if ReplicationGroupIds != nil:
    formData_607542.add "ReplicationGroupIds", ReplicationGroupIds
  add(formData_607542, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(formData_607542, "Marker", newJString(Marker))
  if CacheClusterIds != nil:
    formData_607542.add "CacheClusterIds", CacheClusterIds
  add(formData_607542, "Engine", newJString(Engine))
  if UpdateActionStatus != nil:
    formData_607542.add "UpdateActionStatus", UpdateActionStatus
  add(formData_607542, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_607541, "Action", newJString(Action))
  if ServiceUpdateStatus != nil:
    formData_607542.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_607541, "Version", newJString(Version))
  result = call_607540.call(nil, query_607541, nil, formData_607542, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_607516(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_607517, base: "/",
    url: url_PostDescribeUpdateActions_607518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_607490 = ref object of OpenApiRestCall_605589
proc url_GetDescribeUpdateActions_607492(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeUpdateActions_607491(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   Engine: JString
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: JString (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  section = newJObject()
  var valid_607493 = query.getOrDefault("Marker")
  valid_607493 = validateParameter(valid_607493, JString, required = false,
                                 default = nil)
  if valid_607493 != nil:
    section.add "Marker", valid_607493
  var valid_607494 = query.getOrDefault("ServiceUpdateName")
  valid_607494 = validateParameter(valid_607494, JString, required = false,
                                 default = nil)
  if valid_607494 != nil:
    section.add "ServiceUpdateName", valid_607494
  var valid_607495 = query.getOrDefault("Engine")
  valid_607495 = validateParameter(valid_607495, JString, required = false,
                                 default = nil)
  if valid_607495 != nil:
    section.add "Engine", valid_607495
  var valid_607496 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_607496 = validateParameter(valid_607496, JString, required = false,
                                 default = nil)
  if valid_607496 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_607496
  var valid_607497 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_607497 = validateParameter(valid_607497, JBool, required = false, default = nil)
  if valid_607497 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_607497
  var valid_607498 = query.getOrDefault("UpdateActionStatus")
  valid_607498 = validateParameter(valid_607498, JArray, required = false,
                                 default = nil)
  if valid_607498 != nil:
    section.add "UpdateActionStatus", valid_607498
  var valid_607499 = query.getOrDefault("Action")
  valid_607499 = validateParameter(valid_607499, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_607499 != nil:
    section.add "Action", valid_607499
  var valid_607500 = query.getOrDefault("CacheClusterIds")
  valid_607500 = validateParameter(valid_607500, JArray, required = false,
                                 default = nil)
  if valid_607500 != nil:
    section.add "CacheClusterIds", valid_607500
  var valid_607501 = query.getOrDefault("ServiceUpdateStatus")
  valid_607501 = validateParameter(valid_607501, JArray, required = false,
                                 default = nil)
  if valid_607501 != nil:
    section.add "ServiceUpdateStatus", valid_607501
  var valid_607502 = query.getOrDefault("ReplicationGroupIds")
  valid_607502 = validateParameter(valid_607502, JArray, required = false,
                                 default = nil)
  if valid_607502 != nil:
    section.add "ReplicationGroupIds", valid_607502
  var valid_607503 = query.getOrDefault("Version")
  valid_607503 = validateParameter(valid_607503, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607503 != nil:
    section.add "Version", valid_607503
  var valid_607504 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_607504 = validateParameter(valid_607504, JString, required = false,
                                 default = nil)
  if valid_607504 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_607504
  var valid_607505 = query.getOrDefault("MaxRecords")
  valid_607505 = validateParameter(valid_607505, JInt, required = false, default = nil)
  if valid_607505 != nil:
    section.add "MaxRecords", valid_607505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607506 = header.getOrDefault("X-Amz-Signature")
  valid_607506 = validateParameter(valid_607506, JString, required = false,
                                 default = nil)
  if valid_607506 != nil:
    section.add "X-Amz-Signature", valid_607506
  var valid_607507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607507 = validateParameter(valid_607507, JString, required = false,
                                 default = nil)
  if valid_607507 != nil:
    section.add "X-Amz-Content-Sha256", valid_607507
  var valid_607508 = header.getOrDefault("X-Amz-Date")
  valid_607508 = validateParameter(valid_607508, JString, required = false,
                                 default = nil)
  if valid_607508 != nil:
    section.add "X-Amz-Date", valid_607508
  var valid_607509 = header.getOrDefault("X-Amz-Credential")
  valid_607509 = validateParameter(valid_607509, JString, required = false,
                                 default = nil)
  if valid_607509 != nil:
    section.add "X-Amz-Credential", valid_607509
  var valid_607510 = header.getOrDefault("X-Amz-Security-Token")
  valid_607510 = validateParameter(valid_607510, JString, required = false,
                                 default = nil)
  if valid_607510 != nil:
    section.add "X-Amz-Security-Token", valid_607510
  var valid_607511 = header.getOrDefault("X-Amz-Algorithm")
  valid_607511 = validateParameter(valid_607511, JString, required = false,
                                 default = nil)
  if valid_607511 != nil:
    section.add "X-Amz-Algorithm", valid_607511
  var valid_607512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607512 = validateParameter(valid_607512, JString, required = false,
                                 default = nil)
  if valid_607512 != nil:
    section.add "X-Amz-SignedHeaders", valid_607512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607513: Call_GetDescribeUpdateActions_607490; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_607513.validator(path, query, header, formData, body)
  let scheme = call_607513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607513.url(scheme.get, call_607513.host, call_607513.base,
                         call_607513.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607513, url, valid)

proc call*(call_607514: Call_GetDescribeUpdateActions_607490; Marker: string = "";
          ServiceUpdateName: string = ""; Engine: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          Action: string = "DescribeUpdateActions"; CacheClusterIds: JsonNode = nil;
          ServiceUpdateStatus: JsonNode = nil; ReplicationGroupIds: JsonNode = nil;
          Version: string = "2015-02-02";
          ServiceUpdateTimeRangeStartTime: string = ""; MaxRecords: int = 0): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   Engine: string
  ##         : The Elasticache engine to which the update applies. Either Redis or Memcached 
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   Action: string (required)
  ##   CacheClusterIds: JArray
  ##                  : The cache cluster IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  var query_607515 = newJObject()
  add(query_607515, "Marker", newJString(Marker))
  add(query_607515, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(query_607515, "Engine", newJString(Engine))
  add(query_607515, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(query_607515, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    query_607515.add "UpdateActionStatus", UpdateActionStatus
  add(query_607515, "Action", newJString(Action))
  if CacheClusterIds != nil:
    query_607515.add "CacheClusterIds", CacheClusterIds
  if ServiceUpdateStatus != nil:
    query_607515.add "ServiceUpdateStatus", ServiceUpdateStatus
  if ReplicationGroupIds != nil:
    query_607515.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_607515, "Version", newJString(Version))
  add(query_607515, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_607515, "MaxRecords", newJInt(MaxRecords))
  result = call_607514.call(nil, query_607515, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_607490(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_607491, base: "/",
    url: url_GetDescribeUpdateActions_607492, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_607562 = ref object of OpenApiRestCall_605589
proc url_PostIncreaseReplicaCount_607564(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostIncreaseReplicaCount_607563(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607565 = query.getOrDefault("Action")
  valid_607565 = validateParameter(valid_607565, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_607565 != nil:
    section.add "Action", valid_607565
  var valid_607566 = query.getOrDefault("Version")
  valid_607566 = validateParameter(valid_607566, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607566 != nil:
    section.add "Version", valid_607566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607567 = header.getOrDefault("X-Amz-Signature")
  valid_607567 = validateParameter(valid_607567, JString, required = false,
                                 default = nil)
  if valid_607567 != nil:
    section.add "X-Amz-Signature", valid_607567
  var valid_607568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607568 = validateParameter(valid_607568, JString, required = false,
                                 default = nil)
  if valid_607568 != nil:
    section.add "X-Amz-Content-Sha256", valid_607568
  var valid_607569 = header.getOrDefault("X-Amz-Date")
  valid_607569 = validateParameter(valid_607569, JString, required = false,
                                 default = nil)
  if valid_607569 != nil:
    section.add "X-Amz-Date", valid_607569
  var valid_607570 = header.getOrDefault("X-Amz-Credential")
  valid_607570 = validateParameter(valid_607570, JString, required = false,
                                 default = nil)
  if valid_607570 != nil:
    section.add "X-Amz-Credential", valid_607570
  var valid_607571 = header.getOrDefault("X-Amz-Security-Token")
  valid_607571 = validateParameter(valid_607571, JString, required = false,
                                 default = nil)
  if valid_607571 != nil:
    section.add "X-Amz-Security-Token", valid_607571
  var valid_607572 = header.getOrDefault("X-Amz-Algorithm")
  valid_607572 = validateParameter(valid_607572, JString, required = false,
                                 default = nil)
  if valid_607572 != nil:
    section.add "X-Amz-Algorithm", valid_607572
  var valid_607573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607573 = validateParameter(valid_607573, JString, required = false,
                                 default = nil)
  if valid_607573 != nil:
    section.add "X-Amz-SignedHeaders", valid_607573
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  section = newJObject()
  var valid_607574 = formData.getOrDefault("ReplicaConfiguration")
  valid_607574 = validateParameter(valid_607574, JArray, required = false,
                                 default = nil)
  if valid_607574 != nil:
    section.add "ReplicaConfiguration", valid_607574
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_607575 = formData.getOrDefault("ApplyImmediately")
  valid_607575 = validateParameter(valid_607575, JBool, required = true, default = nil)
  if valid_607575 != nil:
    section.add "ApplyImmediately", valid_607575
  var valid_607576 = formData.getOrDefault("NewReplicaCount")
  valid_607576 = validateParameter(valid_607576, JInt, required = false, default = nil)
  if valid_607576 != nil:
    section.add "NewReplicaCount", valid_607576
  var valid_607577 = formData.getOrDefault("ReplicationGroupId")
  valid_607577 = validateParameter(valid_607577, JString, required = true,
                                 default = nil)
  if valid_607577 != nil:
    section.add "ReplicationGroupId", valid_607577
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607578: Call_PostIncreaseReplicaCount_607562; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_607578.validator(path, query, header, formData, body)
  let scheme = call_607578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607578.url(scheme.get, call_607578.host, call_607578.base,
                         call_607578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607578, url, valid)

proc call*(call_607579: Call_PostIncreaseReplicaCount_607562;
          ApplyImmediately: bool; ReplicationGroupId: string;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  var query_607580 = newJObject()
  var formData_607581 = newJObject()
  if ReplicaConfiguration != nil:
    formData_607581.add "ReplicaConfiguration", ReplicaConfiguration
  add(formData_607581, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607580, "Action", newJString(Action))
  add(formData_607581, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_607580, "Version", newJString(Version))
  add(formData_607581, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_607579.call(nil, query_607580, nil, formData_607581, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_607562(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_607563, base: "/",
    url: url_PostIncreaseReplicaCount_607564, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_607543 = ref object of OpenApiRestCall_605589
proc url_GetIncreaseReplicaCount_607545(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetIncreaseReplicaCount_607544(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  section = newJObject()
  var valid_607546 = query.getOrDefault("NewReplicaCount")
  valid_607546 = validateParameter(valid_607546, JInt, required = false, default = nil)
  if valid_607546 != nil:
    section.add "NewReplicaCount", valid_607546
  var valid_607547 = query.getOrDefault("ReplicaConfiguration")
  valid_607547 = validateParameter(valid_607547, JArray, required = false,
                                 default = nil)
  if valid_607547 != nil:
    section.add "ReplicaConfiguration", valid_607547
  var valid_607548 = query.getOrDefault("Action")
  valid_607548 = validateParameter(valid_607548, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_607548 != nil:
    section.add "Action", valid_607548
  var valid_607549 = query.getOrDefault("ApplyImmediately")
  valid_607549 = validateParameter(valid_607549, JBool, required = true, default = nil)
  if valid_607549 != nil:
    section.add "ApplyImmediately", valid_607549
  var valid_607550 = query.getOrDefault("ReplicationGroupId")
  valid_607550 = validateParameter(valid_607550, JString, required = true,
                                 default = nil)
  if valid_607550 != nil:
    section.add "ReplicationGroupId", valid_607550
  var valid_607551 = query.getOrDefault("Version")
  valid_607551 = validateParameter(valid_607551, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607551 != nil:
    section.add "Version", valid_607551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607552 = header.getOrDefault("X-Amz-Signature")
  valid_607552 = validateParameter(valid_607552, JString, required = false,
                                 default = nil)
  if valid_607552 != nil:
    section.add "X-Amz-Signature", valid_607552
  var valid_607553 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607553 = validateParameter(valid_607553, JString, required = false,
                                 default = nil)
  if valid_607553 != nil:
    section.add "X-Amz-Content-Sha256", valid_607553
  var valid_607554 = header.getOrDefault("X-Amz-Date")
  valid_607554 = validateParameter(valid_607554, JString, required = false,
                                 default = nil)
  if valid_607554 != nil:
    section.add "X-Amz-Date", valid_607554
  var valid_607555 = header.getOrDefault("X-Amz-Credential")
  valid_607555 = validateParameter(valid_607555, JString, required = false,
                                 default = nil)
  if valid_607555 != nil:
    section.add "X-Amz-Credential", valid_607555
  var valid_607556 = header.getOrDefault("X-Amz-Security-Token")
  valid_607556 = validateParameter(valid_607556, JString, required = false,
                                 default = nil)
  if valid_607556 != nil:
    section.add "X-Amz-Security-Token", valid_607556
  var valid_607557 = header.getOrDefault("X-Amz-Algorithm")
  valid_607557 = validateParameter(valid_607557, JString, required = false,
                                 default = nil)
  if valid_607557 != nil:
    section.add "X-Amz-Algorithm", valid_607557
  var valid_607558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607558 = validateParameter(valid_607558, JString, required = false,
                                 default = nil)
  if valid_607558 != nil:
    section.add "X-Amz-SignedHeaders", valid_607558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607559: Call_GetIncreaseReplicaCount_607543; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_607559.validator(path, query, header, formData, body)
  let scheme = call_607559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607559.url(scheme.get, call_607559.host, call_607559.base,
                         call_607559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607559, url, valid)

proc call*(call_607560: Call_GetIncreaseReplicaCount_607543;
          ApplyImmediately: bool; ReplicationGroupId: string;
          NewReplicaCount: int = 0; ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  var query_607561 = newJObject()
  add(query_607561, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    query_607561.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_607561, "Action", newJString(Action))
  add(query_607561, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607561, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_607561, "Version", newJString(Version))
  result = call_607560.call(nil, query_607561, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_607543(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_607544, base: "/",
    url: url_GetIncreaseReplicaCount_607545, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_607599 = ref object of OpenApiRestCall_605589
proc url_PostListAllowedNodeTypeModifications_607601(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListAllowedNodeTypeModifications_607600(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607602 = query.getOrDefault("Action")
  valid_607602 = validateParameter(valid_607602, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_607602 != nil:
    section.add "Action", valid_607602
  var valid_607603 = query.getOrDefault("Version")
  valid_607603 = validateParameter(valid_607603, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607603 != nil:
    section.add "Version", valid_607603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607604 = header.getOrDefault("X-Amz-Signature")
  valid_607604 = validateParameter(valid_607604, JString, required = false,
                                 default = nil)
  if valid_607604 != nil:
    section.add "X-Amz-Signature", valid_607604
  var valid_607605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607605 = validateParameter(valid_607605, JString, required = false,
                                 default = nil)
  if valid_607605 != nil:
    section.add "X-Amz-Content-Sha256", valid_607605
  var valid_607606 = header.getOrDefault("X-Amz-Date")
  valid_607606 = validateParameter(valid_607606, JString, required = false,
                                 default = nil)
  if valid_607606 != nil:
    section.add "X-Amz-Date", valid_607606
  var valid_607607 = header.getOrDefault("X-Amz-Credential")
  valid_607607 = validateParameter(valid_607607, JString, required = false,
                                 default = nil)
  if valid_607607 != nil:
    section.add "X-Amz-Credential", valid_607607
  var valid_607608 = header.getOrDefault("X-Amz-Security-Token")
  valid_607608 = validateParameter(valid_607608, JString, required = false,
                                 default = nil)
  if valid_607608 != nil:
    section.add "X-Amz-Security-Token", valid_607608
  var valid_607609 = header.getOrDefault("X-Amz-Algorithm")
  valid_607609 = validateParameter(valid_607609, JString, required = false,
                                 default = nil)
  if valid_607609 != nil:
    section.add "X-Amz-Algorithm", valid_607609
  var valid_607610 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607610 = validateParameter(valid_607610, JString, required = false,
                                 default = nil)
  if valid_607610 != nil:
    section.add "X-Amz-SignedHeaders", valid_607610
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_607611 = formData.getOrDefault("CacheClusterId")
  valid_607611 = validateParameter(valid_607611, JString, required = false,
                                 default = nil)
  if valid_607611 != nil:
    section.add "CacheClusterId", valid_607611
  var valid_607612 = formData.getOrDefault("ReplicationGroupId")
  valid_607612 = validateParameter(valid_607612, JString, required = false,
                                 default = nil)
  if valid_607612 != nil:
    section.add "ReplicationGroupId", valid_607612
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607613: Call_PostListAllowedNodeTypeModifications_607599;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_607613.validator(path, query, header, formData, body)
  let scheme = call_607613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607613.url(scheme.get, call_607613.host, call_607613.base,
                         call_607613.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607613, url, valid)

proc call*(call_607614: Call_PostListAllowedNodeTypeModifications_607599;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; ReplicationGroupId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_607615 = newJObject()
  var formData_607616 = newJObject()
  add(formData_607616, "CacheClusterId", newJString(CacheClusterId))
  add(query_607615, "Action", newJString(Action))
  add(query_607615, "Version", newJString(Version))
  add(formData_607616, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_607614.call(nil, query_607615, nil, formData_607616, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_607599(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_607600, base: "/",
    url: url_PostListAllowedNodeTypeModifications_607601,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_607582 = ref object of OpenApiRestCall_605589
proc url_GetListAllowedNodeTypeModifications_607584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListAllowedNodeTypeModifications_607583(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607585 = query.getOrDefault("CacheClusterId")
  valid_607585 = validateParameter(valid_607585, JString, required = false,
                                 default = nil)
  if valid_607585 != nil:
    section.add "CacheClusterId", valid_607585
  var valid_607586 = query.getOrDefault("Action")
  valid_607586 = validateParameter(valid_607586, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_607586 != nil:
    section.add "Action", valid_607586
  var valid_607587 = query.getOrDefault("ReplicationGroupId")
  valid_607587 = validateParameter(valid_607587, JString, required = false,
                                 default = nil)
  if valid_607587 != nil:
    section.add "ReplicationGroupId", valid_607587
  var valid_607588 = query.getOrDefault("Version")
  valid_607588 = validateParameter(valid_607588, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607588 != nil:
    section.add "Version", valid_607588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607589 = header.getOrDefault("X-Amz-Signature")
  valid_607589 = validateParameter(valid_607589, JString, required = false,
                                 default = nil)
  if valid_607589 != nil:
    section.add "X-Amz-Signature", valid_607589
  var valid_607590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607590 = validateParameter(valid_607590, JString, required = false,
                                 default = nil)
  if valid_607590 != nil:
    section.add "X-Amz-Content-Sha256", valid_607590
  var valid_607591 = header.getOrDefault("X-Amz-Date")
  valid_607591 = validateParameter(valid_607591, JString, required = false,
                                 default = nil)
  if valid_607591 != nil:
    section.add "X-Amz-Date", valid_607591
  var valid_607592 = header.getOrDefault("X-Amz-Credential")
  valid_607592 = validateParameter(valid_607592, JString, required = false,
                                 default = nil)
  if valid_607592 != nil:
    section.add "X-Amz-Credential", valid_607592
  var valid_607593 = header.getOrDefault("X-Amz-Security-Token")
  valid_607593 = validateParameter(valid_607593, JString, required = false,
                                 default = nil)
  if valid_607593 != nil:
    section.add "X-Amz-Security-Token", valid_607593
  var valid_607594 = header.getOrDefault("X-Amz-Algorithm")
  valid_607594 = validateParameter(valid_607594, JString, required = false,
                                 default = nil)
  if valid_607594 != nil:
    section.add "X-Amz-Algorithm", valid_607594
  var valid_607595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607595 = validateParameter(valid_607595, JString, required = false,
                                 default = nil)
  if valid_607595 != nil:
    section.add "X-Amz-SignedHeaders", valid_607595
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607596: Call_GetListAllowedNodeTypeModifications_607582;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_607596.validator(path, query, header, formData, body)
  let scheme = call_607596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607596.url(scheme.get, call_607596.host, call_607596.base,
                         call_607596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607596, url, valid)

proc call*(call_607597: Call_GetListAllowedNodeTypeModifications_607582;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_607598 = newJObject()
  add(query_607598, "CacheClusterId", newJString(CacheClusterId))
  add(query_607598, "Action", newJString(Action))
  add(query_607598, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_607598, "Version", newJString(Version))
  result = call_607597.call(nil, query_607598, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_607582(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_607583, base: "/",
    url: url_GetListAllowedNodeTypeModifications_607584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_607633 = ref object of OpenApiRestCall_605589
proc url_PostListTagsForResource_607635(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_607634(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607636 = query.getOrDefault("Action")
  valid_607636 = validateParameter(valid_607636, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_607636 != nil:
    section.add "Action", valid_607636
  var valid_607637 = query.getOrDefault("Version")
  valid_607637 = validateParameter(valid_607637, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607637 != nil:
    section.add "Version", valid_607637
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607638 = header.getOrDefault("X-Amz-Signature")
  valid_607638 = validateParameter(valid_607638, JString, required = false,
                                 default = nil)
  if valid_607638 != nil:
    section.add "X-Amz-Signature", valid_607638
  var valid_607639 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607639 = validateParameter(valid_607639, JString, required = false,
                                 default = nil)
  if valid_607639 != nil:
    section.add "X-Amz-Content-Sha256", valid_607639
  var valid_607640 = header.getOrDefault("X-Amz-Date")
  valid_607640 = validateParameter(valid_607640, JString, required = false,
                                 default = nil)
  if valid_607640 != nil:
    section.add "X-Amz-Date", valid_607640
  var valid_607641 = header.getOrDefault("X-Amz-Credential")
  valid_607641 = validateParameter(valid_607641, JString, required = false,
                                 default = nil)
  if valid_607641 != nil:
    section.add "X-Amz-Credential", valid_607641
  var valid_607642 = header.getOrDefault("X-Amz-Security-Token")
  valid_607642 = validateParameter(valid_607642, JString, required = false,
                                 default = nil)
  if valid_607642 != nil:
    section.add "X-Amz-Security-Token", valid_607642
  var valid_607643 = header.getOrDefault("X-Amz-Algorithm")
  valid_607643 = validateParameter(valid_607643, JString, required = false,
                                 default = nil)
  if valid_607643 != nil:
    section.add "X-Amz-Algorithm", valid_607643
  var valid_607644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607644 = validateParameter(valid_607644, JString, required = false,
                                 default = nil)
  if valid_607644 != nil:
    section.add "X-Amz-SignedHeaders", valid_607644
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_607645 = formData.getOrDefault("ResourceName")
  valid_607645 = validateParameter(valid_607645, JString, required = true,
                                 default = nil)
  if valid_607645 != nil:
    section.add "ResourceName", valid_607645
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607646: Call_PostListTagsForResource_607633; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_607646.validator(path, query, header, formData, body)
  let scheme = call_607646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607646.url(scheme.get, call_607646.host, call_607646.base,
                         call_607646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607646, url, valid)

proc call*(call_607647: Call_PostListTagsForResource_607633; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_607648 = newJObject()
  var formData_607649 = newJObject()
  add(query_607648, "Action", newJString(Action))
  add(query_607648, "Version", newJString(Version))
  add(formData_607649, "ResourceName", newJString(ResourceName))
  result = call_607647.call(nil, query_607648, nil, formData_607649, nil)

var postListTagsForResource* = Call_PostListTagsForResource_607633(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_607634, base: "/",
    url: url_PostListTagsForResource_607635, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_607617 = ref object of OpenApiRestCall_605589
proc url_GetListTagsForResource_607619(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_607618(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_607620 = query.getOrDefault("ResourceName")
  valid_607620 = validateParameter(valid_607620, JString, required = true,
                                 default = nil)
  if valid_607620 != nil:
    section.add "ResourceName", valid_607620
  var valid_607621 = query.getOrDefault("Action")
  valid_607621 = validateParameter(valid_607621, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_607621 != nil:
    section.add "Action", valid_607621
  var valid_607622 = query.getOrDefault("Version")
  valid_607622 = validateParameter(valid_607622, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607622 != nil:
    section.add "Version", valid_607622
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607623 = header.getOrDefault("X-Amz-Signature")
  valid_607623 = validateParameter(valid_607623, JString, required = false,
                                 default = nil)
  if valid_607623 != nil:
    section.add "X-Amz-Signature", valid_607623
  var valid_607624 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607624 = validateParameter(valid_607624, JString, required = false,
                                 default = nil)
  if valid_607624 != nil:
    section.add "X-Amz-Content-Sha256", valid_607624
  var valid_607625 = header.getOrDefault("X-Amz-Date")
  valid_607625 = validateParameter(valid_607625, JString, required = false,
                                 default = nil)
  if valid_607625 != nil:
    section.add "X-Amz-Date", valid_607625
  var valid_607626 = header.getOrDefault("X-Amz-Credential")
  valid_607626 = validateParameter(valid_607626, JString, required = false,
                                 default = nil)
  if valid_607626 != nil:
    section.add "X-Amz-Credential", valid_607626
  var valid_607627 = header.getOrDefault("X-Amz-Security-Token")
  valid_607627 = validateParameter(valid_607627, JString, required = false,
                                 default = nil)
  if valid_607627 != nil:
    section.add "X-Amz-Security-Token", valid_607627
  var valid_607628 = header.getOrDefault("X-Amz-Algorithm")
  valid_607628 = validateParameter(valid_607628, JString, required = false,
                                 default = nil)
  if valid_607628 != nil:
    section.add "X-Amz-Algorithm", valid_607628
  var valid_607629 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607629 = validateParameter(valid_607629, JString, required = false,
                                 default = nil)
  if valid_607629 != nil:
    section.add "X-Amz-SignedHeaders", valid_607629
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607630: Call_GetListTagsForResource_607617; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_607630.validator(path, query, header, formData, body)
  let scheme = call_607630.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607630.url(scheme.get, call_607630.host, call_607630.base,
                         call_607630.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607630, url, valid)

proc call*(call_607631: Call_GetListTagsForResource_607617; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607632 = newJObject()
  add(query_607632, "ResourceName", newJString(ResourceName))
  add(query_607632, "Action", newJString(Action))
  add(query_607632, "Version", newJString(Version))
  result = call_607631.call(nil, query_607632, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_607617(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_607618, base: "/",
    url: url_GetListTagsForResource_607619, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_607684 = ref object of OpenApiRestCall_605589
proc url_PostModifyCacheCluster_607686(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheCluster_607685(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607687 = query.getOrDefault("Action")
  valid_607687 = validateParameter(valid_607687, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_607687 != nil:
    section.add "Action", valid_607687
  var valid_607688 = query.getOrDefault("Version")
  valid_607688 = validateParameter(valid_607688, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607688 != nil:
    section.add "Version", valid_607688
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607689 = header.getOrDefault("X-Amz-Signature")
  valid_607689 = validateParameter(valid_607689, JString, required = false,
                                 default = nil)
  if valid_607689 != nil:
    section.add "X-Amz-Signature", valid_607689
  var valid_607690 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607690 = validateParameter(valid_607690, JString, required = false,
                                 default = nil)
  if valid_607690 != nil:
    section.add "X-Amz-Content-Sha256", valid_607690
  var valid_607691 = header.getOrDefault("X-Amz-Date")
  valid_607691 = validateParameter(valid_607691, JString, required = false,
                                 default = nil)
  if valid_607691 != nil:
    section.add "X-Amz-Date", valid_607691
  var valid_607692 = header.getOrDefault("X-Amz-Credential")
  valid_607692 = validateParameter(valid_607692, JString, required = false,
                                 default = nil)
  if valid_607692 != nil:
    section.add "X-Amz-Credential", valid_607692
  var valid_607693 = header.getOrDefault("X-Amz-Security-Token")
  valid_607693 = validateParameter(valid_607693, JString, required = false,
                                 default = nil)
  if valid_607693 != nil:
    section.add "X-Amz-Security-Token", valid_607693
  var valid_607694 = header.getOrDefault("X-Amz-Algorithm")
  valid_607694 = validateParameter(valid_607694, JString, required = false,
                                 default = nil)
  if valid_607694 != nil:
    section.add "X-Amz-Algorithm", valid_607694
  var valid_607695 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607695 = validateParameter(valid_607695, JString, required = false,
                                 default = nil)
  if valid_607695 != nil:
    section.add "X-Amz-SignedHeaders", valid_607695
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  section = newJObject()
  var valid_607696 = formData.getOrDefault("SecurityGroupIds")
  valid_607696 = validateParameter(valid_607696, JArray, required = false,
                                 default = nil)
  if valid_607696 != nil:
    section.add "SecurityGroupIds", valid_607696
  var valid_607697 = formData.getOrDefault("NewAvailabilityZones")
  valid_607697 = validateParameter(valid_607697, JArray, required = false,
                                 default = nil)
  if valid_607697 != nil:
    section.add "NewAvailabilityZones", valid_607697
  var valid_607698 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_607698 = validateParameter(valid_607698, JString, required = false,
                                 default = nil)
  if valid_607698 != nil:
    section.add "PreferredMaintenanceWindow", valid_607698
  var valid_607699 = formData.getOrDefault("NumCacheNodes")
  valid_607699 = validateParameter(valid_607699, JInt, required = false, default = nil)
  if valid_607699 != nil:
    section.add "NumCacheNodes", valid_607699
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_607700 = formData.getOrDefault("CacheClusterId")
  valid_607700 = validateParameter(valid_607700, JString, required = true,
                                 default = nil)
  if valid_607700 != nil:
    section.add "CacheClusterId", valid_607700
  var valid_607701 = formData.getOrDefault("NotificationTopicStatus")
  valid_607701 = validateParameter(valid_607701, JString, required = false,
                                 default = nil)
  if valid_607701 != nil:
    section.add "NotificationTopicStatus", valid_607701
  var valid_607702 = formData.getOrDefault("NotificationTopicArn")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "NotificationTopicArn", valid_607702
  var valid_607703 = formData.getOrDefault("EngineVersion")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "EngineVersion", valid_607703
  var valid_607704 = formData.getOrDefault("AZMode")
  valid_607704 = validateParameter(valid_607704, JString, required = false,
                                 default = newJString("single-az"))
  if valid_607704 != nil:
    section.add "AZMode", valid_607704
  var valid_607705 = formData.getOrDefault("CacheParameterGroupName")
  valid_607705 = validateParameter(valid_607705, JString, required = false,
                                 default = nil)
  if valid_607705 != nil:
    section.add "CacheParameterGroupName", valid_607705
  var valid_607706 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607706 = validateParameter(valid_607706, JBool, required = false, default = nil)
  if valid_607706 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607706
  var valid_607707 = formData.getOrDefault("ApplyImmediately")
  valid_607707 = validateParameter(valid_607707, JBool, required = false, default = nil)
  if valid_607707 != nil:
    section.add "ApplyImmediately", valid_607707
  var valid_607708 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_607708 = validateParameter(valid_607708, JArray, required = false,
                                 default = nil)
  if valid_607708 != nil:
    section.add "CacheNodeIdsToRemove", valid_607708
  var valid_607709 = formData.getOrDefault("AuthToken")
  valid_607709 = validateParameter(valid_607709, JString, required = false,
                                 default = nil)
  if valid_607709 != nil:
    section.add "AuthToken", valid_607709
  var valid_607710 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_607710 = validateParameter(valid_607710, JArray, required = false,
                                 default = nil)
  if valid_607710 != nil:
    section.add "CacheSecurityGroupNames", valid_607710
  var valid_607711 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_607711 = validateParameter(valid_607711, JInt, required = false, default = nil)
  if valid_607711 != nil:
    section.add "SnapshotRetentionLimit", valid_607711
  var valid_607712 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_607712 = validateParameter(valid_607712, JString, required = false,
                                 default = newJString("SET"))
  if valid_607712 != nil:
    section.add "AuthTokenUpdateStrategy", valid_607712
  var valid_607713 = formData.getOrDefault("SnapshotWindow")
  valid_607713 = validateParameter(valid_607713, JString, required = false,
                                 default = nil)
  if valid_607713 != nil:
    section.add "SnapshotWindow", valid_607713
  var valid_607714 = formData.getOrDefault("CacheNodeType")
  valid_607714 = validateParameter(valid_607714, JString, required = false,
                                 default = nil)
  if valid_607714 != nil:
    section.add "CacheNodeType", valid_607714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607715: Call_PostModifyCacheCluster_607684; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_607715.validator(path, query, header, formData, body)
  let scheme = call_607715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607715.url(scheme.get, call_607715.host, call_607715.base,
                         call_607715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607715, url, valid)

proc call*(call_607716: Call_PostModifyCacheCluster_607684; CacheClusterId: string;
          SecurityGroupIds: JsonNode = nil; NewAvailabilityZones: JsonNode = nil;
          PreferredMaintenanceWindow: string = ""; NumCacheNodes: int = 0;
          NotificationTopicStatus: string = ""; NotificationTopicArn: string = "";
          EngineVersion: string = ""; AZMode: string = "single-az";
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          CacheNodeIdsToRemove: JsonNode = nil;
          Action: string = "ModifyCacheCluster"; AuthToken: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  var query_607717 = newJObject()
  var formData_607718 = newJObject()
  if SecurityGroupIds != nil:
    formData_607718.add "SecurityGroupIds", SecurityGroupIds
  if NewAvailabilityZones != nil:
    formData_607718.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_607718, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_607718, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_607718, "CacheClusterId", newJString(CacheClusterId))
  add(formData_607718, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_607718, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_607718, "EngineVersion", newJString(EngineVersion))
  add(formData_607718, "AZMode", newJString(AZMode))
  add(formData_607718, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_607718, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607718, "ApplyImmediately", newJBool(ApplyImmediately))
  if CacheNodeIdsToRemove != nil:
    formData_607718.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_607717, "Action", newJString(Action))
  add(formData_607718, "AuthToken", newJString(AuthToken))
  if CacheSecurityGroupNames != nil:
    formData_607718.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_607718, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_607718, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_607717, "Version", newJString(Version))
  add(formData_607718, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_607718, "CacheNodeType", newJString(CacheNodeType))
  result = call_607716.call(nil, query_607717, nil, formData_607718, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_607684(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_607685, base: "/",
    url: url_PostModifyCacheCluster_607686, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_607650 = ref object of OpenApiRestCall_605589
proc url_GetModifyCacheCluster_607652(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheCluster_607651(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_607653 = query.getOrDefault("AuthToken")
  valid_607653 = validateParameter(valid_607653, JString, required = false,
                                 default = nil)
  if valid_607653 != nil:
    section.add "AuthToken", valid_607653
  var valid_607654 = query.getOrDefault("NotificationTopicStatus")
  valid_607654 = validateParameter(valid_607654, JString, required = false,
                                 default = nil)
  if valid_607654 != nil:
    section.add "NotificationTopicStatus", valid_607654
  var valid_607655 = query.getOrDefault("CacheParameterGroupName")
  valid_607655 = validateParameter(valid_607655, JString, required = false,
                                 default = nil)
  if valid_607655 != nil:
    section.add "CacheParameterGroupName", valid_607655
  var valid_607656 = query.getOrDefault("NewAvailabilityZones")
  valid_607656 = validateParameter(valid_607656, JArray, required = false,
                                 default = nil)
  if valid_607656 != nil:
    section.add "NewAvailabilityZones", valid_607656
  var valid_607657 = query.getOrDefault("AZMode")
  valid_607657 = validateParameter(valid_607657, JString, required = false,
                                 default = newJString("single-az"))
  if valid_607657 != nil:
    section.add "AZMode", valid_607657
  var valid_607658 = query.getOrDefault("NumCacheNodes")
  valid_607658 = validateParameter(valid_607658, JInt, required = false, default = nil)
  if valid_607658 != nil:
    section.add "NumCacheNodes", valid_607658
  var valid_607659 = query.getOrDefault("SnapshotRetentionLimit")
  valid_607659 = validateParameter(valid_607659, JInt, required = false, default = nil)
  if valid_607659 != nil:
    section.add "SnapshotRetentionLimit", valid_607659
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_607660 = query.getOrDefault("CacheClusterId")
  valid_607660 = validateParameter(valid_607660, JString, required = true,
                                 default = nil)
  if valid_607660 != nil:
    section.add "CacheClusterId", valid_607660
  var valid_607661 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_607661 = validateParameter(valid_607661, JArray, required = false,
                                 default = nil)
  if valid_607661 != nil:
    section.add "CacheNodeIdsToRemove", valid_607661
  var valid_607662 = query.getOrDefault("CacheSecurityGroupNames")
  valid_607662 = validateParameter(valid_607662, JArray, required = false,
                                 default = nil)
  if valid_607662 != nil:
    section.add "CacheSecurityGroupNames", valid_607662
  var valid_607663 = query.getOrDefault("CacheNodeType")
  valid_607663 = validateParameter(valid_607663, JString, required = false,
                                 default = nil)
  if valid_607663 != nil:
    section.add "CacheNodeType", valid_607663
  var valid_607664 = query.getOrDefault("EngineVersion")
  valid_607664 = validateParameter(valid_607664, JString, required = false,
                                 default = nil)
  if valid_607664 != nil:
    section.add "EngineVersion", valid_607664
  var valid_607665 = query.getOrDefault("Action")
  valid_607665 = validateParameter(valid_607665, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_607665 != nil:
    section.add "Action", valid_607665
  var valid_607666 = query.getOrDefault("ApplyImmediately")
  valid_607666 = validateParameter(valid_607666, JBool, required = false, default = nil)
  if valid_607666 != nil:
    section.add "ApplyImmediately", valid_607666
  var valid_607667 = query.getOrDefault("NotificationTopicArn")
  valid_607667 = validateParameter(valid_607667, JString, required = false,
                                 default = nil)
  if valid_607667 != nil:
    section.add "NotificationTopicArn", valid_607667
  var valid_607668 = query.getOrDefault("Version")
  valid_607668 = validateParameter(valid_607668, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607668 != nil:
    section.add "Version", valid_607668
  var valid_607669 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "PreferredMaintenanceWindow", valid_607669
  var valid_607670 = query.getOrDefault("SnapshotWindow")
  valid_607670 = validateParameter(valid_607670, JString, required = false,
                                 default = nil)
  if valid_607670 != nil:
    section.add "SnapshotWindow", valid_607670
  var valid_607671 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_607671 = validateParameter(valid_607671, JBool, required = false, default = nil)
  if valid_607671 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607671
  var valid_607672 = query.getOrDefault("SecurityGroupIds")
  valid_607672 = validateParameter(valid_607672, JArray, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "SecurityGroupIds", valid_607672
  var valid_607673 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_607673 = validateParameter(valid_607673, JString, required = false,
                                 default = newJString("SET"))
  if valid_607673 != nil:
    section.add "AuthTokenUpdateStrategy", valid_607673
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607674 = header.getOrDefault("X-Amz-Signature")
  valid_607674 = validateParameter(valid_607674, JString, required = false,
                                 default = nil)
  if valid_607674 != nil:
    section.add "X-Amz-Signature", valid_607674
  var valid_607675 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607675 = validateParameter(valid_607675, JString, required = false,
                                 default = nil)
  if valid_607675 != nil:
    section.add "X-Amz-Content-Sha256", valid_607675
  var valid_607676 = header.getOrDefault("X-Amz-Date")
  valid_607676 = validateParameter(valid_607676, JString, required = false,
                                 default = nil)
  if valid_607676 != nil:
    section.add "X-Amz-Date", valid_607676
  var valid_607677 = header.getOrDefault("X-Amz-Credential")
  valid_607677 = validateParameter(valid_607677, JString, required = false,
                                 default = nil)
  if valid_607677 != nil:
    section.add "X-Amz-Credential", valid_607677
  var valid_607678 = header.getOrDefault("X-Amz-Security-Token")
  valid_607678 = validateParameter(valid_607678, JString, required = false,
                                 default = nil)
  if valid_607678 != nil:
    section.add "X-Amz-Security-Token", valid_607678
  var valid_607679 = header.getOrDefault("X-Amz-Algorithm")
  valid_607679 = validateParameter(valid_607679, JString, required = false,
                                 default = nil)
  if valid_607679 != nil:
    section.add "X-Amz-Algorithm", valid_607679
  var valid_607680 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607680 = validateParameter(valid_607680, JString, required = false,
                                 default = nil)
  if valid_607680 != nil:
    section.add "X-Amz-SignedHeaders", valid_607680
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607681: Call_GetModifyCacheCluster_607650; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_607681.validator(path, query, header, formData, body)
  let scheme = call_607681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607681.url(scheme.get, call_607681.host, call_607681.base,
                         call_607681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607681, url, valid)

proc call*(call_607682: Call_GetModifyCacheCluster_607650; CacheClusterId: string;
          AuthToken: string = ""; NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; AZMode: string = "single-az";
          NumCacheNodes: int = 0; SnapshotRetentionLimit: int = 0;
          CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; CacheNodeType: string = "";
          EngineVersion: string = ""; Action: string = "ModifyCacheCluster";
          ApplyImmediately: bool = false; NotificationTopicArn: string = "";
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update</code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. </p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_607683 = newJObject()
  add(query_607683, "AuthToken", newJString(AuthToken))
  add(query_607683, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_607683, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    query_607683.add "NewAvailabilityZones", NewAvailabilityZones
  add(query_607683, "AZMode", newJString(AZMode))
  add(query_607683, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_607683, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_607683, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToRemove != nil:
    query_607683.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    query_607683.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_607683, "CacheNodeType", newJString(CacheNodeType))
  add(query_607683, "EngineVersion", newJString(EngineVersion))
  add(query_607683, "Action", newJString(Action))
  add(query_607683, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607683, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_607683, "Version", newJString(Version))
  add(query_607683, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_607683, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_607683, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_607683.add "SecurityGroupIds", SecurityGroupIds
  add(query_607683, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_607682.call(nil, query_607683, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_607650(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_607651, base: "/",
    url: url_GetModifyCacheCluster_607652, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_607736 = ref object of OpenApiRestCall_605589
proc url_PostModifyCacheParameterGroup_607738(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheParameterGroup_607737(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607739 = query.getOrDefault("Action")
  valid_607739 = validateParameter(valid_607739, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_607739 != nil:
    section.add "Action", valid_607739
  var valid_607740 = query.getOrDefault("Version")
  valid_607740 = validateParameter(valid_607740, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607740 != nil:
    section.add "Version", valid_607740
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607741 = header.getOrDefault("X-Amz-Signature")
  valid_607741 = validateParameter(valid_607741, JString, required = false,
                                 default = nil)
  if valid_607741 != nil:
    section.add "X-Amz-Signature", valid_607741
  var valid_607742 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607742 = validateParameter(valid_607742, JString, required = false,
                                 default = nil)
  if valid_607742 != nil:
    section.add "X-Amz-Content-Sha256", valid_607742
  var valid_607743 = header.getOrDefault("X-Amz-Date")
  valid_607743 = validateParameter(valid_607743, JString, required = false,
                                 default = nil)
  if valid_607743 != nil:
    section.add "X-Amz-Date", valid_607743
  var valid_607744 = header.getOrDefault("X-Amz-Credential")
  valid_607744 = validateParameter(valid_607744, JString, required = false,
                                 default = nil)
  if valid_607744 != nil:
    section.add "X-Amz-Credential", valid_607744
  var valid_607745 = header.getOrDefault("X-Amz-Security-Token")
  valid_607745 = validateParameter(valid_607745, JString, required = false,
                                 default = nil)
  if valid_607745 != nil:
    section.add "X-Amz-Security-Token", valid_607745
  var valid_607746 = header.getOrDefault("X-Amz-Algorithm")
  valid_607746 = validateParameter(valid_607746, JString, required = false,
                                 default = nil)
  if valid_607746 != nil:
    section.add "X-Amz-Algorithm", valid_607746
  var valid_607747 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607747 = validateParameter(valid_607747, JString, required = false,
                                 default = nil)
  if valid_607747 != nil:
    section.add "X-Amz-SignedHeaders", valid_607747
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_607748 = formData.getOrDefault("CacheParameterGroupName")
  valid_607748 = validateParameter(valid_607748, JString, required = true,
                                 default = nil)
  if valid_607748 != nil:
    section.add "CacheParameterGroupName", valid_607748
  var valid_607749 = formData.getOrDefault("ParameterNameValues")
  valid_607749 = validateParameter(valid_607749, JArray, required = true, default = nil)
  if valid_607749 != nil:
    section.add "ParameterNameValues", valid_607749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607750: Call_PostModifyCacheParameterGroup_607736; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_607750.validator(path, query, header, formData, body)
  let scheme = call_607750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607750.url(scheme.get, call_607750.host, call_607750.base,
                         call_607750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607750, url, valid)

proc call*(call_607751: Call_PostModifyCacheParameterGroup_607736;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  var query_607752 = newJObject()
  var formData_607753 = newJObject()
  add(formData_607753, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_607752, "Action", newJString(Action))
  add(query_607752, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_607753.add "ParameterNameValues", ParameterNameValues
  result = call_607751.call(nil, query_607752, nil, formData_607753, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_607736(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_607737, base: "/",
    url: url_PostModifyCacheParameterGroup_607738,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_607719 = ref object of OpenApiRestCall_605589
proc url_GetModifyCacheParameterGroup_607721(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheParameterGroup_607720(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_607722 = query.getOrDefault("CacheParameterGroupName")
  valid_607722 = validateParameter(valid_607722, JString, required = true,
                                 default = nil)
  if valid_607722 != nil:
    section.add "CacheParameterGroupName", valid_607722
  var valid_607723 = query.getOrDefault("ParameterNameValues")
  valid_607723 = validateParameter(valid_607723, JArray, required = true, default = nil)
  if valid_607723 != nil:
    section.add "ParameterNameValues", valid_607723
  var valid_607724 = query.getOrDefault("Action")
  valid_607724 = validateParameter(valid_607724, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_607724 != nil:
    section.add "Action", valid_607724
  var valid_607725 = query.getOrDefault("Version")
  valid_607725 = validateParameter(valid_607725, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607725 != nil:
    section.add "Version", valid_607725
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607726 = header.getOrDefault("X-Amz-Signature")
  valid_607726 = validateParameter(valid_607726, JString, required = false,
                                 default = nil)
  if valid_607726 != nil:
    section.add "X-Amz-Signature", valid_607726
  var valid_607727 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607727 = validateParameter(valid_607727, JString, required = false,
                                 default = nil)
  if valid_607727 != nil:
    section.add "X-Amz-Content-Sha256", valid_607727
  var valid_607728 = header.getOrDefault("X-Amz-Date")
  valid_607728 = validateParameter(valid_607728, JString, required = false,
                                 default = nil)
  if valid_607728 != nil:
    section.add "X-Amz-Date", valid_607728
  var valid_607729 = header.getOrDefault("X-Amz-Credential")
  valid_607729 = validateParameter(valid_607729, JString, required = false,
                                 default = nil)
  if valid_607729 != nil:
    section.add "X-Amz-Credential", valid_607729
  var valid_607730 = header.getOrDefault("X-Amz-Security-Token")
  valid_607730 = validateParameter(valid_607730, JString, required = false,
                                 default = nil)
  if valid_607730 != nil:
    section.add "X-Amz-Security-Token", valid_607730
  var valid_607731 = header.getOrDefault("X-Amz-Algorithm")
  valid_607731 = validateParameter(valid_607731, JString, required = false,
                                 default = nil)
  if valid_607731 != nil:
    section.add "X-Amz-Algorithm", valid_607731
  var valid_607732 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607732 = validateParameter(valid_607732, JString, required = false,
                                 default = nil)
  if valid_607732 != nil:
    section.add "X-Amz-SignedHeaders", valid_607732
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607733: Call_GetModifyCacheParameterGroup_607719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_607733.validator(path, query, header, formData, body)
  let scheme = call_607733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607733.url(scheme.get, call_607733.host, call_607733.base,
                         call_607733.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607733, url, valid)

proc call*(call_607734: Call_GetModifyCacheParameterGroup_607719;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607735 = newJObject()
  add(query_607735, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    query_607735.add "ParameterNameValues", ParameterNameValues
  add(query_607735, "Action", newJString(Action))
  add(query_607735, "Version", newJString(Version))
  result = call_607734.call(nil, query_607735, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_607719(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_607720, base: "/",
    url: url_GetModifyCacheParameterGroup_607721,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_607772 = ref object of OpenApiRestCall_605589
proc url_PostModifyCacheSubnetGroup_607774(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCacheSubnetGroup_607773(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607775 = query.getOrDefault("Action")
  valid_607775 = validateParameter(valid_607775, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_607775 != nil:
    section.add "Action", valid_607775
  var valid_607776 = query.getOrDefault("Version")
  valid_607776 = validateParameter(valid_607776, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607776 != nil:
    section.add "Version", valid_607776
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607777 = header.getOrDefault("X-Amz-Signature")
  valid_607777 = validateParameter(valid_607777, JString, required = false,
                                 default = nil)
  if valid_607777 != nil:
    section.add "X-Amz-Signature", valid_607777
  var valid_607778 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607778 = validateParameter(valid_607778, JString, required = false,
                                 default = nil)
  if valid_607778 != nil:
    section.add "X-Amz-Content-Sha256", valid_607778
  var valid_607779 = header.getOrDefault("X-Amz-Date")
  valid_607779 = validateParameter(valid_607779, JString, required = false,
                                 default = nil)
  if valid_607779 != nil:
    section.add "X-Amz-Date", valid_607779
  var valid_607780 = header.getOrDefault("X-Amz-Credential")
  valid_607780 = validateParameter(valid_607780, JString, required = false,
                                 default = nil)
  if valid_607780 != nil:
    section.add "X-Amz-Credential", valid_607780
  var valid_607781 = header.getOrDefault("X-Amz-Security-Token")
  valid_607781 = validateParameter(valid_607781, JString, required = false,
                                 default = nil)
  if valid_607781 != nil:
    section.add "X-Amz-Security-Token", valid_607781
  var valid_607782 = header.getOrDefault("X-Amz-Algorithm")
  valid_607782 = validateParameter(valid_607782, JString, required = false,
                                 default = nil)
  if valid_607782 != nil:
    section.add "X-Amz-Algorithm", valid_607782
  var valid_607783 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607783 = validateParameter(valid_607783, JString, required = false,
                                 default = nil)
  if valid_607783 != nil:
    section.add "X-Amz-SignedHeaders", valid_607783
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  section = newJObject()
  var valid_607784 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_607784 = validateParameter(valid_607784, JString, required = false,
                                 default = nil)
  if valid_607784 != nil:
    section.add "CacheSubnetGroupDescription", valid_607784
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_607785 = formData.getOrDefault("CacheSubnetGroupName")
  valid_607785 = validateParameter(valid_607785, JString, required = true,
                                 default = nil)
  if valid_607785 != nil:
    section.add "CacheSubnetGroupName", valid_607785
  var valid_607786 = formData.getOrDefault("SubnetIds")
  valid_607786 = validateParameter(valid_607786, JArray, required = false,
                                 default = nil)
  if valid_607786 != nil:
    section.add "SubnetIds", valid_607786
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607787: Call_PostModifyCacheSubnetGroup_607772; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_607787.validator(path, query, header, formData, body)
  let scheme = call_607787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607787.url(scheme.get, call_607787.host, call_607787.base,
                         call_607787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607787, url, valid)

proc call*(call_607788: Call_PostModifyCacheSubnetGroup_607772;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; Version: string = "2015-02-02";
          SubnetIds: JsonNode = nil): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  var query_607789 = newJObject()
  var formData_607790 = newJObject()
  add(formData_607790, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(formData_607790, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_607789, "Action", newJString(Action))
  add(query_607789, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_607790.add "SubnetIds", SubnetIds
  result = call_607788.call(nil, query_607789, nil, formData_607790, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_607772(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_607773, base: "/",
    url: url_PostModifyCacheSubnetGroup_607774,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_607754 = ref object of OpenApiRestCall_605589
proc url_GetModifyCacheSubnetGroup_607756(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCacheSubnetGroup_607755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607757 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_607757 = validateParameter(valid_607757, JString, required = false,
                                 default = nil)
  if valid_607757 != nil:
    section.add "CacheSubnetGroupDescription", valid_607757
  var valid_607758 = query.getOrDefault("SubnetIds")
  valid_607758 = validateParameter(valid_607758, JArray, required = false,
                                 default = nil)
  if valid_607758 != nil:
    section.add "SubnetIds", valid_607758
  var valid_607759 = query.getOrDefault("Action")
  valid_607759 = validateParameter(valid_607759, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_607759 != nil:
    section.add "Action", valid_607759
  var valid_607760 = query.getOrDefault("CacheSubnetGroupName")
  valid_607760 = validateParameter(valid_607760, JString, required = true,
                                 default = nil)
  if valid_607760 != nil:
    section.add "CacheSubnetGroupName", valid_607760
  var valid_607761 = query.getOrDefault("Version")
  valid_607761 = validateParameter(valid_607761, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607761 != nil:
    section.add "Version", valid_607761
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607762 = header.getOrDefault("X-Amz-Signature")
  valid_607762 = validateParameter(valid_607762, JString, required = false,
                                 default = nil)
  if valid_607762 != nil:
    section.add "X-Amz-Signature", valid_607762
  var valid_607763 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607763 = validateParameter(valid_607763, JString, required = false,
                                 default = nil)
  if valid_607763 != nil:
    section.add "X-Amz-Content-Sha256", valid_607763
  var valid_607764 = header.getOrDefault("X-Amz-Date")
  valid_607764 = validateParameter(valid_607764, JString, required = false,
                                 default = nil)
  if valid_607764 != nil:
    section.add "X-Amz-Date", valid_607764
  var valid_607765 = header.getOrDefault("X-Amz-Credential")
  valid_607765 = validateParameter(valid_607765, JString, required = false,
                                 default = nil)
  if valid_607765 != nil:
    section.add "X-Amz-Credential", valid_607765
  var valid_607766 = header.getOrDefault("X-Amz-Security-Token")
  valid_607766 = validateParameter(valid_607766, JString, required = false,
                                 default = nil)
  if valid_607766 != nil:
    section.add "X-Amz-Security-Token", valid_607766
  var valid_607767 = header.getOrDefault("X-Amz-Algorithm")
  valid_607767 = validateParameter(valid_607767, JString, required = false,
                                 default = nil)
  if valid_607767 != nil:
    section.add "X-Amz-Algorithm", valid_607767
  var valid_607768 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607768 = validateParameter(valid_607768, JString, required = false,
                                 default = nil)
  if valid_607768 != nil:
    section.add "X-Amz-SignedHeaders", valid_607768
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607769: Call_GetModifyCacheSubnetGroup_607754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_607769.validator(path, query, header, formData, body)
  let scheme = call_607769.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607769.url(scheme.get, call_607769.host, call_607769.base,
                         call_607769.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607769, url, valid)

proc call*(call_607770: Call_GetModifyCacheSubnetGroup_607754;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607771 = newJObject()
  add(query_607771, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    query_607771.add "SubnetIds", SubnetIds
  add(query_607771, "Action", newJString(Action))
  add(query_607771, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_607771, "Version", newJString(Version))
  result = call_607770.call(nil, query_607771, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_607754(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_607755, base: "/",
    url: url_GetModifyCacheSubnetGroup_607756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_607826 = ref object of OpenApiRestCall_605589
proc url_PostModifyReplicationGroup_607828(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyReplicationGroup_607827(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607829 = query.getOrDefault("Action")
  valid_607829 = validateParameter(valid_607829, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_607829 != nil:
    section.add "Action", valid_607829
  var valid_607830 = query.getOrDefault("Version")
  valid_607830 = validateParameter(valid_607830, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607830 != nil:
    section.add "Version", valid_607830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607831 = header.getOrDefault("X-Amz-Signature")
  valid_607831 = validateParameter(valid_607831, JString, required = false,
                                 default = nil)
  if valid_607831 != nil:
    section.add "X-Amz-Signature", valid_607831
  var valid_607832 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607832 = validateParameter(valid_607832, JString, required = false,
                                 default = nil)
  if valid_607832 != nil:
    section.add "X-Amz-Content-Sha256", valid_607832
  var valid_607833 = header.getOrDefault("X-Amz-Date")
  valid_607833 = validateParameter(valid_607833, JString, required = false,
                                 default = nil)
  if valid_607833 != nil:
    section.add "X-Amz-Date", valid_607833
  var valid_607834 = header.getOrDefault("X-Amz-Credential")
  valid_607834 = validateParameter(valid_607834, JString, required = false,
                                 default = nil)
  if valid_607834 != nil:
    section.add "X-Amz-Credential", valid_607834
  var valid_607835 = header.getOrDefault("X-Amz-Security-Token")
  valid_607835 = validateParameter(valid_607835, JString, required = false,
                                 default = nil)
  if valid_607835 != nil:
    section.add "X-Amz-Security-Token", valid_607835
  var valid_607836 = header.getOrDefault("X-Amz-Algorithm")
  valid_607836 = validateParameter(valid_607836, JString, required = false,
                                 default = nil)
  if valid_607836 != nil:
    section.add "X-Amz-Algorithm", valid_607836
  var valid_607837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607837 = validateParameter(valid_607837, JString, required = false,
                                 default = nil)
  if valid_607837 != nil:
    section.add "X-Amz-SignedHeaders", valid_607837
  result.add "header", section
  ## parameters in `formData` object:
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  section = newJObject()
  var valid_607838 = formData.getOrDefault("SecurityGroupIds")
  valid_607838 = validateParameter(valid_607838, JArray, required = false,
                                 default = nil)
  if valid_607838 != nil:
    section.add "SecurityGroupIds", valid_607838
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_607839 = formData.getOrDefault("ReplicationGroupId")
  valid_607839 = validateParameter(valid_607839, JString, required = true,
                                 default = nil)
  if valid_607839 != nil:
    section.add "ReplicationGroupId", valid_607839
  var valid_607840 = formData.getOrDefault("NodeGroupId")
  valid_607840 = validateParameter(valid_607840, JString, required = false,
                                 default = nil)
  if valid_607840 != nil:
    section.add "NodeGroupId", valid_607840
  var valid_607841 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_607841 = validateParameter(valid_607841, JString, required = false,
                                 default = nil)
  if valid_607841 != nil:
    section.add "PreferredMaintenanceWindow", valid_607841
  var valid_607842 = formData.getOrDefault("PrimaryClusterId")
  valid_607842 = validateParameter(valid_607842, JString, required = false,
                                 default = nil)
  if valid_607842 != nil:
    section.add "PrimaryClusterId", valid_607842
  var valid_607843 = formData.getOrDefault("NotificationTopicStatus")
  valid_607843 = validateParameter(valid_607843, JString, required = false,
                                 default = nil)
  if valid_607843 != nil:
    section.add "NotificationTopicStatus", valid_607843
  var valid_607844 = formData.getOrDefault("NotificationTopicArn")
  valid_607844 = validateParameter(valid_607844, JString, required = false,
                                 default = nil)
  if valid_607844 != nil:
    section.add "NotificationTopicArn", valid_607844
  var valid_607845 = formData.getOrDefault("EngineVersion")
  valid_607845 = validateParameter(valid_607845, JString, required = false,
                                 default = nil)
  if valid_607845 != nil:
    section.add "EngineVersion", valid_607845
  var valid_607846 = formData.getOrDefault("SnapshottingClusterId")
  valid_607846 = validateParameter(valid_607846, JString, required = false,
                                 default = nil)
  if valid_607846 != nil:
    section.add "SnapshottingClusterId", valid_607846
  var valid_607847 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_607847 = validateParameter(valid_607847, JBool, required = false, default = nil)
  if valid_607847 != nil:
    section.add "AutomaticFailoverEnabled", valid_607847
  var valid_607848 = formData.getOrDefault("CacheParameterGroupName")
  valid_607848 = validateParameter(valid_607848, JString, required = false,
                                 default = nil)
  if valid_607848 != nil:
    section.add "CacheParameterGroupName", valid_607848
  var valid_607849 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_607849 = validateParameter(valid_607849, JBool, required = false, default = nil)
  if valid_607849 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607849
  var valid_607850 = formData.getOrDefault("ApplyImmediately")
  valid_607850 = validateParameter(valid_607850, JBool, required = false, default = nil)
  if valid_607850 != nil:
    section.add "ApplyImmediately", valid_607850
  var valid_607851 = formData.getOrDefault("AuthToken")
  valid_607851 = validateParameter(valid_607851, JString, required = false,
                                 default = nil)
  if valid_607851 != nil:
    section.add "AuthToken", valid_607851
  var valid_607852 = formData.getOrDefault("ReplicationGroupDescription")
  valid_607852 = validateParameter(valid_607852, JString, required = false,
                                 default = nil)
  if valid_607852 != nil:
    section.add "ReplicationGroupDescription", valid_607852
  var valid_607853 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_607853 = validateParameter(valid_607853, JArray, required = false,
                                 default = nil)
  if valid_607853 != nil:
    section.add "CacheSecurityGroupNames", valid_607853
  var valid_607854 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_607854 = validateParameter(valid_607854, JInt, required = false, default = nil)
  if valid_607854 != nil:
    section.add "SnapshotRetentionLimit", valid_607854
  var valid_607855 = formData.getOrDefault("AuthTokenUpdateStrategy")
  valid_607855 = validateParameter(valid_607855, JString, required = false,
                                 default = newJString("SET"))
  if valid_607855 != nil:
    section.add "AuthTokenUpdateStrategy", valid_607855
  var valid_607856 = formData.getOrDefault("SnapshotWindow")
  valid_607856 = validateParameter(valid_607856, JString, required = false,
                                 default = nil)
  if valid_607856 != nil:
    section.add "SnapshotWindow", valid_607856
  var valid_607857 = formData.getOrDefault("CacheNodeType")
  valid_607857 = validateParameter(valid_607857, JString, required = false,
                                 default = nil)
  if valid_607857 != nil:
    section.add "CacheNodeType", valid_607857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607858: Call_PostModifyReplicationGroup_607826; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_607858.validator(path, query, header, formData, body)
  let scheme = call_607858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607858.url(scheme.get, call_607858.host, call_607858.base,
                         call_607858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607858, url, valid)

proc call*(call_607859: Call_PostModifyReplicationGroup_607826;
          ReplicationGroupId: string; SecurityGroupIds: JsonNode = nil;
          NodeGroupId: string = ""; PreferredMaintenanceWindow: string = "";
          PrimaryClusterId: string = ""; NotificationTopicStatus: string = "";
          NotificationTopicArn: string = ""; EngineVersion: string = "";
          SnapshottingClusterId: string = "";
          AutomaticFailoverEnabled: bool = false;
          CacheParameterGroupName: string = "";
          AutoMinorVersionUpgrade: bool = false; ApplyImmediately: bool = false;
          Action: string = "ModifyReplicationGroup"; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          AuthTokenUpdateStrategy: string = "SET"; Version: string = "2015-02-02";
          SnapshotWindow: string = ""; CacheNodeType: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  ##   Version: string (required)
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  var query_607860 = newJObject()
  var formData_607861 = newJObject()
  if SecurityGroupIds != nil:
    formData_607861.add "SecurityGroupIds", SecurityGroupIds
  add(formData_607861, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_607861, "NodeGroupId", newJString(NodeGroupId))
  add(formData_607861, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_607861, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(formData_607861, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_607861, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(formData_607861, "EngineVersion", newJString(EngineVersion))
  add(formData_607861, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(formData_607861, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_607861, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_607861, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_607861, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607860, "Action", newJString(Action))
  add(formData_607861, "AuthToken", newJString(AuthToken))
  add(formData_607861, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    formData_607861.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_607861, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_607861, "AuthTokenUpdateStrategy",
      newJString(AuthTokenUpdateStrategy))
  add(query_607860, "Version", newJString(Version))
  add(formData_607861, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_607861, "CacheNodeType", newJString(CacheNodeType))
  result = call_607859.call(nil, query_607860, nil, formData_607861, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_607826(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_607827, base: "/",
    url: url_PostModifyReplicationGroup_607828,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_607791 = ref object of OpenApiRestCall_605589
proc url_GetModifyReplicationGroup_607793(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyReplicationGroup_607792(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: JString
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  section = newJObject()
  var valid_607794 = query.getOrDefault("AuthToken")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "AuthToken", valid_607794
  var valid_607795 = query.getOrDefault("ReplicationGroupDescription")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "ReplicationGroupDescription", valid_607795
  var valid_607796 = query.getOrDefault("NotificationTopicStatus")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "NotificationTopicStatus", valid_607796
  var valid_607797 = query.getOrDefault("CacheParameterGroupName")
  valid_607797 = validateParameter(valid_607797, JString, required = false,
                                 default = nil)
  if valid_607797 != nil:
    section.add "CacheParameterGroupName", valid_607797
  var valid_607798 = query.getOrDefault("SnapshotRetentionLimit")
  valid_607798 = validateParameter(valid_607798, JInt, required = false, default = nil)
  if valid_607798 != nil:
    section.add "SnapshotRetentionLimit", valid_607798
  var valid_607799 = query.getOrDefault("SnapshottingClusterId")
  valid_607799 = validateParameter(valid_607799, JString, required = false,
                                 default = nil)
  if valid_607799 != nil:
    section.add "SnapshottingClusterId", valid_607799
  var valid_607800 = query.getOrDefault("CacheSecurityGroupNames")
  valid_607800 = validateParameter(valid_607800, JArray, required = false,
                                 default = nil)
  if valid_607800 != nil:
    section.add "CacheSecurityGroupNames", valid_607800
  var valid_607801 = query.getOrDefault("PrimaryClusterId")
  valid_607801 = validateParameter(valid_607801, JString, required = false,
                                 default = nil)
  if valid_607801 != nil:
    section.add "PrimaryClusterId", valid_607801
  var valid_607802 = query.getOrDefault("CacheNodeType")
  valid_607802 = validateParameter(valid_607802, JString, required = false,
                                 default = nil)
  if valid_607802 != nil:
    section.add "CacheNodeType", valid_607802
  var valid_607803 = query.getOrDefault("EngineVersion")
  valid_607803 = validateParameter(valid_607803, JString, required = false,
                                 default = nil)
  if valid_607803 != nil:
    section.add "EngineVersion", valid_607803
  var valid_607804 = query.getOrDefault("Action")
  valid_607804 = validateParameter(valid_607804, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_607804 != nil:
    section.add "Action", valid_607804
  var valid_607805 = query.getOrDefault("ApplyImmediately")
  valid_607805 = validateParameter(valid_607805, JBool, required = false, default = nil)
  if valid_607805 != nil:
    section.add "ApplyImmediately", valid_607805
  var valid_607806 = query.getOrDefault("ReplicationGroupId")
  valid_607806 = validateParameter(valid_607806, JString, required = true,
                                 default = nil)
  if valid_607806 != nil:
    section.add "ReplicationGroupId", valid_607806
  var valid_607807 = query.getOrDefault("NotificationTopicArn")
  valid_607807 = validateParameter(valid_607807, JString, required = false,
                                 default = nil)
  if valid_607807 != nil:
    section.add "NotificationTopicArn", valid_607807
  var valid_607808 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_607808 = validateParameter(valid_607808, JBool, required = false, default = nil)
  if valid_607808 != nil:
    section.add "AutomaticFailoverEnabled", valid_607808
  var valid_607809 = query.getOrDefault("Version")
  valid_607809 = validateParameter(valid_607809, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607809 != nil:
    section.add "Version", valid_607809
  var valid_607810 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_607810 = validateParameter(valid_607810, JString, required = false,
                                 default = nil)
  if valid_607810 != nil:
    section.add "PreferredMaintenanceWindow", valid_607810
  var valid_607811 = query.getOrDefault("SnapshotWindow")
  valid_607811 = validateParameter(valid_607811, JString, required = false,
                                 default = nil)
  if valid_607811 != nil:
    section.add "SnapshotWindow", valid_607811
  var valid_607812 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_607812 = validateParameter(valid_607812, JBool, required = false, default = nil)
  if valid_607812 != nil:
    section.add "AutoMinorVersionUpgrade", valid_607812
  var valid_607813 = query.getOrDefault("SecurityGroupIds")
  valid_607813 = validateParameter(valid_607813, JArray, required = false,
                                 default = nil)
  if valid_607813 != nil:
    section.add "SecurityGroupIds", valid_607813
  var valid_607814 = query.getOrDefault("NodeGroupId")
  valid_607814 = validateParameter(valid_607814, JString, required = false,
                                 default = nil)
  if valid_607814 != nil:
    section.add "NodeGroupId", valid_607814
  var valid_607815 = query.getOrDefault("AuthTokenUpdateStrategy")
  valid_607815 = validateParameter(valid_607815, JString, required = false,
                                 default = newJString("SET"))
  if valid_607815 != nil:
    section.add "AuthTokenUpdateStrategy", valid_607815
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607816 = header.getOrDefault("X-Amz-Signature")
  valid_607816 = validateParameter(valid_607816, JString, required = false,
                                 default = nil)
  if valid_607816 != nil:
    section.add "X-Amz-Signature", valid_607816
  var valid_607817 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607817 = validateParameter(valid_607817, JString, required = false,
                                 default = nil)
  if valid_607817 != nil:
    section.add "X-Amz-Content-Sha256", valid_607817
  var valid_607818 = header.getOrDefault("X-Amz-Date")
  valid_607818 = validateParameter(valid_607818, JString, required = false,
                                 default = nil)
  if valid_607818 != nil:
    section.add "X-Amz-Date", valid_607818
  var valid_607819 = header.getOrDefault("X-Amz-Credential")
  valid_607819 = validateParameter(valid_607819, JString, required = false,
                                 default = nil)
  if valid_607819 != nil:
    section.add "X-Amz-Credential", valid_607819
  var valid_607820 = header.getOrDefault("X-Amz-Security-Token")
  valid_607820 = validateParameter(valid_607820, JString, required = false,
                                 default = nil)
  if valid_607820 != nil:
    section.add "X-Amz-Security-Token", valid_607820
  var valid_607821 = header.getOrDefault("X-Amz-Algorithm")
  valid_607821 = validateParameter(valid_607821, JString, required = false,
                                 default = nil)
  if valid_607821 != nil:
    section.add "X-Amz-Algorithm", valid_607821
  var valid_607822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607822 = validateParameter(valid_607822, JString, required = false,
                                 default = nil)
  if valid_607822 != nil:
    section.add "X-Amz-SignedHeaders", valid_607822
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607823: Call_GetModifyReplicationGroup_607791; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_607823.validator(path, query, header, formData, body)
  let scheme = call_607823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607823.url(scheme.get, call_607823.host, call_607823.base,
                         call_607823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607823, url, valid)

proc call*(call_607824: Call_GetModifyReplicationGroup_607791;
          ReplicationGroupId: string; AuthToken: string = "";
          ReplicationGroupDescription: string = "";
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshottingClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; PrimaryClusterId: string = "";
          CacheNodeType: string = ""; EngineVersion: string = "";
          Action: string = "ModifyReplicationGroup"; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; AutomaticFailoverEnabled: bool = false;
          Version: string = "2015-02-02"; PreferredMaintenanceWindow: string = "";
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          SecurityGroupIds: JsonNode = nil; NodeGroupId: string = "";
          AuthTokenUpdateStrategy: string = "SET"): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   AuthToken: string
  ##            : <p>Reserved parameter. The password used to access a password protected server. This parameter must be specified with the <code>auth-token-update-strategy </code> parameter. Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@', '%'</p> </li> </ul> <p> For more information, see AUTH password at <a href="http://redis.io/commands/AUTH">AUTH</a>.</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   AuthTokenUpdateStrategy: string
  ##                          : <p>Specifies the strategy to use to update the AUTH token. This parameter must be specified with the <code>auth-token</code> parameter. Possible values:</p> <ul> <li> <p>Rotate</p> </li> <li> <p>Set</p> </li> </ul> <p> For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html">Authenticating Users with Redis AUTH</a> </p>
  var query_607825 = newJObject()
  add(query_607825, "AuthToken", newJString(AuthToken))
  add(query_607825, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(query_607825, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_607825, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_607825, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_607825, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  if CacheSecurityGroupNames != nil:
    query_607825.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_607825, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_607825, "CacheNodeType", newJString(CacheNodeType))
  add(query_607825, "EngineVersion", newJString(EngineVersion))
  add(query_607825, "Action", newJString(Action))
  add(query_607825, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607825, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_607825, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_607825, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_607825, "Version", newJString(Version))
  add(query_607825, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_607825, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_607825, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_607825.add "SecurityGroupIds", SecurityGroupIds
  add(query_607825, "NodeGroupId", newJString(NodeGroupId))
  add(query_607825, "AuthTokenUpdateStrategy", newJString(AuthTokenUpdateStrategy))
  result = call_607824.call(nil, query_607825, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_607791(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_607792, base: "/",
    url: url_GetModifyReplicationGroup_607793,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_607883 = ref object of OpenApiRestCall_605589
proc url_PostModifyReplicationGroupShardConfiguration_607885(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyReplicationGroupShardConfiguration_607884(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607886 = query.getOrDefault("Action")
  valid_607886 = validateParameter(valid_607886, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_607886 != nil:
    section.add "Action", valid_607886
  var valid_607887 = query.getOrDefault("Version")
  valid_607887 = validateParameter(valid_607887, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607887 != nil:
    section.add "Version", valid_607887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607888 = header.getOrDefault("X-Amz-Signature")
  valid_607888 = validateParameter(valid_607888, JString, required = false,
                                 default = nil)
  if valid_607888 != nil:
    section.add "X-Amz-Signature", valid_607888
  var valid_607889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607889 = validateParameter(valid_607889, JString, required = false,
                                 default = nil)
  if valid_607889 != nil:
    section.add "X-Amz-Content-Sha256", valid_607889
  var valid_607890 = header.getOrDefault("X-Amz-Date")
  valid_607890 = validateParameter(valid_607890, JString, required = false,
                                 default = nil)
  if valid_607890 != nil:
    section.add "X-Amz-Date", valid_607890
  var valid_607891 = header.getOrDefault("X-Amz-Credential")
  valid_607891 = validateParameter(valid_607891, JString, required = false,
                                 default = nil)
  if valid_607891 != nil:
    section.add "X-Amz-Credential", valid_607891
  var valid_607892 = header.getOrDefault("X-Amz-Security-Token")
  valid_607892 = validateParameter(valid_607892, JString, required = false,
                                 default = nil)
  if valid_607892 != nil:
    section.add "X-Amz-Security-Token", valid_607892
  var valid_607893 = header.getOrDefault("X-Amz-Algorithm")
  valid_607893 = validateParameter(valid_607893, JString, required = false,
                                 default = nil)
  if valid_607893 != nil:
    section.add "X-Amz-Algorithm", valid_607893
  var valid_607894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607894 = validateParameter(valid_607894, JString, required = false,
                                 default = nil)
  if valid_607894 != nil:
    section.add "X-Amz-SignedHeaders", valid_607894
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  section = newJObject()
  var valid_607895 = formData.getOrDefault("NodeGroupsToRemove")
  valid_607895 = validateParameter(valid_607895, JArray, required = false,
                                 default = nil)
  if valid_607895 != nil:
    section.add "NodeGroupsToRemove", valid_607895
  var valid_607896 = formData.getOrDefault("NodeGroupsToRetain")
  valid_607896 = validateParameter(valid_607896, JArray, required = false,
                                 default = nil)
  if valid_607896 != nil:
    section.add "NodeGroupsToRetain", valid_607896
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupCount` field"
  var valid_607897 = formData.getOrDefault("NodeGroupCount")
  valid_607897 = validateParameter(valid_607897, JInt, required = true, default = nil)
  if valid_607897 != nil:
    section.add "NodeGroupCount", valid_607897
  var valid_607898 = formData.getOrDefault("ReshardingConfiguration")
  valid_607898 = validateParameter(valid_607898, JArray, required = false,
                                 default = nil)
  if valid_607898 != nil:
    section.add "ReshardingConfiguration", valid_607898
  var valid_607899 = formData.getOrDefault("ApplyImmediately")
  valid_607899 = validateParameter(valid_607899, JBool, required = true, default = nil)
  if valid_607899 != nil:
    section.add "ApplyImmediately", valid_607899
  var valid_607900 = formData.getOrDefault("ReplicationGroupId")
  valid_607900 = validateParameter(valid_607900, JString, required = true,
                                 default = nil)
  if valid_607900 != nil:
    section.add "ReplicationGroupId", valid_607900
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607901: Call_PostModifyReplicationGroupShardConfiguration_607883;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_607901.validator(path, query, header, formData, body)
  let scheme = call_607901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607901.url(scheme.get, call_607901.host, call_607901.base,
                         call_607901.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607901, url, valid)

proc call*(call_607902: Call_PostModifyReplicationGroupShardConfiguration_607883;
          NodeGroupCount: int; ApplyImmediately: bool; ReplicationGroupId: string;
          NodeGroupsToRemove: JsonNode = nil; NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  var query_607903 = newJObject()
  var formData_607904 = newJObject()
  if NodeGroupsToRemove != nil:
    formData_607904.add "NodeGroupsToRemove", NodeGroupsToRemove
  if NodeGroupsToRetain != nil:
    formData_607904.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(formData_607904, "NodeGroupCount", newJInt(NodeGroupCount))
  if ReshardingConfiguration != nil:
    formData_607904.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_607904, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607903, "Action", newJString(Action))
  add(query_607903, "Version", newJString(Version))
  add(formData_607904, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_607902.call(nil, query_607903, nil, formData_607904, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_607883(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_607884,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_607885,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_607862 = ref object of OpenApiRestCall_605589
proc url_GetModifyReplicationGroupShardConfiguration_607864(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyReplicationGroupShardConfiguration_607863(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: JString (required)
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  section = newJObject()
  var valid_607865 = query.getOrDefault("ReshardingConfiguration")
  valid_607865 = validateParameter(valid_607865, JArray, required = false,
                                 default = nil)
  if valid_607865 != nil:
    section.add "ReshardingConfiguration", valid_607865
  var valid_607866 = query.getOrDefault("NodeGroupsToRemove")
  valid_607866 = validateParameter(valid_607866, JArray, required = false,
                                 default = nil)
  if valid_607866 != nil:
    section.add "NodeGroupsToRemove", valid_607866
  var valid_607867 = query.getOrDefault("Action")
  valid_607867 = validateParameter(valid_607867, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_607867 != nil:
    section.add "Action", valid_607867
  var valid_607868 = query.getOrDefault("ApplyImmediately")
  valid_607868 = validateParameter(valid_607868, JBool, required = true, default = nil)
  if valid_607868 != nil:
    section.add "ApplyImmediately", valid_607868
  var valid_607869 = query.getOrDefault("ReplicationGroupId")
  valid_607869 = validateParameter(valid_607869, JString, required = true,
                                 default = nil)
  if valid_607869 != nil:
    section.add "ReplicationGroupId", valid_607869
  var valid_607870 = query.getOrDefault("NodeGroupsToRetain")
  valid_607870 = validateParameter(valid_607870, JArray, required = false,
                                 default = nil)
  if valid_607870 != nil:
    section.add "NodeGroupsToRetain", valid_607870
  var valid_607871 = query.getOrDefault("Version")
  valid_607871 = validateParameter(valid_607871, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607871 != nil:
    section.add "Version", valid_607871
  var valid_607872 = query.getOrDefault("NodeGroupCount")
  valid_607872 = validateParameter(valid_607872, JInt, required = true, default = nil)
  if valid_607872 != nil:
    section.add "NodeGroupCount", valid_607872
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607873 = header.getOrDefault("X-Amz-Signature")
  valid_607873 = validateParameter(valid_607873, JString, required = false,
                                 default = nil)
  if valid_607873 != nil:
    section.add "X-Amz-Signature", valid_607873
  var valid_607874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607874 = validateParameter(valid_607874, JString, required = false,
                                 default = nil)
  if valid_607874 != nil:
    section.add "X-Amz-Content-Sha256", valid_607874
  var valid_607875 = header.getOrDefault("X-Amz-Date")
  valid_607875 = validateParameter(valid_607875, JString, required = false,
                                 default = nil)
  if valid_607875 != nil:
    section.add "X-Amz-Date", valid_607875
  var valid_607876 = header.getOrDefault("X-Amz-Credential")
  valid_607876 = validateParameter(valid_607876, JString, required = false,
                                 default = nil)
  if valid_607876 != nil:
    section.add "X-Amz-Credential", valid_607876
  var valid_607877 = header.getOrDefault("X-Amz-Security-Token")
  valid_607877 = validateParameter(valid_607877, JString, required = false,
                                 default = nil)
  if valid_607877 != nil:
    section.add "X-Amz-Security-Token", valid_607877
  var valid_607878 = header.getOrDefault("X-Amz-Algorithm")
  valid_607878 = validateParameter(valid_607878, JString, required = false,
                                 default = nil)
  if valid_607878 != nil:
    section.add "X-Amz-Algorithm", valid_607878
  var valid_607879 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607879 = validateParameter(valid_607879, JString, required = false,
                                 default = nil)
  if valid_607879 != nil:
    section.add "X-Amz-SignedHeaders", valid_607879
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607880: Call_GetModifyReplicationGroupShardConfiguration_607862;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_607880.validator(path, query, header, formData, body)
  let scheme = call_607880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607880.url(scheme.get, call_607880.host, call_607880.base,
                         call_607880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607880, url, valid)

proc call*(call_607881: Call_GetModifyReplicationGroupShardConfiguration_607862;
          ApplyImmediately: bool; ReplicationGroupId: string; NodeGroupCount: int;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRetain: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Version: string (required)
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  var query_607882 = newJObject()
  if ReshardingConfiguration != nil:
    query_607882.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_607882.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_607882, "Action", newJString(Action))
  add(query_607882, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607882, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    query_607882.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_607882, "Version", newJString(Version))
  add(query_607882, "NodeGroupCount", newJInt(NodeGroupCount))
  result = call_607881.call(nil, query_607882, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_607862(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_607863,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_607864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_607923 = ref object of OpenApiRestCall_605589
proc url_PostPurchaseReservedCacheNodesOffering_607925(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedCacheNodesOffering_607924(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607926 = query.getOrDefault("Action")
  valid_607926 = validateParameter(valid_607926, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_607926 != nil:
    section.add "Action", valid_607926
  var valid_607927 = query.getOrDefault("Version")
  valid_607927 = validateParameter(valid_607927, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607927 != nil:
    section.add "Version", valid_607927
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607928 = header.getOrDefault("X-Amz-Signature")
  valid_607928 = validateParameter(valid_607928, JString, required = false,
                                 default = nil)
  if valid_607928 != nil:
    section.add "X-Amz-Signature", valid_607928
  var valid_607929 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607929 = validateParameter(valid_607929, JString, required = false,
                                 default = nil)
  if valid_607929 != nil:
    section.add "X-Amz-Content-Sha256", valid_607929
  var valid_607930 = header.getOrDefault("X-Amz-Date")
  valid_607930 = validateParameter(valid_607930, JString, required = false,
                                 default = nil)
  if valid_607930 != nil:
    section.add "X-Amz-Date", valid_607930
  var valid_607931 = header.getOrDefault("X-Amz-Credential")
  valid_607931 = validateParameter(valid_607931, JString, required = false,
                                 default = nil)
  if valid_607931 != nil:
    section.add "X-Amz-Credential", valid_607931
  var valid_607932 = header.getOrDefault("X-Amz-Security-Token")
  valid_607932 = validateParameter(valid_607932, JString, required = false,
                                 default = nil)
  if valid_607932 != nil:
    section.add "X-Amz-Security-Token", valid_607932
  var valid_607933 = header.getOrDefault("X-Amz-Algorithm")
  valid_607933 = validateParameter(valid_607933, JString, required = false,
                                 default = nil)
  if valid_607933 != nil:
    section.add "X-Amz-Algorithm", valid_607933
  var valid_607934 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607934 = validateParameter(valid_607934, JString, required = false,
                                 default = nil)
  if valid_607934 != nil:
    section.add "X-Amz-SignedHeaders", valid_607934
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  section = newJObject()
  var valid_607935 = formData.getOrDefault("CacheNodeCount")
  valid_607935 = validateParameter(valid_607935, JInt, required = false, default = nil)
  if valid_607935 != nil:
    section.add "CacheNodeCount", valid_607935
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_607936 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_607936 = validateParameter(valid_607936, JString, required = true,
                                 default = nil)
  if valid_607936 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_607936
  var valid_607937 = formData.getOrDefault("ReservedCacheNodeId")
  valid_607937 = validateParameter(valid_607937, JString, required = false,
                                 default = nil)
  if valid_607937 != nil:
    section.add "ReservedCacheNodeId", valid_607937
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607938: Call_PostPurchaseReservedCacheNodesOffering_607923;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_607938.validator(path, query, header, formData, body)
  let scheme = call_607938.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607938.url(scheme.get, call_607938.host, call_607938.base,
                         call_607938.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607938, url, valid)

proc call*(call_607939: Call_PostPurchaseReservedCacheNodesOffering_607923;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          Version: string = "2015-02-02"; ReservedCacheNodeId: string = ""): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  var query_607940 = newJObject()
  var formData_607941 = newJObject()
  add(formData_607941, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_607940, "Action", newJString(Action))
  add(query_607940, "Version", newJString(Version))
  add(formData_607941, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_607941, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  result = call_607939.call(nil, query_607940, nil, formData_607941, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_607923(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_607924, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_607925,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_607905 = ref object of OpenApiRestCall_605589
proc url_GetPurchaseReservedCacheNodesOffering_607907(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedCacheNodesOffering_607906(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: JString (required)
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_607908 = query.getOrDefault("CacheNodeCount")
  valid_607908 = validateParameter(valid_607908, JInt, required = false, default = nil)
  if valid_607908 != nil:
    section.add "CacheNodeCount", valid_607908
  var valid_607909 = query.getOrDefault("Action")
  valid_607909 = validateParameter(valid_607909, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_607909 != nil:
    section.add "Action", valid_607909
  var valid_607910 = query.getOrDefault("ReservedCacheNodeId")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "ReservedCacheNodeId", valid_607910
  var valid_607911 = query.getOrDefault("Version")
  valid_607911 = validateParameter(valid_607911, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607911 != nil:
    section.add "Version", valid_607911
  var valid_607912 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_607912 = validateParameter(valid_607912, JString, required = true,
                                 default = nil)
  if valid_607912 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_607912
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607913 = header.getOrDefault("X-Amz-Signature")
  valid_607913 = validateParameter(valid_607913, JString, required = false,
                                 default = nil)
  if valid_607913 != nil:
    section.add "X-Amz-Signature", valid_607913
  var valid_607914 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607914 = validateParameter(valid_607914, JString, required = false,
                                 default = nil)
  if valid_607914 != nil:
    section.add "X-Amz-Content-Sha256", valid_607914
  var valid_607915 = header.getOrDefault("X-Amz-Date")
  valid_607915 = validateParameter(valid_607915, JString, required = false,
                                 default = nil)
  if valid_607915 != nil:
    section.add "X-Amz-Date", valid_607915
  var valid_607916 = header.getOrDefault("X-Amz-Credential")
  valid_607916 = validateParameter(valid_607916, JString, required = false,
                                 default = nil)
  if valid_607916 != nil:
    section.add "X-Amz-Credential", valid_607916
  var valid_607917 = header.getOrDefault("X-Amz-Security-Token")
  valid_607917 = validateParameter(valid_607917, JString, required = false,
                                 default = nil)
  if valid_607917 != nil:
    section.add "X-Amz-Security-Token", valid_607917
  var valid_607918 = header.getOrDefault("X-Amz-Algorithm")
  valid_607918 = validateParameter(valid_607918, JString, required = false,
                                 default = nil)
  if valid_607918 != nil:
    section.add "X-Amz-Algorithm", valid_607918
  var valid_607919 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607919 = validateParameter(valid_607919, JString, required = false,
                                 default = nil)
  if valid_607919 != nil:
    section.add "X-Amz-SignedHeaders", valid_607919
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607920: Call_GetPurchaseReservedCacheNodesOffering_607905;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_607920.validator(path, query, header, formData, body)
  let scheme = call_607920.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607920.url(scheme.get, call_607920.host, call_607920.base,
                         call_607920.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607920, url, valid)

proc call*(call_607921: Call_GetPurchaseReservedCacheNodesOffering_607905;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Version: string (required)
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  var query_607922 = newJObject()
  add(query_607922, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_607922, "Action", newJString(Action))
  add(query_607922, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_607922, "Version", newJString(Version))
  add(query_607922, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  result = call_607921.call(nil, query_607922, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_607905(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_607906, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_607907,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_607959 = ref object of OpenApiRestCall_605589
proc url_PostRebootCacheCluster_607961(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootCacheCluster_607960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607962 = query.getOrDefault("Action")
  valid_607962 = validateParameter(valid_607962, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_607962 != nil:
    section.add "Action", valid_607962
  var valid_607963 = query.getOrDefault("Version")
  valid_607963 = validateParameter(valid_607963, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607963 != nil:
    section.add "Version", valid_607963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607964 = header.getOrDefault("X-Amz-Signature")
  valid_607964 = validateParameter(valid_607964, JString, required = false,
                                 default = nil)
  if valid_607964 != nil:
    section.add "X-Amz-Signature", valid_607964
  var valid_607965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607965 = validateParameter(valid_607965, JString, required = false,
                                 default = nil)
  if valid_607965 != nil:
    section.add "X-Amz-Content-Sha256", valid_607965
  var valid_607966 = header.getOrDefault("X-Amz-Date")
  valid_607966 = validateParameter(valid_607966, JString, required = false,
                                 default = nil)
  if valid_607966 != nil:
    section.add "X-Amz-Date", valid_607966
  var valid_607967 = header.getOrDefault("X-Amz-Credential")
  valid_607967 = validateParameter(valid_607967, JString, required = false,
                                 default = nil)
  if valid_607967 != nil:
    section.add "X-Amz-Credential", valid_607967
  var valid_607968 = header.getOrDefault("X-Amz-Security-Token")
  valid_607968 = validateParameter(valid_607968, JString, required = false,
                                 default = nil)
  if valid_607968 != nil:
    section.add "X-Amz-Security-Token", valid_607968
  var valid_607969 = header.getOrDefault("X-Amz-Algorithm")
  valid_607969 = validateParameter(valid_607969, JString, required = false,
                                 default = nil)
  if valid_607969 != nil:
    section.add "X-Amz-Algorithm", valid_607969
  var valid_607970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607970 = validateParameter(valid_607970, JString, required = false,
                                 default = nil)
  if valid_607970 != nil:
    section.add "X-Amz-SignedHeaders", valid_607970
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_607971 = formData.getOrDefault("CacheClusterId")
  valid_607971 = validateParameter(valid_607971, JString, required = true,
                                 default = nil)
  if valid_607971 != nil:
    section.add "CacheClusterId", valid_607971
  var valid_607972 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_607972 = validateParameter(valid_607972, JArray, required = true, default = nil)
  if valid_607972 != nil:
    section.add "CacheNodeIdsToReboot", valid_607972
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607973: Call_PostRebootCacheCluster_607959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_607973.validator(path, query, header, formData, body)
  let scheme = call_607973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607973.url(scheme.get, call_607973.host, call_607973.base,
                         call_607973.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607973, url, valid)

proc call*(call_607974: Call_PostRebootCacheCluster_607959; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  var query_607975 = newJObject()
  var formData_607976 = newJObject()
  add(formData_607976, "CacheClusterId", newJString(CacheClusterId))
  add(query_607975, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_607976.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_607975, "Version", newJString(Version))
  result = call_607974.call(nil, query_607975, nil, formData_607976, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_607959(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_607960, base: "/",
    url: url_PostRebootCacheCluster_607961, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_607942 = ref object of OpenApiRestCall_605589
proc url_GetRebootCacheCluster_607944(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootCacheCluster_607943(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_607945 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_607945 = validateParameter(valid_607945, JArray, required = true, default = nil)
  if valid_607945 != nil:
    section.add "CacheNodeIdsToReboot", valid_607945
  var valid_607946 = query.getOrDefault("CacheClusterId")
  valid_607946 = validateParameter(valid_607946, JString, required = true,
                                 default = nil)
  if valid_607946 != nil:
    section.add "CacheClusterId", valid_607946
  var valid_607947 = query.getOrDefault("Action")
  valid_607947 = validateParameter(valid_607947, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_607947 != nil:
    section.add "Action", valid_607947
  var valid_607948 = query.getOrDefault("Version")
  valid_607948 = validateParameter(valid_607948, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607948 != nil:
    section.add "Version", valid_607948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607949 = header.getOrDefault("X-Amz-Signature")
  valid_607949 = validateParameter(valid_607949, JString, required = false,
                                 default = nil)
  if valid_607949 != nil:
    section.add "X-Amz-Signature", valid_607949
  var valid_607950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607950 = validateParameter(valid_607950, JString, required = false,
                                 default = nil)
  if valid_607950 != nil:
    section.add "X-Amz-Content-Sha256", valid_607950
  var valid_607951 = header.getOrDefault("X-Amz-Date")
  valid_607951 = validateParameter(valid_607951, JString, required = false,
                                 default = nil)
  if valid_607951 != nil:
    section.add "X-Amz-Date", valid_607951
  var valid_607952 = header.getOrDefault("X-Amz-Credential")
  valid_607952 = validateParameter(valid_607952, JString, required = false,
                                 default = nil)
  if valid_607952 != nil:
    section.add "X-Amz-Credential", valid_607952
  var valid_607953 = header.getOrDefault("X-Amz-Security-Token")
  valid_607953 = validateParameter(valid_607953, JString, required = false,
                                 default = nil)
  if valid_607953 != nil:
    section.add "X-Amz-Security-Token", valid_607953
  var valid_607954 = header.getOrDefault("X-Amz-Algorithm")
  valid_607954 = validateParameter(valid_607954, JString, required = false,
                                 default = nil)
  if valid_607954 != nil:
    section.add "X-Amz-Algorithm", valid_607954
  var valid_607955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607955 = validateParameter(valid_607955, JString, required = false,
                                 default = nil)
  if valid_607955 != nil:
    section.add "X-Amz-SignedHeaders", valid_607955
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607956: Call_GetRebootCacheCluster_607942; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_607956.validator(path, query, header, formData, body)
  let scheme = call_607956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607956.url(scheme.get, call_607956.host, call_607956.base,
                         call_607956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607956, url, valid)

proc call*(call_607957: Call_GetRebootCacheCluster_607942;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607958 = newJObject()
  if CacheNodeIdsToReboot != nil:
    query_607958.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_607958, "CacheClusterId", newJString(CacheClusterId))
  add(query_607958, "Action", newJString(Action))
  add(query_607958, "Version", newJString(Version))
  result = call_607957.call(nil, query_607958, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_607942(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_607943, base: "/",
    url: url_GetRebootCacheCluster_607944, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_607994 = ref object of OpenApiRestCall_605589
proc url_PostRemoveTagsFromResource_607996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_607995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607997 = query.getOrDefault("Action")
  valid_607997 = validateParameter(valid_607997, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_607997 != nil:
    section.add "Action", valid_607997
  var valid_607998 = query.getOrDefault("Version")
  valid_607998 = validateParameter(valid_607998, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607998 != nil:
    section.add "Version", valid_607998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607999 = header.getOrDefault("X-Amz-Signature")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-Signature", valid_607999
  var valid_608000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608000 = validateParameter(valid_608000, JString, required = false,
                                 default = nil)
  if valid_608000 != nil:
    section.add "X-Amz-Content-Sha256", valid_608000
  var valid_608001 = header.getOrDefault("X-Amz-Date")
  valid_608001 = validateParameter(valid_608001, JString, required = false,
                                 default = nil)
  if valid_608001 != nil:
    section.add "X-Amz-Date", valid_608001
  var valid_608002 = header.getOrDefault("X-Amz-Credential")
  valid_608002 = validateParameter(valid_608002, JString, required = false,
                                 default = nil)
  if valid_608002 != nil:
    section.add "X-Amz-Credential", valid_608002
  var valid_608003 = header.getOrDefault("X-Amz-Security-Token")
  valid_608003 = validateParameter(valid_608003, JString, required = false,
                                 default = nil)
  if valid_608003 != nil:
    section.add "X-Amz-Security-Token", valid_608003
  var valid_608004 = header.getOrDefault("X-Amz-Algorithm")
  valid_608004 = validateParameter(valid_608004, JString, required = false,
                                 default = nil)
  if valid_608004 != nil:
    section.add "X-Amz-Algorithm", valid_608004
  var valid_608005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608005 = validateParameter(valid_608005, JString, required = false,
                                 default = nil)
  if valid_608005 != nil:
    section.add "X-Amz-SignedHeaders", valid_608005
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_608006 = formData.getOrDefault("TagKeys")
  valid_608006 = validateParameter(valid_608006, JArray, required = true, default = nil)
  if valid_608006 != nil:
    section.add "TagKeys", valid_608006
  var valid_608007 = formData.getOrDefault("ResourceName")
  valid_608007 = validateParameter(valid_608007, JString, required = true,
                                 default = nil)
  if valid_608007 != nil:
    section.add "ResourceName", valid_608007
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608008: Call_PostRemoveTagsFromResource_607994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_608008.validator(path, query, header, formData, body)
  let scheme = call_608008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608008.url(scheme.get, call_608008.host, call_608008.base,
                         call_608008.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608008, url, valid)

proc call*(call_608009: Call_PostRemoveTagsFromResource_607994; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  var query_608010 = newJObject()
  var formData_608011 = newJObject()
  if TagKeys != nil:
    formData_608011.add "TagKeys", TagKeys
  add(query_608010, "Action", newJString(Action))
  add(query_608010, "Version", newJString(Version))
  add(formData_608011, "ResourceName", newJString(ResourceName))
  result = call_608009.call(nil, query_608010, nil, formData_608011, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_607994(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_607995, base: "/",
    url: url_PostRemoveTagsFromResource_607996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_607977 = ref object of OpenApiRestCall_605589
proc url_GetRemoveTagsFromResource_607979(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_607978(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_607980 = query.getOrDefault("ResourceName")
  valid_607980 = validateParameter(valid_607980, JString, required = true,
                                 default = nil)
  if valid_607980 != nil:
    section.add "ResourceName", valid_607980
  var valid_607981 = query.getOrDefault("TagKeys")
  valid_607981 = validateParameter(valid_607981, JArray, required = true, default = nil)
  if valid_607981 != nil:
    section.add "TagKeys", valid_607981
  var valid_607982 = query.getOrDefault("Action")
  valid_607982 = validateParameter(valid_607982, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_607982 != nil:
    section.add "Action", valid_607982
  var valid_607983 = query.getOrDefault("Version")
  valid_607983 = validateParameter(valid_607983, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_607983 != nil:
    section.add "Version", valid_607983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607984 = header.getOrDefault("X-Amz-Signature")
  valid_607984 = validateParameter(valid_607984, JString, required = false,
                                 default = nil)
  if valid_607984 != nil:
    section.add "X-Amz-Signature", valid_607984
  var valid_607985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607985 = validateParameter(valid_607985, JString, required = false,
                                 default = nil)
  if valid_607985 != nil:
    section.add "X-Amz-Content-Sha256", valid_607985
  var valid_607986 = header.getOrDefault("X-Amz-Date")
  valid_607986 = validateParameter(valid_607986, JString, required = false,
                                 default = nil)
  if valid_607986 != nil:
    section.add "X-Amz-Date", valid_607986
  var valid_607987 = header.getOrDefault("X-Amz-Credential")
  valid_607987 = validateParameter(valid_607987, JString, required = false,
                                 default = nil)
  if valid_607987 != nil:
    section.add "X-Amz-Credential", valid_607987
  var valid_607988 = header.getOrDefault("X-Amz-Security-Token")
  valid_607988 = validateParameter(valid_607988, JString, required = false,
                                 default = nil)
  if valid_607988 != nil:
    section.add "X-Amz-Security-Token", valid_607988
  var valid_607989 = header.getOrDefault("X-Amz-Algorithm")
  valid_607989 = validateParameter(valid_607989, JString, required = false,
                                 default = nil)
  if valid_607989 != nil:
    section.add "X-Amz-Algorithm", valid_607989
  var valid_607990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607990 = validateParameter(valid_607990, JString, required = false,
                                 default = nil)
  if valid_607990 != nil:
    section.add "X-Amz-SignedHeaders", valid_607990
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607991: Call_GetRemoveTagsFromResource_607977; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_607991.validator(path, query, header, formData, body)
  let scheme = call_607991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607991.url(scheme.get, call_607991.host, call_607991.base,
                         call_607991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607991, url, valid)

proc call*(call_607992: Call_GetRemoveTagsFromResource_607977;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607993 = newJObject()
  add(query_607993, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_607993.add "TagKeys", TagKeys
  add(query_607993, "Action", newJString(Action))
  add(query_607993, "Version", newJString(Version))
  result = call_607992.call(nil, query_607993, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_607977(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_607978, base: "/",
    url: url_GetRemoveTagsFromResource_607979,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_608030 = ref object of OpenApiRestCall_605589
proc url_PostResetCacheParameterGroup_608032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetCacheParameterGroup_608031(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608033 = query.getOrDefault("Action")
  valid_608033 = validateParameter(valid_608033, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_608033 != nil:
    section.add "Action", valid_608033
  var valid_608034 = query.getOrDefault("Version")
  valid_608034 = validateParameter(valid_608034, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608034 != nil:
    section.add "Version", valid_608034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608035 = header.getOrDefault("X-Amz-Signature")
  valid_608035 = validateParameter(valid_608035, JString, required = false,
                                 default = nil)
  if valid_608035 != nil:
    section.add "X-Amz-Signature", valid_608035
  var valid_608036 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608036 = validateParameter(valid_608036, JString, required = false,
                                 default = nil)
  if valid_608036 != nil:
    section.add "X-Amz-Content-Sha256", valid_608036
  var valid_608037 = header.getOrDefault("X-Amz-Date")
  valid_608037 = validateParameter(valid_608037, JString, required = false,
                                 default = nil)
  if valid_608037 != nil:
    section.add "X-Amz-Date", valid_608037
  var valid_608038 = header.getOrDefault("X-Amz-Credential")
  valid_608038 = validateParameter(valid_608038, JString, required = false,
                                 default = nil)
  if valid_608038 != nil:
    section.add "X-Amz-Credential", valid_608038
  var valid_608039 = header.getOrDefault("X-Amz-Security-Token")
  valid_608039 = validateParameter(valid_608039, JString, required = false,
                                 default = nil)
  if valid_608039 != nil:
    section.add "X-Amz-Security-Token", valid_608039
  var valid_608040 = header.getOrDefault("X-Amz-Algorithm")
  valid_608040 = validateParameter(valid_608040, JString, required = false,
                                 default = nil)
  if valid_608040 != nil:
    section.add "X-Amz-Algorithm", valid_608040
  var valid_608041 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608041 = validateParameter(valid_608041, JString, required = false,
                                 default = nil)
  if valid_608041 != nil:
    section.add "X-Amz-SignedHeaders", valid_608041
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  var valid_608042 = formData.getOrDefault("ResetAllParameters")
  valid_608042 = validateParameter(valid_608042, JBool, required = false, default = nil)
  if valid_608042 != nil:
    section.add "ResetAllParameters", valid_608042
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_608043 = formData.getOrDefault("CacheParameterGroupName")
  valid_608043 = validateParameter(valid_608043, JString, required = true,
                                 default = nil)
  if valid_608043 != nil:
    section.add "CacheParameterGroupName", valid_608043
  var valid_608044 = formData.getOrDefault("ParameterNameValues")
  valid_608044 = validateParameter(valid_608044, JArray, required = false,
                                 default = nil)
  if valid_608044 != nil:
    section.add "ParameterNameValues", valid_608044
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608045: Call_PostResetCacheParameterGroup_608030; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_608045.validator(path, query, header, formData, body)
  let scheme = call_608045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608045.url(scheme.get, call_608045.host, call_608045.base,
                         call_608045.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608045, url, valid)

proc call*(call_608046: Call_PostResetCacheParameterGroup_608030;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"; ParameterNameValues: JsonNode = nil): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  var query_608047 = newJObject()
  var formData_608048 = newJObject()
  add(formData_608048, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_608048, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_608047, "Action", newJString(Action))
  add(query_608047, "Version", newJString(Version))
  if ParameterNameValues != nil:
    formData_608048.add "ParameterNameValues", ParameterNameValues
  result = call_608046.call(nil, query_608047, nil, formData_608048, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_608030(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_608031, base: "/",
    url: url_PostResetCacheParameterGroup_608032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_608012 = ref object of OpenApiRestCall_605589
proc url_GetResetCacheParameterGroup_608014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetCacheParameterGroup_608013(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_608015 = query.getOrDefault("CacheParameterGroupName")
  valid_608015 = validateParameter(valid_608015, JString, required = true,
                                 default = nil)
  if valid_608015 != nil:
    section.add "CacheParameterGroupName", valid_608015
  var valid_608016 = query.getOrDefault("ResetAllParameters")
  valid_608016 = validateParameter(valid_608016, JBool, required = false, default = nil)
  if valid_608016 != nil:
    section.add "ResetAllParameters", valid_608016
  var valid_608017 = query.getOrDefault("ParameterNameValues")
  valid_608017 = validateParameter(valid_608017, JArray, required = false,
                                 default = nil)
  if valid_608017 != nil:
    section.add "ParameterNameValues", valid_608017
  var valid_608018 = query.getOrDefault("Action")
  valid_608018 = validateParameter(valid_608018, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_608018 != nil:
    section.add "Action", valid_608018
  var valid_608019 = query.getOrDefault("Version")
  valid_608019 = validateParameter(valid_608019, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608019 != nil:
    section.add "Version", valid_608019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608020 = header.getOrDefault("X-Amz-Signature")
  valid_608020 = validateParameter(valid_608020, JString, required = false,
                                 default = nil)
  if valid_608020 != nil:
    section.add "X-Amz-Signature", valid_608020
  var valid_608021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608021 = validateParameter(valid_608021, JString, required = false,
                                 default = nil)
  if valid_608021 != nil:
    section.add "X-Amz-Content-Sha256", valid_608021
  var valid_608022 = header.getOrDefault("X-Amz-Date")
  valid_608022 = validateParameter(valid_608022, JString, required = false,
                                 default = nil)
  if valid_608022 != nil:
    section.add "X-Amz-Date", valid_608022
  var valid_608023 = header.getOrDefault("X-Amz-Credential")
  valid_608023 = validateParameter(valid_608023, JString, required = false,
                                 default = nil)
  if valid_608023 != nil:
    section.add "X-Amz-Credential", valid_608023
  var valid_608024 = header.getOrDefault("X-Amz-Security-Token")
  valid_608024 = validateParameter(valid_608024, JString, required = false,
                                 default = nil)
  if valid_608024 != nil:
    section.add "X-Amz-Security-Token", valid_608024
  var valid_608025 = header.getOrDefault("X-Amz-Algorithm")
  valid_608025 = validateParameter(valid_608025, JString, required = false,
                                 default = nil)
  if valid_608025 != nil:
    section.add "X-Amz-Algorithm", valid_608025
  var valid_608026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608026 = validateParameter(valid_608026, JString, required = false,
                                 default = nil)
  if valid_608026 != nil:
    section.add "X-Amz-SignedHeaders", valid_608026
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608027: Call_GetResetCacheParameterGroup_608012; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_608027.validator(path, query, header, formData, body)
  let scheme = call_608027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608027.url(scheme.get, call_608027.host, call_608027.base,
                         call_608027.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608027, url, valid)

proc call*(call_608028: Call_GetResetCacheParameterGroup_608012;
          CacheParameterGroupName: string; ResetAllParameters: bool = false;
          ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608029 = newJObject()
  add(query_608029, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_608029, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    query_608029.add "ParameterNameValues", ParameterNameValues
  add(query_608029, "Action", newJString(Action))
  add(query_608029, "Version", newJString(Version))
  result = call_608028.call(nil, query_608029, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_608012(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_608013, base: "/",
    url: url_GetResetCacheParameterGroup_608014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_608067 = ref object of OpenApiRestCall_605589
proc url_PostRevokeCacheSecurityGroupIngress_608069(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeCacheSecurityGroupIngress_608068(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608070 = query.getOrDefault("Action")
  valid_608070 = validateParameter(valid_608070, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_608070 != nil:
    section.add "Action", valid_608070
  var valid_608071 = query.getOrDefault("Version")
  valid_608071 = validateParameter(valid_608071, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608071 != nil:
    section.add "Version", valid_608071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608072 = header.getOrDefault("X-Amz-Signature")
  valid_608072 = validateParameter(valid_608072, JString, required = false,
                                 default = nil)
  if valid_608072 != nil:
    section.add "X-Amz-Signature", valid_608072
  var valid_608073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608073 = validateParameter(valid_608073, JString, required = false,
                                 default = nil)
  if valid_608073 != nil:
    section.add "X-Amz-Content-Sha256", valid_608073
  var valid_608074 = header.getOrDefault("X-Amz-Date")
  valid_608074 = validateParameter(valid_608074, JString, required = false,
                                 default = nil)
  if valid_608074 != nil:
    section.add "X-Amz-Date", valid_608074
  var valid_608075 = header.getOrDefault("X-Amz-Credential")
  valid_608075 = validateParameter(valid_608075, JString, required = false,
                                 default = nil)
  if valid_608075 != nil:
    section.add "X-Amz-Credential", valid_608075
  var valid_608076 = header.getOrDefault("X-Amz-Security-Token")
  valid_608076 = validateParameter(valid_608076, JString, required = false,
                                 default = nil)
  if valid_608076 != nil:
    section.add "X-Amz-Security-Token", valid_608076
  var valid_608077 = header.getOrDefault("X-Amz-Algorithm")
  valid_608077 = validateParameter(valid_608077, JString, required = false,
                                 default = nil)
  if valid_608077 != nil:
    section.add "X-Amz-Algorithm", valid_608077
  var valid_608078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608078 = validateParameter(valid_608078, JString, required = false,
                                 default = nil)
  if valid_608078 != nil:
    section.add "X-Amz-SignedHeaders", valid_608078
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_608079 = formData.getOrDefault("CacheSecurityGroupName")
  valid_608079 = validateParameter(valid_608079, JString, required = true,
                                 default = nil)
  if valid_608079 != nil:
    section.add "CacheSecurityGroupName", valid_608079
  var valid_608080 = formData.getOrDefault("EC2SecurityGroupName")
  valid_608080 = validateParameter(valid_608080, JString, required = true,
                                 default = nil)
  if valid_608080 != nil:
    section.add "EC2SecurityGroupName", valid_608080
  var valid_608081 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_608081 = validateParameter(valid_608081, JString, required = true,
                                 default = nil)
  if valid_608081 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_608081
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608082: Call_PostRevokeCacheSecurityGroupIngress_608067;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_608082.validator(path, query, header, formData, body)
  let scheme = call_608082.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608082.url(scheme.get, call_608082.host, call_608082.base,
                         call_608082.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608082, url, valid)

proc call*(call_608083: Call_PostRevokeCacheSecurityGroupIngress_608067;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608084 = newJObject()
  var formData_608085 = newJObject()
  add(formData_608085, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_608085, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_608085, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_608084, "Action", newJString(Action))
  add(query_608084, "Version", newJString(Version))
  result = call_608083.call(nil, query_608084, nil, formData_608085, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_608067(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_608068, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_608069,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_608049 = ref object of OpenApiRestCall_605589
proc url_GetRevokeCacheSecurityGroupIngress_608051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeCacheSecurityGroupIngress_608050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `EC2SecurityGroupName` field"
  var valid_608052 = query.getOrDefault("EC2SecurityGroupName")
  valid_608052 = validateParameter(valid_608052, JString, required = true,
                                 default = nil)
  if valid_608052 != nil:
    section.add "EC2SecurityGroupName", valid_608052
  var valid_608053 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_608053 = validateParameter(valid_608053, JString, required = true,
                                 default = nil)
  if valid_608053 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_608053
  var valid_608054 = query.getOrDefault("Action")
  valid_608054 = validateParameter(valid_608054, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_608054 != nil:
    section.add "Action", valid_608054
  var valid_608055 = query.getOrDefault("CacheSecurityGroupName")
  valid_608055 = validateParameter(valid_608055, JString, required = true,
                                 default = nil)
  if valid_608055 != nil:
    section.add "CacheSecurityGroupName", valid_608055
  var valid_608056 = query.getOrDefault("Version")
  valid_608056 = validateParameter(valid_608056, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608056 != nil:
    section.add "Version", valid_608056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608057 = header.getOrDefault("X-Amz-Signature")
  valid_608057 = validateParameter(valid_608057, JString, required = false,
                                 default = nil)
  if valid_608057 != nil:
    section.add "X-Amz-Signature", valid_608057
  var valid_608058 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608058 = validateParameter(valid_608058, JString, required = false,
                                 default = nil)
  if valid_608058 != nil:
    section.add "X-Amz-Content-Sha256", valid_608058
  var valid_608059 = header.getOrDefault("X-Amz-Date")
  valid_608059 = validateParameter(valid_608059, JString, required = false,
                                 default = nil)
  if valid_608059 != nil:
    section.add "X-Amz-Date", valid_608059
  var valid_608060 = header.getOrDefault("X-Amz-Credential")
  valid_608060 = validateParameter(valid_608060, JString, required = false,
                                 default = nil)
  if valid_608060 != nil:
    section.add "X-Amz-Credential", valid_608060
  var valid_608061 = header.getOrDefault("X-Amz-Security-Token")
  valid_608061 = validateParameter(valid_608061, JString, required = false,
                                 default = nil)
  if valid_608061 != nil:
    section.add "X-Amz-Security-Token", valid_608061
  var valid_608062 = header.getOrDefault("X-Amz-Algorithm")
  valid_608062 = validateParameter(valid_608062, JString, required = false,
                                 default = nil)
  if valid_608062 != nil:
    section.add "X-Amz-Algorithm", valid_608062
  var valid_608063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608063 = validateParameter(valid_608063, JString, required = false,
                                 default = nil)
  if valid_608063 != nil:
    section.add "X-Amz-SignedHeaders", valid_608063
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608064: Call_GetRevokeCacheSecurityGroupIngress_608049;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_608064.validator(path, query, header, formData, body)
  let scheme = call_608064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608064.url(scheme.get, call_608064.host, call_608064.base,
                         call_608064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608064, url, valid)

proc call*(call_608065: Call_GetRevokeCacheSecurityGroupIngress_608049;
          EC2SecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          CacheSecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Version: string (required)
  var query_608066 = newJObject()
  add(query_608066, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_608066, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_608066, "Action", newJString(Action))
  add(query_608066, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_608066, "Version", newJString(Version))
  result = call_608065.call(nil, query_608066, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_608049(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_608050, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_608051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartMigration_608103 = ref object of OpenApiRestCall_605589
proc url_PostStartMigration_608105(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartMigration_608104(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608106 = query.getOrDefault("Action")
  valid_608106 = validateParameter(valid_608106, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_608106 != nil:
    section.add "Action", valid_608106
  var valid_608107 = query.getOrDefault("Version")
  valid_608107 = validateParameter(valid_608107, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608107 != nil:
    section.add "Version", valid_608107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608108 = header.getOrDefault("X-Amz-Signature")
  valid_608108 = validateParameter(valid_608108, JString, required = false,
                                 default = nil)
  if valid_608108 != nil:
    section.add "X-Amz-Signature", valid_608108
  var valid_608109 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608109 = validateParameter(valid_608109, JString, required = false,
                                 default = nil)
  if valid_608109 != nil:
    section.add "X-Amz-Content-Sha256", valid_608109
  var valid_608110 = header.getOrDefault("X-Amz-Date")
  valid_608110 = validateParameter(valid_608110, JString, required = false,
                                 default = nil)
  if valid_608110 != nil:
    section.add "X-Amz-Date", valid_608110
  var valid_608111 = header.getOrDefault("X-Amz-Credential")
  valid_608111 = validateParameter(valid_608111, JString, required = false,
                                 default = nil)
  if valid_608111 != nil:
    section.add "X-Amz-Credential", valid_608111
  var valid_608112 = header.getOrDefault("X-Amz-Security-Token")
  valid_608112 = validateParameter(valid_608112, JString, required = false,
                                 default = nil)
  if valid_608112 != nil:
    section.add "X-Amz-Security-Token", valid_608112
  var valid_608113 = header.getOrDefault("X-Amz-Algorithm")
  valid_608113 = validateParameter(valid_608113, JString, required = false,
                                 default = nil)
  if valid_608113 != nil:
    section.add "X-Amz-Algorithm", valid_608113
  var valid_608114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608114 = validateParameter(valid_608114, JString, required = false,
                                 default = nil)
  if valid_608114 != nil:
    section.add "X-Amz-SignedHeaders", valid_608114
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_608115 = formData.getOrDefault("CustomerNodeEndpointList")
  valid_608115 = validateParameter(valid_608115, JArray, required = true, default = nil)
  if valid_608115 != nil:
    section.add "CustomerNodeEndpointList", valid_608115
  var valid_608116 = formData.getOrDefault("ReplicationGroupId")
  valid_608116 = validateParameter(valid_608116, JString, required = true,
                                 default = nil)
  if valid_608116 != nil:
    section.add "ReplicationGroupId", valid_608116
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608117: Call_PostStartMigration_608103; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_608117.validator(path, query, header, formData, body)
  let scheme = call_608117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608117.url(scheme.get, call_608117.host, call_608117.base,
                         call_608117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608117, url, valid)

proc call*(call_608118: Call_PostStartMigration_608103;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## postStartMigration
  ## Start the migration of data.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  var query_608119 = newJObject()
  var formData_608120 = newJObject()
  add(query_608119, "Action", newJString(Action))
  add(query_608119, "Version", newJString(Version))
  if CustomerNodeEndpointList != nil:
    formData_608120.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(formData_608120, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_608118.call(nil, query_608119, nil, formData_608120, nil)

var postStartMigration* = Call_PostStartMigration_608103(
    name: "postStartMigration", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=StartMigration",
    validator: validate_PostStartMigration_608104, base: "/",
    url: url_PostStartMigration_608105, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartMigration_608086 = ref object of OpenApiRestCall_605589
proc url_GetStartMigration_608088(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartMigration_608087(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Start the migration of data.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomerNodeEndpointList` field"
  var valid_608089 = query.getOrDefault("CustomerNodeEndpointList")
  valid_608089 = validateParameter(valid_608089, JArray, required = true, default = nil)
  if valid_608089 != nil:
    section.add "CustomerNodeEndpointList", valid_608089
  var valid_608090 = query.getOrDefault("Action")
  valid_608090 = validateParameter(valid_608090, JString, required = true,
                                 default = newJString("StartMigration"))
  if valid_608090 != nil:
    section.add "Action", valid_608090
  var valid_608091 = query.getOrDefault("ReplicationGroupId")
  valid_608091 = validateParameter(valid_608091, JString, required = true,
                                 default = nil)
  if valid_608091 != nil:
    section.add "ReplicationGroupId", valid_608091
  var valid_608092 = query.getOrDefault("Version")
  valid_608092 = validateParameter(valid_608092, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608092 != nil:
    section.add "Version", valid_608092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608093 = header.getOrDefault("X-Amz-Signature")
  valid_608093 = validateParameter(valid_608093, JString, required = false,
                                 default = nil)
  if valid_608093 != nil:
    section.add "X-Amz-Signature", valid_608093
  var valid_608094 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608094 = validateParameter(valid_608094, JString, required = false,
                                 default = nil)
  if valid_608094 != nil:
    section.add "X-Amz-Content-Sha256", valid_608094
  var valid_608095 = header.getOrDefault("X-Amz-Date")
  valid_608095 = validateParameter(valid_608095, JString, required = false,
                                 default = nil)
  if valid_608095 != nil:
    section.add "X-Amz-Date", valid_608095
  var valid_608096 = header.getOrDefault("X-Amz-Credential")
  valid_608096 = validateParameter(valid_608096, JString, required = false,
                                 default = nil)
  if valid_608096 != nil:
    section.add "X-Amz-Credential", valid_608096
  var valid_608097 = header.getOrDefault("X-Amz-Security-Token")
  valid_608097 = validateParameter(valid_608097, JString, required = false,
                                 default = nil)
  if valid_608097 != nil:
    section.add "X-Amz-Security-Token", valid_608097
  var valid_608098 = header.getOrDefault("X-Amz-Algorithm")
  valid_608098 = validateParameter(valid_608098, JString, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "X-Amz-Algorithm", valid_608098
  var valid_608099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608099 = validateParameter(valid_608099, JString, required = false,
                                 default = nil)
  if valid_608099 != nil:
    section.add "X-Amz-SignedHeaders", valid_608099
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608100: Call_GetStartMigration_608086; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Start the migration of data.
  ## 
  let valid = call_608100.validator(path, query, header, formData, body)
  let scheme = call_608100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608100.url(scheme.get, call_608100.host, call_608100.base,
                         call_608100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608100, url, valid)

proc call*(call_608101: Call_GetStartMigration_608086;
          CustomerNodeEndpointList: JsonNode; ReplicationGroupId: string;
          Action: string = "StartMigration"; Version: string = "2015-02-02"): Recallable =
  ## getStartMigration
  ## Start the migration of data.
  ##   CustomerNodeEndpointList: JArray (required)
  ##                           : List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The ID of the replication group to which data should be migrated.
  ##   Version: string (required)
  var query_608102 = newJObject()
  if CustomerNodeEndpointList != nil:
    query_608102.add "CustomerNodeEndpointList", CustomerNodeEndpointList
  add(query_608102, "Action", newJString(Action))
  add(query_608102, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_608102, "Version", newJString(Version))
  result = call_608101.call(nil, query_608102, nil, nil, nil)

var getStartMigration* = Call_GetStartMigration_608086(name: "getStartMigration",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=StartMigration", validator: validate_GetStartMigration_608087,
    base: "/", url: url_GetStartMigration_608088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_608138 = ref object of OpenApiRestCall_605589
proc url_PostTestFailover_608140(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostTestFailover_608139(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608141 = query.getOrDefault("Action")
  valid_608141 = validateParameter(valid_608141, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_608141 != nil:
    section.add "Action", valid_608141
  var valid_608142 = query.getOrDefault("Version")
  valid_608142 = validateParameter(valid_608142, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608142 != nil:
    section.add "Version", valid_608142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608143 = header.getOrDefault("X-Amz-Signature")
  valid_608143 = validateParameter(valid_608143, JString, required = false,
                                 default = nil)
  if valid_608143 != nil:
    section.add "X-Amz-Signature", valid_608143
  var valid_608144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608144 = validateParameter(valid_608144, JString, required = false,
                                 default = nil)
  if valid_608144 != nil:
    section.add "X-Amz-Content-Sha256", valid_608144
  var valid_608145 = header.getOrDefault("X-Amz-Date")
  valid_608145 = validateParameter(valid_608145, JString, required = false,
                                 default = nil)
  if valid_608145 != nil:
    section.add "X-Amz-Date", valid_608145
  var valid_608146 = header.getOrDefault("X-Amz-Credential")
  valid_608146 = validateParameter(valid_608146, JString, required = false,
                                 default = nil)
  if valid_608146 != nil:
    section.add "X-Amz-Credential", valid_608146
  var valid_608147 = header.getOrDefault("X-Amz-Security-Token")
  valid_608147 = validateParameter(valid_608147, JString, required = false,
                                 default = nil)
  if valid_608147 != nil:
    section.add "X-Amz-Security-Token", valid_608147
  var valid_608148 = header.getOrDefault("X-Amz-Algorithm")
  valid_608148 = validateParameter(valid_608148, JString, required = false,
                                 default = nil)
  if valid_608148 != nil:
    section.add "X-Amz-Algorithm", valid_608148
  var valid_608149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608149 = validateParameter(valid_608149, JString, required = false,
                                 default = nil)
  if valid_608149 != nil:
    section.add "X-Amz-SignedHeaders", valid_608149
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_608150 = formData.getOrDefault("NodeGroupId")
  valid_608150 = validateParameter(valid_608150, JString, required = true,
                                 default = nil)
  if valid_608150 != nil:
    section.add "NodeGroupId", valid_608150
  var valid_608151 = formData.getOrDefault("ReplicationGroupId")
  valid_608151 = validateParameter(valid_608151, JString, required = true,
                                 default = nil)
  if valid_608151 != nil:
    section.add "ReplicationGroupId", valid_608151
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608152: Call_PostTestFailover_608138; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_608152.validator(path, query, header, formData, body)
  let scheme = call_608152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608152.url(scheme.get, call_608152.host, call_608152.base,
                         call_608152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608152, url, valid)

proc call*(call_608153: Call_PostTestFailover_608138; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  var query_608154 = newJObject()
  var formData_608155 = newJObject()
  add(formData_608155, "NodeGroupId", newJString(NodeGroupId))
  add(query_608154, "Action", newJString(Action))
  add(query_608154, "Version", newJString(Version))
  add(formData_608155, "ReplicationGroupId", newJString(ReplicationGroupId))
  result = call_608153.call(nil, query_608154, nil, formData_608155, nil)

var postTestFailover* = Call_PostTestFailover_608138(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_608139,
    base: "/", url: url_PostTestFailover_608140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_608121 = ref object of OpenApiRestCall_605589
proc url_GetTestFailover_608123(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetTestFailover_608122(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  section = newJObject()
  var valid_608124 = query.getOrDefault("Action")
  valid_608124 = validateParameter(valid_608124, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_608124 != nil:
    section.add "Action", valid_608124
  var valid_608125 = query.getOrDefault("ReplicationGroupId")
  valid_608125 = validateParameter(valid_608125, JString, required = true,
                                 default = nil)
  if valid_608125 != nil:
    section.add "ReplicationGroupId", valid_608125
  var valid_608126 = query.getOrDefault("Version")
  valid_608126 = validateParameter(valid_608126, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_608126 != nil:
    section.add "Version", valid_608126
  var valid_608127 = query.getOrDefault("NodeGroupId")
  valid_608127 = validateParameter(valid_608127, JString, required = true,
                                 default = nil)
  if valid_608127 != nil:
    section.add "NodeGroupId", valid_608127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608128 = header.getOrDefault("X-Amz-Signature")
  valid_608128 = validateParameter(valid_608128, JString, required = false,
                                 default = nil)
  if valid_608128 != nil:
    section.add "X-Amz-Signature", valid_608128
  var valid_608129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608129 = validateParameter(valid_608129, JString, required = false,
                                 default = nil)
  if valid_608129 != nil:
    section.add "X-Amz-Content-Sha256", valid_608129
  var valid_608130 = header.getOrDefault("X-Amz-Date")
  valid_608130 = validateParameter(valid_608130, JString, required = false,
                                 default = nil)
  if valid_608130 != nil:
    section.add "X-Amz-Date", valid_608130
  var valid_608131 = header.getOrDefault("X-Amz-Credential")
  valid_608131 = validateParameter(valid_608131, JString, required = false,
                                 default = nil)
  if valid_608131 != nil:
    section.add "X-Amz-Credential", valid_608131
  var valid_608132 = header.getOrDefault("X-Amz-Security-Token")
  valid_608132 = validateParameter(valid_608132, JString, required = false,
                                 default = nil)
  if valid_608132 != nil:
    section.add "X-Amz-Security-Token", valid_608132
  var valid_608133 = header.getOrDefault("X-Amz-Algorithm")
  valid_608133 = validateParameter(valid_608133, JString, required = false,
                                 default = nil)
  if valid_608133 != nil:
    section.add "X-Amz-Algorithm", valid_608133
  var valid_608134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608134 = validateParameter(valid_608134, JString, required = false,
                                 default = nil)
  if valid_608134 != nil:
    section.add "X-Amz-SignedHeaders", valid_608134
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608135: Call_GetTestFailover_608121; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_608135.validator(path, query, header, formData, body)
  let scheme = call_608135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608135.url(scheme.get, call_608135.host, call_608135.base,
                         call_608135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608135, url, valid)

proc call*(call_608136: Call_GetTestFailover_608121; ReplicationGroupId: string;
          NodeGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  var query_608137 = newJObject()
  add(query_608137, "Action", newJString(Action))
  add(query_608137, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_608137, "Version", newJString(Version))
  add(query_608137, "NodeGroupId", newJString(NodeGroupId))
  result = call_608136.call(nil, query_608137, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_608121(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_608122,
    base: "/", url: url_GetTestFailover_608123, schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
