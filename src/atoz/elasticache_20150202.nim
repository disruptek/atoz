
import
  json, options, hashes, tables, openapi/rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon ElastiCache
## version: 2015-02-02
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/elasticache/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode): string

  OpenApiRestCall_772597 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_772597](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_772597): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get())

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com", "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
                           "us-west-2": "elasticache.us-west-2.amazonaws.com",
                           "eu-west-2": "elasticache.eu-west-2.amazonaws.com", "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com", "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
                           "us-east-2": "elasticache.us-east-2.amazonaws.com",
                           "us-east-1": "elasticache.us-east-1.amazonaws.com", "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn", "ap-south-1": "elasticache.ap-south-1.amazonaws.com", "eu-north-1": "elasticache.eu-north-1.amazonaws.com", "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
                           "us-west-1": "elasticache.us-west-1.amazonaws.com", "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "elasticache.eu-west-3.amazonaws.com", "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
                           "eu-west-1": "elasticache.eu-west-1.amazonaws.com", "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com", "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com", "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "elasticache.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "elasticache.ap-southeast-1.amazonaws.com",
      "us-west-2": "elasticache.us-west-2.amazonaws.com",
      "eu-west-2": "elasticache.eu-west-2.amazonaws.com",
      "ap-northeast-3": "elasticache.ap-northeast-3.amazonaws.com",
      "eu-central-1": "elasticache.eu-central-1.amazonaws.com",
      "us-east-2": "elasticache.us-east-2.amazonaws.com",
      "us-east-1": "elasticache.us-east-1.amazonaws.com",
      "cn-northwest-1": "elasticache.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "elasticache.ap-south-1.amazonaws.com",
      "eu-north-1": "elasticache.eu-north-1.amazonaws.com",
      "ap-northeast-2": "elasticache.ap-northeast-2.amazonaws.com",
      "us-west-1": "elasticache.us-west-1.amazonaws.com",
      "us-gov-east-1": "elasticache.us-gov-east-1.amazonaws.com",
      "eu-west-3": "elasticache.eu-west-3.amazonaws.com",
      "cn-north-1": "elasticache.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "elasticache.sa-east-1.amazonaws.com",
      "eu-west-1": "elasticache.eu-west-1.amazonaws.com",
      "us-gov-west-1": "elasticache.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "elasticache.ap-southeast-2.amazonaws.com",
      "ca-central-1": "elasticache.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "elasticache"
method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.}
type
  Call_PostAddTagsToResource_773205 = ref object of OpenApiRestCall_772597
proc url_PostAddTagsToResource_773207(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAddTagsToResource_773206(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773208 = query.getOrDefault("Action")
  valid_773208 = validateParameter(valid_773208, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_773208 != nil:
    section.add "Action", valid_773208
  var valid_773209 = query.getOrDefault("Version")
  valid_773209 = validateParameter(valid_773209, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773209 != nil:
    section.add "Version", valid_773209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773210 = header.getOrDefault("X-Amz-Date")
  valid_773210 = validateParameter(valid_773210, JString, required = false,
                                 default = nil)
  if valid_773210 != nil:
    section.add "X-Amz-Date", valid_773210
  var valid_773211 = header.getOrDefault("X-Amz-Security-Token")
  valid_773211 = validateParameter(valid_773211, JString, required = false,
                                 default = nil)
  if valid_773211 != nil:
    section.add "X-Amz-Security-Token", valid_773211
  var valid_773212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773212 = validateParameter(valid_773212, JString, required = false,
                                 default = nil)
  if valid_773212 != nil:
    section.add "X-Amz-Content-Sha256", valid_773212
  var valid_773213 = header.getOrDefault("X-Amz-Algorithm")
  valid_773213 = validateParameter(valid_773213, JString, required = false,
                                 default = nil)
  if valid_773213 != nil:
    section.add "X-Amz-Algorithm", valid_773213
  var valid_773214 = header.getOrDefault("X-Amz-Signature")
  valid_773214 = validateParameter(valid_773214, JString, required = false,
                                 default = nil)
  if valid_773214 != nil:
    section.add "X-Amz-Signature", valid_773214
  var valid_773215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773215 = validateParameter(valid_773215, JString, required = false,
                                 default = nil)
  if valid_773215 != nil:
    section.add "X-Amz-SignedHeaders", valid_773215
  var valid_773216 = header.getOrDefault("X-Amz-Credential")
  valid_773216 = validateParameter(valid_773216, JString, required = false,
                                 default = nil)
  if valid_773216 != nil:
    section.add "X-Amz-Credential", valid_773216
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_773217 = formData.getOrDefault("Tags")
  valid_773217 = validateParameter(valid_773217, JArray, required = true, default = nil)
  if valid_773217 != nil:
    section.add "Tags", valid_773217
  var valid_773218 = formData.getOrDefault("ResourceName")
  valid_773218 = validateParameter(valid_773218, JString, required = true,
                                 default = nil)
  if valid_773218 != nil:
    section.add "ResourceName", valid_773218
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773219: Call_PostAddTagsToResource_773205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_773219.validator(path, query, header, formData, body)
  let scheme = call_773219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773219.url(scheme.get, call_773219.host, call_773219.base,
                         call_773219.route, valid.getOrDefault("path"))
  result = hook(call_773219, url, valid)

proc call*(call_773220: Call_PostAddTagsToResource_773205; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Version: string (required)
  var query_773221 = newJObject()
  var formData_773222 = newJObject()
  if Tags != nil:
    formData_773222.add "Tags", Tags
  add(query_773221, "Action", newJString(Action))
  add(formData_773222, "ResourceName", newJString(ResourceName))
  add(query_773221, "Version", newJString(Version))
  result = call_773220.call(nil, query_773221, nil, formData_773222, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_773205(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_773206, base: "/",
    url: url_PostAddTagsToResource_773207, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_772933 = ref object of OpenApiRestCall_772597
proc url_GetAddTagsToResource_772935(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAddTagsToResource_772934(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_773047 = query.getOrDefault("Tags")
  valid_773047 = validateParameter(valid_773047, JArray, required = true, default = nil)
  if valid_773047 != nil:
    section.add "Tags", valid_773047
  var valid_773048 = query.getOrDefault("ResourceName")
  valid_773048 = validateParameter(valid_773048, JString, required = true,
                                 default = nil)
  if valid_773048 != nil:
    section.add "ResourceName", valid_773048
  var valid_773062 = query.getOrDefault("Action")
  valid_773062 = validateParameter(valid_773062, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_773062 != nil:
    section.add "Action", valid_773062
  var valid_773063 = query.getOrDefault("Version")
  valid_773063 = validateParameter(valid_773063, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773063 != nil:
    section.add "Version", valid_773063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773064 = header.getOrDefault("X-Amz-Date")
  valid_773064 = validateParameter(valid_773064, JString, required = false,
                                 default = nil)
  if valid_773064 != nil:
    section.add "X-Amz-Date", valid_773064
  var valid_773065 = header.getOrDefault("X-Amz-Security-Token")
  valid_773065 = validateParameter(valid_773065, JString, required = false,
                                 default = nil)
  if valid_773065 != nil:
    section.add "X-Amz-Security-Token", valid_773065
  var valid_773066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773066 = validateParameter(valid_773066, JString, required = false,
                                 default = nil)
  if valid_773066 != nil:
    section.add "X-Amz-Content-Sha256", valid_773066
  var valid_773067 = header.getOrDefault("X-Amz-Algorithm")
  valid_773067 = validateParameter(valid_773067, JString, required = false,
                                 default = nil)
  if valid_773067 != nil:
    section.add "X-Amz-Algorithm", valid_773067
  var valid_773068 = header.getOrDefault("X-Amz-Signature")
  valid_773068 = validateParameter(valid_773068, JString, required = false,
                                 default = nil)
  if valid_773068 != nil:
    section.add "X-Amz-Signature", valid_773068
  var valid_773069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773069 = validateParameter(valid_773069, JString, required = false,
                                 default = nil)
  if valid_773069 != nil:
    section.add "X-Amz-SignedHeaders", valid_773069
  var valid_773070 = header.getOrDefault("X-Amz-Credential")
  valid_773070 = validateParameter(valid_773070, JString, required = false,
                                 default = nil)
  if valid_773070 != nil:
    section.add "X-Amz-Credential", valid_773070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773093: Call_GetAddTagsToResource_772933; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_773093.validator(path, query, header, formData, body)
  let scheme = call_773093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773093.url(scheme.get, call_773093.host, call_773093.base,
                         call_773093.route, valid.getOrDefault("path"))
  result = hook(call_773093, url, valid)

proc call*(call_773164: Call_GetAddTagsToResource_772933; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2015-02-02"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds up to 50 cost allocation tags to the named resource. A cost allocation tag is a key-value pair where the key and value are case-sensitive. You can use cost allocation tags to categorize and track your AWS costs.</p> <p> When you apply tags to your ElastiCache resources, AWS generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Using Cost Allocation Tags in Amazon ElastiCache</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   Tags: JArray (required)
  ##       : A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>. ElastiCache resources are <i>cluster</i> and <i>snapshot</i>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773165 = newJObject()
  if Tags != nil:
    query_773165.add "Tags", Tags
  add(query_773165, "ResourceName", newJString(ResourceName))
  add(query_773165, "Action", newJString(Action))
  add(query_773165, "Version", newJString(Version))
  result = call_773164.call(nil, query_773165, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_772933(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_772934, base: "/",
    url: url_GetAddTagsToResource_772935, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeCacheSecurityGroupIngress_773241 = ref object of OpenApiRestCall_772597
proc url_PostAuthorizeCacheSecurityGroupIngress_773243(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostAuthorizeCacheSecurityGroupIngress_773242(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773244 = query.getOrDefault("Action")
  valid_773244 = validateParameter(valid_773244, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_773244 != nil:
    section.add "Action", valid_773244
  var valid_773245 = query.getOrDefault("Version")
  valid_773245 = validateParameter(valid_773245, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773245 != nil:
    section.add "Version", valid_773245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773246 = header.getOrDefault("X-Amz-Date")
  valid_773246 = validateParameter(valid_773246, JString, required = false,
                                 default = nil)
  if valid_773246 != nil:
    section.add "X-Amz-Date", valid_773246
  var valid_773247 = header.getOrDefault("X-Amz-Security-Token")
  valid_773247 = validateParameter(valid_773247, JString, required = false,
                                 default = nil)
  if valid_773247 != nil:
    section.add "X-Amz-Security-Token", valid_773247
  var valid_773248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773248 = validateParameter(valid_773248, JString, required = false,
                                 default = nil)
  if valid_773248 != nil:
    section.add "X-Amz-Content-Sha256", valid_773248
  var valid_773249 = header.getOrDefault("X-Amz-Algorithm")
  valid_773249 = validateParameter(valid_773249, JString, required = false,
                                 default = nil)
  if valid_773249 != nil:
    section.add "X-Amz-Algorithm", valid_773249
  var valid_773250 = header.getOrDefault("X-Amz-Signature")
  valid_773250 = validateParameter(valid_773250, JString, required = false,
                                 default = nil)
  if valid_773250 != nil:
    section.add "X-Amz-Signature", valid_773250
  var valid_773251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773251 = validateParameter(valid_773251, JString, required = false,
                                 default = nil)
  if valid_773251 != nil:
    section.add "X-Amz-SignedHeaders", valid_773251
  var valid_773252 = header.getOrDefault("X-Amz-Credential")
  valid_773252 = validateParameter(valid_773252, JString, required = false,
                                 default = nil)
  if valid_773252 != nil:
    section.add "X-Amz-Credential", valid_773252
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_773253 = formData.getOrDefault("CacheSecurityGroupName")
  valid_773253 = validateParameter(valid_773253, JString, required = true,
                                 default = nil)
  if valid_773253 != nil:
    section.add "CacheSecurityGroupName", valid_773253
  var valid_773254 = formData.getOrDefault("EC2SecurityGroupName")
  valid_773254 = validateParameter(valid_773254, JString, required = true,
                                 default = nil)
  if valid_773254 != nil:
    section.add "EC2SecurityGroupName", valid_773254
  var valid_773255 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_773255 = validateParameter(valid_773255, JString, required = true,
                                 default = nil)
  if valid_773255 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_773255
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773256: Call_PostAuthorizeCacheSecurityGroupIngress_773241;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_773256.validator(path, query, header, formData, body)
  let scheme = call_773256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773256.url(scheme.get, call_773256.host, call_773256.base,
                         call_773256.route, valid.getOrDefault("path"))
  result = hook(call_773256, url, valid)

proc call*(call_773257: Call_PostAuthorizeCacheSecurityGroupIngress_773241;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  var query_773258 = newJObject()
  var formData_773259 = newJObject()
  add(formData_773259, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_773258, "Action", newJString(Action))
  add(formData_773259, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_773258, "Version", newJString(Version))
  add(formData_773259, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_773257.call(nil, query_773258, nil, formData_773259, nil)

var postAuthorizeCacheSecurityGroupIngress* = Call_PostAuthorizeCacheSecurityGroupIngress_773241(
    name: "postAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_PostAuthorizeCacheSecurityGroupIngress_773242, base: "/",
    url: url_PostAuthorizeCacheSecurityGroupIngress_773243,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeCacheSecurityGroupIngress_773223 = ref object of OpenApiRestCall_772597
proc url_GetAuthorizeCacheSecurityGroupIngress_773225(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetAuthorizeCacheSecurityGroupIngress_773224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_773226 = query.getOrDefault("CacheSecurityGroupName")
  valid_773226 = validateParameter(valid_773226, JString, required = true,
                                 default = nil)
  if valid_773226 != nil:
    section.add "CacheSecurityGroupName", valid_773226
  var valid_773227 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_773227 = validateParameter(valid_773227, JString, required = true,
                                 default = nil)
  if valid_773227 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_773227
  var valid_773228 = query.getOrDefault("Action")
  valid_773228 = validateParameter(valid_773228, JString, required = true, default = newJString(
      "AuthorizeCacheSecurityGroupIngress"))
  if valid_773228 != nil:
    section.add "Action", valid_773228
  var valid_773229 = query.getOrDefault("EC2SecurityGroupName")
  valid_773229 = validateParameter(valid_773229, JString, required = true,
                                 default = nil)
  if valid_773229 != nil:
    section.add "EC2SecurityGroupName", valid_773229
  var valid_773230 = query.getOrDefault("Version")
  valid_773230 = validateParameter(valid_773230, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773230 != nil:
    section.add "Version", valid_773230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773231 = header.getOrDefault("X-Amz-Date")
  valid_773231 = validateParameter(valid_773231, JString, required = false,
                                 default = nil)
  if valid_773231 != nil:
    section.add "X-Amz-Date", valid_773231
  var valid_773232 = header.getOrDefault("X-Amz-Security-Token")
  valid_773232 = validateParameter(valid_773232, JString, required = false,
                                 default = nil)
  if valid_773232 != nil:
    section.add "X-Amz-Security-Token", valid_773232
  var valid_773233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773233 = validateParameter(valid_773233, JString, required = false,
                                 default = nil)
  if valid_773233 != nil:
    section.add "X-Amz-Content-Sha256", valid_773233
  var valid_773234 = header.getOrDefault("X-Amz-Algorithm")
  valid_773234 = validateParameter(valid_773234, JString, required = false,
                                 default = nil)
  if valid_773234 != nil:
    section.add "X-Amz-Algorithm", valid_773234
  var valid_773235 = header.getOrDefault("X-Amz-Signature")
  valid_773235 = validateParameter(valid_773235, JString, required = false,
                                 default = nil)
  if valid_773235 != nil:
    section.add "X-Amz-Signature", valid_773235
  var valid_773236 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773236 = validateParameter(valid_773236, JString, required = false,
                                 default = nil)
  if valid_773236 != nil:
    section.add "X-Amz-SignedHeaders", valid_773236
  var valid_773237 = header.getOrDefault("X-Amz-Credential")
  valid_773237 = validateParameter(valid_773237, JString, required = false,
                                 default = nil)
  if valid_773237 != nil:
    section.add "X-Amz-Credential", valid_773237
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773238: Call_GetAuthorizeCacheSecurityGroupIngress_773223;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ## 
  let valid = call_773238.validator(path, query, header, formData, body)
  let scheme = call_773238.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773238.url(scheme.get, call_773238.host, call_773238.base,
                         call_773238.route, valid.getOrDefault("path"))
  result = hook(call_773238, url, valid)

proc call*(call_773239: Call_GetAuthorizeCacheSecurityGroupIngress_773223;
          CacheSecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          EC2SecurityGroupName: string;
          Action: string = "AuthorizeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getAuthorizeCacheSecurityGroupIngress
  ## <p>Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.</p> <note> <p>You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : The cache security group that allows network ingress.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The Amazon EC2 security group to be authorized for ingress to the cache security group.
  ##   Version: string (required)
  var query_773240 = newJObject()
  add(query_773240, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_773240, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_773240, "Action", newJString(Action))
  add(query_773240, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_773240, "Version", newJString(Version))
  result = call_773239.call(nil, query_773240, nil, nil, nil)

var getAuthorizeCacheSecurityGroupIngress* = Call_GetAuthorizeCacheSecurityGroupIngress_773223(
    name: "getAuthorizeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=AuthorizeCacheSecurityGroupIngress",
    validator: validate_GetAuthorizeCacheSecurityGroupIngress_773224, base: "/",
    url: url_GetAuthorizeCacheSecurityGroupIngress_773225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchApplyUpdateAction_773277 = ref object of OpenApiRestCall_772597
proc url_PostBatchApplyUpdateAction_773279(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostBatchApplyUpdateAction_773278(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773280 = query.getOrDefault("Action")
  valid_773280 = validateParameter(valid_773280, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_773280 != nil:
    section.add "Action", valid_773280
  var valid_773281 = query.getOrDefault("Version")
  valid_773281 = validateParameter(valid_773281, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773281 != nil:
    section.add "Version", valid_773281
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773282 = header.getOrDefault("X-Amz-Date")
  valid_773282 = validateParameter(valid_773282, JString, required = false,
                                 default = nil)
  if valid_773282 != nil:
    section.add "X-Amz-Date", valid_773282
  var valid_773283 = header.getOrDefault("X-Amz-Security-Token")
  valid_773283 = validateParameter(valid_773283, JString, required = false,
                                 default = nil)
  if valid_773283 != nil:
    section.add "X-Amz-Security-Token", valid_773283
  var valid_773284 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773284 = validateParameter(valid_773284, JString, required = false,
                                 default = nil)
  if valid_773284 != nil:
    section.add "X-Amz-Content-Sha256", valid_773284
  var valid_773285 = header.getOrDefault("X-Amz-Algorithm")
  valid_773285 = validateParameter(valid_773285, JString, required = false,
                                 default = nil)
  if valid_773285 != nil:
    section.add "X-Amz-Algorithm", valid_773285
  var valid_773286 = header.getOrDefault("X-Amz-Signature")
  valid_773286 = validateParameter(valid_773286, JString, required = false,
                                 default = nil)
  if valid_773286 != nil:
    section.add "X-Amz-Signature", valid_773286
  var valid_773287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773287 = validateParameter(valid_773287, JString, required = false,
                                 default = nil)
  if valid_773287 != nil:
    section.add "X-Amz-SignedHeaders", valid_773287
  var valid_773288 = header.getOrDefault("X-Amz-Credential")
  valid_773288 = validateParameter(valid_773288, JString, required = false,
                                 default = nil)
  if valid_773288 != nil:
    section.add "X-Amz-Credential", valid_773288
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupIds` field"
  var valid_773289 = formData.getOrDefault("ReplicationGroupIds")
  valid_773289 = validateParameter(valid_773289, JArray, required = true, default = nil)
  if valid_773289 != nil:
    section.add "ReplicationGroupIds", valid_773289
  var valid_773290 = formData.getOrDefault("ServiceUpdateName")
  valid_773290 = validateParameter(valid_773290, JString, required = true,
                                 default = nil)
  if valid_773290 != nil:
    section.add "ServiceUpdateName", valid_773290
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773291: Call_PostBatchApplyUpdateAction_773277; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_773291.validator(path, query, header, formData, body)
  let scheme = call_773291.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773291.url(scheme.get, call_773291.host, call_773291.base,
                         call_773291.route, valid.getOrDefault("path"))
  result = hook(call_773291, url, valid)

proc call*(call_773292: Call_PostBatchApplyUpdateAction_773277;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_773293 = newJObject()
  var formData_773294 = newJObject()
  if ReplicationGroupIds != nil:
    formData_773294.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_773293, "Action", newJString(Action))
  add(query_773293, "Version", newJString(Version))
  add(formData_773294, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_773292.call(nil, query_773293, nil, formData_773294, nil)

var postBatchApplyUpdateAction* = Call_PostBatchApplyUpdateAction_773277(
    name: "postBatchApplyUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_PostBatchApplyUpdateAction_773278, base: "/",
    url: url_PostBatchApplyUpdateAction_773279,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchApplyUpdateAction_773260 = ref object of OpenApiRestCall_772597
proc url_GetBatchApplyUpdateAction_773262(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetBatchApplyUpdateAction_773261(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773263 = query.getOrDefault("Action")
  valid_773263 = validateParameter(valid_773263, JString, required = true,
                                 default = newJString("BatchApplyUpdateAction"))
  if valid_773263 != nil:
    section.add "Action", valid_773263
  var valid_773264 = query.getOrDefault("ReplicationGroupIds")
  valid_773264 = validateParameter(valid_773264, JArray, required = true, default = nil)
  if valid_773264 != nil:
    section.add "ReplicationGroupIds", valid_773264
  var valid_773265 = query.getOrDefault("Version")
  valid_773265 = validateParameter(valid_773265, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773265 != nil:
    section.add "Version", valid_773265
  var valid_773266 = query.getOrDefault("ServiceUpdateName")
  valid_773266 = validateParameter(valid_773266, JString, required = true,
                                 default = nil)
  if valid_773266 != nil:
    section.add "ServiceUpdateName", valid_773266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773267 = header.getOrDefault("X-Amz-Date")
  valid_773267 = validateParameter(valid_773267, JString, required = false,
                                 default = nil)
  if valid_773267 != nil:
    section.add "X-Amz-Date", valid_773267
  var valid_773268 = header.getOrDefault("X-Amz-Security-Token")
  valid_773268 = validateParameter(valid_773268, JString, required = false,
                                 default = nil)
  if valid_773268 != nil:
    section.add "X-Amz-Security-Token", valid_773268
  var valid_773269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773269 = validateParameter(valid_773269, JString, required = false,
                                 default = nil)
  if valid_773269 != nil:
    section.add "X-Amz-Content-Sha256", valid_773269
  var valid_773270 = header.getOrDefault("X-Amz-Algorithm")
  valid_773270 = validateParameter(valid_773270, JString, required = false,
                                 default = nil)
  if valid_773270 != nil:
    section.add "X-Amz-Algorithm", valid_773270
  var valid_773271 = header.getOrDefault("X-Amz-Signature")
  valid_773271 = validateParameter(valid_773271, JString, required = false,
                                 default = nil)
  if valid_773271 != nil:
    section.add "X-Amz-Signature", valid_773271
  var valid_773272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773272 = validateParameter(valid_773272, JString, required = false,
                                 default = nil)
  if valid_773272 != nil:
    section.add "X-Amz-SignedHeaders", valid_773272
  var valid_773273 = header.getOrDefault("X-Amz-Credential")
  valid_773273 = validateParameter(valid_773273, JString, required = false,
                                 default = nil)
  if valid_773273 != nil:
    section.add "X-Amz-Credential", valid_773273
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773274: Call_GetBatchApplyUpdateAction_773260; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ## 
  let valid = call_773274.validator(path, query, header, formData, body)
  let scheme = call_773274.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773274.url(scheme.get, call_773274.host, call_773274.base,
                         call_773274.route, valid.getOrDefault("path"))
  result = hook(call_773274, url, valid)

proc call*(call_773275: Call_GetBatchApplyUpdateAction_773260;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchApplyUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## getBatchApplyUpdateAction
  ## Apply the service update. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html">Applying Service Updates</a>.
  ##   Action: string (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_773276 = newJObject()
  add(query_773276, "Action", newJString(Action))
  if ReplicationGroupIds != nil:
    query_773276.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_773276, "Version", newJString(Version))
  add(query_773276, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_773275.call(nil, query_773276, nil, nil, nil)

var getBatchApplyUpdateAction* = Call_GetBatchApplyUpdateAction_773260(
    name: "getBatchApplyUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchApplyUpdateAction",
    validator: validate_GetBatchApplyUpdateAction_773261, base: "/",
    url: url_GetBatchApplyUpdateAction_773262,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBatchStopUpdateAction_773312 = ref object of OpenApiRestCall_772597
proc url_PostBatchStopUpdateAction_773314(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostBatchStopUpdateAction_773313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773315 = query.getOrDefault("Action")
  valid_773315 = validateParameter(valid_773315, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_773315 != nil:
    section.add "Action", valid_773315
  var valid_773316 = query.getOrDefault("Version")
  valid_773316 = validateParameter(valid_773316, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773316 != nil:
    section.add "Version", valid_773316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773317 = header.getOrDefault("X-Amz-Date")
  valid_773317 = validateParameter(valid_773317, JString, required = false,
                                 default = nil)
  if valid_773317 != nil:
    section.add "X-Amz-Date", valid_773317
  var valid_773318 = header.getOrDefault("X-Amz-Security-Token")
  valid_773318 = validateParameter(valid_773318, JString, required = false,
                                 default = nil)
  if valid_773318 != nil:
    section.add "X-Amz-Security-Token", valid_773318
  var valid_773319 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773319 = validateParameter(valid_773319, JString, required = false,
                                 default = nil)
  if valid_773319 != nil:
    section.add "X-Amz-Content-Sha256", valid_773319
  var valid_773320 = header.getOrDefault("X-Amz-Algorithm")
  valid_773320 = validateParameter(valid_773320, JString, required = false,
                                 default = nil)
  if valid_773320 != nil:
    section.add "X-Amz-Algorithm", valid_773320
  var valid_773321 = header.getOrDefault("X-Amz-Signature")
  valid_773321 = validateParameter(valid_773321, JString, required = false,
                                 default = nil)
  if valid_773321 != nil:
    section.add "X-Amz-Signature", valid_773321
  var valid_773322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773322 = validateParameter(valid_773322, JString, required = false,
                                 default = nil)
  if valid_773322 != nil:
    section.add "X-Amz-SignedHeaders", valid_773322
  var valid_773323 = header.getOrDefault("X-Amz-Credential")
  valid_773323 = validateParameter(valid_773323, JString, required = false,
                                 default = nil)
  if valid_773323 != nil:
    section.add "X-Amz-Credential", valid_773323
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupIds` field"
  var valid_773324 = formData.getOrDefault("ReplicationGroupIds")
  valid_773324 = validateParameter(valid_773324, JArray, required = true, default = nil)
  if valid_773324 != nil:
    section.add "ReplicationGroupIds", valid_773324
  var valid_773325 = formData.getOrDefault("ServiceUpdateName")
  valid_773325 = validateParameter(valid_773325, JString, required = true,
                                 default = nil)
  if valid_773325 != nil:
    section.add "ServiceUpdateName", valid_773325
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773326: Call_PostBatchStopUpdateAction_773312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_773326.validator(path, query, header, formData, body)
  let scheme = call_773326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773326.url(scheme.get, call_773326.host, call_773326.base,
                         call_773326.route, valid.getOrDefault("path"))
  result = hook(call_773326, url, valid)

proc call*(call_773327: Call_PostBatchStopUpdateAction_773312;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchStopUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## postBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_773328 = newJObject()
  var formData_773329 = newJObject()
  if ReplicationGroupIds != nil:
    formData_773329.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_773328, "Action", newJString(Action))
  add(query_773328, "Version", newJString(Version))
  add(formData_773329, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_773327.call(nil, query_773328, nil, formData_773329, nil)

var postBatchStopUpdateAction* = Call_PostBatchStopUpdateAction_773312(
    name: "postBatchStopUpdateAction", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_PostBatchStopUpdateAction_773313, base: "/",
    url: url_PostBatchStopUpdateAction_773314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBatchStopUpdateAction_773295 = ref object of OpenApiRestCall_772597
proc url_GetBatchStopUpdateAction_773297(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetBatchStopUpdateAction_773296(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString (required)
  ##                    : The unique ID of the service update
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773298 = query.getOrDefault("Action")
  valid_773298 = validateParameter(valid_773298, JString, required = true,
                                 default = newJString("BatchStopUpdateAction"))
  if valid_773298 != nil:
    section.add "Action", valid_773298
  var valid_773299 = query.getOrDefault("ReplicationGroupIds")
  valid_773299 = validateParameter(valid_773299, JArray, required = true, default = nil)
  if valid_773299 != nil:
    section.add "ReplicationGroupIds", valid_773299
  var valid_773300 = query.getOrDefault("Version")
  valid_773300 = validateParameter(valid_773300, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773300 != nil:
    section.add "Version", valid_773300
  var valid_773301 = query.getOrDefault("ServiceUpdateName")
  valid_773301 = validateParameter(valid_773301, JString, required = true,
                                 default = nil)
  if valid_773301 != nil:
    section.add "ServiceUpdateName", valid_773301
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773302 = header.getOrDefault("X-Amz-Date")
  valid_773302 = validateParameter(valid_773302, JString, required = false,
                                 default = nil)
  if valid_773302 != nil:
    section.add "X-Amz-Date", valid_773302
  var valid_773303 = header.getOrDefault("X-Amz-Security-Token")
  valid_773303 = validateParameter(valid_773303, JString, required = false,
                                 default = nil)
  if valid_773303 != nil:
    section.add "X-Amz-Security-Token", valid_773303
  var valid_773304 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773304 = validateParameter(valid_773304, JString, required = false,
                                 default = nil)
  if valid_773304 != nil:
    section.add "X-Amz-Content-Sha256", valid_773304
  var valid_773305 = header.getOrDefault("X-Amz-Algorithm")
  valid_773305 = validateParameter(valid_773305, JString, required = false,
                                 default = nil)
  if valid_773305 != nil:
    section.add "X-Amz-Algorithm", valid_773305
  var valid_773306 = header.getOrDefault("X-Amz-Signature")
  valid_773306 = validateParameter(valid_773306, JString, required = false,
                                 default = nil)
  if valid_773306 != nil:
    section.add "X-Amz-Signature", valid_773306
  var valid_773307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773307 = validateParameter(valid_773307, JString, required = false,
                                 default = nil)
  if valid_773307 != nil:
    section.add "X-Amz-SignedHeaders", valid_773307
  var valid_773308 = header.getOrDefault("X-Amz-Credential")
  valid_773308 = validateParameter(valid_773308, JString, required = false,
                                 default = nil)
  if valid_773308 != nil:
    section.add "X-Amz-Credential", valid_773308
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773309: Call_GetBatchStopUpdateAction_773295; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ## 
  let valid = call_773309.validator(path, query, header, formData, body)
  let scheme = call_773309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773309.url(scheme.get, call_773309.host, call_773309.base,
                         call_773309.route, valid.getOrDefault("path"))
  result = hook(call_773309, url, valid)

proc call*(call_773310: Call_GetBatchStopUpdateAction_773295;
          ReplicationGroupIds: JsonNode; ServiceUpdateName: string;
          Action: string = "BatchStopUpdateAction"; Version: string = "2015-02-02"): Recallable =
  ## getBatchStopUpdateAction
  ## Stop the service update. For more information on service updates and stopping them, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html">Stopping Service Updates</a>.
  ##   Action: string (required)
  ##   ReplicationGroupIds: JArray (required)
  ##                      : The replication group IDs
  ##   Version: string (required)
  ##   ServiceUpdateName: string (required)
  ##                    : The unique ID of the service update
  var query_773311 = newJObject()
  add(query_773311, "Action", newJString(Action))
  if ReplicationGroupIds != nil:
    query_773311.add "ReplicationGroupIds", ReplicationGroupIds
  add(query_773311, "Version", newJString(Version))
  add(query_773311, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_773310.call(nil, query_773311, nil, nil, nil)

var getBatchStopUpdateAction* = Call_GetBatchStopUpdateAction_773295(
    name: "getBatchStopUpdateAction", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=BatchStopUpdateAction",
    validator: validate_GetBatchStopUpdateAction_773296, base: "/",
    url: url_GetBatchStopUpdateAction_773297, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopySnapshot_773349 = ref object of OpenApiRestCall_772597
proc url_PostCopySnapshot_773351(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCopySnapshot_773350(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773352 = query.getOrDefault("Action")
  valid_773352 = validateParameter(valid_773352, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_773352 != nil:
    section.add "Action", valid_773352
  var valid_773353 = query.getOrDefault("Version")
  valid_773353 = validateParameter(valid_773353, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773353 != nil:
    section.add "Version", valid_773353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773354 = header.getOrDefault("X-Amz-Date")
  valid_773354 = validateParameter(valid_773354, JString, required = false,
                                 default = nil)
  if valid_773354 != nil:
    section.add "X-Amz-Date", valid_773354
  var valid_773355 = header.getOrDefault("X-Amz-Security-Token")
  valid_773355 = validateParameter(valid_773355, JString, required = false,
                                 default = nil)
  if valid_773355 != nil:
    section.add "X-Amz-Security-Token", valid_773355
  var valid_773356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773356 = validateParameter(valid_773356, JString, required = false,
                                 default = nil)
  if valid_773356 != nil:
    section.add "X-Amz-Content-Sha256", valid_773356
  var valid_773357 = header.getOrDefault("X-Amz-Algorithm")
  valid_773357 = validateParameter(valid_773357, JString, required = false,
                                 default = nil)
  if valid_773357 != nil:
    section.add "X-Amz-Algorithm", valid_773357
  var valid_773358 = header.getOrDefault("X-Amz-Signature")
  valid_773358 = validateParameter(valid_773358, JString, required = false,
                                 default = nil)
  if valid_773358 != nil:
    section.add "X-Amz-Signature", valid_773358
  var valid_773359 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773359 = validateParameter(valid_773359, JString, required = false,
                                 default = nil)
  if valid_773359 != nil:
    section.add "X-Amz-SignedHeaders", valid_773359
  var valid_773360 = header.getOrDefault("X-Amz-Credential")
  valid_773360 = validateParameter(valid_773360, JString, required = false,
                                 default = nil)
  if valid_773360 != nil:
    section.add "X-Amz-Credential", valid_773360
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetSnapshotName` field"
  var valid_773361 = formData.getOrDefault("TargetSnapshotName")
  valid_773361 = validateParameter(valid_773361, JString, required = true,
                                 default = nil)
  if valid_773361 != nil:
    section.add "TargetSnapshotName", valid_773361
  var valid_773362 = formData.getOrDefault("TargetBucket")
  valid_773362 = validateParameter(valid_773362, JString, required = false,
                                 default = nil)
  if valid_773362 != nil:
    section.add "TargetBucket", valid_773362
  var valid_773363 = formData.getOrDefault("SourceSnapshotName")
  valid_773363 = validateParameter(valid_773363, JString, required = true,
                                 default = nil)
  if valid_773363 != nil:
    section.add "SourceSnapshotName", valid_773363
  var valid_773364 = formData.getOrDefault("KmsKeyId")
  valid_773364 = validateParameter(valid_773364, JString, required = false,
                                 default = nil)
  if valid_773364 != nil:
    section.add "KmsKeyId", valid_773364
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773365: Call_PostCopySnapshot_773349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_773365.validator(path, query, header, formData, body)
  let scheme = call_773365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773365.url(scheme.get, call_773365.host, call_773365.base,
                         call_773365.route, valid.getOrDefault("path"))
  result = hook(call_773365, url, valid)

proc call*(call_773366: Call_PostCopySnapshot_773349; TargetSnapshotName: string;
          SourceSnapshotName: string; TargetBucket: string = "";
          Action: string = "CopySnapshot"; KmsKeyId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## postCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   Version: string (required)
  var query_773367 = newJObject()
  var formData_773368 = newJObject()
  add(formData_773368, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(formData_773368, "TargetBucket", newJString(TargetBucket))
  add(formData_773368, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_773367, "Action", newJString(Action))
  add(formData_773368, "KmsKeyId", newJString(KmsKeyId))
  add(query_773367, "Version", newJString(Version))
  result = call_773366.call(nil, query_773367, nil, formData_773368, nil)

var postCopySnapshot* = Call_PostCopySnapshot_773349(name: "postCopySnapshot",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_PostCopySnapshot_773350,
    base: "/", url: url_PostCopySnapshot_773351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopySnapshot_773330 = ref object of OpenApiRestCall_772597
proc url_GetCopySnapshot_773332(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCopySnapshot_773331(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceSnapshotName: JString (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: JString
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   TargetSnapshotName: JString (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceSnapshotName` field"
  var valid_773333 = query.getOrDefault("SourceSnapshotName")
  valid_773333 = validateParameter(valid_773333, JString, required = true,
                                 default = nil)
  if valid_773333 != nil:
    section.add "SourceSnapshotName", valid_773333
  var valid_773334 = query.getOrDefault("Action")
  valid_773334 = validateParameter(valid_773334, JString, required = true,
                                 default = newJString("CopySnapshot"))
  if valid_773334 != nil:
    section.add "Action", valid_773334
  var valid_773335 = query.getOrDefault("KmsKeyId")
  valid_773335 = validateParameter(valid_773335, JString, required = false,
                                 default = nil)
  if valid_773335 != nil:
    section.add "KmsKeyId", valid_773335
  var valid_773336 = query.getOrDefault("TargetBucket")
  valid_773336 = validateParameter(valid_773336, JString, required = false,
                                 default = nil)
  if valid_773336 != nil:
    section.add "TargetBucket", valid_773336
  var valid_773337 = query.getOrDefault("TargetSnapshotName")
  valid_773337 = validateParameter(valid_773337, JString, required = true,
                                 default = nil)
  if valid_773337 != nil:
    section.add "TargetSnapshotName", valid_773337
  var valid_773338 = query.getOrDefault("Version")
  valid_773338 = validateParameter(valid_773338, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773338 != nil:
    section.add "Version", valid_773338
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773339 = header.getOrDefault("X-Amz-Date")
  valid_773339 = validateParameter(valid_773339, JString, required = false,
                                 default = nil)
  if valid_773339 != nil:
    section.add "X-Amz-Date", valid_773339
  var valid_773340 = header.getOrDefault("X-Amz-Security-Token")
  valid_773340 = validateParameter(valid_773340, JString, required = false,
                                 default = nil)
  if valid_773340 != nil:
    section.add "X-Amz-Security-Token", valid_773340
  var valid_773341 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773341 = validateParameter(valid_773341, JString, required = false,
                                 default = nil)
  if valid_773341 != nil:
    section.add "X-Amz-Content-Sha256", valid_773341
  var valid_773342 = header.getOrDefault("X-Amz-Algorithm")
  valid_773342 = validateParameter(valid_773342, JString, required = false,
                                 default = nil)
  if valid_773342 != nil:
    section.add "X-Amz-Algorithm", valid_773342
  var valid_773343 = header.getOrDefault("X-Amz-Signature")
  valid_773343 = validateParameter(valid_773343, JString, required = false,
                                 default = nil)
  if valid_773343 != nil:
    section.add "X-Amz-Signature", valid_773343
  var valid_773344 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773344 = validateParameter(valid_773344, JString, required = false,
                                 default = nil)
  if valid_773344 != nil:
    section.add "X-Amz-SignedHeaders", valid_773344
  var valid_773345 = header.getOrDefault("X-Amz-Credential")
  valid_773345 = validateParameter(valid_773345, JString, required = false,
                                 default = nil)
  if valid_773345 != nil:
    section.add "X-Amz-Credential", valid_773345
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773346: Call_GetCopySnapshot_773330; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_773346.validator(path, query, header, formData, body)
  let scheme = call_773346.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773346.url(scheme.get, call_773346.host, call_773346.base,
                         call_773346.route, valid.getOrDefault("path"))
  result = hook(call_773346, url, valid)

proc call*(call_773347: Call_GetCopySnapshot_773330; SourceSnapshotName: string;
          TargetSnapshotName: string; Action: string = "CopySnapshot";
          KmsKeyId: string = ""; TargetBucket: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCopySnapshot
  ## <p>Makes a copy of an existing snapshot.</p> <note> <p>This operation is valid for Redis only.</p> </note> <important> <p>Users or groups that have permissions to use the <code>CopySnapshot</code> operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the <code>CopySnapshot</code> operation. For more information about using IAM to control the use of ElastiCache operations, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html">Exporting Snapshots</a> and <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html">Authentication &amp; Access Control</a>.</p> </important> <p>You could receive the following error messages.</p> <p class="title"> <b>Error Messages</b> </p> <ul> <li> <p> <b>Error Message:</b> The S3 bucket %s is outside of the region.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s does not exist.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s is not owned by the authenticated user.</p> <p> <b>Solution:</b> Create an Amazon S3 bucket in the same region as your snapshot. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket">Step 1: Create an Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message:</b> The authenticated user does not have sufficient permissions to perform the desired activity.</p> <p> <b>Solution:</b> Contact your system administrator to get the needed permissions.</p> </li> <li> <p> <b>Error Message:</b> The S3 bucket %s already contains an object with key %s.</p> <p> <b>Solution:</b> Give the <code>TargetSnapshotName</code> a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for <code>TargetSnapshotName</code>.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add List and Read permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add Upload/Delete permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> <li> <p> <b>Error Message: </b> ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.</p> <p> <b>Solution:</b> Add View Permissions on the bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   SourceSnapshotName: string (required)
  ##                     : The name of an existing snapshot from which to make a copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the target snapshot.
  ##   TargetBucket: string
  ##               : <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.</p> <p>When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access">Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket</a> in the <i>Amazon ElastiCache User Guide</i>.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Snapshots.Exporting.html">Exporting a Snapshot</a> in the <i>Amazon ElastiCache User Guide</i>.</p>
  ##   TargetSnapshotName: string (required)
  ##                     : A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
  ##   Version: string (required)
  var query_773348 = newJObject()
  add(query_773348, "SourceSnapshotName", newJString(SourceSnapshotName))
  add(query_773348, "Action", newJString(Action))
  add(query_773348, "KmsKeyId", newJString(KmsKeyId))
  add(query_773348, "TargetBucket", newJString(TargetBucket))
  add(query_773348, "TargetSnapshotName", newJString(TargetSnapshotName))
  add(query_773348, "Version", newJString(Version))
  result = call_773347.call(nil, query_773348, nil, nil, nil)

var getCopySnapshot* = Call_GetCopySnapshot_773330(name: "getCopySnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CopySnapshot", validator: validate_GetCopySnapshot_773331,
    base: "/", url: url_GetCopySnapshot_773332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheCluster_773407 = ref object of OpenApiRestCall_772597
proc url_PostCreateCacheCluster_773409(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCacheCluster_773408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773410 = query.getOrDefault("Action")
  valid_773410 = validateParameter(valid_773410, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_773410 != nil:
    section.add "Action", valid_773410
  var valid_773411 = query.getOrDefault("Version")
  valid_773411 = validateParameter(valid_773411, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773411 != nil:
    section.add "Version", valid_773411
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773412 = header.getOrDefault("X-Amz-Date")
  valid_773412 = validateParameter(valid_773412, JString, required = false,
                                 default = nil)
  if valid_773412 != nil:
    section.add "X-Amz-Date", valid_773412
  var valid_773413 = header.getOrDefault("X-Amz-Security-Token")
  valid_773413 = validateParameter(valid_773413, JString, required = false,
                                 default = nil)
  if valid_773413 != nil:
    section.add "X-Amz-Security-Token", valid_773413
  var valid_773414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773414 = validateParameter(valid_773414, JString, required = false,
                                 default = nil)
  if valid_773414 != nil:
    section.add "X-Amz-Content-Sha256", valid_773414
  var valid_773415 = header.getOrDefault("X-Amz-Algorithm")
  valid_773415 = validateParameter(valid_773415, JString, required = false,
                                 default = nil)
  if valid_773415 != nil:
    section.add "X-Amz-Algorithm", valid_773415
  var valid_773416 = header.getOrDefault("X-Amz-Signature")
  valid_773416 = validateParameter(valid_773416, JString, required = false,
                                 default = nil)
  if valid_773416 != nil:
    section.add "X-Amz-Signature", valid_773416
  var valid_773417 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773417 = validateParameter(valid_773417, JString, required = false,
                                 default = nil)
  if valid_773417 != nil:
    section.add "X-Amz-SignedHeaders", valid_773417
  var valid_773418 = header.getOrDefault("X-Amz-Credential")
  valid_773418 = validateParameter(valid_773418, JString, required = false,
                                 default = nil)
  if valid_773418 != nil:
    section.add "X-Amz-Credential", valid_773418
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_773419 = formData.getOrDefault("CacheNodeType")
  valid_773419 = validateParameter(valid_773419, JString, required = false,
                                 default = nil)
  if valid_773419 != nil:
    section.add "CacheNodeType", valid_773419
  var valid_773420 = formData.getOrDefault("PreferredAvailabilityZones")
  valid_773420 = validateParameter(valid_773420, JArray, required = false,
                                 default = nil)
  if valid_773420 != nil:
    section.add "PreferredAvailabilityZones", valid_773420
  var valid_773421 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_773421 = validateParameter(valid_773421, JArray, required = false,
                                 default = nil)
  if valid_773421 != nil:
    section.add "CacheSecurityGroupNames", valid_773421
  var valid_773422 = formData.getOrDefault("PreferredAvailabilityZone")
  valid_773422 = validateParameter(valid_773422, JString, required = false,
                                 default = nil)
  if valid_773422 != nil:
    section.add "PreferredAvailabilityZone", valid_773422
  var valid_773423 = formData.getOrDefault("Port")
  valid_773423 = validateParameter(valid_773423, JInt, required = false, default = nil)
  if valid_773423 != nil:
    section.add "Port", valid_773423
  var valid_773424 = formData.getOrDefault("Engine")
  valid_773424 = validateParameter(valid_773424, JString, required = false,
                                 default = nil)
  if valid_773424 != nil:
    section.add "Engine", valid_773424
  var valid_773425 = formData.getOrDefault("AuthToken")
  valid_773425 = validateParameter(valid_773425, JString, required = false,
                                 default = nil)
  if valid_773425 != nil:
    section.add "AuthToken", valid_773425
  var valid_773426 = formData.getOrDefault("Tags")
  valid_773426 = validateParameter(valid_773426, JArray, required = false,
                                 default = nil)
  if valid_773426 != nil:
    section.add "Tags", valid_773426
  var valid_773427 = formData.getOrDefault("NotificationTopicArn")
  valid_773427 = validateParameter(valid_773427, JString, required = false,
                                 default = nil)
  if valid_773427 != nil:
    section.add "NotificationTopicArn", valid_773427
  var valid_773428 = formData.getOrDefault("SecurityGroupIds")
  valid_773428 = validateParameter(valid_773428, JArray, required = false,
                                 default = nil)
  if valid_773428 != nil:
    section.add "SecurityGroupIds", valid_773428
  var valid_773429 = formData.getOrDefault("ReplicationGroupId")
  valid_773429 = validateParameter(valid_773429, JString, required = false,
                                 default = nil)
  if valid_773429 != nil:
    section.add "ReplicationGroupId", valid_773429
  var valid_773430 = formData.getOrDefault("NumCacheNodes")
  valid_773430 = validateParameter(valid_773430, JInt, required = false, default = nil)
  if valid_773430 != nil:
    section.add "NumCacheNodes", valid_773430
  var valid_773431 = formData.getOrDefault("AZMode")
  valid_773431 = validateParameter(valid_773431, JString, required = false,
                                 default = newJString("single-az"))
  if valid_773431 != nil:
    section.add "AZMode", valid_773431
  var valid_773432 = formData.getOrDefault("SnapshotArns")
  valid_773432 = validateParameter(valid_773432, JArray, required = false,
                                 default = nil)
  if valid_773432 != nil:
    section.add "SnapshotArns", valid_773432
  var valid_773433 = formData.getOrDefault("CacheParameterGroupName")
  valid_773433 = validateParameter(valid_773433, JString, required = false,
                                 default = nil)
  if valid_773433 != nil:
    section.add "CacheParameterGroupName", valid_773433
  var valid_773434 = formData.getOrDefault("CacheSubnetGroupName")
  valid_773434 = validateParameter(valid_773434, JString, required = false,
                                 default = nil)
  if valid_773434 != nil:
    section.add "CacheSubnetGroupName", valid_773434
  var valid_773435 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_773435 = validateParameter(valid_773435, JInt, required = false, default = nil)
  if valid_773435 != nil:
    section.add "SnapshotRetentionLimit", valid_773435
  var valid_773436 = formData.getOrDefault("SnapshotWindow")
  valid_773436 = validateParameter(valid_773436, JString, required = false,
                                 default = nil)
  if valid_773436 != nil:
    section.add "SnapshotWindow", valid_773436
  var valid_773437 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_773437 = validateParameter(valid_773437, JBool, required = false, default = nil)
  if valid_773437 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773437
  var valid_773438 = formData.getOrDefault("EngineVersion")
  valid_773438 = validateParameter(valid_773438, JString, required = false,
                                 default = nil)
  if valid_773438 != nil:
    section.add "EngineVersion", valid_773438
  var valid_773439 = formData.getOrDefault("SnapshotName")
  valid_773439 = validateParameter(valid_773439, JString, required = false,
                                 default = nil)
  if valid_773439 != nil:
    section.add "SnapshotName", valid_773439
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_773440 = formData.getOrDefault("CacheClusterId")
  valid_773440 = validateParameter(valid_773440, JString, required = true,
                                 default = nil)
  if valid_773440 != nil:
    section.add "CacheClusterId", valid_773440
  var valid_773441 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_773441 = validateParameter(valid_773441, JString, required = false,
                                 default = nil)
  if valid_773441 != nil:
    section.add "PreferredMaintenanceWindow", valid_773441
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773442: Call_PostCreateCacheCluster_773407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_773442.validator(path, query, header, formData, body)
  let scheme = call_773442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773442.url(scheme.get, call_773442.host, call_773442.base,
                         call_773442.route, valid.getOrDefault("path"))
  result = hook(call_773442, url, valid)

proc call*(call_773443: Call_PostCreateCacheCluster_773407; CacheClusterId: string;
          CacheNodeType: string = ""; PreferredAvailabilityZones: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil;
          PreferredAvailabilityZone: string = ""; Port: int = 0; Engine: string = "";
          AuthToken: string = ""; Tags: JsonNode = nil;
          NotificationTopicArn: string = ""; SecurityGroupIds: JsonNode = nil;
          ReplicationGroupId: string = ""; NumCacheNodes: int = 0;
          AZMode: string = "single-az"; SnapshotArns: JsonNode = nil;
          Action: string = "CreateCacheCluster";
          CacheParameterGroupName: string = ""; CacheSubnetGroupName: string = "";
          SnapshotRetentionLimit: int = 0; SnapshotWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; EngineVersion: string = "";
          Version: string = "2015-02-02"; SnapshotName: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_773444 = newJObject()
  var formData_773445 = newJObject()
  add(formData_773445, "CacheNodeType", newJString(CacheNodeType))
  if PreferredAvailabilityZones != nil:
    formData_773445.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  if CacheSecurityGroupNames != nil:
    formData_773445.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_773445, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  add(formData_773445, "Port", newJInt(Port))
  add(formData_773445, "Engine", newJString(Engine))
  add(formData_773445, "AuthToken", newJString(AuthToken))
  if Tags != nil:
    formData_773445.add "Tags", Tags
  add(formData_773445, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_773445.add "SecurityGroupIds", SecurityGroupIds
  add(formData_773445, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_773445, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_773445, "AZMode", newJString(AZMode))
  if SnapshotArns != nil:
    formData_773445.add "SnapshotArns", SnapshotArns
  add(query_773444, "Action", newJString(Action))
  add(formData_773445, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_773445, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(formData_773445, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_773445, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_773445, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_773445, "EngineVersion", newJString(EngineVersion))
  add(query_773444, "Version", newJString(Version))
  add(formData_773445, "SnapshotName", newJString(SnapshotName))
  add(formData_773445, "CacheClusterId", newJString(CacheClusterId))
  add(formData_773445, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_773443.call(nil, query_773444, nil, formData_773445, nil)

var postCreateCacheCluster* = Call_PostCreateCacheCluster_773407(
    name: "postCreateCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_PostCreateCacheCluster_773408, base: "/",
    url: url_PostCreateCacheCluster_773409, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheCluster_773369 = ref object of OpenApiRestCall_772597
proc url_GetCreateCacheCluster_773371(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCacheCluster_773370(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheClusterId: JString (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotName: JString
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   Action: JString (required)
  ##   AZMode: JString
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZone: JString
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   ReplicationGroupId: JString
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: JInt
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Version: JString (required)
  ##   NumCacheNodes: JInt
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  section = newJObject()
  var valid_773372 = query.getOrDefault("AuthToken")
  valid_773372 = validateParameter(valid_773372, JString, required = false,
                                 default = nil)
  if valid_773372 != nil:
    section.add "AuthToken", valid_773372
  var valid_773373 = query.getOrDefault("Engine")
  valid_773373 = validateParameter(valid_773373, JString, required = false,
                                 default = nil)
  if valid_773373 != nil:
    section.add "Engine", valid_773373
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_773374 = query.getOrDefault("CacheClusterId")
  valid_773374 = validateParameter(valid_773374, JString, required = true,
                                 default = nil)
  if valid_773374 != nil:
    section.add "CacheClusterId", valid_773374
  var valid_773375 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_773375 = validateParameter(valid_773375, JString, required = false,
                                 default = nil)
  if valid_773375 != nil:
    section.add "PreferredMaintenanceWindow", valid_773375
  var valid_773376 = query.getOrDefault("SnapshotRetentionLimit")
  valid_773376 = validateParameter(valid_773376, JInt, required = false, default = nil)
  if valid_773376 != nil:
    section.add "SnapshotRetentionLimit", valid_773376
  var valid_773377 = query.getOrDefault("CacheNodeType")
  valid_773377 = validateParameter(valid_773377, JString, required = false,
                                 default = nil)
  if valid_773377 != nil:
    section.add "CacheNodeType", valid_773377
  var valid_773378 = query.getOrDefault("SnapshotName")
  valid_773378 = validateParameter(valid_773378, JString, required = false,
                                 default = nil)
  if valid_773378 != nil:
    section.add "SnapshotName", valid_773378
  var valid_773379 = query.getOrDefault("PreferredAvailabilityZones")
  valid_773379 = validateParameter(valid_773379, JArray, required = false,
                                 default = nil)
  if valid_773379 != nil:
    section.add "PreferredAvailabilityZones", valid_773379
  var valid_773380 = query.getOrDefault("CacheParameterGroupName")
  valid_773380 = validateParameter(valid_773380, JString, required = false,
                                 default = nil)
  if valid_773380 != nil:
    section.add "CacheParameterGroupName", valid_773380
  var valid_773381 = query.getOrDefault("Tags")
  valid_773381 = validateParameter(valid_773381, JArray, required = false,
                                 default = nil)
  if valid_773381 != nil:
    section.add "Tags", valid_773381
  var valid_773382 = query.getOrDefault("Action")
  valid_773382 = validateParameter(valid_773382, JString, required = true,
                                 default = newJString("CreateCacheCluster"))
  if valid_773382 != nil:
    section.add "Action", valid_773382
  var valid_773383 = query.getOrDefault("AZMode")
  valid_773383 = validateParameter(valid_773383, JString, required = false,
                                 default = newJString("single-az"))
  if valid_773383 != nil:
    section.add "AZMode", valid_773383
  var valid_773384 = query.getOrDefault("NotificationTopicArn")
  valid_773384 = validateParameter(valid_773384, JString, required = false,
                                 default = nil)
  if valid_773384 != nil:
    section.add "NotificationTopicArn", valid_773384
  var valid_773385 = query.getOrDefault("PreferredAvailabilityZone")
  valid_773385 = validateParameter(valid_773385, JString, required = false,
                                 default = nil)
  if valid_773385 != nil:
    section.add "PreferredAvailabilityZone", valid_773385
  var valid_773386 = query.getOrDefault("ReplicationGroupId")
  valid_773386 = validateParameter(valid_773386, JString, required = false,
                                 default = nil)
  if valid_773386 != nil:
    section.add "ReplicationGroupId", valid_773386
  var valid_773387 = query.getOrDefault("EngineVersion")
  valid_773387 = validateParameter(valid_773387, JString, required = false,
                                 default = nil)
  if valid_773387 != nil:
    section.add "EngineVersion", valid_773387
  var valid_773388 = query.getOrDefault("CacheSubnetGroupName")
  valid_773388 = validateParameter(valid_773388, JString, required = false,
                                 default = nil)
  if valid_773388 != nil:
    section.add "CacheSubnetGroupName", valid_773388
  var valid_773389 = query.getOrDefault("SnapshotArns")
  valid_773389 = validateParameter(valid_773389, JArray, required = false,
                                 default = nil)
  if valid_773389 != nil:
    section.add "SnapshotArns", valid_773389
  var valid_773390 = query.getOrDefault("SecurityGroupIds")
  valid_773390 = validateParameter(valid_773390, JArray, required = false,
                                 default = nil)
  if valid_773390 != nil:
    section.add "SecurityGroupIds", valid_773390
  var valid_773391 = query.getOrDefault("Port")
  valid_773391 = validateParameter(valid_773391, JInt, required = false, default = nil)
  if valid_773391 != nil:
    section.add "Port", valid_773391
  var valid_773392 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_773392 = validateParameter(valid_773392, JBool, required = false, default = nil)
  if valid_773392 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773392
  var valid_773393 = query.getOrDefault("CacheSecurityGroupNames")
  valid_773393 = validateParameter(valid_773393, JArray, required = false,
                                 default = nil)
  if valid_773393 != nil:
    section.add "CacheSecurityGroupNames", valid_773393
  var valid_773394 = query.getOrDefault("Version")
  valid_773394 = validateParameter(valid_773394, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773394 != nil:
    section.add "Version", valid_773394
  var valid_773395 = query.getOrDefault("NumCacheNodes")
  valid_773395 = validateParameter(valid_773395, JInt, required = false, default = nil)
  if valid_773395 != nil:
    section.add "NumCacheNodes", valid_773395
  var valid_773396 = query.getOrDefault("SnapshotWindow")
  valid_773396 = validateParameter(valid_773396, JString, required = false,
                                 default = nil)
  if valid_773396 != nil:
    section.add "SnapshotWindow", valid_773396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773397 = header.getOrDefault("X-Amz-Date")
  valid_773397 = validateParameter(valid_773397, JString, required = false,
                                 default = nil)
  if valid_773397 != nil:
    section.add "X-Amz-Date", valid_773397
  var valid_773398 = header.getOrDefault("X-Amz-Security-Token")
  valid_773398 = validateParameter(valid_773398, JString, required = false,
                                 default = nil)
  if valid_773398 != nil:
    section.add "X-Amz-Security-Token", valid_773398
  var valid_773399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773399 = validateParameter(valid_773399, JString, required = false,
                                 default = nil)
  if valid_773399 != nil:
    section.add "X-Amz-Content-Sha256", valid_773399
  var valid_773400 = header.getOrDefault("X-Amz-Algorithm")
  valid_773400 = validateParameter(valid_773400, JString, required = false,
                                 default = nil)
  if valid_773400 != nil:
    section.add "X-Amz-Algorithm", valid_773400
  var valid_773401 = header.getOrDefault("X-Amz-Signature")
  valid_773401 = validateParameter(valid_773401, JString, required = false,
                                 default = nil)
  if valid_773401 != nil:
    section.add "X-Amz-Signature", valid_773401
  var valid_773402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773402 = validateParameter(valid_773402, JString, required = false,
                                 default = nil)
  if valid_773402 != nil:
    section.add "X-Amz-SignedHeaders", valid_773402
  var valid_773403 = header.getOrDefault("X-Amz-Credential")
  valid_773403 = validateParameter(valid_773403, JString, required = false,
                                 default = nil)
  if valid_773403 != nil:
    section.add "X-Amz-Credential", valid_773403
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773404: Call_GetCreateCacheCluster_773369; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ## 
  let valid = call_773404.validator(path, query, header, formData, body)
  let scheme = call_773404.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773404.url(scheme.get, call_773404.host, call_773404.base,
                         call_773404.route, valid.getOrDefault("path"))
  result = hook(call_773404, url, valid)

proc call*(call_773405: Call_GetCreateCacheCluster_773369; CacheClusterId: string;
          AuthToken: string = ""; Engine: string = "";
          PreferredMaintenanceWindow: string = ""; SnapshotRetentionLimit: int = 0;
          CacheNodeType: string = ""; SnapshotName: string = "";
          PreferredAvailabilityZones: JsonNode = nil;
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateCacheCluster"; AZMode: string = "single-az";
          NotificationTopicArn: string = ""; PreferredAvailabilityZone: string = "";
          ReplicationGroupId: string = ""; EngineVersion: string = "";
          CacheSubnetGroupName: string = ""; SnapshotArns: JsonNode = nil;
          SecurityGroupIds: JsonNode = nil; Port: int = 0;
          AutoMinorVersionUpgrade: bool = false;
          CacheSecurityGroupNames: JsonNode = nil; Version: string = "2015-02-02";
          NumCacheNodes: int = 0; SnapshotWindow: string = ""): Recallable =
  ## getCreateCacheCluster
  ## <p>Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.</p> <p>This operation is not supported for Redis (cluster mode enabled) clusters.</p>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : <p>The name of the cache engine to be used for this cluster.</p> <p>Valid values for this parameter are: <code>memcached</code> | <code>redis</code> </p>
  ##   CacheClusterId: string (required)
  ##                 : <p>The node group (shard) identifier. This parameter is stored as a lowercase string.</p> <p> <b>Constraints:</b> </p> <ul> <li> <p>A name must contain from 1 to 50 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot taken today is retained for 5 days before being deleted.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Default: 0 (i.e., automatic backups are disabled for this cache cluster).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   SnapshotName: string
  ##               : <p>The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to <code>restoring</code> while the new node group (shard) is being created.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   PreferredAvailabilityZones: JArray
  ##                             : <p>A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.</p> <p>This option is only supported on Memcached.</p> <note> <p>If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheNodes</code>.</p> </note> <p>If you want all the nodes in the same Availability Zone, use <code>PreferredAvailabilityZone</code> instead, or repeat the Availability Zone multiple times in the list.</p> <p>Default: System chosen Availability Zones.</p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has <code>cluster-enabled='yes'</code> when creating a cluster.
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource.
  ##   Action: string (required)
  ##   AZMode: string
  ##         : <p>Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region.</p> <p>This parameter is only supported for Memcached clusters.</p> <p>If the <code>AZMode</code> and <code>PreferredAvailabilityZones</code> are not specified, ElastiCache assumes <code>single-az</code> mode.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   PreferredAvailabilityZone: string
  ##                            : <p>The EC2 Availability Zone in which the cluster is created.</p> <p>All nodes belonging to this Memcached cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use <code>PreferredAvailabilityZones</code>.</p> <p>Default: System chosen Availability Zone.</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.</p> <p>If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the subnet group to be used for the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more VPC security groups associated with the cluster.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: int
  ##       : The port number on which each of the cache nodes accepts connections.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of security group names to associate with this cluster.</p> <p>Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Version: string (required)
  ##   NumCacheNodes: int
  ##                : <p>The initial number of cache nodes that the cluster has.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <p>If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at <a 
  ## href="http://aws.amazon.com/contact-us/elasticache-node-limit-request/">http://aws.amazon.com/contact-us/elasticache-node-limit-request/</a>.</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p> <note> <p>This parameter is only valid if the <code>Engine</code> parameter is <code>redis</code>.</p> </note>
  var query_773406 = newJObject()
  add(query_773406, "AuthToken", newJString(AuthToken))
  add(query_773406, "Engine", newJString(Engine))
  add(query_773406, "CacheClusterId", newJString(CacheClusterId))
  add(query_773406, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_773406, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_773406, "CacheNodeType", newJString(CacheNodeType))
  add(query_773406, "SnapshotName", newJString(SnapshotName))
  if PreferredAvailabilityZones != nil:
    query_773406.add "PreferredAvailabilityZones", PreferredAvailabilityZones
  add(query_773406, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_773406.add "Tags", Tags
  add(query_773406, "Action", newJString(Action))
  add(query_773406, "AZMode", newJString(AZMode))
  add(query_773406, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_773406, "PreferredAvailabilityZone",
      newJString(PreferredAvailabilityZone))
  add(query_773406, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773406, "EngineVersion", newJString(EngineVersion))
  add(query_773406, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  if SnapshotArns != nil:
    query_773406.add "SnapshotArns", SnapshotArns
  if SecurityGroupIds != nil:
    query_773406.add "SecurityGroupIds", SecurityGroupIds
  add(query_773406, "Port", newJInt(Port))
  add(query_773406, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if CacheSecurityGroupNames != nil:
    query_773406.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_773406, "Version", newJString(Version))
  add(query_773406, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_773406, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_773405.call(nil, query_773406, nil, nil, nil)

var getCreateCacheCluster* = Call_GetCreateCacheCluster_773369(
    name: "getCreateCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheCluster",
    validator: validate_GetCreateCacheCluster_773370, base: "/",
    url: url_GetCreateCacheCluster_773371, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheParameterGroup_773464 = ref object of OpenApiRestCall_772597
proc url_PostCreateCacheParameterGroup_773466(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCacheParameterGroup_773465(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773467 = query.getOrDefault("Action")
  valid_773467 = validateParameter(valid_773467, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_773467 != nil:
    section.add "Action", valid_773467
  var valid_773468 = query.getOrDefault("Version")
  valid_773468 = validateParameter(valid_773468, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773468 != nil:
    section.add "Version", valid_773468
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773469 = header.getOrDefault("X-Amz-Date")
  valid_773469 = validateParameter(valid_773469, JString, required = false,
                                 default = nil)
  if valid_773469 != nil:
    section.add "X-Amz-Date", valid_773469
  var valid_773470 = header.getOrDefault("X-Amz-Security-Token")
  valid_773470 = validateParameter(valid_773470, JString, required = false,
                                 default = nil)
  if valid_773470 != nil:
    section.add "X-Amz-Security-Token", valid_773470
  var valid_773471 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773471 = validateParameter(valid_773471, JString, required = false,
                                 default = nil)
  if valid_773471 != nil:
    section.add "X-Amz-Content-Sha256", valid_773471
  var valid_773472 = header.getOrDefault("X-Amz-Algorithm")
  valid_773472 = validateParameter(valid_773472, JString, required = false,
                                 default = nil)
  if valid_773472 != nil:
    section.add "X-Amz-Algorithm", valid_773472
  var valid_773473 = header.getOrDefault("X-Amz-Signature")
  valid_773473 = validateParameter(valid_773473, JString, required = false,
                                 default = nil)
  if valid_773473 != nil:
    section.add "X-Amz-Signature", valid_773473
  var valid_773474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773474 = validateParameter(valid_773474, JString, required = false,
                                 default = nil)
  if valid_773474 != nil:
    section.add "X-Amz-SignedHeaders", valid_773474
  var valid_773475 = header.getOrDefault("X-Amz-Credential")
  valid_773475 = validateParameter(valid_773475, JString, required = false,
                                 default = nil)
  if valid_773475 != nil:
    section.add "X-Amz-Credential", valid_773475
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_773476 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_773476 = validateParameter(valid_773476, JString, required = true,
                                 default = nil)
  if valid_773476 != nil:
    section.add "CacheParameterGroupFamily", valid_773476
  var valid_773477 = formData.getOrDefault("CacheParameterGroupName")
  valid_773477 = validateParameter(valid_773477, JString, required = true,
                                 default = nil)
  if valid_773477 != nil:
    section.add "CacheParameterGroupName", valid_773477
  var valid_773478 = formData.getOrDefault("Description")
  valid_773478 = validateParameter(valid_773478, JString, required = true,
                                 default = nil)
  if valid_773478 != nil:
    section.add "Description", valid_773478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773479: Call_PostCreateCacheParameterGroup_773464; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_773479.validator(path, query, header, formData, body)
  let scheme = call_773479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773479.url(scheme.get, call_773479.host, call_773479.base,
                         call_773479.route, valid.getOrDefault("path"))
  result = hook(call_773479, url, valid)

proc call*(call_773480: Call_PostCreateCacheParameterGroup_773464;
          CacheParameterGroupFamily: string; CacheParameterGroupName: string;
          Description: string; Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  var query_773481 = newJObject()
  var formData_773482 = newJObject()
  add(formData_773482, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(query_773481, "Action", newJString(Action))
  add(formData_773482, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_773481, "Version", newJString(Version))
  add(formData_773482, "Description", newJString(Description))
  result = call_773480.call(nil, query_773481, nil, formData_773482, nil)

var postCreateCacheParameterGroup* = Call_PostCreateCacheParameterGroup_773464(
    name: "postCreateCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_PostCreateCacheParameterGroup_773465, base: "/",
    url: url_PostCreateCacheParameterGroup_773466,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheParameterGroup_773446 = ref object of OpenApiRestCall_772597
proc url_GetCreateCacheParameterGroup_773448(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCacheParameterGroup_773447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupName: JString (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_773449 = query.getOrDefault("Description")
  valid_773449 = validateParameter(valid_773449, JString, required = true,
                                 default = nil)
  if valid_773449 != nil:
    section.add "Description", valid_773449
  var valid_773450 = query.getOrDefault("CacheParameterGroupName")
  valid_773450 = validateParameter(valid_773450, JString, required = true,
                                 default = nil)
  if valid_773450 != nil:
    section.add "CacheParameterGroupName", valid_773450
  var valid_773451 = query.getOrDefault("Action")
  valid_773451 = validateParameter(valid_773451, JString, required = true, default = newJString(
      "CreateCacheParameterGroup"))
  if valid_773451 != nil:
    section.add "Action", valid_773451
  var valid_773452 = query.getOrDefault("Version")
  valid_773452 = validateParameter(valid_773452, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773452 != nil:
    section.add "Version", valid_773452
  var valid_773453 = query.getOrDefault("CacheParameterGroupFamily")
  valid_773453 = validateParameter(valid_773453, JString, required = true,
                                 default = nil)
  if valid_773453 != nil:
    section.add "CacheParameterGroupFamily", valid_773453
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773454 = header.getOrDefault("X-Amz-Date")
  valid_773454 = validateParameter(valid_773454, JString, required = false,
                                 default = nil)
  if valid_773454 != nil:
    section.add "X-Amz-Date", valid_773454
  var valid_773455 = header.getOrDefault("X-Amz-Security-Token")
  valid_773455 = validateParameter(valid_773455, JString, required = false,
                                 default = nil)
  if valid_773455 != nil:
    section.add "X-Amz-Security-Token", valid_773455
  var valid_773456 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773456 = validateParameter(valid_773456, JString, required = false,
                                 default = nil)
  if valid_773456 != nil:
    section.add "X-Amz-Content-Sha256", valid_773456
  var valid_773457 = header.getOrDefault("X-Amz-Algorithm")
  valid_773457 = validateParameter(valid_773457, JString, required = false,
                                 default = nil)
  if valid_773457 != nil:
    section.add "X-Amz-Algorithm", valid_773457
  var valid_773458 = header.getOrDefault("X-Amz-Signature")
  valid_773458 = validateParameter(valid_773458, JString, required = false,
                                 default = nil)
  if valid_773458 != nil:
    section.add "X-Amz-Signature", valid_773458
  var valid_773459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773459 = validateParameter(valid_773459, JString, required = false,
                                 default = nil)
  if valid_773459 != nil:
    section.add "X-Amz-SignedHeaders", valid_773459
  var valid_773460 = header.getOrDefault("X-Amz-Credential")
  valid_773460 = validateParameter(valid_773460, JString, required = false,
                                 default = nil)
  if valid_773460 != nil:
    section.add "X-Amz-Credential", valid_773460
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773461: Call_GetCreateCacheParameterGroup_773446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ## 
  let valid = call_773461.validator(path, query, header, formData, body)
  let scheme = call_773461.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773461.url(scheme.get, call_773461.host, call_773461.base,
                         call_773461.route, valid.getOrDefault("path"))
  result = hook(call_773461, url, valid)

proc call*(call_773462: Call_GetCreateCacheParameterGroup_773446;
          Description: string; CacheParameterGroupName: string;
          CacheParameterGroupFamily: string;
          Action: string = "CreateCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheParameterGroup
  ## <p>Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.</p> <p>A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html">ModifyCacheParameterGroup</a> in the ElastiCache API Reference.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html">Parameters and Parameter Groups</a> in the ElastiCache User Guide.</p> </li> </ul>
  ##   Description: string (required)
  ##              : A user-specified description for the cache parameter group.
  ##   CacheParameterGroupName: string (required)
  ##                          : A user-specified name for the cache parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family that the cache parameter group can be used with.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  var query_773463 = newJObject()
  add(query_773463, "Description", newJString(Description))
  add(query_773463, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_773463, "Action", newJString(Action))
  add(query_773463, "Version", newJString(Version))
  add(query_773463, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  result = call_773462.call(nil, query_773463, nil, nil, nil)

var getCreateCacheParameterGroup* = Call_GetCreateCacheParameterGroup_773446(
    name: "getCreateCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=CreateCacheParameterGroup",
    validator: validate_GetCreateCacheParameterGroup_773447, base: "/",
    url: url_GetCreateCacheParameterGroup_773448,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSecurityGroup_773500 = ref object of OpenApiRestCall_772597
proc url_PostCreateCacheSecurityGroup_773502(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCacheSecurityGroup_773501(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773503 = query.getOrDefault("Action")
  valid_773503 = validateParameter(valid_773503, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_773503 != nil:
    section.add "Action", valid_773503
  var valid_773504 = query.getOrDefault("Version")
  valid_773504 = validateParameter(valid_773504, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773504 != nil:
    section.add "Version", valid_773504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773505 = header.getOrDefault("X-Amz-Date")
  valid_773505 = validateParameter(valid_773505, JString, required = false,
                                 default = nil)
  if valid_773505 != nil:
    section.add "X-Amz-Date", valid_773505
  var valid_773506 = header.getOrDefault("X-Amz-Security-Token")
  valid_773506 = validateParameter(valid_773506, JString, required = false,
                                 default = nil)
  if valid_773506 != nil:
    section.add "X-Amz-Security-Token", valid_773506
  var valid_773507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773507 = validateParameter(valid_773507, JString, required = false,
                                 default = nil)
  if valid_773507 != nil:
    section.add "X-Amz-Content-Sha256", valid_773507
  var valid_773508 = header.getOrDefault("X-Amz-Algorithm")
  valid_773508 = validateParameter(valid_773508, JString, required = false,
                                 default = nil)
  if valid_773508 != nil:
    section.add "X-Amz-Algorithm", valid_773508
  var valid_773509 = header.getOrDefault("X-Amz-Signature")
  valid_773509 = validateParameter(valid_773509, JString, required = false,
                                 default = nil)
  if valid_773509 != nil:
    section.add "X-Amz-Signature", valid_773509
  var valid_773510 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773510 = validateParameter(valid_773510, JString, required = false,
                                 default = nil)
  if valid_773510 != nil:
    section.add "X-Amz-SignedHeaders", valid_773510
  var valid_773511 = header.getOrDefault("X-Amz-Credential")
  valid_773511 = validateParameter(valid_773511, JString, required = false,
                                 default = nil)
  if valid_773511 != nil:
    section.add "X-Amz-Credential", valid_773511
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_773512 = formData.getOrDefault("CacheSecurityGroupName")
  valid_773512 = validateParameter(valid_773512, JString, required = true,
                                 default = nil)
  if valid_773512 != nil:
    section.add "CacheSecurityGroupName", valid_773512
  var valid_773513 = formData.getOrDefault("Description")
  valid_773513 = validateParameter(valid_773513, JString, required = true,
                                 default = nil)
  if valid_773513 != nil:
    section.add "Description", valid_773513
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773514: Call_PostCreateCacheSecurityGroup_773500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_773514.validator(path, query, header, formData, body)
  let scheme = call_773514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773514.url(scheme.get, call_773514.host, call_773514.base,
                         call_773514.route, valid.getOrDefault("path"))
  result = hook(call_773514, url, valid)

proc call*(call_773515: Call_PostCreateCacheSecurityGroup_773500;
          CacheSecurityGroupName: string; Description: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : A description for the cache security group.
  var query_773516 = newJObject()
  var formData_773517 = newJObject()
  add(formData_773517, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_773516, "Action", newJString(Action))
  add(query_773516, "Version", newJString(Version))
  add(formData_773517, "Description", newJString(Description))
  result = call_773515.call(nil, query_773516, nil, formData_773517, nil)

var postCreateCacheSecurityGroup* = Call_PostCreateCacheSecurityGroup_773500(
    name: "postCreateCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_PostCreateCacheSecurityGroup_773501, base: "/",
    url: url_PostCreateCacheSecurityGroup_773502,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSecurityGroup_773483 = ref object of OpenApiRestCall_772597
proc url_GetCreateCacheSecurityGroup_773485(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCacheSecurityGroup_773484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Description: JString (required)
  ##              : A description for the cache security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_773486 = query.getOrDefault("CacheSecurityGroupName")
  valid_773486 = validateParameter(valid_773486, JString, required = true,
                                 default = nil)
  if valid_773486 != nil:
    section.add "CacheSecurityGroupName", valid_773486
  var valid_773487 = query.getOrDefault("Description")
  valid_773487 = validateParameter(valid_773487, JString, required = true,
                                 default = nil)
  if valid_773487 != nil:
    section.add "Description", valid_773487
  var valid_773488 = query.getOrDefault("Action")
  valid_773488 = validateParameter(valid_773488, JString, required = true, default = newJString(
      "CreateCacheSecurityGroup"))
  if valid_773488 != nil:
    section.add "Action", valid_773488
  var valid_773489 = query.getOrDefault("Version")
  valid_773489 = validateParameter(valid_773489, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773489 != nil:
    section.add "Version", valid_773489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773490 = header.getOrDefault("X-Amz-Date")
  valid_773490 = validateParameter(valid_773490, JString, required = false,
                                 default = nil)
  if valid_773490 != nil:
    section.add "X-Amz-Date", valid_773490
  var valid_773491 = header.getOrDefault("X-Amz-Security-Token")
  valid_773491 = validateParameter(valid_773491, JString, required = false,
                                 default = nil)
  if valid_773491 != nil:
    section.add "X-Amz-Security-Token", valid_773491
  var valid_773492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773492 = validateParameter(valid_773492, JString, required = false,
                                 default = nil)
  if valid_773492 != nil:
    section.add "X-Amz-Content-Sha256", valid_773492
  var valid_773493 = header.getOrDefault("X-Amz-Algorithm")
  valid_773493 = validateParameter(valid_773493, JString, required = false,
                                 default = nil)
  if valid_773493 != nil:
    section.add "X-Amz-Algorithm", valid_773493
  var valid_773494 = header.getOrDefault("X-Amz-Signature")
  valid_773494 = validateParameter(valid_773494, JString, required = false,
                                 default = nil)
  if valid_773494 != nil:
    section.add "X-Amz-Signature", valid_773494
  var valid_773495 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773495 = validateParameter(valid_773495, JString, required = false,
                                 default = nil)
  if valid_773495 != nil:
    section.add "X-Amz-SignedHeaders", valid_773495
  var valid_773496 = header.getOrDefault("X-Amz-Credential")
  valid_773496 = validateParameter(valid_773496, JString, required = false,
                                 default = nil)
  if valid_773496 != nil:
    section.add "X-Amz-Credential", valid_773496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773497: Call_GetCreateCacheSecurityGroup_773483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ## 
  let valid = call_773497.validator(path, query, header, formData, body)
  let scheme = call_773497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773497.url(scheme.get, call_773497.host, call_773497.base,
                         call_773497.route, valid.getOrDefault("path"))
  result = hook(call_773497, url, valid)

proc call*(call_773498: Call_GetCreateCacheSecurityGroup_773483;
          CacheSecurityGroupName: string; Description: string;
          Action: string = "CreateCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSecurityGroup
  ## <p>Creates a new cache security group. Use a cache security group to control access to one or more clusters.</p> <p>Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html">CreateCacheSubnetGroup</a>.</p>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>A name for the cache security group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default".</p> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Description: string (required)
  ##              : A description for the cache security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773499 = newJObject()
  add(query_773499, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_773499, "Description", newJString(Description))
  add(query_773499, "Action", newJString(Action))
  add(query_773499, "Version", newJString(Version))
  result = call_773498.call(nil, query_773499, nil, nil, nil)

var getCreateCacheSecurityGroup* = Call_GetCreateCacheSecurityGroup_773483(
    name: "getCreateCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSecurityGroup",
    validator: validate_GetCreateCacheSecurityGroup_773484, base: "/",
    url: url_GetCreateCacheSecurityGroup_773485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCacheSubnetGroup_773536 = ref object of OpenApiRestCall_772597
proc url_PostCreateCacheSubnetGroup_773538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateCacheSubnetGroup_773537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773539 = query.getOrDefault("Action")
  valid_773539 = validateParameter(valid_773539, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_773539 != nil:
    section.add "Action", valid_773539
  var valid_773540 = query.getOrDefault("Version")
  valid_773540 = validateParameter(valid_773540, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773540 != nil:
    section.add "Version", valid_773540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773541 = header.getOrDefault("X-Amz-Date")
  valid_773541 = validateParameter(valid_773541, JString, required = false,
                                 default = nil)
  if valid_773541 != nil:
    section.add "X-Amz-Date", valid_773541
  var valid_773542 = header.getOrDefault("X-Amz-Security-Token")
  valid_773542 = validateParameter(valid_773542, JString, required = false,
                                 default = nil)
  if valid_773542 != nil:
    section.add "X-Amz-Security-Token", valid_773542
  var valid_773543 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773543 = validateParameter(valid_773543, JString, required = false,
                                 default = nil)
  if valid_773543 != nil:
    section.add "X-Amz-Content-Sha256", valid_773543
  var valid_773544 = header.getOrDefault("X-Amz-Algorithm")
  valid_773544 = validateParameter(valid_773544, JString, required = false,
                                 default = nil)
  if valid_773544 != nil:
    section.add "X-Amz-Algorithm", valid_773544
  var valid_773545 = header.getOrDefault("X-Amz-Signature")
  valid_773545 = validateParameter(valid_773545, JString, required = false,
                                 default = nil)
  if valid_773545 != nil:
    section.add "X-Amz-Signature", valid_773545
  var valid_773546 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773546 = validateParameter(valid_773546, JString, required = false,
                                 default = nil)
  if valid_773546 != nil:
    section.add "X-Amz-SignedHeaders", valid_773546
  var valid_773547 = header.getOrDefault("X-Amz-Credential")
  valid_773547 = validateParameter(valid_773547, JString, required = false,
                                 default = nil)
  if valid_773547 != nil:
    section.add "X-Amz-Credential", valid_773547
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_773548 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_773548 = validateParameter(valid_773548, JString, required = true,
                                 default = nil)
  if valid_773548 != nil:
    section.add "CacheSubnetGroupDescription", valid_773548
  var valid_773549 = formData.getOrDefault("SubnetIds")
  valid_773549 = validateParameter(valid_773549, JArray, required = true, default = nil)
  if valid_773549 != nil:
    section.add "SubnetIds", valid_773549
  var valid_773550 = formData.getOrDefault("CacheSubnetGroupName")
  valid_773550 = validateParameter(valid_773550, JString, required = true,
                                 default = nil)
  if valid_773550 != nil:
    section.add "CacheSubnetGroupName", valid_773550
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773551: Call_PostCreateCacheSubnetGroup_773536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_773551.validator(path, query, header, formData, body)
  let scheme = call_773551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773551.url(scheme.get, call_773551.host, call_773551.base,
                         call_773551.route, valid.getOrDefault("path"))
  result = hook(call_773551, url, valid)

proc call*(call_773552: Call_PostCreateCacheSubnetGroup_773536;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_773553 = newJObject()
  var formData_773554 = newJObject()
  add(formData_773554, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    formData_773554.add "SubnetIds", SubnetIds
  add(query_773553, "Action", newJString(Action))
  add(formData_773554, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_773553, "Version", newJString(Version))
  result = call_773552.call(nil, query_773553, nil, formData_773554, nil)

var postCreateCacheSubnetGroup* = Call_PostCreateCacheSubnetGroup_773536(
    name: "postCreateCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_PostCreateCacheSubnetGroup_773537, base: "/",
    url: url_PostCreateCacheSubnetGroup_773538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCacheSubnetGroup_773518 = ref object of OpenApiRestCall_772597
proc url_GetCreateCacheSubnetGroup_773520(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateCacheSubnetGroup_773519(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString (required)
  ##                              : A description for the cache subnet group.
  ##   Action: JString (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSubnetGroupDescription` field"
  var valid_773521 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_773521 = validateParameter(valid_773521, JString, required = true,
                                 default = nil)
  if valid_773521 != nil:
    section.add "CacheSubnetGroupDescription", valid_773521
  var valid_773522 = query.getOrDefault("Action")
  valid_773522 = validateParameter(valid_773522, JString, required = true,
                                 default = newJString("CreateCacheSubnetGroup"))
  if valid_773522 != nil:
    section.add "Action", valid_773522
  var valid_773523 = query.getOrDefault("SubnetIds")
  valid_773523 = validateParameter(valid_773523, JArray, required = true, default = nil)
  if valid_773523 != nil:
    section.add "SubnetIds", valid_773523
  var valid_773524 = query.getOrDefault("CacheSubnetGroupName")
  valid_773524 = validateParameter(valid_773524, JString, required = true,
                                 default = nil)
  if valid_773524 != nil:
    section.add "CacheSubnetGroupName", valid_773524
  var valid_773525 = query.getOrDefault("Version")
  valid_773525 = validateParameter(valid_773525, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773525 != nil:
    section.add "Version", valid_773525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773526 = header.getOrDefault("X-Amz-Date")
  valid_773526 = validateParameter(valid_773526, JString, required = false,
                                 default = nil)
  if valid_773526 != nil:
    section.add "X-Amz-Date", valid_773526
  var valid_773527 = header.getOrDefault("X-Amz-Security-Token")
  valid_773527 = validateParameter(valid_773527, JString, required = false,
                                 default = nil)
  if valid_773527 != nil:
    section.add "X-Amz-Security-Token", valid_773527
  var valid_773528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773528 = validateParameter(valid_773528, JString, required = false,
                                 default = nil)
  if valid_773528 != nil:
    section.add "X-Amz-Content-Sha256", valid_773528
  var valid_773529 = header.getOrDefault("X-Amz-Algorithm")
  valid_773529 = validateParameter(valid_773529, JString, required = false,
                                 default = nil)
  if valid_773529 != nil:
    section.add "X-Amz-Algorithm", valid_773529
  var valid_773530 = header.getOrDefault("X-Amz-Signature")
  valid_773530 = validateParameter(valid_773530, JString, required = false,
                                 default = nil)
  if valid_773530 != nil:
    section.add "X-Amz-Signature", valid_773530
  var valid_773531 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773531 = validateParameter(valid_773531, JString, required = false,
                                 default = nil)
  if valid_773531 != nil:
    section.add "X-Amz-SignedHeaders", valid_773531
  var valid_773532 = header.getOrDefault("X-Amz-Credential")
  valid_773532 = validateParameter(valid_773532, JString, required = false,
                                 default = nil)
  if valid_773532 != nil:
    section.add "X-Amz-Credential", valid_773532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773533: Call_GetCreateCacheSubnetGroup_773518; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ## 
  let valid = call_773533.validator(path, query, header, formData, body)
  let scheme = call_773533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773533.url(scheme.get, call_773533.host, call_773533.base,
                         call_773533.route, valid.getOrDefault("path"))
  result = hook(call_773533, url, valid)

proc call*(call_773534: Call_GetCreateCacheSubnetGroup_773518;
          CacheSubnetGroupDescription: string; SubnetIds: JsonNode;
          CacheSubnetGroupName: string; Action: string = "CreateCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateCacheSubnetGroup
  ## <p>Creates a new cache subnet group.</p> <p>Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSubnetGroupDescription: string (required)
  ##                              : A description for the cache subnet group.
  ##   Action: string (required)
  ##   SubnetIds: JArray (required)
  ##            : A list of VPC subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>A name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_773535 = newJObject()
  add(query_773535, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(query_773535, "Action", newJString(Action))
  if SubnetIds != nil:
    query_773535.add "SubnetIds", SubnetIds
  add(query_773535, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_773535, "Version", newJString(Version))
  result = call_773534.call(nil, query_773535, nil, nil, nil)

var getCreateCacheSubnetGroup* = Call_GetCreateCacheSubnetGroup_773518(
    name: "getCreateCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateCacheSubnetGroup",
    validator: validate_GetCreateCacheSubnetGroup_773519, base: "/",
    url: url_GetCreateCacheSubnetGroup_773520,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateReplicationGroup_773599 = ref object of OpenApiRestCall_772597
proc url_PostCreateReplicationGroup_773601(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateReplicationGroup_773600(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773602 = query.getOrDefault("Action")
  valid_773602 = validateParameter(valid_773602, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_773602 != nil:
    section.add "Action", valid_773602
  var valid_773603 = query.getOrDefault("Version")
  valid_773603 = validateParameter(valid_773603, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773603 != nil:
    section.add "Version", valid_773603
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773604 = header.getOrDefault("X-Amz-Date")
  valid_773604 = validateParameter(valid_773604, JString, required = false,
                                 default = nil)
  if valid_773604 != nil:
    section.add "X-Amz-Date", valid_773604
  var valid_773605 = header.getOrDefault("X-Amz-Security-Token")
  valid_773605 = validateParameter(valid_773605, JString, required = false,
                                 default = nil)
  if valid_773605 != nil:
    section.add "X-Amz-Security-Token", valid_773605
  var valid_773606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773606 = validateParameter(valid_773606, JString, required = false,
                                 default = nil)
  if valid_773606 != nil:
    section.add "X-Amz-Content-Sha256", valid_773606
  var valid_773607 = header.getOrDefault("X-Amz-Algorithm")
  valid_773607 = validateParameter(valid_773607, JString, required = false,
                                 default = nil)
  if valid_773607 != nil:
    section.add "X-Amz-Algorithm", valid_773607
  var valid_773608 = header.getOrDefault("X-Amz-Signature")
  valid_773608 = validateParameter(valid_773608, JString, required = false,
                                 default = nil)
  if valid_773608 != nil:
    section.add "X-Amz-Signature", valid_773608
  var valid_773609 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773609 = validateParameter(valid_773609, JString, required = false,
                                 default = nil)
  if valid_773609 != nil:
    section.add "X-Amz-SignedHeaders", valid_773609
  var valid_773610 = header.getOrDefault("X-Amz-Credential")
  valid_773610 = validateParameter(valid_773610, JString, required = false,
                                 default = nil)
  if valid_773610 != nil:
    section.add "X-Amz-Credential", valid_773610
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_773611 = formData.getOrDefault("CacheNodeType")
  valid_773611 = validateParameter(valid_773611, JString, required = false,
                                 default = nil)
  if valid_773611 != nil:
    section.add "CacheNodeType", valid_773611
  var valid_773612 = formData.getOrDefault("PrimaryClusterId")
  valid_773612 = validateParameter(valid_773612, JString, required = false,
                                 default = nil)
  if valid_773612 != nil:
    section.add "PrimaryClusterId", valid_773612
  var valid_773613 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_773613 = validateParameter(valid_773613, JArray, required = false,
                                 default = nil)
  if valid_773613 != nil:
    section.add "CacheSecurityGroupNames", valid_773613
  var valid_773614 = formData.getOrDefault("NumNodeGroups")
  valid_773614 = validateParameter(valid_773614, JInt, required = false, default = nil)
  if valid_773614 != nil:
    section.add "NumNodeGroups", valid_773614
  var valid_773615 = formData.getOrDefault("Port")
  valid_773615 = validateParameter(valid_773615, JInt, required = false, default = nil)
  if valid_773615 != nil:
    section.add "Port", valid_773615
  var valid_773616 = formData.getOrDefault("Engine")
  valid_773616 = validateParameter(valid_773616, JString, required = false,
                                 default = nil)
  if valid_773616 != nil:
    section.add "Engine", valid_773616
  var valid_773617 = formData.getOrDefault("AuthToken")
  valid_773617 = validateParameter(valid_773617, JString, required = false,
                                 default = nil)
  if valid_773617 != nil:
    section.add "AuthToken", valid_773617
  var valid_773618 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_773618 = validateParameter(valid_773618, JBool, required = false, default = nil)
  if valid_773618 != nil:
    section.add "AutomaticFailoverEnabled", valid_773618
  var valid_773619 = formData.getOrDefault("Tags")
  valid_773619 = validateParameter(valid_773619, JArray, required = false,
                                 default = nil)
  if valid_773619 != nil:
    section.add "Tags", valid_773619
  var valid_773620 = formData.getOrDefault("NotificationTopicArn")
  valid_773620 = validateParameter(valid_773620, JString, required = false,
                                 default = nil)
  if valid_773620 != nil:
    section.add "NotificationTopicArn", valid_773620
  var valid_773621 = formData.getOrDefault("SecurityGroupIds")
  valid_773621 = validateParameter(valid_773621, JArray, required = false,
                                 default = nil)
  if valid_773621 != nil:
    section.add "SecurityGroupIds", valid_773621
  var valid_773622 = formData.getOrDefault("AtRestEncryptionEnabled")
  valid_773622 = validateParameter(valid_773622, JBool, required = false, default = nil)
  if valid_773622 != nil:
    section.add "AtRestEncryptionEnabled", valid_773622
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_773623 = formData.getOrDefault("ReplicationGroupId")
  valid_773623 = validateParameter(valid_773623, JString, required = true,
                                 default = nil)
  if valid_773623 != nil:
    section.add "ReplicationGroupId", valid_773623
  var valid_773624 = formData.getOrDefault("SnapshotArns")
  valid_773624 = validateParameter(valid_773624, JArray, required = false,
                                 default = nil)
  if valid_773624 != nil:
    section.add "SnapshotArns", valid_773624
  var valid_773625 = formData.getOrDefault("CacheParameterGroupName")
  valid_773625 = validateParameter(valid_773625, JString, required = false,
                                 default = nil)
  if valid_773625 != nil:
    section.add "CacheParameterGroupName", valid_773625
  var valid_773626 = formData.getOrDefault("NodeGroupConfiguration")
  valid_773626 = validateParameter(valid_773626, JArray, required = false,
                                 default = nil)
  if valid_773626 != nil:
    section.add "NodeGroupConfiguration", valid_773626
  var valid_773627 = formData.getOrDefault("TransitEncryptionEnabled")
  valid_773627 = validateParameter(valid_773627, JBool, required = false, default = nil)
  if valid_773627 != nil:
    section.add "TransitEncryptionEnabled", valid_773627
  var valid_773628 = formData.getOrDefault("ReplicationGroupDescription")
  valid_773628 = validateParameter(valid_773628, JString, required = true,
                                 default = nil)
  if valid_773628 != nil:
    section.add "ReplicationGroupDescription", valid_773628
  var valid_773629 = formData.getOrDefault("CacheSubnetGroupName")
  valid_773629 = validateParameter(valid_773629, JString, required = false,
                                 default = nil)
  if valid_773629 != nil:
    section.add "CacheSubnetGroupName", valid_773629
  var valid_773630 = formData.getOrDefault("ReplicasPerNodeGroup")
  valid_773630 = validateParameter(valid_773630, JInt, required = false, default = nil)
  if valid_773630 != nil:
    section.add "ReplicasPerNodeGroup", valid_773630
  var valid_773631 = formData.getOrDefault("KmsKeyId")
  valid_773631 = validateParameter(valid_773631, JString, required = false,
                                 default = nil)
  if valid_773631 != nil:
    section.add "KmsKeyId", valid_773631
  var valid_773632 = formData.getOrDefault("PreferredCacheClusterAZs")
  valid_773632 = validateParameter(valid_773632, JArray, required = false,
                                 default = nil)
  if valid_773632 != nil:
    section.add "PreferredCacheClusterAZs", valid_773632
  var valid_773633 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_773633 = validateParameter(valid_773633, JInt, required = false, default = nil)
  if valid_773633 != nil:
    section.add "SnapshotRetentionLimit", valid_773633
  var valid_773634 = formData.getOrDefault("SnapshotWindow")
  valid_773634 = validateParameter(valid_773634, JString, required = false,
                                 default = nil)
  if valid_773634 != nil:
    section.add "SnapshotWindow", valid_773634
  var valid_773635 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_773635 = validateParameter(valid_773635, JBool, required = false, default = nil)
  if valid_773635 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773635
  var valid_773636 = formData.getOrDefault("NumCacheClusters")
  valid_773636 = validateParameter(valid_773636, JInt, required = false, default = nil)
  if valid_773636 != nil:
    section.add "NumCacheClusters", valid_773636
  var valid_773637 = formData.getOrDefault("EngineVersion")
  valid_773637 = validateParameter(valid_773637, JString, required = false,
                                 default = nil)
  if valid_773637 != nil:
    section.add "EngineVersion", valid_773637
  var valid_773638 = formData.getOrDefault("SnapshotName")
  valid_773638 = validateParameter(valid_773638, JString, required = false,
                                 default = nil)
  if valid_773638 != nil:
    section.add "SnapshotName", valid_773638
  var valid_773639 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_773639 = validateParameter(valid_773639, JString, required = false,
                                 default = nil)
  if valid_773639 != nil:
    section.add "PreferredMaintenanceWindow", valid_773639
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773640: Call_PostCreateReplicationGroup_773599; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773640.validator(path, query, header, formData, body)
  let scheme = call_773640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773640.url(scheme.get, call_773640.host, call_773640.base,
                         call_773640.route, valid.getOrDefault("path"))
  result = hook(call_773640, url, valid)

proc call*(call_773641: Call_PostCreateReplicationGroup_773599;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          CacheNodeType: string = ""; PrimaryClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; NumNodeGroups: int = 0;
          Port: int = 0; Engine: string = ""; AuthToken: string = "";
          AutomaticFailoverEnabled: bool = false; Tags: JsonNode = nil;
          NotificationTopicArn: string = ""; SecurityGroupIds: JsonNode = nil;
          AtRestEncryptionEnabled: bool = false; SnapshotArns: JsonNode = nil;
          Action: string = "CreateReplicationGroup";
          CacheParameterGroupName: string = "";
          NodeGroupConfiguration: JsonNode = nil;
          TransitEncryptionEnabled: bool = false; CacheSubnetGroupName: string = "";
          ReplicasPerNodeGroup: int = 0; KmsKeyId: string = "";
          PreferredCacheClusterAZs: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          NumCacheClusters: int = 0; EngineVersion: string = "";
          Version: string = "2015-02-02"; SnapshotName: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_773642 = newJObject()
  var formData_773643 = newJObject()
  add(formData_773643, "CacheNodeType", newJString(CacheNodeType))
  add(formData_773643, "PrimaryClusterId", newJString(PrimaryClusterId))
  if CacheSecurityGroupNames != nil:
    formData_773643.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_773643, "NumNodeGroups", newJInt(NumNodeGroups))
  add(formData_773643, "Port", newJInt(Port))
  add(formData_773643, "Engine", newJString(Engine))
  add(formData_773643, "AuthToken", newJString(AuthToken))
  add(formData_773643, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  if Tags != nil:
    formData_773643.add "Tags", Tags
  add(formData_773643, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_773643.add "SecurityGroupIds", SecurityGroupIds
  add(formData_773643, "AtRestEncryptionEnabled",
      newJBool(AtRestEncryptionEnabled))
  add(formData_773643, "ReplicationGroupId", newJString(ReplicationGroupId))
  if SnapshotArns != nil:
    formData_773643.add "SnapshotArns", SnapshotArns
  add(query_773642, "Action", newJString(Action))
  add(formData_773643, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if NodeGroupConfiguration != nil:
    formData_773643.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(formData_773643, "TransitEncryptionEnabled",
      newJBool(TransitEncryptionEnabled))
  add(formData_773643, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(formData_773643, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(formData_773643, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(formData_773643, "KmsKeyId", newJString(KmsKeyId))
  if PreferredCacheClusterAZs != nil:
    formData_773643.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  add(formData_773643, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_773643, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_773643, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_773643, "NumCacheClusters", newJInt(NumCacheClusters))
  add(formData_773643, "EngineVersion", newJString(EngineVersion))
  add(query_773642, "Version", newJString(Version))
  add(formData_773643, "SnapshotName", newJString(SnapshotName))
  add(formData_773643, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_773641.call(nil, query_773642, nil, formData_773643, nil)

var postCreateReplicationGroup* = Call_PostCreateReplicationGroup_773599(
    name: "postCreateReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_PostCreateReplicationGroup_773600, base: "/",
    url: url_PostCreateReplicationGroup_773601,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateReplicationGroup_773555 = ref object of OpenApiRestCall_772597
proc url_GetCreateReplicationGroup_773557(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateReplicationGroup_773556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AuthToken: JString
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: JString
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: JInt
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   CacheNodeType: JString
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   TransitEncryptionEnabled: JBool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   SnapshotName: JString
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   CacheParameterGroupName: JString
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   Action: JString (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PrimaryClusterId: JString
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   ReplicasPerNodeGroup: JInt
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   ReplicationGroupId: JString (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: JString
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: JInt
  ##       : The port number on which each member of the replication group accepts connections.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   ReplicationGroupDescription: JString (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NumCacheClusters: JInt
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Version: JString (required)
  ##   AtRestEncryptionEnabled: JBool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  section = newJObject()
  var valid_773558 = query.getOrDefault("AuthToken")
  valid_773558 = validateParameter(valid_773558, JString, required = false,
                                 default = nil)
  if valid_773558 != nil:
    section.add "AuthToken", valid_773558
  var valid_773559 = query.getOrDefault("Engine")
  valid_773559 = validateParameter(valid_773559, JString, required = false,
                                 default = nil)
  if valid_773559 != nil:
    section.add "Engine", valid_773559
  var valid_773560 = query.getOrDefault("NumNodeGroups")
  valid_773560 = validateParameter(valid_773560, JInt, required = false, default = nil)
  if valid_773560 != nil:
    section.add "NumNodeGroups", valid_773560
  var valid_773561 = query.getOrDefault("SnapshotWindow")
  valid_773561 = validateParameter(valid_773561, JString, required = false,
                                 default = nil)
  if valid_773561 != nil:
    section.add "SnapshotWindow", valid_773561
  var valid_773562 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_773562 = validateParameter(valid_773562, JString, required = false,
                                 default = nil)
  if valid_773562 != nil:
    section.add "PreferredMaintenanceWindow", valid_773562
  var valid_773563 = query.getOrDefault("SnapshotRetentionLimit")
  valid_773563 = validateParameter(valid_773563, JInt, required = false, default = nil)
  if valid_773563 != nil:
    section.add "SnapshotRetentionLimit", valid_773563
  var valid_773564 = query.getOrDefault("CacheNodeType")
  valid_773564 = validateParameter(valid_773564, JString, required = false,
                                 default = nil)
  if valid_773564 != nil:
    section.add "CacheNodeType", valid_773564
  var valid_773565 = query.getOrDefault("TransitEncryptionEnabled")
  valid_773565 = validateParameter(valid_773565, JBool, required = false, default = nil)
  if valid_773565 != nil:
    section.add "TransitEncryptionEnabled", valid_773565
  var valid_773566 = query.getOrDefault("SnapshotName")
  valid_773566 = validateParameter(valid_773566, JString, required = false,
                                 default = nil)
  if valid_773566 != nil:
    section.add "SnapshotName", valid_773566
  var valid_773567 = query.getOrDefault("CacheParameterGroupName")
  valid_773567 = validateParameter(valid_773567, JString, required = false,
                                 default = nil)
  if valid_773567 != nil:
    section.add "CacheParameterGroupName", valid_773567
  var valid_773568 = query.getOrDefault("Tags")
  valid_773568 = validateParameter(valid_773568, JArray, required = false,
                                 default = nil)
  if valid_773568 != nil:
    section.add "Tags", valid_773568
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773569 = query.getOrDefault("Action")
  valid_773569 = validateParameter(valid_773569, JString, required = true,
                                 default = newJString("CreateReplicationGroup"))
  if valid_773569 != nil:
    section.add "Action", valid_773569
  var valid_773570 = query.getOrDefault("NodeGroupConfiguration")
  valid_773570 = validateParameter(valid_773570, JArray, required = false,
                                 default = nil)
  if valid_773570 != nil:
    section.add "NodeGroupConfiguration", valid_773570
  var valid_773571 = query.getOrDefault("NotificationTopicArn")
  valid_773571 = validateParameter(valid_773571, JString, required = false,
                                 default = nil)
  if valid_773571 != nil:
    section.add "NotificationTopicArn", valid_773571
  var valid_773572 = query.getOrDefault("KmsKeyId")
  valid_773572 = validateParameter(valid_773572, JString, required = false,
                                 default = nil)
  if valid_773572 != nil:
    section.add "KmsKeyId", valid_773572
  var valid_773573 = query.getOrDefault("PrimaryClusterId")
  valid_773573 = validateParameter(valid_773573, JString, required = false,
                                 default = nil)
  if valid_773573 != nil:
    section.add "PrimaryClusterId", valid_773573
  var valid_773574 = query.getOrDefault("ReplicasPerNodeGroup")
  valid_773574 = validateParameter(valid_773574, JInt, required = false, default = nil)
  if valid_773574 != nil:
    section.add "ReplicasPerNodeGroup", valid_773574
  var valid_773575 = query.getOrDefault("ReplicationGroupId")
  valid_773575 = validateParameter(valid_773575, JString, required = true,
                                 default = nil)
  if valid_773575 != nil:
    section.add "ReplicationGroupId", valid_773575
  var valid_773576 = query.getOrDefault("EngineVersion")
  valid_773576 = validateParameter(valid_773576, JString, required = false,
                                 default = nil)
  if valid_773576 != nil:
    section.add "EngineVersion", valid_773576
  var valid_773577 = query.getOrDefault("CacheSubnetGroupName")
  valid_773577 = validateParameter(valid_773577, JString, required = false,
                                 default = nil)
  if valid_773577 != nil:
    section.add "CacheSubnetGroupName", valid_773577
  var valid_773578 = query.getOrDefault("SnapshotArns")
  valid_773578 = validateParameter(valid_773578, JArray, required = false,
                                 default = nil)
  if valid_773578 != nil:
    section.add "SnapshotArns", valid_773578
  var valid_773579 = query.getOrDefault("SecurityGroupIds")
  valid_773579 = validateParameter(valid_773579, JArray, required = false,
                                 default = nil)
  if valid_773579 != nil:
    section.add "SecurityGroupIds", valid_773579
  var valid_773580 = query.getOrDefault("Port")
  valid_773580 = validateParameter(valid_773580, JInt, required = false, default = nil)
  if valid_773580 != nil:
    section.add "Port", valid_773580
  var valid_773581 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_773581 = validateParameter(valid_773581, JBool, required = false, default = nil)
  if valid_773581 != nil:
    section.add "AutoMinorVersionUpgrade", valid_773581
  var valid_773582 = query.getOrDefault("ReplicationGroupDescription")
  valid_773582 = validateParameter(valid_773582, JString, required = true,
                                 default = nil)
  if valid_773582 != nil:
    section.add "ReplicationGroupDescription", valid_773582
  var valid_773583 = query.getOrDefault("CacheSecurityGroupNames")
  valid_773583 = validateParameter(valid_773583, JArray, required = false,
                                 default = nil)
  if valid_773583 != nil:
    section.add "CacheSecurityGroupNames", valid_773583
  var valid_773584 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_773584 = validateParameter(valid_773584, JBool, required = false, default = nil)
  if valid_773584 != nil:
    section.add "AutomaticFailoverEnabled", valid_773584
  var valid_773585 = query.getOrDefault("NumCacheClusters")
  valid_773585 = validateParameter(valid_773585, JInt, required = false, default = nil)
  if valid_773585 != nil:
    section.add "NumCacheClusters", valid_773585
  var valid_773586 = query.getOrDefault("Version")
  valid_773586 = validateParameter(valid_773586, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773586 != nil:
    section.add "Version", valid_773586
  var valid_773587 = query.getOrDefault("AtRestEncryptionEnabled")
  valid_773587 = validateParameter(valid_773587, JBool, required = false, default = nil)
  if valid_773587 != nil:
    section.add "AtRestEncryptionEnabled", valid_773587
  var valid_773588 = query.getOrDefault("PreferredCacheClusterAZs")
  valid_773588 = validateParameter(valid_773588, JArray, required = false,
                                 default = nil)
  if valid_773588 != nil:
    section.add "PreferredCacheClusterAZs", valid_773588
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773589 = header.getOrDefault("X-Amz-Date")
  valid_773589 = validateParameter(valid_773589, JString, required = false,
                                 default = nil)
  if valid_773589 != nil:
    section.add "X-Amz-Date", valid_773589
  var valid_773590 = header.getOrDefault("X-Amz-Security-Token")
  valid_773590 = validateParameter(valid_773590, JString, required = false,
                                 default = nil)
  if valid_773590 != nil:
    section.add "X-Amz-Security-Token", valid_773590
  var valid_773591 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773591 = validateParameter(valid_773591, JString, required = false,
                                 default = nil)
  if valid_773591 != nil:
    section.add "X-Amz-Content-Sha256", valid_773591
  var valid_773592 = header.getOrDefault("X-Amz-Algorithm")
  valid_773592 = validateParameter(valid_773592, JString, required = false,
                                 default = nil)
  if valid_773592 != nil:
    section.add "X-Amz-Algorithm", valid_773592
  var valid_773593 = header.getOrDefault("X-Amz-Signature")
  valid_773593 = validateParameter(valid_773593, JString, required = false,
                                 default = nil)
  if valid_773593 != nil:
    section.add "X-Amz-Signature", valid_773593
  var valid_773594 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773594 = validateParameter(valid_773594, JString, required = false,
                                 default = nil)
  if valid_773594 != nil:
    section.add "X-Amz-SignedHeaders", valid_773594
  var valid_773595 = header.getOrDefault("X-Amz-Credential")
  valid_773595 = validateParameter(valid_773595, JString, required = false,
                                 default = nil)
  if valid_773595 != nil:
    section.add "X-Amz-Credential", valid_773595
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773596: Call_GetCreateReplicationGroup_773555; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773596.validator(path, query, header, formData, body)
  let scheme = call_773596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773596.url(scheme.get, call_773596.host, call_773596.base,
                         call_773596.route, valid.getOrDefault("path"))
  result = hook(call_773596, url, valid)

proc call*(call_773597: Call_GetCreateReplicationGroup_773555;
          ReplicationGroupId: string; ReplicationGroupDescription: string;
          AuthToken: string = ""; Engine: string = ""; NumNodeGroups: int = 0;
          SnapshotWindow: string = ""; PreferredMaintenanceWindow: string = "";
          SnapshotRetentionLimit: int = 0; CacheNodeType: string = "";
          TransitEncryptionEnabled: bool = false; SnapshotName: string = "";
          CacheParameterGroupName: string = ""; Tags: JsonNode = nil;
          Action: string = "CreateReplicationGroup";
          NodeGroupConfiguration: JsonNode = nil; NotificationTopicArn: string = "";
          KmsKeyId: string = ""; PrimaryClusterId: string = "";
          ReplicasPerNodeGroup: int = 0; EngineVersion: string = "";
          CacheSubnetGroupName: string = ""; SnapshotArns: JsonNode = nil;
          SecurityGroupIds: JsonNode = nil; Port: int = 0;
          AutoMinorVersionUpgrade: bool = false;
          CacheSecurityGroupNames: JsonNode = nil;
          AutomaticFailoverEnabled: bool = false; NumCacheClusters: int = 0;
          Version: string = "2015-02-02"; AtRestEncryptionEnabled: bool = false;
          PreferredCacheClusterAZs: JsonNode = nil): Recallable =
  ## getCreateReplicationGroup
  ## <p>Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.</p> <p>A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.</p> <p>A Redis (cluster mode enabled) replication group is a collection of 1 to 90 node groups (shards). Each node group (shard) has one read/write primary node and up to 5 read-only replica nodes. Writes to the primary are asynchronously propagated to the replicas. Redis (cluster mode enabled) replication groups partition the data across node groups (shards).</p> <p>When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. You cannot alter a Redis (cluster mode enabled) replication group after it has been created. However, if you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis' enhanced backup and restore. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-restoring.html">Restoring From a Backup with Cluster Resizing</a> in the <i>ElastiCache User Guide</i>.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   AuthToken: string
  ##            : <p> <b>Reserved parameter.</b> The password used to access a password protected server.</p> <p> <code>AuthToken</code> can be specified only on replication groups where <code>TransitEncryptionEnabled</code> is <code>true</code>.</p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important> <p>Password constraints:</p> <ul> <li> <p>Must be only printable ASCII characters.</p> </li> <li> <p>Must be at least 16 characters and no more than 128 characters in length.</p> </li> <li> <p>Cannot contain any of the following characters: '/', '"', or '@'. </p> </li> </ul> <p>For more information, see <a href="http://redis.io/commands/AUTH">AUTH password</a> at http://redis.io/commands/AUTH.</p>
  ##   Engine: string
  ##         : The name of the cache engine to be used for the clusters in this replication group.
  ##   NumNodeGroups: int
  ##                : <p>An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.</p> <p>Default: 1</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for <code>ddd</code> are:</p> <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p>Default: 0 (i.e., automatic backups are disabled for this cluster).</p>
  ##   CacheNodeType: string
  ##                : <p>The compute and memory capacity of the nodes in the node group (shard).</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   TransitEncryptionEnabled: bool
  ##                           : <p>A flag that enables in-transit encryption when set to <code>true</code>.</p> <p>You cannot modify the value of <code>TransitEncryptionEnabled</code> after the cluster is created. To enable in-transit encryption on a cluster you must set <code>TransitEncryptionEnabled</code> to <code>true</code> when you create a cluster.</p> <p>This parameter is valid only if the <code>Engine</code> parameter is <code>redis</code>, the <code>EngineVersion</code> parameter is <code>3.2.6</code>, <code>4.x</code> or later, and the cluster is being created in an Amazon VPC.</p> <p>If you enable in-transit encryption, you must also specify a value for <code>CacheSubnetGroup</code>.</p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p> <important> <p>For HIPAA compliance, you must specify <code>TransitEncryptionEnabled</code> as <code>true</code>, an <code>AuthToken</code>, and a <code>CacheSubnetGroup</code>.</p> </important>
  ##   SnapshotName: string
  ##               : The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to <code>restoring</code> while the new replication group is being created.
  ##   CacheParameterGroupName: string
  ##                          : <p>The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.</p> <note> <p>If you are restoring to an engine version that is different than the original, you must specify the default version of that version. For example, <code>CacheParameterGroupName=default.redis4.0</code>.</p> </note> <p>If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. </p> <ul> <li> <p>To create a Redis (cluster mode disabled) replication group, use <code>CacheParameterGroupName=default.redis3.2</code>.</p> </li> <li> <p>To create a Redis (cluster mode enabled) replication group, use <code>CacheParameterGroupName=default.redis3.2.cluster.on</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of cost allocation tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=<code>myKey</code>, Value=<code>myKeyValue</code>. You can include multiple tags as shown following: Key=<code>myKey</code>, Value=<code>myKeyValue</code> Key=<code>mySecondKey</code>, Value=<code>mySecondKeyValue</code>.
  ##   Action: string (required)
  ##   NodeGroupConfiguration: JArray
  ##                         : <p>A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: <code>PrimaryAvailabilityZone</code>, <code>ReplicaAvailabilityZones</code>, <code>ReplicaCount</code>, and <code>Slots</code>.</p> <p>If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file, you must configure each node group (shard) using this parameter because you must specify the slots for each node group.</p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be the same as the cluster owner.</p> </note>
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the disk on the cluster.
  ##   PrimaryClusterId: string
  ##                   : <p>The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of <code>available</code>.</p> <p>This parameter is not required if <code>NumCacheClusters</code>, <code>NumNodeGroups</code>, or <code>ReplicasPerNodeGroup</code> is specified.</p>
  ##   ReplicasPerNodeGroup: int
  ##                       : An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
  ##   ReplicationGroupId: string (required)
  ##                     : <p>The replication group identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>A name must contain from 1 to 40 alphanumeric characters or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>A name cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the <code>DescribeCacheEngineVersions</code> operation.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>) in the <i>ElastiCache User Guide</i>, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. </p>
  ##   CacheSubnetGroupName: string
  ##                       : <p>The name of the cache subnet group to be used for the replication group.</p> <important> <p>If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html">Subnets and Subnet Groups</a>.</p> </important>
  ##   SnapshotArns: JArray
  ##               : <p>A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter <i>NumNodeGroups</i> or the number of node groups configured by <i>NodeGroupConfiguration</i> regardless of the number of ARNs specified here.</p> <p>Example of an Amazon S3 ARN: <code>arn:aws:s3:::my_bucket/snapshot1.rdb</code> </p>
  ##   SecurityGroupIds: JArray
  ##                   : <p>One or more Amazon VPC security groups associated with this replication group.</p> <p>Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   Port: int
  ##       : The port number on which each member of the replication group accepts connections.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   ReplicationGroupDescription: string (required)
  ##                              : A user-created description for the replication group.
  ##   CacheSecurityGroupNames: JArray
  ##                          : A list of cache security group names to associate with this replication group.
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.</p> <p>If <code>true</code>, Multi-AZ is enabled for this replication group. If <code>false</code>, Multi-AZ is disabled for this replication group.</p> <p> <code>AutomaticFailoverEnabled</code> must be enabled for Redis (cluster mode enabled) replication groups.</p> <p>Default: false</p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NumCacheClusters: int
  ##                   : <p>The number of clusters this replication group initially has.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>ReplicasPerNodeGroup</code> instead.</p> <p>If <code>AutomaticFailoverEnabled</code> is <code>true</code>, the value of this parameter must be at least 2. If <code>AutomaticFailoverEnabled</code> is <code>false</code> you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.</p> <p>The maximum permitted value for <code>NumCacheClusters</code> is 6 (1 primary plus 5 replicas).</p>
  ##   Version: string (required)
  ##   AtRestEncryptionEnabled: bool
  ##                          : <p>A flag that enables encryption at rest when set to <code>true</code>.</p> <p>You cannot modify the value of <code>AtRestEncryptionEnabled</code> after the replication group is created. To enable encryption at rest on a replication group you must set <code>AtRestEncryptionEnabled</code> to <code>true</code> when you create the replication group. </p> <p> <b>Required:</b> Only available when creating a replication group in an Amazon VPC using redis version <code>3.2.6</code>, <code>4.x</code> or later.</p> <p>Default: <code>false</code> </p>
  ##   PreferredCacheClusterAZs: JArray
  ##                           : <p>A list of EC2 Availability Zones in which the replication group's clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.</p> <p>This parameter is not used if there is more than one node group (shard). You should use <code>NodeGroupConfiguration</code> instead.</p> <note> <p>If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.</p> <p>The number of Availability Zones listed must equal the value of <code>NumCacheClusters</code>.</p> </note> <p>Default: system chosen Availability Zones.</p>
  var query_773598 = newJObject()
  add(query_773598, "AuthToken", newJString(AuthToken))
  add(query_773598, "Engine", newJString(Engine))
  add(query_773598, "NumNodeGroups", newJInt(NumNodeGroups))
  add(query_773598, "SnapshotWindow", newJString(SnapshotWindow))
  add(query_773598, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_773598, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_773598, "CacheNodeType", newJString(CacheNodeType))
  add(query_773598, "TransitEncryptionEnabled", newJBool(TransitEncryptionEnabled))
  add(query_773598, "SnapshotName", newJString(SnapshotName))
  add(query_773598, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  if Tags != nil:
    query_773598.add "Tags", Tags
  add(query_773598, "Action", newJString(Action))
  if NodeGroupConfiguration != nil:
    query_773598.add "NodeGroupConfiguration", NodeGroupConfiguration
  add(query_773598, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_773598, "KmsKeyId", newJString(KmsKeyId))
  add(query_773598, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_773598, "ReplicasPerNodeGroup", newJInt(ReplicasPerNodeGroup))
  add(query_773598, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773598, "EngineVersion", newJString(EngineVersion))
  add(query_773598, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  if SnapshotArns != nil:
    query_773598.add "SnapshotArns", SnapshotArns
  if SecurityGroupIds != nil:
    query_773598.add "SecurityGroupIds", SecurityGroupIds
  add(query_773598, "Port", newJInt(Port))
  add(query_773598, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_773598, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    query_773598.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_773598, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_773598, "NumCacheClusters", newJInt(NumCacheClusters))
  add(query_773598, "Version", newJString(Version))
  add(query_773598, "AtRestEncryptionEnabled", newJBool(AtRestEncryptionEnabled))
  if PreferredCacheClusterAZs != nil:
    query_773598.add "PreferredCacheClusterAZs", PreferredCacheClusterAZs
  result = call_773597.call(nil, query_773598, nil, nil, nil)

var getCreateReplicationGroup* = Call_GetCreateReplicationGroup_773555(
    name: "getCreateReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateReplicationGroup",
    validator: validate_GetCreateReplicationGroup_773556, base: "/",
    url: url_GetCreateReplicationGroup_773557,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateSnapshot_773663 = ref object of OpenApiRestCall_772597
proc url_PostCreateSnapshot_773665(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostCreateSnapshot_773664(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773666 = query.getOrDefault("Action")
  valid_773666 = validateParameter(valid_773666, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_773666 != nil:
    section.add "Action", valid_773666
  var valid_773667 = query.getOrDefault("Version")
  valid_773667 = validateParameter(valid_773667, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773667 != nil:
    section.add "Version", valid_773667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773668 = header.getOrDefault("X-Amz-Date")
  valid_773668 = validateParameter(valid_773668, JString, required = false,
                                 default = nil)
  if valid_773668 != nil:
    section.add "X-Amz-Date", valid_773668
  var valid_773669 = header.getOrDefault("X-Amz-Security-Token")
  valid_773669 = validateParameter(valid_773669, JString, required = false,
                                 default = nil)
  if valid_773669 != nil:
    section.add "X-Amz-Security-Token", valid_773669
  var valid_773670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773670 = validateParameter(valid_773670, JString, required = false,
                                 default = nil)
  if valid_773670 != nil:
    section.add "X-Amz-Content-Sha256", valid_773670
  var valid_773671 = header.getOrDefault("X-Amz-Algorithm")
  valid_773671 = validateParameter(valid_773671, JString, required = false,
                                 default = nil)
  if valid_773671 != nil:
    section.add "X-Amz-Algorithm", valid_773671
  var valid_773672 = header.getOrDefault("X-Amz-Signature")
  valid_773672 = validateParameter(valid_773672, JString, required = false,
                                 default = nil)
  if valid_773672 != nil:
    section.add "X-Amz-Signature", valid_773672
  var valid_773673 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773673 = validateParameter(valid_773673, JString, required = false,
                                 default = nil)
  if valid_773673 != nil:
    section.add "X-Amz-SignedHeaders", valid_773673
  var valid_773674 = header.getOrDefault("X-Amz-Credential")
  valid_773674 = validateParameter(valid_773674, JString, required = false,
                                 default = nil)
  if valid_773674 != nil:
    section.add "X-Amz-Credential", valid_773674
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  section = newJObject()
  var valid_773675 = formData.getOrDefault("ReplicationGroupId")
  valid_773675 = validateParameter(valid_773675, JString, required = false,
                                 default = nil)
  if valid_773675 != nil:
    section.add "ReplicationGroupId", valid_773675
  var valid_773676 = formData.getOrDefault("KmsKeyId")
  valid_773676 = validateParameter(valid_773676, JString, required = false,
                                 default = nil)
  if valid_773676 != nil:
    section.add "KmsKeyId", valid_773676
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_773677 = formData.getOrDefault("SnapshotName")
  valid_773677 = validateParameter(valid_773677, JString, required = true,
                                 default = nil)
  if valid_773677 != nil:
    section.add "SnapshotName", valid_773677
  var valid_773678 = formData.getOrDefault("CacheClusterId")
  valid_773678 = validateParameter(valid_773678, JString, required = false,
                                 default = nil)
  if valid_773678 != nil:
    section.add "CacheClusterId", valid_773678
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773679: Call_PostCreateSnapshot_773663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773679.validator(path, query, header, formData, body)
  let scheme = call_773679.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773679.url(scheme.get, call_773679.host, call_773679.base,
                         call_773679.route, valid.getOrDefault("path"))
  result = hook(call_773679, url, valid)

proc call*(call_773680: Call_PostCreateSnapshot_773663; SnapshotName: string;
          ReplicationGroupId: string = ""; Action: string = "CreateSnapshot";
          KmsKeyId: string = ""; Version: string = "2015-02-02";
          CacheClusterId: string = ""): Recallable =
  ## postCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  var query_773681 = newJObject()
  var formData_773682 = newJObject()
  add(formData_773682, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773681, "Action", newJString(Action))
  add(formData_773682, "KmsKeyId", newJString(KmsKeyId))
  add(query_773681, "Version", newJString(Version))
  add(formData_773682, "SnapshotName", newJString(SnapshotName))
  add(formData_773682, "CacheClusterId", newJString(CacheClusterId))
  result = call_773680.call(nil, query_773681, nil, formData_773682, nil)

var postCreateSnapshot* = Call_PostCreateSnapshot_773663(
    name: "postCreateSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=CreateSnapshot",
    validator: validate_PostCreateSnapshot_773664, base: "/",
    url: url_PostCreateSnapshot_773665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateSnapshot_773644 = ref object of OpenApiRestCall_772597
proc url_GetCreateSnapshot_773646(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetCreateSnapshot_773645(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   SnapshotName: JString (required)
  ##               : A name for the snapshot being created.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   ReplicationGroupId: JString
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773647 = query.getOrDefault("CacheClusterId")
  valid_773647 = validateParameter(valid_773647, JString, required = false,
                                 default = nil)
  if valid_773647 != nil:
    section.add "CacheClusterId", valid_773647
  assert query != nil,
        "query argument is necessary due to required `SnapshotName` field"
  var valid_773648 = query.getOrDefault("SnapshotName")
  valid_773648 = validateParameter(valid_773648, JString, required = true,
                                 default = nil)
  if valid_773648 != nil:
    section.add "SnapshotName", valid_773648
  var valid_773649 = query.getOrDefault("Action")
  valid_773649 = validateParameter(valid_773649, JString, required = true,
                                 default = newJString("CreateSnapshot"))
  if valid_773649 != nil:
    section.add "Action", valid_773649
  var valid_773650 = query.getOrDefault("KmsKeyId")
  valid_773650 = validateParameter(valid_773650, JString, required = false,
                                 default = nil)
  if valid_773650 != nil:
    section.add "KmsKeyId", valid_773650
  var valid_773651 = query.getOrDefault("ReplicationGroupId")
  valid_773651 = validateParameter(valid_773651, JString, required = false,
                                 default = nil)
  if valid_773651 != nil:
    section.add "ReplicationGroupId", valid_773651
  var valid_773652 = query.getOrDefault("Version")
  valid_773652 = validateParameter(valid_773652, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773652 != nil:
    section.add "Version", valid_773652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773653 = header.getOrDefault("X-Amz-Date")
  valid_773653 = validateParameter(valid_773653, JString, required = false,
                                 default = nil)
  if valid_773653 != nil:
    section.add "X-Amz-Date", valid_773653
  var valid_773654 = header.getOrDefault("X-Amz-Security-Token")
  valid_773654 = validateParameter(valid_773654, JString, required = false,
                                 default = nil)
  if valid_773654 != nil:
    section.add "X-Amz-Security-Token", valid_773654
  var valid_773655 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773655 = validateParameter(valid_773655, JString, required = false,
                                 default = nil)
  if valid_773655 != nil:
    section.add "X-Amz-Content-Sha256", valid_773655
  var valid_773656 = header.getOrDefault("X-Amz-Algorithm")
  valid_773656 = validateParameter(valid_773656, JString, required = false,
                                 default = nil)
  if valid_773656 != nil:
    section.add "X-Amz-Algorithm", valid_773656
  var valid_773657 = header.getOrDefault("X-Amz-Signature")
  valid_773657 = validateParameter(valid_773657, JString, required = false,
                                 default = nil)
  if valid_773657 != nil:
    section.add "X-Amz-Signature", valid_773657
  var valid_773658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773658 = validateParameter(valid_773658, JString, required = false,
                                 default = nil)
  if valid_773658 != nil:
    section.add "X-Amz-SignedHeaders", valid_773658
  var valid_773659 = header.getOrDefault("X-Amz-Credential")
  valid_773659 = validateParameter(valid_773659, JString, required = false,
                                 default = nil)
  if valid_773659 != nil:
    section.add "X-Amz-Credential", valid_773659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773660: Call_GetCreateSnapshot_773644; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773660.validator(path, query, header, formData, body)
  let scheme = call_773660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773660.url(scheme.get, call_773660.host, call_773660.base,
                         call_773660.route, valid.getOrDefault("path"))
  result = hook(call_773660, url, valid)

proc call*(call_773661: Call_GetCreateSnapshot_773644; SnapshotName: string;
          CacheClusterId: string = ""; Action: string = "CreateSnapshot";
          KmsKeyId: string = ""; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getCreateSnapshot
  ## <p>Creates a copy of an entire cluster or replication group at a specific moment in time.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : The identifier of an existing cluster. The snapshot is created from this cluster.
  ##   SnapshotName: string (required)
  ##               : A name for the snapshot being created.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : The ID of the KMS key used to encrypt the snapshot.
  ##   ReplicationGroupId: string
  ##                     : The identifier of an existing replication group. The snapshot is created from this replication group.
  ##   Version: string (required)
  var query_773662 = newJObject()
  add(query_773662, "CacheClusterId", newJString(CacheClusterId))
  add(query_773662, "SnapshotName", newJString(SnapshotName))
  add(query_773662, "Action", newJString(Action))
  add(query_773662, "KmsKeyId", newJString(KmsKeyId))
  add(query_773662, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773662, "Version", newJString(Version))
  result = call_773661.call(nil, query_773662, nil, nil, nil)

var getCreateSnapshot* = Call_GetCreateSnapshot_773644(name: "getCreateSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=CreateSnapshot", validator: validate_GetCreateSnapshot_773645,
    base: "/", url: url_GetCreateSnapshot_773646,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDecreaseReplicaCount_773703 = ref object of OpenApiRestCall_772597
proc url_PostDecreaseReplicaCount_773705(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDecreaseReplicaCount_773704(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773706 = query.getOrDefault("Action")
  valid_773706 = validateParameter(valid_773706, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_773706 != nil:
    section.add "Action", valid_773706
  var valid_773707 = query.getOrDefault("Version")
  valid_773707 = validateParameter(valid_773707, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773707 != nil:
    section.add "Version", valid_773707
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773708 = header.getOrDefault("X-Amz-Date")
  valid_773708 = validateParameter(valid_773708, JString, required = false,
                                 default = nil)
  if valid_773708 != nil:
    section.add "X-Amz-Date", valid_773708
  var valid_773709 = header.getOrDefault("X-Amz-Security-Token")
  valid_773709 = validateParameter(valid_773709, JString, required = false,
                                 default = nil)
  if valid_773709 != nil:
    section.add "X-Amz-Security-Token", valid_773709
  var valid_773710 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773710 = validateParameter(valid_773710, JString, required = false,
                                 default = nil)
  if valid_773710 != nil:
    section.add "X-Amz-Content-Sha256", valid_773710
  var valid_773711 = header.getOrDefault("X-Amz-Algorithm")
  valid_773711 = validateParameter(valid_773711, JString, required = false,
                                 default = nil)
  if valid_773711 != nil:
    section.add "X-Amz-Algorithm", valid_773711
  var valid_773712 = header.getOrDefault("X-Amz-Signature")
  valid_773712 = validateParameter(valid_773712, JString, required = false,
                                 default = nil)
  if valid_773712 != nil:
    section.add "X-Amz-Signature", valid_773712
  var valid_773713 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773713 = validateParameter(valid_773713, JString, required = false,
                                 default = nil)
  if valid_773713 != nil:
    section.add "X-Amz-SignedHeaders", valid_773713
  var valid_773714 = header.getOrDefault("X-Amz-Credential")
  valid_773714 = validateParameter(valid_773714, JString, required = false,
                                 default = nil)
  if valid_773714 != nil:
    section.add "X-Amz-Credential", valid_773714
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_773715 = formData.getOrDefault("ApplyImmediately")
  valid_773715 = validateParameter(valid_773715, JBool, required = true, default = nil)
  if valid_773715 != nil:
    section.add "ApplyImmediately", valid_773715
  var valid_773716 = formData.getOrDefault("ReplicationGroupId")
  valid_773716 = validateParameter(valid_773716, JString, required = true,
                                 default = nil)
  if valid_773716 != nil:
    section.add "ReplicationGroupId", valid_773716
  var valid_773717 = formData.getOrDefault("NewReplicaCount")
  valid_773717 = validateParameter(valid_773717, JInt, required = false, default = nil)
  if valid_773717 != nil:
    section.add "NewReplicaCount", valid_773717
  var valid_773718 = formData.getOrDefault("ReplicasToRemove")
  valid_773718 = validateParameter(valid_773718, JArray, required = false,
                                 default = nil)
  if valid_773718 != nil:
    section.add "ReplicasToRemove", valid_773718
  var valid_773719 = formData.getOrDefault("ReplicaConfiguration")
  valid_773719 = validateParameter(valid_773719, JArray, required = false,
                                 default = nil)
  if valid_773719 != nil:
    section.add "ReplicaConfiguration", valid_773719
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773720: Call_PostDecreaseReplicaCount_773703; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_773720.validator(path, query, header, formData, body)
  let scheme = call_773720.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773720.url(scheme.get, call_773720.host, call_773720.base,
                         call_773720.route, valid.getOrDefault("path"))
  result = hook(call_773720, url, valid)

proc call*(call_773721: Call_PostDecreaseReplicaCount_773703;
          ApplyImmediately: bool; ReplicationGroupId: string;
          Action: string = "DecreaseReplicaCount"; NewReplicaCount: int = 0;
          ReplicasToRemove: JsonNode = nil; ReplicaConfiguration: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## postDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Version: string (required)
  var query_773722 = newJObject()
  var formData_773723 = newJObject()
  add(formData_773723, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_773723, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773722, "Action", newJString(Action))
  add(formData_773723, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicasToRemove != nil:
    formData_773723.add "ReplicasToRemove", ReplicasToRemove
  if ReplicaConfiguration != nil:
    formData_773723.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_773722, "Version", newJString(Version))
  result = call_773721.call(nil, query_773722, nil, formData_773723, nil)

var postDecreaseReplicaCount* = Call_PostDecreaseReplicaCount_773703(
    name: "postDecreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_PostDecreaseReplicaCount_773704, base: "/",
    url: url_PostDecreaseReplicaCount_773705, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDecreaseReplicaCount_773683 = ref object of OpenApiRestCall_772597
proc url_GetDecreaseReplicaCount_773685(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDecreaseReplicaCount_773684(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: JInt
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  section = newJObject()
  var valid_773686 = query.getOrDefault("ReplicaConfiguration")
  valid_773686 = validateParameter(valid_773686, JArray, required = false,
                                 default = nil)
  if valid_773686 != nil:
    section.add "ReplicaConfiguration", valid_773686
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773687 = query.getOrDefault("Action")
  valid_773687 = validateParameter(valid_773687, JString, required = true,
                                 default = newJString("DecreaseReplicaCount"))
  if valid_773687 != nil:
    section.add "Action", valid_773687
  var valid_773688 = query.getOrDefault("ReplicasToRemove")
  valid_773688 = validateParameter(valid_773688, JArray, required = false,
                                 default = nil)
  if valid_773688 != nil:
    section.add "ReplicasToRemove", valid_773688
  var valid_773689 = query.getOrDefault("NewReplicaCount")
  valid_773689 = validateParameter(valid_773689, JInt, required = false, default = nil)
  if valid_773689 != nil:
    section.add "NewReplicaCount", valid_773689
  var valid_773690 = query.getOrDefault("ReplicationGroupId")
  valid_773690 = validateParameter(valid_773690, JString, required = true,
                                 default = nil)
  if valid_773690 != nil:
    section.add "ReplicationGroupId", valid_773690
  var valid_773691 = query.getOrDefault("Version")
  valid_773691 = validateParameter(valid_773691, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773691 != nil:
    section.add "Version", valid_773691
  var valid_773692 = query.getOrDefault("ApplyImmediately")
  valid_773692 = validateParameter(valid_773692, JBool, required = true, default = nil)
  if valid_773692 != nil:
    section.add "ApplyImmediately", valid_773692
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773693 = header.getOrDefault("X-Amz-Date")
  valid_773693 = validateParameter(valid_773693, JString, required = false,
                                 default = nil)
  if valid_773693 != nil:
    section.add "X-Amz-Date", valid_773693
  var valid_773694 = header.getOrDefault("X-Amz-Security-Token")
  valid_773694 = validateParameter(valid_773694, JString, required = false,
                                 default = nil)
  if valid_773694 != nil:
    section.add "X-Amz-Security-Token", valid_773694
  var valid_773695 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773695 = validateParameter(valid_773695, JString, required = false,
                                 default = nil)
  if valid_773695 != nil:
    section.add "X-Amz-Content-Sha256", valid_773695
  var valid_773696 = header.getOrDefault("X-Amz-Algorithm")
  valid_773696 = validateParameter(valid_773696, JString, required = false,
                                 default = nil)
  if valid_773696 != nil:
    section.add "X-Amz-Algorithm", valid_773696
  var valid_773697 = header.getOrDefault("X-Amz-Signature")
  valid_773697 = validateParameter(valid_773697, JString, required = false,
                                 default = nil)
  if valid_773697 != nil:
    section.add "X-Amz-Signature", valid_773697
  var valid_773698 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773698 = validateParameter(valid_773698, JString, required = false,
                                 default = nil)
  if valid_773698 != nil:
    section.add "X-Amz-SignedHeaders", valid_773698
  var valid_773699 = header.getOrDefault("X-Amz-Credential")
  valid_773699 = validateParameter(valid_773699, JString, required = false,
                                 default = nil)
  if valid_773699 != nil:
    section.add "X-Amz-Credential", valid_773699
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773700: Call_GetDecreaseReplicaCount_773683; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_773700.validator(path, query, header, formData, body)
  let scheme = call_773700.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773700.url(scheme.get, call_773700.host, call_773700.base,
                         call_773700.route, valid.getOrDefault("path"))
  result = hook(call_773700, url, valid)

proc call*(call_773701: Call_GetDecreaseReplicaCount_773683;
          ReplicationGroupId: string; ApplyImmediately: bool;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "DecreaseReplicaCount"; ReplicasToRemove: JsonNode = nil;
          NewReplicaCount: int = 0; Version: string = "2015-02-02"): Recallable =
  ## getDecreaseReplicaCount
  ## Dynamically decreases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   ReplicasToRemove: JArray
  ##                   : A list of the node ids to remove from the replication group or node group (shard).
  ##   NewReplicaCount: int
  ##                  : <p>The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.</p> <p>The minimum number of replicas in a shard or replication group is:</p> <ul> <li> <p>Redis (cluster mode disabled)</p> <ul> <li> <p>If Multi-AZ with Automatic Failover is enabled: 1</p> </li> <li> <p>If Multi-AZ with Automatic Failover is not enabled: 0</p> </li> </ul> </li> <li> <p>Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)</p> </li> </ul>
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group from which you want to remove replica nodes.
  ##   Version: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is decreased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  var query_773702 = newJObject()
  if ReplicaConfiguration != nil:
    query_773702.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_773702, "Action", newJString(Action))
  if ReplicasToRemove != nil:
    query_773702.add "ReplicasToRemove", ReplicasToRemove
  add(query_773702, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_773702, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773702, "Version", newJString(Version))
  add(query_773702, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_773701.call(nil, query_773702, nil, nil, nil)

var getDecreaseReplicaCount* = Call_GetDecreaseReplicaCount_773683(
    name: "getDecreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DecreaseReplicaCount",
    validator: validate_GetDecreaseReplicaCount_773684, base: "/",
    url: url_GetDecreaseReplicaCount_773685, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheCluster_773741 = ref object of OpenApiRestCall_772597
proc url_PostDeleteCacheCluster_773743(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCacheCluster_773742(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773744 = query.getOrDefault("Action")
  valid_773744 = validateParameter(valid_773744, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_773744 != nil:
    section.add "Action", valid_773744
  var valid_773745 = query.getOrDefault("Version")
  valid_773745 = validateParameter(valid_773745, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773745 != nil:
    section.add "Version", valid_773745
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773746 = header.getOrDefault("X-Amz-Date")
  valid_773746 = validateParameter(valid_773746, JString, required = false,
                                 default = nil)
  if valid_773746 != nil:
    section.add "X-Amz-Date", valid_773746
  var valid_773747 = header.getOrDefault("X-Amz-Security-Token")
  valid_773747 = validateParameter(valid_773747, JString, required = false,
                                 default = nil)
  if valid_773747 != nil:
    section.add "X-Amz-Security-Token", valid_773747
  var valid_773748 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773748 = validateParameter(valid_773748, JString, required = false,
                                 default = nil)
  if valid_773748 != nil:
    section.add "X-Amz-Content-Sha256", valid_773748
  var valid_773749 = header.getOrDefault("X-Amz-Algorithm")
  valid_773749 = validateParameter(valid_773749, JString, required = false,
                                 default = nil)
  if valid_773749 != nil:
    section.add "X-Amz-Algorithm", valid_773749
  var valid_773750 = header.getOrDefault("X-Amz-Signature")
  valid_773750 = validateParameter(valid_773750, JString, required = false,
                                 default = nil)
  if valid_773750 != nil:
    section.add "X-Amz-Signature", valid_773750
  var valid_773751 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773751 = validateParameter(valid_773751, JString, required = false,
                                 default = nil)
  if valid_773751 != nil:
    section.add "X-Amz-SignedHeaders", valid_773751
  var valid_773752 = header.getOrDefault("X-Amz-Credential")
  valid_773752 = validateParameter(valid_773752, JString, required = false,
                                 default = nil)
  if valid_773752 != nil:
    section.add "X-Amz-Credential", valid_773752
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_773753 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_773753 = validateParameter(valid_773753, JString, required = false,
                                 default = nil)
  if valid_773753 != nil:
    section.add "FinalSnapshotIdentifier", valid_773753
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_773754 = formData.getOrDefault("CacheClusterId")
  valid_773754 = validateParameter(valid_773754, JString, required = true,
                                 default = nil)
  if valid_773754 != nil:
    section.add "CacheClusterId", valid_773754
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773755: Call_PostDeleteCacheCluster_773741; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_773755.validator(path, query, header, formData, body)
  let scheme = call_773755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773755.url(scheme.get, call_773755.host, call_773755.base,
                         call_773755.route, valid.getOrDefault("path"))
  result = hook(call_773755, url, valid)

proc call*(call_773756: Call_PostDeleteCacheCluster_773741; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  var query_773757 = newJObject()
  var formData_773758 = newJObject()
  add(formData_773758, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(query_773757, "Action", newJString(Action))
  add(query_773757, "Version", newJString(Version))
  add(formData_773758, "CacheClusterId", newJString(CacheClusterId))
  result = call_773756.call(nil, query_773757, nil, formData_773758, nil)

var postDeleteCacheCluster* = Call_PostDeleteCacheCluster_773741(
    name: "postDeleteCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_PostDeleteCacheCluster_773742, base: "/",
    url: url_PostDeleteCacheCluster_773743, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheCluster_773724 = ref object of OpenApiRestCall_772597
proc url_GetDeleteCacheCluster_773726(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCacheCluster_773725(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: JString
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_773727 = query.getOrDefault("CacheClusterId")
  valid_773727 = validateParameter(valid_773727, JString, required = true,
                                 default = nil)
  if valid_773727 != nil:
    section.add "CacheClusterId", valid_773727
  var valid_773728 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_773728 = validateParameter(valid_773728, JString, required = false,
                                 default = nil)
  if valid_773728 != nil:
    section.add "FinalSnapshotIdentifier", valid_773728
  var valid_773729 = query.getOrDefault("Action")
  valid_773729 = validateParameter(valid_773729, JString, required = true,
                                 default = newJString("DeleteCacheCluster"))
  if valid_773729 != nil:
    section.add "Action", valid_773729
  var valid_773730 = query.getOrDefault("Version")
  valid_773730 = validateParameter(valid_773730, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773730 != nil:
    section.add "Version", valid_773730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773731 = header.getOrDefault("X-Amz-Date")
  valid_773731 = validateParameter(valid_773731, JString, required = false,
                                 default = nil)
  if valid_773731 != nil:
    section.add "X-Amz-Date", valid_773731
  var valid_773732 = header.getOrDefault("X-Amz-Security-Token")
  valid_773732 = validateParameter(valid_773732, JString, required = false,
                                 default = nil)
  if valid_773732 != nil:
    section.add "X-Amz-Security-Token", valid_773732
  var valid_773733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773733 = validateParameter(valid_773733, JString, required = false,
                                 default = nil)
  if valid_773733 != nil:
    section.add "X-Amz-Content-Sha256", valid_773733
  var valid_773734 = header.getOrDefault("X-Amz-Algorithm")
  valid_773734 = validateParameter(valid_773734, JString, required = false,
                                 default = nil)
  if valid_773734 != nil:
    section.add "X-Amz-Algorithm", valid_773734
  var valid_773735 = header.getOrDefault("X-Amz-Signature")
  valid_773735 = validateParameter(valid_773735, JString, required = false,
                                 default = nil)
  if valid_773735 != nil:
    section.add "X-Amz-Signature", valid_773735
  var valid_773736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773736 = validateParameter(valid_773736, JString, required = false,
                                 default = nil)
  if valid_773736 != nil:
    section.add "X-Amz-SignedHeaders", valid_773736
  var valid_773737 = header.getOrDefault("X-Amz-Credential")
  valid_773737 = validateParameter(valid_773737, JString, required = false,
                                 default = nil)
  if valid_773737 != nil:
    section.add "X-Amz-Credential", valid_773737
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773738: Call_GetDeleteCacheCluster_773724; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ## 
  let valid = call_773738.validator(path, query, header, formData, body)
  let scheme = call_773738.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773738.url(scheme.get, call_773738.host, call_773738.base,
                         call_773738.route, valid.getOrDefault("path"))
  result = hook(call_773738, url, valid)

proc call*(call_773739: Call_GetDeleteCacheCluster_773724; CacheClusterId: string;
          FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheCluster
  ## <p>Deletes a previously provisioned cluster. <code>DeleteCacheCluster</code> deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.</p> <p>This operation is not valid for:</p> <ul> <li> <p>Redis (cluster mode enabled) clusters</p> </li> <li> <p>A cluster that is the last read replica of a replication group</p> </li> <li> <p>A node group (shard) that has Multi-AZ mode enabled</p> </li> <li> <p>A cluster from a Redis (cluster mode enabled) replication group</p> </li> <li> <p>A cluster that is not in the <code>available</code> state</p> </li> </ul>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   FinalSnapshotIdentifier: string
  ##                          : The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773740 = newJObject()
  add(query_773740, "CacheClusterId", newJString(CacheClusterId))
  add(query_773740, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_773740, "Action", newJString(Action))
  add(query_773740, "Version", newJString(Version))
  result = call_773739.call(nil, query_773740, nil, nil, nil)

var getDeleteCacheCluster* = Call_GetDeleteCacheCluster_773724(
    name: "getDeleteCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheCluster",
    validator: validate_GetDeleteCacheCluster_773725, base: "/",
    url: url_GetDeleteCacheCluster_773726, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheParameterGroup_773775 = ref object of OpenApiRestCall_772597
proc url_PostDeleteCacheParameterGroup_773777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCacheParameterGroup_773776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773778 = query.getOrDefault("Action")
  valid_773778 = validateParameter(valid_773778, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_773778 != nil:
    section.add "Action", valid_773778
  var valid_773779 = query.getOrDefault("Version")
  valid_773779 = validateParameter(valid_773779, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773779 != nil:
    section.add "Version", valid_773779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773780 = header.getOrDefault("X-Amz-Date")
  valid_773780 = validateParameter(valid_773780, JString, required = false,
                                 default = nil)
  if valid_773780 != nil:
    section.add "X-Amz-Date", valid_773780
  var valid_773781 = header.getOrDefault("X-Amz-Security-Token")
  valid_773781 = validateParameter(valid_773781, JString, required = false,
                                 default = nil)
  if valid_773781 != nil:
    section.add "X-Amz-Security-Token", valid_773781
  var valid_773782 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773782 = validateParameter(valid_773782, JString, required = false,
                                 default = nil)
  if valid_773782 != nil:
    section.add "X-Amz-Content-Sha256", valid_773782
  var valid_773783 = header.getOrDefault("X-Amz-Algorithm")
  valid_773783 = validateParameter(valid_773783, JString, required = false,
                                 default = nil)
  if valid_773783 != nil:
    section.add "X-Amz-Algorithm", valid_773783
  var valid_773784 = header.getOrDefault("X-Amz-Signature")
  valid_773784 = validateParameter(valid_773784, JString, required = false,
                                 default = nil)
  if valid_773784 != nil:
    section.add "X-Amz-Signature", valid_773784
  var valid_773785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773785 = validateParameter(valid_773785, JString, required = false,
                                 default = nil)
  if valid_773785 != nil:
    section.add "X-Amz-SignedHeaders", valid_773785
  var valid_773786 = header.getOrDefault("X-Amz-Credential")
  valid_773786 = validateParameter(valid_773786, JString, required = false,
                                 default = nil)
  if valid_773786 != nil:
    section.add "X-Amz-Credential", valid_773786
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_773787 = formData.getOrDefault("CacheParameterGroupName")
  valid_773787 = validateParameter(valid_773787, JString, required = true,
                                 default = nil)
  if valid_773787 != nil:
    section.add "CacheParameterGroupName", valid_773787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773788: Call_PostDeleteCacheParameterGroup_773775; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_773788.validator(path, query, header, formData, body)
  let scheme = call_773788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773788.url(scheme.get, call_773788.host, call_773788.base,
                         call_773788.route, valid.getOrDefault("path"))
  result = hook(call_773788, url, valid)

proc call*(call_773789: Call_PostDeleteCacheParameterGroup_773775;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Version: string (required)
  var query_773790 = newJObject()
  var formData_773791 = newJObject()
  add(query_773790, "Action", newJString(Action))
  add(formData_773791, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(query_773790, "Version", newJString(Version))
  result = call_773789.call(nil, query_773790, nil, formData_773791, nil)

var postDeleteCacheParameterGroup* = Call_PostDeleteCacheParameterGroup_773775(
    name: "postDeleteCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_PostDeleteCacheParameterGroup_773776, base: "/",
    url: url_PostDeleteCacheParameterGroup_773777,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheParameterGroup_773759 = ref object of OpenApiRestCall_772597
proc url_GetDeleteCacheParameterGroup_773761(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCacheParameterGroup_773760(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_773762 = query.getOrDefault("CacheParameterGroupName")
  valid_773762 = validateParameter(valid_773762, JString, required = true,
                                 default = nil)
  if valid_773762 != nil:
    section.add "CacheParameterGroupName", valid_773762
  var valid_773763 = query.getOrDefault("Action")
  valid_773763 = validateParameter(valid_773763, JString, required = true, default = newJString(
      "DeleteCacheParameterGroup"))
  if valid_773763 != nil:
    section.add "Action", valid_773763
  var valid_773764 = query.getOrDefault("Version")
  valid_773764 = validateParameter(valid_773764, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773764 != nil:
    section.add "Version", valid_773764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773765 = header.getOrDefault("X-Amz-Date")
  valid_773765 = validateParameter(valid_773765, JString, required = false,
                                 default = nil)
  if valid_773765 != nil:
    section.add "X-Amz-Date", valid_773765
  var valid_773766 = header.getOrDefault("X-Amz-Security-Token")
  valid_773766 = validateParameter(valid_773766, JString, required = false,
                                 default = nil)
  if valid_773766 != nil:
    section.add "X-Amz-Security-Token", valid_773766
  var valid_773767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773767 = validateParameter(valid_773767, JString, required = false,
                                 default = nil)
  if valid_773767 != nil:
    section.add "X-Amz-Content-Sha256", valid_773767
  var valid_773768 = header.getOrDefault("X-Amz-Algorithm")
  valid_773768 = validateParameter(valid_773768, JString, required = false,
                                 default = nil)
  if valid_773768 != nil:
    section.add "X-Amz-Algorithm", valid_773768
  var valid_773769 = header.getOrDefault("X-Amz-Signature")
  valid_773769 = validateParameter(valid_773769, JString, required = false,
                                 default = nil)
  if valid_773769 != nil:
    section.add "X-Amz-Signature", valid_773769
  var valid_773770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773770 = validateParameter(valid_773770, JString, required = false,
                                 default = nil)
  if valid_773770 != nil:
    section.add "X-Amz-SignedHeaders", valid_773770
  var valid_773771 = header.getOrDefault("X-Amz-Credential")
  valid_773771 = validateParameter(valid_773771, JString, required = false,
                                 default = nil)
  if valid_773771 != nil:
    section.add "X-Amz-Credential", valid_773771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773772: Call_GetDeleteCacheParameterGroup_773759; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ## 
  let valid = call_773772.validator(path, query, header, formData, body)
  let scheme = call_773772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773772.url(scheme.get, call_773772.host, call_773772.base,
                         call_773772.route, valid.getOrDefault("path"))
  result = hook(call_773772, url, valid)

proc call*(call_773773: Call_GetDeleteCacheParameterGroup_773759;
          CacheParameterGroupName: string;
          Action: string = "DeleteCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheParameterGroup
  ## Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters.
  ##   CacheParameterGroupName: string (required)
  ##                          : <p>The name of the cache parameter group to delete.</p> <note> <p>The specified cache security group must not be associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773774 = newJObject()
  add(query_773774, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_773774, "Action", newJString(Action))
  add(query_773774, "Version", newJString(Version))
  result = call_773773.call(nil, query_773774, nil, nil, nil)

var getDeleteCacheParameterGroup* = Call_GetDeleteCacheParameterGroup_773759(
    name: "getDeleteCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteCacheParameterGroup",
    validator: validate_GetDeleteCacheParameterGroup_773760, base: "/",
    url: url_GetDeleteCacheParameterGroup_773761,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSecurityGroup_773808 = ref object of OpenApiRestCall_772597
proc url_PostDeleteCacheSecurityGroup_773810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCacheSecurityGroup_773809(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773811 = query.getOrDefault("Action")
  valid_773811 = validateParameter(valid_773811, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_773811 != nil:
    section.add "Action", valid_773811
  var valid_773812 = query.getOrDefault("Version")
  valid_773812 = validateParameter(valid_773812, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773812 != nil:
    section.add "Version", valid_773812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773813 = header.getOrDefault("X-Amz-Date")
  valid_773813 = validateParameter(valid_773813, JString, required = false,
                                 default = nil)
  if valid_773813 != nil:
    section.add "X-Amz-Date", valid_773813
  var valid_773814 = header.getOrDefault("X-Amz-Security-Token")
  valid_773814 = validateParameter(valid_773814, JString, required = false,
                                 default = nil)
  if valid_773814 != nil:
    section.add "X-Amz-Security-Token", valid_773814
  var valid_773815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773815 = validateParameter(valid_773815, JString, required = false,
                                 default = nil)
  if valid_773815 != nil:
    section.add "X-Amz-Content-Sha256", valid_773815
  var valid_773816 = header.getOrDefault("X-Amz-Algorithm")
  valid_773816 = validateParameter(valid_773816, JString, required = false,
                                 default = nil)
  if valid_773816 != nil:
    section.add "X-Amz-Algorithm", valid_773816
  var valid_773817 = header.getOrDefault("X-Amz-Signature")
  valid_773817 = validateParameter(valid_773817, JString, required = false,
                                 default = nil)
  if valid_773817 != nil:
    section.add "X-Amz-Signature", valid_773817
  var valid_773818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773818 = validateParameter(valid_773818, JString, required = false,
                                 default = nil)
  if valid_773818 != nil:
    section.add "X-Amz-SignedHeaders", valid_773818
  var valid_773819 = header.getOrDefault("X-Amz-Credential")
  valid_773819 = validateParameter(valid_773819, JString, required = false,
                                 default = nil)
  if valid_773819 != nil:
    section.add "X-Amz-Credential", valid_773819
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_773820 = formData.getOrDefault("CacheSecurityGroupName")
  valid_773820 = validateParameter(valid_773820, JString, required = true,
                                 default = nil)
  if valid_773820 != nil:
    section.add "CacheSecurityGroupName", valid_773820
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773821: Call_PostDeleteCacheSecurityGroup_773808; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_773821.validator(path, query, header, formData, body)
  let scheme = call_773821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773821.url(scheme.get, call_773821.host, call_773821.base,
                         call_773821.route, valid.getOrDefault("path"))
  result = hook(call_773821, url, valid)

proc call*(call_773822: Call_PostDeleteCacheSecurityGroup_773808;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773823 = newJObject()
  var formData_773824 = newJObject()
  add(formData_773824, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_773823, "Action", newJString(Action))
  add(query_773823, "Version", newJString(Version))
  result = call_773822.call(nil, query_773823, nil, formData_773824, nil)

var postDeleteCacheSecurityGroup* = Call_PostDeleteCacheSecurityGroup_773808(
    name: "postDeleteCacheSecurityGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_PostDeleteCacheSecurityGroup_773809, base: "/",
    url: url_PostDeleteCacheSecurityGroup_773810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSecurityGroup_773792 = ref object of OpenApiRestCall_772597
proc url_GetDeleteCacheSecurityGroup_773794(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCacheSecurityGroup_773793(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_773795 = query.getOrDefault("CacheSecurityGroupName")
  valid_773795 = validateParameter(valid_773795, JString, required = true,
                                 default = nil)
  if valid_773795 != nil:
    section.add "CacheSecurityGroupName", valid_773795
  var valid_773796 = query.getOrDefault("Action")
  valid_773796 = validateParameter(valid_773796, JString, required = true, default = newJString(
      "DeleteCacheSecurityGroup"))
  if valid_773796 != nil:
    section.add "Action", valid_773796
  var valid_773797 = query.getOrDefault("Version")
  valid_773797 = validateParameter(valid_773797, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773797 != nil:
    section.add "Version", valid_773797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773798 = header.getOrDefault("X-Amz-Date")
  valid_773798 = validateParameter(valid_773798, JString, required = false,
                                 default = nil)
  if valid_773798 != nil:
    section.add "X-Amz-Date", valid_773798
  var valid_773799 = header.getOrDefault("X-Amz-Security-Token")
  valid_773799 = validateParameter(valid_773799, JString, required = false,
                                 default = nil)
  if valid_773799 != nil:
    section.add "X-Amz-Security-Token", valid_773799
  var valid_773800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773800 = validateParameter(valid_773800, JString, required = false,
                                 default = nil)
  if valid_773800 != nil:
    section.add "X-Amz-Content-Sha256", valid_773800
  var valid_773801 = header.getOrDefault("X-Amz-Algorithm")
  valid_773801 = validateParameter(valid_773801, JString, required = false,
                                 default = nil)
  if valid_773801 != nil:
    section.add "X-Amz-Algorithm", valid_773801
  var valid_773802 = header.getOrDefault("X-Amz-Signature")
  valid_773802 = validateParameter(valid_773802, JString, required = false,
                                 default = nil)
  if valid_773802 != nil:
    section.add "X-Amz-Signature", valid_773802
  var valid_773803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773803 = validateParameter(valid_773803, JString, required = false,
                                 default = nil)
  if valid_773803 != nil:
    section.add "X-Amz-SignedHeaders", valid_773803
  var valid_773804 = header.getOrDefault("X-Amz-Credential")
  valid_773804 = validateParameter(valid_773804, JString, required = false,
                                 default = nil)
  if valid_773804 != nil:
    section.add "X-Amz-Credential", valid_773804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773805: Call_GetDeleteCacheSecurityGroup_773792; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_773805.validator(path, query, header, formData, body)
  let scheme = call_773805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773805.url(scheme.get, call_773805.host, call_773805.base,
                         call_773805.route, valid.getOrDefault("path"))
  result = hook(call_773805, url, valid)

proc call*(call_773806: Call_GetDeleteCacheSecurityGroup_773792;
          CacheSecurityGroupName: string;
          Action: string = "DeleteCacheSecurityGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSecurityGroup
  ## <p>Deletes a cache security group.</p> <note> <p>You cannot delete a cache security group if it is associated with any clusters.</p> </note>
  ##   CacheSecurityGroupName: string (required)
  ##                         : <p>The name of the cache security group to delete.</p> <note> <p>You cannot delete the default security group.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773807 = newJObject()
  add(query_773807, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_773807, "Action", newJString(Action))
  add(query_773807, "Version", newJString(Version))
  result = call_773806.call(nil, query_773807, nil, nil, nil)

var getDeleteCacheSecurityGroup* = Call_GetDeleteCacheSecurityGroup_773792(
    name: "getDeleteCacheSecurityGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSecurityGroup",
    validator: validate_GetDeleteCacheSecurityGroup_773793, base: "/",
    url: url_GetDeleteCacheSecurityGroup_773794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCacheSubnetGroup_773841 = ref object of OpenApiRestCall_772597
proc url_PostDeleteCacheSubnetGroup_773843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteCacheSubnetGroup_773842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773844 = query.getOrDefault("Action")
  valid_773844 = validateParameter(valid_773844, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_773844 != nil:
    section.add "Action", valid_773844
  var valid_773845 = query.getOrDefault("Version")
  valid_773845 = validateParameter(valid_773845, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773845 != nil:
    section.add "Version", valid_773845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773846 = header.getOrDefault("X-Amz-Date")
  valid_773846 = validateParameter(valid_773846, JString, required = false,
                                 default = nil)
  if valid_773846 != nil:
    section.add "X-Amz-Date", valid_773846
  var valid_773847 = header.getOrDefault("X-Amz-Security-Token")
  valid_773847 = validateParameter(valid_773847, JString, required = false,
                                 default = nil)
  if valid_773847 != nil:
    section.add "X-Amz-Security-Token", valid_773847
  var valid_773848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773848 = validateParameter(valid_773848, JString, required = false,
                                 default = nil)
  if valid_773848 != nil:
    section.add "X-Amz-Content-Sha256", valid_773848
  var valid_773849 = header.getOrDefault("X-Amz-Algorithm")
  valid_773849 = validateParameter(valid_773849, JString, required = false,
                                 default = nil)
  if valid_773849 != nil:
    section.add "X-Amz-Algorithm", valid_773849
  var valid_773850 = header.getOrDefault("X-Amz-Signature")
  valid_773850 = validateParameter(valid_773850, JString, required = false,
                                 default = nil)
  if valid_773850 != nil:
    section.add "X-Amz-Signature", valid_773850
  var valid_773851 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773851 = validateParameter(valid_773851, JString, required = false,
                                 default = nil)
  if valid_773851 != nil:
    section.add "X-Amz-SignedHeaders", valid_773851
  var valid_773852 = header.getOrDefault("X-Amz-Credential")
  valid_773852 = validateParameter(valid_773852, JString, required = false,
                                 default = nil)
  if valid_773852 != nil:
    section.add "X-Amz-Credential", valid_773852
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_773853 = formData.getOrDefault("CacheSubnetGroupName")
  valid_773853 = validateParameter(valid_773853, JString, required = true,
                                 default = nil)
  if valid_773853 != nil:
    section.add "CacheSubnetGroupName", valid_773853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773854: Call_PostDeleteCacheSubnetGroup_773841; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_773854.validator(path, query, header, formData, body)
  let scheme = call_773854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773854.url(scheme.get, call_773854.host, call_773854.base,
                         call_773854.route, valid.getOrDefault("path"))
  result = hook(call_773854, url, valid)

proc call*(call_773855: Call_PostDeleteCacheSubnetGroup_773841;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_773856 = newJObject()
  var formData_773857 = newJObject()
  add(query_773856, "Action", newJString(Action))
  add(formData_773857, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_773856, "Version", newJString(Version))
  result = call_773855.call(nil, query_773856, nil, formData_773857, nil)

var postDeleteCacheSubnetGroup* = Call_PostDeleteCacheSubnetGroup_773841(
    name: "postDeleteCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_PostDeleteCacheSubnetGroup_773842, base: "/",
    url: url_PostDeleteCacheSubnetGroup_773843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCacheSubnetGroup_773825 = ref object of OpenApiRestCall_772597
proc url_GetDeleteCacheSubnetGroup_773827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteCacheSubnetGroup_773826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773828 = query.getOrDefault("Action")
  valid_773828 = validateParameter(valid_773828, JString, required = true,
                                 default = newJString("DeleteCacheSubnetGroup"))
  if valid_773828 != nil:
    section.add "Action", valid_773828
  var valid_773829 = query.getOrDefault("CacheSubnetGroupName")
  valid_773829 = validateParameter(valid_773829, JString, required = true,
                                 default = nil)
  if valid_773829 != nil:
    section.add "CacheSubnetGroupName", valid_773829
  var valid_773830 = query.getOrDefault("Version")
  valid_773830 = validateParameter(valid_773830, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773830 != nil:
    section.add "Version", valid_773830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773831 = header.getOrDefault("X-Amz-Date")
  valid_773831 = validateParameter(valid_773831, JString, required = false,
                                 default = nil)
  if valid_773831 != nil:
    section.add "X-Amz-Date", valid_773831
  var valid_773832 = header.getOrDefault("X-Amz-Security-Token")
  valid_773832 = validateParameter(valid_773832, JString, required = false,
                                 default = nil)
  if valid_773832 != nil:
    section.add "X-Amz-Security-Token", valid_773832
  var valid_773833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773833 = validateParameter(valid_773833, JString, required = false,
                                 default = nil)
  if valid_773833 != nil:
    section.add "X-Amz-Content-Sha256", valid_773833
  var valid_773834 = header.getOrDefault("X-Amz-Algorithm")
  valid_773834 = validateParameter(valid_773834, JString, required = false,
                                 default = nil)
  if valid_773834 != nil:
    section.add "X-Amz-Algorithm", valid_773834
  var valid_773835 = header.getOrDefault("X-Amz-Signature")
  valid_773835 = validateParameter(valid_773835, JString, required = false,
                                 default = nil)
  if valid_773835 != nil:
    section.add "X-Amz-Signature", valid_773835
  var valid_773836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773836 = validateParameter(valid_773836, JString, required = false,
                                 default = nil)
  if valid_773836 != nil:
    section.add "X-Amz-SignedHeaders", valid_773836
  var valid_773837 = header.getOrDefault("X-Amz-Credential")
  valid_773837 = validateParameter(valid_773837, JString, required = false,
                                 default = nil)
  if valid_773837 != nil:
    section.add "X-Amz-Credential", valid_773837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773838: Call_GetDeleteCacheSubnetGroup_773825; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ## 
  let valid = call_773838.validator(path, query, header, formData, body)
  let scheme = call_773838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773838.url(scheme.get, call_773838.host, call_773838.base,
                         call_773838.route, valid.getOrDefault("path"))
  result = hook(call_773838, url, valid)

proc call*(call_773839: Call_GetDeleteCacheSubnetGroup_773825;
          CacheSubnetGroupName: string; Action: string = "DeleteCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getDeleteCacheSubnetGroup
  ## <p>Deletes a cache subnet group.</p> <note> <p>You cannot delete a cache subnet group if it is associated with any clusters.</p> </note>
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name of the cache subnet group to delete.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p>
  ##   Version: string (required)
  var query_773840 = newJObject()
  add(query_773840, "Action", newJString(Action))
  add(query_773840, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_773840, "Version", newJString(Version))
  result = call_773839.call(nil, query_773840, nil, nil, nil)

var getDeleteCacheSubnetGroup* = Call_GetDeleteCacheSubnetGroup_773825(
    name: "getDeleteCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteCacheSubnetGroup",
    validator: validate_GetDeleteCacheSubnetGroup_773826, base: "/",
    url: url_GetDeleteCacheSubnetGroup_773827,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteReplicationGroup_773876 = ref object of OpenApiRestCall_772597
proc url_PostDeleteReplicationGroup_773878(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteReplicationGroup_773877(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773879 = query.getOrDefault("Action")
  valid_773879 = validateParameter(valid_773879, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_773879 != nil:
    section.add "Action", valid_773879
  var valid_773880 = query.getOrDefault("Version")
  valid_773880 = validateParameter(valid_773880, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773880 != nil:
    section.add "Version", valid_773880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773881 = header.getOrDefault("X-Amz-Date")
  valid_773881 = validateParameter(valid_773881, JString, required = false,
                                 default = nil)
  if valid_773881 != nil:
    section.add "X-Amz-Date", valid_773881
  var valid_773882 = header.getOrDefault("X-Amz-Security-Token")
  valid_773882 = validateParameter(valid_773882, JString, required = false,
                                 default = nil)
  if valid_773882 != nil:
    section.add "X-Amz-Security-Token", valid_773882
  var valid_773883 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773883 = validateParameter(valid_773883, JString, required = false,
                                 default = nil)
  if valid_773883 != nil:
    section.add "X-Amz-Content-Sha256", valid_773883
  var valid_773884 = header.getOrDefault("X-Amz-Algorithm")
  valid_773884 = validateParameter(valid_773884, JString, required = false,
                                 default = nil)
  if valid_773884 != nil:
    section.add "X-Amz-Algorithm", valid_773884
  var valid_773885 = header.getOrDefault("X-Amz-Signature")
  valid_773885 = validateParameter(valid_773885, JString, required = false,
                                 default = nil)
  if valid_773885 != nil:
    section.add "X-Amz-Signature", valid_773885
  var valid_773886 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773886 = validateParameter(valid_773886, JString, required = false,
                                 default = nil)
  if valid_773886 != nil:
    section.add "X-Amz-SignedHeaders", valid_773886
  var valid_773887 = header.getOrDefault("X-Amz-Credential")
  valid_773887 = validateParameter(valid_773887, JString, required = false,
                                 default = nil)
  if valid_773887 != nil:
    section.add "X-Amz-Credential", valid_773887
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  section = newJObject()
  var valid_773888 = formData.getOrDefault("FinalSnapshotIdentifier")
  valid_773888 = validateParameter(valid_773888, JString, required = false,
                                 default = nil)
  if valid_773888 != nil:
    section.add "FinalSnapshotIdentifier", valid_773888
  var valid_773889 = formData.getOrDefault("RetainPrimaryCluster")
  valid_773889 = validateParameter(valid_773889, JBool, required = false, default = nil)
  if valid_773889 != nil:
    section.add "RetainPrimaryCluster", valid_773889
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_773890 = formData.getOrDefault("ReplicationGroupId")
  valid_773890 = validateParameter(valid_773890, JString, required = true,
                                 default = nil)
  if valid_773890 != nil:
    section.add "ReplicationGroupId", valid_773890
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773891: Call_PostDeleteReplicationGroup_773876; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773891.validator(path, query, header, formData, body)
  let scheme = call_773891.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773891.url(scheme.get, call_773891.host, call_773891.base,
                         call_773891.route, valid.getOrDefault("path"))
  result = hook(call_773891, url, valid)

proc call*(call_773892: Call_PostDeleteReplicationGroup_773876;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          RetainPrimaryCluster: bool = false;
          Action: string = "DeleteReplicationGroup"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773893 = newJObject()
  var formData_773894 = newJObject()
  add(formData_773894, "FinalSnapshotIdentifier",
      newJString(FinalSnapshotIdentifier))
  add(formData_773894, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(formData_773894, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773893, "Action", newJString(Action))
  add(query_773893, "Version", newJString(Version))
  result = call_773892.call(nil, query_773893, nil, formData_773894, nil)

var postDeleteReplicationGroup* = Call_PostDeleteReplicationGroup_773876(
    name: "postDeleteReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_PostDeleteReplicationGroup_773877, base: "/",
    url: url_PostDeleteReplicationGroup_773878,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteReplicationGroup_773858 = ref object of OpenApiRestCall_772597
proc url_GetDeleteReplicationGroup_773860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteReplicationGroup_773859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalSnapshotIdentifier: JString
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   RetainPrimaryCluster: JBool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773861 = query.getOrDefault("FinalSnapshotIdentifier")
  valid_773861 = validateParameter(valid_773861, JString, required = false,
                                 default = nil)
  if valid_773861 != nil:
    section.add "FinalSnapshotIdentifier", valid_773861
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773862 = query.getOrDefault("Action")
  valid_773862 = validateParameter(valid_773862, JString, required = true,
                                 default = newJString("DeleteReplicationGroup"))
  if valid_773862 != nil:
    section.add "Action", valid_773862
  var valid_773863 = query.getOrDefault("ReplicationGroupId")
  valid_773863 = validateParameter(valid_773863, JString, required = true,
                                 default = nil)
  if valid_773863 != nil:
    section.add "ReplicationGroupId", valid_773863
  var valid_773864 = query.getOrDefault("RetainPrimaryCluster")
  valid_773864 = validateParameter(valid_773864, JBool, required = false, default = nil)
  if valid_773864 != nil:
    section.add "RetainPrimaryCluster", valid_773864
  var valid_773865 = query.getOrDefault("Version")
  valid_773865 = validateParameter(valid_773865, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773865 != nil:
    section.add "Version", valid_773865
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773866 = header.getOrDefault("X-Amz-Date")
  valid_773866 = validateParameter(valid_773866, JString, required = false,
                                 default = nil)
  if valid_773866 != nil:
    section.add "X-Amz-Date", valid_773866
  var valid_773867 = header.getOrDefault("X-Amz-Security-Token")
  valid_773867 = validateParameter(valid_773867, JString, required = false,
                                 default = nil)
  if valid_773867 != nil:
    section.add "X-Amz-Security-Token", valid_773867
  var valid_773868 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773868 = validateParameter(valid_773868, JString, required = false,
                                 default = nil)
  if valid_773868 != nil:
    section.add "X-Amz-Content-Sha256", valid_773868
  var valid_773869 = header.getOrDefault("X-Amz-Algorithm")
  valid_773869 = validateParameter(valid_773869, JString, required = false,
                                 default = nil)
  if valid_773869 != nil:
    section.add "X-Amz-Algorithm", valid_773869
  var valid_773870 = header.getOrDefault("X-Amz-Signature")
  valid_773870 = validateParameter(valid_773870, JString, required = false,
                                 default = nil)
  if valid_773870 != nil:
    section.add "X-Amz-Signature", valid_773870
  var valid_773871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773871 = validateParameter(valid_773871, JString, required = false,
                                 default = nil)
  if valid_773871 != nil:
    section.add "X-Amz-SignedHeaders", valid_773871
  var valid_773872 = header.getOrDefault("X-Amz-Credential")
  valid_773872 = validateParameter(valid_773872, JString, required = false,
                                 default = nil)
  if valid_773872 != nil:
    section.add "X-Amz-Credential", valid_773872
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773873: Call_GetDeleteReplicationGroup_773858; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773873.validator(path, query, header, formData, body)
  let scheme = call_773873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773873.url(scheme.get, call_773873.host, call_773873.base,
                         call_773873.route, valid.getOrDefault("path"))
  result = hook(call_773873, url, valid)

proc call*(call_773874: Call_GetDeleteReplicationGroup_773858;
          ReplicationGroupId: string; FinalSnapshotIdentifier: string = "";
          Action: string = "DeleteReplicationGroup";
          RetainPrimaryCluster: bool = false; Version: string = "2015-02-02"): Recallable =
  ## getDeleteReplicationGroup
  ## <p>Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting <code>RetainPrimaryCluster=true</code>.</p> <p>When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   FinalSnapshotIdentifier: string
  ##                          : The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier for the cluster to be deleted. This parameter is not case sensitive.
  ##   RetainPrimaryCluster: bool
  ##                       : If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
  ##   Version: string (required)
  var query_773875 = newJObject()
  add(query_773875, "FinalSnapshotIdentifier", newJString(FinalSnapshotIdentifier))
  add(query_773875, "Action", newJString(Action))
  add(query_773875, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_773875, "RetainPrimaryCluster", newJBool(RetainPrimaryCluster))
  add(query_773875, "Version", newJString(Version))
  result = call_773874.call(nil, query_773875, nil, nil, nil)

var getDeleteReplicationGroup* = Call_GetDeleteReplicationGroup_773858(
    name: "getDeleteReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteReplicationGroup",
    validator: validate_GetDeleteReplicationGroup_773859, base: "/",
    url: url_GetDeleteReplicationGroup_773860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteSnapshot_773911 = ref object of OpenApiRestCall_772597
proc url_PostDeleteSnapshot_773913(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDeleteSnapshot_773912(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773914 = query.getOrDefault("Action")
  valid_773914 = validateParameter(valid_773914, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_773914 != nil:
    section.add "Action", valid_773914
  var valid_773915 = query.getOrDefault("Version")
  valid_773915 = validateParameter(valid_773915, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773915 != nil:
    section.add "Version", valid_773915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773916 = header.getOrDefault("X-Amz-Date")
  valid_773916 = validateParameter(valid_773916, JString, required = false,
                                 default = nil)
  if valid_773916 != nil:
    section.add "X-Amz-Date", valid_773916
  var valid_773917 = header.getOrDefault("X-Amz-Security-Token")
  valid_773917 = validateParameter(valid_773917, JString, required = false,
                                 default = nil)
  if valid_773917 != nil:
    section.add "X-Amz-Security-Token", valid_773917
  var valid_773918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773918 = validateParameter(valid_773918, JString, required = false,
                                 default = nil)
  if valid_773918 != nil:
    section.add "X-Amz-Content-Sha256", valid_773918
  var valid_773919 = header.getOrDefault("X-Amz-Algorithm")
  valid_773919 = validateParameter(valid_773919, JString, required = false,
                                 default = nil)
  if valid_773919 != nil:
    section.add "X-Amz-Algorithm", valid_773919
  var valid_773920 = header.getOrDefault("X-Amz-Signature")
  valid_773920 = validateParameter(valid_773920, JString, required = false,
                                 default = nil)
  if valid_773920 != nil:
    section.add "X-Amz-Signature", valid_773920
  var valid_773921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773921 = validateParameter(valid_773921, JString, required = false,
                                 default = nil)
  if valid_773921 != nil:
    section.add "X-Amz-SignedHeaders", valid_773921
  var valid_773922 = header.getOrDefault("X-Amz-Credential")
  valid_773922 = validateParameter(valid_773922, JString, required = false,
                                 default = nil)
  if valid_773922 != nil:
    section.add "X-Amz-Credential", valid_773922
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `SnapshotName` field"
  var valid_773923 = formData.getOrDefault("SnapshotName")
  valid_773923 = validateParameter(valid_773923, JString, required = true,
                                 default = nil)
  if valid_773923 != nil:
    section.add "SnapshotName", valid_773923
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773924: Call_PostDeleteSnapshot_773911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773924.validator(path, query, header, formData, body)
  let scheme = call_773924.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773924.url(scheme.get, call_773924.host, call_773924.base,
                         call_773924.route, valid.getOrDefault("path"))
  result = hook(call_773924, url, valid)

proc call*(call_773925: Call_PostDeleteSnapshot_773911; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## postDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  var query_773926 = newJObject()
  var formData_773927 = newJObject()
  add(query_773926, "Action", newJString(Action))
  add(query_773926, "Version", newJString(Version))
  add(formData_773927, "SnapshotName", newJString(SnapshotName))
  result = call_773925.call(nil, query_773926, nil, formData_773927, nil)

var postDeleteSnapshot* = Call_PostDeleteSnapshot_773911(
    name: "postDeleteSnapshot", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DeleteSnapshot",
    validator: validate_PostDeleteSnapshot_773912, base: "/",
    url: url_PostDeleteSnapshot_773913, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteSnapshot_773895 = ref object of OpenApiRestCall_772597
proc url_GetDeleteSnapshot_773897(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDeleteSnapshot_773896(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SnapshotName: JString (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SnapshotName` field"
  var valid_773898 = query.getOrDefault("SnapshotName")
  valid_773898 = validateParameter(valid_773898, JString, required = true,
                                 default = nil)
  if valid_773898 != nil:
    section.add "SnapshotName", valid_773898
  var valid_773899 = query.getOrDefault("Action")
  valid_773899 = validateParameter(valid_773899, JString, required = true,
                                 default = newJString("DeleteSnapshot"))
  if valid_773899 != nil:
    section.add "Action", valid_773899
  var valid_773900 = query.getOrDefault("Version")
  valid_773900 = validateParameter(valid_773900, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773900 != nil:
    section.add "Version", valid_773900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773901 = header.getOrDefault("X-Amz-Date")
  valid_773901 = validateParameter(valid_773901, JString, required = false,
                                 default = nil)
  if valid_773901 != nil:
    section.add "X-Amz-Date", valid_773901
  var valid_773902 = header.getOrDefault("X-Amz-Security-Token")
  valid_773902 = validateParameter(valid_773902, JString, required = false,
                                 default = nil)
  if valid_773902 != nil:
    section.add "X-Amz-Security-Token", valid_773902
  var valid_773903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773903 = validateParameter(valid_773903, JString, required = false,
                                 default = nil)
  if valid_773903 != nil:
    section.add "X-Amz-Content-Sha256", valid_773903
  var valid_773904 = header.getOrDefault("X-Amz-Algorithm")
  valid_773904 = validateParameter(valid_773904, JString, required = false,
                                 default = nil)
  if valid_773904 != nil:
    section.add "X-Amz-Algorithm", valid_773904
  var valid_773905 = header.getOrDefault("X-Amz-Signature")
  valid_773905 = validateParameter(valid_773905, JString, required = false,
                                 default = nil)
  if valid_773905 != nil:
    section.add "X-Amz-Signature", valid_773905
  var valid_773906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773906 = validateParameter(valid_773906, JString, required = false,
                                 default = nil)
  if valid_773906 != nil:
    section.add "X-Amz-SignedHeaders", valid_773906
  var valid_773907 = header.getOrDefault("X-Amz-Credential")
  valid_773907 = validateParameter(valid_773907, JString, required = false,
                                 default = nil)
  if valid_773907 != nil:
    section.add "X-Amz-Credential", valid_773907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773908: Call_GetDeleteSnapshot_773895; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_773908.validator(path, query, header, formData, body)
  let scheme = call_773908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773908.url(scheme.get, call_773908.host, call_773908.base,
                         call_773908.route, valid.getOrDefault("path"))
  result = hook(call_773908, url, valid)

proc call*(call_773909: Call_GetDeleteSnapshot_773895; SnapshotName: string;
          Action: string = "DeleteSnapshot"; Version: string = "2015-02-02"): Recallable =
  ## getDeleteSnapshot
  ## <p>Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   SnapshotName: string (required)
  ##               : The name of the snapshot to be deleted.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_773910 = newJObject()
  add(query_773910, "SnapshotName", newJString(SnapshotName))
  add(query_773910, "Action", newJString(Action))
  add(query_773910, "Version", newJString(Version))
  result = call_773909.call(nil, query_773910, nil, nil, nil)

var getDeleteSnapshot* = Call_GetDeleteSnapshot_773895(name: "getDeleteSnapshot",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DeleteSnapshot", validator: validate_GetDeleteSnapshot_773896,
    base: "/", url: url_GetDeleteSnapshot_773897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheClusters_773948 = ref object of OpenApiRestCall_772597
proc url_PostDescribeCacheClusters_773950(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCacheClusters_773949(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773951 = query.getOrDefault("Action")
  valid_773951 = validateParameter(valid_773951, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_773951 != nil:
    section.add "Action", valid_773951
  var valid_773952 = query.getOrDefault("Version")
  valid_773952 = validateParameter(valid_773952, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773952 != nil:
    section.add "Version", valid_773952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773953 = header.getOrDefault("X-Amz-Date")
  valid_773953 = validateParameter(valid_773953, JString, required = false,
                                 default = nil)
  if valid_773953 != nil:
    section.add "X-Amz-Date", valid_773953
  var valid_773954 = header.getOrDefault("X-Amz-Security-Token")
  valid_773954 = validateParameter(valid_773954, JString, required = false,
                                 default = nil)
  if valid_773954 != nil:
    section.add "X-Amz-Security-Token", valid_773954
  var valid_773955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773955 = validateParameter(valid_773955, JString, required = false,
                                 default = nil)
  if valid_773955 != nil:
    section.add "X-Amz-Content-Sha256", valid_773955
  var valid_773956 = header.getOrDefault("X-Amz-Algorithm")
  valid_773956 = validateParameter(valid_773956, JString, required = false,
                                 default = nil)
  if valid_773956 != nil:
    section.add "X-Amz-Algorithm", valid_773956
  var valid_773957 = header.getOrDefault("X-Amz-Signature")
  valid_773957 = validateParameter(valid_773957, JString, required = false,
                                 default = nil)
  if valid_773957 != nil:
    section.add "X-Amz-Signature", valid_773957
  var valid_773958 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773958 = validateParameter(valid_773958, JString, required = false,
                                 default = nil)
  if valid_773958 != nil:
    section.add "X-Amz-SignedHeaders", valid_773958
  var valid_773959 = header.getOrDefault("X-Amz-Credential")
  valid_773959 = validateParameter(valid_773959, JString, required = false,
                                 default = nil)
  if valid_773959 != nil:
    section.add "X-Amz-Credential", valid_773959
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  section = newJObject()
  var valid_773960 = formData.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_773960 = validateParameter(valid_773960, JBool, required = false, default = nil)
  if valid_773960 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_773960
  var valid_773961 = formData.getOrDefault("ShowCacheNodeInfo")
  valid_773961 = validateParameter(valid_773961, JBool, required = false, default = nil)
  if valid_773961 != nil:
    section.add "ShowCacheNodeInfo", valid_773961
  var valid_773962 = formData.getOrDefault("Marker")
  valid_773962 = validateParameter(valid_773962, JString, required = false,
                                 default = nil)
  if valid_773962 != nil:
    section.add "Marker", valid_773962
  var valid_773963 = formData.getOrDefault("MaxRecords")
  valid_773963 = validateParameter(valid_773963, JInt, required = false, default = nil)
  if valid_773963 != nil:
    section.add "MaxRecords", valid_773963
  var valid_773964 = formData.getOrDefault("CacheClusterId")
  valid_773964 = validateParameter(valid_773964, JString, required = false,
                                 default = nil)
  if valid_773964 != nil:
    section.add "CacheClusterId", valid_773964
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773965: Call_PostDescribeCacheClusters_773948; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_773965.validator(path, query, header, formData, body)
  let scheme = call_773965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773965.url(scheme.get, call_773965.host, call_773965.base,
                         call_773965.route, valid.getOrDefault("path"))
  result = hook(call_773965, url, valid)

proc call*(call_773966: Call_PostDescribeCacheClusters_773948;
          ShowCacheClustersNotInReplicationGroups: bool = false;
          ShowCacheNodeInfo: bool = false; Marker: string = "";
          Action: string = "DescribeCacheClusters"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; CacheClusterId: string = ""): Recallable =
  ## postDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  var query_773967 = newJObject()
  var formData_773968 = newJObject()
  add(formData_773968, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(formData_773968, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(formData_773968, "Marker", newJString(Marker))
  add(query_773967, "Action", newJString(Action))
  add(formData_773968, "MaxRecords", newJInt(MaxRecords))
  add(query_773967, "Version", newJString(Version))
  add(formData_773968, "CacheClusterId", newJString(CacheClusterId))
  result = call_773966.call(nil, query_773967, nil, formData_773968, nil)

var postDescribeCacheClusters* = Call_PostDescribeCacheClusters_773948(
    name: "postDescribeCacheClusters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_PostDescribeCacheClusters_773949, base: "/",
    url: url_PostDescribeCacheClusters_773950,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheClusters_773928 = ref object of OpenApiRestCall_772597
proc url_GetDescribeCacheClusters_773930(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCacheClusters_773929(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ShowCacheClustersNotInReplicationGroups: JBool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: JBool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_773931 = query.getOrDefault("CacheClusterId")
  valid_773931 = validateParameter(valid_773931, JString, required = false,
                                 default = nil)
  if valid_773931 != nil:
    section.add "CacheClusterId", valid_773931
  var valid_773932 = query.getOrDefault("MaxRecords")
  valid_773932 = validateParameter(valid_773932, JInt, required = false, default = nil)
  if valid_773932 != nil:
    section.add "MaxRecords", valid_773932
  var valid_773933 = query.getOrDefault("ShowCacheClustersNotInReplicationGroups")
  valid_773933 = validateParameter(valid_773933, JBool, required = false, default = nil)
  if valid_773933 != nil:
    section.add "ShowCacheClustersNotInReplicationGroups", valid_773933
  var valid_773934 = query.getOrDefault("ShowCacheNodeInfo")
  valid_773934 = validateParameter(valid_773934, JBool, required = false, default = nil)
  if valid_773934 != nil:
    section.add "ShowCacheNodeInfo", valid_773934
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773935 = query.getOrDefault("Action")
  valid_773935 = validateParameter(valid_773935, JString, required = true,
                                 default = newJString("DescribeCacheClusters"))
  if valid_773935 != nil:
    section.add "Action", valid_773935
  var valid_773936 = query.getOrDefault("Marker")
  valid_773936 = validateParameter(valid_773936, JString, required = false,
                                 default = nil)
  if valid_773936 != nil:
    section.add "Marker", valid_773936
  var valid_773937 = query.getOrDefault("Version")
  valid_773937 = validateParameter(valid_773937, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773937 != nil:
    section.add "Version", valid_773937
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773938 = header.getOrDefault("X-Amz-Date")
  valid_773938 = validateParameter(valid_773938, JString, required = false,
                                 default = nil)
  if valid_773938 != nil:
    section.add "X-Amz-Date", valid_773938
  var valid_773939 = header.getOrDefault("X-Amz-Security-Token")
  valid_773939 = validateParameter(valid_773939, JString, required = false,
                                 default = nil)
  if valid_773939 != nil:
    section.add "X-Amz-Security-Token", valid_773939
  var valid_773940 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773940 = validateParameter(valid_773940, JString, required = false,
                                 default = nil)
  if valid_773940 != nil:
    section.add "X-Amz-Content-Sha256", valid_773940
  var valid_773941 = header.getOrDefault("X-Amz-Algorithm")
  valid_773941 = validateParameter(valid_773941, JString, required = false,
                                 default = nil)
  if valid_773941 != nil:
    section.add "X-Amz-Algorithm", valid_773941
  var valid_773942 = header.getOrDefault("X-Amz-Signature")
  valid_773942 = validateParameter(valid_773942, JString, required = false,
                                 default = nil)
  if valid_773942 != nil:
    section.add "X-Amz-Signature", valid_773942
  var valid_773943 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773943 = validateParameter(valid_773943, JString, required = false,
                                 default = nil)
  if valid_773943 != nil:
    section.add "X-Amz-SignedHeaders", valid_773943
  var valid_773944 = header.getOrDefault("X-Amz-Credential")
  valid_773944 = validateParameter(valid_773944, JString, required = false,
                                 default = nil)
  if valid_773944 != nil:
    section.add "X-Amz-Credential", valid_773944
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773945: Call_GetDescribeCacheClusters_773928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ## 
  let valid = call_773945.validator(path, query, header, formData, body)
  let scheme = call_773945.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773945.url(scheme.get, call_773945.host, call_773945.base,
                         call_773945.route, valid.getOrDefault("path"))
  result = hook(call_773945, url, valid)

proc call*(call_773946: Call_GetDescribeCacheClusters_773928;
          CacheClusterId: string = ""; MaxRecords: int = 0;
          ShowCacheClustersNotInReplicationGroups: bool = false;
          ShowCacheNodeInfo: bool = false; Action: string = "DescribeCacheClusters";
          Marker: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheClusters
  ## <p>Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.</p> <p>By default, abbreviated information about the clusters is returned. You can use the optional <i>ShowCacheNodeInfo</i> flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.</p> <p>If the cluster is in the <i>creating</i> state, only cluster-level information is displayed until all of the nodes are successfully provisioned.</p> <p>If the cluster is in the <i>deleting</i> state, only cluster-level information is displayed.</p> <p>If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is <i>available</i>, the cluster is ready for use.</p> <p>If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.</p>
  ##   CacheClusterId: string
  ##                 : The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn't case sensitive.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   ShowCacheClustersNotInReplicationGroups: bool
  ##                                          : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
  ##   ShowCacheNodeInfo: bool
  ##                    : An optional flag that can be included in the <code>DescribeCacheCluster</code> request to retrieve information about the individual cache nodes.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_773947 = newJObject()
  add(query_773947, "CacheClusterId", newJString(CacheClusterId))
  add(query_773947, "MaxRecords", newJInt(MaxRecords))
  add(query_773947, "ShowCacheClustersNotInReplicationGroups",
      newJBool(ShowCacheClustersNotInReplicationGroups))
  add(query_773947, "ShowCacheNodeInfo", newJBool(ShowCacheNodeInfo))
  add(query_773947, "Action", newJString(Action))
  add(query_773947, "Marker", newJString(Marker))
  add(query_773947, "Version", newJString(Version))
  result = call_773946.call(nil, query_773947, nil, nil, nil)

var getDescribeCacheClusters* = Call_GetDescribeCacheClusters_773928(
    name: "getDescribeCacheClusters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheClusters",
    validator: validate_GetDescribeCacheClusters_773929, base: "/",
    url: url_GetDescribeCacheClusters_773930, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheEngineVersions_773990 = ref object of OpenApiRestCall_772597
proc url_PostDescribeCacheEngineVersions_773992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCacheEngineVersions_773991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773993 = query.getOrDefault("Action")
  valid_773993 = validateParameter(valid_773993, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_773993 != nil:
    section.add "Action", valid_773993
  var valid_773994 = query.getOrDefault("Version")
  valid_773994 = validateParameter(valid_773994, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773994 != nil:
    section.add "Version", valid_773994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773995 = header.getOrDefault("X-Amz-Date")
  valid_773995 = validateParameter(valid_773995, JString, required = false,
                                 default = nil)
  if valid_773995 != nil:
    section.add "X-Amz-Date", valid_773995
  var valid_773996 = header.getOrDefault("X-Amz-Security-Token")
  valid_773996 = validateParameter(valid_773996, JString, required = false,
                                 default = nil)
  if valid_773996 != nil:
    section.add "X-Amz-Security-Token", valid_773996
  var valid_773997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773997 = validateParameter(valid_773997, JString, required = false,
                                 default = nil)
  if valid_773997 != nil:
    section.add "X-Amz-Content-Sha256", valid_773997
  var valid_773998 = header.getOrDefault("X-Amz-Algorithm")
  valid_773998 = validateParameter(valid_773998, JString, required = false,
                                 default = nil)
  if valid_773998 != nil:
    section.add "X-Amz-Algorithm", valid_773998
  var valid_773999 = header.getOrDefault("X-Amz-Signature")
  valid_773999 = validateParameter(valid_773999, JString, required = false,
                                 default = nil)
  if valid_773999 != nil:
    section.add "X-Amz-Signature", valid_773999
  var valid_774000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774000 = validateParameter(valid_774000, JString, required = false,
                                 default = nil)
  if valid_774000 != nil:
    section.add "X-Amz-SignedHeaders", valid_774000
  var valid_774001 = header.getOrDefault("X-Amz-Credential")
  valid_774001 = validateParameter(valid_774001, JString, required = false,
                                 default = nil)
  if valid_774001 != nil:
    section.add "X-Amz-Credential", valid_774001
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  section = newJObject()
  var valid_774002 = formData.getOrDefault("Engine")
  valid_774002 = validateParameter(valid_774002, JString, required = false,
                                 default = nil)
  if valid_774002 != nil:
    section.add "Engine", valid_774002
  var valid_774003 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_774003 = validateParameter(valid_774003, JString, required = false,
                                 default = nil)
  if valid_774003 != nil:
    section.add "CacheParameterGroupFamily", valid_774003
  var valid_774004 = formData.getOrDefault("Marker")
  valid_774004 = validateParameter(valid_774004, JString, required = false,
                                 default = nil)
  if valid_774004 != nil:
    section.add "Marker", valid_774004
  var valid_774005 = formData.getOrDefault("MaxRecords")
  valid_774005 = validateParameter(valid_774005, JInt, required = false, default = nil)
  if valid_774005 != nil:
    section.add "MaxRecords", valid_774005
  var valid_774006 = formData.getOrDefault("EngineVersion")
  valid_774006 = validateParameter(valid_774006, JString, required = false,
                                 default = nil)
  if valid_774006 != nil:
    section.add "EngineVersion", valid_774006
  var valid_774007 = formData.getOrDefault("DefaultOnly")
  valid_774007 = validateParameter(valid_774007, JBool, required = false, default = nil)
  if valid_774007 != nil:
    section.add "DefaultOnly", valid_774007
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774008: Call_PostDescribeCacheEngineVersions_773990;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_774008.validator(path, query, header, formData, body)
  let scheme = call_774008.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774008.url(scheme.get, call_774008.host, call_774008.base,
                         call_774008.route, valid.getOrDefault("path"))
  result = hook(call_774008, url, valid)

proc call*(call_774009: Call_PostDescribeCacheEngineVersions_773990;
          Engine: string = ""; CacheParameterGroupFamily: string = "";
          Marker: string = ""; Action: string = "DescribeCacheEngineVersions";
          MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2015-02-02"; DefaultOnly: bool = false): Recallable =
  ## postDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  var query_774010 = newJObject()
  var formData_774011 = newJObject()
  add(formData_774011, "Engine", newJString(Engine))
  add(formData_774011, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_774011, "Marker", newJString(Marker))
  add(query_774010, "Action", newJString(Action))
  add(formData_774011, "MaxRecords", newJInt(MaxRecords))
  add(formData_774011, "EngineVersion", newJString(EngineVersion))
  add(query_774010, "Version", newJString(Version))
  add(formData_774011, "DefaultOnly", newJBool(DefaultOnly))
  result = call_774009.call(nil, query_774010, nil, formData_774011, nil)

var postDescribeCacheEngineVersions* = Call_PostDescribeCacheEngineVersions_773990(
    name: "postDescribeCacheEngineVersions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_PostDescribeCacheEngineVersions_773991, base: "/",
    url: url_PostDescribeCacheEngineVersions_773992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheEngineVersions_773969 = ref object of OpenApiRestCall_772597
proc url_GetDescribeCacheEngineVersions_773971(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCacheEngineVersions_773970(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available cache engines and their versions.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: JString
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   DefaultOnly: JBool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   Version: JString (required)
  ##   CacheParameterGroupFamily: JString
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  var valid_773972 = query.getOrDefault("Engine")
  valid_773972 = validateParameter(valid_773972, JString, required = false,
                                 default = nil)
  if valid_773972 != nil:
    section.add "Engine", valid_773972
  var valid_773973 = query.getOrDefault("MaxRecords")
  valid_773973 = validateParameter(valid_773973, JInt, required = false, default = nil)
  if valid_773973 != nil:
    section.add "MaxRecords", valid_773973
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_773974 = query.getOrDefault("Action")
  valid_773974 = validateParameter(valid_773974, JString, required = true, default = newJString(
      "DescribeCacheEngineVersions"))
  if valid_773974 != nil:
    section.add "Action", valid_773974
  var valid_773975 = query.getOrDefault("Marker")
  valid_773975 = validateParameter(valid_773975, JString, required = false,
                                 default = nil)
  if valid_773975 != nil:
    section.add "Marker", valid_773975
  var valid_773976 = query.getOrDefault("EngineVersion")
  valid_773976 = validateParameter(valid_773976, JString, required = false,
                                 default = nil)
  if valid_773976 != nil:
    section.add "EngineVersion", valid_773976
  var valid_773977 = query.getOrDefault("DefaultOnly")
  valid_773977 = validateParameter(valid_773977, JBool, required = false, default = nil)
  if valid_773977 != nil:
    section.add "DefaultOnly", valid_773977
  var valid_773978 = query.getOrDefault("Version")
  valid_773978 = validateParameter(valid_773978, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_773978 != nil:
    section.add "Version", valid_773978
  var valid_773979 = query.getOrDefault("CacheParameterGroupFamily")
  valid_773979 = validateParameter(valid_773979, JString, required = false,
                                 default = nil)
  if valid_773979 != nil:
    section.add "CacheParameterGroupFamily", valid_773979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_773980 = header.getOrDefault("X-Amz-Date")
  valid_773980 = validateParameter(valid_773980, JString, required = false,
                                 default = nil)
  if valid_773980 != nil:
    section.add "X-Amz-Date", valid_773980
  var valid_773981 = header.getOrDefault("X-Amz-Security-Token")
  valid_773981 = validateParameter(valid_773981, JString, required = false,
                                 default = nil)
  if valid_773981 != nil:
    section.add "X-Amz-Security-Token", valid_773981
  var valid_773982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_773982 = validateParameter(valid_773982, JString, required = false,
                                 default = nil)
  if valid_773982 != nil:
    section.add "X-Amz-Content-Sha256", valid_773982
  var valid_773983 = header.getOrDefault("X-Amz-Algorithm")
  valid_773983 = validateParameter(valid_773983, JString, required = false,
                                 default = nil)
  if valid_773983 != nil:
    section.add "X-Amz-Algorithm", valid_773983
  var valid_773984 = header.getOrDefault("X-Amz-Signature")
  valid_773984 = validateParameter(valid_773984, JString, required = false,
                                 default = nil)
  if valid_773984 != nil:
    section.add "X-Amz-Signature", valid_773984
  var valid_773985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_773985 = validateParameter(valid_773985, JString, required = false,
                                 default = nil)
  if valid_773985 != nil:
    section.add "X-Amz-SignedHeaders", valid_773985
  var valid_773986 = header.getOrDefault("X-Amz-Credential")
  valid_773986 = validateParameter(valid_773986, JString, required = false,
                                 default = nil)
  if valid_773986 != nil:
    section.add "X-Amz-Credential", valid_773986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_773987: Call_GetDescribeCacheEngineVersions_773969; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available cache engines and their versions.
  ## 
  let valid = call_773987.validator(path, query, header, formData, body)
  let scheme = call_773987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_773987.url(scheme.get, call_773987.host, call_773987.base,
                         call_773987.route, valid.getOrDefault("path"))
  result = hook(call_773987, url, valid)

proc call*(call_773988: Call_GetDescribeCacheEngineVersions_773969;
          Engine: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeCacheEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2015-02-02"; CacheParameterGroupFamily: string = ""): Recallable =
  ## getDescribeCacheEngineVersions
  ## Returns a list of the available cache engines and their versions.
  ##   Engine: string
  ##         : The cache engine to return. Valid values: <code>memcached</code> | <code>redis</code> 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: string
  ##                : <p>The cache engine version to return.</p> <p>Example: <code>1.4.14</code> </p>
  ##   DefaultOnly: bool
  ##              : If <code>true</code>, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
  ##   Version: string (required)
  ##   CacheParameterGroupFamily: string
  ##                            : <p>The name of a specific cache parameter group family to return details for.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_773989 = newJObject()
  add(query_773989, "Engine", newJString(Engine))
  add(query_773989, "MaxRecords", newJInt(MaxRecords))
  add(query_773989, "Action", newJString(Action))
  add(query_773989, "Marker", newJString(Marker))
  add(query_773989, "EngineVersion", newJString(EngineVersion))
  add(query_773989, "DefaultOnly", newJBool(DefaultOnly))
  add(query_773989, "Version", newJString(Version))
  add(query_773989, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  result = call_773988.call(nil, query_773989, nil, nil, nil)

var getDescribeCacheEngineVersions* = Call_GetDescribeCacheEngineVersions_773969(
    name: "getDescribeCacheEngineVersions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheEngineVersions",
    validator: validate_GetDescribeCacheEngineVersions_773970, base: "/",
    url: url_GetDescribeCacheEngineVersions_773971,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameterGroups_774030 = ref object of OpenApiRestCall_772597
proc url_PostDescribeCacheParameterGroups_774032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCacheParameterGroups_774031(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774033 = query.getOrDefault("Action")
  valid_774033 = validateParameter(valid_774033, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_774033 != nil:
    section.add "Action", valid_774033
  var valid_774034 = query.getOrDefault("Version")
  valid_774034 = validateParameter(valid_774034, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774034 != nil:
    section.add "Version", valid_774034
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774035 = header.getOrDefault("X-Amz-Date")
  valid_774035 = validateParameter(valid_774035, JString, required = false,
                                 default = nil)
  if valid_774035 != nil:
    section.add "X-Amz-Date", valid_774035
  var valid_774036 = header.getOrDefault("X-Amz-Security-Token")
  valid_774036 = validateParameter(valid_774036, JString, required = false,
                                 default = nil)
  if valid_774036 != nil:
    section.add "X-Amz-Security-Token", valid_774036
  var valid_774037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774037 = validateParameter(valid_774037, JString, required = false,
                                 default = nil)
  if valid_774037 != nil:
    section.add "X-Amz-Content-Sha256", valid_774037
  var valid_774038 = header.getOrDefault("X-Amz-Algorithm")
  valid_774038 = validateParameter(valid_774038, JString, required = false,
                                 default = nil)
  if valid_774038 != nil:
    section.add "X-Amz-Algorithm", valid_774038
  var valid_774039 = header.getOrDefault("X-Amz-Signature")
  valid_774039 = validateParameter(valid_774039, JString, required = false,
                                 default = nil)
  if valid_774039 != nil:
    section.add "X-Amz-Signature", valid_774039
  var valid_774040 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774040 = validateParameter(valid_774040, JString, required = false,
                                 default = nil)
  if valid_774040 != nil:
    section.add "X-Amz-SignedHeaders", valid_774040
  var valid_774041 = header.getOrDefault("X-Amz-Credential")
  valid_774041 = validateParameter(valid_774041, JString, required = false,
                                 default = nil)
  if valid_774041 != nil:
    section.add "X-Amz-Credential", valid_774041
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_774042 = formData.getOrDefault("Marker")
  valid_774042 = validateParameter(valid_774042, JString, required = false,
                                 default = nil)
  if valid_774042 != nil:
    section.add "Marker", valid_774042
  var valid_774043 = formData.getOrDefault("CacheParameterGroupName")
  valid_774043 = validateParameter(valid_774043, JString, required = false,
                                 default = nil)
  if valid_774043 != nil:
    section.add "CacheParameterGroupName", valid_774043
  var valid_774044 = formData.getOrDefault("MaxRecords")
  valid_774044 = validateParameter(valid_774044, JInt, required = false, default = nil)
  if valid_774044 != nil:
    section.add "MaxRecords", valid_774044
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774045: Call_PostDescribeCacheParameterGroups_774030;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_774045.validator(path, query, header, formData, body)
  let scheme = call_774045.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774045.url(scheme.get, call_774045.host, call_774045.base,
                         call_774045.route, valid.getOrDefault("path"))
  result = hook(call_774045, url, valid)

proc call*(call_774046: Call_PostDescribeCacheParameterGroups_774030;
          Marker: string = ""; Action: string = "DescribeCacheParameterGroups";
          CacheParameterGroupName: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774047 = newJObject()
  var formData_774048 = newJObject()
  add(formData_774048, "Marker", newJString(Marker))
  add(query_774047, "Action", newJString(Action))
  add(formData_774048, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_774048, "MaxRecords", newJInt(MaxRecords))
  add(query_774047, "Version", newJString(Version))
  result = call_774046.call(nil, query_774047, nil, formData_774048, nil)

var postDescribeCacheParameterGroups* = Call_PostDescribeCacheParameterGroups_774030(
    name: "postDescribeCacheParameterGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_PostDescribeCacheParameterGroups_774031, base: "/",
    url: url_PostDescribeCacheParameterGroups_774032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameterGroups_774012 = ref object of OpenApiRestCall_772597
proc url_GetDescribeCacheParameterGroups_774014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCacheParameterGroups_774013(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774015 = query.getOrDefault("MaxRecords")
  valid_774015 = validateParameter(valid_774015, JInt, required = false, default = nil)
  if valid_774015 != nil:
    section.add "MaxRecords", valid_774015
  var valid_774016 = query.getOrDefault("CacheParameterGroupName")
  valid_774016 = validateParameter(valid_774016, JString, required = false,
                                 default = nil)
  if valid_774016 != nil:
    section.add "CacheParameterGroupName", valid_774016
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774017 = query.getOrDefault("Action")
  valid_774017 = validateParameter(valid_774017, JString, required = true, default = newJString(
      "DescribeCacheParameterGroups"))
  if valid_774017 != nil:
    section.add "Action", valid_774017
  var valid_774018 = query.getOrDefault("Marker")
  valid_774018 = validateParameter(valid_774018, JString, required = false,
                                 default = nil)
  if valid_774018 != nil:
    section.add "Marker", valid_774018
  var valid_774019 = query.getOrDefault("Version")
  valid_774019 = validateParameter(valid_774019, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774019 != nil:
    section.add "Version", valid_774019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774020 = header.getOrDefault("X-Amz-Date")
  valid_774020 = validateParameter(valid_774020, JString, required = false,
                                 default = nil)
  if valid_774020 != nil:
    section.add "X-Amz-Date", valid_774020
  var valid_774021 = header.getOrDefault("X-Amz-Security-Token")
  valid_774021 = validateParameter(valid_774021, JString, required = false,
                                 default = nil)
  if valid_774021 != nil:
    section.add "X-Amz-Security-Token", valid_774021
  var valid_774022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774022 = validateParameter(valid_774022, JString, required = false,
                                 default = nil)
  if valid_774022 != nil:
    section.add "X-Amz-Content-Sha256", valid_774022
  var valid_774023 = header.getOrDefault("X-Amz-Algorithm")
  valid_774023 = validateParameter(valid_774023, JString, required = false,
                                 default = nil)
  if valid_774023 != nil:
    section.add "X-Amz-Algorithm", valid_774023
  var valid_774024 = header.getOrDefault("X-Amz-Signature")
  valid_774024 = validateParameter(valid_774024, JString, required = false,
                                 default = nil)
  if valid_774024 != nil:
    section.add "X-Amz-Signature", valid_774024
  var valid_774025 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774025 = validateParameter(valid_774025, JString, required = false,
                                 default = nil)
  if valid_774025 != nil:
    section.add "X-Amz-SignedHeaders", valid_774025
  var valid_774026 = header.getOrDefault("X-Amz-Credential")
  valid_774026 = validateParameter(valid_774026, JString, required = false,
                                 default = nil)
  if valid_774026 != nil:
    section.add "X-Amz-Credential", valid_774026
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774027: Call_GetDescribeCacheParameterGroups_774012;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ## 
  let valid = call_774027.validator(path, query, header, formData, body)
  let scheme = call_774027.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774027.url(scheme.get, call_774027.host, call_774027.base,
                         call_774027.route, valid.getOrDefault("path"))
  result = hook(call_774027, url, valid)

proc call*(call_774028: Call_GetDescribeCacheParameterGroups_774012;
          MaxRecords: int = 0; CacheParameterGroupName: string = "";
          Action: string = "DescribeCacheParameterGroups"; Marker: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheParameterGroups
  ## Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: string
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774029 = newJObject()
  add(query_774029, "MaxRecords", newJInt(MaxRecords))
  add(query_774029, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_774029, "Action", newJString(Action))
  add(query_774029, "Marker", newJString(Marker))
  add(query_774029, "Version", newJString(Version))
  result = call_774028.call(nil, query_774029, nil, nil, nil)

var getDescribeCacheParameterGroups* = Call_GetDescribeCacheParameterGroups_774012(
    name: "getDescribeCacheParameterGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheParameterGroups",
    validator: validate_GetDescribeCacheParameterGroups_774013, base: "/",
    url: url_GetDescribeCacheParameterGroups_774014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheParameters_774068 = ref object of OpenApiRestCall_772597
proc url_PostDescribeCacheParameters_774070(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCacheParameters_774069(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774071 = query.getOrDefault("Action")
  valid_774071 = validateParameter(valid_774071, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_774071 != nil:
    section.add "Action", valid_774071
  var valid_774072 = query.getOrDefault("Version")
  valid_774072 = validateParameter(valid_774072, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774072 != nil:
    section.add "Version", valid_774072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774073 = header.getOrDefault("X-Amz-Date")
  valid_774073 = validateParameter(valid_774073, JString, required = false,
                                 default = nil)
  if valid_774073 != nil:
    section.add "X-Amz-Date", valid_774073
  var valid_774074 = header.getOrDefault("X-Amz-Security-Token")
  valid_774074 = validateParameter(valid_774074, JString, required = false,
                                 default = nil)
  if valid_774074 != nil:
    section.add "X-Amz-Security-Token", valid_774074
  var valid_774075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774075 = validateParameter(valid_774075, JString, required = false,
                                 default = nil)
  if valid_774075 != nil:
    section.add "X-Amz-Content-Sha256", valid_774075
  var valid_774076 = header.getOrDefault("X-Amz-Algorithm")
  valid_774076 = validateParameter(valid_774076, JString, required = false,
                                 default = nil)
  if valid_774076 != nil:
    section.add "X-Amz-Algorithm", valid_774076
  var valid_774077 = header.getOrDefault("X-Amz-Signature")
  valid_774077 = validateParameter(valid_774077, JString, required = false,
                                 default = nil)
  if valid_774077 != nil:
    section.add "X-Amz-Signature", valid_774077
  var valid_774078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774078 = validateParameter(valid_774078, JString, required = false,
                                 default = nil)
  if valid_774078 != nil:
    section.add "X-Amz-SignedHeaders", valid_774078
  var valid_774079 = header.getOrDefault("X-Amz-Credential")
  valid_774079 = validateParameter(valid_774079, JString, required = false,
                                 default = nil)
  if valid_774079 != nil:
    section.add "X-Amz-Credential", valid_774079
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  section = newJObject()
  var valid_774080 = formData.getOrDefault("Marker")
  valid_774080 = validateParameter(valid_774080, JString, required = false,
                                 default = nil)
  if valid_774080 != nil:
    section.add "Marker", valid_774080
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_774081 = formData.getOrDefault("CacheParameterGroupName")
  valid_774081 = validateParameter(valid_774081, JString, required = true,
                                 default = nil)
  if valid_774081 != nil:
    section.add "CacheParameterGroupName", valid_774081
  var valid_774082 = formData.getOrDefault("MaxRecords")
  valid_774082 = validateParameter(valid_774082, JInt, required = false, default = nil)
  if valid_774082 != nil:
    section.add "MaxRecords", valid_774082
  var valid_774083 = formData.getOrDefault("Source")
  valid_774083 = validateParameter(valid_774083, JString, required = false,
                                 default = nil)
  if valid_774083 != nil:
    section.add "Source", valid_774083
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774084: Call_PostDescribeCacheParameters_774068; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_774084.validator(path, query, header, formData, body)
  let scheme = call_774084.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774084.url(scheme.get, call_774084.host, call_774084.base,
                         call_774084.route, valid.getOrDefault("path"))
  result = hook(call_774084, url, valid)

proc call*(call_774085: Call_PostDescribeCacheParameters_774068;
          CacheParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeCacheParameters"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; Source: string = ""): Recallable =
  ## postDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  var query_774086 = newJObject()
  var formData_774087 = newJObject()
  add(formData_774087, "Marker", newJString(Marker))
  add(query_774086, "Action", newJString(Action))
  add(formData_774087, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_774087, "MaxRecords", newJInt(MaxRecords))
  add(query_774086, "Version", newJString(Version))
  add(formData_774087, "Source", newJString(Source))
  result = call_774085.call(nil, query_774086, nil, formData_774087, nil)

var postDescribeCacheParameters* = Call_PostDescribeCacheParameters_774068(
    name: "postDescribeCacheParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_PostDescribeCacheParameters_774069, base: "/",
    url: url_PostDescribeCacheParameters_774070,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheParameters_774049 = ref object of OpenApiRestCall_772597
proc url_GetDescribeCacheParameters_774051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCacheParameters_774050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774052 = query.getOrDefault("MaxRecords")
  valid_774052 = validateParameter(valid_774052, JInt, required = false, default = nil)
  if valid_774052 != nil:
    section.add "MaxRecords", valid_774052
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_774053 = query.getOrDefault("CacheParameterGroupName")
  valid_774053 = validateParameter(valid_774053, JString, required = true,
                                 default = nil)
  if valid_774053 != nil:
    section.add "CacheParameterGroupName", valid_774053
  var valid_774054 = query.getOrDefault("Action")
  valid_774054 = validateParameter(valid_774054, JString, required = true, default = newJString(
      "DescribeCacheParameters"))
  if valid_774054 != nil:
    section.add "Action", valid_774054
  var valid_774055 = query.getOrDefault("Marker")
  valid_774055 = validateParameter(valid_774055, JString, required = false,
                                 default = nil)
  if valid_774055 != nil:
    section.add "Marker", valid_774055
  var valid_774056 = query.getOrDefault("Source")
  valid_774056 = validateParameter(valid_774056, JString, required = false,
                                 default = nil)
  if valid_774056 != nil:
    section.add "Source", valid_774056
  var valid_774057 = query.getOrDefault("Version")
  valid_774057 = validateParameter(valid_774057, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774057 != nil:
    section.add "Version", valid_774057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774058 = header.getOrDefault("X-Amz-Date")
  valid_774058 = validateParameter(valid_774058, JString, required = false,
                                 default = nil)
  if valid_774058 != nil:
    section.add "X-Amz-Date", valid_774058
  var valid_774059 = header.getOrDefault("X-Amz-Security-Token")
  valid_774059 = validateParameter(valid_774059, JString, required = false,
                                 default = nil)
  if valid_774059 != nil:
    section.add "X-Amz-Security-Token", valid_774059
  var valid_774060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774060 = validateParameter(valid_774060, JString, required = false,
                                 default = nil)
  if valid_774060 != nil:
    section.add "X-Amz-Content-Sha256", valid_774060
  var valid_774061 = header.getOrDefault("X-Amz-Algorithm")
  valid_774061 = validateParameter(valid_774061, JString, required = false,
                                 default = nil)
  if valid_774061 != nil:
    section.add "X-Amz-Algorithm", valid_774061
  var valid_774062 = header.getOrDefault("X-Amz-Signature")
  valid_774062 = validateParameter(valid_774062, JString, required = false,
                                 default = nil)
  if valid_774062 != nil:
    section.add "X-Amz-Signature", valid_774062
  var valid_774063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774063 = validateParameter(valid_774063, JString, required = false,
                                 default = nil)
  if valid_774063 != nil:
    section.add "X-Amz-SignedHeaders", valid_774063
  var valid_774064 = header.getOrDefault("X-Amz-Credential")
  valid_774064 = validateParameter(valid_774064, JString, required = false,
                                 default = nil)
  if valid_774064 != nil:
    section.add "X-Amz-Credential", valid_774064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774065: Call_GetDescribeCacheParameters_774049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular cache parameter group.
  ## 
  let valid = call_774065.validator(path, query, header, formData, body)
  let scheme = call_774065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774065.url(scheme.get, call_774065.host, call_774065.base,
                         call_774065.route, valid.getOrDefault("path"))
  result = hook(call_774065, url, valid)

proc call*(call_774066: Call_GetDescribeCacheParameters_774049;
          CacheParameterGroupName: string; MaxRecords: int = 0;
          Action: string = "DescribeCacheParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheParameters
  ## Returns the detailed parameter list for a particular cache parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of a specific cache parameter group to return details for.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Valid values: <code>user</code> | <code>system</code> | <code>engine-default</code> </p>
  ##   Version: string (required)
  var query_774067 = newJObject()
  add(query_774067, "MaxRecords", newJInt(MaxRecords))
  add(query_774067, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_774067, "Action", newJString(Action))
  add(query_774067, "Marker", newJString(Marker))
  add(query_774067, "Source", newJString(Source))
  add(query_774067, "Version", newJString(Version))
  result = call_774066.call(nil, query_774067, nil, nil, nil)

var getDescribeCacheParameters* = Call_GetDescribeCacheParameters_774049(
    name: "getDescribeCacheParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeCacheParameters",
    validator: validate_GetDescribeCacheParameters_774050, base: "/",
    url: url_GetDescribeCacheParameters_774051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSecurityGroups_774106 = ref object of OpenApiRestCall_772597
proc url_PostDescribeCacheSecurityGroups_774108(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCacheSecurityGroups_774107(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774109 = query.getOrDefault("Action")
  valid_774109 = validateParameter(valid_774109, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_774109 != nil:
    section.add "Action", valid_774109
  var valid_774110 = query.getOrDefault("Version")
  valid_774110 = validateParameter(valid_774110, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774110 != nil:
    section.add "Version", valid_774110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774111 = header.getOrDefault("X-Amz-Date")
  valid_774111 = validateParameter(valid_774111, JString, required = false,
                                 default = nil)
  if valid_774111 != nil:
    section.add "X-Amz-Date", valid_774111
  var valid_774112 = header.getOrDefault("X-Amz-Security-Token")
  valid_774112 = validateParameter(valid_774112, JString, required = false,
                                 default = nil)
  if valid_774112 != nil:
    section.add "X-Amz-Security-Token", valid_774112
  var valid_774113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774113 = validateParameter(valid_774113, JString, required = false,
                                 default = nil)
  if valid_774113 != nil:
    section.add "X-Amz-Content-Sha256", valid_774113
  var valid_774114 = header.getOrDefault("X-Amz-Algorithm")
  valid_774114 = validateParameter(valid_774114, JString, required = false,
                                 default = nil)
  if valid_774114 != nil:
    section.add "X-Amz-Algorithm", valid_774114
  var valid_774115 = header.getOrDefault("X-Amz-Signature")
  valid_774115 = validateParameter(valid_774115, JString, required = false,
                                 default = nil)
  if valid_774115 != nil:
    section.add "X-Amz-Signature", valid_774115
  var valid_774116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774116 = validateParameter(valid_774116, JString, required = false,
                                 default = nil)
  if valid_774116 != nil:
    section.add "X-Amz-SignedHeaders", valid_774116
  var valid_774117 = header.getOrDefault("X-Amz-Credential")
  valid_774117 = validateParameter(valid_774117, JString, required = false,
                                 default = nil)
  if valid_774117 != nil:
    section.add "X-Amz-Credential", valid_774117
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_774118 = formData.getOrDefault("CacheSecurityGroupName")
  valid_774118 = validateParameter(valid_774118, JString, required = false,
                                 default = nil)
  if valid_774118 != nil:
    section.add "CacheSecurityGroupName", valid_774118
  var valid_774119 = formData.getOrDefault("Marker")
  valid_774119 = validateParameter(valid_774119, JString, required = false,
                                 default = nil)
  if valid_774119 != nil:
    section.add "Marker", valid_774119
  var valid_774120 = formData.getOrDefault("MaxRecords")
  valid_774120 = validateParameter(valid_774120, JInt, required = false, default = nil)
  if valid_774120 != nil:
    section.add "MaxRecords", valid_774120
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774121: Call_PostDescribeCacheSecurityGroups_774106;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_774121.validator(path, query, header, formData, body)
  let scheme = call_774121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774121.url(scheme.get, call_774121.host, call_774121.base,
                         call_774121.route, valid.getOrDefault("path"))
  result = hook(call_774121, url, valid)

proc call*(call_774122: Call_PostDescribeCacheSecurityGroups_774106;
          CacheSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeCacheSecurityGroups"; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774123 = newJObject()
  var formData_774124 = newJObject()
  add(formData_774124, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(formData_774124, "Marker", newJString(Marker))
  add(query_774123, "Action", newJString(Action))
  add(formData_774124, "MaxRecords", newJInt(MaxRecords))
  add(query_774123, "Version", newJString(Version))
  result = call_774122.call(nil, query_774123, nil, formData_774124, nil)

var postDescribeCacheSecurityGroups* = Call_PostDescribeCacheSecurityGroups_774106(
    name: "postDescribeCacheSecurityGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_PostDescribeCacheSecurityGroups_774107, base: "/",
    url: url_PostDescribeCacheSecurityGroups_774108,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSecurityGroups_774088 = ref object of OpenApiRestCall_772597
proc url_GetDescribeCacheSecurityGroups_774090(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCacheSecurityGroups_774089(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString
  ##                         : The name of the cache security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774091 = query.getOrDefault("CacheSecurityGroupName")
  valid_774091 = validateParameter(valid_774091, JString, required = false,
                                 default = nil)
  if valid_774091 != nil:
    section.add "CacheSecurityGroupName", valid_774091
  var valid_774092 = query.getOrDefault("MaxRecords")
  valid_774092 = validateParameter(valid_774092, JInt, required = false, default = nil)
  if valid_774092 != nil:
    section.add "MaxRecords", valid_774092
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774093 = query.getOrDefault("Action")
  valid_774093 = validateParameter(valid_774093, JString, required = true, default = newJString(
      "DescribeCacheSecurityGroups"))
  if valid_774093 != nil:
    section.add "Action", valid_774093
  var valid_774094 = query.getOrDefault("Marker")
  valid_774094 = validateParameter(valid_774094, JString, required = false,
                                 default = nil)
  if valid_774094 != nil:
    section.add "Marker", valid_774094
  var valid_774095 = query.getOrDefault("Version")
  valid_774095 = validateParameter(valid_774095, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774095 != nil:
    section.add "Version", valid_774095
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774096 = header.getOrDefault("X-Amz-Date")
  valid_774096 = validateParameter(valid_774096, JString, required = false,
                                 default = nil)
  if valid_774096 != nil:
    section.add "X-Amz-Date", valid_774096
  var valid_774097 = header.getOrDefault("X-Amz-Security-Token")
  valid_774097 = validateParameter(valid_774097, JString, required = false,
                                 default = nil)
  if valid_774097 != nil:
    section.add "X-Amz-Security-Token", valid_774097
  var valid_774098 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774098 = validateParameter(valid_774098, JString, required = false,
                                 default = nil)
  if valid_774098 != nil:
    section.add "X-Amz-Content-Sha256", valid_774098
  var valid_774099 = header.getOrDefault("X-Amz-Algorithm")
  valid_774099 = validateParameter(valid_774099, JString, required = false,
                                 default = nil)
  if valid_774099 != nil:
    section.add "X-Amz-Algorithm", valid_774099
  var valid_774100 = header.getOrDefault("X-Amz-Signature")
  valid_774100 = validateParameter(valid_774100, JString, required = false,
                                 default = nil)
  if valid_774100 != nil:
    section.add "X-Amz-Signature", valid_774100
  var valid_774101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774101 = validateParameter(valid_774101, JString, required = false,
                                 default = nil)
  if valid_774101 != nil:
    section.add "X-Amz-SignedHeaders", valid_774101
  var valid_774102 = header.getOrDefault("X-Amz-Credential")
  valid_774102 = validateParameter(valid_774102, JString, required = false,
                                 default = nil)
  if valid_774102 != nil:
    section.add "X-Amz-Credential", valid_774102
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774103: Call_GetDescribeCacheSecurityGroups_774088; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ## 
  let valid = call_774103.validator(path, query, header, formData, body)
  let scheme = call_774103.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774103.url(scheme.get, call_774103.host, call_774103.base,
                         call_774103.route, valid.getOrDefault("path"))
  result = hook(call_774103, url, valid)

proc call*(call_774104: Call_GetDescribeCacheSecurityGroups_774088;
          CacheSecurityGroupName: string = ""; MaxRecords: int = 0;
          Action: string = "DescribeCacheSecurityGroups"; Marker: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheSecurityGroups
  ## Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
  ##   CacheSecurityGroupName: string
  ##                         : The name of the cache security group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_774105 = newJObject()
  add(query_774105, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_774105, "MaxRecords", newJInt(MaxRecords))
  add(query_774105, "Action", newJString(Action))
  add(query_774105, "Marker", newJString(Marker))
  add(query_774105, "Version", newJString(Version))
  result = call_774104.call(nil, query_774105, nil, nil, nil)

var getDescribeCacheSecurityGroups* = Call_GetDescribeCacheSecurityGroups_774088(
    name: "getDescribeCacheSecurityGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSecurityGroups",
    validator: validate_GetDescribeCacheSecurityGroups_774089, base: "/",
    url: url_GetDescribeCacheSecurityGroups_774090,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCacheSubnetGroups_774143 = ref object of OpenApiRestCall_772597
proc url_PostDescribeCacheSubnetGroups_774145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeCacheSubnetGroups_774144(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774146 = query.getOrDefault("Action")
  valid_774146 = validateParameter(valid_774146, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_774146 != nil:
    section.add "Action", valid_774146
  var valid_774147 = query.getOrDefault("Version")
  valid_774147 = validateParameter(valid_774147, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774147 != nil:
    section.add "Version", valid_774147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774148 = header.getOrDefault("X-Amz-Date")
  valid_774148 = validateParameter(valid_774148, JString, required = false,
                                 default = nil)
  if valid_774148 != nil:
    section.add "X-Amz-Date", valid_774148
  var valid_774149 = header.getOrDefault("X-Amz-Security-Token")
  valid_774149 = validateParameter(valid_774149, JString, required = false,
                                 default = nil)
  if valid_774149 != nil:
    section.add "X-Amz-Security-Token", valid_774149
  var valid_774150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774150 = validateParameter(valid_774150, JString, required = false,
                                 default = nil)
  if valid_774150 != nil:
    section.add "X-Amz-Content-Sha256", valid_774150
  var valid_774151 = header.getOrDefault("X-Amz-Algorithm")
  valid_774151 = validateParameter(valid_774151, JString, required = false,
                                 default = nil)
  if valid_774151 != nil:
    section.add "X-Amz-Algorithm", valid_774151
  var valid_774152 = header.getOrDefault("X-Amz-Signature")
  valid_774152 = validateParameter(valid_774152, JString, required = false,
                                 default = nil)
  if valid_774152 != nil:
    section.add "X-Amz-Signature", valid_774152
  var valid_774153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774153 = validateParameter(valid_774153, JString, required = false,
                                 default = nil)
  if valid_774153 != nil:
    section.add "X-Amz-SignedHeaders", valid_774153
  var valid_774154 = header.getOrDefault("X-Amz-Credential")
  valid_774154 = validateParameter(valid_774154, JString, required = false,
                                 default = nil)
  if valid_774154 != nil:
    section.add "X-Amz-Credential", valid_774154
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_774155 = formData.getOrDefault("Marker")
  valid_774155 = validateParameter(valid_774155, JString, required = false,
                                 default = nil)
  if valid_774155 != nil:
    section.add "Marker", valid_774155
  var valid_774156 = formData.getOrDefault("CacheSubnetGroupName")
  valid_774156 = validateParameter(valid_774156, JString, required = false,
                                 default = nil)
  if valid_774156 != nil:
    section.add "CacheSubnetGroupName", valid_774156
  var valid_774157 = formData.getOrDefault("MaxRecords")
  valid_774157 = validateParameter(valid_774157, JInt, required = false, default = nil)
  if valid_774157 != nil:
    section.add "MaxRecords", valid_774157
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774158: Call_PostDescribeCacheSubnetGroups_774143; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_774158.validator(path, query, header, formData, body)
  let scheme = call_774158.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774158.url(scheme.get, call_774158.host, call_774158.base,
                         call_774158.route, valid.getOrDefault("path"))
  result = hook(call_774158, url, valid)

proc call*(call_774159: Call_PostDescribeCacheSubnetGroups_774143;
          Marker: string = ""; Action: string = "DescribeCacheSubnetGroups";
          CacheSubnetGroupName: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774160 = newJObject()
  var formData_774161 = newJObject()
  add(formData_774161, "Marker", newJString(Marker))
  add(query_774160, "Action", newJString(Action))
  add(formData_774161, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(formData_774161, "MaxRecords", newJInt(MaxRecords))
  add(query_774160, "Version", newJString(Version))
  result = call_774159.call(nil, query_774160, nil, formData_774161, nil)

var postDescribeCacheSubnetGroups* = Call_PostDescribeCacheSubnetGroups_774143(
    name: "postDescribeCacheSubnetGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_PostDescribeCacheSubnetGroups_774144, base: "/",
    url: url_PostDescribeCacheSubnetGroups_774145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCacheSubnetGroups_774125 = ref object of OpenApiRestCall_772597
proc url_GetDescribeCacheSubnetGroups_774127(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeCacheSubnetGroups_774126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: JString
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774128 = query.getOrDefault("MaxRecords")
  valid_774128 = validateParameter(valid_774128, JInt, required = false, default = nil)
  if valid_774128 != nil:
    section.add "MaxRecords", valid_774128
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774129 = query.getOrDefault("Action")
  valid_774129 = validateParameter(valid_774129, JString, required = true, default = newJString(
      "DescribeCacheSubnetGroups"))
  if valid_774129 != nil:
    section.add "Action", valid_774129
  var valid_774130 = query.getOrDefault("Marker")
  valid_774130 = validateParameter(valid_774130, JString, required = false,
                                 default = nil)
  if valid_774130 != nil:
    section.add "Marker", valid_774130
  var valid_774131 = query.getOrDefault("CacheSubnetGroupName")
  valid_774131 = validateParameter(valid_774131, JString, required = false,
                                 default = nil)
  if valid_774131 != nil:
    section.add "CacheSubnetGroupName", valid_774131
  var valid_774132 = query.getOrDefault("Version")
  valid_774132 = validateParameter(valid_774132, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774132 != nil:
    section.add "Version", valid_774132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774133 = header.getOrDefault("X-Amz-Date")
  valid_774133 = validateParameter(valid_774133, JString, required = false,
                                 default = nil)
  if valid_774133 != nil:
    section.add "X-Amz-Date", valid_774133
  var valid_774134 = header.getOrDefault("X-Amz-Security-Token")
  valid_774134 = validateParameter(valid_774134, JString, required = false,
                                 default = nil)
  if valid_774134 != nil:
    section.add "X-Amz-Security-Token", valid_774134
  var valid_774135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774135 = validateParameter(valid_774135, JString, required = false,
                                 default = nil)
  if valid_774135 != nil:
    section.add "X-Amz-Content-Sha256", valid_774135
  var valid_774136 = header.getOrDefault("X-Amz-Algorithm")
  valid_774136 = validateParameter(valid_774136, JString, required = false,
                                 default = nil)
  if valid_774136 != nil:
    section.add "X-Amz-Algorithm", valid_774136
  var valid_774137 = header.getOrDefault("X-Amz-Signature")
  valid_774137 = validateParameter(valid_774137, JString, required = false,
                                 default = nil)
  if valid_774137 != nil:
    section.add "X-Amz-Signature", valid_774137
  var valid_774138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774138 = validateParameter(valid_774138, JString, required = false,
                                 default = nil)
  if valid_774138 != nil:
    section.add "X-Amz-SignedHeaders", valid_774138
  var valid_774139 = header.getOrDefault("X-Amz-Credential")
  valid_774139 = validateParameter(valid_774139, JString, required = false,
                                 default = nil)
  if valid_774139 != nil:
    section.add "X-Amz-Credential", valid_774139
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774140: Call_GetDescribeCacheSubnetGroups_774125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ## 
  let valid = call_774140.validator(path, query, header, formData, body)
  let scheme = call_774140.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774140.url(scheme.get, call_774140.host, call_774140.base,
                         call_774140.route, valid.getOrDefault("path"))
  result = hook(call_774140, url, valid)

proc call*(call_774141: Call_GetDescribeCacheSubnetGroups_774125;
          MaxRecords: int = 0; Action: string = "DescribeCacheSubnetGroups";
          Marker: string = ""; CacheSubnetGroupName: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeCacheSubnetGroups
  ## Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CacheSubnetGroupName: string
  ##                       : The name of the cache subnet group to return details for.
  ##   Version: string (required)
  var query_774142 = newJObject()
  add(query_774142, "MaxRecords", newJInt(MaxRecords))
  add(query_774142, "Action", newJString(Action))
  add(query_774142, "Marker", newJString(Marker))
  add(query_774142, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_774142, "Version", newJString(Version))
  result = call_774141.call(nil, query_774142, nil, nil, nil)

var getDescribeCacheSubnetGroups* = Call_GetDescribeCacheSubnetGroups_774125(
    name: "getDescribeCacheSubnetGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeCacheSubnetGroups",
    validator: validate_GetDescribeCacheSubnetGroups_774126, base: "/",
    url: url_GetDescribeCacheSubnetGroups_774127,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_774180 = ref object of OpenApiRestCall_772597
proc url_PostDescribeEngineDefaultParameters_774182(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEngineDefaultParameters_774181(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774183 = query.getOrDefault("Action")
  valid_774183 = validateParameter(valid_774183, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_774183 != nil:
    section.add "Action", valid_774183
  var valid_774184 = query.getOrDefault("Version")
  valid_774184 = validateParameter(valid_774184, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774184 != nil:
    section.add "Version", valid_774184
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774185 = header.getOrDefault("X-Amz-Date")
  valid_774185 = validateParameter(valid_774185, JString, required = false,
                                 default = nil)
  if valid_774185 != nil:
    section.add "X-Amz-Date", valid_774185
  var valid_774186 = header.getOrDefault("X-Amz-Security-Token")
  valid_774186 = validateParameter(valid_774186, JString, required = false,
                                 default = nil)
  if valid_774186 != nil:
    section.add "X-Amz-Security-Token", valid_774186
  var valid_774187 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774187 = validateParameter(valid_774187, JString, required = false,
                                 default = nil)
  if valid_774187 != nil:
    section.add "X-Amz-Content-Sha256", valid_774187
  var valid_774188 = header.getOrDefault("X-Amz-Algorithm")
  valid_774188 = validateParameter(valid_774188, JString, required = false,
                                 default = nil)
  if valid_774188 != nil:
    section.add "X-Amz-Algorithm", valid_774188
  var valid_774189 = header.getOrDefault("X-Amz-Signature")
  valid_774189 = validateParameter(valid_774189, JString, required = false,
                                 default = nil)
  if valid_774189 != nil:
    section.add "X-Amz-Signature", valid_774189
  var valid_774190 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774190 = validateParameter(valid_774190, JString, required = false,
                                 default = nil)
  if valid_774190 != nil:
    section.add "X-Amz-SignedHeaders", valid_774190
  var valid_774191 = header.getOrDefault("X-Amz-Credential")
  valid_774191 = validateParameter(valid_774191, JString, required = false,
                                 default = nil)
  if valid_774191 != nil:
    section.add "X-Amz-Credential", valid_774191
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupFamily` field"
  var valid_774192 = formData.getOrDefault("CacheParameterGroupFamily")
  valid_774192 = validateParameter(valid_774192, JString, required = true,
                                 default = nil)
  if valid_774192 != nil:
    section.add "CacheParameterGroupFamily", valid_774192
  var valid_774193 = formData.getOrDefault("Marker")
  valid_774193 = validateParameter(valid_774193, JString, required = false,
                                 default = nil)
  if valid_774193 != nil:
    section.add "Marker", valid_774193
  var valid_774194 = formData.getOrDefault("MaxRecords")
  valid_774194 = validateParameter(valid_774194, JInt, required = false, default = nil)
  if valid_774194 != nil:
    section.add "MaxRecords", valid_774194
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774195: Call_PostDescribeEngineDefaultParameters_774180;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_774195.validator(path, query, header, formData, body)
  let scheme = call_774195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774195.url(scheme.get, call_774195.host, call_774195.base,
                         call_774195.route, valid.getOrDefault("path"))
  result = hook(call_774195, url, valid)

proc call*(call_774196: Call_PostDescribeEngineDefaultParameters_774180;
          CacheParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters"; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774197 = newJObject()
  var formData_774198 = newJObject()
  add(formData_774198, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  add(formData_774198, "Marker", newJString(Marker))
  add(query_774197, "Action", newJString(Action))
  add(formData_774198, "MaxRecords", newJInt(MaxRecords))
  add(query_774197, "Version", newJString(Version))
  result = call_774196.call(nil, query_774197, nil, formData_774198, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_774180(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_774181, base: "/",
    url: url_PostDescribeEngineDefaultParameters_774182,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_774162 = ref object of OpenApiRestCall_772597
proc url_GetDescribeEngineDefaultParameters_774164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEngineDefaultParameters_774163(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   CacheParameterGroupFamily: JString (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  section = newJObject()
  var valid_774165 = query.getOrDefault("MaxRecords")
  valid_774165 = validateParameter(valid_774165, JInt, required = false, default = nil)
  if valid_774165 != nil:
    section.add "MaxRecords", valid_774165
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774166 = query.getOrDefault("Action")
  valid_774166 = validateParameter(valid_774166, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_774166 != nil:
    section.add "Action", valid_774166
  var valid_774167 = query.getOrDefault("Marker")
  valid_774167 = validateParameter(valid_774167, JString, required = false,
                                 default = nil)
  if valid_774167 != nil:
    section.add "Marker", valid_774167
  var valid_774168 = query.getOrDefault("Version")
  valid_774168 = validateParameter(valid_774168, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774168 != nil:
    section.add "Version", valid_774168
  var valid_774169 = query.getOrDefault("CacheParameterGroupFamily")
  valid_774169 = validateParameter(valid_774169, JString, required = true,
                                 default = nil)
  if valid_774169 != nil:
    section.add "CacheParameterGroupFamily", valid_774169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774170 = header.getOrDefault("X-Amz-Date")
  valid_774170 = validateParameter(valid_774170, JString, required = false,
                                 default = nil)
  if valid_774170 != nil:
    section.add "X-Amz-Date", valid_774170
  var valid_774171 = header.getOrDefault("X-Amz-Security-Token")
  valid_774171 = validateParameter(valid_774171, JString, required = false,
                                 default = nil)
  if valid_774171 != nil:
    section.add "X-Amz-Security-Token", valid_774171
  var valid_774172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774172 = validateParameter(valid_774172, JString, required = false,
                                 default = nil)
  if valid_774172 != nil:
    section.add "X-Amz-Content-Sha256", valid_774172
  var valid_774173 = header.getOrDefault("X-Amz-Algorithm")
  valid_774173 = validateParameter(valid_774173, JString, required = false,
                                 default = nil)
  if valid_774173 != nil:
    section.add "X-Amz-Algorithm", valid_774173
  var valid_774174 = header.getOrDefault("X-Amz-Signature")
  valid_774174 = validateParameter(valid_774174, JString, required = false,
                                 default = nil)
  if valid_774174 != nil:
    section.add "X-Amz-Signature", valid_774174
  var valid_774175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774175 = validateParameter(valid_774175, JString, required = false,
                                 default = nil)
  if valid_774175 != nil:
    section.add "X-Amz-SignedHeaders", valid_774175
  var valid_774176 = header.getOrDefault("X-Amz-Credential")
  valid_774176 = validateParameter(valid_774176, JString, required = false,
                                 default = nil)
  if valid_774176 != nil:
    section.add "X-Amz-Credential", valid_774176
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774177: Call_GetDescribeEngineDefaultParameters_774162;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified cache engine.
  ## 
  let valid = call_774177.validator(path, query, header, formData, body)
  let scheme = call_774177.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774177.url(scheme.get, call_774177.host, call_774177.base,
                         call_774177.route, valid.getOrDefault("path"))
  result = hook(call_774177, url, valid)

proc call*(call_774178: Call_GetDescribeEngineDefaultParameters_774162;
          CacheParameterGroupFamily: string; MaxRecords: int = 0;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified cache engine.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   CacheParameterGroupFamily: string (required)
  ##                            : <p>The name of the cache parameter group family.</p> <p>Valid values are: <code>memcached1.4</code> | <code>memcached1.5</code> | <code>redis2.6</code> | <code>redis2.8</code> | <code>redis3.2</code> | <code>redis4.0</code> | <code>redis5.0</code> | </p>
  var query_774179 = newJObject()
  add(query_774179, "MaxRecords", newJInt(MaxRecords))
  add(query_774179, "Action", newJString(Action))
  add(query_774179, "Marker", newJString(Marker))
  add(query_774179, "Version", newJString(Version))
  add(query_774179, "CacheParameterGroupFamily",
      newJString(CacheParameterGroupFamily))
  result = call_774178.call(nil, query_774179, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_774162(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_774163, base: "/",
    url: url_GetDescribeEngineDefaultParameters_774164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_774221 = ref object of OpenApiRestCall_772597
proc url_PostDescribeEvents_774223(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeEvents_774222(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774224 = query.getOrDefault("Action")
  valid_774224 = validateParameter(valid_774224, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_774224 != nil:
    section.add "Action", valid_774224
  var valid_774225 = query.getOrDefault("Version")
  valid_774225 = validateParameter(valid_774225, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774225 != nil:
    section.add "Version", valid_774225
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774226 = header.getOrDefault("X-Amz-Date")
  valid_774226 = validateParameter(valid_774226, JString, required = false,
                                 default = nil)
  if valid_774226 != nil:
    section.add "X-Amz-Date", valid_774226
  var valid_774227 = header.getOrDefault("X-Amz-Security-Token")
  valid_774227 = validateParameter(valid_774227, JString, required = false,
                                 default = nil)
  if valid_774227 != nil:
    section.add "X-Amz-Security-Token", valid_774227
  var valid_774228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774228 = validateParameter(valid_774228, JString, required = false,
                                 default = nil)
  if valid_774228 != nil:
    section.add "X-Amz-Content-Sha256", valid_774228
  var valid_774229 = header.getOrDefault("X-Amz-Algorithm")
  valid_774229 = validateParameter(valid_774229, JString, required = false,
                                 default = nil)
  if valid_774229 != nil:
    section.add "X-Amz-Algorithm", valid_774229
  var valid_774230 = header.getOrDefault("X-Amz-Signature")
  valid_774230 = validateParameter(valid_774230, JString, required = false,
                                 default = nil)
  if valid_774230 != nil:
    section.add "X-Amz-Signature", valid_774230
  var valid_774231 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774231 = validateParameter(valid_774231, JString, required = false,
                                 default = nil)
  if valid_774231 != nil:
    section.add "X-Amz-SignedHeaders", valid_774231
  var valid_774232 = header.getOrDefault("X-Amz-Credential")
  valid_774232 = validateParameter(valid_774232, JString, required = false,
                                 default = nil)
  if valid_774232 != nil:
    section.add "X-Amz-Credential", valid_774232
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_774233 = formData.getOrDefault("SourceIdentifier")
  valid_774233 = validateParameter(valid_774233, JString, required = false,
                                 default = nil)
  if valid_774233 != nil:
    section.add "SourceIdentifier", valid_774233
  var valid_774234 = formData.getOrDefault("Marker")
  valid_774234 = validateParameter(valid_774234, JString, required = false,
                                 default = nil)
  if valid_774234 != nil:
    section.add "Marker", valid_774234
  var valid_774235 = formData.getOrDefault("StartTime")
  valid_774235 = validateParameter(valid_774235, JString, required = false,
                                 default = nil)
  if valid_774235 != nil:
    section.add "StartTime", valid_774235
  var valid_774236 = formData.getOrDefault("Duration")
  valid_774236 = validateParameter(valid_774236, JInt, required = false, default = nil)
  if valid_774236 != nil:
    section.add "Duration", valid_774236
  var valid_774237 = formData.getOrDefault("EndTime")
  valid_774237 = validateParameter(valid_774237, JString, required = false,
                                 default = nil)
  if valid_774237 != nil:
    section.add "EndTime", valid_774237
  var valid_774238 = formData.getOrDefault("MaxRecords")
  valid_774238 = validateParameter(valid_774238, JInt, required = false, default = nil)
  if valid_774238 != nil:
    section.add "MaxRecords", valid_774238
  var valid_774239 = formData.getOrDefault("SourceType")
  valid_774239 = validateParameter(valid_774239, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_774239 != nil:
    section.add "SourceType", valid_774239
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774240: Call_PostDescribeEvents_774221; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_774240.validator(path, query, header, formData, body)
  let scheme = call_774240.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774240.url(scheme.get, call_774240.host, call_774240.base,
                         call_774240.route, valid.getOrDefault("path"))
  result = hook(call_774240, url, valid)

proc call*(call_774241: Call_PostDescribeEvents_774221;
          SourceIdentifier: string = ""; Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; EndTime: string = "";
          MaxRecords: int = 0; Version: string = "2015-02-02";
          SourceType: string = "cache-cluster"): Recallable =
  ## postDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_774242 = newJObject()
  var formData_774243 = newJObject()
  add(formData_774243, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_774243, "Marker", newJString(Marker))
  add(formData_774243, "StartTime", newJString(StartTime))
  add(query_774242, "Action", newJString(Action))
  add(formData_774243, "Duration", newJInt(Duration))
  add(formData_774243, "EndTime", newJString(EndTime))
  add(formData_774243, "MaxRecords", newJInt(MaxRecords))
  add(query_774242, "Version", newJString(Version))
  add(formData_774243, "SourceType", newJString(SourceType))
  result = call_774241.call(nil, query_774242, nil, formData_774243, nil)

var postDescribeEvents* = Call_PostDescribeEvents_774221(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_774222, base: "/",
    url: url_PostDescribeEvents_774223, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_774199 = ref object of OpenApiRestCall_772597
proc url_GetDescribeEvents_774201(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeEvents_774200(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   StartTime: JString
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JInt
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: JString
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774202 = query.getOrDefault("SourceType")
  valid_774202 = validateParameter(valid_774202, JString, required = false,
                                 default = newJString("cache-cluster"))
  if valid_774202 != nil:
    section.add "SourceType", valid_774202
  var valid_774203 = query.getOrDefault("MaxRecords")
  valid_774203 = validateParameter(valid_774203, JInt, required = false, default = nil)
  if valid_774203 != nil:
    section.add "MaxRecords", valid_774203
  var valid_774204 = query.getOrDefault("StartTime")
  valid_774204 = validateParameter(valid_774204, JString, required = false,
                                 default = nil)
  if valid_774204 != nil:
    section.add "StartTime", valid_774204
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774205 = query.getOrDefault("Action")
  valid_774205 = validateParameter(valid_774205, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_774205 != nil:
    section.add "Action", valid_774205
  var valid_774206 = query.getOrDefault("SourceIdentifier")
  valid_774206 = validateParameter(valid_774206, JString, required = false,
                                 default = nil)
  if valid_774206 != nil:
    section.add "SourceIdentifier", valid_774206
  var valid_774207 = query.getOrDefault("Marker")
  valid_774207 = validateParameter(valid_774207, JString, required = false,
                                 default = nil)
  if valid_774207 != nil:
    section.add "Marker", valid_774207
  var valid_774208 = query.getOrDefault("Duration")
  valid_774208 = validateParameter(valid_774208, JInt, required = false, default = nil)
  if valid_774208 != nil:
    section.add "Duration", valid_774208
  var valid_774209 = query.getOrDefault("EndTime")
  valid_774209 = validateParameter(valid_774209, JString, required = false,
                                 default = nil)
  if valid_774209 != nil:
    section.add "EndTime", valid_774209
  var valid_774210 = query.getOrDefault("Version")
  valid_774210 = validateParameter(valid_774210, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774210 != nil:
    section.add "Version", valid_774210
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774211 = header.getOrDefault("X-Amz-Date")
  valid_774211 = validateParameter(valid_774211, JString, required = false,
                                 default = nil)
  if valid_774211 != nil:
    section.add "X-Amz-Date", valid_774211
  var valid_774212 = header.getOrDefault("X-Amz-Security-Token")
  valid_774212 = validateParameter(valid_774212, JString, required = false,
                                 default = nil)
  if valid_774212 != nil:
    section.add "X-Amz-Security-Token", valid_774212
  var valid_774213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774213 = validateParameter(valid_774213, JString, required = false,
                                 default = nil)
  if valid_774213 != nil:
    section.add "X-Amz-Content-Sha256", valid_774213
  var valid_774214 = header.getOrDefault("X-Amz-Algorithm")
  valid_774214 = validateParameter(valid_774214, JString, required = false,
                                 default = nil)
  if valid_774214 != nil:
    section.add "X-Amz-Algorithm", valid_774214
  var valid_774215 = header.getOrDefault("X-Amz-Signature")
  valid_774215 = validateParameter(valid_774215, JString, required = false,
                                 default = nil)
  if valid_774215 != nil:
    section.add "X-Amz-Signature", valid_774215
  var valid_774216 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774216 = validateParameter(valid_774216, JString, required = false,
                                 default = nil)
  if valid_774216 != nil:
    section.add "X-Amz-SignedHeaders", valid_774216
  var valid_774217 = header.getOrDefault("X-Amz-Credential")
  valid_774217 = validateParameter(valid_774217, JString, required = false,
                                 default = nil)
  if valid_774217 != nil:
    section.add "X-Amz-Credential", valid_774217
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774218: Call_GetDescribeEvents_774199; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ## 
  let valid = call_774218.validator(path, query, header, formData, body)
  let scheme = call_774218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774218.url(scheme.get, call_774218.host, call_774218.base,
                         call_774218.route, valid.getOrDefault("path"))
  result = hook(call_774218, url, valid)

proc call*(call_774219: Call_GetDescribeEvents_774199;
          SourceType: string = "cache-cluster"; MaxRecords: int = 0;
          StartTime: string = ""; Action: string = "DescribeEvents";
          SourceIdentifier: string = ""; Marker: string = ""; Duration: int = 0;
          EndTime: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeEvents
  ## <p>Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.</p> <p>By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.</p>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   StartTime: string
  ##            : <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: int
  ##           : The number of minutes worth of events to retrieve.
  ##   EndTime: string
  ##          : <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format.</p> <p> <b>Example:</b> 2017-03-30T07:03:49.555Z</p>
  ##   Version: string (required)
  var query_774220 = newJObject()
  add(query_774220, "SourceType", newJString(SourceType))
  add(query_774220, "MaxRecords", newJInt(MaxRecords))
  add(query_774220, "StartTime", newJString(StartTime))
  add(query_774220, "Action", newJString(Action))
  add(query_774220, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_774220, "Marker", newJString(Marker))
  add(query_774220, "Duration", newJInt(Duration))
  add(query_774220, "EndTime", newJString(EndTime))
  add(query_774220, "Version", newJString(Version))
  result = call_774219.call(nil, query_774220, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_774199(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_774200,
    base: "/", url: url_GetDescribeEvents_774201,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReplicationGroups_774262 = ref object of OpenApiRestCall_772597
proc url_PostDescribeReplicationGroups_774264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReplicationGroups_774263(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774265 = query.getOrDefault("Action")
  valid_774265 = validateParameter(valid_774265, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_774265 != nil:
    section.add "Action", valid_774265
  var valid_774266 = query.getOrDefault("Version")
  valid_774266 = validateParameter(valid_774266, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774266 != nil:
    section.add "Version", valid_774266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774267 = header.getOrDefault("X-Amz-Date")
  valid_774267 = validateParameter(valid_774267, JString, required = false,
                                 default = nil)
  if valid_774267 != nil:
    section.add "X-Amz-Date", valid_774267
  var valid_774268 = header.getOrDefault("X-Amz-Security-Token")
  valid_774268 = validateParameter(valid_774268, JString, required = false,
                                 default = nil)
  if valid_774268 != nil:
    section.add "X-Amz-Security-Token", valid_774268
  var valid_774269 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774269 = validateParameter(valid_774269, JString, required = false,
                                 default = nil)
  if valid_774269 != nil:
    section.add "X-Amz-Content-Sha256", valid_774269
  var valid_774270 = header.getOrDefault("X-Amz-Algorithm")
  valid_774270 = validateParameter(valid_774270, JString, required = false,
                                 default = nil)
  if valid_774270 != nil:
    section.add "X-Amz-Algorithm", valid_774270
  var valid_774271 = header.getOrDefault("X-Amz-Signature")
  valid_774271 = validateParameter(valid_774271, JString, required = false,
                                 default = nil)
  if valid_774271 != nil:
    section.add "X-Amz-Signature", valid_774271
  var valid_774272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774272 = validateParameter(valid_774272, JString, required = false,
                                 default = nil)
  if valid_774272 != nil:
    section.add "X-Amz-SignedHeaders", valid_774272
  var valid_774273 = header.getOrDefault("X-Amz-Credential")
  valid_774273 = validateParameter(valid_774273, JString, required = false,
                                 default = nil)
  if valid_774273 != nil:
    section.add "X-Amz-Credential", valid_774273
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_774274 = formData.getOrDefault("ReplicationGroupId")
  valid_774274 = validateParameter(valid_774274, JString, required = false,
                                 default = nil)
  if valid_774274 != nil:
    section.add "ReplicationGroupId", valid_774274
  var valid_774275 = formData.getOrDefault("Marker")
  valid_774275 = validateParameter(valid_774275, JString, required = false,
                                 default = nil)
  if valid_774275 != nil:
    section.add "Marker", valid_774275
  var valid_774276 = formData.getOrDefault("MaxRecords")
  valid_774276 = validateParameter(valid_774276, JInt, required = false, default = nil)
  if valid_774276 != nil:
    section.add "MaxRecords", valid_774276
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774277: Call_PostDescribeReplicationGroups_774262; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_774277.validator(path, query, header, formData, body)
  let scheme = call_774277.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774277.url(scheme.get, call_774277.host, call_774277.base,
                         call_774277.route, valid.getOrDefault("path"))
  result = hook(call_774277, url, valid)

proc call*(call_774278: Call_PostDescribeReplicationGroups_774262;
          ReplicationGroupId: string = ""; Marker: string = "";
          Action: string = "DescribeReplicationGroups"; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774279 = newJObject()
  var formData_774280 = newJObject()
  add(formData_774280, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_774280, "Marker", newJString(Marker))
  add(query_774279, "Action", newJString(Action))
  add(formData_774280, "MaxRecords", newJInt(MaxRecords))
  add(query_774279, "Version", newJString(Version))
  result = call_774278.call(nil, query_774279, nil, formData_774280, nil)

var postDescribeReplicationGroups* = Call_PostDescribeReplicationGroups_774262(
    name: "postDescribeReplicationGroups", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_PostDescribeReplicationGroups_774263, base: "/",
    url: url_PostDescribeReplicationGroups_774264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReplicationGroups_774244 = ref object of OpenApiRestCall_772597
proc url_GetDescribeReplicationGroups_774246(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReplicationGroups_774245(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774247 = query.getOrDefault("MaxRecords")
  valid_774247 = validateParameter(valid_774247, JInt, required = false, default = nil)
  if valid_774247 != nil:
    section.add "MaxRecords", valid_774247
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774248 = query.getOrDefault("Action")
  valid_774248 = validateParameter(valid_774248, JString, required = true, default = newJString(
      "DescribeReplicationGroups"))
  if valid_774248 != nil:
    section.add "Action", valid_774248
  var valid_774249 = query.getOrDefault("Marker")
  valid_774249 = validateParameter(valid_774249, JString, required = false,
                                 default = nil)
  if valid_774249 != nil:
    section.add "Marker", valid_774249
  var valid_774250 = query.getOrDefault("ReplicationGroupId")
  valid_774250 = validateParameter(valid_774250, JString, required = false,
                                 default = nil)
  if valid_774250 != nil:
    section.add "ReplicationGroupId", valid_774250
  var valid_774251 = query.getOrDefault("Version")
  valid_774251 = validateParameter(valid_774251, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774251 != nil:
    section.add "Version", valid_774251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774252 = header.getOrDefault("X-Amz-Date")
  valid_774252 = validateParameter(valid_774252, JString, required = false,
                                 default = nil)
  if valid_774252 != nil:
    section.add "X-Amz-Date", valid_774252
  var valid_774253 = header.getOrDefault("X-Amz-Security-Token")
  valid_774253 = validateParameter(valid_774253, JString, required = false,
                                 default = nil)
  if valid_774253 != nil:
    section.add "X-Amz-Security-Token", valid_774253
  var valid_774254 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774254 = validateParameter(valid_774254, JString, required = false,
                                 default = nil)
  if valid_774254 != nil:
    section.add "X-Amz-Content-Sha256", valid_774254
  var valid_774255 = header.getOrDefault("X-Amz-Algorithm")
  valid_774255 = validateParameter(valid_774255, JString, required = false,
                                 default = nil)
  if valid_774255 != nil:
    section.add "X-Amz-Algorithm", valid_774255
  var valid_774256 = header.getOrDefault("X-Amz-Signature")
  valid_774256 = validateParameter(valid_774256, JString, required = false,
                                 default = nil)
  if valid_774256 != nil:
    section.add "X-Amz-Signature", valid_774256
  var valid_774257 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774257 = validateParameter(valid_774257, JString, required = false,
                                 default = nil)
  if valid_774257 != nil:
    section.add "X-Amz-SignedHeaders", valid_774257
  var valid_774258 = header.getOrDefault("X-Amz-Credential")
  valid_774258 = validateParameter(valid_774258, JString, required = false,
                                 default = nil)
  if valid_774258 != nil:
    section.add "X-Amz-Credential", valid_774258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774259: Call_GetDescribeReplicationGroups_774244; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_774259.validator(path, query, header, formData, body)
  let scheme = call_774259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774259.url(scheme.get, call_774259.host, call_774259.base,
                         call_774259.route, valid.getOrDefault("path"))
  result = hook(call_774259, url, valid)

proc call*(call_774260: Call_GetDescribeReplicationGroups_774244;
          MaxRecords: int = 0; Action: string = "DescribeReplicationGroups";
          Marker: string = ""; ReplicationGroupId: string = "";
          Version: string = "2015-02-02"): Recallable =
  ## getDescribeReplicationGroups
  ## <p>Returns information about a particular replication group. If no identifier is specified, <code>DescribeReplicationGroups</code> returns information about all replication groups.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: string
  ##                     : <p>The identifier for the replication group to be described. This parameter is not case sensitive.</p> <p>If you do not specify this parameter, information about all replication groups is returned.</p>
  ##   Version: string (required)
  var query_774261 = newJObject()
  add(query_774261, "MaxRecords", newJInt(MaxRecords))
  add(query_774261, "Action", newJString(Action))
  add(query_774261, "Marker", newJString(Marker))
  add(query_774261, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774261, "Version", newJString(Version))
  result = call_774260.call(nil, query_774261, nil, nil, nil)

var getDescribeReplicationGroups* = Call_GetDescribeReplicationGroups_774244(
    name: "getDescribeReplicationGroups", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReplicationGroups",
    validator: validate_GetDescribeReplicationGroups_774245, base: "/",
    url: url_GetDescribeReplicationGroups_774246,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodes_774304 = ref object of OpenApiRestCall_772597
proc url_PostDescribeReservedCacheNodes_774306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReservedCacheNodes_774305(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774307 = query.getOrDefault("Action")
  valid_774307 = validateParameter(valid_774307, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_774307 != nil:
    section.add "Action", valid_774307
  var valid_774308 = query.getOrDefault("Version")
  valid_774308 = validateParameter(valid_774308, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774308 != nil:
    section.add "Version", valid_774308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774309 = header.getOrDefault("X-Amz-Date")
  valid_774309 = validateParameter(valid_774309, JString, required = false,
                                 default = nil)
  if valid_774309 != nil:
    section.add "X-Amz-Date", valid_774309
  var valid_774310 = header.getOrDefault("X-Amz-Security-Token")
  valid_774310 = validateParameter(valid_774310, JString, required = false,
                                 default = nil)
  if valid_774310 != nil:
    section.add "X-Amz-Security-Token", valid_774310
  var valid_774311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774311 = validateParameter(valid_774311, JString, required = false,
                                 default = nil)
  if valid_774311 != nil:
    section.add "X-Amz-Content-Sha256", valid_774311
  var valid_774312 = header.getOrDefault("X-Amz-Algorithm")
  valid_774312 = validateParameter(valid_774312, JString, required = false,
                                 default = nil)
  if valid_774312 != nil:
    section.add "X-Amz-Algorithm", valid_774312
  var valid_774313 = header.getOrDefault("X-Amz-Signature")
  valid_774313 = validateParameter(valid_774313, JString, required = false,
                                 default = nil)
  if valid_774313 != nil:
    section.add "X-Amz-Signature", valid_774313
  var valid_774314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774314 = validateParameter(valid_774314, JString, required = false,
                                 default = nil)
  if valid_774314 != nil:
    section.add "X-Amz-SignedHeaders", valid_774314
  var valid_774315 = header.getOrDefault("X-Amz-Credential")
  valid_774315 = validateParameter(valid_774315, JString, required = false,
                                 default = nil)
  if valid_774315 != nil:
    section.add "X-Amz-Credential", valid_774315
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_774316 = formData.getOrDefault("CacheNodeType")
  valid_774316 = validateParameter(valid_774316, JString, required = false,
                                 default = nil)
  if valid_774316 != nil:
    section.add "CacheNodeType", valid_774316
  var valid_774317 = formData.getOrDefault("OfferingType")
  valid_774317 = validateParameter(valid_774317, JString, required = false,
                                 default = nil)
  if valid_774317 != nil:
    section.add "OfferingType", valid_774317
  var valid_774318 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_774318 = validateParameter(valid_774318, JString, required = false,
                                 default = nil)
  if valid_774318 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_774318
  var valid_774319 = formData.getOrDefault("ReservedCacheNodeId")
  valid_774319 = validateParameter(valid_774319, JString, required = false,
                                 default = nil)
  if valid_774319 != nil:
    section.add "ReservedCacheNodeId", valid_774319
  var valid_774320 = formData.getOrDefault("Marker")
  valid_774320 = validateParameter(valid_774320, JString, required = false,
                                 default = nil)
  if valid_774320 != nil:
    section.add "Marker", valid_774320
  var valid_774321 = formData.getOrDefault("Duration")
  valid_774321 = validateParameter(valid_774321, JString, required = false,
                                 default = nil)
  if valid_774321 != nil:
    section.add "Duration", valid_774321
  var valid_774322 = formData.getOrDefault("ProductDescription")
  valid_774322 = validateParameter(valid_774322, JString, required = false,
                                 default = nil)
  if valid_774322 != nil:
    section.add "ProductDescription", valid_774322
  var valid_774323 = formData.getOrDefault("MaxRecords")
  valid_774323 = validateParameter(valid_774323, JInt, required = false, default = nil)
  if valid_774323 != nil:
    section.add "MaxRecords", valid_774323
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774324: Call_PostDescribeReservedCacheNodes_774304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_774324.validator(path, query, header, formData, body)
  let scheme = call_774324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774324.url(scheme.get, call_774324.host, call_774324.base,
                         call_774324.route, valid.getOrDefault("path"))
  result = hook(call_774324, url, valid)

proc call*(call_774325: Call_PostDescribeReservedCacheNodes_774304;
          CacheNodeType: string = ""; OfferingType: string = "";
          ReservedCacheNodesOfferingId: string = "";
          ReservedCacheNodeId: string = ""; Marker: string = "";
          Action: string = "DescribeReservedCacheNodes"; Duration: string = "";
          ProductDescription: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774326 = newJObject()
  var formData_774327 = newJObject()
  add(formData_774327, "CacheNodeType", newJString(CacheNodeType))
  add(formData_774327, "OfferingType", newJString(OfferingType))
  add(formData_774327, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_774327, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(formData_774327, "Marker", newJString(Marker))
  add(query_774326, "Action", newJString(Action))
  add(formData_774327, "Duration", newJString(Duration))
  add(formData_774327, "ProductDescription", newJString(ProductDescription))
  add(formData_774327, "MaxRecords", newJInt(MaxRecords))
  add(query_774326, "Version", newJString(Version))
  result = call_774325.call(nil, query_774326, nil, formData_774327, nil)

var postDescribeReservedCacheNodes* = Call_PostDescribeReservedCacheNodes_774304(
    name: "postDescribeReservedCacheNodes", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_PostDescribeReservedCacheNodes_774305, base: "/",
    url: url_PostDescribeReservedCacheNodes_774306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodes_774281 = ref object of OpenApiRestCall_772597
proc url_GetDescribeReservedCacheNodes_774283(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReservedCacheNodes_774282(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  section = newJObject()
  var valid_774284 = query.getOrDefault("ProductDescription")
  valid_774284 = validateParameter(valid_774284, JString, required = false,
                                 default = nil)
  if valid_774284 != nil:
    section.add "ProductDescription", valid_774284
  var valid_774285 = query.getOrDefault("CacheNodeType")
  valid_774285 = validateParameter(valid_774285, JString, required = false,
                                 default = nil)
  if valid_774285 != nil:
    section.add "CacheNodeType", valid_774285
  var valid_774286 = query.getOrDefault("MaxRecords")
  valid_774286 = validateParameter(valid_774286, JInt, required = false, default = nil)
  if valid_774286 != nil:
    section.add "MaxRecords", valid_774286
  var valid_774287 = query.getOrDefault("OfferingType")
  valid_774287 = validateParameter(valid_774287, JString, required = false,
                                 default = nil)
  if valid_774287 != nil:
    section.add "OfferingType", valid_774287
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774288 = query.getOrDefault("Action")
  valid_774288 = validateParameter(valid_774288, JString, required = true, default = newJString(
      "DescribeReservedCacheNodes"))
  if valid_774288 != nil:
    section.add "Action", valid_774288
  var valid_774289 = query.getOrDefault("Marker")
  valid_774289 = validateParameter(valid_774289, JString, required = false,
                                 default = nil)
  if valid_774289 != nil:
    section.add "Marker", valid_774289
  var valid_774290 = query.getOrDefault("Duration")
  valid_774290 = validateParameter(valid_774290, JString, required = false,
                                 default = nil)
  if valid_774290 != nil:
    section.add "Duration", valid_774290
  var valid_774291 = query.getOrDefault("ReservedCacheNodeId")
  valid_774291 = validateParameter(valid_774291, JString, required = false,
                                 default = nil)
  if valid_774291 != nil:
    section.add "ReservedCacheNodeId", valid_774291
  var valid_774292 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_774292 = validateParameter(valid_774292, JString, required = false,
                                 default = nil)
  if valid_774292 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_774292
  var valid_774293 = query.getOrDefault("Version")
  valid_774293 = validateParameter(valid_774293, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774293 != nil:
    section.add "Version", valid_774293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774294 = header.getOrDefault("X-Amz-Date")
  valid_774294 = validateParameter(valid_774294, JString, required = false,
                                 default = nil)
  if valid_774294 != nil:
    section.add "X-Amz-Date", valid_774294
  var valid_774295 = header.getOrDefault("X-Amz-Security-Token")
  valid_774295 = validateParameter(valid_774295, JString, required = false,
                                 default = nil)
  if valid_774295 != nil:
    section.add "X-Amz-Security-Token", valid_774295
  var valid_774296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774296 = validateParameter(valid_774296, JString, required = false,
                                 default = nil)
  if valid_774296 != nil:
    section.add "X-Amz-Content-Sha256", valid_774296
  var valid_774297 = header.getOrDefault("X-Amz-Algorithm")
  valid_774297 = validateParameter(valid_774297, JString, required = false,
                                 default = nil)
  if valid_774297 != nil:
    section.add "X-Amz-Algorithm", valid_774297
  var valid_774298 = header.getOrDefault("X-Amz-Signature")
  valid_774298 = validateParameter(valid_774298, JString, required = false,
                                 default = nil)
  if valid_774298 != nil:
    section.add "X-Amz-Signature", valid_774298
  var valid_774299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774299 = validateParameter(valid_774299, JString, required = false,
                                 default = nil)
  if valid_774299 != nil:
    section.add "X-Amz-SignedHeaders", valid_774299
  var valid_774300 = header.getOrDefault("X-Amz-Credential")
  valid_774300 = validateParameter(valid_774300, JString, required = false,
                                 default = nil)
  if valid_774300 != nil:
    section.add "X-Amz-Credential", valid_774300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774301: Call_GetDescribeReservedCacheNodes_774281; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ## 
  let valid = call_774301.validator(path, query, header, formData, body)
  let scheme = call_774301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774301.url(scheme.get, call_774301.host, call_774301.base,
                         call_774301.route, valid.getOrDefault("path"))
  result = hook(call_774301, url, valid)

proc call*(call_774302: Call_GetDescribeReservedCacheNodes_774281;
          ProductDescription: string = ""; CacheNodeType: string = "";
          MaxRecords: int = 0; OfferingType: string = "";
          Action: string = "DescribeReservedCacheNodes"; Marker: string = "";
          Duration: string = ""; ReservedCacheNodeId: string = "";
          ReservedCacheNodesOfferingId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeReservedCacheNodes
  ## Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only those reservations matching the specified product description.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedCacheNodesOfferingId: string
  ##                               : The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_774303 = newJObject()
  add(query_774303, "ProductDescription", newJString(ProductDescription))
  add(query_774303, "CacheNodeType", newJString(CacheNodeType))
  add(query_774303, "MaxRecords", newJInt(MaxRecords))
  add(query_774303, "OfferingType", newJString(OfferingType))
  add(query_774303, "Action", newJString(Action))
  add(query_774303, "Marker", newJString(Marker))
  add(query_774303, "Duration", newJString(Duration))
  add(query_774303, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_774303, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(query_774303, "Version", newJString(Version))
  result = call_774302.call(nil, query_774303, nil, nil, nil)

var getDescribeReservedCacheNodes* = Call_GetDescribeReservedCacheNodes_774281(
    name: "getDescribeReservedCacheNodes", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodes",
    validator: validate_GetDescribeReservedCacheNodes_774282, base: "/",
    url: url_GetDescribeReservedCacheNodes_774283,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedCacheNodesOfferings_774350 = ref object of OpenApiRestCall_772597
proc url_PostDescribeReservedCacheNodesOfferings_774352(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeReservedCacheNodesOfferings_774351(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774353 = query.getOrDefault("Action")
  valid_774353 = validateParameter(valid_774353, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_774353 != nil:
    section.add "Action", valid_774353
  var valid_774354 = query.getOrDefault("Version")
  valid_774354 = validateParameter(valid_774354, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774354 != nil:
    section.add "Version", valid_774354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774355 = header.getOrDefault("X-Amz-Date")
  valid_774355 = validateParameter(valid_774355, JString, required = false,
                                 default = nil)
  if valid_774355 != nil:
    section.add "X-Amz-Date", valid_774355
  var valid_774356 = header.getOrDefault("X-Amz-Security-Token")
  valid_774356 = validateParameter(valid_774356, JString, required = false,
                                 default = nil)
  if valid_774356 != nil:
    section.add "X-Amz-Security-Token", valid_774356
  var valid_774357 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774357 = validateParameter(valid_774357, JString, required = false,
                                 default = nil)
  if valid_774357 != nil:
    section.add "X-Amz-Content-Sha256", valid_774357
  var valid_774358 = header.getOrDefault("X-Amz-Algorithm")
  valid_774358 = validateParameter(valid_774358, JString, required = false,
                                 default = nil)
  if valid_774358 != nil:
    section.add "X-Amz-Algorithm", valid_774358
  var valid_774359 = header.getOrDefault("X-Amz-Signature")
  valid_774359 = validateParameter(valid_774359, JString, required = false,
                                 default = nil)
  if valid_774359 != nil:
    section.add "X-Amz-Signature", valid_774359
  var valid_774360 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774360 = validateParameter(valid_774360, JString, required = false,
                                 default = nil)
  if valid_774360 != nil:
    section.add "X-Amz-SignedHeaders", valid_774360
  var valid_774361 = header.getOrDefault("X-Amz-Credential")
  valid_774361 = validateParameter(valid_774361, JString, required = false,
                                 default = nil)
  if valid_774361 != nil:
    section.add "X-Amz-Credential", valid_774361
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  section = newJObject()
  var valid_774362 = formData.getOrDefault("CacheNodeType")
  valid_774362 = validateParameter(valid_774362, JString, required = false,
                                 default = nil)
  if valid_774362 != nil:
    section.add "CacheNodeType", valid_774362
  var valid_774363 = formData.getOrDefault("OfferingType")
  valid_774363 = validateParameter(valid_774363, JString, required = false,
                                 default = nil)
  if valid_774363 != nil:
    section.add "OfferingType", valid_774363
  var valid_774364 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_774364 = validateParameter(valid_774364, JString, required = false,
                                 default = nil)
  if valid_774364 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_774364
  var valid_774365 = formData.getOrDefault("Marker")
  valid_774365 = validateParameter(valid_774365, JString, required = false,
                                 default = nil)
  if valid_774365 != nil:
    section.add "Marker", valid_774365
  var valid_774366 = formData.getOrDefault("Duration")
  valid_774366 = validateParameter(valid_774366, JString, required = false,
                                 default = nil)
  if valid_774366 != nil:
    section.add "Duration", valid_774366
  var valid_774367 = formData.getOrDefault("ProductDescription")
  valid_774367 = validateParameter(valid_774367, JString, required = false,
                                 default = nil)
  if valid_774367 != nil:
    section.add "ProductDescription", valid_774367
  var valid_774368 = formData.getOrDefault("MaxRecords")
  valid_774368 = validateParameter(valid_774368, JInt, required = false, default = nil)
  if valid_774368 != nil:
    section.add "MaxRecords", valid_774368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774369: Call_PostDescribeReservedCacheNodesOfferings_774350;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_774369.validator(path, query, header, formData, body)
  let scheme = call_774369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774369.url(scheme.get, call_774369.host, call_774369.base,
                         call_774369.route, valid.getOrDefault("path"))
  result = hook(call_774369, url, valid)

proc call*(call_774370: Call_PostDescribeReservedCacheNodesOfferings_774350;
          CacheNodeType: string = ""; OfferingType: string = "";
          ReservedCacheNodesOfferingId: string = ""; Marker: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Duration: string = ""; ProductDescription: string = ""; MaxRecords: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## postDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   Version: string (required)
  var query_774371 = newJObject()
  var formData_774372 = newJObject()
  add(formData_774372, "CacheNodeType", newJString(CacheNodeType))
  add(formData_774372, "OfferingType", newJString(OfferingType))
  add(formData_774372, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_774372, "Marker", newJString(Marker))
  add(query_774371, "Action", newJString(Action))
  add(formData_774372, "Duration", newJString(Duration))
  add(formData_774372, "ProductDescription", newJString(ProductDescription))
  add(formData_774372, "MaxRecords", newJInt(MaxRecords))
  add(query_774371, "Version", newJString(Version))
  result = call_774370.call(nil, query_774371, nil, formData_774372, nil)

var postDescribeReservedCacheNodesOfferings* = Call_PostDescribeReservedCacheNodesOfferings_774350(
    name: "postDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_PostDescribeReservedCacheNodesOfferings_774351, base: "/",
    url: url_PostDescribeReservedCacheNodesOfferings_774352,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedCacheNodesOfferings_774328 = ref object of OpenApiRestCall_772597
proc url_GetDescribeReservedCacheNodesOfferings_774330(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeReservedCacheNodesOfferings_774329(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved cache node offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   CacheNodeType: JString
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodesOfferingId: JString
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774331 = query.getOrDefault("ProductDescription")
  valid_774331 = validateParameter(valid_774331, JString, required = false,
                                 default = nil)
  if valid_774331 != nil:
    section.add "ProductDescription", valid_774331
  var valid_774332 = query.getOrDefault("CacheNodeType")
  valid_774332 = validateParameter(valid_774332, JString, required = false,
                                 default = nil)
  if valid_774332 != nil:
    section.add "CacheNodeType", valid_774332
  var valid_774333 = query.getOrDefault("MaxRecords")
  valid_774333 = validateParameter(valid_774333, JInt, required = false, default = nil)
  if valid_774333 != nil:
    section.add "MaxRecords", valid_774333
  var valid_774334 = query.getOrDefault("OfferingType")
  valid_774334 = validateParameter(valid_774334, JString, required = false,
                                 default = nil)
  if valid_774334 != nil:
    section.add "OfferingType", valid_774334
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774335 = query.getOrDefault("Action")
  valid_774335 = validateParameter(valid_774335, JString, required = true, default = newJString(
      "DescribeReservedCacheNodesOfferings"))
  if valid_774335 != nil:
    section.add "Action", valid_774335
  var valid_774336 = query.getOrDefault("Marker")
  valid_774336 = validateParameter(valid_774336, JString, required = false,
                                 default = nil)
  if valid_774336 != nil:
    section.add "Marker", valid_774336
  var valid_774337 = query.getOrDefault("Duration")
  valid_774337 = validateParameter(valid_774337, JString, required = false,
                                 default = nil)
  if valid_774337 != nil:
    section.add "Duration", valid_774337
  var valid_774338 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_774338 = validateParameter(valid_774338, JString, required = false,
                                 default = nil)
  if valid_774338 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_774338
  var valid_774339 = query.getOrDefault("Version")
  valid_774339 = validateParameter(valid_774339, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774339 != nil:
    section.add "Version", valid_774339
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774340 = header.getOrDefault("X-Amz-Date")
  valid_774340 = validateParameter(valid_774340, JString, required = false,
                                 default = nil)
  if valid_774340 != nil:
    section.add "X-Amz-Date", valid_774340
  var valid_774341 = header.getOrDefault("X-Amz-Security-Token")
  valid_774341 = validateParameter(valid_774341, JString, required = false,
                                 default = nil)
  if valid_774341 != nil:
    section.add "X-Amz-Security-Token", valid_774341
  var valid_774342 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774342 = validateParameter(valid_774342, JString, required = false,
                                 default = nil)
  if valid_774342 != nil:
    section.add "X-Amz-Content-Sha256", valid_774342
  var valid_774343 = header.getOrDefault("X-Amz-Algorithm")
  valid_774343 = validateParameter(valid_774343, JString, required = false,
                                 default = nil)
  if valid_774343 != nil:
    section.add "X-Amz-Algorithm", valid_774343
  var valid_774344 = header.getOrDefault("X-Amz-Signature")
  valid_774344 = validateParameter(valid_774344, JString, required = false,
                                 default = nil)
  if valid_774344 != nil:
    section.add "X-Amz-Signature", valid_774344
  var valid_774345 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774345 = validateParameter(valid_774345, JString, required = false,
                                 default = nil)
  if valid_774345 != nil:
    section.add "X-Amz-SignedHeaders", valid_774345
  var valid_774346 = header.getOrDefault("X-Amz-Credential")
  valid_774346 = validateParameter(valid_774346, JString, required = false,
                                 default = nil)
  if valid_774346 != nil:
    section.add "X-Amz-Credential", valid_774346
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774347: Call_GetDescribeReservedCacheNodesOfferings_774328;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved cache node offerings.
  ## 
  let valid = call_774347.validator(path, query, header, formData, body)
  let scheme = call_774347.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774347.url(scheme.get, call_774347.host, call_774347.base,
                         call_774347.route, valid.getOrDefault("path"))
  result = hook(call_774347, url, valid)

proc call*(call_774348: Call_GetDescribeReservedCacheNodesOfferings_774328;
          ProductDescription: string = ""; CacheNodeType: string = "";
          MaxRecords: int = 0; OfferingType: string = "";
          Action: string = "DescribeReservedCacheNodesOfferings";
          Marker: string = ""; Duration: string = "";
          ReservedCacheNodesOfferingId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getDescribeReservedCacheNodesOfferings
  ## Lists available reserved cache node offerings.
  ##   ProductDescription: string
  ##                     : The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
  ##   CacheNodeType: string
  ##                : <p>The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.</p> <p>The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.</p> <ul> <li> <p>General purpose:</p> <ul> <li> <p>Current generation: </p> <p> <b>M5 node types:</b> <code>cache.m5.large</code>, <code>cache.m5.xlarge</code>, <code>cache.m5.2xlarge</code>, <code>cache.m5.4xlarge</code>, <code>cache.m5.12xlarge</code>, <code>cache.m5.24xlarge</code> </p> <p> <b>M4 node types:</b> <code>cache.m4.large</code>, <code>cache.m4.xlarge</code>, <code>cache.m4.2xlarge</code>, <code>cache.m4.4xlarge</code>, <code>cache.m4.10xlarge</code> </p> <p> <b>T2 node types:</b> <code>cache.t2.micro</code>, <code>cache.t2.small</code>, <code>cache.t2.medium</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>T1 node types:</b> <code>cache.t1.micro</code> </p> <p> <b>M1 node types:</b> <code>cache.m1.small</code>, <code>cache.m1.medium</code>, <code>cache.m1.large</code>, <code>cache.m1.xlarge</code> </p> <p> <b>M3 node types:</b> <code>cache.m3.medium</code>, <code>cache.m3.large</code>, <code>cache.m3.xlarge</code>, <code>cache.m3.2xlarge</code> </p> </li> </ul> </li> <li> <p>Compute optimized:</p> <ul> <li> <p>Previous generation: (not recommended)</p> <p> <b>C1 node types:</b> <code>cache.c1.xlarge</code> </p> </li> </ul> </li> <li> <p>Memory optimized:</p> <ul> <li> <p>Current generation: </p> <p> <b>R5 node types:</b> <code>cache.r5.large</code>, <code>cache.r5.xlarge</code>, <code>cache.r5.2xlarge</code>, <code>cache.r5.4xlarge</code>, <code>cache.r5.12xlarge</code>, <code>cache.r5.24xlarge</code> </p> <p> <b>R4 node types:</b> <code>cache.r4.large</code>, <code>cache.r4.xlarge</code>, <code>cache.r4.2xlarge</code>, <code>cache.r4.4xlarge</code>, <code>cache.r4.8xlarge</code>, <code>cache.r4.16xlarge</code> </p> </li> <li> <p>Previous generation: (not recommended)</p> <p> <b>M2 node types:</b> <code>cache.m2.xlarge</code>, <code>cache.m2.2xlarge</code>, <code>cache.m2.4xlarge</code> </p> <p> <b>R3 node types:</b> <code>cache.r3.large</code>, <code>cache.r3.xlarge</code>, <code>cache.r3.2xlarge</code>, <code>cache.r3.4xlarge</code>, <code>cache.r3.8xlarge</code> </p> </li> </ul> </li> </ul> <p> <b>Additional node type info</b> </p> <ul> <li> <p>All current generation instance types are created in Amazon VPC by default.</p> </li> <li> <p>Redis append-only files (AOF) are not supported for T1 or T2 instances.</p> </li> <li> <p>Redis Multi-AZ with automatic failover is not supported on T1 instances.</p> </li> <li> <p>Redis configuration variables <code>appendonly</code> and <code>appendfsync</code> are not supported on Redis version 2.8.22 and later.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: minimum 20; maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Light Utilization"|"Medium Utilization"|"Heavy Utilization"</code> </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedCacheNodesOfferingId: string
  ##                               : <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_774349 = newJObject()
  add(query_774349, "ProductDescription", newJString(ProductDescription))
  add(query_774349, "CacheNodeType", newJString(CacheNodeType))
  add(query_774349, "MaxRecords", newJInt(MaxRecords))
  add(query_774349, "OfferingType", newJString(OfferingType))
  add(query_774349, "Action", newJString(Action))
  add(query_774349, "Marker", newJString(Marker))
  add(query_774349, "Duration", newJString(Duration))
  add(query_774349, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(query_774349, "Version", newJString(Version))
  result = call_774348.call(nil, query_774349, nil, nil, nil)

var getDescribeReservedCacheNodesOfferings* = Call_GetDescribeReservedCacheNodesOfferings_774328(
    name: "getDescribeReservedCacheNodesOfferings", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=DescribeReservedCacheNodesOfferings",
    validator: validate_GetDescribeReservedCacheNodesOfferings_774329, base: "/",
    url: url_GetDescribeReservedCacheNodesOfferings_774330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeServiceUpdates_774392 = ref object of OpenApiRestCall_772597
proc url_PostDescribeServiceUpdates_774394(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeServiceUpdates_774393(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774395 = query.getOrDefault("Action")
  valid_774395 = validateParameter(valid_774395, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_774395 != nil:
    section.add "Action", valid_774395
  var valid_774396 = query.getOrDefault("Version")
  valid_774396 = validateParameter(valid_774396, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774396 != nil:
    section.add "Version", valid_774396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774397 = header.getOrDefault("X-Amz-Date")
  valid_774397 = validateParameter(valid_774397, JString, required = false,
                                 default = nil)
  if valid_774397 != nil:
    section.add "X-Amz-Date", valid_774397
  var valid_774398 = header.getOrDefault("X-Amz-Security-Token")
  valid_774398 = validateParameter(valid_774398, JString, required = false,
                                 default = nil)
  if valid_774398 != nil:
    section.add "X-Amz-Security-Token", valid_774398
  var valid_774399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774399 = validateParameter(valid_774399, JString, required = false,
                                 default = nil)
  if valid_774399 != nil:
    section.add "X-Amz-Content-Sha256", valid_774399
  var valid_774400 = header.getOrDefault("X-Amz-Algorithm")
  valid_774400 = validateParameter(valid_774400, JString, required = false,
                                 default = nil)
  if valid_774400 != nil:
    section.add "X-Amz-Algorithm", valid_774400
  var valid_774401 = header.getOrDefault("X-Amz-Signature")
  valid_774401 = validateParameter(valid_774401, JString, required = false,
                                 default = nil)
  if valid_774401 != nil:
    section.add "X-Amz-Signature", valid_774401
  var valid_774402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774402 = validateParameter(valid_774402, JString, required = false,
                                 default = nil)
  if valid_774402 != nil:
    section.add "X-Amz-SignedHeaders", valid_774402
  var valid_774403 = header.getOrDefault("X-Amz-Credential")
  valid_774403 = validateParameter(valid_774403, JString, required = false,
                                 default = nil)
  if valid_774403 != nil:
    section.add "X-Amz-Credential", valid_774403
  result.add "header", section
  ## parameters in `formData` object:
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  section = newJObject()
  var valid_774404 = formData.getOrDefault("ServiceUpdateStatus")
  valid_774404 = validateParameter(valid_774404, JArray, required = false,
                                 default = nil)
  if valid_774404 != nil:
    section.add "ServiceUpdateStatus", valid_774404
  var valid_774405 = formData.getOrDefault("Marker")
  valid_774405 = validateParameter(valid_774405, JString, required = false,
                                 default = nil)
  if valid_774405 != nil:
    section.add "Marker", valid_774405
  var valid_774406 = formData.getOrDefault("MaxRecords")
  valid_774406 = validateParameter(valid_774406, JInt, required = false, default = nil)
  if valid_774406 != nil:
    section.add "MaxRecords", valid_774406
  var valid_774407 = formData.getOrDefault("ServiceUpdateName")
  valid_774407 = validateParameter(valid_774407, JString, required = false,
                                 default = nil)
  if valid_774407 != nil:
    section.add "ServiceUpdateName", valid_774407
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774408: Call_PostDescribeServiceUpdates_774392; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_774408.validator(path, query, header, formData, body)
  let scheme = call_774408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774408.url(scheme.get, call_774408.host, call_774408.base,
                         call_774408.route, valid.getOrDefault("path"))
  result = hook(call_774408, url, valid)

proc call*(call_774409: Call_PostDescribeServiceUpdates_774392;
          ServiceUpdateStatus: JsonNode = nil; Marker: string = "";
          Action: string = "DescribeServiceUpdates"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; ServiceUpdateName: string = ""): Recallable =
  ## postDescribeServiceUpdates
  ## Returns details of the service updates
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  var query_774410 = newJObject()
  var formData_774411 = newJObject()
  if ServiceUpdateStatus != nil:
    formData_774411.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(formData_774411, "Marker", newJString(Marker))
  add(query_774410, "Action", newJString(Action))
  add(formData_774411, "MaxRecords", newJInt(MaxRecords))
  add(query_774410, "Version", newJString(Version))
  add(formData_774411, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_774409.call(nil, query_774410, nil, formData_774411, nil)

var postDescribeServiceUpdates* = Call_PostDescribeServiceUpdates_774392(
    name: "postDescribeServiceUpdates", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_PostDescribeServiceUpdates_774393, base: "/",
    url: url_PostDescribeServiceUpdates_774394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeServiceUpdates_774373 = ref object of OpenApiRestCall_772597
proc url_GetDescribeServiceUpdates_774375(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeServiceUpdates_774374(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the service updates
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  section = newJObject()
  var valid_774376 = query.getOrDefault("MaxRecords")
  valid_774376 = validateParameter(valid_774376, JInt, required = false, default = nil)
  if valid_774376 != nil:
    section.add "MaxRecords", valid_774376
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774377 = query.getOrDefault("Action")
  valid_774377 = validateParameter(valid_774377, JString, required = true,
                                 default = newJString("DescribeServiceUpdates"))
  if valid_774377 != nil:
    section.add "Action", valid_774377
  var valid_774378 = query.getOrDefault("Marker")
  valid_774378 = validateParameter(valid_774378, JString, required = false,
                                 default = nil)
  if valid_774378 != nil:
    section.add "Marker", valid_774378
  var valid_774379 = query.getOrDefault("ServiceUpdateStatus")
  valid_774379 = validateParameter(valid_774379, JArray, required = false,
                                 default = nil)
  if valid_774379 != nil:
    section.add "ServiceUpdateStatus", valid_774379
  var valid_774380 = query.getOrDefault("Version")
  valid_774380 = validateParameter(valid_774380, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774380 != nil:
    section.add "Version", valid_774380
  var valid_774381 = query.getOrDefault("ServiceUpdateName")
  valid_774381 = validateParameter(valid_774381, JString, required = false,
                                 default = nil)
  if valid_774381 != nil:
    section.add "ServiceUpdateName", valid_774381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774382 = header.getOrDefault("X-Amz-Date")
  valid_774382 = validateParameter(valid_774382, JString, required = false,
                                 default = nil)
  if valid_774382 != nil:
    section.add "X-Amz-Date", valid_774382
  var valid_774383 = header.getOrDefault("X-Amz-Security-Token")
  valid_774383 = validateParameter(valid_774383, JString, required = false,
                                 default = nil)
  if valid_774383 != nil:
    section.add "X-Amz-Security-Token", valid_774383
  var valid_774384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774384 = validateParameter(valid_774384, JString, required = false,
                                 default = nil)
  if valid_774384 != nil:
    section.add "X-Amz-Content-Sha256", valid_774384
  var valid_774385 = header.getOrDefault("X-Amz-Algorithm")
  valid_774385 = validateParameter(valid_774385, JString, required = false,
                                 default = nil)
  if valid_774385 != nil:
    section.add "X-Amz-Algorithm", valid_774385
  var valid_774386 = header.getOrDefault("X-Amz-Signature")
  valid_774386 = validateParameter(valid_774386, JString, required = false,
                                 default = nil)
  if valid_774386 != nil:
    section.add "X-Amz-Signature", valid_774386
  var valid_774387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774387 = validateParameter(valid_774387, JString, required = false,
                                 default = nil)
  if valid_774387 != nil:
    section.add "X-Amz-SignedHeaders", valid_774387
  var valid_774388 = header.getOrDefault("X-Amz-Credential")
  valid_774388 = validateParameter(valid_774388, JString, required = false,
                                 default = nil)
  if valid_774388 != nil:
    section.add "X-Amz-Credential", valid_774388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774389: Call_GetDescribeServiceUpdates_774373; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the service updates
  ## 
  let valid = call_774389.validator(path, query, header, formData, body)
  let scheme = call_774389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774389.url(scheme.get, call_774389.host, call_774389.base,
                         call_774389.route, valid.getOrDefault("path"))
  result = hook(call_774389, url, valid)

proc call*(call_774390: Call_GetDescribeServiceUpdates_774373; MaxRecords: int = 0;
          Action: string = "DescribeServiceUpdates"; Marker: string = "";
          ServiceUpdateStatus: JsonNode = nil; Version: string = "2015-02-02";
          ServiceUpdateName: string = ""): Recallable =
  ## getDescribeServiceUpdates
  ## Returns details of the service updates
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  var query_774391 = newJObject()
  add(query_774391, "MaxRecords", newJInt(MaxRecords))
  add(query_774391, "Action", newJString(Action))
  add(query_774391, "Marker", newJString(Marker))
  if ServiceUpdateStatus != nil:
    query_774391.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_774391, "Version", newJString(Version))
  add(query_774391, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_774390.call(nil, query_774391, nil, nil, nil)

var getDescribeServiceUpdates* = Call_GetDescribeServiceUpdates_774373(
    name: "getDescribeServiceUpdates", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeServiceUpdates",
    validator: validate_GetDescribeServiceUpdates_774374, base: "/",
    url: url_GetDescribeServiceUpdates_774375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSnapshots_774434 = ref object of OpenApiRestCall_772597
proc url_PostDescribeSnapshots_774436(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeSnapshots_774435(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774437 = query.getOrDefault("Action")
  valid_774437 = validateParameter(valid_774437, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_774437 != nil:
    section.add "Action", valid_774437
  var valid_774438 = query.getOrDefault("Version")
  valid_774438 = validateParameter(valid_774438, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774438 != nil:
    section.add "Version", valid_774438
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774439 = header.getOrDefault("X-Amz-Date")
  valid_774439 = validateParameter(valid_774439, JString, required = false,
                                 default = nil)
  if valid_774439 != nil:
    section.add "X-Amz-Date", valid_774439
  var valid_774440 = header.getOrDefault("X-Amz-Security-Token")
  valid_774440 = validateParameter(valid_774440, JString, required = false,
                                 default = nil)
  if valid_774440 != nil:
    section.add "X-Amz-Security-Token", valid_774440
  var valid_774441 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774441 = validateParameter(valid_774441, JString, required = false,
                                 default = nil)
  if valid_774441 != nil:
    section.add "X-Amz-Content-Sha256", valid_774441
  var valid_774442 = header.getOrDefault("X-Amz-Algorithm")
  valid_774442 = validateParameter(valid_774442, JString, required = false,
                                 default = nil)
  if valid_774442 != nil:
    section.add "X-Amz-Algorithm", valid_774442
  var valid_774443 = header.getOrDefault("X-Amz-Signature")
  valid_774443 = validateParameter(valid_774443, JString, required = false,
                                 default = nil)
  if valid_774443 != nil:
    section.add "X-Amz-Signature", valid_774443
  var valid_774444 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774444 = validateParameter(valid_774444, JString, required = false,
                                 default = nil)
  if valid_774444 != nil:
    section.add "X-Amz-SignedHeaders", valid_774444
  var valid_774445 = header.getOrDefault("X-Amz-Credential")
  valid_774445 = validateParameter(valid_774445, JString, required = false,
                                 default = nil)
  if valid_774445 != nil:
    section.add "X-Amz-Credential", valid_774445
  result.add "header", section
  ## parameters in `formData` object:
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  section = newJObject()
  var valid_774446 = formData.getOrDefault("ShowNodeGroupConfig")
  valid_774446 = validateParameter(valid_774446, JBool, required = false, default = nil)
  if valid_774446 != nil:
    section.add "ShowNodeGroupConfig", valid_774446
  var valid_774447 = formData.getOrDefault("ReplicationGroupId")
  valid_774447 = validateParameter(valid_774447, JString, required = false,
                                 default = nil)
  if valid_774447 != nil:
    section.add "ReplicationGroupId", valid_774447
  var valid_774448 = formData.getOrDefault("Marker")
  valid_774448 = validateParameter(valid_774448, JString, required = false,
                                 default = nil)
  if valid_774448 != nil:
    section.add "Marker", valid_774448
  var valid_774449 = formData.getOrDefault("MaxRecords")
  valid_774449 = validateParameter(valid_774449, JInt, required = false, default = nil)
  if valid_774449 != nil:
    section.add "MaxRecords", valid_774449
  var valid_774450 = formData.getOrDefault("SnapshotName")
  valid_774450 = validateParameter(valid_774450, JString, required = false,
                                 default = nil)
  if valid_774450 != nil:
    section.add "SnapshotName", valid_774450
  var valid_774451 = formData.getOrDefault("CacheClusterId")
  valid_774451 = validateParameter(valid_774451, JString, required = false,
                                 default = nil)
  if valid_774451 != nil:
    section.add "CacheClusterId", valid_774451
  var valid_774452 = formData.getOrDefault("SnapshotSource")
  valid_774452 = validateParameter(valid_774452, JString, required = false,
                                 default = nil)
  if valid_774452 != nil:
    section.add "SnapshotSource", valid_774452
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774453: Call_PostDescribeSnapshots_774434; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_774453.validator(path, query, header, formData, body)
  let scheme = call_774453.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774453.url(scheme.get, call_774453.host, call_774453.base,
                         call_774453.route, valid.getOrDefault("path"))
  result = hook(call_774453, url, valid)

proc call*(call_774454: Call_PostDescribeSnapshots_774434;
          ShowNodeGroupConfig: bool = false; ReplicationGroupId: string = "";
          Marker: string = ""; Action: string = "DescribeSnapshots";
          MaxRecords: int = 0; Version: string = "2015-02-02";
          SnapshotName: string = ""; CacheClusterId: string = "";
          SnapshotSource: string = ""): Recallable =
  ## postDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   Version: string (required)
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  var query_774455 = newJObject()
  var formData_774456 = newJObject()
  add(formData_774456, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(formData_774456, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_774456, "Marker", newJString(Marker))
  add(query_774455, "Action", newJString(Action))
  add(formData_774456, "MaxRecords", newJInt(MaxRecords))
  add(query_774455, "Version", newJString(Version))
  add(formData_774456, "SnapshotName", newJString(SnapshotName))
  add(formData_774456, "CacheClusterId", newJString(CacheClusterId))
  add(formData_774456, "SnapshotSource", newJString(SnapshotSource))
  result = call_774454.call(nil, query_774455, nil, formData_774456, nil)

var postDescribeSnapshots* = Call_PostDescribeSnapshots_774434(
    name: "postDescribeSnapshots", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_PostDescribeSnapshots_774435, base: "/",
    url: url_PostDescribeSnapshots_774436, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSnapshots_774412 = ref object of OpenApiRestCall_772597
proc url_GetDescribeSnapshots_774414(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeSnapshots_774413(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: JBool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   SnapshotName: JString
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: JString
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: JString (required)
  ##   SnapshotSource: JString
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  section = newJObject()
  var valid_774415 = query.getOrDefault("CacheClusterId")
  valid_774415 = validateParameter(valid_774415, JString, required = false,
                                 default = nil)
  if valid_774415 != nil:
    section.add "CacheClusterId", valid_774415
  var valid_774416 = query.getOrDefault("MaxRecords")
  valid_774416 = validateParameter(valid_774416, JInt, required = false, default = nil)
  if valid_774416 != nil:
    section.add "MaxRecords", valid_774416
  var valid_774417 = query.getOrDefault("ShowNodeGroupConfig")
  valid_774417 = validateParameter(valid_774417, JBool, required = false, default = nil)
  if valid_774417 != nil:
    section.add "ShowNodeGroupConfig", valid_774417
  var valid_774418 = query.getOrDefault("SnapshotName")
  valid_774418 = validateParameter(valid_774418, JString, required = false,
                                 default = nil)
  if valid_774418 != nil:
    section.add "SnapshotName", valid_774418
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774419 = query.getOrDefault("Action")
  valid_774419 = validateParameter(valid_774419, JString, required = true,
                                 default = newJString("DescribeSnapshots"))
  if valid_774419 != nil:
    section.add "Action", valid_774419
  var valid_774420 = query.getOrDefault("Marker")
  valid_774420 = validateParameter(valid_774420, JString, required = false,
                                 default = nil)
  if valid_774420 != nil:
    section.add "Marker", valid_774420
  var valid_774421 = query.getOrDefault("ReplicationGroupId")
  valid_774421 = validateParameter(valid_774421, JString, required = false,
                                 default = nil)
  if valid_774421 != nil:
    section.add "ReplicationGroupId", valid_774421
  var valid_774422 = query.getOrDefault("Version")
  valid_774422 = validateParameter(valid_774422, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774422 != nil:
    section.add "Version", valid_774422
  var valid_774423 = query.getOrDefault("SnapshotSource")
  valid_774423 = validateParameter(valid_774423, JString, required = false,
                                 default = nil)
  if valid_774423 != nil:
    section.add "SnapshotSource", valid_774423
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774424 = header.getOrDefault("X-Amz-Date")
  valid_774424 = validateParameter(valid_774424, JString, required = false,
                                 default = nil)
  if valid_774424 != nil:
    section.add "X-Amz-Date", valid_774424
  var valid_774425 = header.getOrDefault("X-Amz-Security-Token")
  valid_774425 = validateParameter(valid_774425, JString, required = false,
                                 default = nil)
  if valid_774425 != nil:
    section.add "X-Amz-Security-Token", valid_774425
  var valid_774426 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774426 = validateParameter(valid_774426, JString, required = false,
                                 default = nil)
  if valid_774426 != nil:
    section.add "X-Amz-Content-Sha256", valid_774426
  var valid_774427 = header.getOrDefault("X-Amz-Algorithm")
  valid_774427 = validateParameter(valid_774427, JString, required = false,
                                 default = nil)
  if valid_774427 != nil:
    section.add "X-Amz-Algorithm", valid_774427
  var valid_774428 = header.getOrDefault("X-Amz-Signature")
  valid_774428 = validateParameter(valid_774428, JString, required = false,
                                 default = nil)
  if valid_774428 != nil:
    section.add "X-Amz-Signature", valid_774428
  var valid_774429 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774429 = validateParameter(valid_774429, JString, required = false,
                                 default = nil)
  if valid_774429 != nil:
    section.add "X-Amz-SignedHeaders", valid_774429
  var valid_774430 = header.getOrDefault("X-Amz-Credential")
  valid_774430 = validateParameter(valid_774430, JString, required = false,
                                 default = nil)
  if valid_774430 != nil:
    section.add "X-Amz-Credential", valid_774430
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774431: Call_GetDescribeSnapshots_774412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_774431.validator(path, query, header, formData, body)
  let scheme = call_774431.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774431.url(scheme.get, call_774431.host, call_774431.base,
                         call_774431.route, valid.getOrDefault("path"))
  result = hook(call_774431, url, valid)

proc call*(call_774432: Call_GetDescribeSnapshots_774412;
          CacheClusterId: string = ""; MaxRecords: int = 0;
          ShowNodeGroupConfig: bool = false; SnapshotName: string = "";
          Action: string = "DescribeSnapshots"; Marker: string = "";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02";
          SnapshotSource: string = ""): Recallable =
  ## getDescribeSnapshots
  ## <p>Returns information about cluster or replication group snapshots. By default, <code>DescribeSnapshots</code> lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.</p> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   CacheClusterId: string
  ##                 : A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 50</p> <p>Constraints: minimum 20; maximum 50.</p>
  ##   ShowNodeGroupConfig: bool
  ##                      : A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
  ##   SnapshotName: string
  ##               : A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ReplicationGroupId: string
  ##                     : A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
  ##   Version: string (required)
  ##   SnapshotSource: string
  ##                 : If set to <code>system</code>, the output shows snapshots that were automatically created by ElastiCache. If set to <code>user</code> the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
  var query_774433 = newJObject()
  add(query_774433, "CacheClusterId", newJString(CacheClusterId))
  add(query_774433, "MaxRecords", newJInt(MaxRecords))
  add(query_774433, "ShowNodeGroupConfig", newJBool(ShowNodeGroupConfig))
  add(query_774433, "SnapshotName", newJString(SnapshotName))
  add(query_774433, "Action", newJString(Action))
  add(query_774433, "Marker", newJString(Marker))
  add(query_774433, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774433, "Version", newJString(Version))
  add(query_774433, "SnapshotSource", newJString(SnapshotSource))
  result = call_774432.call(nil, query_774433, nil, nil, nil)

var getDescribeSnapshots* = Call_GetDescribeSnapshots_774412(
    name: "getDescribeSnapshots", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeSnapshots",
    validator: validate_GetDescribeSnapshots_774413, base: "/",
    url: url_GetDescribeSnapshots_774414, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeUpdateActions_774481 = ref object of OpenApiRestCall_772597
proc url_PostDescribeUpdateActions_774483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostDescribeUpdateActions_774482(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774484 = query.getOrDefault("Action")
  valid_774484 = validateParameter(valid_774484, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_774484 != nil:
    section.add "Action", valid_774484
  var valid_774485 = query.getOrDefault("Version")
  valid_774485 = validateParameter(valid_774485, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774485 != nil:
    section.add "Version", valid_774485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774486 = header.getOrDefault("X-Amz-Date")
  valid_774486 = validateParameter(valid_774486, JString, required = false,
                                 default = nil)
  if valid_774486 != nil:
    section.add "X-Amz-Date", valid_774486
  var valid_774487 = header.getOrDefault("X-Amz-Security-Token")
  valid_774487 = validateParameter(valid_774487, JString, required = false,
                                 default = nil)
  if valid_774487 != nil:
    section.add "X-Amz-Security-Token", valid_774487
  var valid_774488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774488 = validateParameter(valid_774488, JString, required = false,
                                 default = nil)
  if valid_774488 != nil:
    section.add "X-Amz-Content-Sha256", valid_774488
  var valid_774489 = header.getOrDefault("X-Amz-Algorithm")
  valid_774489 = validateParameter(valid_774489, JString, required = false,
                                 default = nil)
  if valid_774489 != nil:
    section.add "X-Amz-Algorithm", valid_774489
  var valid_774490 = header.getOrDefault("X-Amz-Signature")
  valid_774490 = validateParameter(valid_774490, JString, required = false,
                                 default = nil)
  if valid_774490 != nil:
    section.add "X-Amz-Signature", valid_774490
  var valid_774491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774491 = validateParameter(valid_774491, JString, required = false,
                                 default = nil)
  if valid_774491 != nil:
    section.add "X-Amz-SignedHeaders", valid_774491
  var valid_774492 = header.getOrDefault("X-Amz-Credential")
  valid_774492 = validateParameter(valid_774492, JString, required = false,
                                 default = nil)
  if valid_774492 != nil:
    section.add "X-Amz-Credential", valid_774492
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  section = newJObject()
  var valid_774493 = formData.getOrDefault("ReplicationGroupIds")
  valid_774493 = validateParameter(valid_774493, JArray, required = false,
                                 default = nil)
  if valid_774493 != nil:
    section.add "ReplicationGroupIds", valid_774493
  var valid_774494 = formData.getOrDefault("ServiceUpdateStatus")
  valid_774494 = validateParameter(valid_774494, JArray, required = false,
                                 default = nil)
  if valid_774494 != nil:
    section.add "ServiceUpdateStatus", valid_774494
  var valid_774495 = formData.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_774495 = validateParameter(valid_774495, JBool, required = false, default = nil)
  if valid_774495 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_774495
  var valid_774496 = formData.getOrDefault("UpdateActionStatus")
  valid_774496 = validateParameter(valid_774496, JArray, required = false,
                                 default = nil)
  if valid_774496 != nil:
    section.add "UpdateActionStatus", valid_774496
  var valid_774497 = formData.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_774497 = validateParameter(valid_774497, JString, required = false,
                                 default = nil)
  if valid_774497 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_774497
  var valid_774498 = formData.getOrDefault("Marker")
  valid_774498 = validateParameter(valid_774498, JString, required = false,
                                 default = nil)
  if valid_774498 != nil:
    section.add "Marker", valid_774498
  var valid_774499 = formData.getOrDefault("MaxRecords")
  valid_774499 = validateParameter(valid_774499, JInt, required = false, default = nil)
  if valid_774499 != nil:
    section.add "MaxRecords", valid_774499
  var valid_774500 = formData.getOrDefault("ServiceUpdateName")
  valid_774500 = validateParameter(valid_774500, JString, required = false,
                                 default = nil)
  if valid_774500 != nil:
    section.add "ServiceUpdateName", valid_774500
  var valid_774501 = formData.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_774501 = validateParameter(valid_774501, JString, required = false,
                                 default = nil)
  if valid_774501 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_774501
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774502: Call_PostDescribeUpdateActions_774481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_774502.validator(path, query, header, formData, body)
  let scheme = call_774502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774502.url(scheme.get, call_774502.host, call_774502.base,
                         call_774502.route, valid.getOrDefault("path"))
  result = hook(call_774502, url, valid)

proc call*(call_774503: Call_PostDescribeUpdateActions_774481;
          ReplicationGroupIds: JsonNode = nil; ServiceUpdateStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          UpdateActionStatus: JsonNode = nil;
          ServiceUpdateTimeRangeEndTime: string = ""; Marker: string = "";
          Action: string = "DescribeUpdateActions"; MaxRecords: int = 0;
          Version: string = "2015-02-02"; ServiceUpdateName: string = "";
          ServiceUpdateTimeRangeStartTime: string = ""): Recallable =
  ## postDescribeUpdateActions
  ## Returns details of the update actions 
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  var query_774504 = newJObject()
  var formData_774505 = newJObject()
  if ReplicationGroupIds != nil:
    formData_774505.add "ReplicationGroupIds", ReplicationGroupIds
  if ServiceUpdateStatus != nil:
    formData_774505.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(formData_774505, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  if UpdateActionStatus != nil:
    formData_774505.add "UpdateActionStatus", UpdateActionStatus
  add(formData_774505, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  add(formData_774505, "Marker", newJString(Marker))
  add(query_774504, "Action", newJString(Action))
  add(formData_774505, "MaxRecords", newJInt(MaxRecords))
  add(query_774504, "Version", newJString(Version))
  add(formData_774505, "ServiceUpdateName", newJString(ServiceUpdateName))
  add(formData_774505, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  result = call_774503.call(nil, query_774504, nil, formData_774505, nil)

var postDescribeUpdateActions* = Call_PostDescribeUpdateActions_774481(
    name: "postDescribeUpdateActions", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_PostDescribeUpdateActions_774482, base: "/",
    url: url_PostDescribeUpdateActions_774483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeUpdateActions_774457 = ref object of OpenApiRestCall_772597
proc url_GetDescribeUpdateActions_774459(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetDescribeUpdateActions_774458(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns details of the update actions 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: JBool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateTimeRange.StartTime: JString
  ##                                   : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   ServiceUpdateTimeRange.EndTime: JString
  ##                                 : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: JString (required)
  ##   ServiceUpdateName: JString
  ##                    : The unique ID of the service update
  section = newJObject()
  var valid_774460 = query.getOrDefault("MaxRecords")
  valid_774460 = validateParameter(valid_774460, JInt, required = false, default = nil)
  if valid_774460 != nil:
    section.add "MaxRecords", valid_774460
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774461 = query.getOrDefault("Action")
  valid_774461 = validateParameter(valid_774461, JString, required = true,
                                 default = newJString("DescribeUpdateActions"))
  if valid_774461 != nil:
    section.add "Action", valid_774461
  var valid_774462 = query.getOrDefault("Marker")
  valid_774462 = validateParameter(valid_774462, JString, required = false,
                                 default = nil)
  if valid_774462 != nil:
    section.add "Marker", valid_774462
  var valid_774463 = query.getOrDefault("UpdateActionStatus")
  valid_774463 = validateParameter(valid_774463, JArray, required = false,
                                 default = nil)
  if valid_774463 != nil:
    section.add "UpdateActionStatus", valid_774463
  var valid_774464 = query.getOrDefault("ShowNodeLevelUpdateStatus")
  valid_774464 = validateParameter(valid_774464, JBool, required = false, default = nil)
  if valid_774464 != nil:
    section.add "ShowNodeLevelUpdateStatus", valid_774464
  var valid_774465 = query.getOrDefault("ServiceUpdateTimeRange.StartTime")
  valid_774465 = validateParameter(valid_774465, JString, required = false,
                                 default = nil)
  if valid_774465 != nil:
    section.add "ServiceUpdateTimeRange.StartTime", valid_774465
  var valid_774466 = query.getOrDefault("ServiceUpdateTimeRange.EndTime")
  valid_774466 = validateParameter(valid_774466, JString, required = false,
                                 default = nil)
  if valid_774466 != nil:
    section.add "ServiceUpdateTimeRange.EndTime", valid_774466
  var valid_774467 = query.getOrDefault("ReplicationGroupIds")
  valid_774467 = validateParameter(valid_774467, JArray, required = false,
                                 default = nil)
  if valid_774467 != nil:
    section.add "ReplicationGroupIds", valid_774467
  var valid_774468 = query.getOrDefault("ServiceUpdateStatus")
  valid_774468 = validateParameter(valid_774468, JArray, required = false,
                                 default = nil)
  if valid_774468 != nil:
    section.add "ServiceUpdateStatus", valid_774468
  var valid_774469 = query.getOrDefault("Version")
  valid_774469 = validateParameter(valid_774469, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774469 != nil:
    section.add "Version", valid_774469
  var valid_774470 = query.getOrDefault("ServiceUpdateName")
  valid_774470 = validateParameter(valid_774470, JString, required = false,
                                 default = nil)
  if valid_774470 != nil:
    section.add "ServiceUpdateName", valid_774470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774471 = header.getOrDefault("X-Amz-Date")
  valid_774471 = validateParameter(valid_774471, JString, required = false,
                                 default = nil)
  if valid_774471 != nil:
    section.add "X-Amz-Date", valid_774471
  var valid_774472 = header.getOrDefault("X-Amz-Security-Token")
  valid_774472 = validateParameter(valid_774472, JString, required = false,
                                 default = nil)
  if valid_774472 != nil:
    section.add "X-Amz-Security-Token", valid_774472
  var valid_774473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774473 = validateParameter(valid_774473, JString, required = false,
                                 default = nil)
  if valid_774473 != nil:
    section.add "X-Amz-Content-Sha256", valid_774473
  var valid_774474 = header.getOrDefault("X-Amz-Algorithm")
  valid_774474 = validateParameter(valid_774474, JString, required = false,
                                 default = nil)
  if valid_774474 != nil:
    section.add "X-Amz-Algorithm", valid_774474
  var valid_774475 = header.getOrDefault("X-Amz-Signature")
  valid_774475 = validateParameter(valid_774475, JString, required = false,
                                 default = nil)
  if valid_774475 != nil:
    section.add "X-Amz-Signature", valid_774475
  var valid_774476 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774476 = validateParameter(valid_774476, JString, required = false,
                                 default = nil)
  if valid_774476 != nil:
    section.add "X-Amz-SignedHeaders", valid_774476
  var valid_774477 = header.getOrDefault("X-Amz-Credential")
  valid_774477 = validateParameter(valid_774477, JString, required = false,
                                 default = nil)
  if valid_774477 != nil:
    section.add "X-Amz-Credential", valid_774477
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774478: Call_GetDescribeUpdateActions_774457; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns details of the update actions 
  ## 
  let valid = call_774478.validator(path, query, header, formData, body)
  let scheme = call_774478.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774478.url(scheme.get, call_774478.host, call_774478.base,
                         call_774478.route, valid.getOrDefault("path"))
  result = hook(call_774478, url, valid)

proc call*(call_774479: Call_GetDescribeUpdateActions_774457; MaxRecords: int = 0;
          Action: string = "DescribeUpdateActions"; Marker: string = "";
          UpdateActionStatus: JsonNode = nil;
          ShowNodeLevelUpdateStatus: bool = false;
          ServiceUpdateTimeRangeStartTime: string = "";
          ServiceUpdateTimeRangeEndTime: string = "";
          ReplicationGroupIds: JsonNode = nil; ServiceUpdateStatus: JsonNode = nil;
          Version: string = "2015-02-02"; ServiceUpdateName: string = ""): Recallable =
  ## getDescribeUpdateActions
  ## Returns details of the update actions 
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   UpdateActionStatus: JArray
  ##                     : The status of the update action.
  ##   ShowNodeLevelUpdateStatus: bool
  ##                            : Dictates whether to include node level update status in the response 
  ##   ServiceUpdateTimeRangeStartTime: string
  ##                                  : Filters update actions from the service updates that are in available status during the time range.
  ## The start time of the time range filter
  ##   ServiceUpdateTimeRangeEndTime: string
  ##                                : Filters update actions from the service updates that are in available status during the time range.
  ## The end time of the time range filter
  ##   ReplicationGroupIds: JArray
  ##                      : The replication group IDs
  ##   ServiceUpdateStatus: JArray
  ##                      : The status of the service update
  ##   Version: string (required)
  ##   ServiceUpdateName: string
  ##                    : The unique ID of the service update
  var query_774480 = newJObject()
  add(query_774480, "MaxRecords", newJInt(MaxRecords))
  add(query_774480, "Action", newJString(Action))
  add(query_774480, "Marker", newJString(Marker))
  if UpdateActionStatus != nil:
    query_774480.add "UpdateActionStatus", UpdateActionStatus
  add(query_774480, "ShowNodeLevelUpdateStatus",
      newJBool(ShowNodeLevelUpdateStatus))
  add(query_774480, "ServiceUpdateTimeRange.StartTime",
      newJString(ServiceUpdateTimeRangeStartTime))
  add(query_774480, "ServiceUpdateTimeRange.EndTime",
      newJString(ServiceUpdateTimeRangeEndTime))
  if ReplicationGroupIds != nil:
    query_774480.add "ReplicationGroupIds", ReplicationGroupIds
  if ServiceUpdateStatus != nil:
    query_774480.add "ServiceUpdateStatus", ServiceUpdateStatus
  add(query_774480, "Version", newJString(Version))
  add(query_774480, "ServiceUpdateName", newJString(ServiceUpdateName))
  result = call_774479.call(nil, query_774480, nil, nil, nil)

var getDescribeUpdateActions* = Call_GetDescribeUpdateActions_774457(
    name: "getDescribeUpdateActions", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=DescribeUpdateActions",
    validator: validate_GetDescribeUpdateActions_774458, base: "/",
    url: url_GetDescribeUpdateActions_774459, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostIncreaseReplicaCount_774525 = ref object of OpenApiRestCall_772597
proc url_PostIncreaseReplicaCount_774527(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostIncreaseReplicaCount_774526(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774528 = query.getOrDefault("Action")
  valid_774528 = validateParameter(valid_774528, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_774528 != nil:
    section.add "Action", valid_774528
  var valid_774529 = query.getOrDefault("Version")
  valid_774529 = validateParameter(valid_774529, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774529 != nil:
    section.add "Version", valid_774529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774530 = header.getOrDefault("X-Amz-Date")
  valid_774530 = validateParameter(valid_774530, JString, required = false,
                                 default = nil)
  if valid_774530 != nil:
    section.add "X-Amz-Date", valid_774530
  var valid_774531 = header.getOrDefault("X-Amz-Security-Token")
  valid_774531 = validateParameter(valid_774531, JString, required = false,
                                 default = nil)
  if valid_774531 != nil:
    section.add "X-Amz-Security-Token", valid_774531
  var valid_774532 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774532 = validateParameter(valid_774532, JString, required = false,
                                 default = nil)
  if valid_774532 != nil:
    section.add "X-Amz-Content-Sha256", valid_774532
  var valid_774533 = header.getOrDefault("X-Amz-Algorithm")
  valid_774533 = validateParameter(valid_774533, JString, required = false,
                                 default = nil)
  if valid_774533 != nil:
    section.add "X-Amz-Algorithm", valid_774533
  var valid_774534 = header.getOrDefault("X-Amz-Signature")
  valid_774534 = validateParameter(valid_774534, JString, required = false,
                                 default = nil)
  if valid_774534 != nil:
    section.add "X-Amz-Signature", valid_774534
  var valid_774535 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774535 = validateParameter(valid_774535, JString, required = false,
                                 default = nil)
  if valid_774535 != nil:
    section.add "X-Amz-SignedHeaders", valid_774535
  var valid_774536 = header.getOrDefault("X-Amz-Credential")
  valid_774536 = validateParameter(valid_774536, JString, required = false,
                                 default = nil)
  if valid_774536 != nil:
    section.add "X-Amz-Credential", valid_774536
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_774537 = formData.getOrDefault("ApplyImmediately")
  valid_774537 = validateParameter(valid_774537, JBool, required = true, default = nil)
  if valid_774537 != nil:
    section.add "ApplyImmediately", valid_774537
  var valid_774538 = formData.getOrDefault("ReplicationGroupId")
  valid_774538 = validateParameter(valid_774538, JString, required = true,
                                 default = nil)
  if valid_774538 != nil:
    section.add "ReplicationGroupId", valid_774538
  var valid_774539 = formData.getOrDefault("NewReplicaCount")
  valid_774539 = validateParameter(valid_774539, JInt, required = false, default = nil)
  if valid_774539 != nil:
    section.add "NewReplicaCount", valid_774539
  var valid_774540 = formData.getOrDefault("ReplicaConfiguration")
  valid_774540 = validateParameter(valid_774540, JArray, required = false,
                                 default = nil)
  if valid_774540 != nil:
    section.add "ReplicaConfiguration", valid_774540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774541: Call_PostIncreaseReplicaCount_774525; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_774541.validator(path, query, header, formData, body)
  let scheme = call_774541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774541.url(scheme.get, call_774541.host, call_774541.base,
                         call_774541.route, valid.getOrDefault("path"))
  result = hook(call_774541, url, valid)

proc call*(call_774542: Call_PostIncreaseReplicaCount_774525;
          ApplyImmediately: bool; ReplicationGroupId: string;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          ReplicaConfiguration: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Version: string (required)
  var query_774543 = newJObject()
  var formData_774544 = newJObject()
  add(formData_774544, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_774544, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774543, "Action", newJString(Action))
  add(formData_774544, "NewReplicaCount", newJInt(NewReplicaCount))
  if ReplicaConfiguration != nil:
    formData_774544.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_774543, "Version", newJString(Version))
  result = call_774542.call(nil, query_774543, nil, formData_774544, nil)

var postIncreaseReplicaCount* = Call_PostIncreaseReplicaCount_774525(
    name: "postIncreaseReplicaCount", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_PostIncreaseReplicaCount_774526, base: "/",
    url: url_PostIncreaseReplicaCount_774527, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetIncreaseReplicaCount_774506 = ref object of OpenApiRestCall_772597
proc url_GetIncreaseReplicaCount_774508(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetIncreaseReplicaCount_774507(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: JString (required)
  ##   NewReplicaCount: JInt
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  section = newJObject()
  var valid_774509 = query.getOrDefault("ReplicaConfiguration")
  valid_774509 = validateParameter(valid_774509, JArray, required = false,
                                 default = nil)
  if valid_774509 != nil:
    section.add "ReplicaConfiguration", valid_774509
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774510 = query.getOrDefault("Action")
  valid_774510 = validateParameter(valid_774510, JString, required = true,
                                 default = newJString("IncreaseReplicaCount"))
  if valid_774510 != nil:
    section.add "Action", valid_774510
  var valid_774511 = query.getOrDefault("NewReplicaCount")
  valid_774511 = validateParameter(valid_774511, JInt, required = false, default = nil)
  if valid_774511 != nil:
    section.add "NewReplicaCount", valid_774511
  var valid_774512 = query.getOrDefault("ReplicationGroupId")
  valid_774512 = validateParameter(valid_774512, JString, required = true,
                                 default = nil)
  if valid_774512 != nil:
    section.add "ReplicationGroupId", valid_774512
  var valid_774513 = query.getOrDefault("Version")
  valid_774513 = validateParameter(valid_774513, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774513 != nil:
    section.add "Version", valid_774513
  var valid_774514 = query.getOrDefault("ApplyImmediately")
  valid_774514 = validateParameter(valid_774514, JBool, required = true, default = nil)
  if valid_774514 != nil:
    section.add "ApplyImmediately", valid_774514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774515 = header.getOrDefault("X-Amz-Date")
  valid_774515 = validateParameter(valid_774515, JString, required = false,
                                 default = nil)
  if valid_774515 != nil:
    section.add "X-Amz-Date", valid_774515
  var valid_774516 = header.getOrDefault("X-Amz-Security-Token")
  valid_774516 = validateParameter(valid_774516, JString, required = false,
                                 default = nil)
  if valid_774516 != nil:
    section.add "X-Amz-Security-Token", valid_774516
  var valid_774517 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774517 = validateParameter(valid_774517, JString, required = false,
                                 default = nil)
  if valid_774517 != nil:
    section.add "X-Amz-Content-Sha256", valid_774517
  var valid_774518 = header.getOrDefault("X-Amz-Algorithm")
  valid_774518 = validateParameter(valid_774518, JString, required = false,
                                 default = nil)
  if valid_774518 != nil:
    section.add "X-Amz-Algorithm", valid_774518
  var valid_774519 = header.getOrDefault("X-Amz-Signature")
  valid_774519 = validateParameter(valid_774519, JString, required = false,
                                 default = nil)
  if valid_774519 != nil:
    section.add "X-Amz-Signature", valid_774519
  var valid_774520 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774520 = validateParameter(valid_774520, JString, required = false,
                                 default = nil)
  if valid_774520 != nil:
    section.add "X-Amz-SignedHeaders", valid_774520
  var valid_774521 = header.getOrDefault("X-Amz-Credential")
  valid_774521 = validateParameter(valid_774521, JString, required = false,
                                 default = nil)
  if valid_774521 != nil:
    section.add "X-Amz-Credential", valid_774521
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774522: Call_GetIncreaseReplicaCount_774506; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ## 
  let valid = call_774522.validator(path, query, header, formData, body)
  let scheme = call_774522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774522.url(scheme.get, call_774522.host, call_774522.base,
                         call_774522.route, valid.getOrDefault("path"))
  result = hook(call_774522, url, valid)

proc call*(call_774523: Call_GetIncreaseReplicaCount_774506;
          ReplicationGroupId: string; ApplyImmediately: bool;
          ReplicaConfiguration: JsonNode = nil;
          Action: string = "IncreaseReplicaCount"; NewReplicaCount: int = 0;
          Version: string = "2015-02-02"): Recallable =
  ## getIncreaseReplicaCount
  ## Dynamically increases the number of replics in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
  ##   ReplicaConfiguration: JArray
  ##                       : A list of <code>ConfigureShard</code> objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The <code>ConfigureShard</code> has three members: <code>NewReplicaCount</code>, <code>NodeGroupId</code>, and <code>PreferredAvailabilityZones</code>.
  ##   Action: string (required)
  ##   NewReplicaCount: int
  ##                  : The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group's node groups.
  ##   ReplicationGroupId: string (required)
  ##                     : The id of the replication group to which you want to add replica nodes.
  ##   Version: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : If <code>True</code>, the number of replica nodes is increased immediately. <code>ApplyImmediately=False</code> is not currently supported.
  var query_774524 = newJObject()
  if ReplicaConfiguration != nil:
    query_774524.add "ReplicaConfiguration", ReplicaConfiguration
  add(query_774524, "Action", newJString(Action))
  add(query_774524, "NewReplicaCount", newJInt(NewReplicaCount))
  add(query_774524, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774524, "Version", newJString(Version))
  add(query_774524, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_774523.call(nil, query_774524, nil, nil, nil)

var getIncreaseReplicaCount* = Call_GetIncreaseReplicaCount_774506(
    name: "getIncreaseReplicaCount", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=IncreaseReplicaCount",
    validator: validate_GetIncreaseReplicaCount_774507, base: "/",
    url: url_GetIncreaseReplicaCount_774508, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListAllowedNodeTypeModifications_774562 = ref object of OpenApiRestCall_772597
proc url_PostListAllowedNodeTypeModifications_774564(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListAllowedNodeTypeModifications_774563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774565 = query.getOrDefault("Action")
  valid_774565 = validateParameter(valid_774565, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_774565 != nil:
    section.add "Action", valid_774565
  var valid_774566 = query.getOrDefault("Version")
  valid_774566 = validateParameter(valid_774566, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774566 != nil:
    section.add "Version", valid_774566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774567 = header.getOrDefault("X-Amz-Date")
  valid_774567 = validateParameter(valid_774567, JString, required = false,
                                 default = nil)
  if valid_774567 != nil:
    section.add "X-Amz-Date", valid_774567
  var valid_774568 = header.getOrDefault("X-Amz-Security-Token")
  valid_774568 = validateParameter(valid_774568, JString, required = false,
                                 default = nil)
  if valid_774568 != nil:
    section.add "X-Amz-Security-Token", valid_774568
  var valid_774569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774569 = validateParameter(valid_774569, JString, required = false,
                                 default = nil)
  if valid_774569 != nil:
    section.add "X-Amz-Content-Sha256", valid_774569
  var valid_774570 = header.getOrDefault("X-Amz-Algorithm")
  valid_774570 = validateParameter(valid_774570, JString, required = false,
                                 default = nil)
  if valid_774570 != nil:
    section.add "X-Amz-Algorithm", valid_774570
  var valid_774571 = header.getOrDefault("X-Amz-Signature")
  valid_774571 = validateParameter(valid_774571, JString, required = false,
                                 default = nil)
  if valid_774571 != nil:
    section.add "X-Amz-Signature", valid_774571
  var valid_774572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774572 = validateParameter(valid_774572, JString, required = false,
                                 default = nil)
  if valid_774572 != nil:
    section.add "X-Amz-SignedHeaders", valid_774572
  var valid_774573 = header.getOrDefault("X-Amz-Credential")
  valid_774573 = validateParameter(valid_774573, JString, required = false,
                                 default = nil)
  if valid_774573 != nil:
    section.add "X-Amz-Credential", valid_774573
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  section = newJObject()
  var valid_774574 = formData.getOrDefault("ReplicationGroupId")
  valid_774574 = validateParameter(valid_774574, JString, required = false,
                                 default = nil)
  if valid_774574 != nil:
    section.add "ReplicationGroupId", valid_774574
  var valid_774575 = formData.getOrDefault("CacheClusterId")
  valid_774575 = validateParameter(valid_774575, JString, required = false,
                                 default = nil)
  if valid_774575 != nil:
    section.add "CacheClusterId", valid_774575
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774576: Call_PostListAllowedNodeTypeModifications_774562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_774576.validator(path, query, header, formData, body)
  let scheme = call_774576.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774576.url(scheme.get, call_774576.host, call_774576.base,
                         call_774576.route, valid.getOrDefault("path"))
  result = hook(call_774576, url, valid)

proc call*(call_774577: Call_PostListAllowedNodeTypeModifications_774562;
          ReplicationGroupId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          Version: string = "2015-02-02"; CacheClusterId: string = ""): Recallable =
  ## postListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  var query_774578 = newJObject()
  var formData_774579 = newJObject()
  add(formData_774579, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774578, "Action", newJString(Action))
  add(query_774578, "Version", newJString(Version))
  add(formData_774579, "CacheClusterId", newJString(CacheClusterId))
  result = call_774577.call(nil, query_774578, nil, formData_774579, nil)

var postListAllowedNodeTypeModifications* = Call_PostListAllowedNodeTypeModifications_774562(
    name: "postListAllowedNodeTypeModifications", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_PostListAllowedNodeTypeModifications_774563, base: "/",
    url: url_PostListAllowedNodeTypeModifications_774564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListAllowedNodeTypeModifications_774545 = ref object of OpenApiRestCall_772597
proc url_GetListAllowedNodeTypeModifications_774547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListAllowedNodeTypeModifications_774546(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774548 = query.getOrDefault("CacheClusterId")
  valid_774548 = validateParameter(valid_774548, JString, required = false,
                                 default = nil)
  if valid_774548 != nil:
    section.add "CacheClusterId", valid_774548
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774549 = query.getOrDefault("Action")
  valid_774549 = validateParameter(valid_774549, JString, required = true, default = newJString(
      "ListAllowedNodeTypeModifications"))
  if valid_774549 != nil:
    section.add "Action", valid_774549
  var valid_774550 = query.getOrDefault("ReplicationGroupId")
  valid_774550 = validateParameter(valid_774550, JString, required = false,
                                 default = nil)
  if valid_774550 != nil:
    section.add "ReplicationGroupId", valid_774550
  var valid_774551 = query.getOrDefault("Version")
  valid_774551 = validateParameter(valid_774551, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774551 != nil:
    section.add "Version", valid_774551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774552 = header.getOrDefault("X-Amz-Date")
  valid_774552 = validateParameter(valid_774552, JString, required = false,
                                 default = nil)
  if valid_774552 != nil:
    section.add "X-Amz-Date", valid_774552
  var valid_774553 = header.getOrDefault("X-Amz-Security-Token")
  valid_774553 = validateParameter(valid_774553, JString, required = false,
                                 default = nil)
  if valid_774553 != nil:
    section.add "X-Amz-Security-Token", valid_774553
  var valid_774554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774554 = validateParameter(valid_774554, JString, required = false,
                                 default = nil)
  if valid_774554 != nil:
    section.add "X-Amz-Content-Sha256", valid_774554
  var valid_774555 = header.getOrDefault("X-Amz-Algorithm")
  valid_774555 = validateParameter(valid_774555, JString, required = false,
                                 default = nil)
  if valid_774555 != nil:
    section.add "X-Amz-Algorithm", valid_774555
  var valid_774556 = header.getOrDefault("X-Amz-Signature")
  valid_774556 = validateParameter(valid_774556, JString, required = false,
                                 default = nil)
  if valid_774556 != nil:
    section.add "X-Amz-Signature", valid_774556
  var valid_774557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774557 = validateParameter(valid_774557, JString, required = false,
                                 default = nil)
  if valid_774557 != nil:
    section.add "X-Amz-SignedHeaders", valid_774557
  var valid_774558 = header.getOrDefault("X-Amz-Credential")
  valid_774558 = validateParameter(valid_774558, JString, required = false,
                                 default = nil)
  if valid_774558 != nil:
    section.add "X-Amz-Credential", valid_774558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774559: Call_GetListAllowedNodeTypeModifications_774545;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ## 
  let valid = call_774559.validator(path, query, header, formData, body)
  let scheme = call_774559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774559.url(scheme.get, call_774559.host, call_774559.base,
                         call_774559.route, valid.getOrDefault("path"))
  result = hook(call_774559, url, valid)

proc call*(call_774560: Call_GetListAllowedNodeTypeModifications_774545;
          CacheClusterId: string = "";
          Action: string = "ListAllowedNodeTypeModifications";
          ReplicationGroupId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getListAllowedNodeTypeModifications
  ## <p>Lists all available node types that you can scale your Redis cluster's or replication group's current node type.</p> <p>When you use the <code>ModifyCacheCluster</code> or <code>ModifyReplicationGroup</code> operations to scale your cluster or replication group, the value of the <code>CacheNodeType</code> parameter must be one of the node types returned by this operation.</p>
  ##   CacheClusterId: string
  ##                 : <p>The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Action: string (required)
  ##   ReplicationGroupId: string
  ##                     : <p>The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.</p> <important> <p>You must provide a value for either the <code>CacheClusterId</code> or the <code>ReplicationGroupId</code>.</p> </important>
  ##   Version: string (required)
  var query_774561 = newJObject()
  add(query_774561, "CacheClusterId", newJString(CacheClusterId))
  add(query_774561, "Action", newJString(Action))
  add(query_774561, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774561, "Version", newJString(Version))
  result = call_774560.call(nil, query_774561, nil, nil, nil)

var getListAllowedNodeTypeModifications* = Call_GetListAllowedNodeTypeModifications_774545(
    name: "getListAllowedNodeTypeModifications", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ListAllowedNodeTypeModifications",
    validator: validate_GetListAllowedNodeTypeModifications_774546, base: "/",
    url: url_GetListAllowedNodeTypeModifications_774547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_774596 = ref object of OpenApiRestCall_772597
proc url_PostListTagsForResource_774598(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostListTagsForResource_774597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774599 = query.getOrDefault("Action")
  valid_774599 = validateParameter(valid_774599, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_774599 != nil:
    section.add "Action", valid_774599
  var valid_774600 = query.getOrDefault("Version")
  valid_774600 = validateParameter(valid_774600, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774600 != nil:
    section.add "Version", valid_774600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774601 = header.getOrDefault("X-Amz-Date")
  valid_774601 = validateParameter(valid_774601, JString, required = false,
                                 default = nil)
  if valid_774601 != nil:
    section.add "X-Amz-Date", valid_774601
  var valid_774602 = header.getOrDefault("X-Amz-Security-Token")
  valid_774602 = validateParameter(valid_774602, JString, required = false,
                                 default = nil)
  if valid_774602 != nil:
    section.add "X-Amz-Security-Token", valid_774602
  var valid_774603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774603 = validateParameter(valid_774603, JString, required = false,
                                 default = nil)
  if valid_774603 != nil:
    section.add "X-Amz-Content-Sha256", valid_774603
  var valid_774604 = header.getOrDefault("X-Amz-Algorithm")
  valid_774604 = validateParameter(valid_774604, JString, required = false,
                                 default = nil)
  if valid_774604 != nil:
    section.add "X-Amz-Algorithm", valid_774604
  var valid_774605 = header.getOrDefault("X-Amz-Signature")
  valid_774605 = validateParameter(valid_774605, JString, required = false,
                                 default = nil)
  if valid_774605 != nil:
    section.add "X-Amz-Signature", valid_774605
  var valid_774606 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774606 = validateParameter(valid_774606, JString, required = false,
                                 default = nil)
  if valid_774606 != nil:
    section.add "X-Amz-SignedHeaders", valid_774606
  var valid_774607 = header.getOrDefault("X-Amz-Credential")
  valid_774607 = validateParameter(valid_774607, JString, required = false,
                                 default = nil)
  if valid_774607 != nil:
    section.add "X-Amz-Credential", valid_774607
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_774608 = formData.getOrDefault("ResourceName")
  valid_774608 = validateParameter(valid_774608, JString, required = true,
                                 default = nil)
  if valid_774608 != nil:
    section.add "ResourceName", valid_774608
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774609: Call_PostListTagsForResource_774596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_774609.validator(path, query, header, formData, body)
  let scheme = call_774609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774609.url(scheme.get, call_774609.host, call_774609.base,
                         call_774609.route, valid.getOrDefault("path"))
  result = hook(call_774609, url, valid)

proc call*(call_774610: Call_PostListTagsForResource_774596; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Version: string (required)
  var query_774611 = newJObject()
  var formData_774612 = newJObject()
  add(query_774611, "Action", newJString(Action))
  add(formData_774612, "ResourceName", newJString(ResourceName))
  add(query_774611, "Version", newJString(Version))
  result = call_774610.call(nil, query_774611, nil, formData_774612, nil)

var postListTagsForResource* = Call_PostListTagsForResource_774596(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_774597, base: "/",
    url: url_PostListTagsForResource_774598, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_774580 = ref object of OpenApiRestCall_772597
proc url_GetListTagsForResource_774582(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetListTagsForResource_774581(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_774583 = query.getOrDefault("ResourceName")
  valid_774583 = validateParameter(valid_774583, JString, required = true,
                                 default = nil)
  if valid_774583 != nil:
    section.add "ResourceName", valid_774583
  var valid_774584 = query.getOrDefault("Action")
  valid_774584 = validateParameter(valid_774584, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_774584 != nil:
    section.add "Action", valid_774584
  var valid_774585 = query.getOrDefault("Version")
  valid_774585 = validateParameter(valid_774585, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774585 != nil:
    section.add "Version", valid_774585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774586 = header.getOrDefault("X-Amz-Date")
  valid_774586 = validateParameter(valid_774586, JString, required = false,
                                 default = nil)
  if valid_774586 != nil:
    section.add "X-Amz-Date", valid_774586
  var valid_774587 = header.getOrDefault("X-Amz-Security-Token")
  valid_774587 = validateParameter(valid_774587, JString, required = false,
                                 default = nil)
  if valid_774587 != nil:
    section.add "X-Amz-Security-Token", valid_774587
  var valid_774588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774588 = validateParameter(valid_774588, JString, required = false,
                                 default = nil)
  if valid_774588 != nil:
    section.add "X-Amz-Content-Sha256", valid_774588
  var valid_774589 = header.getOrDefault("X-Amz-Algorithm")
  valid_774589 = validateParameter(valid_774589, JString, required = false,
                                 default = nil)
  if valid_774589 != nil:
    section.add "X-Amz-Algorithm", valid_774589
  var valid_774590 = header.getOrDefault("X-Amz-Signature")
  valid_774590 = validateParameter(valid_774590, JString, required = false,
                                 default = nil)
  if valid_774590 != nil:
    section.add "X-Amz-Signature", valid_774590
  var valid_774591 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774591 = validateParameter(valid_774591, JString, required = false,
                                 default = nil)
  if valid_774591 != nil:
    section.add "X-Amz-SignedHeaders", valid_774591
  var valid_774592 = header.getOrDefault("X-Amz-Credential")
  valid_774592 = validateParameter(valid_774592, JString, required = false,
                                 default = nil)
  if valid_774592 != nil:
    section.add "X-Amz-Credential", valid_774592
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774593: Call_GetListTagsForResource_774580; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ## 
  let valid = call_774593.validator(path, query, header, formData, body)
  let scheme = call_774593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774593.url(scheme.get, call_774593.host, call_774593.base,
                         call_774593.route, valid.getOrDefault("path"))
  result = hook(call_774593, url, valid)

proc call*(call_774594: Call_GetListTagsForResource_774580; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2015-02-02"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all cost allocation tags currently on the named resource. A <code>cost allocation tag</code> is a key-value pair where the key is case-sensitive and the value is optional. You can use cost allocation tags to categorize and track your AWS costs.</p> <p>If the cluster is not in the <i>available</i> state, <code>ListTagsForResource</code> returns an error.</p> <p>You can have a maximum of 50 cost allocation tags on an ElastiCache resource. For more information, see <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html">Monitoring Costs with Tags</a>.</p>
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774595 = newJObject()
  add(query_774595, "ResourceName", newJString(ResourceName))
  add(query_774595, "Action", newJString(Action))
  add(query_774595, "Version", newJString(Version))
  result = call_774594.call(nil, query_774595, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_774580(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_774581, base: "/",
    url: url_GetListTagsForResource_774582, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheCluster_774645 = ref object of OpenApiRestCall_772597
proc url_PostModifyCacheCluster_774647(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyCacheCluster_774646(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774648 = query.getOrDefault("Action")
  valid_774648 = validateParameter(valid_774648, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_774648 != nil:
    section.add "Action", valid_774648
  var valid_774649 = query.getOrDefault("Version")
  valid_774649 = validateParameter(valid_774649, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774649 != nil:
    section.add "Version", valid_774649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774650 = header.getOrDefault("X-Amz-Date")
  valid_774650 = validateParameter(valid_774650, JString, required = false,
                                 default = nil)
  if valid_774650 != nil:
    section.add "X-Amz-Date", valid_774650
  var valid_774651 = header.getOrDefault("X-Amz-Security-Token")
  valid_774651 = validateParameter(valid_774651, JString, required = false,
                                 default = nil)
  if valid_774651 != nil:
    section.add "X-Amz-Security-Token", valid_774651
  var valid_774652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774652 = validateParameter(valid_774652, JString, required = false,
                                 default = nil)
  if valid_774652 != nil:
    section.add "X-Amz-Content-Sha256", valid_774652
  var valid_774653 = header.getOrDefault("X-Amz-Algorithm")
  valid_774653 = validateParameter(valid_774653, JString, required = false,
                                 default = nil)
  if valid_774653 != nil:
    section.add "X-Amz-Algorithm", valid_774653
  var valid_774654 = header.getOrDefault("X-Amz-Signature")
  valid_774654 = validateParameter(valid_774654, JString, required = false,
                                 default = nil)
  if valid_774654 != nil:
    section.add "X-Amz-Signature", valid_774654
  var valid_774655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774655 = validateParameter(valid_774655, JString, required = false,
                                 default = nil)
  if valid_774655 != nil:
    section.add "X-Amz-SignedHeaders", valid_774655
  var valid_774656 = header.getOrDefault("X-Amz-Credential")
  valid_774656 = validateParameter(valid_774656, JString, required = false,
                                 default = nil)
  if valid_774656 != nil:
    section.add "X-Amz-Credential", valid_774656
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_774657 = formData.getOrDefault("CacheNodeType")
  valid_774657 = validateParameter(valid_774657, JString, required = false,
                                 default = nil)
  if valid_774657 != nil:
    section.add "CacheNodeType", valid_774657
  var valid_774658 = formData.getOrDefault("CacheNodeIdsToRemove")
  valid_774658 = validateParameter(valid_774658, JArray, required = false,
                                 default = nil)
  if valid_774658 != nil:
    section.add "CacheNodeIdsToRemove", valid_774658
  var valid_774659 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_774659 = validateParameter(valid_774659, JArray, required = false,
                                 default = nil)
  if valid_774659 != nil:
    section.add "CacheSecurityGroupNames", valid_774659
  var valid_774660 = formData.getOrDefault("ApplyImmediately")
  valid_774660 = validateParameter(valid_774660, JBool, required = false, default = nil)
  if valid_774660 != nil:
    section.add "ApplyImmediately", valid_774660
  var valid_774661 = formData.getOrDefault("NotificationTopicArn")
  valid_774661 = validateParameter(valid_774661, JString, required = false,
                                 default = nil)
  if valid_774661 != nil:
    section.add "NotificationTopicArn", valid_774661
  var valid_774662 = formData.getOrDefault("SecurityGroupIds")
  valid_774662 = validateParameter(valid_774662, JArray, required = false,
                                 default = nil)
  if valid_774662 != nil:
    section.add "SecurityGroupIds", valid_774662
  var valid_774663 = formData.getOrDefault("NumCacheNodes")
  valid_774663 = validateParameter(valid_774663, JInt, required = false, default = nil)
  if valid_774663 != nil:
    section.add "NumCacheNodes", valid_774663
  var valid_774664 = formData.getOrDefault("AZMode")
  valid_774664 = validateParameter(valid_774664, JString, required = false,
                                 default = newJString("single-az"))
  if valid_774664 != nil:
    section.add "AZMode", valid_774664
  var valid_774665 = formData.getOrDefault("CacheParameterGroupName")
  valid_774665 = validateParameter(valid_774665, JString, required = false,
                                 default = nil)
  if valid_774665 != nil:
    section.add "CacheParameterGroupName", valid_774665
  var valid_774666 = formData.getOrDefault("NewAvailabilityZones")
  valid_774666 = validateParameter(valid_774666, JArray, required = false,
                                 default = nil)
  if valid_774666 != nil:
    section.add "NewAvailabilityZones", valid_774666
  var valid_774667 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_774667 = validateParameter(valid_774667, JInt, required = false, default = nil)
  if valid_774667 != nil:
    section.add "SnapshotRetentionLimit", valid_774667
  var valid_774668 = formData.getOrDefault("SnapshotWindow")
  valid_774668 = validateParameter(valid_774668, JString, required = false,
                                 default = nil)
  if valid_774668 != nil:
    section.add "SnapshotWindow", valid_774668
  var valid_774669 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_774669 = validateParameter(valid_774669, JBool, required = false, default = nil)
  if valid_774669 != nil:
    section.add "AutoMinorVersionUpgrade", valid_774669
  var valid_774670 = formData.getOrDefault("EngineVersion")
  valid_774670 = validateParameter(valid_774670, JString, required = false,
                                 default = nil)
  if valid_774670 != nil:
    section.add "EngineVersion", valid_774670
  assert formData != nil,
        "formData argument is necessary due to required `CacheClusterId` field"
  var valid_774671 = formData.getOrDefault("CacheClusterId")
  valid_774671 = validateParameter(valid_774671, JString, required = true,
                                 default = nil)
  if valid_774671 != nil:
    section.add "CacheClusterId", valid_774671
  var valid_774672 = formData.getOrDefault("NotificationTopicStatus")
  valid_774672 = validateParameter(valid_774672, JString, required = false,
                                 default = nil)
  if valid_774672 != nil:
    section.add "NotificationTopicStatus", valid_774672
  var valid_774673 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_774673 = validateParameter(valid_774673, JString, required = false,
                                 default = nil)
  if valid_774673 != nil:
    section.add "PreferredMaintenanceWindow", valid_774673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774674: Call_PostModifyCacheCluster_774645; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_774674.validator(path, query, header, formData, body)
  let scheme = call_774674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774674.url(scheme.get, call_774674.host, call_774674.base,
                         call_774674.route, valid.getOrDefault("path"))
  result = hook(call_774674, url, valid)

proc call*(call_774675: Call_PostModifyCacheCluster_774645; CacheClusterId: string;
          CacheNodeType: string = ""; CacheNodeIdsToRemove: JsonNode = nil;
          CacheSecurityGroupNames: JsonNode = nil; ApplyImmediately: bool = false;
          NotificationTopicArn: string = ""; SecurityGroupIds: JsonNode = nil;
          NumCacheNodes: int = 0; AZMode: string = "single-az";
          Action: string = "ModifyCacheCluster";
          CacheParameterGroupName: string = "";
          NewAvailabilityZones: JsonNode = nil; SnapshotRetentionLimit: int = 0;
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2015-02-02";
          NotificationTopicStatus: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_774676 = newJObject()
  var formData_774677 = newJObject()
  add(formData_774677, "CacheNodeType", newJString(CacheNodeType))
  if CacheNodeIdsToRemove != nil:
    formData_774677.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  if CacheSecurityGroupNames != nil:
    formData_774677.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_774677, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_774677, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_774677.add "SecurityGroupIds", SecurityGroupIds
  add(formData_774677, "NumCacheNodes", newJInt(NumCacheNodes))
  add(formData_774677, "AZMode", newJString(AZMode))
  add(query_774676, "Action", newJString(Action))
  add(formData_774677, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if NewAvailabilityZones != nil:
    formData_774677.add "NewAvailabilityZones", NewAvailabilityZones
  add(formData_774677, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_774677, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_774677, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_774677, "EngineVersion", newJString(EngineVersion))
  add(query_774676, "Version", newJString(Version))
  add(formData_774677, "CacheClusterId", newJString(CacheClusterId))
  add(formData_774677, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_774677, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_774675.call(nil, query_774676, nil, formData_774677, nil)

var postModifyCacheCluster* = Call_PostModifyCacheCluster_774645(
    name: "postModifyCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_PostModifyCacheCluster_774646, base: "/",
    url: url_PostModifyCacheCluster_774647, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheCluster_774613 = ref object of OpenApiRestCall_772597
proc url_GetModifyCacheCluster_774615(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyCacheCluster_774614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: JString (required)
  ##   AZMode: JString
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   Version: JString (required)
  ##   NumCacheNodes: JInt
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: JString
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_774616 = query.getOrDefault("CacheClusterId")
  valid_774616 = validateParameter(valid_774616, JString, required = true,
                                 default = nil)
  if valid_774616 != nil:
    section.add "CacheClusterId", valid_774616
  var valid_774617 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_774617 = validateParameter(valid_774617, JString, required = false,
                                 default = nil)
  if valid_774617 != nil:
    section.add "PreferredMaintenanceWindow", valid_774617
  var valid_774618 = query.getOrDefault("SnapshotRetentionLimit")
  valid_774618 = validateParameter(valid_774618, JInt, required = false, default = nil)
  if valid_774618 != nil:
    section.add "SnapshotRetentionLimit", valid_774618
  var valid_774619 = query.getOrDefault("CacheNodeType")
  valid_774619 = validateParameter(valid_774619, JString, required = false,
                                 default = nil)
  if valid_774619 != nil:
    section.add "CacheNodeType", valid_774619
  var valid_774620 = query.getOrDefault("CacheNodeIdsToRemove")
  valid_774620 = validateParameter(valid_774620, JArray, required = false,
                                 default = nil)
  if valid_774620 != nil:
    section.add "CacheNodeIdsToRemove", valid_774620
  var valid_774621 = query.getOrDefault("NotificationTopicStatus")
  valid_774621 = validateParameter(valid_774621, JString, required = false,
                                 default = nil)
  if valid_774621 != nil:
    section.add "NotificationTopicStatus", valid_774621
  var valid_774622 = query.getOrDefault("CacheParameterGroupName")
  valid_774622 = validateParameter(valid_774622, JString, required = false,
                                 default = nil)
  if valid_774622 != nil:
    section.add "CacheParameterGroupName", valid_774622
  var valid_774623 = query.getOrDefault("Action")
  valid_774623 = validateParameter(valid_774623, JString, required = true,
                                 default = newJString("ModifyCacheCluster"))
  if valid_774623 != nil:
    section.add "Action", valid_774623
  var valid_774624 = query.getOrDefault("AZMode")
  valid_774624 = validateParameter(valid_774624, JString, required = false,
                                 default = newJString("single-az"))
  if valid_774624 != nil:
    section.add "AZMode", valid_774624
  var valid_774625 = query.getOrDefault("NotificationTopicArn")
  valid_774625 = validateParameter(valid_774625, JString, required = false,
                                 default = nil)
  if valid_774625 != nil:
    section.add "NotificationTopicArn", valid_774625
  var valid_774626 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_774626 = validateParameter(valid_774626, JBool, required = false, default = nil)
  if valid_774626 != nil:
    section.add "AutoMinorVersionUpgrade", valid_774626
  var valid_774627 = query.getOrDefault("EngineVersion")
  valid_774627 = validateParameter(valid_774627, JString, required = false,
                                 default = nil)
  if valid_774627 != nil:
    section.add "EngineVersion", valid_774627
  var valid_774628 = query.getOrDefault("NewAvailabilityZones")
  valid_774628 = validateParameter(valid_774628, JArray, required = false,
                                 default = nil)
  if valid_774628 != nil:
    section.add "NewAvailabilityZones", valid_774628
  var valid_774629 = query.getOrDefault("SecurityGroupIds")
  valid_774629 = validateParameter(valid_774629, JArray, required = false,
                                 default = nil)
  if valid_774629 != nil:
    section.add "SecurityGroupIds", valid_774629
  var valid_774630 = query.getOrDefault("CacheSecurityGroupNames")
  valid_774630 = validateParameter(valid_774630, JArray, required = false,
                                 default = nil)
  if valid_774630 != nil:
    section.add "CacheSecurityGroupNames", valid_774630
  var valid_774631 = query.getOrDefault("Version")
  valid_774631 = validateParameter(valid_774631, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774631 != nil:
    section.add "Version", valid_774631
  var valid_774632 = query.getOrDefault("NumCacheNodes")
  valid_774632 = validateParameter(valid_774632, JInt, required = false, default = nil)
  if valid_774632 != nil:
    section.add "NumCacheNodes", valid_774632
  var valid_774633 = query.getOrDefault("ApplyImmediately")
  valid_774633 = validateParameter(valid_774633, JBool, required = false, default = nil)
  if valid_774633 != nil:
    section.add "ApplyImmediately", valid_774633
  var valid_774634 = query.getOrDefault("SnapshotWindow")
  valid_774634 = validateParameter(valid_774634, JString, required = false,
                                 default = nil)
  if valid_774634 != nil:
    section.add "SnapshotWindow", valid_774634
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774635 = header.getOrDefault("X-Amz-Date")
  valid_774635 = validateParameter(valid_774635, JString, required = false,
                                 default = nil)
  if valid_774635 != nil:
    section.add "X-Amz-Date", valid_774635
  var valid_774636 = header.getOrDefault("X-Amz-Security-Token")
  valid_774636 = validateParameter(valid_774636, JString, required = false,
                                 default = nil)
  if valid_774636 != nil:
    section.add "X-Amz-Security-Token", valid_774636
  var valid_774637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774637 = validateParameter(valid_774637, JString, required = false,
                                 default = nil)
  if valid_774637 != nil:
    section.add "X-Amz-Content-Sha256", valid_774637
  var valid_774638 = header.getOrDefault("X-Amz-Algorithm")
  valid_774638 = validateParameter(valid_774638, JString, required = false,
                                 default = nil)
  if valid_774638 != nil:
    section.add "X-Amz-Algorithm", valid_774638
  var valid_774639 = header.getOrDefault("X-Amz-Signature")
  valid_774639 = validateParameter(valid_774639, JString, required = false,
                                 default = nil)
  if valid_774639 != nil:
    section.add "X-Amz-Signature", valid_774639
  var valid_774640 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774640 = validateParameter(valid_774640, JString, required = false,
                                 default = nil)
  if valid_774640 != nil:
    section.add "X-Amz-SignedHeaders", valid_774640
  var valid_774641 = header.getOrDefault("X-Amz-Credential")
  valid_774641 = validateParameter(valid_774641, JString, required = false,
                                 default = nil)
  if valid_774641 != nil:
    section.add "X-Amz-Credential", valid_774641
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774642: Call_GetModifyCacheCluster_774613; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ## 
  let valid = call_774642.validator(path, query, header, formData, body)
  let scheme = call_774642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774642.url(scheme.get, call_774642.host, call_774642.base,
                         call_774642.route, valid.getOrDefault("path"))
  result = hook(call_774642, url, valid)

proc call*(call_774643: Call_GetModifyCacheCluster_774613; CacheClusterId: string;
          PreferredMaintenanceWindow: string = ""; SnapshotRetentionLimit: int = 0;
          CacheNodeType: string = ""; CacheNodeIdsToRemove: JsonNode = nil;
          NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "ModifyCacheCluster"; AZMode: string = "single-az";
          NotificationTopicArn: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; NewAvailabilityZones: JsonNode = nil;
          SecurityGroupIds: JsonNode = nil; CacheSecurityGroupNames: JsonNode = nil;
          Version: string = "2015-02-02"; NumCacheNodes: int = 0;
          ApplyImmediately: bool = false; SnapshotWindow: string = ""): Recallable =
  ## getModifyCacheCluster
  ## Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This value is stored as a lowercase string.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <note> <p>If the value of <code>SnapshotRetentionLimit</code> is set to zero (0), backups are turned off.</p> </note>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this cluster up to.
  ##   CacheNodeIdsToRemove: JArray
  ##                       : <p>A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when <code>NumCacheNodes</code> is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of <code>NumCacheNodes</code> in the request.</p> <p>For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this <code>ModifyCacheCluster</code> call is 5, you must list 2 (7 - 5) cache node IDs to remove.</p>
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: string (required)
  ##   AZMode: string
  ##         : <p>Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.</p> <p>Valid values: <code>single-az</code> | <code>cross-az</code>.</p> <p>This option is only supported for Memcached clusters.</p> <note> <p>You cannot specify <code>single-az</code> if the Memcached cluster already has cache nodes in different Availability Zones. If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone.</p> <p>Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> </note>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the cluster owner.</p> </note>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the cache nodes.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. </p>
  ##   NewAvailabilityZones: JArray
  ##                       : <p>The list of Availability Zones where the new Memcached cache nodes are created.</p> <p>This parameter is only valid when <code>NumCacheNodes</code> in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.</p> <p>This option is only supported on Memcached clusters.</p> <p>Scenarios:</p> <ul> <li> <p> <b>Scenario 1:</b> You have 3 active nodes and wish to add 2 nodes. Specify <code>NumCacheNodes=5</code> (3 + 2) and optionally specify two Availability Zones for the two new nodes.</p> </li> <li> <p> <b>Scenario 2:</b> You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify <code>NumCacheNodes=6</code> ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.</p> </li> <li> <p> <b>Scenario 3:</b> You want to cancel all pending operations. Specify <code>NumCacheNodes=3</code> to cancel all pending operations.</p> </li> </ul> <p>The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting <code>NumCacheNodes</code> to the number of current nodes.</p> <p>If <code>cross-az</code> is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the <b>Availability Zone Considerations</b> section of <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html">Cache Node Considerations for Memcached</a>.</p> <p> <b>Impact of new add/remove requests upon pending requests</b> </p> <ul> <li> <p>Scenario-1</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-2</p> <ul> <li> <p>Pending Action: Delete</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create, pending or immediate, replaces the pending delete.</p> </li> </ul> </li> <li> <p>Scenario-3</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Delete</p> </li> <li> <p>Result: The new delete, pending or immediate, replaces the pending create.</p> </li> </ul> </li> <li> <p>Scenario-4</p> <ul> <li> <p>Pending Action: Create</p> </li> <li> <p>New Request: Create</p> </li> <li> <p>Result: The new create is added to the pending create.</p> <important> <p> <b>Important:</b> If the new create request is <b>Apply Immediately - Yes</b>, all creates are performed immediately. If the new create request is <b>Apply Immediately - No</b>, all creates are pending.</p> </important> </li> </ul> </li> </ul>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the cluster.</p> <p>This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.</p> <p>You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".</p>
  ##   Version: string (required)
  ##   NumCacheNodes: int
  ##                : <p>The number of cache nodes that the cluster should have. If the value for <code>NumCacheNodes</code> is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.</p> <p>If you are removing cache nodes, you must use the <code>CacheNodeIdsToRemove</code> parameter to provide the IDs of the specific cache nodes to remove.</p> <p>For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.</p> <note> <p>Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see <code>ApplyImmediately</code>).</p> <p>A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the <code>ModifyCacheCluster</code> request and set <code>NumCacheNodes</code> equal to the number of cache nodes currently in the cluster.</p> </note>
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster.</p> <p>If <code>false</code>, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <important> <p>If you perform a <code>ModifyCacheCluster</code> before a pending modification is applied, the pending modification is replaced by the newer modification.</p> </important> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: string
  ##                 : The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster. 
  var query_774644 = newJObject()
  add(query_774644, "CacheClusterId", newJString(CacheClusterId))
  add(query_774644, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_774644, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_774644, "CacheNodeType", newJString(CacheNodeType))
  if CacheNodeIdsToRemove != nil:
    query_774644.add "CacheNodeIdsToRemove", CacheNodeIdsToRemove
  add(query_774644, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_774644, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_774644, "Action", newJString(Action))
  add(query_774644, "AZMode", newJString(AZMode))
  add(query_774644, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_774644, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_774644, "EngineVersion", newJString(EngineVersion))
  if NewAvailabilityZones != nil:
    query_774644.add "NewAvailabilityZones", NewAvailabilityZones
  if SecurityGroupIds != nil:
    query_774644.add "SecurityGroupIds", SecurityGroupIds
  if CacheSecurityGroupNames != nil:
    query_774644.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_774644, "Version", newJString(Version))
  add(query_774644, "NumCacheNodes", newJInt(NumCacheNodes))
  add(query_774644, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_774644, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_774643.call(nil, query_774644, nil, nil, nil)

var getModifyCacheCluster* = Call_GetModifyCacheCluster_774613(
    name: "getModifyCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheCluster",
    validator: validate_GetModifyCacheCluster_774614, base: "/",
    url: url_GetModifyCacheCluster_774615, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheParameterGroup_774695 = ref object of OpenApiRestCall_772597
proc url_PostModifyCacheParameterGroup_774697(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyCacheParameterGroup_774696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774698 = query.getOrDefault("Action")
  valid_774698 = validateParameter(valid_774698, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_774698 != nil:
    section.add "Action", valid_774698
  var valid_774699 = query.getOrDefault("Version")
  valid_774699 = validateParameter(valid_774699, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774699 != nil:
    section.add "Version", valid_774699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774700 = header.getOrDefault("X-Amz-Date")
  valid_774700 = validateParameter(valid_774700, JString, required = false,
                                 default = nil)
  if valid_774700 != nil:
    section.add "X-Amz-Date", valid_774700
  var valid_774701 = header.getOrDefault("X-Amz-Security-Token")
  valid_774701 = validateParameter(valid_774701, JString, required = false,
                                 default = nil)
  if valid_774701 != nil:
    section.add "X-Amz-Security-Token", valid_774701
  var valid_774702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774702 = validateParameter(valid_774702, JString, required = false,
                                 default = nil)
  if valid_774702 != nil:
    section.add "X-Amz-Content-Sha256", valid_774702
  var valid_774703 = header.getOrDefault("X-Amz-Algorithm")
  valid_774703 = validateParameter(valid_774703, JString, required = false,
                                 default = nil)
  if valid_774703 != nil:
    section.add "X-Amz-Algorithm", valid_774703
  var valid_774704 = header.getOrDefault("X-Amz-Signature")
  valid_774704 = validateParameter(valid_774704, JString, required = false,
                                 default = nil)
  if valid_774704 != nil:
    section.add "X-Amz-Signature", valid_774704
  var valid_774705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774705 = validateParameter(valid_774705, JString, required = false,
                                 default = nil)
  if valid_774705 != nil:
    section.add "X-Amz-SignedHeaders", valid_774705
  var valid_774706 = header.getOrDefault("X-Amz-Credential")
  valid_774706 = validateParameter(valid_774706, JString, required = false,
                                 default = nil)
  if valid_774706 != nil:
    section.add "X-Amz-Credential", valid_774706
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_774707 = formData.getOrDefault("CacheParameterGroupName")
  valid_774707 = validateParameter(valid_774707, JString, required = true,
                                 default = nil)
  if valid_774707 != nil:
    section.add "CacheParameterGroupName", valid_774707
  var valid_774708 = formData.getOrDefault("ParameterNameValues")
  valid_774708 = validateParameter(valid_774708, JArray, required = true, default = nil)
  if valid_774708 != nil:
    section.add "ParameterNameValues", valid_774708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774709: Call_PostModifyCacheParameterGroup_774695; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_774709.validator(path, query, header, formData, body)
  let scheme = call_774709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774709.url(scheme.get, call_774709.host, call_774709.base,
                         call_774709.route, valid.getOrDefault("path"))
  result = hook(call_774709, url, valid)

proc call*(call_774710: Call_PostModifyCacheParameterGroup_774695;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   Version: string (required)
  var query_774711 = newJObject()
  var formData_774712 = newJObject()
  add(query_774711, "Action", newJString(Action))
  add(formData_774712, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  if ParameterNameValues != nil:
    formData_774712.add "ParameterNameValues", ParameterNameValues
  add(query_774711, "Version", newJString(Version))
  result = call_774710.call(nil, query_774711, nil, formData_774712, nil)

var postModifyCacheParameterGroup* = Call_PostModifyCacheParameterGroup_774695(
    name: "postModifyCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_PostModifyCacheParameterGroup_774696, base: "/",
    url: url_PostModifyCacheParameterGroup_774697,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheParameterGroup_774678 = ref object of OpenApiRestCall_772597
proc url_GetModifyCacheParameterGroup_774680(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyCacheParameterGroup_774679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ParameterNameValues` field"
  var valid_774681 = query.getOrDefault("ParameterNameValues")
  valid_774681 = validateParameter(valid_774681, JArray, required = true, default = nil)
  if valid_774681 != nil:
    section.add "ParameterNameValues", valid_774681
  var valid_774682 = query.getOrDefault("CacheParameterGroupName")
  valid_774682 = validateParameter(valid_774682, JString, required = true,
                                 default = nil)
  if valid_774682 != nil:
    section.add "CacheParameterGroupName", valid_774682
  var valid_774683 = query.getOrDefault("Action")
  valid_774683 = validateParameter(valid_774683, JString, required = true, default = newJString(
      "ModifyCacheParameterGroup"))
  if valid_774683 != nil:
    section.add "Action", valid_774683
  var valid_774684 = query.getOrDefault("Version")
  valid_774684 = validateParameter(valid_774684, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774684 != nil:
    section.add "Version", valid_774684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774685 = header.getOrDefault("X-Amz-Date")
  valid_774685 = validateParameter(valid_774685, JString, required = false,
                                 default = nil)
  if valid_774685 != nil:
    section.add "X-Amz-Date", valid_774685
  var valid_774686 = header.getOrDefault("X-Amz-Security-Token")
  valid_774686 = validateParameter(valid_774686, JString, required = false,
                                 default = nil)
  if valid_774686 != nil:
    section.add "X-Amz-Security-Token", valid_774686
  var valid_774687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774687 = validateParameter(valid_774687, JString, required = false,
                                 default = nil)
  if valid_774687 != nil:
    section.add "X-Amz-Content-Sha256", valid_774687
  var valid_774688 = header.getOrDefault("X-Amz-Algorithm")
  valid_774688 = validateParameter(valid_774688, JString, required = false,
                                 default = nil)
  if valid_774688 != nil:
    section.add "X-Amz-Algorithm", valid_774688
  var valid_774689 = header.getOrDefault("X-Amz-Signature")
  valid_774689 = validateParameter(valid_774689, JString, required = false,
                                 default = nil)
  if valid_774689 != nil:
    section.add "X-Amz-Signature", valid_774689
  var valid_774690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774690 = validateParameter(valid_774690, JString, required = false,
                                 default = nil)
  if valid_774690 != nil:
    section.add "X-Amz-SignedHeaders", valid_774690
  var valid_774691 = header.getOrDefault("X-Amz-Credential")
  valid_774691 = validateParameter(valid_774691, JString, required = false,
                                 default = nil)
  if valid_774691 != nil:
    section.add "X-Amz-Credential", valid_774691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774692: Call_GetModifyCacheParameterGroup_774678; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ## 
  let valid = call_774692.validator(path, query, header, formData, body)
  let scheme = call_774692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774692.url(scheme.get, call_774692.host, call_774692.base,
                         call_774692.route, valid.getOrDefault("path"))
  result = hook(call_774692, url, valid)

proc call*(call_774693: Call_GetModifyCacheParameterGroup_774678;
          ParameterNameValues: JsonNode; CacheParameterGroupName: string;
          Action: string = "ModifyCacheParameterGroup";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheParameterGroup
  ## Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
  ##   ParameterNameValues: JArray (required)
  ##                      : An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774694 = newJObject()
  if ParameterNameValues != nil:
    query_774694.add "ParameterNameValues", ParameterNameValues
  add(query_774694, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_774694, "Action", newJString(Action))
  add(query_774694, "Version", newJString(Version))
  result = call_774693.call(nil, query_774694, nil, nil, nil)

var getModifyCacheParameterGroup* = Call_GetModifyCacheParameterGroup_774678(
    name: "getModifyCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyCacheParameterGroup",
    validator: validate_GetModifyCacheParameterGroup_774679, base: "/",
    url: url_GetModifyCacheParameterGroup_774680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCacheSubnetGroup_774731 = ref object of OpenApiRestCall_772597
proc url_PostModifyCacheSubnetGroup_774733(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyCacheSubnetGroup_774732(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774734 = query.getOrDefault("Action")
  valid_774734 = validateParameter(valid_774734, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_774734 != nil:
    section.add "Action", valid_774734
  var valid_774735 = query.getOrDefault("Version")
  valid_774735 = validateParameter(valid_774735, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774735 != nil:
    section.add "Version", valid_774735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774736 = header.getOrDefault("X-Amz-Date")
  valid_774736 = validateParameter(valid_774736, JString, required = false,
                                 default = nil)
  if valid_774736 != nil:
    section.add "X-Amz-Date", valid_774736
  var valid_774737 = header.getOrDefault("X-Amz-Security-Token")
  valid_774737 = validateParameter(valid_774737, JString, required = false,
                                 default = nil)
  if valid_774737 != nil:
    section.add "X-Amz-Security-Token", valid_774737
  var valid_774738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774738 = validateParameter(valid_774738, JString, required = false,
                                 default = nil)
  if valid_774738 != nil:
    section.add "X-Amz-Content-Sha256", valid_774738
  var valid_774739 = header.getOrDefault("X-Amz-Algorithm")
  valid_774739 = validateParameter(valid_774739, JString, required = false,
                                 default = nil)
  if valid_774739 != nil:
    section.add "X-Amz-Algorithm", valid_774739
  var valid_774740 = header.getOrDefault("X-Amz-Signature")
  valid_774740 = validateParameter(valid_774740, JString, required = false,
                                 default = nil)
  if valid_774740 != nil:
    section.add "X-Amz-Signature", valid_774740
  var valid_774741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774741 = validateParameter(valid_774741, JString, required = false,
                                 default = nil)
  if valid_774741 != nil:
    section.add "X-Amz-SignedHeaders", valid_774741
  var valid_774742 = header.getOrDefault("X-Amz-Credential")
  valid_774742 = validateParameter(valid_774742, JString, required = false,
                                 default = nil)
  if valid_774742 != nil:
    section.add "X-Amz-Credential", valid_774742
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  section = newJObject()
  var valid_774743 = formData.getOrDefault("CacheSubnetGroupDescription")
  valid_774743 = validateParameter(valid_774743, JString, required = false,
                                 default = nil)
  if valid_774743 != nil:
    section.add "CacheSubnetGroupDescription", valid_774743
  var valid_774744 = formData.getOrDefault("SubnetIds")
  valid_774744 = validateParameter(valid_774744, JArray, required = false,
                                 default = nil)
  if valid_774744 != nil:
    section.add "SubnetIds", valid_774744
  assert formData != nil, "formData argument is necessary due to required `CacheSubnetGroupName` field"
  var valid_774745 = formData.getOrDefault("CacheSubnetGroupName")
  valid_774745 = validateParameter(valid_774745, JString, required = true,
                                 default = nil)
  if valid_774745 != nil:
    section.add "CacheSubnetGroupName", valid_774745
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774746: Call_PostModifyCacheSubnetGroup_774731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_774746.validator(path, query, header, formData, body)
  let scheme = call_774746.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774746.url(scheme.get, call_774746.host, call_774746.base,
                         call_774746.route, valid.getOrDefault("path"))
  result = hook(call_774746, url, valid)

proc call*(call_774747: Call_PostModifyCacheSubnetGroup_774731;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          SubnetIds: JsonNode = nil; Action: string = "ModifyCacheSubnetGroup";
          Version: string = "2015-02-02"): Recallable =
  ## postModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   Action: string (required)
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_774748 = newJObject()
  var formData_774749 = newJObject()
  add(formData_774749, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  if SubnetIds != nil:
    formData_774749.add "SubnetIds", SubnetIds
  add(query_774748, "Action", newJString(Action))
  add(formData_774749, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_774748, "Version", newJString(Version))
  result = call_774747.call(nil, query_774748, nil, formData_774749, nil)

var postModifyCacheSubnetGroup* = Call_PostModifyCacheSubnetGroup_774731(
    name: "postModifyCacheSubnetGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_PostModifyCacheSubnetGroup_774732, base: "/",
    url: url_PostModifyCacheSubnetGroup_774733,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCacheSubnetGroup_774713 = ref object of OpenApiRestCall_772597
proc url_GetModifyCacheSubnetGroup_774715(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyCacheSubnetGroup_774714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing cache subnet group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSubnetGroupDescription: JString
  ##                              : A description of the cache subnet group.
  ##   Action: JString (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: JString (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774716 = query.getOrDefault("CacheSubnetGroupDescription")
  valid_774716 = validateParameter(valid_774716, JString, required = false,
                                 default = nil)
  if valid_774716 != nil:
    section.add "CacheSubnetGroupDescription", valid_774716
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774717 = query.getOrDefault("Action")
  valid_774717 = validateParameter(valid_774717, JString, required = true,
                                 default = newJString("ModifyCacheSubnetGroup"))
  if valid_774717 != nil:
    section.add "Action", valid_774717
  var valid_774718 = query.getOrDefault("SubnetIds")
  valid_774718 = validateParameter(valid_774718, JArray, required = false,
                                 default = nil)
  if valid_774718 != nil:
    section.add "SubnetIds", valid_774718
  var valid_774719 = query.getOrDefault("CacheSubnetGroupName")
  valid_774719 = validateParameter(valid_774719, JString, required = true,
                                 default = nil)
  if valid_774719 != nil:
    section.add "CacheSubnetGroupName", valid_774719
  var valid_774720 = query.getOrDefault("Version")
  valid_774720 = validateParameter(valid_774720, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774720 != nil:
    section.add "Version", valid_774720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774721 = header.getOrDefault("X-Amz-Date")
  valid_774721 = validateParameter(valid_774721, JString, required = false,
                                 default = nil)
  if valid_774721 != nil:
    section.add "X-Amz-Date", valid_774721
  var valid_774722 = header.getOrDefault("X-Amz-Security-Token")
  valid_774722 = validateParameter(valid_774722, JString, required = false,
                                 default = nil)
  if valid_774722 != nil:
    section.add "X-Amz-Security-Token", valid_774722
  var valid_774723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774723 = validateParameter(valid_774723, JString, required = false,
                                 default = nil)
  if valid_774723 != nil:
    section.add "X-Amz-Content-Sha256", valid_774723
  var valid_774724 = header.getOrDefault("X-Amz-Algorithm")
  valid_774724 = validateParameter(valid_774724, JString, required = false,
                                 default = nil)
  if valid_774724 != nil:
    section.add "X-Amz-Algorithm", valid_774724
  var valid_774725 = header.getOrDefault("X-Amz-Signature")
  valid_774725 = validateParameter(valid_774725, JString, required = false,
                                 default = nil)
  if valid_774725 != nil:
    section.add "X-Amz-Signature", valid_774725
  var valid_774726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774726 = validateParameter(valid_774726, JString, required = false,
                                 default = nil)
  if valid_774726 != nil:
    section.add "X-Amz-SignedHeaders", valid_774726
  var valid_774727 = header.getOrDefault("X-Amz-Credential")
  valid_774727 = validateParameter(valid_774727, JString, required = false,
                                 default = nil)
  if valid_774727 != nil:
    section.add "X-Amz-Credential", valid_774727
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774728: Call_GetModifyCacheSubnetGroup_774713; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing cache subnet group.
  ## 
  let valid = call_774728.validator(path, query, header, formData, body)
  let scheme = call_774728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774728.url(scheme.get, call_774728.host, call_774728.base,
                         call_774728.route, valid.getOrDefault("path"))
  result = hook(call_774728, url, valid)

proc call*(call_774729: Call_GetModifyCacheSubnetGroup_774713;
          CacheSubnetGroupName: string; CacheSubnetGroupDescription: string = "";
          Action: string = "ModifyCacheSubnetGroup"; SubnetIds: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## getModifyCacheSubnetGroup
  ## Modifies an existing cache subnet group.
  ##   CacheSubnetGroupDescription: string
  ##                              : A description of the cache subnet group.
  ##   Action: string (required)
  ##   SubnetIds: JArray
  ##            : The EC2 subnet IDs for the cache subnet group.
  ##   CacheSubnetGroupName: string (required)
  ##                       : <p>The name for the cache subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 alphanumeric characters or hyphens.</p> <p>Example: <code>mysubnetgroup</code> </p>
  ##   Version: string (required)
  var query_774730 = newJObject()
  add(query_774730, "CacheSubnetGroupDescription",
      newJString(CacheSubnetGroupDescription))
  add(query_774730, "Action", newJString(Action))
  if SubnetIds != nil:
    query_774730.add "SubnetIds", SubnetIds
  add(query_774730, "CacheSubnetGroupName", newJString(CacheSubnetGroupName))
  add(query_774730, "Version", newJString(Version))
  result = call_774729.call(nil, query_774730, nil, nil, nil)

var getModifyCacheSubnetGroup* = Call_GetModifyCacheSubnetGroup_774713(
    name: "getModifyCacheSubnetGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyCacheSubnetGroup",
    validator: validate_GetModifyCacheSubnetGroup_774714, base: "/",
    url: url_GetModifyCacheSubnetGroup_774715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroup_774783 = ref object of OpenApiRestCall_772597
proc url_PostModifyReplicationGroup_774785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyReplicationGroup_774784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774786 = query.getOrDefault("Action")
  valid_774786 = validateParameter(valid_774786, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_774786 != nil:
    section.add "Action", valid_774786
  var valid_774787 = query.getOrDefault("Version")
  valid_774787 = validateParameter(valid_774787, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774787 != nil:
    section.add "Version", valid_774787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774788 = header.getOrDefault("X-Amz-Date")
  valid_774788 = validateParameter(valid_774788, JString, required = false,
                                 default = nil)
  if valid_774788 != nil:
    section.add "X-Amz-Date", valid_774788
  var valid_774789 = header.getOrDefault("X-Amz-Security-Token")
  valid_774789 = validateParameter(valid_774789, JString, required = false,
                                 default = nil)
  if valid_774789 != nil:
    section.add "X-Amz-Security-Token", valid_774789
  var valid_774790 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774790 = validateParameter(valid_774790, JString, required = false,
                                 default = nil)
  if valid_774790 != nil:
    section.add "X-Amz-Content-Sha256", valid_774790
  var valid_774791 = header.getOrDefault("X-Amz-Algorithm")
  valid_774791 = validateParameter(valid_774791, JString, required = false,
                                 default = nil)
  if valid_774791 != nil:
    section.add "X-Amz-Algorithm", valid_774791
  var valid_774792 = header.getOrDefault("X-Amz-Signature")
  valid_774792 = validateParameter(valid_774792, JString, required = false,
                                 default = nil)
  if valid_774792 != nil:
    section.add "X-Amz-Signature", valid_774792
  var valid_774793 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774793 = validateParameter(valid_774793, JString, required = false,
                                 default = nil)
  if valid_774793 != nil:
    section.add "X-Amz-SignedHeaders", valid_774793
  var valid_774794 = header.getOrDefault("X-Amz-Credential")
  valid_774794 = validateParameter(valid_774794, JString, required = false,
                                 default = nil)
  if valid_774794 != nil:
    section.add "X-Amz-Credential", valid_774794
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  section = newJObject()
  var valid_774795 = formData.getOrDefault("NodeGroupId")
  valid_774795 = validateParameter(valid_774795, JString, required = false,
                                 default = nil)
  if valid_774795 != nil:
    section.add "NodeGroupId", valid_774795
  var valid_774796 = formData.getOrDefault("CacheNodeType")
  valid_774796 = validateParameter(valid_774796, JString, required = false,
                                 default = nil)
  if valid_774796 != nil:
    section.add "CacheNodeType", valid_774796
  var valid_774797 = formData.getOrDefault("PrimaryClusterId")
  valid_774797 = validateParameter(valid_774797, JString, required = false,
                                 default = nil)
  if valid_774797 != nil:
    section.add "PrimaryClusterId", valid_774797
  var valid_774798 = formData.getOrDefault("CacheSecurityGroupNames")
  valid_774798 = validateParameter(valid_774798, JArray, required = false,
                                 default = nil)
  if valid_774798 != nil:
    section.add "CacheSecurityGroupNames", valid_774798
  var valid_774799 = formData.getOrDefault("ApplyImmediately")
  valid_774799 = validateParameter(valid_774799, JBool, required = false, default = nil)
  if valid_774799 != nil:
    section.add "ApplyImmediately", valid_774799
  var valid_774800 = formData.getOrDefault("AutomaticFailoverEnabled")
  valid_774800 = validateParameter(valid_774800, JBool, required = false, default = nil)
  if valid_774800 != nil:
    section.add "AutomaticFailoverEnabled", valid_774800
  var valid_774801 = formData.getOrDefault("NotificationTopicArn")
  valid_774801 = validateParameter(valid_774801, JString, required = false,
                                 default = nil)
  if valid_774801 != nil:
    section.add "NotificationTopicArn", valid_774801
  var valid_774802 = formData.getOrDefault("SecurityGroupIds")
  valid_774802 = validateParameter(valid_774802, JArray, required = false,
                                 default = nil)
  if valid_774802 != nil:
    section.add "SecurityGroupIds", valid_774802
  assert formData != nil, "formData argument is necessary due to required `ReplicationGroupId` field"
  var valid_774803 = formData.getOrDefault("ReplicationGroupId")
  valid_774803 = validateParameter(valid_774803, JString, required = true,
                                 default = nil)
  if valid_774803 != nil:
    section.add "ReplicationGroupId", valid_774803
  var valid_774804 = formData.getOrDefault("SnapshottingClusterId")
  valid_774804 = validateParameter(valid_774804, JString, required = false,
                                 default = nil)
  if valid_774804 != nil:
    section.add "SnapshottingClusterId", valid_774804
  var valid_774805 = formData.getOrDefault("CacheParameterGroupName")
  valid_774805 = validateParameter(valid_774805, JString, required = false,
                                 default = nil)
  if valid_774805 != nil:
    section.add "CacheParameterGroupName", valid_774805
  var valid_774806 = formData.getOrDefault("ReplicationGroupDescription")
  valid_774806 = validateParameter(valid_774806, JString, required = false,
                                 default = nil)
  if valid_774806 != nil:
    section.add "ReplicationGroupDescription", valid_774806
  var valid_774807 = formData.getOrDefault("SnapshotRetentionLimit")
  valid_774807 = validateParameter(valid_774807, JInt, required = false, default = nil)
  if valid_774807 != nil:
    section.add "SnapshotRetentionLimit", valid_774807
  var valid_774808 = formData.getOrDefault("SnapshotWindow")
  valid_774808 = validateParameter(valid_774808, JString, required = false,
                                 default = nil)
  if valid_774808 != nil:
    section.add "SnapshotWindow", valid_774808
  var valid_774809 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_774809 = validateParameter(valid_774809, JBool, required = false, default = nil)
  if valid_774809 != nil:
    section.add "AutoMinorVersionUpgrade", valid_774809
  var valid_774810 = formData.getOrDefault("EngineVersion")
  valid_774810 = validateParameter(valid_774810, JString, required = false,
                                 default = nil)
  if valid_774810 != nil:
    section.add "EngineVersion", valid_774810
  var valid_774811 = formData.getOrDefault("NotificationTopicStatus")
  valid_774811 = validateParameter(valid_774811, JString, required = false,
                                 default = nil)
  if valid_774811 != nil:
    section.add "NotificationTopicStatus", valid_774811
  var valid_774812 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_774812 = validateParameter(valid_774812, JString, required = false,
                                 default = nil)
  if valid_774812 != nil:
    section.add "PreferredMaintenanceWindow", valid_774812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774813: Call_PostModifyReplicationGroup_774783; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_774813.validator(path, query, header, formData, body)
  let scheme = call_774813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774813.url(scheme.get, call_774813.host, call_774813.base,
                         call_774813.route, valid.getOrDefault("path"))
  result = hook(call_774813, url, valid)

proc call*(call_774814: Call_PostModifyReplicationGroup_774783;
          ReplicationGroupId: string; NodeGroupId: string = "";
          CacheNodeType: string = ""; PrimaryClusterId: string = "";
          CacheSecurityGroupNames: JsonNode = nil; ApplyImmediately: bool = false;
          AutomaticFailoverEnabled: bool = false; NotificationTopicArn: string = "";
          SecurityGroupIds: JsonNode = nil; SnapshottingClusterId: string = "";
          Action: string = "ModifyReplicationGroup";
          CacheParameterGroupName: string = "";
          ReplicationGroupDescription: string = ""; SnapshotRetentionLimit: int = 0;
          SnapshotWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2015-02-02";
          NotificationTopicStatus: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   Version: string (required)
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  var query_774815 = newJObject()
  var formData_774816 = newJObject()
  add(formData_774816, "NodeGroupId", newJString(NodeGroupId))
  add(formData_774816, "CacheNodeType", newJString(CacheNodeType))
  add(formData_774816, "PrimaryClusterId", newJString(PrimaryClusterId))
  if CacheSecurityGroupNames != nil:
    formData_774816.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(formData_774816, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_774816, "AutomaticFailoverEnabled",
      newJBool(AutomaticFailoverEnabled))
  add(formData_774816, "NotificationTopicArn", newJString(NotificationTopicArn))
  if SecurityGroupIds != nil:
    formData_774816.add "SecurityGroupIds", SecurityGroupIds
  add(formData_774816, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(formData_774816, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(query_774815, "Action", newJString(Action))
  add(formData_774816, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_774816, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  add(formData_774816, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(formData_774816, "SnapshotWindow", newJString(SnapshotWindow))
  add(formData_774816, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_774816, "EngineVersion", newJString(EngineVersion))
  add(query_774815, "Version", newJString(Version))
  add(formData_774816, "NotificationTopicStatus",
      newJString(NotificationTopicStatus))
  add(formData_774816, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_774814.call(nil, query_774815, nil, formData_774816, nil)

var postModifyReplicationGroup* = Call_PostModifyReplicationGroup_774783(
    name: "postModifyReplicationGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_PostModifyReplicationGroup_774784, base: "/",
    url: url_PostModifyReplicationGroup_774785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroup_774750 = ref object of OpenApiRestCall_772597
proc url_GetModifyReplicationGroup_774752(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyReplicationGroup_774751(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: JInt
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   CacheNodeType: JString
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   NodeGroupId: JString
  ##              : Deprecated. This parameter is not used.
  ##   NotificationTopicStatus: JString
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: JString
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: JString (required)
  ##   NotificationTopicArn: JString
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   PrimaryClusterId: JString
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   SnapshottingClusterId: JString
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   ReplicationGroupId: JString (required)
  ##                     : The identifier of the replication group to modify.
  ##   EngineVersion: JString
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupDescription: JString
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   AutomaticFailoverEnabled: JBool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: JString
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  section = newJObject()
  var valid_774753 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_774753 = validateParameter(valid_774753, JString, required = false,
                                 default = nil)
  if valid_774753 != nil:
    section.add "PreferredMaintenanceWindow", valid_774753
  var valid_774754 = query.getOrDefault("SnapshotRetentionLimit")
  valid_774754 = validateParameter(valid_774754, JInt, required = false, default = nil)
  if valid_774754 != nil:
    section.add "SnapshotRetentionLimit", valid_774754
  var valid_774755 = query.getOrDefault("CacheNodeType")
  valid_774755 = validateParameter(valid_774755, JString, required = false,
                                 default = nil)
  if valid_774755 != nil:
    section.add "CacheNodeType", valid_774755
  var valid_774756 = query.getOrDefault("NodeGroupId")
  valid_774756 = validateParameter(valid_774756, JString, required = false,
                                 default = nil)
  if valid_774756 != nil:
    section.add "NodeGroupId", valid_774756
  var valid_774757 = query.getOrDefault("NotificationTopicStatus")
  valid_774757 = validateParameter(valid_774757, JString, required = false,
                                 default = nil)
  if valid_774757 != nil:
    section.add "NotificationTopicStatus", valid_774757
  var valid_774758 = query.getOrDefault("CacheParameterGroupName")
  valid_774758 = validateParameter(valid_774758, JString, required = false,
                                 default = nil)
  if valid_774758 != nil:
    section.add "CacheParameterGroupName", valid_774758
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774759 = query.getOrDefault("Action")
  valid_774759 = validateParameter(valid_774759, JString, required = true,
                                 default = newJString("ModifyReplicationGroup"))
  if valid_774759 != nil:
    section.add "Action", valid_774759
  var valid_774760 = query.getOrDefault("NotificationTopicArn")
  valid_774760 = validateParameter(valid_774760, JString, required = false,
                                 default = nil)
  if valid_774760 != nil:
    section.add "NotificationTopicArn", valid_774760
  var valid_774761 = query.getOrDefault("PrimaryClusterId")
  valid_774761 = validateParameter(valid_774761, JString, required = false,
                                 default = nil)
  if valid_774761 != nil:
    section.add "PrimaryClusterId", valid_774761
  var valid_774762 = query.getOrDefault("SnapshottingClusterId")
  valid_774762 = validateParameter(valid_774762, JString, required = false,
                                 default = nil)
  if valid_774762 != nil:
    section.add "SnapshottingClusterId", valid_774762
  var valid_774763 = query.getOrDefault("ReplicationGroupId")
  valid_774763 = validateParameter(valid_774763, JString, required = true,
                                 default = nil)
  if valid_774763 != nil:
    section.add "ReplicationGroupId", valid_774763
  var valid_774764 = query.getOrDefault("EngineVersion")
  valid_774764 = validateParameter(valid_774764, JString, required = false,
                                 default = nil)
  if valid_774764 != nil:
    section.add "EngineVersion", valid_774764
  var valid_774765 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_774765 = validateParameter(valid_774765, JBool, required = false, default = nil)
  if valid_774765 != nil:
    section.add "AutoMinorVersionUpgrade", valid_774765
  var valid_774766 = query.getOrDefault("SecurityGroupIds")
  valid_774766 = validateParameter(valid_774766, JArray, required = false,
                                 default = nil)
  if valid_774766 != nil:
    section.add "SecurityGroupIds", valid_774766
  var valid_774767 = query.getOrDefault("ReplicationGroupDescription")
  valid_774767 = validateParameter(valid_774767, JString, required = false,
                                 default = nil)
  if valid_774767 != nil:
    section.add "ReplicationGroupDescription", valid_774767
  var valid_774768 = query.getOrDefault("CacheSecurityGroupNames")
  valid_774768 = validateParameter(valid_774768, JArray, required = false,
                                 default = nil)
  if valid_774768 != nil:
    section.add "CacheSecurityGroupNames", valid_774768
  var valid_774769 = query.getOrDefault("AutomaticFailoverEnabled")
  valid_774769 = validateParameter(valid_774769, JBool, required = false, default = nil)
  if valid_774769 != nil:
    section.add "AutomaticFailoverEnabled", valid_774769
  var valid_774770 = query.getOrDefault("Version")
  valid_774770 = validateParameter(valid_774770, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774770 != nil:
    section.add "Version", valid_774770
  var valid_774771 = query.getOrDefault("ApplyImmediately")
  valid_774771 = validateParameter(valid_774771, JBool, required = false, default = nil)
  if valid_774771 != nil:
    section.add "ApplyImmediately", valid_774771
  var valid_774772 = query.getOrDefault("SnapshotWindow")
  valid_774772 = validateParameter(valid_774772, JString, required = false,
                                 default = nil)
  if valid_774772 != nil:
    section.add "SnapshotWindow", valid_774772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774773 = header.getOrDefault("X-Amz-Date")
  valid_774773 = validateParameter(valid_774773, JString, required = false,
                                 default = nil)
  if valid_774773 != nil:
    section.add "X-Amz-Date", valid_774773
  var valid_774774 = header.getOrDefault("X-Amz-Security-Token")
  valid_774774 = validateParameter(valid_774774, JString, required = false,
                                 default = nil)
  if valid_774774 != nil:
    section.add "X-Amz-Security-Token", valid_774774
  var valid_774775 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774775 = validateParameter(valid_774775, JString, required = false,
                                 default = nil)
  if valid_774775 != nil:
    section.add "X-Amz-Content-Sha256", valid_774775
  var valid_774776 = header.getOrDefault("X-Amz-Algorithm")
  valid_774776 = validateParameter(valid_774776, JString, required = false,
                                 default = nil)
  if valid_774776 != nil:
    section.add "X-Amz-Algorithm", valid_774776
  var valid_774777 = header.getOrDefault("X-Amz-Signature")
  valid_774777 = validateParameter(valid_774777, JString, required = false,
                                 default = nil)
  if valid_774777 != nil:
    section.add "X-Amz-Signature", valid_774777
  var valid_774778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774778 = validateParameter(valid_774778, JString, required = false,
                                 default = nil)
  if valid_774778 != nil:
    section.add "X-Amz-SignedHeaders", valid_774778
  var valid_774779 = header.getOrDefault("X-Amz-Credential")
  valid_774779 = validateParameter(valid_774779, JString, required = false,
                                 default = nil)
  if valid_774779 != nil:
    section.add "X-Amz-Credential", valid_774779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774780: Call_GetModifyReplicationGroup_774750; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ## 
  let valid = call_774780.validator(path, query, header, formData, body)
  let scheme = call_774780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774780.url(scheme.get, call_774780.host, call_774780.base,
                         call_774780.route, valid.getOrDefault("path"))
  result = hook(call_774780, url, valid)

proc call*(call_774781: Call_GetModifyReplicationGroup_774750;
          ReplicationGroupId: string; PreferredMaintenanceWindow: string = "";
          SnapshotRetentionLimit: int = 0; CacheNodeType: string = "";
          NodeGroupId: string = ""; NotificationTopicStatus: string = "";
          CacheParameterGroupName: string = "";
          Action: string = "ModifyReplicationGroup";
          NotificationTopicArn: string = ""; PrimaryClusterId: string = "";
          SnapshottingClusterId: string = ""; EngineVersion: string = "";
          AutoMinorVersionUpgrade: bool = false; SecurityGroupIds: JsonNode = nil;
          ReplicationGroupDescription: string = "";
          CacheSecurityGroupNames: JsonNode = nil;
          AutomaticFailoverEnabled: bool = false; Version: string = "2015-02-02";
          ApplyImmediately: bool = false; SnapshotWindow: string = ""): Recallable =
  ## getModifyReplicationGroup
  ## <p>Modifies the settings for a replication group.</p> <p>For Redis (cluster mode enabled) clusters, this operation cannot be used to change a cluster's node type or engine version. For more information, see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html">Scaling for Amazon ElastiCache for Redis (cluster mode enabled)</a> in the ElastiCache User Guide</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html">ModifyReplicationGroupShardConfiguration</a> in the ElastiCache API Reference</p> </li> </ul> <note> <p>This operation is valid for Redis only.</p> </note>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p> <p>Valid values for <code>ddd</code> are:</p> <ul> <li> <p> <code>sun</code> </p> </li> <li> <p> <code>mon</code> </p> </li> <li> <p> <code>tue</code> </p> </li> <li> <p> <code>wed</code> </p> </li> <li> <p> <code>thu</code> </p> </li> <li> <p> <code>fri</code> </p> </li> <li> <p> <code>sat</code> </p> </li> </ul> <p>Example: <code>sun:23:00-mon:01:30</code> </p>
  ##   SnapshotRetentionLimit: int
  ##                         : <p>The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set <code>SnapshotRetentionLimit</code> to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p> <p> <b>Important</b> If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.</p>
  ##   CacheNodeType: string
  ##                : A valid cache node type that you want to scale this replication group to.
  ##   NodeGroupId: string
  ##              : Deprecated. This parameter is not used.
  ##   NotificationTopicStatus: string
  ##                          : <p>The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is <code>active</code>.</p> <p>Valid values: <code>active</code> | <code>inactive</code> </p>
  ##   CacheParameterGroupName: string
  ##                          : The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the <code>ApplyImmediately</code> parameter is specified as <code>true</code> for this request.
  ##   Action: string (required)
  ##   NotificationTopicArn: string
  ##                       : <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.</p> <note> <p>The Amazon SNS topic owner must be same as the replication group owner. </p> </note>
  ##   PrimaryClusterId: string
  ##                   : For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
  ##   SnapshottingClusterId: string
  ##                        : The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
  ##   ReplicationGroupId: string (required)
  ##                     : The identifier of the replication group to modify.
  ##   EngineVersion: string
  ##                : <p>The upgraded version of the cache engine to be run on the clusters in the replication group.</p> <p> <b>Important:</b> You can upgrade to a newer engine version (see <a 
  ## href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement">Selecting a Cache Engine and Version</a>), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : This parameter is currently disabled.
  ##   SecurityGroupIds: JArray
  ##                   : <p>Specifies the VPC Security Groups associated with the clusters in the replication group.</p> <p>This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).</p>
  ##   ReplicationGroupDescription: string
  ##                              : A description for the replication group. Maximum length is 255 characters.
  ##   CacheSecurityGroupNames: JArray
  ##                          : <p>A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.</p> <p>This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).</p> <p>Constraints: Must contain no more than 255 alphanumeric characters. Must not be <code>Default</code>.</p>
  ##   AutomaticFailoverEnabled: bool
  ##                           : <p>Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Amazon ElastiCache for Redis does not support Multi-AZ with automatic failover on:</p> <ul> <li> <p>Redis versions earlier than 2.8.6.</p> </li> <li> <p>Redis (cluster mode disabled): T1 node types.</p> </li> <li> <p>Redis (cluster mode enabled): T1 node types.</p> </li> </ul>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>If <code>true</code>, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the replication group.</p> <p>If <code>false</code>, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.</p> <p>Valid values: <code>true</code> | <code>false</code> </p> <p>Default: <code>false</code> </p>
  ##   SnapshotWindow: string
  ##                 : <p>The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by <code>SnapshottingClusterId</code>.</p> <p>Example: <code>05:00-09:00</code> </p> <p>If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.</p>
  var query_774782 = newJObject()
  add(query_774782, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_774782, "SnapshotRetentionLimit", newJInt(SnapshotRetentionLimit))
  add(query_774782, "CacheNodeType", newJString(CacheNodeType))
  add(query_774782, "NodeGroupId", newJString(NodeGroupId))
  add(query_774782, "NotificationTopicStatus", newJString(NotificationTopicStatus))
  add(query_774782, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_774782, "Action", newJString(Action))
  add(query_774782, "NotificationTopicArn", newJString(NotificationTopicArn))
  add(query_774782, "PrimaryClusterId", newJString(PrimaryClusterId))
  add(query_774782, "SnapshottingClusterId", newJString(SnapshottingClusterId))
  add(query_774782, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774782, "EngineVersion", newJString(EngineVersion))
  add(query_774782, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  if SecurityGroupIds != nil:
    query_774782.add "SecurityGroupIds", SecurityGroupIds
  add(query_774782, "ReplicationGroupDescription",
      newJString(ReplicationGroupDescription))
  if CacheSecurityGroupNames != nil:
    query_774782.add "CacheSecurityGroupNames", CacheSecurityGroupNames
  add(query_774782, "AutomaticFailoverEnabled", newJBool(AutomaticFailoverEnabled))
  add(query_774782, "Version", newJString(Version))
  add(query_774782, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_774782, "SnapshotWindow", newJString(SnapshotWindow))
  result = call_774781.call(nil, query_774782, nil, nil, nil)

var getModifyReplicationGroup* = Call_GetModifyReplicationGroup_774750(
    name: "getModifyReplicationGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ModifyReplicationGroup",
    validator: validate_GetModifyReplicationGroup_774751, base: "/",
    url: url_GetModifyReplicationGroup_774752,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyReplicationGroupShardConfiguration_774838 = ref object of OpenApiRestCall_772597
proc url_PostModifyReplicationGroupShardConfiguration_774840(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostModifyReplicationGroupShardConfiguration_774839(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774841 = query.getOrDefault("Action")
  valid_774841 = validateParameter(valid_774841, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_774841 != nil:
    section.add "Action", valid_774841
  var valid_774842 = query.getOrDefault("Version")
  valid_774842 = validateParameter(valid_774842, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774842 != nil:
    section.add "Version", valid_774842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774843 = header.getOrDefault("X-Amz-Date")
  valid_774843 = validateParameter(valid_774843, JString, required = false,
                                 default = nil)
  if valid_774843 != nil:
    section.add "X-Amz-Date", valid_774843
  var valid_774844 = header.getOrDefault("X-Amz-Security-Token")
  valid_774844 = validateParameter(valid_774844, JString, required = false,
                                 default = nil)
  if valid_774844 != nil:
    section.add "X-Amz-Security-Token", valid_774844
  var valid_774845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774845 = validateParameter(valid_774845, JString, required = false,
                                 default = nil)
  if valid_774845 != nil:
    section.add "X-Amz-Content-Sha256", valid_774845
  var valid_774846 = header.getOrDefault("X-Amz-Algorithm")
  valid_774846 = validateParameter(valid_774846, JString, required = false,
                                 default = nil)
  if valid_774846 != nil:
    section.add "X-Amz-Algorithm", valid_774846
  var valid_774847 = header.getOrDefault("X-Amz-Signature")
  valid_774847 = validateParameter(valid_774847, JString, required = false,
                                 default = nil)
  if valid_774847 != nil:
    section.add "X-Amz-Signature", valid_774847
  var valid_774848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774848 = validateParameter(valid_774848, JString, required = false,
                                 default = nil)
  if valid_774848 != nil:
    section.add "X-Amz-SignedHeaders", valid_774848
  var valid_774849 = header.getOrDefault("X-Amz-Credential")
  valid_774849 = validateParameter(valid_774849, JString, required = false,
                                 default = nil)
  if valid_774849 != nil:
    section.add "X-Amz-Credential", valid_774849
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  section = newJObject()
  var valid_774850 = formData.getOrDefault("ReshardingConfiguration")
  valid_774850 = validateParameter(valid_774850, JArray, required = false,
                                 default = nil)
  if valid_774850 != nil:
    section.add "ReshardingConfiguration", valid_774850
  assert formData != nil, "formData argument is necessary due to required `ApplyImmediately` field"
  var valid_774851 = formData.getOrDefault("ApplyImmediately")
  valid_774851 = validateParameter(valid_774851, JBool, required = true, default = nil)
  if valid_774851 != nil:
    section.add "ApplyImmediately", valid_774851
  var valid_774852 = formData.getOrDefault("NodeGroupCount")
  valid_774852 = validateParameter(valid_774852, JInt, required = true, default = nil)
  if valid_774852 != nil:
    section.add "NodeGroupCount", valid_774852
  var valid_774853 = formData.getOrDefault("ReplicationGroupId")
  valid_774853 = validateParameter(valid_774853, JString, required = true,
                                 default = nil)
  if valid_774853 != nil:
    section.add "ReplicationGroupId", valid_774853
  var valid_774854 = formData.getOrDefault("NodeGroupsToRetain")
  valid_774854 = validateParameter(valid_774854, JArray, required = false,
                                 default = nil)
  if valid_774854 != nil:
    section.add "NodeGroupsToRetain", valid_774854
  var valid_774855 = formData.getOrDefault("NodeGroupsToRemove")
  valid_774855 = validateParameter(valid_774855, JArray, required = false,
                                 default = nil)
  if valid_774855 != nil:
    section.add "NodeGroupsToRemove", valid_774855
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774856: Call_PostModifyReplicationGroupShardConfiguration_774838;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_774856.validator(path, query, header, formData, body)
  let scheme = call_774856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774856.url(scheme.get, call_774856.host, call_774856.base,
                         call_774856.route, valid.getOrDefault("path"))
  result = hook(call_774856, url, valid)

proc call*(call_774857: Call_PostModifyReplicationGroupShardConfiguration_774838;
          ApplyImmediately: bool; NodeGroupCount: int; ReplicationGroupId: string;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRetain: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          NodeGroupsToRemove: JsonNode = nil; Version: string = "2015-02-02"): Recallable =
  ## postModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   Action: string (required)
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Version: string (required)
  var query_774858 = newJObject()
  var formData_774859 = newJObject()
  if ReshardingConfiguration != nil:
    formData_774859.add "ReshardingConfiguration", ReshardingConfiguration
  add(formData_774859, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_774859, "NodeGroupCount", newJInt(NodeGroupCount))
  add(formData_774859, "ReplicationGroupId", newJString(ReplicationGroupId))
  if NodeGroupsToRetain != nil:
    formData_774859.add "NodeGroupsToRetain", NodeGroupsToRetain
  add(query_774858, "Action", newJString(Action))
  if NodeGroupsToRemove != nil:
    formData_774859.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_774858, "Version", newJString(Version))
  result = call_774857.call(nil, query_774858, nil, formData_774859, nil)

var postModifyReplicationGroupShardConfiguration* = Call_PostModifyReplicationGroupShardConfiguration_774838(
    name: "postModifyReplicationGroupShardConfiguration",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_PostModifyReplicationGroupShardConfiguration_774839,
    base: "/", url: url_PostModifyReplicationGroupShardConfiguration_774840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyReplicationGroupShardConfiguration_774817 = ref object of OpenApiRestCall_772597
proc url_GetModifyReplicationGroupShardConfiguration_774819(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetModifyReplicationGroupShardConfiguration_774818(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NodeGroupCount: JInt (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NodeGroupCount` field"
  var valid_774820 = query.getOrDefault("NodeGroupCount")
  valid_774820 = validateParameter(valid_774820, JInt, required = true, default = nil)
  if valid_774820 != nil:
    section.add "NodeGroupCount", valid_774820
  var valid_774821 = query.getOrDefault("NodeGroupsToRetain")
  valid_774821 = validateParameter(valid_774821, JArray, required = false,
                                 default = nil)
  if valid_774821 != nil:
    section.add "NodeGroupsToRetain", valid_774821
  var valid_774822 = query.getOrDefault("ReshardingConfiguration")
  valid_774822 = validateParameter(valid_774822, JArray, required = false,
                                 default = nil)
  if valid_774822 != nil:
    section.add "ReshardingConfiguration", valid_774822
  var valid_774823 = query.getOrDefault("NodeGroupsToRemove")
  valid_774823 = validateParameter(valid_774823, JArray, required = false,
                                 default = nil)
  if valid_774823 != nil:
    section.add "NodeGroupsToRemove", valid_774823
  var valid_774824 = query.getOrDefault("Action")
  valid_774824 = validateParameter(valid_774824, JString, required = true, default = newJString(
      "ModifyReplicationGroupShardConfiguration"))
  if valid_774824 != nil:
    section.add "Action", valid_774824
  var valid_774825 = query.getOrDefault("ReplicationGroupId")
  valid_774825 = validateParameter(valid_774825, JString, required = true,
                                 default = nil)
  if valid_774825 != nil:
    section.add "ReplicationGroupId", valid_774825
  var valid_774826 = query.getOrDefault("Version")
  valid_774826 = validateParameter(valid_774826, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774826 != nil:
    section.add "Version", valid_774826
  var valid_774827 = query.getOrDefault("ApplyImmediately")
  valid_774827 = validateParameter(valid_774827, JBool, required = true, default = nil)
  if valid_774827 != nil:
    section.add "ApplyImmediately", valid_774827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774828 = header.getOrDefault("X-Amz-Date")
  valid_774828 = validateParameter(valid_774828, JString, required = false,
                                 default = nil)
  if valid_774828 != nil:
    section.add "X-Amz-Date", valid_774828
  var valid_774829 = header.getOrDefault("X-Amz-Security-Token")
  valid_774829 = validateParameter(valid_774829, JString, required = false,
                                 default = nil)
  if valid_774829 != nil:
    section.add "X-Amz-Security-Token", valid_774829
  var valid_774830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774830 = validateParameter(valid_774830, JString, required = false,
                                 default = nil)
  if valid_774830 != nil:
    section.add "X-Amz-Content-Sha256", valid_774830
  var valid_774831 = header.getOrDefault("X-Amz-Algorithm")
  valid_774831 = validateParameter(valid_774831, JString, required = false,
                                 default = nil)
  if valid_774831 != nil:
    section.add "X-Amz-Algorithm", valid_774831
  var valid_774832 = header.getOrDefault("X-Amz-Signature")
  valid_774832 = validateParameter(valid_774832, JString, required = false,
                                 default = nil)
  if valid_774832 != nil:
    section.add "X-Amz-Signature", valid_774832
  var valid_774833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774833 = validateParameter(valid_774833, JString, required = false,
                                 default = nil)
  if valid_774833 != nil:
    section.add "X-Amz-SignedHeaders", valid_774833
  var valid_774834 = header.getOrDefault("X-Amz-Credential")
  valid_774834 = validateParameter(valid_774834, JString, required = false,
                                 default = nil)
  if valid_774834 != nil:
    section.add "X-Amz-Credential", valid_774834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774835: Call_GetModifyReplicationGroupShardConfiguration_774817;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ## 
  let valid = call_774835.validator(path, query, header, formData, body)
  let scheme = call_774835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774835.url(scheme.get, call_774835.host, call_774835.base,
                         call_774835.route, valid.getOrDefault("path"))
  result = hook(call_774835, url, valid)

proc call*(call_774836: Call_GetModifyReplicationGroupShardConfiguration_774817;
          NodeGroupCount: int; ReplicationGroupId: string; ApplyImmediately: bool;
          NodeGroupsToRetain: JsonNode = nil;
          ReshardingConfiguration: JsonNode = nil;
          NodeGroupsToRemove: JsonNode = nil;
          Action: string = "ModifyReplicationGroupShardConfiguration";
          Version: string = "2015-02-02"): Recallable =
  ## getModifyReplicationGroupShardConfiguration
  ## Modifies a replication group's shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among exisiting shards.
  ##   NodeGroupCount: int (required)
  ##                 : The number of node groups (shards) that results from the modification of the shard configuration.
  ##   NodeGroupsToRetain: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRetain</code> is a list of <code>NodeGroupId</code>s to retain in the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups except those listed by <code>NodeGroupsToRetain</code> from the cluster.</p>
  ##   ReshardingConfiguration: JArray
  ##                          : <p>Specifies the preferred availability zones for each node group in the cluster. If the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster's shards. If you omit this parameter ElastiCache selects availability zones for you.</p> <p>You can specify this parameter only if the value of <code>NodeGroupCount</code> is greater than the current number of node groups (shards).</p>
  ##   NodeGroupsToRemove: JArray
  ##                     : <p>If the value of <code>NodeGroupCount</code> is less than the current number of node groups (shards), then either <code>NodeGroupsToRemove</code> or <code>NodeGroupsToRetain</code> is required. <code>NodeGroupsToRemove</code> is a list of <code>NodeGroupId</code>s to remove from the cluster.</p> <p>ElastiCache for Redis will attempt to remove all node groups listed by <code>NodeGroupsToRemove</code> from the cluster.</p>
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured.
  ##   Version: string (required)
  ##   ApplyImmediately: bool (required)
  ##                   : <p>Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is <code>true</code>.</p> <p>Value: true</p>
  var query_774837 = newJObject()
  add(query_774837, "NodeGroupCount", newJInt(NodeGroupCount))
  if NodeGroupsToRetain != nil:
    query_774837.add "NodeGroupsToRetain", NodeGroupsToRetain
  if ReshardingConfiguration != nil:
    query_774837.add "ReshardingConfiguration", ReshardingConfiguration
  if NodeGroupsToRemove != nil:
    query_774837.add "NodeGroupsToRemove", NodeGroupsToRemove
  add(query_774837, "Action", newJString(Action))
  add(query_774837, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_774837, "Version", newJString(Version))
  add(query_774837, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_774836.call(nil, query_774837, nil, nil, nil)

var getModifyReplicationGroupShardConfiguration* = Call_GetModifyReplicationGroupShardConfiguration_774817(
    name: "getModifyReplicationGroupShardConfiguration", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=ModifyReplicationGroupShardConfiguration",
    validator: validate_GetModifyReplicationGroupShardConfiguration_774818,
    base: "/", url: url_GetModifyReplicationGroupShardConfiguration_774819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedCacheNodesOffering_774878 = ref object of OpenApiRestCall_772597
proc url_PostPurchaseReservedCacheNodesOffering_774880(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostPurchaseReservedCacheNodesOffering_774879(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774881 = query.getOrDefault("Action")
  valid_774881 = validateParameter(valid_774881, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_774881 != nil:
    section.add "Action", valid_774881
  var valid_774882 = query.getOrDefault("Version")
  valid_774882 = validateParameter(valid_774882, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774882 != nil:
    section.add "Version", valid_774882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774883 = header.getOrDefault("X-Amz-Date")
  valid_774883 = validateParameter(valid_774883, JString, required = false,
                                 default = nil)
  if valid_774883 != nil:
    section.add "X-Amz-Date", valid_774883
  var valid_774884 = header.getOrDefault("X-Amz-Security-Token")
  valid_774884 = validateParameter(valid_774884, JString, required = false,
                                 default = nil)
  if valid_774884 != nil:
    section.add "X-Amz-Security-Token", valid_774884
  var valid_774885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774885 = validateParameter(valid_774885, JString, required = false,
                                 default = nil)
  if valid_774885 != nil:
    section.add "X-Amz-Content-Sha256", valid_774885
  var valid_774886 = header.getOrDefault("X-Amz-Algorithm")
  valid_774886 = validateParameter(valid_774886, JString, required = false,
                                 default = nil)
  if valid_774886 != nil:
    section.add "X-Amz-Algorithm", valid_774886
  var valid_774887 = header.getOrDefault("X-Amz-Signature")
  valid_774887 = validateParameter(valid_774887, JString, required = false,
                                 default = nil)
  if valid_774887 != nil:
    section.add "X-Amz-Signature", valid_774887
  var valid_774888 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774888 = validateParameter(valid_774888, JString, required = false,
                                 default = nil)
  if valid_774888 != nil:
    section.add "X-Amz-SignedHeaders", valid_774888
  var valid_774889 = header.getOrDefault("X-Amz-Credential")
  valid_774889 = validateParameter(valid_774889, JString, required = false,
                                 default = nil)
  if valid_774889 != nil:
    section.add "X-Amz-Credential", valid_774889
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ReservedCacheNodesOfferingId` field"
  var valid_774890 = formData.getOrDefault("ReservedCacheNodesOfferingId")
  valid_774890 = validateParameter(valid_774890, JString, required = true,
                                 default = nil)
  if valid_774890 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_774890
  var valid_774891 = formData.getOrDefault("ReservedCacheNodeId")
  valid_774891 = validateParameter(valid_774891, JString, required = false,
                                 default = nil)
  if valid_774891 != nil:
    section.add "ReservedCacheNodeId", valid_774891
  var valid_774892 = formData.getOrDefault("CacheNodeCount")
  valid_774892 = validateParameter(valid_774892, JInt, required = false, default = nil)
  if valid_774892 != nil:
    section.add "CacheNodeCount", valid_774892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774893: Call_PostPurchaseReservedCacheNodesOffering_774878;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_774893.validator(path, query, header, formData, body)
  let scheme = call_774893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774893.url(scheme.get, call_774893.host, call_774893.base,
                         call_774893.route, valid.getOrDefault("path"))
  result = hook(call_774893, url, valid)

proc call*(call_774894: Call_PostPurchaseReservedCacheNodesOffering_774878;
          ReservedCacheNodesOfferingId: string; ReservedCacheNodeId: string = "";
          Action: string = "PurchaseReservedCacheNodesOffering";
          CacheNodeCount: int = 0; Version: string = "2015-02-02"): Recallable =
  ## postPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Version: string (required)
  var query_774895 = newJObject()
  var formData_774896 = newJObject()
  add(formData_774896, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(formData_774896, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_774895, "Action", newJString(Action))
  add(formData_774896, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_774895, "Version", newJString(Version))
  result = call_774894.call(nil, query_774895, nil, formData_774896, nil)

var postPurchaseReservedCacheNodesOffering* = Call_PostPurchaseReservedCacheNodesOffering_774878(
    name: "postPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_PostPurchaseReservedCacheNodesOffering_774879, base: "/",
    url: url_PostPurchaseReservedCacheNodesOffering_774880,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedCacheNodesOffering_774860 = ref object of OpenApiRestCall_772597
proc url_GetPurchaseReservedCacheNodesOffering_774862(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetPurchaseReservedCacheNodesOffering_774861(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheNodeCount: JInt
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: JString (required)
  ##   ReservedCacheNodeId: JString
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   ReservedCacheNodesOfferingId: JString (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774863 = query.getOrDefault("CacheNodeCount")
  valid_774863 = validateParameter(valid_774863, JInt, required = false, default = nil)
  if valid_774863 != nil:
    section.add "CacheNodeCount", valid_774863
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774864 = query.getOrDefault("Action")
  valid_774864 = validateParameter(valid_774864, JString, required = true, default = newJString(
      "PurchaseReservedCacheNodesOffering"))
  if valid_774864 != nil:
    section.add "Action", valid_774864
  var valid_774865 = query.getOrDefault("ReservedCacheNodeId")
  valid_774865 = validateParameter(valid_774865, JString, required = false,
                                 default = nil)
  if valid_774865 != nil:
    section.add "ReservedCacheNodeId", valid_774865
  var valid_774866 = query.getOrDefault("ReservedCacheNodesOfferingId")
  valid_774866 = validateParameter(valid_774866, JString, required = true,
                                 default = nil)
  if valid_774866 != nil:
    section.add "ReservedCacheNodesOfferingId", valid_774866
  var valid_774867 = query.getOrDefault("Version")
  valid_774867 = validateParameter(valid_774867, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774867 != nil:
    section.add "Version", valid_774867
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774868 = header.getOrDefault("X-Amz-Date")
  valid_774868 = validateParameter(valid_774868, JString, required = false,
                                 default = nil)
  if valid_774868 != nil:
    section.add "X-Amz-Date", valid_774868
  var valid_774869 = header.getOrDefault("X-Amz-Security-Token")
  valid_774869 = validateParameter(valid_774869, JString, required = false,
                                 default = nil)
  if valid_774869 != nil:
    section.add "X-Amz-Security-Token", valid_774869
  var valid_774870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774870 = validateParameter(valid_774870, JString, required = false,
                                 default = nil)
  if valid_774870 != nil:
    section.add "X-Amz-Content-Sha256", valid_774870
  var valid_774871 = header.getOrDefault("X-Amz-Algorithm")
  valid_774871 = validateParameter(valid_774871, JString, required = false,
                                 default = nil)
  if valid_774871 != nil:
    section.add "X-Amz-Algorithm", valid_774871
  var valid_774872 = header.getOrDefault("X-Amz-Signature")
  valid_774872 = validateParameter(valid_774872, JString, required = false,
                                 default = nil)
  if valid_774872 != nil:
    section.add "X-Amz-Signature", valid_774872
  var valid_774873 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774873 = validateParameter(valid_774873, JString, required = false,
                                 default = nil)
  if valid_774873 != nil:
    section.add "X-Amz-SignedHeaders", valid_774873
  var valid_774874 = header.getOrDefault("X-Amz-Credential")
  valid_774874 = validateParameter(valid_774874, JString, required = false,
                                 default = nil)
  if valid_774874 != nil:
    section.add "X-Amz-Credential", valid_774874
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774875: Call_GetPurchaseReservedCacheNodesOffering_774860;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Allows you to purchase a reserved cache node offering.
  ## 
  let valid = call_774875.validator(path, query, header, formData, body)
  let scheme = call_774875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774875.url(scheme.get, call_774875.host, call_774875.base,
                         call_774875.route, valid.getOrDefault("path"))
  result = hook(call_774875, url, valid)

proc call*(call_774876: Call_GetPurchaseReservedCacheNodesOffering_774860;
          ReservedCacheNodesOfferingId: string; CacheNodeCount: int = 0;
          Action: string = "PurchaseReservedCacheNodesOffering";
          ReservedCacheNodeId: string = ""; Version: string = "2015-02-02"): Recallable =
  ## getPurchaseReservedCacheNodesOffering
  ## Allows you to purchase a reserved cache node offering.
  ##   CacheNodeCount: int
  ##                 : <p>The number of cache node instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedCacheNodeId: string
  ##                      : <p>A customer-specified identifier to track this reservation.</p> <note> <p>The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.</p> </note> <p>Example: myreservationID</p>
  ##   ReservedCacheNodesOfferingId: string (required)
  ##                               : <p>The ID of the reserved cache node offering to purchase.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_774877 = newJObject()
  add(query_774877, "CacheNodeCount", newJInt(CacheNodeCount))
  add(query_774877, "Action", newJString(Action))
  add(query_774877, "ReservedCacheNodeId", newJString(ReservedCacheNodeId))
  add(query_774877, "ReservedCacheNodesOfferingId",
      newJString(ReservedCacheNodesOfferingId))
  add(query_774877, "Version", newJString(Version))
  result = call_774876.call(nil, query_774877, nil, nil, nil)

var getPurchaseReservedCacheNodesOffering* = Call_GetPurchaseReservedCacheNodesOffering_774860(
    name: "getPurchaseReservedCacheNodesOffering", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=PurchaseReservedCacheNodesOffering",
    validator: validate_GetPurchaseReservedCacheNodesOffering_774861, base: "/",
    url: url_GetPurchaseReservedCacheNodesOffering_774862,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootCacheCluster_774914 = ref object of OpenApiRestCall_772597
proc url_PostRebootCacheCluster_774916(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRebootCacheCluster_774915(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774917 = query.getOrDefault("Action")
  valid_774917 = validateParameter(valid_774917, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_774917 != nil:
    section.add "Action", valid_774917
  var valid_774918 = query.getOrDefault("Version")
  valid_774918 = validateParameter(valid_774918, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774918 != nil:
    section.add "Version", valid_774918
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774919 = header.getOrDefault("X-Amz-Date")
  valid_774919 = validateParameter(valid_774919, JString, required = false,
                                 default = nil)
  if valid_774919 != nil:
    section.add "X-Amz-Date", valid_774919
  var valid_774920 = header.getOrDefault("X-Amz-Security-Token")
  valid_774920 = validateParameter(valid_774920, JString, required = false,
                                 default = nil)
  if valid_774920 != nil:
    section.add "X-Amz-Security-Token", valid_774920
  var valid_774921 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774921 = validateParameter(valid_774921, JString, required = false,
                                 default = nil)
  if valid_774921 != nil:
    section.add "X-Amz-Content-Sha256", valid_774921
  var valid_774922 = header.getOrDefault("X-Amz-Algorithm")
  valid_774922 = validateParameter(valid_774922, JString, required = false,
                                 default = nil)
  if valid_774922 != nil:
    section.add "X-Amz-Algorithm", valid_774922
  var valid_774923 = header.getOrDefault("X-Amz-Signature")
  valid_774923 = validateParameter(valid_774923, JString, required = false,
                                 default = nil)
  if valid_774923 != nil:
    section.add "X-Amz-Signature", valid_774923
  var valid_774924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774924 = validateParameter(valid_774924, JString, required = false,
                                 default = nil)
  if valid_774924 != nil:
    section.add "X-Amz-SignedHeaders", valid_774924
  var valid_774925 = header.getOrDefault("X-Amz-Credential")
  valid_774925 = validateParameter(valid_774925, JString, required = false,
                                 default = nil)
  if valid_774925 != nil:
    section.add "X-Amz-Credential", valid_774925
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheNodeIdsToReboot` field"
  var valid_774926 = formData.getOrDefault("CacheNodeIdsToReboot")
  valid_774926 = validateParameter(valid_774926, JArray, required = true, default = nil)
  if valid_774926 != nil:
    section.add "CacheNodeIdsToReboot", valid_774926
  var valid_774927 = formData.getOrDefault("CacheClusterId")
  valid_774927 = validateParameter(valid_774927, JString, required = true,
                                 default = nil)
  if valid_774927 != nil:
    section.add "CacheClusterId", valid_774927
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774928: Call_PostRebootCacheCluster_774914; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_774928.validator(path, query, header, formData, body)
  let scheme = call_774928.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774928.url(scheme.get, call_774928.host, call_774928.base,
                         call_774928.route, valid.getOrDefault("path"))
  result = hook(call_774928, url, valid)

proc call*(call_774929: Call_PostRebootCacheCluster_774914;
          CacheNodeIdsToReboot: JsonNode; CacheClusterId: string;
          Action: string = "RebootCacheCluster"; Version: string = "2015-02-02"): Recallable =
  ## postRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   Action: string (required)
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Version: string (required)
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  var query_774930 = newJObject()
  var formData_774931 = newJObject()
  add(query_774930, "Action", newJString(Action))
  if CacheNodeIdsToReboot != nil:
    formData_774931.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_774930, "Version", newJString(Version))
  add(formData_774931, "CacheClusterId", newJString(CacheClusterId))
  result = call_774929.call(nil, query_774930, nil, formData_774931, nil)

var postRebootCacheCluster* = Call_PostRebootCacheCluster_774914(
    name: "postRebootCacheCluster", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_PostRebootCacheCluster_774915, base: "/",
    url: url_PostRebootCacheCluster_774916, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootCacheCluster_774897 = ref object of OpenApiRestCall_772597
proc url_GetRebootCacheCluster_774899(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRebootCacheCluster_774898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheClusterId: JString (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `CacheClusterId` field"
  var valid_774900 = query.getOrDefault("CacheClusterId")
  valid_774900 = validateParameter(valid_774900, JString, required = true,
                                 default = nil)
  if valid_774900 != nil:
    section.add "CacheClusterId", valid_774900
  var valid_774901 = query.getOrDefault("CacheNodeIdsToReboot")
  valid_774901 = validateParameter(valid_774901, JArray, required = true, default = nil)
  if valid_774901 != nil:
    section.add "CacheNodeIdsToReboot", valid_774901
  var valid_774902 = query.getOrDefault("Action")
  valid_774902 = validateParameter(valid_774902, JString, required = true,
                                 default = newJString("RebootCacheCluster"))
  if valid_774902 != nil:
    section.add "Action", valid_774902
  var valid_774903 = query.getOrDefault("Version")
  valid_774903 = validateParameter(valid_774903, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774903 != nil:
    section.add "Version", valid_774903
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774904 = header.getOrDefault("X-Amz-Date")
  valid_774904 = validateParameter(valid_774904, JString, required = false,
                                 default = nil)
  if valid_774904 != nil:
    section.add "X-Amz-Date", valid_774904
  var valid_774905 = header.getOrDefault("X-Amz-Security-Token")
  valid_774905 = validateParameter(valid_774905, JString, required = false,
                                 default = nil)
  if valid_774905 != nil:
    section.add "X-Amz-Security-Token", valid_774905
  var valid_774906 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774906 = validateParameter(valid_774906, JString, required = false,
                                 default = nil)
  if valid_774906 != nil:
    section.add "X-Amz-Content-Sha256", valid_774906
  var valid_774907 = header.getOrDefault("X-Amz-Algorithm")
  valid_774907 = validateParameter(valid_774907, JString, required = false,
                                 default = nil)
  if valid_774907 != nil:
    section.add "X-Amz-Algorithm", valid_774907
  var valid_774908 = header.getOrDefault("X-Amz-Signature")
  valid_774908 = validateParameter(valid_774908, JString, required = false,
                                 default = nil)
  if valid_774908 != nil:
    section.add "X-Amz-Signature", valid_774908
  var valid_774909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774909 = validateParameter(valid_774909, JString, required = false,
                                 default = nil)
  if valid_774909 != nil:
    section.add "X-Amz-SignedHeaders", valid_774909
  var valid_774910 = header.getOrDefault("X-Amz-Credential")
  valid_774910 = validateParameter(valid_774910, JString, required = false,
                                 default = nil)
  if valid_774910 != nil:
    section.add "X-Amz-Credential", valid_774910
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774911: Call_GetRebootCacheCluster_774897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ## 
  let valid = call_774911.validator(path, query, header, formData, body)
  let scheme = call_774911.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774911.url(scheme.get, call_774911.host, call_774911.base,
                         call_774911.route, valid.getOrDefault("path"))
  result = hook(call_774911, url, valid)

proc call*(call_774912: Call_GetRebootCacheCluster_774897; CacheClusterId: string;
          CacheNodeIdsToReboot: JsonNode; Action: string = "RebootCacheCluster";
          Version: string = "2015-02-02"): Recallable =
  ## getRebootCacheCluster
  ## <p>Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.</p> <p>The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.</p> <p>When the reboot is complete, a cluster event is created.</p> <p>Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.</p> <p>If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see <a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Rebooting.html">Rebooting a Cluster</a> for an alternate process.</p>
  ##   CacheClusterId: string (required)
  ##                 : The cluster identifier. This parameter is stored as a lowercase string.
  ##   CacheNodeIdsToReboot: JArray (required)
  ##                       : A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_774913 = newJObject()
  add(query_774913, "CacheClusterId", newJString(CacheClusterId))
  if CacheNodeIdsToReboot != nil:
    query_774913.add "CacheNodeIdsToReboot", CacheNodeIdsToReboot
  add(query_774913, "Action", newJString(Action))
  add(query_774913, "Version", newJString(Version))
  result = call_774912.call(nil, query_774913, nil, nil, nil)

var getRebootCacheCluster* = Call_GetRebootCacheCluster_774897(
    name: "getRebootCacheCluster", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RebootCacheCluster",
    validator: validate_GetRebootCacheCluster_774898, base: "/",
    url: url_GetRebootCacheCluster_774899, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_774949 = ref object of OpenApiRestCall_772597
proc url_PostRemoveTagsFromResource_774951(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRemoveTagsFromResource_774950(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774952 = query.getOrDefault("Action")
  valid_774952 = validateParameter(valid_774952, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_774952 != nil:
    section.add "Action", valid_774952
  var valid_774953 = query.getOrDefault("Version")
  valid_774953 = validateParameter(valid_774953, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774953 != nil:
    section.add "Version", valid_774953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774954 = header.getOrDefault("X-Amz-Date")
  valid_774954 = validateParameter(valid_774954, JString, required = false,
                                 default = nil)
  if valid_774954 != nil:
    section.add "X-Amz-Date", valid_774954
  var valid_774955 = header.getOrDefault("X-Amz-Security-Token")
  valid_774955 = validateParameter(valid_774955, JString, required = false,
                                 default = nil)
  if valid_774955 != nil:
    section.add "X-Amz-Security-Token", valid_774955
  var valid_774956 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774956 = validateParameter(valid_774956, JString, required = false,
                                 default = nil)
  if valid_774956 != nil:
    section.add "X-Amz-Content-Sha256", valid_774956
  var valid_774957 = header.getOrDefault("X-Amz-Algorithm")
  valid_774957 = validateParameter(valid_774957, JString, required = false,
                                 default = nil)
  if valid_774957 != nil:
    section.add "X-Amz-Algorithm", valid_774957
  var valid_774958 = header.getOrDefault("X-Amz-Signature")
  valid_774958 = validateParameter(valid_774958, JString, required = false,
                                 default = nil)
  if valid_774958 != nil:
    section.add "X-Amz-Signature", valid_774958
  var valid_774959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774959 = validateParameter(valid_774959, JString, required = false,
                                 default = nil)
  if valid_774959 != nil:
    section.add "X-Amz-SignedHeaders", valid_774959
  var valid_774960 = header.getOrDefault("X-Amz-Credential")
  valid_774960 = validateParameter(valid_774960, JString, required = false,
                                 default = nil)
  if valid_774960 != nil:
    section.add "X-Amz-Credential", valid_774960
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_774961 = formData.getOrDefault("TagKeys")
  valid_774961 = validateParameter(valid_774961, JArray, required = true, default = nil)
  if valid_774961 != nil:
    section.add "TagKeys", valid_774961
  var valid_774962 = formData.getOrDefault("ResourceName")
  valid_774962 = validateParameter(valid_774962, JString, required = true,
                                 default = nil)
  if valid_774962 != nil:
    section.add "ResourceName", valid_774962
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774963: Call_PostRemoveTagsFromResource_774949; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_774963.validator(path, query, header, formData, body)
  let scheme = call_774963.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774963.url(scheme.get, call_774963.host, call_774963.base,
                         call_774963.route, valid.getOrDefault("path"))
  result = hook(call_774963, url, valid)

proc call*(call_774964: Call_PostRemoveTagsFromResource_774949; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2015-02-02"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Version: string (required)
  var query_774965 = newJObject()
  var formData_774966 = newJObject()
  add(query_774965, "Action", newJString(Action))
  if TagKeys != nil:
    formData_774966.add "TagKeys", TagKeys
  add(formData_774966, "ResourceName", newJString(ResourceName))
  add(query_774965, "Version", newJString(Version))
  result = call_774964.call(nil, query_774965, nil, formData_774966, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_774949(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_774950, base: "/",
    url: url_PostRemoveTagsFromResource_774951,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_774932 = ref object of OpenApiRestCall_772597
proc url_GetRemoveTagsFromResource_774934(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRemoveTagsFromResource_774933(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_774935 = query.getOrDefault("ResourceName")
  valid_774935 = validateParameter(valid_774935, JString, required = true,
                                 default = nil)
  if valid_774935 != nil:
    section.add "ResourceName", valid_774935
  var valid_774936 = query.getOrDefault("Action")
  valid_774936 = validateParameter(valid_774936, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_774936 != nil:
    section.add "Action", valid_774936
  var valid_774937 = query.getOrDefault("TagKeys")
  valid_774937 = validateParameter(valid_774937, JArray, required = true, default = nil)
  if valid_774937 != nil:
    section.add "TagKeys", valid_774937
  var valid_774938 = query.getOrDefault("Version")
  valid_774938 = validateParameter(valid_774938, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774938 != nil:
    section.add "Version", valid_774938
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774939 = header.getOrDefault("X-Amz-Date")
  valid_774939 = validateParameter(valid_774939, JString, required = false,
                                 default = nil)
  if valid_774939 != nil:
    section.add "X-Amz-Date", valid_774939
  var valid_774940 = header.getOrDefault("X-Amz-Security-Token")
  valid_774940 = validateParameter(valid_774940, JString, required = false,
                                 default = nil)
  if valid_774940 != nil:
    section.add "X-Amz-Security-Token", valid_774940
  var valid_774941 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774941 = validateParameter(valid_774941, JString, required = false,
                                 default = nil)
  if valid_774941 != nil:
    section.add "X-Amz-Content-Sha256", valid_774941
  var valid_774942 = header.getOrDefault("X-Amz-Algorithm")
  valid_774942 = validateParameter(valid_774942, JString, required = false,
                                 default = nil)
  if valid_774942 != nil:
    section.add "X-Amz-Algorithm", valid_774942
  var valid_774943 = header.getOrDefault("X-Amz-Signature")
  valid_774943 = validateParameter(valid_774943, JString, required = false,
                                 default = nil)
  if valid_774943 != nil:
    section.add "X-Amz-Signature", valid_774943
  var valid_774944 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774944 = validateParameter(valid_774944, JString, required = false,
                                 default = nil)
  if valid_774944 != nil:
    section.add "X-Amz-SignedHeaders", valid_774944
  var valid_774945 = header.getOrDefault("X-Amz-Credential")
  valid_774945 = validateParameter(valid_774945, JString, required = false,
                                 default = nil)
  if valid_774945 != nil:
    section.add "X-Amz-Credential", valid_774945
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774946: Call_GetRemoveTagsFromResource_774932; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ## 
  let valid = call_774946.validator(path, query, header, formData, body)
  let scheme = call_774946.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774946.url(scheme.get, call_774946.host, call_774946.base,
                         call_774946.route, valid.getOrDefault("path"))
  result = hook(call_774946, url, valid)

proc call*(call_774947: Call_GetRemoveTagsFromResource_774932;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2015-02-02"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes the tags identified by the <code>TagKeys</code> list from the named resource.
  ##   ResourceName: string (required)
  ##               : <p>The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example <code>arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster</code> or <code>arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot</code>.</p> <p>For more information about ARNs, see <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : A list of <code>TagKeys</code> identifying the tags you want removed from the named resource.
  ##   Version: string (required)
  var query_774948 = newJObject()
  add(query_774948, "ResourceName", newJString(ResourceName))
  add(query_774948, "Action", newJString(Action))
  if TagKeys != nil:
    query_774948.add "TagKeys", TagKeys
  add(query_774948, "Version", newJString(Version))
  result = call_774947.call(nil, query_774948, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_774932(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_774933, base: "/",
    url: url_GetRemoveTagsFromResource_774934,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetCacheParameterGroup_774985 = ref object of OpenApiRestCall_772597
proc url_PostResetCacheParameterGroup_774987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostResetCacheParameterGroup_774986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_774988 = query.getOrDefault("Action")
  valid_774988 = validateParameter(valid_774988, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_774988 != nil:
    section.add "Action", valid_774988
  var valid_774989 = query.getOrDefault("Version")
  valid_774989 = validateParameter(valid_774989, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774989 != nil:
    section.add "Version", valid_774989
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774990 = header.getOrDefault("X-Amz-Date")
  valid_774990 = validateParameter(valid_774990, JString, required = false,
                                 default = nil)
  if valid_774990 != nil:
    section.add "X-Amz-Date", valid_774990
  var valid_774991 = header.getOrDefault("X-Amz-Security-Token")
  valid_774991 = validateParameter(valid_774991, JString, required = false,
                                 default = nil)
  if valid_774991 != nil:
    section.add "X-Amz-Security-Token", valid_774991
  var valid_774992 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774992 = validateParameter(valid_774992, JString, required = false,
                                 default = nil)
  if valid_774992 != nil:
    section.add "X-Amz-Content-Sha256", valid_774992
  var valid_774993 = header.getOrDefault("X-Amz-Algorithm")
  valid_774993 = validateParameter(valid_774993, JString, required = false,
                                 default = nil)
  if valid_774993 != nil:
    section.add "X-Amz-Algorithm", valid_774993
  var valid_774994 = header.getOrDefault("X-Amz-Signature")
  valid_774994 = validateParameter(valid_774994, JString, required = false,
                                 default = nil)
  if valid_774994 != nil:
    section.add "X-Amz-Signature", valid_774994
  var valid_774995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774995 = validateParameter(valid_774995, JString, required = false,
                                 default = nil)
  if valid_774995 != nil:
    section.add "X-Amz-SignedHeaders", valid_774995
  var valid_774996 = header.getOrDefault("X-Amz-Credential")
  valid_774996 = validateParameter(valid_774996, JString, required = false,
                                 default = nil)
  if valid_774996 != nil:
    section.add "X-Amz-Credential", valid_774996
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheParameterGroupName` field"
  var valid_774997 = formData.getOrDefault("CacheParameterGroupName")
  valid_774997 = validateParameter(valid_774997, JString, required = true,
                                 default = nil)
  if valid_774997 != nil:
    section.add "CacheParameterGroupName", valid_774997
  var valid_774998 = formData.getOrDefault("ResetAllParameters")
  valid_774998 = validateParameter(valid_774998, JBool, required = false, default = nil)
  if valid_774998 != nil:
    section.add "ResetAllParameters", valid_774998
  var valid_774999 = formData.getOrDefault("ParameterNameValues")
  valid_774999 = validateParameter(valid_774999, JArray, required = false,
                                 default = nil)
  if valid_774999 != nil:
    section.add "ParameterNameValues", valid_774999
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775000: Call_PostResetCacheParameterGroup_774985; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_775000.validator(path, query, header, formData, body)
  let scheme = call_775000.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775000.url(scheme.get, call_775000.host, call_775000.base,
                         call_775000.route, valid.getOrDefault("path"))
  result = hook(call_775000, url, valid)

proc call*(call_775001: Call_PostResetCacheParameterGroup_774985;
          CacheParameterGroupName: string;
          Action: string = "ResetCacheParameterGroup";
          ResetAllParameters: bool = false; ParameterNameValues: JsonNode = nil;
          Version: string = "2015-02-02"): Recallable =
  ## postResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   Action: string (required)
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   Version: string (required)
  var query_775002 = newJObject()
  var formData_775003 = newJObject()
  add(query_775002, "Action", newJString(Action))
  add(formData_775003, "CacheParameterGroupName",
      newJString(CacheParameterGroupName))
  add(formData_775003, "ResetAllParameters", newJBool(ResetAllParameters))
  if ParameterNameValues != nil:
    formData_775003.add "ParameterNameValues", ParameterNameValues
  add(query_775002, "Version", newJString(Version))
  result = call_775001.call(nil, query_775002, nil, formData_775003, nil)

var postResetCacheParameterGroup* = Call_PostResetCacheParameterGroup_774985(
    name: "postResetCacheParameterGroup", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_PostResetCacheParameterGroup_774986, base: "/",
    url: url_PostResetCacheParameterGroup_774987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetCacheParameterGroup_774967 = ref object of OpenApiRestCall_772597
proc url_GetResetCacheParameterGroup_774969(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetResetCacheParameterGroup_774968(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   CacheParameterGroupName: JString (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_774970 = query.getOrDefault("ParameterNameValues")
  valid_774970 = validateParameter(valid_774970, JArray, required = false,
                                 default = nil)
  if valid_774970 != nil:
    section.add "ParameterNameValues", valid_774970
  assert query != nil, "query argument is necessary due to required `CacheParameterGroupName` field"
  var valid_774971 = query.getOrDefault("CacheParameterGroupName")
  valid_774971 = validateParameter(valid_774971, JString, required = true,
                                 default = nil)
  if valid_774971 != nil:
    section.add "CacheParameterGroupName", valid_774971
  var valid_774972 = query.getOrDefault("Action")
  valid_774972 = validateParameter(valid_774972, JString, required = true, default = newJString(
      "ResetCacheParameterGroup"))
  if valid_774972 != nil:
    section.add "Action", valid_774972
  var valid_774973 = query.getOrDefault("ResetAllParameters")
  valid_774973 = validateParameter(valid_774973, JBool, required = false, default = nil)
  if valid_774973 != nil:
    section.add "ResetAllParameters", valid_774973
  var valid_774974 = query.getOrDefault("Version")
  valid_774974 = validateParameter(valid_774974, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_774974 != nil:
    section.add "Version", valid_774974
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_774975 = header.getOrDefault("X-Amz-Date")
  valid_774975 = validateParameter(valid_774975, JString, required = false,
                                 default = nil)
  if valid_774975 != nil:
    section.add "X-Amz-Date", valid_774975
  var valid_774976 = header.getOrDefault("X-Amz-Security-Token")
  valid_774976 = validateParameter(valid_774976, JString, required = false,
                                 default = nil)
  if valid_774976 != nil:
    section.add "X-Amz-Security-Token", valid_774976
  var valid_774977 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_774977 = validateParameter(valid_774977, JString, required = false,
                                 default = nil)
  if valid_774977 != nil:
    section.add "X-Amz-Content-Sha256", valid_774977
  var valid_774978 = header.getOrDefault("X-Amz-Algorithm")
  valid_774978 = validateParameter(valid_774978, JString, required = false,
                                 default = nil)
  if valid_774978 != nil:
    section.add "X-Amz-Algorithm", valid_774978
  var valid_774979 = header.getOrDefault("X-Amz-Signature")
  valid_774979 = validateParameter(valid_774979, JString, required = false,
                                 default = nil)
  if valid_774979 != nil:
    section.add "X-Amz-Signature", valid_774979
  var valid_774980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_774980 = validateParameter(valid_774980, JString, required = false,
                                 default = nil)
  if valid_774980 != nil:
    section.add "X-Amz-SignedHeaders", valid_774980
  var valid_774981 = header.getOrDefault("X-Amz-Credential")
  valid_774981 = validateParameter(valid_774981, JString, required = false,
                                 default = nil)
  if valid_774981 != nil:
    section.add "X-Amz-Credential", valid_774981
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_774982: Call_GetResetCacheParameterGroup_774967; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ## 
  let valid = call_774982.validator(path, query, header, formData, body)
  let scheme = call_774982.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_774982.url(scheme.get, call_774982.host, call_774982.base,
                         call_774982.route, valid.getOrDefault("path"))
  result = hook(call_774982, url, valid)

proc call*(call_774983: Call_GetResetCacheParameterGroup_774967;
          CacheParameterGroupName: string; ParameterNameValues: JsonNode = nil;
          Action: string = "ResetCacheParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2015-02-02"): Recallable =
  ## getResetCacheParameterGroup
  ## Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the <code>ResetAllParameters</code> and <code>CacheParameterGroupName</code> parameters.
  ##   ParameterNameValues: JArray
  ##                      : An array of parameter names to reset to their default values. If <code>ResetAllParameters</code> is <code>true</code>, do not use <code>ParameterNameValues</code>. If <code>ResetAllParameters</code> is <code>false</code>, you must specify the name of at least one parameter to reset.
  ##   CacheParameterGroupName: string (required)
  ##                          : The name of the cache parameter group to reset.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>If <code>true</code>, all parameters in the cache parameter group are reset to their default values. If <code>false</code>, only the parameters listed by <code>ParameterNameValues</code> are reset to their default values.</p> <p>Valid values: <code>true</code> | <code>false</code> </p>
  ##   Version: string (required)
  var query_774984 = newJObject()
  if ParameterNameValues != nil:
    query_774984.add "ParameterNameValues", ParameterNameValues
  add(query_774984, "CacheParameterGroupName", newJString(CacheParameterGroupName))
  add(query_774984, "Action", newJString(Action))
  add(query_774984, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_774984, "Version", newJString(Version))
  result = call_774983.call(nil, query_774984, nil, nil, nil)

var getResetCacheParameterGroup* = Call_GetResetCacheParameterGroup_774967(
    name: "getResetCacheParameterGroup", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com", route: "/#Action=ResetCacheParameterGroup",
    validator: validate_GetResetCacheParameterGroup_774968, base: "/",
    url: url_GetResetCacheParameterGroup_774969,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeCacheSecurityGroupIngress_775022 = ref object of OpenApiRestCall_772597
proc url_PostRevokeCacheSecurityGroupIngress_775024(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostRevokeCacheSecurityGroupIngress_775023(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775025 = query.getOrDefault("Action")
  valid_775025 = validateParameter(valid_775025, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_775025 != nil:
    section.add "Action", valid_775025
  var valid_775026 = query.getOrDefault("Version")
  valid_775026 = validateParameter(valid_775026, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_775026 != nil:
    section.add "Version", valid_775026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775027 = header.getOrDefault("X-Amz-Date")
  valid_775027 = validateParameter(valid_775027, JString, required = false,
                                 default = nil)
  if valid_775027 != nil:
    section.add "X-Amz-Date", valid_775027
  var valid_775028 = header.getOrDefault("X-Amz-Security-Token")
  valid_775028 = validateParameter(valid_775028, JString, required = false,
                                 default = nil)
  if valid_775028 != nil:
    section.add "X-Amz-Security-Token", valid_775028
  var valid_775029 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775029 = validateParameter(valid_775029, JString, required = false,
                                 default = nil)
  if valid_775029 != nil:
    section.add "X-Amz-Content-Sha256", valid_775029
  var valid_775030 = header.getOrDefault("X-Amz-Algorithm")
  valid_775030 = validateParameter(valid_775030, JString, required = false,
                                 default = nil)
  if valid_775030 != nil:
    section.add "X-Amz-Algorithm", valid_775030
  var valid_775031 = header.getOrDefault("X-Amz-Signature")
  valid_775031 = validateParameter(valid_775031, JString, required = false,
                                 default = nil)
  if valid_775031 != nil:
    section.add "X-Amz-Signature", valid_775031
  var valid_775032 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775032 = validateParameter(valid_775032, JString, required = false,
                                 default = nil)
  if valid_775032 != nil:
    section.add "X-Amz-SignedHeaders", valid_775032
  var valid_775033 = header.getOrDefault("X-Amz-Credential")
  valid_775033 = validateParameter(valid_775033, JString, required = false,
                                 default = nil)
  if valid_775033 != nil:
    section.add "X-Amz-Credential", valid_775033
  result.add "header", section
  ## parameters in `formData` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_775034 = formData.getOrDefault("CacheSecurityGroupName")
  valid_775034 = validateParameter(valid_775034, JString, required = true,
                                 default = nil)
  if valid_775034 != nil:
    section.add "CacheSecurityGroupName", valid_775034
  var valid_775035 = formData.getOrDefault("EC2SecurityGroupName")
  valid_775035 = validateParameter(valid_775035, JString, required = true,
                                 default = nil)
  if valid_775035 != nil:
    section.add "EC2SecurityGroupName", valid_775035
  var valid_775036 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_775036 = validateParameter(valid_775036, JString, required = true,
                                 default = nil)
  if valid_775036 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_775036
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775037: Call_PostRevokeCacheSecurityGroupIngress_775022;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_775037.validator(path, query, header, formData, body)
  let scheme = call_775037.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775037.url(scheme.get, call_775037.host, call_775037.base,
                         call_775037.route, valid.getOrDefault("path"))
  result = hook(call_775037, url, valid)

proc call*(call_775038: Call_PostRevokeCacheSecurityGroupIngress_775022;
          CacheSecurityGroupName: string; EC2SecurityGroupName: string;
          EC2SecurityGroupOwnerId: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## postRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  var query_775039 = newJObject()
  var formData_775040 = newJObject()
  add(formData_775040, "CacheSecurityGroupName",
      newJString(CacheSecurityGroupName))
  add(query_775039, "Action", newJString(Action))
  add(formData_775040, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_775039, "Version", newJString(Version))
  add(formData_775040, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_775038.call(nil, query_775039, nil, formData_775040, nil)

var postRevokeCacheSecurityGroupIngress* = Call_PostRevokeCacheSecurityGroupIngress_775022(
    name: "postRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_PostRevokeCacheSecurityGroupIngress_775023, base: "/",
    url: url_PostRevokeCacheSecurityGroupIngress_775024,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeCacheSecurityGroupIngress_775004 = ref object of OpenApiRestCall_772597
proc url_GetRevokeCacheSecurityGroupIngress_775006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetRevokeCacheSecurityGroupIngress_775005(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CacheSecurityGroupName: JString (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupOwnerId: JString (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: JString (required)
  ##   EC2SecurityGroupName: JString (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CacheSecurityGroupName` field"
  var valid_775007 = query.getOrDefault("CacheSecurityGroupName")
  valid_775007 = validateParameter(valid_775007, JString, required = true,
                                 default = nil)
  if valid_775007 != nil:
    section.add "CacheSecurityGroupName", valid_775007
  var valid_775008 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_775008 = validateParameter(valid_775008, JString, required = true,
                                 default = nil)
  if valid_775008 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_775008
  var valid_775009 = query.getOrDefault("Action")
  valid_775009 = validateParameter(valid_775009, JString, required = true, default = newJString(
      "RevokeCacheSecurityGroupIngress"))
  if valid_775009 != nil:
    section.add "Action", valid_775009
  var valid_775010 = query.getOrDefault("EC2SecurityGroupName")
  valid_775010 = validateParameter(valid_775010, JString, required = true,
                                 default = nil)
  if valid_775010 != nil:
    section.add "EC2SecurityGroupName", valid_775010
  var valid_775011 = query.getOrDefault("Version")
  valid_775011 = validateParameter(valid_775011, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_775011 != nil:
    section.add "Version", valid_775011
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775012 = header.getOrDefault("X-Amz-Date")
  valid_775012 = validateParameter(valid_775012, JString, required = false,
                                 default = nil)
  if valid_775012 != nil:
    section.add "X-Amz-Date", valid_775012
  var valid_775013 = header.getOrDefault("X-Amz-Security-Token")
  valid_775013 = validateParameter(valid_775013, JString, required = false,
                                 default = nil)
  if valid_775013 != nil:
    section.add "X-Amz-Security-Token", valid_775013
  var valid_775014 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775014 = validateParameter(valid_775014, JString, required = false,
                                 default = nil)
  if valid_775014 != nil:
    section.add "X-Amz-Content-Sha256", valid_775014
  var valid_775015 = header.getOrDefault("X-Amz-Algorithm")
  valid_775015 = validateParameter(valid_775015, JString, required = false,
                                 default = nil)
  if valid_775015 != nil:
    section.add "X-Amz-Algorithm", valid_775015
  var valid_775016 = header.getOrDefault("X-Amz-Signature")
  valid_775016 = validateParameter(valid_775016, JString, required = false,
                                 default = nil)
  if valid_775016 != nil:
    section.add "X-Amz-Signature", valid_775016
  var valid_775017 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775017 = validateParameter(valid_775017, JString, required = false,
                                 default = nil)
  if valid_775017 != nil:
    section.add "X-Amz-SignedHeaders", valid_775017
  var valid_775018 = header.getOrDefault("X-Amz-Credential")
  valid_775018 = validateParameter(valid_775018, JString, required = false,
                                 default = nil)
  if valid_775018 != nil:
    section.add "X-Amz-Credential", valid_775018
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775019: Call_GetRevokeCacheSecurityGroupIngress_775004;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ## 
  let valid = call_775019.validator(path, query, header, formData, body)
  let scheme = call_775019.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775019.url(scheme.get, call_775019.host, call_775019.base,
                         call_775019.route, valid.getOrDefault("path"))
  result = hook(call_775019, url, valid)

proc call*(call_775020: Call_GetRevokeCacheSecurityGroupIngress_775004;
          CacheSecurityGroupName: string; EC2SecurityGroupOwnerId: string;
          EC2SecurityGroupName: string;
          Action: string = "RevokeCacheSecurityGroupIngress";
          Version: string = "2015-02-02"): Recallable =
  ## getRevokeCacheSecurityGroupIngress
  ## Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
  ##   CacheSecurityGroupName: string (required)
  ##                         : The name of the cache security group to revoke ingress from.
  ##   EC2SecurityGroupOwnerId: string (required)
  ##                          : The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string (required)
  ##                       : The name of the Amazon EC2 security group to revoke access from.
  ##   Version: string (required)
  var query_775021 = newJObject()
  add(query_775021, "CacheSecurityGroupName", newJString(CacheSecurityGroupName))
  add(query_775021, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_775021, "Action", newJString(Action))
  add(query_775021, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_775021, "Version", newJString(Version))
  result = call_775020.call(nil, query_775021, nil, nil, nil)

var getRevokeCacheSecurityGroupIngress* = Call_GetRevokeCacheSecurityGroupIngress_775004(
    name: "getRevokeCacheSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "elasticache.amazonaws.com",
    route: "/#Action=RevokeCacheSecurityGroupIngress",
    validator: validate_GetRevokeCacheSecurityGroupIngress_775005, base: "/",
    url: url_GetRevokeCacheSecurityGroupIngress_775006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostTestFailover_775058 = ref object of OpenApiRestCall_772597
proc url_PostTestFailover_775060(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_PostTestFailover_775059(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_775061 = query.getOrDefault("Action")
  valid_775061 = validateParameter(valid_775061, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_775061 != nil:
    section.add "Action", valid_775061
  var valid_775062 = query.getOrDefault("Version")
  valid_775062 = validateParameter(valid_775062, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_775062 != nil:
    section.add "Version", valid_775062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775063 = header.getOrDefault("X-Amz-Date")
  valid_775063 = validateParameter(valid_775063, JString, required = false,
                                 default = nil)
  if valid_775063 != nil:
    section.add "X-Amz-Date", valid_775063
  var valid_775064 = header.getOrDefault("X-Amz-Security-Token")
  valid_775064 = validateParameter(valid_775064, JString, required = false,
                                 default = nil)
  if valid_775064 != nil:
    section.add "X-Amz-Security-Token", valid_775064
  var valid_775065 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775065 = validateParameter(valid_775065, JString, required = false,
                                 default = nil)
  if valid_775065 != nil:
    section.add "X-Amz-Content-Sha256", valid_775065
  var valid_775066 = header.getOrDefault("X-Amz-Algorithm")
  valid_775066 = validateParameter(valid_775066, JString, required = false,
                                 default = nil)
  if valid_775066 != nil:
    section.add "X-Amz-Algorithm", valid_775066
  var valid_775067 = header.getOrDefault("X-Amz-Signature")
  valid_775067 = validateParameter(valid_775067, JString, required = false,
                                 default = nil)
  if valid_775067 != nil:
    section.add "X-Amz-Signature", valid_775067
  var valid_775068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775068 = validateParameter(valid_775068, JString, required = false,
                                 default = nil)
  if valid_775068 != nil:
    section.add "X-Amz-SignedHeaders", valid_775068
  var valid_775069 = header.getOrDefault("X-Amz-Credential")
  valid_775069 = validateParameter(valid_775069, JString, required = false,
                                 default = nil)
  if valid_775069 != nil:
    section.add "X-Amz-Credential", valid_775069
  result.add "header", section
  ## parameters in `formData` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `NodeGroupId` field"
  var valid_775070 = formData.getOrDefault("NodeGroupId")
  valid_775070 = validateParameter(valid_775070, JString, required = true,
                                 default = nil)
  if valid_775070 != nil:
    section.add "NodeGroupId", valid_775070
  var valid_775071 = formData.getOrDefault("ReplicationGroupId")
  valid_775071 = validateParameter(valid_775071, JString, required = true,
                                 default = nil)
  if valid_775071 != nil:
    section.add "ReplicationGroupId", valid_775071
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775072: Call_PostTestFailover_775058; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_775072.validator(path, query, header, formData, body)
  let scheme = call_775072.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775072.url(scheme.get, call_775072.host, call_775072.base,
                         call_775072.route, valid.getOrDefault("path"))
  result = hook(call_775072, url, valid)

proc call*(call_775073: Call_PostTestFailover_775058; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## postTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_775074 = newJObject()
  var formData_775075 = newJObject()
  add(formData_775075, "NodeGroupId", newJString(NodeGroupId))
  add(formData_775075, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_775074, "Action", newJString(Action))
  add(query_775074, "Version", newJString(Version))
  result = call_775073.call(nil, query_775074, nil, formData_775075, nil)

var postTestFailover* = Call_PostTestFailover_775058(name: "postTestFailover",
    meth: HttpMethod.HttpPost, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_PostTestFailover_775059,
    base: "/", url: url_PostTestFailover_775060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetTestFailover_775041 = ref object of OpenApiRestCall_772597
proc url_GetTestFailover_775043(protocol: Scheme; host: string; base: string;
                               route: string; path: JsonNode): string =
  result = $protocol & "://" & host & base & route

proc validate_GetTestFailover_775042(path: JsonNode; query: JsonNode;
                                    header: JsonNode; formData: JsonNode;
                                    body: JsonNode): JsonNode =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NodeGroupId: JString (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: JString (required)
  ##   ReplicationGroupId: JString (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `NodeGroupId` field"
  var valid_775044 = query.getOrDefault("NodeGroupId")
  valid_775044 = validateParameter(valid_775044, JString, required = true,
                                 default = nil)
  if valid_775044 != nil:
    section.add "NodeGroupId", valid_775044
  var valid_775045 = query.getOrDefault("Action")
  valid_775045 = validateParameter(valid_775045, JString, required = true,
                                 default = newJString("TestFailover"))
  if valid_775045 != nil:
    section.add "Action", valid_775045
  var valid_775046 = query.getOrDefault("ReplicationGroupId")
  valid_775046 = validateParameter(valid_775046, JString, required = true,
                                 default = nil)
  if valid_775046 != nil:
    section.add "ReplicationGroupId", valid_775046
  var valid_775047 = query.getOrDefault("Version")
  valid_775047 = validateParameter(valid_775047, JString, required = true,
                                 default = newJString("2015-02-02"))
  if valid_775047 != nil:
    section.add "Version", valid_775047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_775048 = header.getOrDefault("X-Amz-Date")
  valid_775048 = validateParameter(valid_775048, JString, required = false,
                                 default = nil)
  if valid_775048 != nil:
    section.add "X-Amz-Date", valid_775048
  var valid_775049 = header.getOrDefault("X-Amz-Security-Token")
  valid_775049 = validateParameter(valid_775049, JString, required = false,
                                 default = nil)
  if valid_775049 != nil:
    section.add "X-Amz-Security-Token", valid_775049
  var valid_775050 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_775050 = validateParameter(valid_775050, JString, required = false,
                                 default = nil)
  if valid_775050 != nil:
    section.add "X-Amz-Content-Sha256", valid_775050
  var valid_775051 = header.getOrDefault("X-Amz-Algorithm")
  valid_775051 = validateParameter(valid_775051, JString, required = false,
                                 default = nil)
  if valid_775051 != nil:
    section.add "X-Amz-Algorithm", valid_775051
  var valid_775052 = header.getOrDefault("X-Amz-Signature")
  valid_775052 = validateParameter(valid_775052, JString, required = false,
                                 default = nil)
  if valid_775052 != nil:
    section.add "X-Amz-Signature", valid_775052
  var valid_775053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_775053 = validateParameter(valid_775053, JString, required = false,
                                 default = nil)
  if valid_775053 != nil:
    section.add "X-Amz-SignedHeaders", valid_775053
  var valid_775054 = header.getOrDefault("X-Amz-Credential")
  valid_775054 = validateParameter(valid_775054, JString, required = false,
                                 default = nil)
  if valid_775054 != nil:
    section.add "X-Amz-Credential", valid_775054
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_775055: Call_GetTestFailover_775041; path: JsonNode; query: JsonNode;
          header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ## 
  let valid = call_775055.validator(path, query, header, formData, body)
  let scheme = call_775055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_775055.url(scheme.get, call_775055.host, call_775055.base,
                         call_775055.route, valid.getOrDefault("path"))
  result = hook(call_775055, url, valid)

proc call*(call_775056: Call_GetTestFailover_775041; NodeGroupId: string;
          ReplicationGroupId: string; Action: string = "TestFailover";
          Version: string = "2015-02-02"): Recallable =
  ## getTestFailover
  ## <p>Represents the input of a <code>TestFailover</code> operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).</p> <p class="title"> <b>Note the following</b> </p> <ul> <li> <p>A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and AWS CLI) in any rolling 24-hour period.</p> </li> <li> <p>If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.</p> <p> </p> </li> <li> <p>If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.</p> </li> <li> <p>To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the AWS CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:</p> <ol> <li> <p>Replication group message: <code>Test Failover API called for node group &lt;node-group-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Replication group message: <code>Failover from master node &lt;primary-node-id&gt; to replica node &lt;node-id&gt; completed</code> </p> </li> <li> <p>Cache cluster message: <code>Recovering cache nodes &lt;node-id&gt;</code> </p> </li> <li> <p>Cache cluster message: <code>Finished recovery for cache nodes &lt;node-id&gt;</code> </p> </li> </ol> <p>For more information see:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html">Viewing ElastiCache Events</a> in the <i>ElastiCache User Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html">DescribeEvents</a> in the ElastiCache API Reference</p> </li> </ul> </li> </ul> <p>Also see, <a href="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test">Testing Multi-AZ with Automatic Failover</a> in the <i>ElastiCache User Guide</i>.</p>
  ##   NodeGroupId: string (required)
  ##              : The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
  ##   Action: string (required)
  ##   ReplicationGroupId: string (required)
  ##                     : The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
  ##   Version: string (required)
  var query_775057 = newJObject()
  add(query_775057, "NodeGroupId", newJString(NodeGroupId))
  add(query_775057, "Action", newJString(Action))
  add(query_775057, "ReplicationGroupId", newJString(ReplicationGroupId))
  add(query_775057, "Version", newJString(Version))
  result = call_775056.call(nil, query_775057, nil, nil, nil)

var getTestFailover* = Call_GetTestFailover_775041(name: "getTestFailover",
    meth: HttpMethod.HttpGet, host: "elasticache.amazonaws.com",
    route: "/#Action=TestFailover", validator: validate_GetTestFailover_775042,
    base: "/", url: url_GetTestFailover_775043, schemes: {Scheme.Https, Scheme.Http})
proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  echo recall.headers
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: string; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, "")
  result.sign(input.getOrDefault("query"), SHA256)
