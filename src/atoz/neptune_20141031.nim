
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Neptune
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_605573 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_605573](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_605573): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "neptune"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_606183 = ref object of OpenApiRestCall_605573
proc url_PostAddRoleToDBCluster_606185(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_606184(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606186 = query.getOrDefault("Action")
  valid_606186 = validateParameter(valid_606186, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_606186 != nil:
    section.add "Action", valid_606186
  var valid_606187 = query.getOrDefault("Version")
  valid_606187 = validateParameter(valid_606187, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606187 != nil:
    section.add "Version", valid_606187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606188 = header.getOrDefault("X-Amz-Signature")
  valid_606188 = validateParameter(valid_606188, JString, required = false,
                                 default = nil)
  if valid_606188 != nil:
    section.add "X-Amz-Signature", valid_606188
  var valid_606189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606189 = validateParameter(valid_606189, JString, required = false,
                                 default = nil)
  if valid_606189 != nil:
    section.add "X-Amz-Content-Sha256", valid_606189
  var valid_606190 = header.getOrDefault("X-Amz-Date")
  valid_606190 = validateParameter(valid_606190, JString, required = false,
                                 default = nil)
  if valid_606190 != nil:
    section.add "X-Amz-Date", valid_606190
  var valid_606191 = header.getOrDefault("X-Amz-Credential")
  valid_606191 = validateParameter(valid_606191, JString, required = false,
                                 default = nil)
  if valid_606191 != nil:
    section.add "X-Amz-Credential", valid_606191
  var valid_606192 = header.getOrDefault("X-Amz-Security-Token")
  valid_606192 = validateParameter(valid_606192, JString, required = false,
                                 default = nil)
  if valid_606192 != nil:
    section.add "X-Amz-Security-Token", valid_606192
  var valid_606193 = header.getOrDefault("X-Amz-Algorithm")
  valid_606193 = validateParameter(valid_606193, JString, required = false,
                                 default = nil)
  if valid_606193 != nil:
    section.add "X-Amz-Algorithm", valid_606193
  var valid_606194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606194 = validateParameter(valid_606194, JString, required = false,
                                 default = nil)
  if valid_606194 != nil:
    section.add "X-Amz-SignedHeaders", valid_606194
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_606195 = formData.getOrDefault("RoleArn")
  valid_606195 = validateParameter(valid_606195, JString, required = true,
                                 default = nil)
  if valid_606195 != nil:
    section.add "RoleArn", valid_606195
  var valid_606196 = formData.getOrDefault("DBClusterIdentifier")
  valid_606196 = validateParameter(valid_606196, JString, required = true,
                                 default = nil)
  if valid_606196 != nil:
    section.add "DBClusterIdentifier", valid_606196
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606197: Call_PostAddRoleToDBCluster_606183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_606197.validator(path, query, header, formData, body)
  let scheme = call_606197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606197.url(scheme.get, call_606197.host, call_606197.base,
                         call_606197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606197, url, valid)

proc call*(call_606198: Call_PostAddRoleToDBCluster_606183; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_606199 = newJObject()
  var formData_606200 = newJObject()
  add(formData_606200, "RoleArn", newJString(RoleArn))
  add(query_606199, "Action", newJString(Action))
  add(query_606199, "Version", newJString(Version))
  add(formData_606200, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606198.call(nil, query_606199, nil, formData_606200, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_606183(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_606184, base: "/",
    url: url_PostAddRoleToDBCluster_606185, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_605911 = ref object of OpenApiRestCall_605573
proc url_GetAddRoleToDBCluster_605913(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_605912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_606025 = query.getOrDefault("RoleArn")
  valid_606025 = validateParameter(valid_606025, JString, required = true,
                                 default = nil)
  if valid_606025 != nil:
    section.add "RoleArn", valid_606025
  var valid_606026 = query.getOrDefault("DBClusterIdentifier")
  valid_606026 = validateParameter(valid_606026, JString, required = true,
                                 default = nil)
  if valid_606026 != nil:
    section.add "DBClusterIdentifier", valid_606026
  var valid_606040 = query.getOrDefault("Action")
  valid_606040 = validateParameter(valid_606040, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_606040 != nil:
    section.add "Action", valid_606040
  var valid_606041 = query.getOrDefault("Version")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606041 != nil:
    section.add "Version", valid_606041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606042 = header.getOrDefault("X-Amz-Signature")
  valid_606042 = validateParameter(valid_606042, JString, required = false,
                                 default = nil)
  if valid_606042 != nil:
    section.add "X-Amz-Signature", valid_606042
  var valid_606043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606043 = validateParameter(valid_606043, JString, required = false,
                                 default = nil)
  if valid_606043 != nil:
    section.add "X-Amz-Content-Sha256", valid_606043
  var valid_606044 = header.getOrDefault("X-Amz-Date")
  valid_606044 = validateParameter(valid_606044, JString, required = false,
                                 default = nil)
  if valid_606044 != nil:
    section.add "X-Amz-Date", valid_606044
  var valid_606045 = header.getOrDefault("X-Amz-Credential")
  valid_606045 = validateParameter(valid_606045, JString, required = false,
                                 default = nil)
  if valid_606045 != nil:
    section.add "X-Amz-Credential", valid_606045
  var valid_606046 = header.getOrDefault("X-Amz-Security-Token")
  valid_606046 = validateParameter(valid_606046, JString, required = false,
                                 default = nil)
  if valid_606046 != nil:
    section.add "X-Amz-Security-Token", valid_606046
  var valid_606047 = header.getOrDefault("X-Amz-Algorithm")
  valid_606047 = validateParameter(valid_606047, JString, required = false,
                                 default = nil)
  if valid_606047 != nil:
    section.add "X-Amz-Algorithm", valid_606047
  var valid_606048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606048 = validateParameter(valid_606048, JString, required = false,
                                 default = nil)
  if valid_606048 != nil:
    section.add "X-Amz-SignedHeaders", valid_606048
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606071: Call_GetAddRoleToDBCluster_605911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_606071.validator(path, query, header, formData, body)
  let scheme = call_606071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606071.url(scheme.get, call_606071.host, call_606071.base,
                         call_606071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606071, url, valid)

proc call*(call_606142: Call_GetAddRoleToDBCluster_605911; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606143 = newJObject()
  add(query_606143, "RoleArn", newJString(RoleArn))
  add(query_606143, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606143, "Action", newJString(Action))
  add(query_606143, "Version", newJString(Version))
  result = call_606142.call(nil, query_606143, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_605911(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_605912, base: "/",
    url: url_GetAddRoleToDBCluster_605913, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_606218 = ref object of OpenApiRestCall_605573
proc url_PostAddSourceIdentifierToSubscription_606220(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_606219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606221 = query.getOrDefault("Action")
  valid_606221 = validateParameter(valid_606221, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_606221 != nil:
    section.add "Action", valid_606221
  var valid_606222 = query.getOrDefault("Version")
  valid_606222 = validateParameter(valid_606222, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606222 != nil:
    section.add "Version", valid_606222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606223 = header.getOrDefault("X-Amz-Signature")
  valid_606223 = validateParameter(valid_606223, JString, required = false,
                                 default = nil)
  if valid_606223 != nil:
    section.add "X-Amz-Signature", valid_606223
  var valid_606224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "X-Amz-Content-Sha256", valid_606224
  var valid_606225 = header.getOrDefault("X-Amz-Date")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-Date", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-Credential")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-Credential", valid_606226
  var valid_606227 = header.getOrDefault("X-Amz-Security-Token")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "X-Amz-Security-Token", valid_606227
  var valid_606228 = header.getOrDefault("X-Amz-Algorithm")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "X-Amz-Algorithm", valid_606228
  var valid_606229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "X-Amz-SignedHeaders", valid_606229
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_606230 = formData.getOrDefault("SubscriptionName")
  valid_606230 = validateParameter(valid_606230, JString, required = true,
                                 default = nil)
  if valid_606230 != nil:
    section.add "SubscriptionName", valid_606230
  var valid_606231 = formData.getOrDefault("SourceIdentifier")
  valid_606231 = validateParameter(valid_606231, JString, required = true,
                                 default = nil)
  if valid_606231 != nil:
    section.add "SourceIdentifier", valid_606231
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606232: Call_PostAddSourceIdentifierToSubscription_606218;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_606232.validator(path, query, header, formData, body)
  let scheme = call_606232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606232.url(scheme.get, call_606232.host, call_606232.base,
                         call_606232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606232, url, valid)

proc call*(call_606233: Call_PostAddSourceIdentifierToSubscription_606218;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606234 = newJObject()
  var formData_606235 = newJObject()
  add(formData_606235, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606235, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606234, "Action", newJString(Action))
  add(query_606234, "Version", newJString(Version))
  result = call_606233.call(nil, query_606234, nil, formData_606235, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_606218(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_606219, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_606220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_606201 = ref object of OpenApiRestCall_605573
proc url_GetAddSourceIdentifierToSubscription_606203(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_606202(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_606204 = query.getOrDefault("SourceIdentifier")
  valid_606204 = validateParameter(valid_606204, JString, required = true,
                                 default = nil)
  if valid_606204 != nil:
    section.add "SourceIdentifier", valid_606204
  var valid_606205 = query.getOrDefault("SubscriptionName")
  valid_606205 = validateParameter(valid_606205, JString, required = true,
                                 default = nil)
  if valid_606205 != nil:
    section.add "SubscriptionName", valid_606205
  var valid_606206 = query.getOrDefault("Action")
  valid_606206 = validateParameter(valid_606206, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_606206 != nil:
    section.add "Action", valid_606206
  var valid_606207 = query.getOrDefault("Version")
  valid_606207 = validateParameter(valid_606207, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606207 != nil:
    section.add "Version", valid_606207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606208 = header.getOrDefault("X-Amz-Signature")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Signature", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Content-Sha256", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-Date")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-Date", valid_606210
  var valid_606211 = header.getOrDefault("X-Amz-Credential")
  valid_606211 = validateParameter(valid_606211, JString, required = false,
                                 default = nil)
  if valid_606211 != nil:
    section.add "X-Amz-Credential", valid_606211
  var valid_606212 = header.getOrDefault("X-Amz-Security-Token")
  valid_606212 = validateParameter(valid_606212, JString, required = false,
                                 default = nil)
  if valid_606212 != nil:
    section.add "X-Amz-Security-Token", valid_606212
  var valid_606213 = header.getOrDefault("X-Amz-Algorithm")
  valid_606213 = validateParameter(valid_606213, JString, required = false,
                                 default = nil)
  if valid_606213 != nil:
    section.add "X-Amz-Algorithm", valid_606213
  var valid_606214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606214 = validateParameter(valid_606214, JString, required = false,
                                 default = nil)
  if valid_606214 != nil:
    section.add "X-Amz-SignedHeaders", valid_606214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606215: Call_GetAddSourceIdentifierToSubscription_606201;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_606215.validator(path, query, header, formData, body)
  let scheme = call_606215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606215.url(scheme.get, call_606215.host, call_606215.base,
                         call_606215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606215, url, valid)

proc call*(call_606216: Call_GetAddSourceIdentifierToSubscription_606201;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606217 = newJObject()
  add(query_606217, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606217, "SubscriptionName", newJString(SubscriptionName))
  add(query_606217, "Action", newJString(Action))
  add(query_606217, "Version", newJString(Version))
  result = call_606216.call(nil, query_606217, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_606201(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_606202, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_606203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_606253 = ref object of OpenApiRestCall_605573
proc url_PostAddTagsToResource_606255(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_606254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606256 = query.getOrDefault("Action")
  valid_606256 = validateParameter(valid_606256, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606256 != nil:
    section.add "Action", valid_606256
  var valid_606257 = query.getOrDefault("Version")
  valid_606257 = validateParameter(valid_606257, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606257 != nil:
    section.add "Version", valid_606257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606258 = header.getOrDefault("X-Amz-Signature")
  valid_606258 = validateParameter(valid_606258, JString, required = false,
                                 default = nil)
  if valid_606258 != nil:
    section.add "X-Amz-Signature", valid_606258
  var valid_606259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606259 = validateParameter(valid_606259, JString, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "X-Amz-Content-Sha256", valid_606259
  var valid_606260 = header.getOrDefault("X-Amz-Date")
  valid_606260 = validateParameter(valid_606260, JString, required = false,
                                 default = nil)
  if valid_606260 != nil:
    section.add "X-Amz-Date", valid_606260
  var valid_606261 = header.getOrDefault("X-Amz-Credential")
  valid_606261 = validateParameter(valid_606261, JString, required = false,
                                 default = nil)
  if valid_606261 != nil:
    section.add "X-Amz-Credential", valid_606261
  var valid_606262 = header.getOrDefault("X-Amz-Security-Token")
  valid_606262 = validateParameter(valid_606262, JString, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "X-Amz-Security-Token", valid_606262
  var valid_606263 = header.getOrDefault("X-Amz-Algorithm")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Algorithm", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-SignedHeaders", valid_606264
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_606265 = formData.getOrDefault("Tags")
  valid_606265 = validateParameter(valid_606265, JArray, required = true, default = nil)
  if valid_606265 != nil:
    section.add "Tags", valid_606265
  var valid_606266 = formData.getOrDefault("ResourceName")
  valid_606266 = validateParameter(valid_606266, JString, required = true,
                                 default = nil)
  if valid_606266 != nil:
    section.add "ResourceName", valid_606266
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606267: Call_PostAddTagsToResource_606253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_606267.validator(path, query, header, formData, body)
  let scheme = call_606267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606267.url(scheme.get, call_606267.host, call_606267.base,
                         call_606267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606267, url, valid)

proc call*(call_606268: Call_PostAddTagsToResource_606253; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_606269 = newJObject()
  var formData_606270 = newJObject()
  add(query_606269, "Action", newJString(Action))
  if Tags != nil:
    formData_606270.add "Tags", Tags
  add(query_606269, "Version", newJString(Version))
  add(formData_606270, "ResourceName", newJString(ResourceName))
  result = call_606268.call(nil, query_606269, nil, formData_606270, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_606253(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_606254, base: "/",
    url: url_PostAddTagsToResource_606255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_606236 = ref object of OpenApiRestCall_605573
proc url_GetAddTagsToResource_606238(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_606237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_606239 = query.getOrDefault("Tags")
  valid_606239 = validateParameter(valid_606239, JArray, required = true, default = nil)
  if valid_606239 != nil:
    section.add "Tags", valid_606239
  var valid_606240 = query.getOrDefault("ResourceName")
  valid_606240 = validateParameter(valid_606240, JString, required = true,
                                 default = nil)
  if valid_606240 != nil:
    section.add "ResourceName", valid_606240
  var valid_606241 = query.getOrDefault("Action")
  valid_606241 = validateParameter(valid_606241, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606241 != nil:
    section.add "Action", valid_606241
  var valid_606242 = query.getOrDefault("Version")
  valid_606242 = validateParameter(valid_606242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606242 != nil:
    section.add "Version", valid_606242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606243 = header.getOrDefault("X-Amz-Signature")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Signature", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-Content-Sha256", valid_606244
  var valid_606245 = header.getOrDefault("X-Amz-Date")
  valid_606245 = validateParameter(valid_606245, JString, required = false,
                                 default = nil)
  if valid_606245 != nil:
    section.add "X-Amz-Date", valid_606245
  var valid_606246 = header.getOrDefault("X-Amz-Credential")
  valid_606246 = validateParameter(valid_606246, JString, required = false,
                                 default = nil)
  if valid_606246 != nil:
    section.add "X-Amz-Credential", valid_606246
  var valid_606247 = header.getOrDefault("X-Amz-Security-Token")
  valid_606247 = validateParameter(valid_606247, JString, required = false,
                                 default = nil)
  if valid_606247 != nil:
    section.add "X-Amz-Security-Token", valid_606247
  var valid_606248 = header.getOrDefault("X-Amz-Algorithm")
  valid_606248 = validateParameter(valid_606248, JString, required = false,
                                 default = nil)
  if valid_606248 != nil:
    section.add "X-Amz-Algorithm", valid_606248
  var valid_606249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606249 = validateParameter(valid_606249, JString, required = false,
                                 default = nil)
  if valid_606249 != nil:
    section.add "X-Amz-SignedHeaders", valid_606249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606250: Call_GetAddTagsToResource_606236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_606250.validator(path, query, header, formData, body)
  let scheme = call_606250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606250.url(scheme.get, call_606250.host, call_606250.base,
                         call_606250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606250, url, valid)

proc call*(call_606251: Call_GetAddTagsToResource_606236; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606252 = newJObject()
  if Tags != nil:
    query_606252.add "Tags", Tags
  add(query_606252, "ResourceName", newJString(ResourceName))
  add(query_606252, "Action", newJString(Action))
  add(query_606252, "Version", newJString(Version))
  result = call_606251.call(nil, query_606252, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_606236(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_606237, base: "/",
    url: url_GetAddTagsToResource_606238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_606289 = ref object of OpenApiRestCall_605573
proc url_PostApplyPendingMaintenanceAction_606291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_606290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606292 = query.getOrDefault("Action")
  valid_606292 = validateParameter(valid_606292, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_606292 != nil:
    section.add "Action", valid_606292
  var valid_606293 = query.getOrDefault("Version")
  valid_606293 = validateParameter(valid_606293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606293 != nil:
    section.add "Version", valid_606293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606294 = header.getOrDefault("X-Amz-Signature")
  valid_606294 = validateParameter(valid_606294, JString, required = false,
                                 default = nil)
  if valid_606294 != nil:
    section.add "X-Amz-Signature", valid_606294
  var valid_606295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606295 = validateParameter(valid_606295, JString, required = false,
                                 default = nil)
  if valid_606295 != nil:
    section.add "X-Amz-Content-Sha256", valid_606295
  var valid_606296 = header.getOrDefault("X-Amz-Date")
  valid_606296 = validateParameter(valid_606296, JString, required = false,
                                 default = nil)
  if valid_606296 != nil:
    section.add "X-Amz-Date", valid_606296
  var valid_606297 = header.getOrDefault("X-Amz-Credential")
  valid_606297 = validateParameter(valid_606297, JString, required = false,
                                 default = nil)
  if valid_606297 != nil:
    section.add "X-Amz-Credential", valid_606297
  var valid_606298 = header.getOrDefault("X-Amz-Security-Token")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "X-Amz-Security-Token", valid_606298
  var valid_606299 = header.getOrDefault("X-Amz-Algorithm")
  valid_606299 = validateParameter(valid_606299, JString, required = false,
                                 default = nil)
  if valid_606299 != nil:
    section.add "X-Amz-Algorithm", valid_606299
  var valid_606300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-SignedHeaders", valid_606300
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_606301 = formData.getOrDefault("ResourceIdentifier")
  valid_606301 = validateParameter(valid_606301, JString, required = true,
                                 default = nil)
  if valid_606301 != nil:
    section.add "ResourceIdentifier", valid_606301
  var valid_606302 = formData.getOrDefault("ApplyAction")
  valid_606302 = validateParameter(valid_606302, JString, required = true,
                                 default = nil)
  if valid_606302 != nil:
    section.add "ApplyAction", valid_606302
  var valid_606303 = formData.getOrDefault("OptInType")
  valid_606303 = validateParameter(valid_606303, JString, required = true,
                                 default = nil)
  if valid_606303 != nil:
    section.add "OptInType", valid_606303
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606304: Call_PostApplyPendingMaintenanceAction_606289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_606304.validator(path, query, header, formData, body)
  let scheme = call_606304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606304.url(scheme.get, call_606304.host, call_606304.base,
                         call_606304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606304, url, valid)

proc call*(call_606305: Call_PostApplyPendingMaintenanceAction_606289;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_606306 = newJObject()
  var formData_606307 = newJObject()
  add(formData_606307, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_606307, "ApplyAction", newJString(ApplyAction))
  add(query_606306, "Action", newJString(Action))
  add(formData_606307, "OptInType", newJString(OptInType))
  add(query_606306, "Version", newJString(Version))
  result = call_606305.call(nil, query_606306, nil, formData_606307, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_606289(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_606290, base: "/",
    url: url_PostApplyPendingMaintenanceAction_606291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_606271 = ref object of OpenApiRestCall_605573
proc url_GetApplyPendingMaintenanceAction_606273(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_606272(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_606274 = query.getOrDefault("ResourceIdentifier")
  valid_606274 = validateParameter(valid_606274, JString, required = true,
                                 default = nil)
  if valid_606274 != nil:
    section.add "ResourceIdentifier", valid_606274
  var valid_606275 = query.getOrDefault("ApplyAction")
  valid_606275 = validateParameter(valid_606275, JString, required = true,
                                 default = nil)
  if valid_606275 != nil:
    section.add "ApplyAction", valid_606275
  var valid_606276 = query.getOrDefault("Action")
  valid_606276 = validateParameter(valid_606276, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_606276 != nil:
    section.add "Action", valid_606276
  var valid_606277 = query.getOrDefault("OptInType")
  valid_606277 = validateParameter(valid_606277, JString, required = true,
                                 default = nil)
  if valid_606277 != nil:
    section.add "OptInType", valid_606277
  var valid_606278 = query.getOrDefault("Version")
  valid_606278 = validateParameter(valid_606278, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606278 != nil:
    section.add "Version", valid_606278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606279 = header.getOrDefault("X-Amz-Signature")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Signature", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-Content-Sha256", valid_606280
  var valid_606281 = header.getOrDefault("X-Amz-Date")
  valid_606281 = validateParameter(valid_606281, JString, required = false,
                                 default = nil)
  if valid_606281 != nil:
    section.add "X-Amz-Date", valid_606281
  var valid_606282 = header.getOrDefault("X-Amz-Credential")
  valid_606282 = validateParameter(valid_606282, JString, required = false,
                                 default = nil)
  if valid_606282 != nil:
    section.add "X-Amz-Credential", valid_606282
  var valid_606283 = header.getOrDefault("X-Amz-Security-Token")
  valid_606283 = validateParameter(valid_606283, JString, required = false,
                                 default = nil)
  if valid_606283 != nil:
    section.add "X-Amz-Security-Token", valid_606283
  var valid_606284 = header.getOrDefault("X-Amz-Algorithm")
  valid_606284 = validateParameter(valid_606284, JString, required = false,
                                 default = nil)
  if valid_606284 != nil:
    section.add "X-Amz-Algorithm", valid_606284
  var valid_606285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606285 = validateParameter(valid_606285, JString, required = false,
                                 default = nil)
  if valid_606285 != nil:
    section.add "X-Amz-SignedHeaders", valid_606285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606286: Call_GetApplyPendingMaintenanceAction_606271;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_606286.validator(path, query, header, formData, body)
  let scheme = call_606286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606286.url(scheme.get, call_606286.host, call_606286.base,
                         call_606286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606286, url, valid)

proc call*(call_606287: Call_GetApplyPendingMaintenanceAction_606271;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_606288 = newJObject()
  add(query_606288, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_606288, "ApplyAction", newJString(ApplyAction))
  add(query_606288, "Action", newJString(Action))
  add(query_606288, "OptInType", newJString(OptInType))
  add(query_606288, "Version", newJString(Version))
  result = call_606287.call(nil, query_606288, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_606271(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_606272, base: "/",
    url: url_GetApplyPendingMaintenanceAction_606273,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_606327 = ref object of OpenApiRestCall_605573
proc url_PostCopyDBClusterParameterGroup_606329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_606328(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606330 = query.getOrDefault("Action")
  valid_606330 = validateParameter(valid_606330, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_606330 != nil:
    section.add "Action", valid_606330
  var valid_606331 = query.getOrDefault("Version")
  valid_606331 = validateParameter(valid_606331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606331 != nil:
    section.add "Version", valid_606331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606332 = header.getOrDefault("X-Amz-Signature")
  valid_606332 = validateParameter(valid_606332, JString, required = false,
                                 default = nil)
  if valid_606332 != nil:
    section.add "X-Amz-Signature", valid_606332
  var valid_606333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606333 = validateParameter(valid_606333, JString, required = false,
                                 default = nil)
  if valid_606333 != nil:
    section.add "X-Amz-Content-Sha256", valid_606333
  var valid_606334 = header.getOrDefault("X-Amz-Date")
  valid_606334 = validateParameter(valid_606334, JString, required = false,
                                 default = nil)
  if valid_606334 != nil:
    section.add "X-Amz-Date", valid_606334
  var valid_606335 = header.getOrDefault("X-Amz-Credential")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-Credential", valid_606335
  var valid_606336 = header.getOrDefault("X-Amz-Security-Token")
  valid_606336 = validateParameter(valid_606336, JString, required = false,
                                 default = nil)
  if valid_606336 != nil:
    section.add "X-Amz-Security-Token", valid_606336
  var valid_606337 = header.getOrDefault("X-Amz-Algorithm")
  valid_606337 = validateParameter(valid_606337, JString, required = false,
                                 default = nil)
  if valid_606337 != nil:
    section.add "X-Amz-Algorithm", valid_606337
  var valid_606338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606338 = validateParameter(valid_606338, JString, required = false,
                                 default = nil)
  if valid_606338 != nil:
    section.add "X-Amz-SignedHeaders", valid_606338
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_606339 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_606339 = validateParameter(valid_606339, JString, required = true,
                                 default = nil)
  if valid_606339 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_606339
  var valid_606340 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_606340 = validateParameter(valid_606340, JString, required = true,
                                 default = nil)
  if valid_606340 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_606340
  var valid_606341 = formData.getOrDefault("Tags")
  valid_606341 = validateParameter(valid_606341, JArray, required = false,
                                 default = nil)
  if valid_606341 != nil:
    section.add "Tags", valid_606341
  var valid_606342 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_606342 = validateParameter(valid_606342, JString, required = true,
                                 default = nil)
  if valid_606342 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_606342
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606343: Call_PostCopyDBClusterParameterGroup_606327;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_606343.validator(path, query, header, formData, body)
  let scheme = call_606343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606343.url(scheme.get, call_606343.host, call_606343.base,
                         call_606343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606343, url, valid)

proc call*(call_606344: Call_PostCopyDBClusterParameterGroup_606327;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_606345 = newJObject()
  var formData_606346 = newJObject()
  add(formData_606346, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_606346, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_606345, "Action", newJString(Action))
  if Tags != nil:
    formData_606346.add "Tags", Tags
  add(query_606345, "Version", newJString(Version))
  add(formData_606346, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_606344.call(nil, query_606345, nil, formData_606346, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_606327(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_606328, base: "/",
    url: url_PostCopyDBClusterParameterGroup_606329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_606308 = ref object of OpenApiRestCall_605573
proc url_GetCopyDBClusterParameterGroup_606310(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_606309(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_606311 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_606311 = validateParameter(valid_606311, JString, required = true,
                                 default = nil)
  if valid_606311 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_606311
  var valid_606312 = query.getOrDefault("Tags")
  valid_606312 = validateParameter(valid_606312, JArray, required = false,
                                 default = nil)
  if valid_606312 != nil:
    section.add "Tags", valid_606312
  var valid_606313 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_606313 = validateParameter(valid_606313, JString, required = true,
                                 default = nil)
  if valid_606313 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_606313
  var valid_606314 = query.getOrDefault("Action")
  valid_606314 = validateParameter(valid_606314, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_606314 != nil:
    section.add "Action", valid_606314
  var valid_606315 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_606315 = validateParameter(valid_606315, JString, required = true,
                                 default = nil)
  if valid_606315 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_606315
  var valid_606316 = query.getOrDefault("Version")
  valid_606316 = validateParameter(valid_606316, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606316 != nil:
    section.add "Version", valid_606316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606317 = header.getOrDefault("X-Amz-Signature")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "X-Amz-Signature", valid_606317
  var valid_606318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606318 = validateParameter(valid_606318, JString, required = false,
                                 default = nil)
  if valid_606318 != nil:
    section.add "X-Amz-Content-Sha256", valid_606318
  var valid_606319 = header.getOrDefault("X-Amz-Date")
  valid_606319 = validateParameter(valid_606319, JString, required = false,
                                 default = nil)
  if valid_606319 != nil:
    section.add "X-Amz-Date", valid_606319
  var valid_606320 = header.getOrDefault("X-Amz-Credential")
  valid_606320 = validateParameter(valid_606320, JString, required = false,
                                 default = nil)
  if valid_606320 != nil:
    section.add "X-Amz-Credential", valid_606320
  var valid_606321 = header.getOrDefault("X-Amz-Security-Token")
  valid_606321 = validateParameter(valid_606321, JString, required = false,
                                 default = nil)
  if valid_606321 != nil:
    section.add "X-Amz-Security-Token", valid_606321
  var valid_606322 = header.getOrDefault("X-Amz-Algorithm")
  valid_606322 = validateParameter(valid_606322, JString, required = false,
                                 default = nil)
  if valid_606322 != nil:
    section.add "X-Amz-Algorithm", valid_606322
  var valid_606323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606323 = validateParameter(valid_606323, JString, required = false,
                                 default = nil)
  if valid_606323 != nil:
    section.add "X-Amz-SignedHeaders", valid_606323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606324: Call_GetCopyDBClusterParameterGroup_606308; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_606324.validator(path, query, header, formData, body)
  let scheme = call_606324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606324.url(scheme.get, call_606324.host, call_606324.base,
                         call_606324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606324, url, valid)

proc call*(call_606325: Call_GetCopyDBClusterParameterGroup_606308;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_606326 = newJObject()
  add(query_606326, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_606326.add "Tags", Tags
  add(query_606326, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_606326, "Action", newJString(Action))
  add(query_606326, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_606326, "Version", newJString(Version))
  result = call_606325.call(nil, query_606326, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_606308(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_606309, base: "/",
    url: url_GetCopyDBClusterParameterGroup_606310,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_606368 = ref object of OpenApiRestCall_605573
proc url_PostCopyDBClusterSnapshot_606370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_606369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606371 = query.getOrDefault("Action")
  valid_606371 = validateParameter(valid_606371, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_606371 != nil:
    section.add "Action", valid_606371
  var valid_606372 = query.getOrDefault("Version")
  valid_606372 = validateParameter(valid_606372, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606372 != nil:
    section.add "Version", valid_606372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606373 = header.getOrDefault("X-Amz-Signature")
  valid_606373 = validateParameter(valid_606373, JString, required = false,
                                 default = nil)
  if valid_606373 != nil:
    section.add "X-Amz-Signature", valid_606373
  var valid_606374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606374 = validateParameter(valid_606374, JString, required = false,
                                 default = nil)
  if valid_606374 != nil:
    section.add "X-Amz-Content-Sha256", valid_606374
  var valid_606375 = header.getOrDefault("X-Amz-Date")
  valid_606375 = validateParameter(valid_606375, JString, required = false,
                                 default = nil)
  if valid_606375 != nil:
    section.add "X-Amz-Date", valid_606375
  var valid_606376 = header.getOrDefault("X-Amz-Credential")
  valid_606376 = validateParameter(valid_606376, JString, required = false,
                                 default = nil)
  if valid_606376 != nil:
    section.add "X-Amz-Credential", valid_606376
  var valid_606377 = header.getOrDefault("X-Amz-Security-Token")
  valid_606377 = validateParameter(valid_606377, JString, required = false,
                                 default = nil)
  if valid_606377 != nil:
    section.add "X-Amz-Security-Token", valid_606377
  var valid_606378 = header.getOrDefault("X-Amz-Algorithm")
  valid_606378 = validateParameter(valid_606378, JString, required = false,
                                 default = nil)
  if valid_606378 != nil:
    section.add "X-Amz-Algorithm", valid_606378
  var valid_606379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606379 = validateParameter(valid_606379, JString, required = false,
                                 default = nil)
  if valid_606379 != nil:
    section.add "X-Amz-SignedHeaders", valid_606379
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_606380 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_606380 = validateParameter(valid_606380, JString, required = true,
                                 default = nil)
  if valid_606380 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_606380
  var valid_606381 = formData.getOrDefault("KmsKeyId")
  valid_606381 = validateParameter(valid_606381, JString, required = false,
                                 default = nil)
  if valid_606381 != nil:
    section.add "KmsKeyId", valid_606381
  var valid_606382 = formData.getOrDefault("PreSignedUrl")
  valid_606382 = validateParameter(valid_606382, JString, required = false,
                                 default = nil)
  if valid_606382 != nil:
    section.add "PreSignedUrl", valid_606382
  var valid_606383 = formData.getOrDefault("CopyTags")
  valid_606383 = validateParameter(valid_606383, JBool, required = false, default = nil)
  if valid_606383 != nil:
    section.add "CopyTags", valid_606383
  var valid_606384 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_606384 = validateParameter(valid_606384, JString, required = true,
                                 default = nil)
  if valid_606384 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_606384
  var valid_606385 = formData.getOrDefault("Tags")
  valid_606385 = validateParameter(valid_606385, JArray, required = false,
                                 default = nil)
  if valid_606385 != nil:
    section.add "Tags", valid_606385
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606386: Call_PostCopyDBClusterSnapshot_606368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_606386.validator(path, query, header, formData, body)
  let scheme = call_606386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606386.url(scheme.get, call_606386.host, call_606386.base,
                         call_606386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606386, url, valid)

proc call*(call_606387: Call_PostCopyDBClusterSnapshot_606368;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; KmsKeyId: string = "";
          PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Version: string (required)
  var query_606388 = newJObject()
  var formData_606389 = newJObject()
  add(formData_606389, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_606389, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606389, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_606389, "CopyTags", newJBool(CopyTags))
  add(formData_606389, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_606388, "Action", newJString(Action))
  if Tags != nil:
    formData_606389.add "Tags", Tags
  add(query_606388, "Version", newJString(Version))
  result = call_606387.call(nil, query_606388, nil, formData_606389, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_606368(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_606369, base: "/",
    url: url_PostCopyDBClusterSnapshot_606370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_606347 = ref object of OpenApiRestCall_605573
proc url_GetCopyDBClusterSnapshot_606349(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_606348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606350 = query.getOrDefault("Tags")
  valid_606350 = validateParameter(valid_606350, JArray, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "Tags", valid_606350
  var valid_606351 = query.getOrDefault("KmsKeyId")
  valid_606351 = validateParameter(valid_606351, JString, required = false,
                                 default = nil)
  if valid_606351 != nil:
    section.add "KmsKeyId", valid_606351
  var valid_606352 = query.getOrDefault("PreSignedUrl")
  valid_606352 = validateParameter(valid_606352, JString, required = false,
                                 default = nil)
  if valid_606352 != nil:
    section.add "PreSignedUrl", valid_606352
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_606353 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_606353 = validateParameter(valid_606353, JString, required = true,
                                 default = nil)
  if valid_606353 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_606353
  var valid_606354 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_606354 = validateParameter(valid_606354, JString, required = true,
                                 default = nil)
  if valid_606354 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_606354
  var valid_606355 = query.getOrDefault("Action")
  valid_606355 = validateParameter(valid_606355, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_606355 != nil:
    section.add "Action", valid_606355
  var valid_606356 = query.getOrDefault("CopyTags")
  valid_606356 = validateParameter(valid_606356, JBool, required = false, default = nil)
  if valid_606356 != nil:
    section.add "CopyTags", valid_606356
  var valid_606357 = query.getOrDefault("Version")
  valid_606357 = validateParameter(valid_606357, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606357 != nil:
    section.add "Version", valid_606357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606358 = header.getOrDefault("X-Amz-Signature")
  valid_606358 = validateParameter(valid_606358, JString, required = false,
                                 default = nil)
  if valid_606358 != nil:
    section.add "X-Amz-Signature", valid_606358
  var valid_606359 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606359 = validateParameter(valid_606359, JString, required = false,
                                 default = nil)
  if valid_606359 != nil:
    section.add "X-Amz-Content-Sha256", valid_606359
  var valid_606360 = header.getOrDefault("X-Amz-Date")
  valid_606360 = validateParameter(valid_606360, JString, required = false,
                                 default = nil)
  if valid_606360 != nil:
    section.add "X-Amz-Date", valid_606360
  var valid_606361 = header.getOrDefault("X-Amz-Credential")
  valid_606361 = validateParameter(valid_606361, JString, required = false,
                                 default = nil)
  if valid_606361 != nil:
    section.add "X-Amz-Credential", valid_606361
  var valid_606362 = header.getOrDefault("X-Amz-Security-Token")
  valid_606362 = validateParameter(valid_606362, JString, required = false,
                                 default = nil)
  if valid_606362 != nil:
    section.add "X-Amz-Security-Token", valid_606362
  var valid_606363 = header.getOrDefault("X-Amz-Algorithm")
  valid_606363 = validateParameter(valid_606363, JString, required = false,
                                 default = nil)
  if valid_606363 != nil:
    section.add "X-Amz-Algorithm", valid_606363
  var valid_606364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606364 = validateParameter(valid_606364, JString, required = false,
                                 default = nil)
  if valid_606364 != nil:
    section.add "X-Amz-SignedHeaders", valid_606364
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606365: Call_GetCopyDBClusterSnapshot_606347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_606365.validator(path, query, header, formData, body)
  let scheme = call_606365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606365.url(scheme.get, call_606365.host, call_606365.base,
                         call_606365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606365, url, valid)

proc call*(call_606366: Call_GetCopyDBClusterSnapshot_606347;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   Version: string (required)
  var query_606367 = newJObject()
  if Tags != nil:
    query_606367.add "Tags", Tags
  add(query_606367, "KmsKeyId", newJString(KmsKeyId))
  add(query_606367, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606367, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_606367, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_606367, "Action", newJString(Action))
  add(query_606367, "CopyTags", newJBool(CopyTags))
  add(query_606367, "Version", newJString(Version))
  result = call_606366.call(nil, query_606367, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_606347(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_606348, base: "/",
    url: url_GetCopyDBClusterSnapshot_606349, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_606409 = ref object of OpenApiRestCall_605573
proc url_PostCopyDBParameterGroup_606411(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_606410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606412 = query.getOrDefault("Action")
  valid_606412 = validateParameter(valid_606412, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_606412 != nil:
    section.add "Action", valid_606412
  var valid_606413 = query.getOrDefault("Version")
  valid_606413 = validateParameter(valid_606413, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606413 != nil:
    section.add "Version", valid_606413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606414 = header.getOrDefault("X-Amz-Signature")
  valid_606414 = validateParameter(valid_606414, JString, required = false,
                                 default = nil)
  if valid_606414 != nil:
    section.add "X-Amz-Signature", valid_606414
  var valid_606415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606415 = validateParameter(valid_606415, JString, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "X-Amz-Content-Sha256", valid_606415
  var valid_606416 = header.getOrDefault("X-Amz-Date")
  valid_606416 = validateParameter(valid_606416, JString, required = false,
                                 default = nil)
  if valid_606416 != nil:
    section.add "X-Amz-Date", valid_606416
  var valid_606417 = header.getOrDefault("X-Amz-Credential")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "X-Amz-Credential", valid_606417
  var valid_606418 = header.getOrDefault("X-Amz-Security-Token")
  valid_606418 = validateParameter(valid_606418, JString, required = false,
                                 default = nil)
  if valid_606418 != nil:
    section.add "X-Amz-Security-Token", valid_606418
  var valid_606419 = header.getOrDefault("X-Amz-Algorithm")
  valid_606419 = validateParameter(valid_606419, JString, required = false,
                                 default = nil)
  if valid_606419 != nil:
    section.add "X-Amz-Algorithm", valid_606419
  var valid_606420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606420 = validateParameter(valid_606420, JString, required = false,
                                 default = nil)
  if valid_606420 != nil:
    section.add "X-Amz-SignedHeaders", valid_606420
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_606421 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_606421 = validateParameter(valid_606421, JString, required = true,
                                 default = nil)
  if valid_606421 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_606421
  var valid_606422 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_606422 = validateParameter(valid_606422, JString, required = true,
                                 default = nil)
  if valid_606422 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_606422
  var valid_606423 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_606423 = validateParameter(valid_606423, JString, required = true,
                                 default = nil)
  if valid_606423 != nil:
    section.add "TargetDBParameterGroupDescription", valid_606423
  var valid_606424 = formData.getOrDefault("Tags")
  valid_606424 = validateParameter(valid_606424, JArray, required = false,
                                 default = nil)
  if valid_606424 != nil:
    section.add "Tags", valid_606424
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606425: Call_PostCopyDBParameterGroup_606409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_606425.validator(path, query, header, formData, body)
  let scheme = call_606425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606425.url(scheme.get, call_606425.host, call_606425.base,
                         call_606425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606425, url, valid)

proc call*(call_606426: Call_PostCopyDBParameterGroup_606409;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Version: string (required)
  var query_606427 = newJObject()
  var formData_606428 = newJObject()
  add(formData_606428, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_606428, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_606428, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_606427, "Action", newJString(Action))
  if Tags != nil:
    formData_606428.add "Tags", Tags
  add(query_606427, "Version", newJString(Version))
  result = call_606426.call(nil, query_606427, nil, formData_606428, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_606409(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_606410, base: "/",
    url: url_PostCopyDBParameterGroup_606411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_606390 = ref object of OpenApiRestCall_605573
proc url_GetCopyDBParameterGroup_606392(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_606391(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_606393 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_606393 = validateParameter(valid_606393, JString, required = true,
                                 default = nil)
  if valid_606393 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_606393
  var valid_606394 = query.getOrDefault("Tags")
  valid_606394 = validateParameter(valid_606394, JArray, required = false,
                                 default = nil)
  if valid_606394 != nil:
    section.add "Tags", valid_606394
  var valid_606395 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_606395 = validateParameter(valid_606395, JString, required = true,
                                 default = nil)
  if valid_606395 != nil:
    section.add "TargetDBParameterGroupDescription", valid_606395
  var valid_606396 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_606396 = validateParameter(valid_606396, JString, required = true,
                                 default = nil)
  if valid_606396 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_606396
  var valid_606397 = query.getOrDefault("Action")
  valid_606397 = validateParameter(valid_606397, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_606397 != nil:
    section.add "Action", valid_606397
  var valid_606398 = query.getOrDefault("Version")
  valid_606398 = validateParameter(valid_606398, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606398 != nil:
    section.add "Version", valid_606398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606399 = header.getOrDefault("X-Amz-Signature")
  valid_606399 = validateParameter(valid_606399, JString, required = false,
                                 default = nil)
  if valid_606399 != nil:
    section.add "X-Amz-Signature", valid_606399
  var valid_606400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606400 = validateParameter(valid_606400, JString, required = false,
                                 default = nil)
  if valid_606400 != nil:
    section.add "X-Amz-Content-Sha256", valid_606400
  var valid_606401 = header.getOrDefault("X-Amz-Date")
  valid_606401 = validateParameter(valid_606401, JString, required = false,
                                 default = nil)
  if valid_606401 != nil:
    section.add "X-Amz-Date", valid_606401
  var valid_606402 = header.getOrDefault("X-Amz-Credential")
  valid_606402 = validateParameter(valid_606402, JString, required = false,
                                 default = nil)
  if valid_606402 != nil:
    section.add "X-Amz-Credential", valid_606402
  var valid_606403 = header.getOrDefault("X-Amz-Security-Token")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "X-Amz-Security-Token", valid_606403
  var valid_606404 = header.getOrDefault("X-Amz-Algorithm")
  valid_606404 = validateParameter(valid_606404, JString, required = false,
                                 default = nil)
  if valid_606404 != nil:
    section.add "X-Amz-Algorithm", valid_606404
  var valid_606405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606405 = validateParameter(valid_606405, JString, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "X-Amz-SignedHeaders", valid_606405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606406: Call_GetCopyDBParameterGroup_606390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_606406.validator(path, query, header, formData, body)
  let scheme = call_606406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606406.url(scheme.get, call_606406.host, call_606406.base,
                         call_606406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606406, url, valid)

proc call*(call_606407: Call_GetCopyDBParameterGroup_606390;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606408 = newJObject()
  add(query_606408, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_606408.add "Tags", Tags
  add(query_606408, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_606408, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_606408, "Action", newJString(Action))
  add(query_606408, "Version", newJString(Version))
  result = call_606407.call(nil, query_606408, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_606390(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_606391, base: "/",
    url: url_GetCopyDBParameterGroup_606392, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_606468 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBCluster_606470(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_606469(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606471 = query.getOrDefault("Action")
  valid_606471 = validateParameter(valid_606471, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_606471 != nil:
    section.add "Action", valid_606471
  var valid_606472 = query.getOrDefault("Version")
  valid_606472 = validateParameter(valid_606472, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606472 != nil:
    section.add "Version", valid_606472
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606473 = header.getOrDefault("X-Amz-Signature")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "X-Amz-Signature", valid_606473
  var valid_606474 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606474 = validateParameter(valid_606474, JString, required = false,
                                 default = nil)
  if valid_606474 != nil:
    section.add "X-Amz-Content-Sha256", valid_606474
  var valid_606475 = header.getOrDefault("X-Amz-Date")
  valid_606475 = validateParameter(valid_606475, JString, required = false,
                                 default = nil)
  if valid_606475 != nil:
    section.add "X-Amz-Date", valid_606475
  var valid_606476 = header.getOrDefault("X-Amz-Credential")
  valid_606476 = validateParameter(valid_606476, JString, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "X-Amz-Credential", valid_606476
  var valid_606477 = header.getOrDefault("X-Amz-Security-Token")
  valid_606477 = validateParameter(valid_606477, JString, required = false,
                                 default = nil)
  if valid_606477 != nil:
    section.add "X-Amz-Security-Token", valid_606477
  var valid_606478 = header.getOrDefault("X-Amz-Algorithm")
  valid_606478 = validateParameter(valid_606478, JString, required = false,
                                 default = nil)
  if valid_606478 != nil:
    section.add "X-Amz-Algorithm", valid_606478
  var valid_606479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606479 = validateParameter(valid_606479, JString, required = false,
                                 default = nil)
  if valid_606479 != nil:
    section.add "X-Amz-SignedHeaders", valid_606479
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  section = newJObject()
  var valid_606480 = formData.getOrDefault("Port")
  valid_606480 = validateParameter(valid_606480, JInt, required = false, default = nil)
  if valid_606480 != nil:
    section.add "Port", valid_606480
  var valid_606481 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606481 = validateParameter(valid_606481, JString, required = false,
                                 default = nil)
  if valid_606481 != nil:
    section.add "PreferredMaintenanceWindow", valid_606481
  var valid_606482 = formData.getOrDefault("PreferredBackupWindow")
  valid_606482 = validateParameter(valid_606482, JString, required = false,
                                 default = nil)
  if valid_606482 != nil:
    section.add "PreferredBackupWindow", valid_606482
  var valid_606483 = formData.getOrDefault("MasterUserPassword")
  valid_606483 = validateParameter(valid_606483, JString, required = false,
                                 default = nil)
  if valid_606483 != nil:
    section.add "MasterUserPassword", valid_606483
  var valid_606484 = formData.getOrDefault("MasterUsername")
  valid_606484 = validateParameter(valid_606484, JString, required = false,
                                 default = nil)
  if valid_606484 != nil:
    section.add "MasterUsername", valid_606484
  var valid_606485 = formData.getOrDefault("EngineVersion")
  valid_606485 = validateParameter(valid_606485, JString, required = false,
                                 default = nil)
  if valid_606485 != nil:
    section.add "EngineVersion", valid_606485
  var valid_606486 = formData.getOrDefault("DatabaseName")
  valid_606486 = validateParameter(valid_606486, JString, required = false,
                                 default = nil)
  if valid_606486 != nil:
    section.add "DatabaseName", valid_606486
  var valid_606487 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606487 = validateParameter(valid_606487, JArray, required = false,
                                 default = nil)
  if valid_606487 != nil:
    section.add "VpcSecurityGroupIds", valid_606487
  var valid_606488 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606488 = validateParameter(valid_606488, JBool, required = false, default = nil)
  if valid_606488 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606488
  var valid_606489 = formData.getOrDefault("AvailabilityZones")
  valid_606489 = validateParameter(valid_606489, JArray, required = false,
                                 default = nil)
  if valid_606489 != nil:
    section.add "AvailabilityZones", valid_606489
  var valid_606490 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606490 = validateParameter(valid_606490, JInt, required = false, default = nil)
  if valid_606490 != nil:
    section.add "BackupRetentionPeriod", valid_606490
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_606491 = formData.getOrDefault("Engine")
  valid_606491 = validateParameter(valid_606491, JString, required = true,
                                 default = nil)
  if valid_606491 != nil:
    section.add "Engine", valid_606491
  var valid_606492 = formData.getOrDefault("KmsKeyId")
  valid_606492 = validateParameter(valid_606492, JString, required = false,
                                 default = nil)
  if valid_606492 != nil:
    section.add "KmsKeyId", valid_606492
  var valid_606493 = formData.getOrDefault("PreSignedUrl")
  valid_606493 = validateParameter(valid_606493, JString, required = false,
                                 default = nil)
  if valid_606493 != nil:
    section.add "PreSignedUrl", valid_606493
  var valid_606494 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606494 = validateParameter(valid_606494, JArray, required = false,
                                 default = nil)
  if valid_606494 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606494
  var valid_606495 = formData.getOrDefault("Tags")
  valid_606495 = validateParameter(valid_606495, JArray, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "Tags", valid_606495
  var valid_606496 = formData.getOrDefault("DBSubnetGroupName")
  valid_606496 = validateParameter(valid_606496, JString, required = false,
                                 default = nil)
  if valid_606496 != nil:
    section.add "DBSubnetGroupName", valid_606496
  var valid_606497 = formData.getOrDefault("OptionGroupName")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "OptionGroupName", valid_606497
  var valid_606498 = formData.getOrDefault("CharacterSetName")
  valid_606498 = validateParameter(valid_606498, JString, required = false,
                                 default = nil)
  if valid_606498 != nil:
    section.add "CharacterSetName", valid_606498
  var valid_606499 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606499 = validateParameter(valid_606499, JString, required = false,
                                 default = nil)
  if valid_606499 != nil:
    section.add "DBClusterParameterGroupName", valid_606499
  var valid_606500 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_606500 = validateParameter(valid_606500, JString, required = false,
                                 default = nil)
  if valid_606500 != nil:
    section.add "ReplicationSourceIdentifier", valid_606500
  var valid_606501 = formData.getOrDefault("StorageEncrypted")
  valid_606501 = validateParameter(valid_606501, JBool, required = false, default = nil)
  if valid_606501 != nil:
    section.add "StorageEncrypted", valid_606501
  var valid_606502 = formData.getOrDefault("DBClusterIdentifier")
  valid_606502 = validateParameter(valid_606502, JString, required = true,
                                 default = nil)
  if valid_606502 != nil:
    section.add "DBClusterIdentifier", valid_606502
  var valid_606503 = formData.getOrDefault("DeletionProtection")
  valid_606503 = validateParameter(valid_606503, JBool, required = false, default = nil)
  if valid_606503 != nil:
    section.add "DeletionProtection", valid_606503
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606504: Call_PostCreateDBCluster_606468; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_606504.validator(path, query, header, formData, body)
  let scheme = call_606504.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606504.url(scheme.get, call_606504.host, call_606504.base,
                         call_606504.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606504, url, valid)

proc call*(call_606505: Call_PostCreateDBCluster_606468; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          MasterUsername: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; DeletionProtection: bool = false): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  var query_606506 = newJObject()
  var formData_606507 = newJObject()
  add(formData_606507, "Port", newJInt(Port))
  add(formData_606507, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606507, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606507, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_606507, "MasterUsername", newJString(MasterUsername))
  add(formData_606507, "EngineVersion", newJString(EngineVersion))
  add(formData_606507, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_606507.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606507, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_606507.add "AvailabilityZones", AvailabilityZones
  add(formData_606507, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606507, "Engine", newJString(Engine))
  add(formData_606507, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606507, "PreSignedUrl", newJString(PreSignedUrl))
  if EnableCloudwatchLogsExports != nil:
    formData_606507.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606506, "Action", newJString(Action))
  if Tags != nil:
    formData_606507.add "Tags", Tags
  add(formData_606507, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606507, "OptionGroupName", newJString(OptionGroupName))
  add(formData_606507, "CharacterSetName", newJString(CharacterSetName))
  add(formData_606507, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_606507, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_606506, "Version", newJString(Version))
  add(formData_606507, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606507, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_606507, "DeletionProtection", newJBool(DeletionProtection))
  result = call_606505.call(nil, query_606506, nil, formData_606507, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_606468(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_606469, base: "/",
    url: url_PostCreateDBCluster_606470, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_606429 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBCluster_606431(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_606430(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606432 = query.getOrDefault("DatabaseName")
  valid_606432 = validateParameter(valid_606432, JString, required = false,
                                 default = nil)
  if valid_606432 != nil:
    section.add "DatabaseName", valid_606432
  var valid_606433 = query.getOrDefault("StorageEncrypted")
  valid_606433 = validateParameter(valid_606433, JBool, required = false, default = nil)
  if valid_606433 != nil:
    section.add "StorageEncrypted", valid_606433
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606434 = query.getOrDefault("Engine")
  valid_606434 = validateParameter(valid_606434, JString, required = true,
                                 default = nil)
  if valid_606434 != nil:
    section.add "Engine", valid_606434
  var valid_606435 = query.getOrDefault("DeletionProtection")
  valid_606435 = validateParameter(valid_606435, JBool, required = false, default = nil)
  if valid_606435 != nil:
    section.add "DeletionProtection", valid_606435
  var valid_606436 = query.getOrDefault("CharacterSetName")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "CharacterSetName", valid_606436
  var valid_606437 = query.getOrDefault("Tags")
  valid_606437 = validateParameter(valid_606437, JArray, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "Tags", valid_606437
  var valid_606438 = query.getOrDefault("KmsKeyId")
  valid_606438 = validateParameter(valid_606438, JString, required = false,
                                 default = nil)
  if valid_606438 != nil:
    section.add "KmsKeyId", valid_606438
  var valid_606439 = query.getOrDefault("DBClusterIdentifier")
  valid_606439 = validateParameter(valid_606439, JString, required = true,
                                 default = nil)
  if valid_606439 != nil:
    section.add "DBClusterIdentifier", valid_606439
  var valid_606440 = query.getOrDefault("PreSignedUrl")
  valid_606440 = validateParameter(valid_606440, JString, required = false,
                                 default = nil)
  if valid_606440 != nil:
    section.add "PreSignedUrl", valid_606440
  var valid_606441 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606441 = validateParameter(valid_606441, JString, required = false,
                                 default = nil)
  if valid_606441 != nil:
    section.add "DBClusterParameterGroupName", valid_606441
  var valid_606442 = query.getOrDefault("AvailabilityZones")
  valid_606442 = validateParameter(valid_606442, JArray, required = false,
                                 default = nil)
  if valid_606442 != nil:
    section.add "AvailabilityZones", valid_606442
  var valid_606443 = query.getOrDefault("MasterUsername")
  valid_606443 = validateParameter(valid_606443, JString, required = false,
                                 default = nil)
  if valid_606443 != nil:
    section.add "MasterUsername", valid_606443
  var valid_606444 = query.getOrDefault("BackupRetentionPeriod")
  valid_606444 = validateParameter(valid_606444, JInt, required = false, default = nil)
  if valid_606444 != nil:
    section.add "BackupRetentionPeriod", valid_606444
  var valid_606445 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606445 = validateParameter(valid_606445, JBool, required = false, default = nil)
  if valid_606445 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606445
  var valid_606446 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606446 = validateParameter(valid_606446, JArray, required = false,
                                 default = nil)
  if valid_606446 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606446
  var valid_606447 = query.getOrDefault("EngineVersion")
  valid_606447 = validateParameter(valid_606447, JString, required = false,
                                 default = nil)
  if valid_606447 != nil:
    section.add "EngineVersion", valid_606447
  var valid_606448 = query.getOrDefault("Action")
  valid_606448 = validateParameter(valid_606448, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_606448 != nil:
    section.add "Action", valid_606448
  var valid_606449 = query.getOrDefault("Port")
  valid_606449 = validateParameter(valid_606449, JInt, required = false, default = nil)
  if valid_606449 != nil:
    section.add "Port", valid_606449
  var valid_606450 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606450 = validateParameter(valid_606450, JArray, required = false,
                                 default = nil)
  if valid_606450 != nil:
    section.add "VpcSecurityGroupIds", valid_606450
  var valid_606451 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_606451 = validateParameter(valid_606451, JString, required = false,
                                 default = nil)
  if valid_606451 != nil:
    section.add "ReplicationSourceIdentifier", valid_606451
  var valid_606452 = query.getOrDefault("MasterUserPassword")
  valid_606452 = validateParameter(valid_606452, JString, required = false,
                                 default = nil)
  if valid_606452 != nil:
    section.add "MasterUserPassword", valid_606452
  var valid_606453 = query.getOrDefault("OptionGroupName")
  valid_606453 = validateParameter(valid_606453, JString, required = false,
                                 default = nil)
  if valid_606453 != nil:
    section.add "OptionGroupName", valid_606453
  var valid_606454 = query.getOrDefault("DBSubnetGroupName")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "DBSubnetGroupName", valid_606454
  var valid_606455 = query.getOrDefault("PreferredBackupWindow")
  valid_606455 = validateParameter(valid_606455, JString, required = false,
                                 default = nil)
  if valid_606455 != nil:
    section.add "PreferredBackupWindow", valid_606455
  var valid_606456 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606456 = validateParameter(valid_606456, JString, required = false,
                                 default = nil)
  if valid_606456 != nil:
    section.add "PreferredMaintenanceWindow", valid_606456
  var valid_606457 = query.getOrDefault("Version")
  valid_606457 = validateParameter(valid_606457, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606457 != nil:
    section.add "Version", valid_606457
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606458 = header.getOrDefault("X-Amz-Signature")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "X-Amz-Signature", valid_606458
  var valid_606459 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606459 = validateParameter(valid_606459, JString, required = false,
                                 default = nil)
  if valid_606459 != nil:
    section.add "X-Amz-Content-Sha256", valid_606459
  var valid_606460 = header.getOrDefault("X-Amz-Date")
  valid_606460 = validateParameter(valid_606460, JString, required = false,
                                 default = nil)
  if valid_606460 != nil:
    section.add "X-Amz-Date", valid_606460
  var valid_606461 = header.getOrDefault("X-Amz-Credential")
  valid_606461 = validateParameter(valid_606461, JString, required = false,
                                 default = nil)
  if valid_606461 != nil:
    section.add "X-Amz-Credential", valid_606461
  var valid_606462 = header.getOrDefault("X-Amz-Security-Token")
  valid_606462 = validateParameter(valid_606462, JString, required = false,
                                 default = nil)
  if valid_606462 != nil:
    section.add "X-Amz-Security-Token", valid_606462
  var valid_606463 = header.getOrDefault("X-Amz-Algorithm")
  valid_606463 = validateParameter(valid_606463, JString, required = false,
                                 default = nil)
  if valid_606463 != nil:
    section.add "X-Amz-Algorithm", valid_606463
  var valid_606464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606464 = validateParameter(valid_606464, JString, required = false,
                                 default = nil)
  if valid_606464 != nil:
    section.add "X-Amz-SignedHeaders", valid_606464
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606465: Call_GetCreateDBCluster_606429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_606465.validator(path, query, header, formData, body)
  let scheme = call_606465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606465.url(scheme.get, call_606465.host, call_606465.base,
                         call_606465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606465, url, valid)

proc call*(call_606466: Call_GetCreateDBCluster_606429; Engine: string;
          DBClusterIdentifier: string; DatabaseName: string = "";
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; KmsKeyId: string = "";
          PreSignedUrl: string = ""; DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  var query_606467 = newJObject()
  add(query_606467, "DatabaseName", newJString(DatabaseName))
  add(query_606467, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606467, "Engine", newJString(Engine))
  add(query_606467, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606467, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_606467.add "Tags", Tags
  add(query_606467, "KmsKeyId", newJString(KmsKeyId))
  add(query_606467, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606467, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606467, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_606467.add "AvailabilityZones", AvailabilityZones
  add(query_606467, "MasterUsername", newJString(MasterUsername))
  add(query_606467, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_606467, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_606467.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606467, "EngineVersion", newJString(EngineVersion))
  add(query_606467, "Action", newJString(Action))
  add(query_606467, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_606467.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606467, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_606467, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606467, "OptionGroupName", newJString(OptionGroupName))
  add(query_606467, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606467, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606467, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606467, "Version", newJString(Version))
  result = call_606466.call(nil, query_606467, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_606429(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_606430,
    base: "/", url: url_GetCreateDBCluster_606431,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_606527 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBClusterParameterGroup_606529(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_606528(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606530 = query.getOrDefault("Action")
  valid_606530 = validateParameter(valid_606530, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_606530 != nil:
    section.add "Action", valid_606530
  var valid_606531 = query.getOrDefault("Version")
  valid_606531 = validateParameter(valid_606531, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606531 != nil:
    section.add "Version", valid_606531
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606532 = header.getOrDefault("X-Amz-Signature")
  valid_606532 = validateParameter(valid_606532, JString, required = false,
                                 default = nil)
  if valid_606532 != nil:
    section.add "X-Amz-Signature", valid_606532
  var valid_606533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606533 = validateParameter(valid_606533, JString, required = false,
                                 default = nil)
  if valid_606533 != nil:
    section.add "X-Amz-Content-Sha256", valid_606533
  var valid_606534 = header.getOrDefault("X-Amz-Date")
  valid_606534 = validateParameter(valid_606534, JString, required = false,
                                 default = nil)
  if valid_606534 != nil:
    section.add "X-Amz-Date", valid_606534
  var valid_606535 = header.getOrDefault("X-Amz-Credential")
  valid_606535 = validateParameter(valid_606535, JString, required = false,
                                 default = nil)
  if valid_606535 != nil:
    section.add "X-Amz-Credential", valid_606535
  var valid_606536 = header.getOrDefault("X-Amz-Security-Token")
  valid_606536 = validateParameter(valid_606536, JString, required = false,
                                 default = nil)
  if valid_606536 != nil:
    section.add "X-Amz-Security-Token", valid_606536
  var valid_606537 = header.getOrDefault("X-Amz-Algorithm")
  valid_606537 = validateParameter(valid_606537, JString, required = false,
                                 default = nil)
  if valid_606537 != nil:
    section.add "X-Amz-Algorithm", valid_606537
  var valid_606538 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606538 = validateParameter(valid_606538, JString, required = false,
                                 default = nil)
  if valid_606538 != nil:
    section.add "X-Amz-SignedHeaders", valid_606538
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606539 = formData.getOrDefault("Description")
  valid_606539 = validateParameter(valid_606539, JString, required = true,
                                 default = nil)
  if valid_606539 != nil:
    section.add "Description", valid_606539
  var valid_606540 = formData.getOrDefault("Tags")
  valid_606540 = validateParameter(valid_606540, JArray, required = false,
                                 default = nil)
  if valid_606540 != nil:
    section.add "Tags", valid_606540
  var valid_606541 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606541 = validateParameter(valid_606541, JString, required = true,
                                 default = nil)
  if valid_606541 != nil:
    section.add "DBClusterParameterGroupName", valid_606541
  var valid_606542 = formData.getOrDefault("DBParameterGroupFamily")
  valid_606542 = validateParameter(valid_606542, JString, required = true,
                                 default = nil)
  if valid_606542 != nil:
    section.add "DBParameterGroupFamily", valid_606542
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606543: Call_PostCreateDBClusterParameterGroup_606527;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606543.validator(path, query, header, formData, body)
  let scheme = call_606543.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606543.url(scheme.get, call_606543.host, call_606543.base,
                         call_606543.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606543, url, valid)

proc call*(call_606544: Call_PostCreateDBClusterParameterGroup_606527;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  var query_606545 = newJObject()
  var formData_606546 = newJObject()
  add(formData_606546, "Description", newJString(Description))
  add(query_606545, "Action", newJString(Action))
  if Tags != nil:
    formData_606546.add "Tags", Tags
  add(formData_606546, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606545, "Version", newJString(Version))
  add(formData_606546, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_606544.call(nil, query_606545, nil, formData_606546, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_606527(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_606528, base: "/",
    url: url_PostCreateDBClusterParameterGroup_606529,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_606508 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBClusterParameterGroup_606510(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_606509(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_606511 = query.getOrDefault("DBParameterGroupFamily")
  valid_606511 = validateParameter(valid_606511, JString, required = true,
                                 default = nil)
  if valid_606511 != nil:
    section.add "DBParameterGroupFamily", valid_606511
  var valid_606512 = query.getOrDefault("Tags")
  valid_606512 = validateParameter(valid_606512, JArray, required = false,
                                 default = nil)
  if valid_606512 != nil:
    section.add "Tags", valid_606512
  var valid_606513 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606513 = validateParameter(valid_606513, JString, required = true,
                                 default = nil)
  if valid_606513 != nil:
    section.add "DBClusterParameterGroupName", valid_606513
  var valid_606514 = query.getOrDefault("Action")
  valid_606514 = validateParameter(valid_606514, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_606514 != nil:
    section.add "Action", valid_606514
  var valid_606515 = query.getOrDefault("Description")
  valid_606515 = validateParameter(valid_606515, JString, required = true,
                                 default = nil)
  if valid_606515 != nil:
    section.add "Description", valid_606515
  var valid_606516 = query.getOrDefault("Version")
  valid_606516 = validateParameter(valid_606516, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606516 != nil:
    section.add "Version", valid_606516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606517 = header.getOrDefault("X-Amz-Signature")
  valid_606517 = validateParameter(valid_606517, JString, required = false,
                                 default = nil)
  if valid_606517 != nil:
    section.add "X-Amz-Signature", valid_606517
  var valid_606518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606518 = validateParameter(valid_606518, JString, required = false,
                                 default = nil)
  if valid_606518 != nil:
    section.add "X-Amz-Content-Sha256", valid_606518
  var valid_606519 = header.getOrDefault("X-Amz-Date")
  valid_606519 = validateParameter(valid_606519, JString, required = false,
                                 default = nil)
  if valid_606519 != nil:
    section.add "X-Amz-Date", valid_606519
  var valid_606520 = header.getOrDefault("X-Amz-Credential")
  valid_606520 = validateParameter(valid_606520, JString, required = false,
                                 default = nil)
  if valid_606520 != nil:
    section.add "X-Amz-Credential", valid_606520
  var valid_606521 = header.getOrDefault("X-Amz-Security-Token")
  valid_606521 = validateParameter(valid_606521, JString, required = false,
                                 default = nil)
  if valid_606521 != nil:
    section.add "X-Amz-Security-Token", valid_606521
  var valid_606522 = header.getOrDefault("X-Amz-Algorithm")
  valid_606522 = validateParameter(valid_606522, JString, required = false,
                                 default = nil)
  if valid_606522 != nil:
    section.add "X-Amz-Algorithm", valid_606522
  var valid_606523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606523 = validateParameter(valid_606523, JString, required = false,
                                 default = nil)
  if valid_606523 != nil:
    section.add "X-Amz-SignedHeaders", valid_606523
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606524: Call_GetCreateDBClusterParameterGroup_606508;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606524.validator(path, query, header, formData, body)
  let scheme = call_606524.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606524.url(scheme.get, call_606524.host, call_606524.base,
                         call_606524.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606524, url, valid)

proc call*(call_606525: Call_GetCreateDBClusterParameterGroup_606508;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_606526 = newJObject()
  add(query_606526, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_606526.add "Tags", Tags
  add(query_606526, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606526, "Action", newJString(Action))
  add(query_606526, "Description", newJString(Description))
  add(query_606526, "Version", newJString(Version))
  result = call_606525.call(nil, query_606526, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_606508(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_606509, base: "/",
    url: url_GetCreateDBClusterParameterGroup_606510,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_606565 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBClusterSnapshot_606567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_606566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606568 = query.getOrDefault("Action")
  valid_606568 = validateParameter(valid_606568, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_606568 != nil:
    section.add "Action", valid_606568
  var valid_606569 = query.getOrDefault("Version")
  valid_606569 = validateParameter(valid_606569, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606569 != nil:
    section.add "Version", valid_606569
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606570 = header.getOrDefault("X-Amz-Signature")
  valid_606570 = validateParameter(valid_606570, JString, required = false,
                                 default = nil)
  if valid_606570 != nil:
    section.add "X-Amz-Signature", valid_606570
  var valid_606571 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606571 = validateParameter(valid_606571, JString, required = false,
                                 default = nil)
  if valid_606571 != nil:
    section.add "X-Amz-Content-Sha256", valid_606571
  var valid_606572 = header.getOrDefault("X-Amz-Date")
  valid_606572 = validateParameter(valid_606572, JString, required = false,
                                 default = nil)
  if valid_606572 != nil:
    section.add "X-Amz-Date", valid_606572
  var valid_606573 = header.getOrDefault("X-Amz-Credential")
  valid_606573 = validateParameter(valid_606573, JString, required = false,
                                 default = nil)
  if valid_606573 != nil:
    section.add "X-Amz-Credential", valid_606573
  var valid_606574 = header.getOrDefault("X-Amz-Security-Token")
  valid_606574 = validateParameter(valid_606574, JString, required = false,
                                 default = nil)
  if valid_606574 != nil:
    section.add "X-Amz-Security-Token", valid_606574
  var valid_606575 = header.getOrDefault("X-Amz-Algorithm")
  valid_606575 = validateParameter(valid_606575, JString, required = false,
                                 default = nil)
  if valid_606575 != nil:
    section.add "X-Amz-Algorithm", valid_606575
  var valid_606576 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606576 = validateParameter(valid_606576, JString, required = false,
                                 default = nil)
  if valid_606576 != nil:
    section.add "X-Amz-SignedHeaders", valid_606576
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606577 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606577 = validateParameter(valid_606577, JString, required = true,
                                 default = nil)
  if valid_606577 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606577
  var valid_606578 = formData.getOrDefault("Tags")
  valid_606578 = validateParameter(valid_606578, JArray, required = false,
                                 default = nil)
  if valid_606578 != nil:
    section.add "Tags", valid_606578
  var valid_606579 = formData.getOrDefault("DBClusterIdentifier")
  valid_606579 = validateParameter(valid_606579, JString, required = true,
                                 default = nil)
  if valid_606579 != nil:
    section.add "DBClusterIdentifier", valid_606579
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606580: Call_PostCreateDBClusterSnapshot_606565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_606580.validator(path, query, header, formData, body)
  let scheme = call_606580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606580.url(scheme.get, call_606580.host, call_606580.base,
                         call_606580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606580, url, valid)

proc call*(call_606581: Call_PostCreateDBClusterSnapshot_606565;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_606582 = newJObject()
  var formData_606583 = newJObject()
  add(formData_606583, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606582, "Action", newJString(Action))
  if Tags != nil:
    formData_606583.add "Tags", Tags
  add(query_606582, "Version", newJString(Version))
  add(formData_606583, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606581.call(nil, query_606582, nil, formData_606583, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_606565(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_606566, base: "/",
    url: url_PostCreateDBClusterSnapshot_606567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_606547 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBClusterSnapshot_606549(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_606548(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606550 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606550 = validateParameter(valid_606550, JString, required = true,
                                 default = nil)
  if valid_606550 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606550
  var valid_606551 = query.getOrDefault("Tags")
  valid_606551 = validateParameter(valid_606551, JArray, required = false,
                                 default = nil)
  if valid_606551 != nil:
    section.add "Tags", valid_606551
  var valid_606552 = query.getOrDefault("DBClusterIdentifier")
  valid_606552 = validateParameter(valid_606552, JString, required = true,
                                 default = nil)
  if valid_606552 != nil:
    section.add "DBClusterIdentifier", valid_606552
  var valid_606553 = query.getOrDefault("Action")
  valid_606553 = validateParameter(valid_606553, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_606553 != nil:
    section.add "Action", valid_606553
  var valid_606554 = query.getOrDefault("Version")
  valid_606554 = validateParameter(valid_606554, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606554 != nil:
    section.add "Version", valid_606554
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606555 = header.getOrDefault("X-Amz-Signature")
  valid_606555 = validateParameter(valid_606555, JString, required = false,
                                 default = nil)
  if valid_606555 != nil:
    section.add "X-Amz-Signature", valid_606555
  var valid_606556 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606556 = validateParameter(valid_606556, JString, required = false,
                                 default = nil)
  if valid_606556 != nil:
    section.add "X-Amz-Content-Sha256", valid_606556
  var valid_606557 = header.getOrDefault("X-Amz-Date")
  valid_606557 = validateParameter(valid_606557, JString, required = false,
                                 default = nil)
  if valid_606557 != nil:
    section.add "X-Amz-Date", valid_606557
  var valid_606558 = header.getOrDefault("X-Amz-Credential")
  valid_606558 = validateParameter(valid_606558, JString, required = false,
                                 default = nil)
  if valid_606558 != nil:
    section.add "X-Amz-Credential", valid_606558
  var valid_606559 = header.getOrDefault("X-Amz-Security-Token")
  valid_606559 = validateParameter(valid_606559, JString, required = false,
                                 default = nil)
  if valid_606559 != nil:
    section.add "X-Amz-Security-Token", valid_606559
  var valid_606560 = header.getOrDefault("X-Amz-Algorithm")
  valid_606560 = validateParameter(valid_606560, JString, required = false,
                                 default = nil)
  if valid_606560 != nil:
    section.add "X-Amz-Algorithm", valid_606560
  var valid_606561 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606561 = validateParameter(valid_606561, JString, required = false,
                                 default = nil)
  if valid_606561 != nil:
    section.add "X-Amz-SignedHeaders", valid_606561
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606562: Call_GetCreateDBClusterSnapshot_606547; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_606562.validator(path, query, header, formData, body)
  let scheme = call_606562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606562.url(scheme.get, call_606562.host, call_606562.base,
                         call_606562.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606562, url, valid)

proc call*(call_606563: Call_GetCreateDBClusterSnapshot_606547;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606564 = newJObject()
  add(query_606564, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_606564.add "Tags", Tags
  add(query_606564, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606564, "Action", newJString(Action))
  add(query_606564, "Version", newJString(Version))
  result = call_606563.call(nil, query_606564, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_606547(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_606548, base: "/",
    url: url_GetCreateDBClusterSnapshot_606549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_606660 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBInstance_606662(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_606661(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606663 = query.getOrDefault("Action")
  valid_606663 = validateParameter(valid_606663, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_606663 != nil:
    section.add "Action", valid_606663
  var valid_606664 = query.getOrDefault("Version")
  valid_606664 = validateParameter(valid_606664, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606664 != nil:
    section.add "Version", valid_606664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606665 = header.getOrDefault("X-Amz-Security-Token")
  valid_606665 = validateParameter(valid_606665, JString, required = false,
                                 default = nil)
  if valid_606665 != nil:
    section.add "X-Amz-Security-Token", valid_606665
  var valid_606666 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606666 = validateParameter(valid_606666, JString, required = false,
                                 default = nil)
  if valid_606666 != nil:
    section.add "X-Amz-SignedHeaders", valid_606666
  var valid_606667 = header.getOrDefault("X-Amz-Signature")
  valid_606667 = validateParameter(valid_606667, JString, required = false,
                                 default = nil)
  if valid_606667 != nil:
    section.add "X-Amz-Signature", valid_606667
  var valid_606668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606668 = validateParameter(valid_606668, JString, required = false,
                                 default = nil)
  if valid_606668 != nil:
    section.add "X-Amz-Content-Sha256", valid_606668
  var valid_606669 = header.getOrDefault("X-Amz-Date")
  valid_606669 = validateParameter(valid_606669, JString, required = false,
                                 default = nil)
  if valid_606669 != nil:
    section.add "X-Amz-Date", valid_606669
  var valid_606670 = header.getOrDefault("X-Amz-Credential")
  valid_606670 = validateParameter(valid_606670, JString, required = false,
                                 default = nil)
  if valid_606670 != nil:
    section.add "X-Amz-Credential", valid_606670
  var valid_606671 = header.getOrDefault("X-Amz-Algorithm")
  valid_606671 = validateParameter(valid_606671, JString, required = false,
                                 default = nil)
  if valid_606671 != nil:
    section.add "X-Amz-Algorithm", valid_606671
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : Not supported.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  section = newJObject()
  var valid_606672 = formData.getOrDefault("PromotionTier")
  valid_606672 = validateParameter(valid_606672, JInt, required = false, default = nil)
  if valid_606672 != nil:
    section.add "PromotionTier", valid_606672
  var valid_606673 = formData.getOrDefault("Port")
  valid_606673 = validateParameter(valid_606673, JInt, required = false, default = nil)
  if valid_606673 != nil:
    section.add "Port", valid_606673
  var valid_606674 = formData.getOrDefault("MultiAZ")
  valid_606674 = validateParameter(valid_606674, JBool, required = false, default = nil)
  if valid_606674 != nil:
    section.add "MultiAZ", valid_606674
  var valid_606675 = formData.getOrDefault("MasterUsername")
  valid_606675 = validateParameter(valid_606675, JString, required = false,
                                 default = nil)
  if valid_606675 != nil:
    section.add "MasterUsername", valid_606675
  var valid_606676 = formData.getOrDefault("MonitoringRoleArn")
  valid_606676 = validateParameter(valid_606676, JString, required = false,
                                 default = nil)
  if valid_606676 != nil:
    section.add "MonitoringRoleArn", valid_606676
  var valid_606677 = formData.getOrDefault("MonitoringInterval")
  valid_606677 = validateParameter(valid_606677, JInt, required = false, default = nil)
  if valid_606677 != nil:
    section.add "MonitoringInterval", valid_606677
  var valid_606678 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606678 = validateParameter(valid_606678, JArray, required = false,
                                 default = nil)
  if valid_606678 != nil:
    section.add "VpcSecurityGroupIds", valid_606678
  var valid_606679 = formData.getOrDefault("AvailabilityZone")
  valid_606679 = validateParameter(valid_606679, JString, required = false,
                                 default = nil)
  if valid_606679 != nil:
    section.add "AvailabilityZone", valid_606679
  var valid_606680 = formData.getOrDefault("EnablePerformanceInsights")
  valid_606680 = validateParameter(valid_606680, JBool, required = false, default = nil)
  if valid_606680 != nil:
    section.add "EnablePerformanceInsights", valid_606680
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606681 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606681 = validateParameter(valid_606681, JString, required = true,
                                 default = nil)
  if valid_606681 != nil:
    section.add "DBInstanceIdentifier", valid_606681
  var valid_606682 = formData.getOrDefault("TdeCredentialArn")
  valid_606682 = validateParameter(valid_606682, JString, required = false,
                                 default = nil)
  if valid_606682 != nil:
    section.add "TdeCredentialArn", valid_606682
  var valid_606683 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606683 = validateParameter(valid_606683, JArray, required = false,
                                 default = nil)
  if valid_606683 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606683
  var valid_606684 = formData.getOrDefault("DBSubnetGroupName")
  valid_606684 = validateParameter(valid_606684, JString, required = false,
                                 default = nil)
  if valid_606684 != nil:
    section.add "DBSubnetGroupName", valid_606684
  var valid_606685 = formData.getOrDefault("CharacterSetName")
  valid_606685 = validateParameter(valid_606685, JString, required = false,
                                 default = nil)
  if valid_606685 != nil:
    section.add "CharacterSetName", valid_606685
  var valid_606686 = formData.getOrDefault("StorageType")
  valid_606686 = validateParameter(valid_606686, JString, required = false,
                                 default = nil)
  if valid_606686 != nil:
    section.add "StorageType", valid_606686
  var valid_606687 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_606687 = validateParameter(valid_606687, JBool, required = false, default = nil)
  if valid_606687 != nil:
    section.add "CopyTagsToSnapshot", valid_606687
  var valid_606688 = formData.getOrDefault("DeletionProtection")
  valid_606688 = validateParameter(valid_606688, JBool, required = false, default = nil)
  if valid_606688 != nil:
    section.add "DeletionProtection", valid_606688
  var valid_606689 = formData.getOrDefault("AllocatedStorage")
  valid_606689 = validateParameter(valid_606689, JInt, required = false, default = nil)
  if valid_606689 != nil:
    section.add "AllocatedStorage", valid_606689
  var valid_606690 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606690 = validateParameter(valid_606690, JString, required = false,
                                 default = nil)
  if valid_606690 != nil:
    section.add "PreferredMaintenanceWindow", valid_606690
  var valid_606691 = formData.getOrDefault("DBInstanceClass")
  valid_606691 = validateParameter(valid_606691, JString, required = true,
                                 default = nil)
  if valid_606691 != nil:
    section.add "DBInstanceClass", valid_606691
  var valid_606692 = formData.getOrDefault("PreferredBackupWindow")
  valid_606692 = validateParameter(valid_606692, JString, required = false,
                                 default = nil)
  if valid_606692 != nil:
    section.add "PreferredBackupWindow", valid_606692
  var valid_606693 = formData.getOrDefault("MasterUserPassword")
  valid_606693 = validateParameter(valid_606693, JString, required = false,
                                 default = nil)
  if valid_606693 != nil:
    section.add "MasterUserPassword", valid_606693
  var valid_606694 = formData.getOrDefault("Domain")
  valid_606694 = validateParameter(valid_606694, JString, required = false,
                                 default = nil)
  if valid_606694 != nil:
    section.add "Domain", valid_606694
  var valid_606695 = formData.getOrDefault("Timezone")
  valid_606695 = validateParameter(valid_606695, JString, required = false,
                                 default = nil)
  if valid_606695 != nil:
    section.add "Timezone", valid_606695
  var valid_606696 = formData.getOrDefault("DBParameterGroupName")
  valid_606696 = validateParameter(valid_606696, JString, required = false,
                                 default = nil)
  if valid_606696 != nil:
    section.add "DBParameterGroupName", valid_606696
  var valid_606697 = formData.getOrDefault("EngineVersion")
  valid_606697 = validateParameter(valid_606697, JString, required = false,
                                 default = nil)
  if valid_606697 != nil:
    section.add "EngineVersion", valid_606697
  var valid_606698 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606698 = validateParameter(valid_606698, JBool, required = false, default = nil)
  if valid_606698 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606698
  var valid_606699 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606699 = validateParameter(valid_606699, JInt, required = false, default = nil)
  if valid_606699 != nil:
    section.add "BackupRetentionPeriod", valid_606699
  var valid_606700 = formData.getOrDefault("KmsKeyId")
  valid_606700 = validateParameter(valid_606700, JString, required = false,
                                 default = nil)
  if valid_606700 != nil:
    section.add "KmsKeyId", valid_606700
  var valid_606701 = formData.getOrDefault("Engine")
  valid_606701 = validateParameter(valid_606701, JString, required = true,
                                 default = nil)
  if valid_606701 != nil:
    section.add "Engine", valid_606701
  var valid_606702 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_606702 = validateParameter(valid_606702, JBool, required = false, default = nil)
  if valid_606702 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606702
  var valid_606703 = formData.getOrDefault("TdeCredentialPassword")
  valid_606703 = validateParameter(valid_606703, JString, required = false,
                                 default = nil)
  if valid_606703 != nil:
    section.add "TdeCredentialPassword", valid_606703
  var valid_606704 = formData.getOrDefault("DBName")
  valid_606704 = validateParameter(valid_606704, JString, required = false,
                                 default = nil)
  if valid_606704 != nil:
    section.add "DBName", valid_606704
  var valid_606705 = formData.getOrDefault("Iops")
  valid_606705 = validateParameter(valid_606705, JInt, required = false, default = nil)
  if valid_606705 != nil:
    section.add "Iops", valid_606705
  var valid_606706 = formData.getOrDefault("PubliclyAccessible")
  valid_606706 = validateParameter(valid_606706, JBool, required = false, default = nil)
  if valid_606706 != nil:
    section.add "PubliclyAccessible", valid_606706
  var valid_606707 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_606707
  var valid_606708 = formData.getOrDefault("LicenseModel")
  valid_606708 = validateParameter(valid_606708, JString, required = false,
                                 default = nil)
  if valid_606708 != nil:
    section.add "LicenseModel", valid_606708
  var valid_606709 = formData.getOrDefault("Tags")
  valid_606709 = validateParameter(valid_606709, JArray, required = false,
                                 default = nil)
  if valid_606709 != nil:
    section.add "Tags", valid_606709
  var valid_606710 = formData.getOrDefault("DomainIAMRoleName")
  valid_606710 = validateParameter(valid_606710, JString, required = false,
                                 default = nil)
  if valid_606710 != nil:
    section.add "DomainIAMRoleName", valid_606710
  var valid_606711 = formData.getOrDefault("OptionGroupName")
  valid_606711 = validateParameter(valid_606711, JString, required = false,
                                 default = nil)
  if valid_606711 != nil:
    section.add "OptionGroupName", valid_606711
  var valid_606712 = formData.getOrDefault("DBSecurityGroups")
  valid_606712 = validateParameter(valid_606712, JArray, required = false,
                                 default = nil)
  if valid_606712 != nil:
    section.add "DBSecurityGroups", valid_606712
  var valid_606713 = formData.getOrDefault("StorageEncrypted")
  valid_606713 = validateParameter(valid_606713, JBool, required = false, default = nil)
  if valid_606713 != nil:
    section.add "StorageEncrypted", valid_606713
  var valid_606714 = formData.getOrDefault("DBClusterIdentifier")
  valid_606714 = validateParameter(valid_606714, JString, required = false,
                                 default = nil)
  if valid_606714 != nil:
    section.add "DBClusterIdentifier", valid_606714
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606715: Call_PostCreateDBInstance_606660; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_606715.validator(path, query, header, formData, body)
  let scheme = call_606715.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606715.url(scheme.get, call_606715.host, call_606715.base,
                         call_606715.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606715, url, valid)

proc call*(call_606716: Call_PostCreateDBInstance_606660;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : Not supported.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  var query_606717 = newJObject()
  var formData_606718 = newJObject()
  add(formData_606718, "PromotionTier", newJInt(PromotionTier))
  add(formData_606718, "Port", newJInt(Port))
  add(formData_606718, "MultiAZ", newJBool(MultiAZ))
  add(formData_606718, "MasterUsername", newJString(MasterUsername))
  add(formData_606718, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_606718, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_606718.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606718, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_606718, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_606718, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_606718, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_606718.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606717, "Action", newJString(Action))
  add(formData_606718, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606718, "CharacterSetName", newJString(CharacterSetName))
  add(formData_606718, "StorageType", newJString(StorageType))
  add(formData_606718, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_606718, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_606718, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_606718, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606718, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_606718, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606718, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_606718, "Domain", newJString(Domain))
  add(formData_606718, "Timezone", newJString(Timezone))
  add(formData_606718, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_606718, "EngineVersion", newJString(EngineVersion))
  add(formData_606718, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_606718, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606718, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606718, "Engine", newJString(Engine))
  add(formData_606718, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_606718, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_606718, "DBName", newJString(DBName))
  add(formData_606718, "Iops", newJInt(Iops))
  add(formData_606718, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_606718, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_606718, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_606718.add "Tags", Tags
  add(formData_606718, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_606718, "OptionGroupName", newJString(OptionGroupName))
  add(query_606717, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_606718.add "DBSecurityGroups", DBSecurityGroups
  add(formData_606718, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606718, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606716.call(nil, query_606717, nil, formData_606718, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_606660(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_606661, base: "/",
    url: url_PostCreateDBInstance_606662, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_606584 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBInstance_606586(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_606585(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   DBName: JString
  ##         : Not supported.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606605 = query.getOrDefault("Engine")
  valid_606605 = validateParameter(valid_606605, JString, required = true,
                                 default = nil)
  if valid_606605 != nil:
    section.add "Engine", valid_606605
  var valid_606606 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606606 = validateParameter(valid_606606, JBool, required = false, default = nil)
  if valid_606606 != nil:
    section.add "CopyTagsToSnapshot", valid_606606
  var valid_606607 = query.getOrDefault("MonitoringInterval")
  valid_606607 = validateParameter(valid_606607, JInt, required = false, default = nil)
  if valid_606607 != nil:
    section.add "MonitoringInterval", valid_606607
  var valid_606608 = query.getOrDefault("KmsKeyId")
  valid_606608 = validateParameter(valid_606608, JString, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "KmsKeyId", valid_606608
  var valid_606609 = query.getOrDefault("MonitoringRoleArn")
  valid_606609 = validateParameter(valid_606609, JString, required = false,
                                 default = nil)
  if valid_606609 != nil:
    section.add "MonitoringRoleArn", valid_606609
  var valid_606610 = query.getOrDefault("MasterUsername")
  valid_606610 = validateParameter(valid_606610, JString, required = false,
                                 default = nil)
  if valid_606610 != nil:
    section.add "MasterUsername", valid_606610
  var valid_606611 = query.getOrDefault("BackupRetentionPeriod")
  valid_606611 = validateParameter(valid_606611, JInt, required = false, default = nil)
  if valid_606611 != nil:
    section.add "BackupRetentionPeriod", valid_606611
  var valid_606612 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606612 = validateParameter(valid_606612, JArray, required = false,
                                 default = nil)
  if valid_606612 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606612
  var valid_606613 = query.getOrDefault("EngineVersion")
  valid_606613 = validateParameter(valid_606613, JString, required = false,
                                 default = nil)
  if valid_606613 != nil:
    section.add "EngineVersion", valid_606613
  var valid_606614 = query.getOrDefault("Action")
  valid_606614 = validateParameter(valid_606614, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_606614 != nil:
    section.add "Action", valid_606614
  var valid_606615 = query.getOrDefault("Domain")
  valid_606615 = validateParameter(valid_606615, JString, required = false,
                                 default = nil)
  if valid_606615 != nil:
    section.add "Domain", valid_606615
  var valid_606616 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606616 = validateParameter(valid_606616, JArray, required = false,
                                 default = nil)
  if valid_606616 != nil:
    section.add "VpcSecurityGroupIds", valid_606616
  var valid_606617 = query.getOrDefault("AllocatedStorage")
  valid_606617 = validateParameter(valid_606617, JInt, required = false, default = nil)
  if valid_606617 != nil:
    section.add "AllocatedStorage", valid_606617
  var valid_606618 = query.getOrDefault("EnablePerformanceInsights")
  valid_606618 = validateParameter(valid_606618, JBool, required = false, default = nil)
  if valid_606618 != nil:
    section.add "EnablePerformanceInsights", valid_606618
  var valid_606619 = query.getOrDefault("PubliclyAccessible")
  valid_606619 = validateParameter(valid_606619, JBool, required = false, default = nil)
  if valid_606619 != nil:
    section.add "PubliclyAccessible", valid_606619
  var valid_606620 = query.getOrDefault("DBName")
  valid_606620 = validateParameter(valid_606620, JString, required = false,
                                 default = nil)
  if valid_606620 != nil:
    section.add "DBName", valid_606620
  var valid_606621 = query.getOrDefault("TdeCredentialPassword")
  valid_606621 = validateParameter(valid_606621, JString, required = false,
                                 default = nil)
  if valid_606621 != nil:
    section.add "TdeCredentialPassword", valid_606621
  var valid_606622 = query.getOrDefault("StorageEncrypted")
  valid_606622 = validateParameter(valid_606622, JBool, required = false, default = nil)
  if valid_606622 != nil:
    section.add "StorageEncrypted", valid_606622
  var valid_606623 = query.getOrDefault("DBParameterGroupName")
  valid_606623 = validateParameter(valid_606623, JString, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "DBParameterGroupName", valid_606623
  var valid_606624 = query.getOrDefault("DeletionProtection")
  valid_606624 = validateParameter(valid_606624, JBool, required = false, default = nil)
  if valid_606624 != nil:
    section.add "DeletionProtection", valid_606624
  var valid_606625 = query.getOrDefault("CharacterSetName")
  valid_606625 = validateParameter(valid_606625, JString, required = false,
                                 default = nil)
  if valid_606625 != nil:
    section.add "CharacterSetName", valid_606625
  var valid_606626 = query.getOrDefault("Tags")
  valid_606626 = validateParameter(valid_606626, JArray, required = false,
                                 default = nil)
  if valid_606626 != nil:
    section.add "Tags", valid_606626
  var valid_606627 = query.getOrDefault("DBClusterIdentifier")
  valid_606627 = validateParameter(valid_606627, JString, required = false,
                                 default = nil)
  if valid_606627 != nil:
    section.add "DBClusterIdentifier", valid_606627
  var valid_606628 = query.getOrDefault("LicenseModel")
  valid_606628 = validateParameter(valid_606628, JString, required = false,
                                 default = nil)
  if valid_606628 != nil:
    section.add "LicenseModel", valid_606628
  var valid_606629 = query.getOrDefault("DBInstanceIdentifier")
  valid_606629 = validateParameter(valid_606629, JString, required = true,
                                 default = nil)
  if valid_606629 != nil:
    section.add "DBInstanceIdentifier", valid_606629
  var valid_606630 = query.getOrDefault("TdeCredentialArn")
  valid_606630 = validateParameter(valid_606630, JString, required = false,
                                 default = nil)
  if valid_606630 != nil:
    section.add "TdeCredentialArn", valid_606630
  var valid_606631 = query.getOrDefault("PromotionTier")
  valid_606631 = validateParameter(valid_606631, JInt, required = false, default = nil)
  if valid_606631 != nil:
    section.add "PromotionTier", valid_606631
  var valid_606632 = query.getOrDefault("StorageType")
  valid_606632 = validateParameter(valid_606632, JString, required = false,
                                 default = nil)
  if valid_606632 != nil:
    section.add "StorageType", valid_606632
  var valid_606633 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606633 = validateParameter(valid_606633, JBool, required = false, default = nil)
  if valid_606633 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606633
  var valid_606634 = query.getOrDefault("MultiAZ")
  valid_606634 = validateParameter(valid_606634, JBool, required = false, default = nil)
  if valid_606634 != nil:
    section.add "MultiAZ", valid_606634
  var valid_606635 = query.getOrDefault("DBSecurityGroups")
  valid_606635 = validateParameter(valid_606635, JArray, required = false,
                                 default = nil)
  if valid_606635 != nil:
    section.add "DBSecurityGroups", valid_606635
  var valid_606636 = query.getOrDefault("Port")
  valid_606636 = validateParameter(valid_606636, JInt, required = false, default = nil)
  if valid_606636 != nil:
    section.add "Port", valid_606636
  var valid_606637 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_606637 = validateParameter(valid_606637, JString, required = false,
                                 default = nil)
  if valid_606637 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_606637
  var valid_606638 = query.getOrDefault("MasterUserPassword")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "MasterUserPassword", valid_606638
  var valid_606639 = query.getOrDefault("AvailabilityZone")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "AvailabilityZone", valid_606639
  var valid_606640 = query.getOrDefault("OptionGroupName")
  valid_606640 = validateParameter(valid_606640, JString, required = false,
                                 default = nil)
  if valid_606640 != nil:
    section.add "OptionGroupName", valid_606640
  var valid_606641 = query.getOrDefault("DBSubnetGroupName")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "DBSubnetGroupName", valid_606641
  var valid_606642 = query.getOrDefault("PreferredBackupWindow")
  valid_606642 = validateParameter(valid_606642, JString, required = false,
                                 default = nil)
  if valid_606642 != nil:
    section.add "PreferredBackupWindow", valid_606642
  var valid_606643 = query.getOrDefault("DBInstanceClass")
  valid_606643 = validateParameter(valid_606643, JString, required = true,
                                 default = nil)
  if valid_606643 != nil:
    section.add "DBInstanceClass", valid_606643
  var valid_606644 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606644 = validateParameter(valid_606644, JString, required = false,
                                 default = nil)
  if valid_606644 != nil:
    section.add "PreferredMaintenanceWindow", valid_606644
  var valid_606645 = query.getOrDefault("Timezone")
  valid_606645 = validateParameter(valid_606645, JString, required = false,
                                 default = nil)
  if valid_606645 != nil:
    section.add "Timezone", valid_606645
  var valid_606646 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_606646 = validateParameter(valid_606646, JBool, required = false, default = nil)
  if valid_606646 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606646
  var valid_606647 = query.getOrDefault("Iops")
  valid_606647 = validateParameter(valid_606647, JInt, required = false, default = nil)
  if valid_606647 != nil:
    section.add "Iops", valid_606647
  var valid_606648 = query.getOrDefault("Version")
  valid_606648 = validateParameter(valid_606648, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606648 != nil:
    section.add "Version", valid_606648
  var valid_606649 = query.getOrDefault("DomainIAMRoleName")
  valid_606649 = validateParameter(valid_606649, JString, required = false,
                                 default = nil)
  if valid_606649 != nil:
    section.add "DomainIAMRoleName", valid_606649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606650 = header.getOrDefault("X-Amz-Security-Token")
  valid_606650 = validateParameter(valid_606650, JString, required = false,
                                 default = nil)
  if valid_606650 != nil:
    section.add "X-Amz-Security-Token", valid_606650
  var valid_606651 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606651 = validateParameter(valid_606651, JString, required = false,
                                 default = nil)
  if valid_606651 != nil:
    section.add "X-Amz-SignedHeaders", valid_606651
  var valid_606652 = header.getOrDefault("X-Amz-Signature")
  valid_606652 = validateParameter(valid_606652, JString, required = false,
                                 default = nil)
  if valid_606652 != nil:
    section.add "X-Amz-Signature", valid_606652
  var valid_606653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606653 = validateParameter(valid_606653, JString, required = false,
                                 default = nil)
  if valid_606653 != nil:
    section.add "X-Amz-Content-Sha256", valid_606653
  var valid_606654 = header.getOrDefault("X-Amz-Date")
  valid_606654 = validateParameter(valid_606654, JString, required = false,
                                 default = nil)
  if valid_606654 != nil:
    section.add "X-Amz-Date", valid_606654
  var valid_606655 = header.getOrDefault("X-Amz-Credential")
  valid_606655 = validateParameter(valid_606655, JString, required = false,
                                 default = nil)
  if valid_606655 != nil:
    section.add "X-Amz-Credential", valid_606655
  var valid_606656 = header.getOrDefault("X-Amz-Algorithm")
  valid_606656 = validateParameter(valid_606656, JString, required = false,
                                 default = nil)
  if valid_606656 != nil:
    section.add "X-Amz-Algorithm", valid_606656
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606657: Call_GetCreateDBInstance_606584; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_606657.validator(path, query, header, formData, body)
  let scheme = call_606657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606657.url(scheme.get, call_606657.host, call_606657.base,
                         call_606657.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606657, url, valid)

proc call*(call_606658: Call_GetCreateDBInstance_606584; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; DBClusterIdentifier: string = "";
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          PromotionTier: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   Action: string (required)
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   DBName: string
  ##         : Not supported.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </p> <p>You can enable or disable deletion protection for the DB cluster. For more information, see <a>CreateDBCluster</a>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_606659 = newJObject()
  add(query_606659, "Engine", newJString(Engine))
  add(query_606659, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_606659, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_606659, "KmsKeyId", newJString(KmsKeyId))
  add(query_606659, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_606659, "MasterUsername", newJString(MasterUsername))
  add(query_606659, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_606659.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606659, "EngineVersion", newJString(EngineVersion))
  add(query_606659, "Action", newJString(Action))
  add(query_606659, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_606659.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606659, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_606659, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_606659, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_606659, "DBName", newJString(DBName))
  add(query_606659, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_606659, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606659, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606659, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606659, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_606659.add "Tags", Tags
  add(query_606659, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606659, "LicenseModel", newJString(LicenseModel))
  add(query_606659, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606659, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_606659, "PromotionTier", newJInt(PromotionTier))
  add(query_606659, "StorageType", newJString(StorageType))
  add(query_606659, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_606659, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_606659.add "DBSecurityGroups", DBSecurityGroups
  add(query_606659, "Port", newJInt(Port))
  add(query_606659, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_606659, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606659, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_606659, "OptionGroupName", newJString(OptionGroupName))
  add(query_606659, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606659, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606659, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_606659, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606659, "Timezone", newJString(Timezone))
  add(query_606659, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_606659, "Iops", newJInt(Iops))
  add(query_606659, "Version", newJString(Version))
  add(query_606659, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_606658.call(nil, query_606659, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_606584(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_606585, base: "/",
    url: url_GetCreateDBInstance_606586, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_606738 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBParameterGroup_606740(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_606739(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606741 = query.getOrDefault("Action")
  valid_606741 = validateParameter(valid_606741, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_606741 != nil:
    section.add "Action", valid_606741
  var valid_606742 = query.getOrDefault("Version")
  valid_606742 = validateParameter(valid_606742, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606742 != nil:
    section.add "Version", valid_606742
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606743 = header.getOrDefault("X-Amz-Signature")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "X-Amz-Signature", valid_606743
  var valid_606744 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-Content-Sha256", valid_606744
  var valid_606745 = header.getOrDefault("X-Amz-Date")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "X-Amz-Date", valid_606745
  var valid_606746 = header.getOrDefault("X-Amz-Credential")
  valid_606746 = validateParameter(valid_606746, JString, required = false,
                                 default = nil)
  if valid_606746 != nil:
    section.add "X-Amz-Credential", valid_606746
  var valid_606747 = header.getOrDefault("X-Amz-Security-Token")
  valid_606747 = validateParameter(valid_606747, JString, required = false,
                                 default = nil)
  if valid_606747 != nil:
    section.add "X-Amz-Security-Token", valid_606747
  var valid_606748 = header.getOrDefault("X-Amz-Algorithm")
  valid_606748 = validateParameter(valid_606748, JString, required = false,
                                 default = nil)
  if valid_606748 != nil:
    section.add "X-Amz-Algorithm", valid_606748
  var valid_606749 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606749 = validateParameter(valid_606749, JString, required = false,
                                 default = nil)
  if valid_606749 != nil:
    section.add "X-Amz-SignedHeaders", valid_606749
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606750 = formData.getOrDefault("Description")
  valid_606750 = validateParameter(valid_606750, JString, required = true,
                                 default = nil)
  if valid_606750 != nil:
    section.add "Description", valid_606750
  var valid_606751 = formData.getOrDefault("DBParameterGroupName")
  valid_606751 = validateParameter(valid_606751, JString, required = true,
                                 default = nil)
  if valid_606751 != nil:
    section.add "DBParameterGroupName", valid_606751
  var valid_606752 = formData.getOrDefault("Tags")
  valid_606752 = validateParameter(valid_606752, JArray, required = false,
                                 default = nil)
  if valid_606752 != nil:
    section.add "Tags", valid_606752
  var valid_606753 = formData.getOrDefault("DBParameterGroupFamily")
  valid_606753 = validateParameter(valid_606753, JString, required = true,
                                 default = nil)
  if valid_606753 != nil:
    section.add "DBParameterGroupFamily", valid_606753
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606754: Call_PostCreateDBParameterGroup_606738; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606754.validator(path, query, header, formData, body)
  let scheme = call_606754.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606754.url(scheme.get, call_606754.host, call_606754.base,
                         call_606754.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606754, url, valid)

proc call*(call_606755: Call_PostCreateDBParameterGroup_606738;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  var query_606756 = newJObject()
  var formData_606757 = newJObject()
  add(formData_606757, "Description", newJString(Description))
  add(formData_606757, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606756, "Action", newJString(Action))
  if Tags != nil:
    formData_606757.add "Tags", Tags
  add(query_606756, "Version", newJString(Version))
  add(formData_606757, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_606755.call(nil, query_606756, nil, formData_606757, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_606738(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_606739, base: "/",
    url: url_PostCreateDBParameterGroup_606740,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_606719 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBParameterGroup_606721(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_606720(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_606722 = query.getOrDefault("DBParameterGroupFamily")
  valid_606722 = validateParameter(valid_606722, JString, required = true,
                                 default = nil)
  if valid_606722 != nil:
    section.add "DBParameterGroupFamily", valid_606722
  var valid_606723 = query.getOrDefault("DBParameterGroupName")
  valid_606723 = validateParameter(valid_606723, JString, required = true,
                                 default = nil)
  if valid_606723 != nil:
    section.add "DBParameterGroupName", valid_606723
  var valid_606724 = query.getOrDefault("Tags")
  valid_606724 = validateParameter(valid_606724, JArray, required = false,
                                 default = nil)
  if valid_606724 != nil:
    section.add "Tags", valid_606724
  var valid_606725 = query.getOrDefault("Action")
  valid_606725 = validateParameter(valid_606725, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_606725 != nil:
    section.add "Action", valid_606725
  var valid_606726 = query.getOrDefault("Description")
  valid_606726 = validateParameter(valid_606726, JString, required = true,
                                 default = nil)
  if valid_606726 != nil:
    section.add "Description", valid_606726
  var valid_606727 = query.getOrDefault("Version")
  valid_606727 = validateParameter(valid_606727, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606727 != nil:
    section.add "Version", valid_606727
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606728 = header.getOrDefault("X-Amz-Signature")
  valid_606728 = validateParameter(valid_606728, JString, required = false,
                                 default = nil)
  if valid_606728 != nil:
    section.add "X-Amz-Signature", valid_606728
  var valid_606729 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "X-Amz-Content-Sha256", valid_606729
  var valid_606730 = header.getOrDefault("X-Amz-Date")
  valid_606730 = validateParameter(valid_606730, JString, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "X-Amz-Date", valid_606730
  var valid_606731 = header.getOrDefault("X-Amz-Credential")
  valid_606731 = validateParameter(valid_606731, JString, required = false,
                                 default = nil)
  if valid_606731 != nil:
    section.add "X-Amz-Credential", valid_606731
  var valid_606732 = header.getOrDefault("X-Amz-Security-Token")
  valid_606732 = validateParameter(valid_606732, JString, required = false,
                                 default = nil)
  if valid_606732 != nil:
    section.add "X-Amz-Security-Token", valid_606732
  var valid_606733 = header.getOrDefault("X-Amz-Algorithm")
  valid_606733 = validateParameter(valid_606733, JString, required = false,
                                 default = nil)
  if valid_606733 != nil:
    section.add "X-Amz-Algorithm", valid_606733
  var valid_606734 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606734 = validateParameter(valid_606734, JString, required = false,
                                 default = nil)
  if valid_606734 != nil:
    section.add "X-Amz-SignedHeaders", valid_606734
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606735: Call_GetCreateDBParameterGroup_606719; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606735.validator(path, query, header, formData, body)
  let scheme = call_606735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606735.url(scheme.get, call_606735.host, call_606735.base,
                         call_606735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606735, url, valid)

proc call*(call_606736: Call_GetCreateDBParameterGroup_606719;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_606737 = newJObject()
  add(query_606737, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_606737, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_606737.add "Tags", Tags
  add(query_606737, "Action", newJString(Action))
  add(query_606737, "Description", newJString(Description))
  add(query_606737, "Version", newJString(Version))
  result = call_606736.call(nil, query_606737, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_606719(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_606720, base: "/",
    url: url_GetCreateDBParameterGroup_606721,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_606777 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBSubnetGroup_606779(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_606778(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606780 = query.getOrDefault("Action")
  valid_606780 = validateParameter(valid_606780, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_606780 != nil:
    section.add "Action", valid_606780
  var valid_606781 = query.getOrDefault("Version")
  valid_606781 = validateParameter(valid_606781, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606781 != nil:
    section.add "Version", valid_606781
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606782 = header.getOrDefault("X-Amz-Signature")
  valid_606782 = validateParameter(valid_606782, JString, required = false,
                                 default = nil)
  if valid_606782 != nil:
    section.add "X-Amz-Signature", valid_606782
  var valid_606783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606783 = validateParameter(valid_606783, JString, required = false,
                                 default = nil)
  if valid_606783 != nil:
    section.add "X-Amz-Content-Sha256", valid_606783
  var valid_606784 = header.getOrDefault("X-Amz-Date")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "X-Amz-Date", valid_606784
  var valid_606785 = header.getOrDefault("X-Amz-Credential")
  valid_606785 = validateParameter(valid_606785, JString, required = false,
                                 default = nil)
  if valid_606785 != nil:
    section.add "X-Amz-Credential", valid_606785
  var valid_606786 = header.getOrDefault("X-Amz-Security-Token")
  valid_606786 = validateParameter(valid_606786, JString, required = false,
                                 default = nil)
  if valid_606786 != nil:
    section.add "X-Amz-Security-Token", valid_606786
  var valid_606787 = header.getOrDefault("X-Amz-Algorithm")
  valid_606787 = validateParameter(valid_606787, JString, required = false,
                                 default = nil)
  if valid_606787 != nil:
    section.add "X-Amz-Algorithm", valid_606787
  var valid_606788 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606788 = validateParameter(valid_606788, JString, required = false,
                                 default = nil)
  if valid_606788 != nil:
    section.add "X-Amz-SignedHeaders", valid_606788
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_606789 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_606789 = validateParameter(valid_606789, JString, required = true,
                                 default = nil)
  if valid_606789 != nil:
    section.add "DBSubnetGroupDescription", valid_606789
  var valid_606790 = formData.getOrDefault("Tags")
  valid_606790 = validateParameter(valid_606790, JArray, required = false,
                                 default = nil)
  if valid_606790 != nil:
    section.add "Tags", valid_606790
  var valid_606791 = formData.getOrDefault("DBSubnetGroupName")
  valid_606791 = validateParameter(valid_606791, JString, required = true,
                                 default = nil)
  if valid_606791 != nil:
    section.add "DBSubnetGroupName", valid_606791
  var valid_606792 = formData.getOrDefault("SubnetIds")
  valid_606792 = validateParameter(valid_606792, JArray, required = true, default = nil)
  if valid_606792 != nil:
    section.add "SubnetIds", valid_606792
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606793: Call_PostCreateDBSubnetGroup_606777; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606793.validator(path, query, header, formData, body)
  let scheme = call_606793.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606793.url(scheme.get, call_606793.host, call_606793.base,
                         call_606793.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606793, url, valid)

proc call*(call_606794: Call_PostCreateDBSubnetGroup_606777;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_606795 = newJObject()
  var formData_606796 = newJObject()
  add(formData_606796, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606795, "Action", newJString(Action))
  if Tags != nil:
    formData_606796.add "Tags", Tags
  add(formData_606796, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606795, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_606796.add "SubnetIds", SubnetIds
  result = call_606794.call(nil, query_606795, nil, formData_606796, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_606777(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_606778, base: "/",
    url: url_PostCreateDBSubnetGroup_606779, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_606758 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBSubnetGroup_606760(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_606759(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606761 = query.getOrDefault("Tags")
  valid_606761 = validateParameter(valid_606761, JArray, required = false,
                                 default = nil)
  if valid_606761 != nil:
    section.add "Tags", valid_606761
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_606762 = query.getOrDefault("SubnetIds")
  valid_606762 = validateParameter(valid_606762, JArray, required = true, default = nil)
  if valid_606762 != nil:
    section.add "SubnetIds", valid_606762
  var valid_606763 = query.getOrDefault("Action")
  valid_606763 = validateParameter(valid_606763, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_606763 != nil:
    section.add "Action", valid_606763
  var valid_606764 = query.getOrDefault("DBSubnetGroupDescription")
  valid_606764 = validateParameter(valid_606764, JString, required = true,
                                 default = nil)
  if valid_606764 != nil:
    section.add "DBSubnetGroupDescription", valid_606764
  var valid_606765 = query.getOrDefault("DBSubnetGroupName")
  valid_606765 = validateParameter(valid_606765, JString, required = true,
                                 default = nil)
  if valid_606765 != nil:
    section.add "DBSubnetGroupName", valid_606765
  var valid_606766 = query.getOrDefault("Version")
  valid_606766 = validateParameter(valid_606766, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606766 != nil:
    section.add "Version", valid_606766
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606767 = header.getOrDefault("X-Amz-Signature")
  valid_606767 = validateParameter(valid_606767, JString, required = false,
                                 default = nil)
  if valid_606767 != nil:
    section.add "X-Amz-Signature", valid_606767
  var valid_606768 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "X-Amz-Content-Sha256", valid_606768
  var valid_606769 = header.getOrDefault("X-Amz-Date")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-Date", valid_606769
  var valid_606770 = header.getOrDefault("X-Amz-Credential")
  valid_606770 = validateParameter(valid_606770, JString, required = false,
                                 default = nil)
  if valid_606770 != nil:
    section.add "X-Amz-Credential", valid_606770
  var valid_606771 = header.getOrDefault("X-Amz-Security-Token")
  valid_606771 = validateParameter(valid_606771, JString, required = false,
                                 default = nil)
  if valid_606771 != nil:
    section.add "X-Amz-Security-Token", valid_606771
  var valid_606772 = header.getOrDefault("X-Amz-Algorithm")
  valid_606772 = validateParameter(valid_606772, JString, required = false,
                                 default = nil)
  if valid_606772 != nil:
    section.add "X-Amz-Algorithm", valid_606772
  var valid_606773 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606773 = validateParameter(valid_606773, JString, required = false,
                                 default = nil)
  if valid_606773 != nil:
    section.add "X-Amz-SignedHeaders", valid_606773
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606774: Call_GetCreateDBSubnetGroup_606758; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606774.validator(path, query, header, formData, body)
  let scheme = call_606774.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606774.url(scheme.get, call_606774.host, call_606774.base,
                         call_606774.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606774, url, valid)

proc call*(call_606775: Call_GetCreateDBSubnetGroup_606758; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606776 = newJObject()
  if Tags != nil:
    query_606776.add "Tags", Tags
  if SubnetIds != nil:
    query_606776.add "SubnetIds", SubnetIds
  add(query_606776, "Action", newJString(Action))
  add(query_606776, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606776, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606776, "Version", newJString(Version))
  result = call_606775.call(nil, query_606776, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_606758(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_606759, base: "/",
    url: url_GetCreateDBSubnetGroup_606760, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_606819 = ref object of OpenApiRestCall_605573
proc url_PostCreateEventSubscription_606821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_606820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606822 = query.getOrDefault("Action")
  valid_606822 = validateParameter(valid_606822, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_606822 != nil:
    section.add "Action", valid_606822
  var valid_606823 = query.getOrDefault("Version")
  valid_606823 = validateParameter(valid_606823, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606823 != nil:
    section.add "Version", valid_606823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606824 = header.getOrDefault("X-Amz-Signature")
  valid_606824 = validateParameter(valid_606824, JString, required = false,
                                 default = nil)
  if valid_606824 != nil:
    section.add "X-Amz-Signature", valid_606824
  var valid_606825 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606825 = validateParameter(valid_606825, JString, required = false,
                                 default = nil)
  if valid_606825 != nil:
    section.add "X-Amz-Content-Sha256", valid_606825
  var valid_606826 = header.getOrDefault("X-Amz-Date")
  valid_606826 = validateParameter(valid_606826, JString, required = false,
                                 default = nil)
  if valid_606826 != nil:
    section.add "X-Amz-Date", valid_606826
  var valid_606827 = header.getOrDefault("X-Amz-Credential")
  valid_606827 = validateParameter(valid_606827, JString, required = false,
                                 default = nil)
  if valid_606827 != nil:
    section.add "X-Amz-Credential", valid_606827
  var valid_606828 = header.getOrDefault("X-Amz-Security-Token")
  valid_606828 = validateParameter(valid_606828, JString, required = false,
                                 default = nil)
  if valid_606828 != nil:
    section.add "X-Amz-Security-Token", valid_606828
  var valid_606829 = header.getOrDefault("X-Amz-Algorithm")
  valid_606829 = validateParameter(valid_606829, JString, required = false,
                                 default = nil)
  if valid_606829 != nil:
    section.add "X-Amz-Algorithm", valid_606829
  var valid_606830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606830 = validateParameter(valid_606830, JString, required = false,
                                 default = nil)
  if valid_606830 != nil:
    section.add "X-Amz-SignedHeaders", valid_606830
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  section = newJObject()
  var valid_606831 = formData.getOrDefault("SourceIds")
  valid_606831 = validateParameter(valid_606831, JArray, required = false,
                                 default = nil)
  if valid_606831 != nil:
    section.add "SourceIds", valid_606831
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_606832 = formData.getOrDefault("SnsTopicArn")
  valid_606832 = validateParameter(valid_606832, JString, required = true,
                                 default = nil)
  if valid_606832 != nil:
    section.add "SnsTopicArn", valid_606832
  var valid_606833 = formData.getOrDefault("Enabled")
  valid_606833 = validateParameter(valid_606833, JBool, required = false, default = nil)
  if valid_606833 != nil:
    section.add "Enabled", valid_606833
  var valid_606834 = formData.getOrDefault("SubscriptionName")
  valid_606834 = validateParameter(valid_606834, JString, required = true,
                                 default = nil)
  if valid_606834 != nil:
    section.add "SubscriptionName", valid_606834
  var valid_606835 = formData.getOrDefault("SourceType")
  valid_606835 = validateParameter(valid_606835, JString, required = false,
                                 default = nil)
  if valid_606835 != nil:
    section.add "SourceType", valid_606835
  var valid_606836 = formData.getOrDefault("EventCategories")
  valid_606836 = validateParameter(valid_606836, JArray, required = false,
                                 default = nil)
  if valid_606836 != nil:
    section.add "EventCategories", valid_606836
  var valid_606837 = formData.getOrDefault("Tags")
  valid_606837 = validateParameter(valid_606837, JArray, required = false,
                                 default = nil)
  if valid_606837 != nil:
    section.add "Tags", valid_606837
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606838: Call_PostCreateEventSubscription_606819; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_606838.validator(path, query, header, formData, body)
  let scheme = call_606838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606838.url(scheme.get, call_606838.host, call_606838.base,
                         call_606838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606838, url, valid)

proc call*(call_606839: Call_PostCreateEventSubscription_606819;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Version: string (required)
  var query_606840 = newJObject()
  var formData_606841 = newJObject()
  if SourceIds != nil:
    formData_606841.add "SourceIds", SourceIds
  add(formData_606841, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_606841, "Enabled", newJBool(Enabled))
  add(formData_606841, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606841, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_606841.add "EventCategories", EventCategories
  add(query_606840, "Action", newJString(Action))
  if Tags != nil:
    formData_606841.add "Tags", Tags
  add(query_606840, "Version", newJString(Version))
  result = call_606839.call(nil, query_606840, nil, formData_606841, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_606819(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_606820, base: "/",
    url: url_PostCreateEventSubscription_606821,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_606797 = ref object of OpenApiRestCall_605573
proc url_GetCreateEventSubscription_606799(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_606798(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606800 = query.getOrDefault("Tags")
  valid_606800 = validateParameter(valid_606800, JArray, required = false,
                                 default = nil)
  if valid_606800 != nil:
    section.add "Tags", valid_606800
  var valid_606801 = query.getOrDefault("SourceType")
  valid_606801 = validateParameter(valid_606801, JString, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "SourceType", valid_606801
  var valid_606802 = query.getOrDefault("Enabled")
  valid_606802 = validateParameter(valid_606802, JBool, required = false, default = nil)
  if valid_606802 != nil:
    section.add "Enabled", valid_606802
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_606803 = query.getOrDefault("SubscriptionName")
  valid_606803 = validateParameter(valid_606803, JString, required = true,
                                 default = nil)
  if valid_606803 != nil:
    section.add "SubscriptionName", valid_606803
  var valid_606804 = query.getOrDefault("EventCategories")
  valid_606804 = validateParameter(valid_606804, JArray, required = false,
                                 default = nil)
  if valid_606804 != nil:
    section.add "EventCategories", valid_606804
  var valid_606805 = query.getOrDefault("SourceIds")
  valid_606805 = validateParameter(valid_606805, JArray, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "SourceIds", valid_606805
  var valid_606806 = query.getOrDefault("Action")
  valid_606806 = validateParameter(valid_606806, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_606806 != nil:
    section.add "Action", valid_606806
  var valid_606807 = query.getOrDefault("SnsTopicArn")
  valid_606807 = validateParameter(valid_606807, JString, required = true,
                                 default = nil)
  if valid_606807 != nil:
    section.add "SnsTopicArn", valid_606807
  var valid_606808 = query.getOrDefault("Version")
  valid_606808 = validateParameter(valid_606808, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606808 != nil:
    section.add "Version", valid_606808
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606809 = header.getOrDefault("X-Amz-Signature")
  valid_606809 = validateParameter(valid_606809, JString, required = false,
                                 default = nil)
  if valid_606809 != nil:
    section.add "X-Amz-Signature", valid_606809
  var valid_606810 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606810 = validateParameter(valid_606810, JString, required = false,
                                 default = nil)
  if valid_606810 != nil:
    section.add "X-Amz-Content-Sha256", valid_606810
  var valid_606811 = header.getOrDefault("X-Amz-Date")
  valid_606811 = validateParameter(valid_606811, JString, required = false,
                                 default = nil)
  if valid_606811 != nil:
    section.add "X-Amz-Date", valid_606811
  var valid_606812 = header.getOrDefault("X-Amz-Credential")
  valid_606812 = validateParameter(valid_606812, JString, required = false,
                                 default = nil)
  if valid_606812 != nil:
    section.add "X-Amz-Credential", valid_606812
  var valid_606813 = header.getOrDefault("X-Amz-Security-Token")
  valid_606813 = validateParameter(valid_606813, JString, required = false,
                                 default = nil)
  if valid_606813 != nil:
    section.add "X-Amz-Security-Token", valid_606813
  var valid_606814 = header.getOrDefault("X-Amz-Algorithm")
  valid_606814 = validateParameter(valid_606814, JString, required = false,
                                 default = nil)
  if valid_606814 != nil:
    section.add "X-Amz-Algorithm", valid_606814
  var valid_606815 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606815 = validateParameter(valid_606815, JString, required = false,
                                 default = nil)
  if valid_606815 != nil:
    section.add "X-Amz-SignedHeaders", valid_606815
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606816: Call_GetCreateEventSubscription_606797; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_606816.validator(path, query, header, formData, body)
  let scheme = call_606816.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606816.url(scheme.get, call_606816.host, call_606816.base,
                         call_606816.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606816, url, valid)

proc call*(call_606817: Call_GetCreateEventSubscription_606797;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_606818 = newJObject()
  if Tags != nil:
    query_606818.add "Tags", Tags
  add(query_606818, "SourceType", newJString(SourceType))
  add(query_606818, "Enabled", newJBool(Enabled))
  add(query_606818, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_606818.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_606818.add "SourceIds", SourceIds
  add(query_606818, "Action", newJString(Action))
  add(query_606818, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_606818, "Version", newJString(Version))
  result = call_606817.call(nil, query_606818, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_606797(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_606798, base: "/",
    url: url_GetCreateEventSubscription_606799,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_606860 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBCluster_606862(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_606861(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606863 = query.getOrDefault("Action")
  valid_606863 = validateParameter(valid_606863, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_606863 != nil:
    section.add "Action", valid_606863
  var valid_606864 = query.getOrDefault("Version")
  valid_606864 = validateParameter(valid_606864, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606864 != nil:
    section.add "Version", valid_606864
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606865 = header.getOrDefault("X-Amz-Signature")
  valid_606865 = validateParameter(valid_606865, JString, required = false,
                                 default = nil)
  if valid_606865 != nil:
    section.add "X-Amz-Signature", valid_606865
  var valid_606866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606866 = validateParameter(valid_606866, JString, required = false,
                                 default = nil)
  if valid_606866 != nil:
    section.add "X-Amz-Content-Sha256", valid_606866
  var valid_606867 = header.getOrDefault("X-Amz-Date")
  valid_606867 = validateParameter(valid_606867, JString, required = false,
                                 default = nil)
  if valid_606867 != nil:
    section.add "X-Amz-Date", valid_606867
  var valid_606868 = header.getOrDefault("X-Amz-Credential")
  valid_606868 = validateParameter(valid_606868, JString, required = false,
                                 default = nil)
  if valid_606868 != nil:
    section.add "X-Amz-Credential", valid_606868
  var valid_606869 = header.getOrDefault("X-Amz-Security-Token")
  valid_606869 = validateParameter(valid_606869, JString, required = false,
                                 default = nil)
  if valid_606869 != nil:
    section.add "X-Amz-Security-Token", valid_606869
  var valid_606870 = header.getOrDefault("X-Amz-Algorithm")
  valid_606870 = validateParameter(valid_606870, JString, required = false,
                                 default = nil)
  if valid_606870 != nil:
    section.add "X-Amz-Algorithm", valid_606870
  var valid_606871 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606871 = validateParameter(valid_606871, JString, required = false,
                                 default = nil)
  if valid_606871 != nil:
    section.add "X-Amz-SignedHeaders", valid_606871
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_606872 = formData.getOrDefault("SkipFinalSnapshot")
  valid_606872 = validateParameter(valid_606872, JBool, required = false, default = nil)
  if valid_606872 != nil:
    section.add "SkipFinalSnapshot", valid_606872
  var valid_606873 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606873 = validateParameter(valid_606873, JString, required = false,
                                 default = nil)
  if valid_606873 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606873
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606874 = formData.getOrDefault("DBClusterIdentifier")
  valid_606874 = validateParameter(valid_606874, JString, required = true,
                                 default = nil)
  if valid_606874 != nil:
    section.add "DBClusterIdentifier", valid_606874
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606875: Call_PostDeleteDBCluster_606860; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_606875.validator(path, query, header, formData, body)
  let scheme = call_606875.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606875.url(scheme.get, call_606875.host, call_606875.base,
                         call_606875.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606875, url, valid)

proc call*(call_606876: Call_PostDeleteDBCluster_606860;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_606877 = newJObject()
  var formData_606878 = newJObject()
  add(query_606877, "Action", newJString(Action))
  add(formData_606878, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_606878, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_606877, "Version", newJString(Version))
  add(formData_606878, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606876.call(nil, query_606877, nil, formData_606878, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_606860(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_606861, base: "/",
    url: url_PostDeleteDBCluster_606862, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_606842 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBCluster_606844(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_606843(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606845 = query.getOrDefault("DBClusterIdentifier")
  valid_606845 = validateParameter(valid_606845, JString, required = true,
                                 default = nil)
  if valid_606845 != nil:
    section.add "DBClusterIdentifier", valid_606845
  var valid_606846 = query.getOrDefault("SkipFinalSnapshot")
  valid_606846 = validateParameter(valid_606846, JBool, required = false, default = nil)
  if valid_606846 != nil:
    section.add "SkipFinalSnapshot", valid_606846
  var valid_606847 = query.getOrDefault("Action")
  valid_606847 = validateParameter(valid_606847, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_606847 != nil:
    section.add "Action", valid_606847
  var valid_606848 = query.getOrDefault("Version")
  valid_606848 = validateParameter(valid_606848, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606848 != nil:
    section.add "Version", valid_606848
  var valid_606849 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606849 = validateParameter(valid_606849, JString, required = false,
                                 default = nil)
  if valid_606849 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606849
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606850 = header.getOrDefault("X-Amz-Signature")
  valid_606850 = validateParameter(valid_606850, JString, required = false,
                                 default = nil)
  if valid_606850 != nil:
    section.add "X-Amz-Signature", valid_606850
  var valid_606851 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606851 = validateParameter(valid_606851, JString, required = false,
                                 default = nil)
  if valid_606851 != nil:
    section.add "X-Amz-Content-Sha256", valid_606851
  var valid_606852 = header.getOrDefault("X-Amz-Date")
  valid_606852 = validateParameter(valid_606852, JString, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "X-Amz-Date", valid_606852
  var valid_606853 = header.getOrDefault("X-Amz-Credential")
  valid_606853 = validateParameter(valid_606853, JString, required = false,
                                 default = nil)
  if valid_606853 != nil:
    section.add "X-Amz-Credential", valid_606853
  var valid_606854 = header.getOrDefault("X-Amz-Security-Token")
  valid_606854 = validateParameter(valid_606854, JString, required = false,
                                 default = nil)
  if valid_606854 != nil:
    section.add "X-Amz-Security-Token", valid_606854
  var valid_606855 = header.getOrDefault("X-Amz-Algorithm")
  valid_606855 = validateParameter(valid_606855, JString, required = false,
                                 default = nil)
  if valid_606855 != nil:
    section.add "X-Amz-Algorithm", valid_606855
  var valid_606856 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606856 = validateParameter(valid_606856, JString, required = false,
                                 default = nil)
  if valid_606856 != nil:
    section.add "X-Amz-SignedHeaders", valid_606856
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606857: Call_GetDeleteDBCluster_606842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_606857.validator(path, query, header, formData, body)
  let scheme = call_606857.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606857.url(scheme.get, call_606857.host, call_606857.base,
                         call_606857.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606857, url, valid)

proc call*(call_606858: Call_GetDeleteDBCluster_606842;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_606859 = newJObject()
  add(query_606859, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606859, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_606859, "Action", newJString(Action))
  add(query_606859, "Version", newJString(Version))
  add(query_606859, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_606858.call(nil, query_606859, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_606842(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_606843,
    base: "/", url: url_GetDeleteDBCluster_606844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_606895 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBClusterParameterGroup_606897(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_606896(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606898 = query.getOrDefault("Action")
  valid_606898 = validateParameter(valid_606898, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_606898 != nil:
    section.add "Action", valid_606898
  var valid_606899 = query.getOrDefault("Version")
  valid_606899 = validateParameter(valid_606899, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606899 != nil:
    section.add "Version", valid_606899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606900 = header.getOrDefault("X-Amz-Signature")
  valid_606900 = validateParameter(valid_606900, JString, required = false,
                                 default = nil)
  if valid_606900 != nil:
    section.add "X-Amz-Signature", valid_606900
  var valid_606901 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606901 = validateParameter(valid_606901, JString, required = false,
                                 default = nil)
  if valid_606901 != nil:
    section.add "X-Amz-Content-Sha256", valid_606901
  var valid_606902 = header.getOrDefault("X-Amz-Date")
  valid_606902 = validateParameter(valid_606902, JString, required = false,
                                 default = nil)
  if valid_606902 != nil:
    section.add "X-Amz-Date", valid_606902
  var valid_606903 = header.getOrDefault("X-Amz-Credential")
  valid_606903 = validateParameter(valid_606903, JString, required = false,
                                 default = nil)
  if valid_606903 != nil:
    section.add "X-Amz-Credential", valid_606903
  var valid_606904 = header.getOrDefault("X-Amz-Security-Token")
  valid_606904 = validateParameter(valid_606904, JString, required = false,
                                 default = nil)
  if valid_606904 != nil:
    section.add "X-Amz-Security-Token", valid_606904
  var valid_606905 = header.getOrDefault("X-Amz-Algorithm")
  valid_606905 = validateParameter(valid_606905, JString, required = false,
                                 default = nil)
  if valid_606905 != nil:
    section.add "X-Amz-Algorithm", valid_606905
  var valid_606906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606906 = validateParameter(valid_606906, JString, required = false,
                                 default = nil)
  if valid_606906 != nil:
    section.add "X-Amz-SignedHeaders", valid_606906
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606907 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606907 = validateParameter(valid_606907, JString, required = true,
                                 default = nil)
  if valid_606907 != nil:
    section.add "DBClusterParameterGroupName", valid_606907
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606908: Call_PostDeleteDBClusterParameterGroup_606895;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_606908.validator(path, query, header, formData, body)
  let scheme = call_606908.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606908.url(scheme.get, call_606908.host, call_606908.base,
                         call_606908.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606908, url, valid)

proc call*(call_606909: Call_PostDeleteDBClusterParameterGroup_606895;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_606910 = newJObject()
  var formData_606911 = newJObject()
  add(query_606910, "Action", newJString(Action))
  add(formData_606911, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606910, "Version", newJString(Version))
  result = call_606909.call(nil, query_606910, nil, formData_606911, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_606895(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_606896, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_606897,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_606879 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBClusterParameterGroup_606881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_606880(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606882 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606882 = validateParameter(valid_606882, JString, required = true,
                                 default = nil)
  if valid_606882 != nil:
    section.add "DBClusterParameterGroupName", valid_606882
  var valid_606883 = query.getOrDefault("Action")
  valid_606883 = validateParameter(valid_606883, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_606883 != nil:
    section.add "Action", valid_606883
  var valid_606884 = query.getOrDefault("Version")
  valid_606884 = validateParameter(valid_606884, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606884 != nil:
    section.add "Version", valid_606884
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606885 = header.getOrDefault("X-Amz-Signature")
  valid_606885 = validateParameter(valid_606885, JString, required = false,
                                 default = nil)
  if valid_606885 != nil:
    section.add "X-Amz-Signature", valid_606885
  var valid_606886 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606886 = validateParameter(valid_606886, JString, required = false,
                                 default = nil)
  if valid_606886 != nil:
    section.add "X-Amz-Content-Sha256", valid_606886
  var valid_606887 = header.getOrDefault("X-Amz-Date")
  valid_606887 = validateParameter(valid_606887, JString, required = false,
                                 default = nil)
  if valid_606887 != nil:
    section.add "X-Amz-Date", valid_606887
  var valid_606888 = header.getOrDefault("X-Amz-Credential")
  valid_606888 = validateParameter(valid_606888, JString, required = false,
                                 default = nil)
  if valid_606888 != nil:
    section.add "X-Amz-Credential", valid_606888
  var valid_606889 = header.getOrDefault("X-Amz-Security-Token")
  valid_606889 = validateParameter(valid_606889, JString, required = false,
                                 default = nil)
  if valid_606889 != nil:
    section.add "X-Amz-Security-Token", valid_606889
  var valid_606890 = header.getOrDefault("X-Amz-Algorithm")
  valid_606890 = validateParameter(valid_606890, JString, required = false,
                                 default = nil)
  if valid_606890 != nil:
    section.add "X-Amz-Algorithm", valid_606890
  var valid_606891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606891 = validateParameter(valid_606891, JString, required = false,
                                 default = nil)
  if valid_606891 != nil:
    section.add "X-Amz-SignedHeaders", valid_606891
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606892: Call_GetDeleteDBClusterParameterGroup_606879;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_606892.validator(path, query, header, formData, body)
  let scheme = call_606892.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606892.url(scheme.get, call_606892.host, call_606892.base,
                         call_606892.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606892, url, valid)

proc call*(call_606893: Call_GetDeleteDBClusterParameterGroup_606879;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606894 = newJObject()
  add(query_606894, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606894, "Action", newJString(Action))
  add(query_606894, "Version", newJString(Version))
  result = call_606893.call(nil, query_606894, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_606879(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_606880, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_606881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_606928 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBClusterSnapshot_606930(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_606929(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606931 = query.getOrDefault("Action")
  valid_606931 = validateParameter(valid_606931, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_606931 != nil:
    section.add "Action", valid_606931
  var valid_606932 = query.getOrDefault("Version")
  valid_606932 = validateParameter(valid_606932, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606932 != nil:
    section.add "Version", valid_606932
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606933 = header.getOrDefault("X-Amz-Signature")
  valid_606933 = validateParameter(valid_606933, JString, required = false,
                                 default = nil)
  if valid_606933 != nil:
    section.add "X-Amz-Signature", valid_606933
  var valid_606934 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606934 = validateParameter(valid_606934, JString, required = false,
                                 default = nil)
  if valid_606934 != nil:
    section.add "X-Amz-Content-Sha256", valid_606934
  var valid_606935 = header.getOrDefault("X-Amz-Date")
  valid_606935 = validateParameter(valid_606935, JString, required = false,
                                 default = nil)
  if valid_606935 != nil:
    section.add "X-Amz-Date", valid_606935
  var valid_606936 = header.getOrDefault("X-Amz-Credential")
  valid_606936 = validateParameter(valid_606936, JString, required = false,
                                 default = nil)
  if valid_606936 != nil:
    section.add "X-Amz-Credential", valid_606936
  var valid_606937 = header.getOrDefault("X-Amz-Security-Token")
  valid_606937 = validateParameter(valid_606937, JString, required = false,
                                 default = nil)
  if valid_606937 != nil:
    section.add "X-Amz-Security-Token", valid_606937
  var valid_606938 = header.getOrDefault("X-Amz-Algorithm")
  valid_606938 = validateParameter(valid_606938, JString, required = false,
                                 default = nil)
  if valid_606938 != nil:
    section.add "X-Amz-Algorithm", valid_606938
  var valid_606939 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606939 = validateParameter(valid_606939, JString, required = false,
                                 default = nil)
  if valid_606939 != nil:
    section.add "X-Amz-SignedHeaders", valid_606939
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606940 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606940 = validateParameter(valid_606940, JString, required = true,
                                 default = nil)
  if valid_606940 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606940
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606941: Call_PostDeleteDBClusterSnapshot_606928; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_606941.validator(path, query, header, formData, body)
  let scheme = call_606941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606941.url(scheme.get, call_606941.host, call_606941.base,
                         call_606941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606941, url, valid)

proc call*(call_606942: Call_PostDeleteDBClusterSnapshot_606928;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606943 = newJObject()
  var formData_606944 = newJObject()
  add(formData_606944, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606943, "Action", newJString(Action))
  add(query_606943, "Version", newJString(Version))
  result = call_606942.call(nil, query_606943, nil, formData_606944, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_606928(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_606929, base: "/",
    url: url_PostDeleteDBClusterSnapshot_606930,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_606912 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBClusterSnapshot_606914(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_606913(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606915 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606915 = validateParameter(valid_606915, JString, required = true,
                                 default = nil)
  if valid_606915 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606915
  var valid_606916 = query.getOrDefault("Action")
  valid_606916 = validateParameter(valid_606916, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_606916 != nil:
    section.add "Action", valid_606916
  var valid_606917 = query.getOrDefault("Version")
  valid_606917 = validateParameter(valid_606917, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606917 != nil:
    section.add "Version", valid_606917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606918 = header.getOrDefault("X-Amz-Signature")
  valid_606918 = validateParameter(valid_606918, JString, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "X-Amz-Signature", valid_606918
  var valid_606919 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606919 = validateParameter(valid_606919, JString, required = false,
                                 default = nil)
  if valid_606919 != nil:
    section.add "X-Amz-Content-Sha256", valid_606919
  var valid_606920 = header.getOrDefault("X-Amz-Date")
  valid_606920 = validateParameter(valid_606920, JString, required = false,
                                 default = nil)
  if valid_606920 != nil:
    section.add "X-Amz-Date", valid_606920
  var valid_606921 = header.getOrDefault("X-Amz-Credential")
  valid_606921 = validateParameter(valid_606921, JString, required = false,
                                 default = nil)
  if valid_606921 != nil:
    section.add "X-Amz-Credential", valid_606921
  var valid_606922 = header.getOrDefault("X-Amz-Security-Token")
  valid_606922 = validateParameter(valid_606922, JString, required = false,
                                 default = nil)
  if valid_606922 != nil:
    section.add "X-Amz-Security-Token", valid_606922
  var valid_606923 = header.getOrDefault("X-Amz-Algorithm")
  valid_606923 = validateParameter(valid_606923, JString, required = false,
                                 default = nil)
  if valid_606923 != nil:
    section.add "X-Amz-Algorithm", valid_606923
  var valid_606924 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606924 = validateParameter(valid_606924, JString, required = false,
                                 default = nil)
  if valid_606924 != nil:
    section.add "X-Amz-SignedHeaders", valid_606924
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606925: Call_GetDeleteDBClusterSnapshot_606912; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_606925.validator(path, query, header, formData, body)
  let scheme = call_606925.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606925.url(scheme.get, call_606925.host, call_606925.base,
                         call_606925.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606925, url, valid)

proc call*(call_606926: Call_GetDeleteDBClusterSnapshot_606912;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606927 = newJObject()
  add(query_606927, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606927, "Action", newJString(Action))
  add(query_606927, "Version", newJString(Version))
  result = call_606926.call(nil, query_606927, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_606912(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_606913, base: "/",
    url: url_GetDeleteDBClusterSnapshot_606914,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_606963 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBInstance_606965(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_606964(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606966 = query.getOrDefault("Action")
  valid_606966 = validateParameter(valid_606966, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_606966 != nil:
    section.add "Action", valid_606966
  var valid_606967 = query.getOrDefault("Version")
  valid_606967 = validateParameter(valid_606967, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606967 != nil:
    section.add "Version", valid_606967
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606968 = header.getOrDefault("X-Amz-Signature")
  valid_606968 = validateParameter(valid_606968, JString, required = false,
                                 default = nil)
  if valid_606968 != nil:
    section.add "X-Amz-Signature", valid_606968
  var valid_606969 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606969 = validateParameter(valid_606969, JString, required = false,
                                 default = nil)
  if valid_606969 != nil:
    section.add "X-Amz-Content-Sha256", valid_606969
  var valid_606970 = header.getOrDefault("X-Amz-Date")
  valid_606970 = validateParameter(valid_606970, JString, required = false,
                                 default = nil)
  if valid_606970 != nil:
    section.add "X-Amz-Date", valid_606970
  var valid_606971 = header.getOrDefault("X-Amz-Credential")
  valid_606971 = validateParameter(valid_606971, JString, required = false,
                                 default = nil)
  if valid_606971 != nil:
    section.add "X-Amz-Credential", valid_606971
  var valid_606972 = header.getOrDefault("X-Amz-Security-Token")
  valid_606972 = validateParameter(valid_606972, JString, required = false,
                                 default = nil)
  if valid_606972 != nil:
    section.add "X-Amz-Security-Token", valid_606972
  var valid_606973 = header.getOrDefault("X-Amz-Algorithm")
  valid_606973 = validateParameter(valid_606973, JString, required = false,
                                 default = nil)
  if valid_606973 != nil:
    section.add "X-Amz-Algorithm", valid_606973
  var valid_606974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606974 = validateParameter(valid_606974, JString, required = false,
                                 default = nil)
  if valid_606974 != nil:
    section.add "X-Amz-SignedHeaders", valid_606974
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606975 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606975 = validateParameter(valid_606975, JString, required = true,
                                 default = nil)
  if valid_606975 != nil:
    section.add "DBInstanceIdentifier", valid_606975
  var valid_606976 = formData.getOrDefault("SkipFinalSnapshot")
  valid_606976 = validateParameter(valid_606976, JBool, required = false, default = nil)
  if valid_606976 != nil:
    section.add "SkipFinalSnapshot", valid_606976
  var valid_606977 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606977 = validateParameter(valid_606977, JString, required = false,
                                 default = nil)
  if valid_606977 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606977
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606978: Call_PostDeleteDBInstance_606963; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_606978.validator(path, query, header, formData, body)
  let scheme = call_606978.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606978.url(scheme.get, call_606978.host, call_606978.base,
                         call_606978.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606978, url, valid)

proc call*(call_606979: Call_PostDeleteDBInstance_606963;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  var query_606980 = newJObject()
  var formData_606981 = newJObject()
  add(formData_606981, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606980, "Action", newJString(Action))
  add(formData_606981, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_606981, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_606980, "Version", newJString(Version))
  result = call_606979.call(nil, query_606980, nil, formData_606981, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_606963(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_606964, base: "/",
    url: url_PostDeleteDBInstance_606965, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_606945 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBInstance_606947(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_606946(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606948 = query.getOrDefault("DBInstanceIdentifier")
  valid_606948 = validateParameter(valid_606948, JString, required = true,
                                 default = nil)
  if valid_606948 != nil:
    section.add "DBInstanceIdentifier", valid_606948
  var valid_606949 = query.getOrDefault("SkipFinalSnapshot")
  valid_606949 = validateParameter(valid_606949, JBool, required = false, default = nil)
  if valid_606949 != nil:
    section.add "SkipFinalSnapshot", valid_606949
  var valid_606950 = query.getOrDefault("Action")
  valid_606950 = validateParameter(valid_606950, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_606950 != nil:
    section.add "Action", valid_606950
  var valid_606951 = query.getOrDefault("Version")
  valid_606951 = validateParameter(valid_606951, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606951 != nil:
    section.add "Version", valid_606951
  var valid_606952 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606952
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606953 = header.getOrDefault("X-Amz-Signature")
  valid_606953 = validateParameter(valid_606953, JString, required = false,
                                 default = nil)
  if valid_606953 != nil:
    section.add "X-Amz-Signature", valid_606953
  var valid_606954 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606954 = validateParameter(valid_606954, JString, required = false,
                                 default = nil)
  if valid_606954 != nil:
    section.add "X-Amz-Content-Sha256", valid_606954
  var valid_606955 = header.getOrDefault("X-Amz-Date")
  valid_606955 = validateParameter(valid_606955, JString, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "X-Amz-Date", valid_606955
  var valid_606956 = header.getOrDefault("X-Amz-Credential")
  valid_606956 = validateParameter(valid_606956, JString, required = false,
                                 default = nil)
  if valid_606956 != nil:
    section.add "X-Amz-Credential", valid_606956
  var valid_606957 = header.getOrDefault("X-Amz-Security-Token")
  valid_606957 = validateParameter(valid_606957, JString, required = false,
                                 default = nil)
  if valid_606957 != nil:
    section.add "X-Amz-Security-Token", valid_606957
  var valid_606958 = header.getOrDefault("X-Amz-Algorithm")
  valid_606958 = validateParameter(valid_606958, JString, required = false,
                                 default = nil)
  if valid_606958 != nil:
    section.add "X-Amz-Algorithm", valid_606958
  var valid_606959 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606959 = validateParameter(valid_606959, JString, required = false,
                                 default = nil)
  if valid_606959 != nil:
    section.add "X-Amz-SignedHeaders", valid_606959
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606960: Call_GetDeleteDBInstance_606945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_606960.validator(path, query, header, formData, body)
  let scheme = call_606960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606960.url(scheme.get, call_606960.host, call_606960.base,
                         call_606960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606960, url, valid)

proc call*(call_606961: Call_GetDeleteDBInstance_606945;
          DBInstanceIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBInstance"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  var query_606962 = newJObject()
  add(query_606962, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606962, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_606962, "Action", newJString(Action))
  add(query_606962, "Version", newJString(Version))
  add(query_606962, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_606961.call(nil, query_606962, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_606945(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_606946, base: "/",
    url: url_GetDeleteDBInstance_606947, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_606998 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBParameterGroup_607000(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_606999(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607001 = query.getOrDefault("Action")
  valid_607001 = validateParameter(valid_607001, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_607001 != nil:
    section.add "Action", valid_607001
  var valid_607002 = query.getOrDefault("Version")
  valid_607002 = validateParameter(valid_607002, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607002 != nil:
    section.add "Version", valid_607002
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607003 = header.getOrDefault("X-Amz-Signature")
  valid_607003 = validateParameter(valid_607003, JString, required = false,
                                 default = nil)
  if valid_607003 != nil:
    section.add "X-Amz-Signature", valid_607003
  var valid_607004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607004 = validateParameter(valid_607004, JString, required = false,
                                 default = nil)
  if valid_607004 != nil:
    section.add "X-Amz-Content-Sha256", valid_607004
  var valid_607005 = header.getOrDefault("X-Amz-Date")
  valid_607005 = validateParameter(valid_607005, JString, required = false,
                                 default = nil)
  if valid_607005 != nil:
    section.add "X-Amz-Date", valid_607005
  var valid_607006 = header.getOrDefault("X-Amz-Credential")
  valid_607006 = validateParameter(valid_607006, JString, required = false,
                                 default = nil)
  if valid_607006 != nil:
    section.add "X-Amz-Credential", valid_607006
  var valid_607007 = header.getOrDefault("X-Amz-Security-Token")
  valid_607007 = validateParameter(valid_607007, JString, required = false,
                                 default = nil)
  if valid_607007 != nil:
    section.add "X-Amz-Security-Token", valid_607007
  var valid_607008 = header.getOrDefault("X-Amz-Algorithm")
  valid_607008 = validateParameter(valid_607008, JString, required = false,
                                 default = nil)
  if valid_607008 != nil:
    section.add "X-Amz-Algorithm", valid_607008
  var valid_607009 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607009 = validateParameter(valid_607009, JString, required = false,
                                 default = nil)
  if valid_607009 != nil:
    section.add "X-Amz-SignedHeaders", valid_607009
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_607010 = formData.getOrDefault("DBParameterGroupName")
  valid_607010 = validateParameter(valid_607010, JString, required = true,
                                 default = nil)
  if valid_607010 != nil:
    section.add "DBParameterGroupName", valid_607010
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607011: Call_PostDeleteDBParameterGroup_606998; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_607011.validator(path, query, header, formData, body)
  let scheme = call_607011.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607011.url(scheme.get, call_607011.host, call_607011.base,
                         call_607011.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607011, url, valid)

proc call*(call_607012: Call_PostDeleteDBParameterGroup_606998;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607013 = newJObject()
  var formData_607014 = newJObject()
  add(formData_607014, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607013, "Action", newJString(Action))
  add(query_607013, "Version", newJString(Version))
  result = call_607012.call(nil, query_607013, nil, formData_607014, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_606998(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_606999, base: "/",
    url: url_PostDeleteDBParameterGroup_607000,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_606982 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBParameterGroup_606984(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_606983(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_606985 = query.getOrDefault("DBParameterGroupName")
  valid_606985 = validateParameter(valid_606985, JString, required = true,
                                 default = nil)
  if valid_606985 != nil:
    section.add "DBParameterGroupName", valid_606985
  var valid_606986 = query.getOrDefault("Action")
  valid_606986 = validateParameter(valid_606986, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_606986 != nil:
    section.add "Action", valid_606986
  var valid_606987 = query.getOrDefault("Version")
  valid_606987 = validateParameter(valid_606987, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606987 != nil:
    section.add "Version", valid_606987
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606988 = header.getOrDefault("X-Amz-Signature")
  valid_606988 = validateParameter(valid_606988, JString, required = false,
                                 default = nil)
  if valid_606988 != nil:
    section.add "X-Amz-Signature", valid_606988
  var valid_606989 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606989 = validateParameter(valid_606989, JString, required = false,
                                 default = nil)
  if valid_606989 != nil:
    section.add "X-Amz-Content-Sha256", valid_606989
  var valid_606990 = header.getOrDefault("X-Amz-Date")
  valid_606990 = validateParameter(valid_606990, JString, required = false,
                                 default = nil)
  if valid_606990 != nil:
    section.add "X-Amz-Date", valid_606990
  var valid_606991 = header.getOrDefault("X-Amz-Credential")
  valid_606991 = validateParameter(valid_606991, JString, required = false,
                                 default = nil)
  if valid_606991 != nil:
    section.add "X-Amz-Credential", valid_606991
  var valid_606992 = header.getOrDefault("X-Amz-Security-Token")
  valid_606992 = validateParameter(valid_606992, JString, required = false,
                                 default = nil)
  if valid_606992 != nil:
    section.add "X-Amz-Security-Token", valid_606992
  var valid_606993 = header.getOrDefault("X-Amz-Algorithm")
  valid_606993 = validateParameter(valid_606993, JString, required = false,
                                 default = nil)
  if valid_606993 != nil:
    section.add "X-Amz-Algorithm", valid_606993
  var valid_606994 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606994 = validateParameter(valid_606994, JString, required = false,
                                 default = nil)
  if valid_606994 != nil:
    section.add "X-Amz-SignedHeaders", valid_606994
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606995: Call_GetDeleteDBParameterGroup_606982; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_606995.validator(path, query, header, formData, body)
  let scheme = call_606995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606995.url(scheme.get, call_606995.host, call_606995.base,
                         call_606995.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606995, url, valid)

proc call*(call_606996: Call_GetDeleteDBParameterGroup_606982;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606997 = newJObject()
  add(query_606997, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606997, "Action", newJString(Action))
  add(query_606997, "Version", newJString(Version))
  result = call_606996.call(nil, query_606997, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_606982(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_606983, base: "/",
    url: url_GetDeleteDBParameterGroup_606984,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_607031 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBSubnetGroup_607033(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_607032(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607034 = query.getOrDefault("Action")
  valid_607034 = validateParameter(valid_607034, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_607034 != nil:
    section.add "Action", valid_607034
  var valid_607035 = query.getOrDefault("Version")
  valid_607035 = validateParameter(valid_607035, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607035 != nil:
    section.add "Version", valid_607035
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607036 = header.getOrDefault("X-Amz-Signature")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "X-Amz-Signature", valid_607036
  var valid_607037 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607037 = validateParameter(valid_607037, JString, required = false,
                                 default = nil)
  if valid_607037 != nil:
    section.add "X-Amz-Content-Sha256", valid_607037
  var valid_607038 = header.getOrDefault("X-Amz-Date")
  valid_607038 = validateParameter(valid_607038, JString, required = false,
                                 default = nil)
  if valid_607038 != nil:
    section.add "X-Amz-Date", valid_607038
  var valid_607039 = header.getOrDefault("X-Amz-Credential")
  valid_607039 = validateParameter(valid_607039, JString, required = false,
                                 default = nil)
  if valid_607039 != nil:
    section.add "X-Amz-Credential", valid_607039
  var valid_607040 = header.getOrDefault("X-Amz-Security-Token")
  valid_607040 = validateParameter(valid_607040, JString, required = false,
                                 default = nil)
  if valid_607040 != nil:
    section.add "X-Amz-Security-Token", valid_607040
  var valid_607041 = header.getOrDefault("X-Amz-Algorithm")
  valid_607041 = validateParameter(valid_607041, JString, required = false,
                                 default = nil)
  if valid_607041 != nil:
    section.add "X-Amz-Algorithm", valid_607041
  var valid_607042 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607042 = validateParameter(valid_607042, JString, required = false,
                                 default = nil)
  if valid_607042 != nil:
    section.add "X-Amz-SignedHeaders", valid_607042
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_607043 = formData.getOrDefault("DBSubnetGroupName")
  valid_607043 = validateParameter(valid_607043, JString, required = true,
                                 default = nil)
  if valid_607043 != nil:
    section.add "DBSubnetGroupName", valid_607043
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607044: Call_PostDeleteDBSubnetGroup_607031; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607044.validator(path, query, header, formData, body)
  let scheme = call_607044.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607044.url(scheme.get, call_607044.host, call_607044.base,
                         call_607044.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607044, url, valid)

proc call*(call_607045: Call_PostDeleteDBSubnetGroup_607031;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607046 = newJObject()
  var formData_607047 = newJObject()
  add(query_607046, "Action", newJString(Action))
  add(formData_607047, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607046, "Version", newJString(Version))
  result = call_607045.call(nil, query_607046, nil, formData_607047, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_607031(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_607032, base: "/",
    url: url_PostDeleteDBSubnetGroup_607033, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_607015 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBSubnetGroup_607017(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_607016(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607018 = query.getOrDefault("Action")
  valid_607018 = validateParameter(valid_607018, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_607018 != nil:
    section.add "Action", valid_607018
  var valid_607019 = query.getOrDefault("DBSubnetGroupName")
  valid_607019 = validateParameter(valid_607019, JString, required = true,
                                 default = nil)
  if valid_607019 != nil:
    section.add "DBSubnetGroupName", valid_607019
  var valid_607020 = query.getOrDefault("Version")
  valid_607020 = validateParameter(valid_607020, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607020 != nil:
    section.add "Version", valid_607020
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607021 = header.getOrDefault("X-Amz-Signature")
  valid_607021 = validateParameter(valid_607021, JString, required = false,
                                 default = nil)
  if valid_607021 != nil:
    section.add "X-Amz-Signature", valid_607021
  var valid_607022 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607022 = validateParameter(valid_607022, JString, required = false,
                                 default = nil)
  if valid_607022 != nil:
    section.add "X-Amz-Content-Sha256", valid_607022
  var valid_607023 = header.getOrDefault("X-Amz-Date")
  valid_607023 = validateParameter(valid_607023, JString, required = false,
                                 default = nil)
  if valid_607023 != nil:
    section.add "X-Amz-Date", valid_607023
  var valid_607024 = header.getOrDefault("X-Amz-Credential")
  valid_607024 = validateParameter(valid_607024, JString, required = false,
                                 default = nil)
  if valid_607024 != nil:
    section.add "X-Amz-Credential", valid_607024
  var valid_607025 = header.getOrDefault("X-Amz-Security-Token")
  valid_607025 = validateParameter(valid_607025, JString, required = false,
                                 default = nil)
  if valid_607025 != nil:
    section.add "X-Amz-Security-Token", valid_607025
  var valid_607026 = header.getOrDefault("X-Amz-Algorithm")
  valid_607026 = validateParameter(valid_607026, JString, required = false,
                                 default = nil)
  if valid_607026 != nil:
    section.add "X-Amz-Algorithm", valid_607026
  var valid_607027 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607027 = validateParameter(valid_607027, JString, required = false,
                                 default = nil)
  if valid_607027 != nil:
    section.add "X-Amz-SignedHeaders", valid_607027
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607028: Call_GetDeleteDBSubnetGroup_607015; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607028.validator(path, query, header, formData, body)
  let scheme = call_607028.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607028.url(scheme.get, call_607028.host, call_607028.base,
                         call_607028.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607028, url, valid)

proc call*(call_607029: Call_GetDeleteDBSubnetGroup_607015;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607030 = newJObject()
  add(query_607030, "Action", newJString(Action))
  add(query_607030, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607030, "Version", newJString(Version))
  result = call_607029.call(nil, query_607030, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_607015(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_607016, base: "/",
    url: url_GetDeleteDBSubnetGroup_607017, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_607064 = ref object of OpenApiRestCall_605573
proc url_PostDeleteEventSubscription_607066(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_607065(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607067 = query.getOrDefault("Action")
  valid_607067 = validateParameter(valid_607067, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_607067 != nil:
    section.add "Action", valid_607067
  var valid_607068 = query.getOrDefault("Version")
  valid_607068 = validateParameter(valid_607068, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607068 != nil:
    section.add "Version", valid_607068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607069 = header.getOrDefault("X-Amz-Signature")
  valid_607069 = validateParameter(valid_607069, JString, required = false,
                                 default = nil)
  if valid_607069 != nil:
    section.add "X-Amz-Signature", valid_607069
  var valid_607070 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607070 = validateParameter(valid_607070, JString, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "X-Amz-Content-Sha256", valid_607070
  var valid_607071 = header.getOrDefault("X-Amz-Date")
  valid_607071 = validateParameter(valid_607071, JString, required = false,
                                 default = nil)
  if valid_607071 != nil:
    section.add "X-Amz-Date", valid_607071
  var valid_607072 = header.getOrDefault("X-Amz-Credential")
  valid_607072 = validateParameter(valid_607072, JString, required = false,
                                 default = nil)
  if valid_607072 != nil:
    section.add "X-Amz-Credential", valid_607072
  var valid_607073 = header.getOrDefault("X-Amz-Security-Token")
  valid_607073 = validateParameter(valid_607073, JString, required = false,
                                 default = nil)
  if valid_607073 != nil:
    section.add "X-Amz-Security-Token", valid_607073
  var valid_607074 = header.getOrDefault("X-Amz-Algorithm")
  valid_607074 = validateParameter(valid_607074, JString, required = false,
                                 default = nil)
  if valid_607074 != nil:
    section.add "X-Amz-Algorithm", valid_607074
  var valid_607075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607075 = validateParameter(valid_607075, JString, required = false,
                                 default = nil)
  if valid_607075 != nil:
    section.add "X-Amz-SignedHeaders", valid_607075
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_607076 = formData.getOrDefault("SubscriptionName")
  valid_607076 = validateParameter(valid_607076, JString, required = true,
                                 default = nil)
  if valid_607076 != nil:
    section.add "SubscriptionName", valid_607076
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607077: Call_PostDeleteEventSubscription_607064; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_607077.validator(path, query, header, formData, body)
  let scheme = call_607077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607077.url(scheme.get, call_607077.host, call_607077.base,
                         call_607077.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607077, url, valid)

proc call*(call_607078: Call_PostDeleteEventSubscription_607064;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607079 = newJObject()
  var formData_607080 = newJObject()
  add(formData_607080, "SubscriptionName", newJString(SubscriptionName))
  add(query_607079, "Action", newJString(Action))
  add(query_607079, "Version", newJString(Version))
  result = call_607078.call(nil, query_607079, nil, formData_607080, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_607064(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_607065, base: "/",
    url: url_PostDeleteEventSubscription_607066,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_607048 = ref object of OpenApiRestCall_605573
proc url_GetDeleteEventSubscription_607050(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_607049(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_607051 = query.getOrDefault("SubscriptionName")
  valid_607051 = validateParameter(valid_607051, JString, required = true,
                                 default = nil)
  if valid_607051 != nil:
    section.add "SubscriptionName", valid_607051
  var valid_607052 = query.getOrDefault("Action")
  valid_607052 = validateParameter(valid_607052, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_607052 != nil:
    section.add "Action", valid_607052
  var valid_607053 = query.getOrDefault("Version")
  valid_607053 = validateParameter(valid_607053, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607053 != nil:
    section.add "Version", valid_607053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607054 = header.getOrDefault("X-Amz-Signature")
  valid_607054 = validateParameter(valid_607054, JString, required = false,
                                 default = nil)
  if valid_607054 != nil:
    section.add "X-Amz-Signature", valid_607054
  var valid_607055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607055 = validateParameter(valid_607055, JString, required = false,
                                 default = nil)
  if valid_607055 != nil:
    section.add "X-Amz-Content-Sha256", valid_607055
  var valid_607056 = header.getOrDefault("X-Amz-Date")
  valid_607056 = validateParameter(valid_607056, JString, required = false,
                                 default = nil)
  if valid_607056 != nil:
    section.add "X-Amz-Date", valid_607056
  var valid_607057 = header.getOrDefault("X-Amz-Credential")
  valid_607057 = validateParameter(valid_607057, JString, required = false,
                                 default = nil)
  if valid_607057 != nil:
    section.add "X-Amz-Credential", valid_607057
  var valid_607058 = header.getOrDefault("X-Amz-Security-Token")
  valid_607058 = validateParameter(valid_607058, JString, required = false,
                                 default = nil)
  if valid_607058 != nil:
    section.add "X-Amz-Security-Token", valid_607058
  var valid_607059 = header.getOrDefault("X-Amz-Algorithm")
  valid_607059 = validateParameter(valid_607059, JString, required = false,
                                 default = nil)
  if valid_607059 != nil:
    section.add "X-Amz-Algorithm", valid_607059
  var valid_607060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607060 = validateParameter(valid_607060, JString, required = false,
                                 default = nil)
  if valid_607060 != nil:
    section.add "X-Amz-SignedHeaders", valid_607060
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607061: Call_GetDeleteEventSubscription_607048; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_607061.validator(path, query, header, formData, body)
  let scheme = call_607061.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607061.url(scheme.get, call_607061.host, call_607061.base,
                         call_607061.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607061, url, valid)

proc call*(call_607062: Call_GetDeleteEventSubscription_607048;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607063 = newJObject()
  add(query_607063, "SubscriptionName", newJString(SubscriptionName))
  add(query_607063, "Action", newJString(Action))
  add(query_607063, "Version", newJString(Version))
  result = call_607062.call(nil, query_607063, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_607048(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_607049, base: "/",
    url: url_GetDeleteEventSubscription_607050,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_607100 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterParameterGroups_607102(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_607101(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607103 = query.getOrDefault("Action")
  valid_607103 = validateParameter(valid_607103, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_607103 != nil:
    section.add "Action", valid_607103
  var valid_607104 = query.getOrDefault("Version")
  valid_607104 = validateParameter(valid_607104, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607104 != nil:
    section.add "Version", valid_607104
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607105 = header.getOrDefault("X-Amz-Signature")
  valid_607105 = validateParameter(valid_607105, JString, required = false,
                                 default = nil)
  if valid_607105 != nil:
    section.add "X-Amz-Signature", valid_607105
  var valid_607106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607106 = validateParameter(valid_607106, JString, required = false,
                                 default = nil)
  if valid_607106 != nil:
    section.add "X-Amz-Content-Sha256", valid_607106
  var valid_607107 = header.getOrDefault("X-Amz-Date")
  valid_607107 = validateParameter(valid_607107, JString, required = false,
                                 default = nil)
  if valid_607107 != nil:
    section.add "X-Amz-Date", valid_607107
  var valid_607108 = header.getOrDefault("X-Amz-Credential")
  valid_607108 = validateParameter(valid_607108, JString, required = false,
                                 default = nil)
  if valid_607108 != nil:
    section.add "X-Amz-Credential", valid_607108
  var valid_607109 = header.getOrDefault("X-Amz-Security-Token")
  valid_607109 = validateParameter(valid_607109, JString, required = false,
                                 default = nil)
  if valid_607109 != nil:
    section.add "X-Amz-Security-Token", valid_607109
  var valid_607110 = header.getOrDefault("X-Amz-Algorithm")
  valid_607110 = validateParameter(valid_607110, JString, required = false,
                                 default = nil)
  if valid_607110 != nil:
    section.add "X-Amz-Algorithm", valid_607110
  var valid_607111 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607111 = validateParameter(valid_607111, JString, required = false,
                                 default = nil)
  if valid_607111 != nil:
    section.add "X-Amz-SignedHeaders", valid_607111
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_607112 = formData.getOrDefault("MaxRecords")
  valid_607112 = validateParameter(valid_607112, JInt, required = false, default = nil)
  if valid_607112 != nil:
    section.add "MaxRecords", valid_607112
  var valid_607113 = formData.getOrDefault("Marker")
  valid_607113 = validateParameter(valid_607113, JString, required = false,
                                 default = nil)
  if valid_607113 != nil:
    section.add "Marker", valid_607113
  var valid_607114 = formData.getOrDefault("Filters")
  valid_607114 = validateParameter(valid_607114, JArray, required = false,
                                 default = nil)
  if valid_607114 != nil:
    section.add "Filters", valid_607114
  var valid_607115 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607115 = validateParameter(valid_607115, JString, required = false,
                                 default = nil)
  if valid_607115 != nil:
    section.add "DBClusterParameterGroupName", valid_607115
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607116: Call_PostDescribeDBClusterParameterGroups_607100;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_607116.validator(path, query, header, formData, body)
  let scheme = call_607116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607116.url(scheme.get, call_607116.host, call_607116.base,
                         call_607116.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607116, url, valid)

proc call*(call_607117: Call_PostDescribeDBClusterParameterGroups_607100;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_607118 = newJObject()
  var formData_607119 = newJObject()
  add(formData_607119, "MaxRecords", newJInt(MaxRecords))
  add(formData_607119, "Marker", newJString(Marker))
  add(query_607118, "Action", newJString(Action))
  if Filters != nil:
    formData_607119.add "Filters", Filters
  add(formData_607119, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607118, "Version", newJString(Version))
  result = call_607117.call(nil, query_607118, nil, formData_607119, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_607100(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_607101, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_607102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_607081 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterParameterGroups_607083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_607082(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607084 = query.getOrDefault("Marker")
  valid_607084 = validateParameter(valid_607084, JString, required = false,
                                 default = nil)
  if valid_607084 != nil:
    section.add "Marker", valid_607084
  var valid_607085 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607085 = validateParameter(valid_607085, JString, required = false,
                                 default = nil)
  if valid_607085 != nil:
    section.add "DBClusterParameterGroupName", valid_607085
  var valid_607086 = query.getOrDefault("Action")
  valid_607086 = validateParameter(valid_607086, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_607086 != nil:
    section.add "Action", valid_607086
  var valid_607087 = query.getOrDefault("Version")
  valid_607087 = validateParameter(valid_607087, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607087 != nil:
    section.add "Version", valid_607087
  var valid_607088 = query.getOrDefault("Filters")
  valid_607088 = validateParameter(valid_607088, JArray, required = false,
                                 default = nil)
  if valid_607088 != nil:
    section.add "Filters", valid_607088
  var valid_607089 = query.getOrDefault("MaxRecords")
  valid_607089 = validateParameter(valid_607089, JInt, required = false, default = nil)
  if valid_607089 != nil:
    section.add "MaxRecords", valid_607089
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607090 = header.getOrDefault("X-Amz-Signature")
  valid_607090 = validateParameter(valid_607090, JString, required = false,
                                 default = nil)
  if valid_607090 != nil:
    section.add "X-Amz-Signature", valid_607090
  var valid_607091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607091 = validateParameter(valid_607091, JString, required = false,
                                 default = nil)
  if valid_607091 != nil:
    section.add "X-Amz-Content-Sha256", valid_607091
  var valid_607092 = header.getOrDefault("X-Amz-Date")
  valid_607092 = validateParameter(valid_607092, JString, required = false,
                                 default = nil)
  if valid_607092 != nil:
    section.add "X-Amz-Date", valid_607092
  var valid_607093 = header.getOrDefault("X-Amz-Credential")
  valid_607093 = validateParameter(valid_607093, JString, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "X-Amz-Credential", valid_607093
  var valid_607094 = header.getOrDefault("X-Amz-Security-Token")
  valid_607094 = validateParameter(valid_607094, JString, required = false,
                                 default = nil)
  if valid_607094 != nil:
    section.add "X-Amz-Security-Token", valid_607094
  var valid_607095 = header.getOrDefault("X-Amz-Algorithm")
  valid_607095 = validateParameter(valid_607095, JString, required = false,
                                 default = nil)
  if valid_607095 != nil:
    section.add "X-Amz-Algorithm", valid_607095
  var valid_607096 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607096 = validateParameter(valid_607096, JString, required = false,
                                 default = nil)
  if valid_607096 != nil:
    section.add "X-Amz-SignedHeaders", valid_607096
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607097: Call_GetDescribeDBClusterParameterGroups_607081;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_607097.validator(path, query, header, formData, body)
  let scheme = call_607097.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607097.url(scheme.get, call_607097.host, call_607097.base,
                         call_607097.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607097, url, valid)

proc call*(call_607098: Call_GetDescribeDBClusterParameterGroups_607081;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607099 = newJObject()
  add(query_607099, "Marker", newJString(Marker))
  add(query_607099, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607099, "Action", newJString(Action))
  add(query_607099, "Version", newJString(Version))
  if Filters != nil:
    query_607099.add "Filters", Filters
  add(query_607099, "MaxRecords", newJInt(MaxRecords))
  result = call_607098.call(nil, query_607099, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_607081(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_607082, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_607083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_607140 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterParameters_607142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_607141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607143 = query.getOrDefault("Action")
  valid_607143 = validateParameter(valid_607143, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_607143 != nil:
    section.add "Action", valid_607143
  var valid_607144 = query.getOrDefault("Version")
  valid_607144 = validateParameter(valid_607144, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607144 != nil:
    section.add "Version", valid_607144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607145 = header.getOrDefault("X-Amz-Signature")
  valid_607145 = validateParameter(valid_607145, JString, required = false,
                                 default = nil)
  if valid_607145 != nil:
    section.add "X-Amz-Signature", valid_607145
  var valid_607146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607146 = validateParameter(valid_607146, JString, required = false,
                                 default = nil)
  if valid_607146 != nil:
    section.add "X-Amz-Content-Sha256", valid_607146
  var valid_607147 = header.getOrDefault("X-Amz-Date")
  valid_607147 = validateParameter(valid_607147, JString, required = false,
                                 default = nil)
  if valid_607147 != nil:
    section.add "X-Amz-Date", valid_607147
  var valid_607148 = header.getOrDefault("X-Amz-Credential")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "X-Amz-Credential", valid_607148
  var valid_607149 = header.getOrDefault("X-Amz-Security-Token")
  valid_607149 = validateParameter(valid_607149, JString, required = false,
                                 default = nil)
  if valid_607149 != nil:
    section.add "X-Amz-Security-Token", valid_607149
  var valid_607150 = header.getOrDefault("X-Amz-Algorithm")
  valid_607150 = validateParameter(valid_607150, JString, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "X-Amz-Algorithm", valid_607150
  var valid_607151 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607151 = validateParameter(valid_607151, JString, required = false,
                                 default = nil)
  if valid_607151 != nil:
    section.add "X-Amz-SignedHeaders", valid_607151
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_607152 = formData.getOrDefault("Source")
  valid_607152 = validateParameter(valid_607152, JString, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "Source", valid_607152
  var valid_607153 = formData.getOrDefault("MaxRecords")
  valid_607153 = validateParameter(valid_607153, JInt, required = false, default = nil)
  if valid_607153 != nil:
    section.add "MaxRecords", valid_607153
  var valid_607154 = formData.getOrDefault("Marker")
  valid_607154 = validateParameter(valid_607154, JString, required = false,
                                 default = nil)
  if valid_607154 != nil:
    section.add "Marker", valid_607154
  var valid_607155 = formData.getOrDefault("Filters")
  valid_607155 = validateParameter(valid_607155, JArray, required = false,
                                 default = nil)
  if valid_607155 != nil:
    section.add "Filters", valid_607155
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607156 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607156 = validateParameter(valid_607156, JString, required = true,
                                 default = nil)
  if valid_607156 != nil:
    section.add "DBClusterParameterGroupName", valid_607156
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607157: Call_PostDescribeDBClusterParameters_607140;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_607157.validator(path, query, header, formData, body)
  let scheme = call_607157.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607157.url(scheme.get, call_607157.host, call_607157.base,
                         call_607157.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607157, url, valid)

proc call*(call_607158: Call_PostDescribeDBClusterParameters_607140;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_607159 = newJObject()
  var formData_607160 = newJObject()
  add(formData_607160, "Source", newJString(Source))
  add(formData_607160, "MaxRecords", newJInt(MaxRecords))
  add(formData_607160, "Marker", newJString(Marker))
  add(query_607159, "Action", newJString(Action))
  if Filters != nil:
    formData_607160.add "Filters", Filters
  add(formData_607160, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607159, "Version", newJString(Version))
  result = call_607158.call(nil, query_607159, nil, formData_607160, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_607140(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_607141, base: "/",
    url: url_PostDescribeDBClusterParameters_607142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_607120 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterParameters_607122(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_607121(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607123 = query.getOrDefault("Marker")
  valid_607123 = validateParameter(valid_607123, JString, required = false,
                                 default = nil)
  if valid_607123 != nil:
    section.add "Marker", valid_607123
  var valid_607124 = query.getOrDefault("Source")
  valid_607124 = validateParameter(valid_607124, JString, required = false,
                                 default = nil)
  if valid_607124 != nil:
    section.add "Source", valid_607124
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607125 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607125 = validateParameter(valid_607125, JString, required = true,
                                 default = nil)
  if valid_607125 != nil:
    section.add "DBClusterParameterGroupName", valid_607125
  var valid_607126 = query.getOrDefault("Action")
  valid_607126 = validateParameter(valid_607126, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_607126 != nil:
    section.add "Action", valid_607126
  var valid_607127 = query.getOrDefault("Version")
  valid_607127 = validateParameter(valid_607127, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607127 != nil:
    section.add "Version", valid_607127
  var valid_607128 = query.getOrDefault("Filters")
  valid_607128 = validateParameter(valid_607128, JArray, required = false,
                                 default = nil)
  if valid_607128 != nil:
    section.add "Filters", valid_607128
  var valid_607129 = query.getOrDefault("MaxRecords")
  valid_607129 = validateParameter(valid_607129, JInt, required = false, default = nil)
  if valid_607129 != nil:
    section.add "MaxRecords", valid_607129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607130 = header.getOrDefault("X-Amz-Signature")
  valid_607130 = validateParameter(valid_607130, JString, required = false,
                                 default = nil)
  if valid_607130 != nil:
    section.add "X-Amz-Signature", valid_607130
  var valid_607131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "X-Amz-Content-Sha256", valid_607131
  var valid_607132 = header.getOrDefault("X-Amz-Date")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "X-Amz-Date", valid_607132
  var valid_607133 = header.getOrDefault("X-Amz-Credential")
  valid_607133 = validateParameter(valid_607133, JString, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "X-Amz-Credential", valid_607133
  var valid_607134 = header.getOrDefault("X-Amz-Security-Token")
  valid_607134 = validateParameter(valid_607134, JString, required = false,
                                 default = nil)
  if valid_607134 != nil:
    section.add "X-Amz-Security-Token", valid_607134
  var valid_607135 = header.getOrDefault("X-Amz-Algorithm")
  valid_607135 = validateParameter(valid_607135, JString, required = false,
                                 default = nil)
  if valid_607135 != nil:
    section.add "X-Amz-Algorithm", valid_607135
  var valid_607136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607136 = validateParameter(valid_607136, JString, required = false,
                                 default = nil)
  if valid_607136 != nil:
    section.add "X-Amz-SignedHeaders", valid_607136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607137: Call_GetDescribeDBClusterParameters_607120; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_607137.validator(path, query, header, formData, body)
  let scheme = call_607137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607137.url(scheme.get, call_607137.host, call_607137.base,
                         call_607137.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607137, url, valid)

proc call*(call_607138: Call_GetDescribeDBClusterParameters_607120;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607139 = newJObject()
  add(query_607139, "Marker", newJString(Marker))
  add(query_607139, "Source", newJString(Source))
  add(query_607139, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607139, "Action", newJString(Action))
  add(query_607139, "Version", newJString(Version))
  if Filters != nil:
    query_607139.add "Filters", Filters
  add(query_607139, "MaxRecords", newJInt(MaxRecords))
  result = call_607138.call(nil, query_607139, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_607120(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_607121, base: "/",
    url: url_GetDescribeDBClusterParameters_607122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_607177 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterSnapshotAttributes_607179(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_607178(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607180 = query.getOrDefault("Action")
  valid_607180 = validateParameter(valid_607180, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_607180 != nil:
    section.add "Action", valid_607180
  var valid_607181 = query.getOrDefault("Version")
  valid_607181 = validateParameter(valid_607181, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607181 != nil:
    section.add "Version", valid_607181
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607182 = header.getOrDefault("X-Amz-Signature")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Signature", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-Content-Sha256", valid_607183
  var valid_607184 = header.getOrDefault("X-Amz-Date")
  valid_607184 = validateParameter(valid_607184, JString, required = false,
                                 default = nil)
  if valid_607184 != nil:
    section.add "X-Amz-Date", valid_607184
  var valid_607185 = header.getOrDefault("X-Amz-Credential")
  valid_607185 = validateParameter(valid_607185, JString, required = false,
                                 default = nil)
  if valid_607185 != nil:
    section.add "X-Amz-Credential", valid_607185
  var valid_607186 = header.getOrDefault("X-Amz-Security-Token")
  valid_607186 = validateParameter(valid_607186, JString, required = false,
                                 default = nil)
  if valid_607186 != nil:
    section.add "X-Amz-Security-Token", valid_607186
  var valid_607187 = header.getOrDefault("X-Amz-Algorithm")
  valid_607187 = validateParameter(valid_607187, JString, required = false,
                                 default = nil)
  if valid_607187 != nil:
    section.add "X-Amz-Algorithm", valid_607187
  var valid_607188 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607188 = validateParameter(valid_607188, JString, required = false,
                                 default = nil)
  if valid_607188 != nil:
    section.add "X-Amz-SignedHeaders", valid_607188
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607189 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607189 = validateParameter(valid_607189, JString, required = true,
                                 default = nil)
  if valid_607189 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607189
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607190: Call_PostDescribeDBClusterSnapshotAttributes_607177;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_607190.validator(path, query, header, formData, body)
  let scheme = call_607190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607190.url(scheme.get, call_607190.host, call_607190.base,
                         call_607190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607190, url, valid)

proc call*(call_607191: Call_PostDescribeDBClusterSnapshotAttributes_607177;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607192 = newJObject()
  var formData_607193 = newJObject()
  add(formData_607193, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607192, "Action", newJString(Action))
  add(query_607192, "Version", newJString(Version))
  result = call_607191.call(nil, query_607192, nil, formData_607193, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_607177(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_607178, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_607179,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_607161 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterSnapshotAttributes_607163(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_607162(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607164 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607164 = validateParameter(valid_607164, JString, required = true,
                                 default = nil)
  if valid_607164 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607164
  var valid_607165 = query.getOrDefault("Action")
  valid_607165 = validateParameter(valid_607165, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_607165 != nil:
    section.add "Action", valid_607165
  var valid_607166 = query.getOrDefault("Version")
  valid_607166 = validateParameter(valid_607166, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607166 != nil:
    section.add "Version", valid_607166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607167 = header.getOrDefault("X-Amz-Signature")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "X-Amz-Signature", valid_607167
  var valid_607168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607168 = validateParameter(valid_607168, JString, required = false,
                                 default = nil)
  if valid_607168 != nil:
    section.add "X-Amz-Content-Sha256", valid_607168
  var valid_607169 = header.getOrDefault("X-Amz-Date")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "X-Amz-Date", valid_607169
  var valid_607170 = header.getOrDefault("X-Amz-Credential")
  valid_607170 = validateParameter(valid_607170, JString, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "X-Amz-Credential", valid_607170
  var valid_607171 = header.getOrDefault("X-Amz-Security-Token")
  valid_607171 = validateParameter(valid_607171, JString, required = false,
                                 default = nil)
  if valid_607171 != nil:
    section.add "X-Amz-Security-Token", valid_607171
  var valid_607172 = header.getOrDefault("X-Amz-Algorithm")
  valid_607172 = validateParameter(valid_607172, JString, required = false,
                                 default = nil)
  if valid_607172 != nil:
    section.add "X-Amz-Algorithm", valid_607172
  var valid_607173 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607173 = validateParameter(valid_607173, JString, required = false,
                                 default = nil)
  if valid_607173 != nil:
    section.add "X-Amz-SignedHeaders", valid_607173
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607174: Call_GetDescribeDBClusterSnapshotAttributes_607161;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_607174.validator(path, query, header, formData, body)
  let scheme = call_607174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607174.url(scheme.get, call_607174.host, call_607174.base,
                         call_607174.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607174, url, valid)

proc call*(call_607175: Call_GetDescribeDBClusterSnapshotAttributes_607161;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607176 = newJObject()
  add(query_607176, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607176, "Action", newJString(Action))
  add(query_607176, "Version", newJString(Version))
  result = call_607175.call(nil, query_607176, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_607161(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_607162, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_607163,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_607217 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterSnapshots_607219(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_607218(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607220 = query.getOrDefault("Action")
  valid_607220 = validateParameter(valid_607220, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_607220 != nil:
    section.add "Action", valid_607220
  var valid_607221 = query.getOrDefault("Version")
  valid_607221 = validateParameter(valid_607221, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607221 != nil:
    section.add "Version", valid_607221
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607222 = header.getOrDefault("X-Amz-Signature")
  valid_607222 = validateParameter(valid_607222, JString, required = false,
                                 default = nil)
  if valid_607222 != nil:
    section.add "X-Amz-Signature", valid_607222
  var valid_607223 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607223 = validateParameter(valid_607223, JString, required = false,
                                 default = nil)
  if valid_607223 != nil:
    section.add "X-Amz-Content-Sha256", valid_607223
  var valid_607224 = header.getOrDefault("X-Amz-Date")
  valid_607224 = validateParameter(valid_607224, JString, required = false,
                                 default = nil)
  if valid_607224 != nil:
    section.add "X-Amz-Date", valid_607224
  var valid_607225 = header.getOrDefault("X-Amz-Credential")
  valid_607225 = validateParameter(valid_607225, JString, required = false,
                                 default = nil)
  if valid_607225 != nil:
    section.add "X-Amz-Credential", valid_607225
  var valid_607226 = header.getOrDefault("X-Amz-Security-Token")
  valid_607226 = validateParameter(valid_607226, JString, required = false,
                                 default = nil)
  if valid_607226 != nil:
    section.add "X-Amz-Security-Token", valid_607226
  var valid_607227 = header.getOrDefault("X-Amz-Algorithm")
  valid_607227 = validateParameter(valid_607227, JString, required = false,
                                 default = nil)
  if valid_607227 != nil:
    section.add "X-Amz-Algorithm", valid_607227
  var valid_607228 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607228 = validateParameter(valid_607228, JString, required = false,
                                 default = nil)
  if valid_607228 != nil:
    section.add "X-Amz-SignedHeaders", valid_607228
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_607229 = formData.getOrDefault("SnapshotType")
  valid_607229 = validateParameter(valid_607229, JString, required = false,
                                 default = nil)
  if valid_607229 != nil:
    section.add "SnapshotType", valid_607229
  var valid_607230 = formData.getOrDefault("MaxRecords")
  valid_607230 = validateParameter(valid_607230, JInt, required = false, default = nil)
  if valid_607230 != nil:
    section.add "MaxRecords", valid_607230
  var valid_607231 = formData.getOrDefault("IncludePublic")
  valid_607231 = validateParameter(valid_607231, JBool, required = false, default = nil)
  if valid_607231 != nil:
    section.add "IncludePublic", valid_607231
  var valid_607232 = formData.getOrDefault("Marker")
  valid_607232 = validateParameter(valid_607232, JString, required = false,
                                 default = nil)
  if valid_607232 != nil:
    section.add "Marker", valid_607232
  var valid_607233 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607233 = validateParameter(valid_607233, JString, required = false,
                                 default = nil)
  if valid_607233 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607233
  var valid_607234 = formData.getOrDefault("IncludeShared")
  valid_607234 = validateParameter(valid_607234, JBool, required = false, default = nil)
  if valid_607234 != nil:
    section.add "IncludeShared", valid_607234
  var valid_607235 = formData.getOrDefault("Filters")
  valid_607235 = validateParameter(valid_607235, JArray, required = false,
                                 default = nil)
  if valid_607235 != nil:
    section.add "Filters", valid_607235
  var valid_607236 = formData.getOrDefault("DBClusterIdentifier")
  valid_607236 = validateParameter(valid_607236, JString, required = false,
                                 default = nil)
  if valid_607236 != nil:
    section.add "DBClusterIdentifier", valid_607236
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607237: Call_PostDescribeDBClusterSnapshots_607217; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_607237.validator(path, query, header, formData, body)
  let scheme = call_607237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607237.url(scheme.get, call_607237.host, call_607237.base,
                         call_607237.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607237, url, valid)

proc call*(call_607238: Call_PostDescribeDBClusterSnapshots_607217;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_607239 = newJObject()
  var formData_607240 = newJObject()
  add(formData_607240, "SnapshotType", newJString(SnapshotType))
  add(formData_607240, "MaxRecords", newJInt(MaxRecords))
  add(formData_607240, "IncludePublic", newJBool(IncludePublic))
  add(formData_607240, "Marker", newJString(Marker))
  add(formData_607240, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_607240, "IncludeShared", newJBool(IncludeShared))
  add(query_607239, "Action", newJString(Action))
  if Filters != nil:
    formData_607240.add "Filters", Filters
  add(query_607239, "Version", newJString(Version))
  add(formData_607240, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607238.call(nil, query_607239, nil, formData_607240, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_607217(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_607218, base: "/",
    url: url_PostDescribeDBClusterSnapshots_607219,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_607194 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterSnapshots_607196(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_607195(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607197 = query.getOrDefault("Marker")
  valid_607197 = validateParameter(valid_607197, JString, required = false,
                                 default = nil)
  if valid_607197 != nil:
    section.add "Marker", valid_607197
  var valid_607198 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607198 = validateParameter(valid_607198, JString, required = false,
                                 default = nil)
  if valid_607198 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607198
  var valid_607199 = query.getOrDefault("DBClusterIdentifier")
  valid_607199 = validateParameter(valid_607199, JString, required = false,
                                 default = nil)
  if valid_607199 != nil:
    section.add "DBClusterIdentifier", valid_607199
  var valid_607200 = query.getOrDefault("SnapshotType")
  valid_607200 = validateParameter(valid_607200, JString, required = false,
                                 default = nil)
  if valid_607200 != nil:
    section.add "SnapshotType", valid_607200
  var valid_607201 = query.getOrDefault("IncludePublic")
  valid_607201 = validateParameter(valid_607201, JBool, required = false, default = nil)
  if valid_607201 != nil:
    section.add "IncludePublic", valid_607201
  var valid_607202 = query.getOrDefault("Action")
  valid_607202 = validateParameter(valid_607202, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_607202 != nil:
    section.add "Action", valid_607202
  var valid_607203 = query.getOrDefault("IncludeShared")
  valid_607203 = validateParameter(valid_607203, JBool, required = false, default = nil)
  if valid_607203 != nil:
    section.add "IncludeShared", valid_607203
  var valid_607204 = query.getOrDefault("Version")
  valid_607204 = validateParameter(valid_607204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607204 != nil:
    section.add "Version", valid_607204
  var valid_607205 = query.getOrDefault("Filters")
  valid_607205 = validateParameter(valid_607205, JArray, required = false,
                                 default = nil)
  if valid_607205 != nil:
    section.add "Filters", valid_607205
  var valid_607206 = query.getOrDefault("MaxRecords")
  valid_607206 = validateParameter(valid_607206, JInt, required = false, default = nil)
  if valid_607206 != nil:
    section.add "MaxRecords", valid_607206
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607207 = header.getOrDefault("X-Amz-Signature")
  valid_607207 = validateParameter(valid_607207, JString, required = false,
                                 default = nil)
  if valid_607207 != nil:
    section.add "X-Amz-Signature", valid_607207
  var valid_607208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607208 = validateParameter(valid_607208, JString, required = false,
                                 default = nil)
  if valid_607208 != nil:
    section.add "X-Amz-Content-Sha256", valid_607208
  var valid_607209 = header.getOrDefault("X-Amz-Date")
  valid_607209 = validateParameter(valid_607209, JString, required = false,
                                 default = nil)
  if valid_607209 != nil:
    section.add "X-Amz-Date", valid_607209
  var valid_607210 = header.getOrDefault("X-Amz-Credential")
  valid_607210 = validateParameter(valid_607210, JString, required = false,
                                 default = nil)
  if valid_607210 != nil:
    section.add "X-Amz-Credential", valid_607210
  var valid_607211 = header.getOrDefault("X-Amz-Security-Token")
  valid_607211 = validateParameter(valid_607211, JString, required = false,
                                 default = nil)
  if valid_607211 != nil:
    section.add "X-Amz-Security-Token", valid_607211
  var valid_607212 = header.getOrDefault("X-Amz-Algorithm")
  valid_607212 = validateParameter(valid_607212, JString, required = false,
                                 default = nil)
  if valid_607212 != nil:
    section.add "X-Amz-Algorithm", valid_607212
  var valid_607213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607213 = validateParameter(valid_607213, JString, required = false,
                                 default = nil)
  if valid_607213 != nil:
    section.add "X-Amz-SignedHeaders", valid_607213
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607214: Call_GetDescribeDBClusterSnapshots_607194; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_607214.validator(path, query, header, formData, body)
  let scheme = call_607214.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607214.url(scheme.get, call_607214.host, call_607214.base,
                         call_607214.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607214, url, valid)

proc call*(call_607215: Call_GetDescribeDBClusterSnapshots_607194;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607216 = newJObject()
  add(query_607216, "Marker", newJString(Marker))
  add(query_607216, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607216, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607216, "SnapshotType", newJString(SnapshotType))
  add(query_607216, "IncludePublic", newJBool(IncludePublic))
  add(query_607216, "Action", newJString(Action))
  add(query_607216, "IncludeShared", newJBool(IncludeShared))
  add(query_607216, "Version", newJString(Version))
  if Filters != nil:
    query_607216.add "Filters", Filters
  add(query_607216, "MaxRecords", newJInt(MaxRecords))
  result = call_607215.call(nil, query_607216, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_607194(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_607195, base: "/",
    url: url_GetDescribeDBClusterSnapshots_607196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_607260 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusters_607262(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_607261(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607263 = query.getOrDefault("Action")
  valid_607263 = validateParameter(valid_607263, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_607263 != nil:
    section.add "Action", valid_607263
  var valid_607264 = query.getOrDefault("Version")
  valid_607264 = validateParameter(valid_607264, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607264 != nil:
    section.add "Version", valid_607264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607265 = header.getOrDefault("X-Amz-Signature")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-Signature", valid_607265
  var valid_607266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607266 = validateParameter(valid_607266, JString, required = false,
                                 default = nil)
  if valid_607266 != nil:
    section.add "X-Amz-Content-Sha256", valid_607266
  var valid_607267 = header.getOrDefault("X-Amz-Date")
  valid_607267 = validateParameter(valid_607267, JString, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "X-Amz-Date", valid_607267
  var valid_607268 = header.getOrDefault("X-Amz-Credential")
  valid_607268 = validateParameter(valid_607268, JString, required = false,
                                 default = nil)
  if valid_607268 != nil:
    section.add "X-Amz-Credential", valid_607268
  var valid_607269 = header.getOrDefault("X-Amz-Security-Token")
  valid_607269 = validateParameter(valid_607269, JString, required = false,
                                 default = nil)
  if valid_607269 != nil:
    section.add "X-Amz-Security-Token", valid_607269
  var valid_607270 = header.getOrDefault("X-Amz-Algorithm")
  valid_607270 = validateParameter(valid_607270, JString, required = false,
                                 default = nil)
  if valid_607270 != nil:
    section.add "X-Amz-Algorithm", valid_607270
  var valid_607271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607271 = validateParameter(valid_607271, JString, required = false,
                                 default = nil)
  if valid_607271 != nil:
    section.add "X-Amz-SignedHeaders", valid_607271
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_607272 = formData.getOrDefault("MaxRecords")
  valid_607272 = validateParameter(valid_607272, JInt, required = false, default = nil)
  if valid_607272 != nil:
    section.add "MaxRecords", valid_607272
  var valid_607273 = formData.getOrDefault("Marker")
  valid_607273 = validateParameter(valid_607273, JString, required = false,
                                 default = nil)
  if valid_607273 != nil:
    section.add "Marker", valid_607273
  var valid_607274 = formData.getOrDefault("Filters")
  valid_607274 = validateParameter(valid_607274, JArray, required = false,
                                 default = nil)
  if valid_607274 != nil:
    section.add "Filters", valid_607274
  var valid_607275 = formData.getOrDefault("DBClusterIdentifier")
  valid_607275 = validateParameter(valid_607275, JString, required = false,
                                 default = nil)
  if valid_607275 != nil:
    section.add "DBClusterIdentifier", valid_607275
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607276: Call_PostDescribeDBClusters_607260; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_607276.validator(path, query, header, formData, body)
  let scheme = call_607276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607276.url(scheme.get, call_607276.host, call_607276.base,
                         call_607276.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607276, url, valid)

proc call*(call_607277: Call_PostDescribeDBClusters_607260; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_607278 = newJObject()
  var formData_607279 = newJObject()
  add(formData_607279, "MaxRecords", newJInt(MaxRecords))
  add(formData_607279, "Marker", newJString(Marker))
  add(query_607278, "Action", newJString(Action))
  if Filters != nil:
    formData_607279.add "Filters", Filters
  add(query_607278, "Version", newJString(Version))
  add(formData_607279, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607277.call(nil, query_607278, nil, formData_607279, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_607260(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_607261, base: "/",
    url: url_PostDescribeDBClusters_607262, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_607241 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusters_607243(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_607242(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607244 = query.getOrDefault("Marker")
  valid_607244 = validateParameter(valid_607244, JString, required = false,
                                 default = nil)
  if valid_607244 != nil:
    section.add "Marker", valid_607244
  var valid_607245 = query.getOrDefault("DBClusterIdentifier")
  valid_607245 = validateParameter(valid_607245, JString, required = false,
                                 default = nil)
  if valid_607245 != nil:
    section.add "DBClusterIdentifier", valid_607245
  var valid_607246 = query.getOrDefault("Action")
  valid_607246 = validateParameter(valid_607246, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_607246 != nil:
    section.add "Action", valid_607246
  var valid_607247 = query.getOrDefault("Version")
  valid_607247 = validateParameter(valid_607247, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607247 != nil:
    section.add "Version", valid_607247
  var valid_607248 = query.getOrDefault("Filters")
  valid_607248 = validateParameter(valid_607248, JArray, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "Filters", valid_607248
  var valid_607249 = query.getOrDefault("MaxRecords")
  valid_607249 = validateParameter(valid_607249, JInt, required = false, default = nil)
  if valid_607249 != nil:
    section.add "MaxRecords", valid_607249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607250 = header.getOrDefault("X-Amz-Signature")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "X-Amz-Signature", valid_607250
  var valid_607251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607251 = validateParameter(valid_607251, JString, required = false,
                                 default = nil)
  if valid_607251 != nil:
    section.add "X-Amz-Content-Sha256", valid_607251
  var valid_607252 = header.getOrDefault("X-Amz-Date")
  valid_607252 = validateParameter(valid_607252, JString, required = false,
                                 default = nil)
  if valid_607252 != nil:
    section.add "X-Amz-Date", valid_607252
  var valid_607253 = header.getOrDefault("X-Amz-Credential")
  valid_607253 = validateParameter(valid_607253, JString, required = false,
                                 default = nil)
  if valid_607253 != nil:
    section.add "X-Amz-Credential", valid_607253
  var valid_607254 = header.getOrDefault("X-Amz-Security-Token")
  valid_607254 = validateParameter(valid_607254, JString, required = false,
                                 default = nil)
  if valid_607254 != nil:
    section.add "X-Amz-Security-Token", valid_607254
  var valid_607255 = header.getOrDefault("X-Amz-Algorithm")
  valid_607255 = validateParameter(valid_607255, JString, required = false,
                                 default = nil)
  if valid_607255 != nil:
    section.add "X-Amz-Algorithm", valid_607255
  var valid_607256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607256 = validateParameter(valid_607256, JString, required = false,
                                 default = nil)
  if valid_607256 != nil:
    section.add "X-Amz-SignedHeaders", valid_607256
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607257: Call_GetDescribeDBClusters_607241; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_607257.validator(path, query, header, formData, body)
  let scheme = call_607257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607257.url(scheme.get, call_607257.host, call_607257.base,
                         call_607257.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607257, url, valid)

proc call*(call_607258: Call_GetDescribeDBClusters_607241; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607259 = newJObject()
  add(query_607259, "Marker", newJString(Marker))
  add(query_607259, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607259, "Action", newJString(Action))
  add(query_607259, "Version", newJString(Version))
  if Filters != nil:
    query_607259.add "Filters", Filters
  add(query_607259, "MaxRecords", newJInt(MaxRecords))
  result = call_607258.call(nil, query_607259, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_607241(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_607242, base: "/",
    url: url_GetDescribeDBClusters_607243, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_607304 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBEngineVersions_607306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_607305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607307 = query.getOrDefault("Action")
  valid_607307 = validateParameter(valid_607307, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_607307 != nil:
    section.add "Action", valid_607307
  var valid_607308 = query.getOrDefault("Version")
  valid_607308 = validateParameter(valid_607308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607308 != nil:
    section.add "Version", valid_607308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607309 = header.getOrDefault("X-Amz-Signature")
  valid_607309 = validateParameter(valid_607309, JString, required = false,
                                 default = nil)
  if valid_607309 != nil:
    section.add "X-Amz-Signature", valid_607309
  var valid_607310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607310 = validateParameter(valid_607310, JString, required = false,
                                 default = nil)
  if valid_607310 != nil:
    section.add "X-Amz-Content-Sha256", valid_607310
  var valid_607311 = header.getOrDefault("X-Amz-Date")
  valid_607311 = validateParameter(valid_607311, JString, required = false,
                                 default = nil)
  if valid_607311 != nil:
    section.add "X-Amz-Date", valid_607311
  var valid_607312 = header.getOrDefault("X-Amz-Credential")
  valid_607312 = validateParameter(valid_607312, JString, required = false,
                                 default = nil)
  if valid_607312 != nil:
    section.add "X-Amz-Credential", valid_607312
  var valid_607313 = header.getOrDefault("X-Amz-Security-Token")
  valid_607313 = validateParameter(valid_607313, JString, required = false,
                                 default = nil)
  if valid_607313 != nil:
    section.add "X-Amz-Security-Token", valid_607313
  var valid_607314 = header.getOrDefault("X-Amz-Algorithm")
  valid_607314 = validateParameter(valid_607314, JString, required = false,
                                 default = nil)
  if valid_607314 != nil:
    section.add "X-Amz-Algorithm", valid_607314
  var valid_607315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607315 = validateParameter(valid_607315, JString, required = false,
                                 default = nil)
  if valid_607315 != nil:
    section.add "X-Amz-SignedHeaders", valid_607315
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_607316 = formData.getOrDefault("DefaultOnly")
  valid_607316 = validateParameter(valid_607316, JBool, required = false, default = nil)
  if valid_607316 != nil:
    section.add "DefaultOnly", valid_607316
  var valid_607317 = formData.getOrDefault("MaxRecords")
  valid_607317 = validateParameter(valid_607317, JInt, required = false, default = nil)
  if valid_607317 != nil:
    section.add "MaxRecords", valid_607317
  var valid_607318 = formData.getOrDefault("EngineVersion")
  valid_607318 = validateParameter(valid_607318, JString, required = false,
                                 default = nil)
  if valid_607318 != nil:
    section.add "EngineVersion", valid_607318
  var valid_607319 = formData.getOrDefault("Marker")
  valid_607319 = validateParameter(valid_607319, JString, required = false,
                                 default = nil)
  if valid_607319 != nil:
    section.add "Marker", valid_607319
  var valid_607320 = formData.getOrDefault("Engine")
  valid_607320 = validateParameter(valid_607320, JString, required = false,
                                 default = nil)
  if valid_607320 != nil:
    section.add "Engine", valid_607320
  var valid_607321 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_607321 = validateParameter(valid_607321, JBool, required = false, default = nil)
  if valid_607321 != nil:
    section.add "ListSupportedCharacterSets", valid_607321
  var valid_607322 = formData.getOrDefault("ListSupportedTimezones")
  valid_607322 = validateParameter(valid_607322, JBool, required = false, default = nil)
  if valid_607322 != nil:
    section.add "ListSupportedTimezones", valid_607322
  var valid_607323 = formData.getOrDefault("Filters")
  valid_607323 = validateParameter(valid_607323, JArray, required = false,
                                 default = nil)
  if valid_607323 != nil:
    section.add "Filters", valid_607323
  var valid_607324 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607324 = validateParameter(valid_607324, JString, required = false,
                                 default = nil)
  if valid_607324 != nil:
    section.add "DBParameterGroupFamily", valid_607324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607325: Call_PostDescribeDBEngineVersions_607304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_607325.validator(path, query, header, formData, body)
  let scheme = call_607325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607325.url(scheme.get, call_607325.host, call_607325.base,
                         call_607325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607325, url, valid)

proc call*(call_607326: Call_PostDescribeDBEngineVersions_607304;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_607327 = newJObject()
  var formData_607328 = newJObject()
  add(formData_607328, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_607328, "MaxRecords", newJInt(MaxRecords))
  add(formData_607328, "EngineVersion", newJString(EngineVersion))
  add(formData_607328, "Marker", newJString(Marker))
  add(formData_607328, "Engine", newJString(Engine))
  add(formData_607328, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_607327, "Action", newJString(Action))
  add(formData_607328, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_607328.add "Filters", Filters
  add(query_607327, "Version", newJString(Version))
  add(formData_607328, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607326.call(nil, query_607327, nil, formData_607328, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_607304(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_607305, base: "/",
    url: url_PostDescribeDBEngineVersions_607306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_607280 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBEngineVersions_607282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_607281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_607283 = query.getOrDefault("Marker")
  valid_607283 = validateParameter(valid_607283, JString, required = false,
                                 default = nil)
  if valid_607283 != nil:
    section.add "Marker", valid_607283
  var valid_607284 = query.getOrDefault("ListSupportedTimezones")
  valid_607284 = validateParameter(valid_607284, JBool, required = false, default = nil)
  if valid_607284 != nil:
    section.add "ListSupportedTimezones", valid_607284
  var valid_607285 = query.getOrDefault("DBParameterGroupFamily")
  valid_607285 = validateParameter(valid_607285, JString, required = false,
                                 default = nil)
  if valid_607285 != nil:
    section.add "DBParameterGroupFamily", valid_607285
  var valid_607286 = query.getOrDefault("Engine")
  valid_607286 = validateParameter(valid_607286, JString, required = false,
                                 default = nil)
  if valid_607286 != nil:
    section.add "Engine", valid_607286
  var valid_607287 = query.getOrDefault("EngineVersion")
  valid_607287 = validateParameter(valid_607287, JString, required = false,
                                 default = nil)
  if valid_607287 != nil:
    section.add "EngineVersion", valid_607287
  var valid_607288 = query.getOrDefault("Action")
  valid_607288 = validateParameter(valid_607288, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_607288 != nil:
    section.add "Action", valid_607288
  var valid_607289 = query.getOrDefault("ListSupportedCharacterSets")
  valid_607289 = validateParameter(valid_607289, JBool, required = false, default = nil)
  if valid_607289 != nil:
    section.add "ListSupportedCharacterSets", valid_607289
  var valid_607290 = query.getOrDefault("Version")
  valid_607290 = validateParameter(valid_607290, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607290 != nil:
    section.add "Version", valid_607290
  var valid_607291 = query.getOrDefault("Filters")
  valid_607291 = validateParameter(valid_607291, JArray, required = false,
                                 default = nil)
  if valid_607291 != nil:
    section.add "Filters", valid_607291
  var valid_607292 = query.getOrDefault("MaxRecords")
  valid_607292 = validateParameter(valid_607292, JInt, required = false, default = nil)
  if valid_607292 != nil:
    section.add "MaxRecords", valid_607292
  var valid_607293 = query.getOrDefault("DefaultOnly")
  valid_607293 = validateParameter(valid_607293, JBool, required = false, default = nil)
  if valid_607293 != nil:
    section.add "DefaultOnly", valid_607293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607294 = header.getOrDefault("X-Amz-Signature")
  valid_607294 = validateParameter(valid_607294, JString, required = false,
                                 default = nil)
  if valid_607294 != nil:
    section.add "X-Amz-Signature", valid_607294
  var valid_607295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607295 = validateParameter(valid_607295, JString, required = false,
                                 default = nil)
  if valid_607295 != nil:
    section.add "X-Amz-Content-Sha256", valid_607295
  var valid_607296 = header.getOrDefault("X-Amz-Date")
  valid_607296 = validateParameter(valid_607296, JString, required = false,
                                 default = nil)
  if valid_607296 != nil:
    section.add "X-Amz-Date", valid_607296
  var valid_607297 = header.getOrDefault("X-Amz-Credential")
  valid_607297 = validateParameter(valid_607297, JString, required = false,
                                 default = nil)
  if valid_607297 != nil:
    section.add "X-Amz-Credential", valid_607297
  var valid_607298 = header.getOrDefault("X-Amz-Security-Token")
  valid_607298 = validateParameter(valid_607298, JString, required = false,
                                 default = nil)
  if valid_607298 != nil:
    section.add "X-Amz-Security-Token", valid_607298
  var valid_607299 = header.getOrDefault("X-Amz-Algorithm")
  valid_607299 = validateParameter(valid_607299, JString, required = false,
                                 default = nil)
  if valid_607299 != nil:
    section.add "X-Amz-Algorithm", valid_607299
  var valid_607300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607300 = validateParameter(valid_607300, JString, required = false,
                                 default = nil)
  if valid_607300 != nil:
    section.add "X-Amz-SignedHeaders", valid_607300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607301: Call_GetDescribeDBEngineVersions_607280; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_607301.validator(path, query, header, formData, body)
  let scheme = call_607301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607301.url(scheme.get, call_607301.host, call_607301.base,
                         call_607301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607301, url, valid)

proc call*(call_607302: Call_GetDescribeDBEngineVersions_607280;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          EngineVersion: string = ""; Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  var query_607303 = newJObject()
  add(query_607303, "Marker", newJString(Marker))
  add(query_607303, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_607303, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607303, "Engine", newJString(Engine))
  add(query_607303, "EngineVersion", newJString(EngineVersion))
  add(query_607303, "Action", newJString(Action))
  add(query_607303, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_607303, "Version", newJString(Version))
  if Filters != nil:
    query_607303.add "Filters", Filters
  add(query_607303, "MaxRecords", newJInt(MaxRecords))
  add(query_607303, "DefaultOnly", newJBool(DefaultOnly))
  result = call_607302.call(nil, query_607303, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_607280(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_607281, base: "/",
    url: url_GetDescribeDBEngineVersions_607282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_607348 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBInstances_607350(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_607349(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607351 = query.getOrDefault("Action")
  valid_607351 = validateParameter(valid_607351, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_607351 != nil:
    section.add "Action", valid_607351
  var valid_607352 = query.getOrDefault("Version")
  valid_607352 = validateParameter(valid_607352, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607352 != nil:
    section.add "Version", valid_607352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607353 = header.getOrDefault("X-Amz-Signature")
  valid_607353 = validateParameter(valid_607353, JString, required = false,
                                 default = nil)
  if valid_607353 != nil:
    section.add "X-Amz-Signature", valid_607353
  var valid_607354 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607354 = validateParameter(valid_607354, JString, required = false,
                                 default = nil)
  if valid_607354 != nil:
    section.add "X-Amz-Content-Sha256", valid_607354
  var valid_607355 = header.getOrDefault("X-Amz-Date")
  valid_607355 = validateParameter(valid_607355, JString, required = false,
                                 default = nil)
  if valid_607355 != nil:
    section.add "X-Amz-Date", valid_607355
  var valid_607356 = header.getOrDefault("X-Amz-Credential")
  valid_607356 = validateParameter(valid_607356, JString, required = false,
                                 default = nil)
  if valid_607356 != nil:
    section.add "X-Amz-Credential", valid_607356
  var valid_607357 = header.getOrDefault("X-Amz-Security-Token")
  valid_607357 = validateParameter(valid_607357, JString, required = false,
                                 default = nil)
  if valid_607357 != nil:
    section.add "X-Amz-Security-Token", valid_607357
  var valid_607358 = header.getOrDefault("X-Amz-Algorithm")
  valid_607358 = validateParameter(valid_607358, JString, required = false,
                                 default = nil)
  if valid_607358 != nil:
    section.add "X-Amz-Algorithm", valid_607358
  var valid_607359 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607359 = validateParameter(valid_607359, JString, required = false,
                                 default = nil)
  if valid_607359 != nil:
    section.add "X-Amz-SignedHeaders", valid_607359
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_607360 = formData.getOrDefault("MaxRecords")
  valid_607360 = validateParameter(valid_607360, JInt, required = false, default = nil)
  if valid_607360 != nil:
    section.add "MaxRecords", valid_607360
  var valid_607361 = formData.getOrDefault("Marker")
  valid_607361 = validateParameter(valid_607361, JString, required = false,
                                 default = nil)
  if valid_607361 != nil:
    section.add "Marker", valid_607361
  var valid_607362 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607362 = validateParameter(valid_607362, JString, required = false,
                                 default = nil)
  if valid_607362 != nil:
    section.add "DBInstanceIdentifier", valid_607362
  var valid_607363 = formData.getOrDefault("Filters")
  valid_607363 = validateParameter(valid_607363, JArray, required = false,
                                 default = nil)
  if valid_607363 != nil:
    section.add "Filters", valid_607363
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607364: Call_PostDescribeDBInstances_607348; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_607364.validator(path, query, header, formData, body)
  let scheme = call_607364.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607364.url(scheme.get, call_607364.host, call_607364.base,
                         call_607364.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607364, url, valid)

proc call*(call_607365: Call_PostDescribeDBInstances_607348; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_607366 = newJObject()
  var formData_607367 = newJObject()
  add(formData_607367, "MaxRecords", newJInt(MaxRecords))
  add(formData_607367, "Marker", newJString(Marker))
  add(formData_607367, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607366, "Action", newJString(Action))
  if Filters != nil:
    formData_607367.add "Filters", Filters
  add(query_607366, "Version", newJString(Version))
  result = call_607365.call(nil, query_607366, nil, formData_607367, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_607348(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_607349, base: "/",
    url: url_PostDescribeDBInstances_607350, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_607329 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBInstances_607331(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_607330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607332 = query.getOrDefault("Marker")
  valid_607332 = validateParameter(valid_607332, JString, required = false,
                                 default = nil)
  if valid_607332 != nil:
    section.add "Marker", valid_607332
  var valid_607333 = query.getOrDefault("DBInstanceIdentifier")
  valid_607333 = validateParameter(valid_607333, JString, required = false,
                                 default = nil)
  if valid_607333 != nil:
    section.add "DBInstanceIdentifier", valid_607333
  var valid_607334 = query.getOrDefault("Action")
  valid_607334 = validateParameter(valid_607334, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_607334 != nil:
    section.add "Action", valid_607334
  var valid_607335 = query.getOrDefault("Version")
  valid_607335 = validateParameter(valid_607335, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607335 != nil:
    section.add "Version", valid_607335
  var valid_607336 = query.getOrDefault("Filters")
  valid_607336 = validateParameter(valid_607336, JArray, required = false,
                                 default = nil)
  if valid_607336 != nil:
    section.add "Filters", valid_607336
  var valid_607337 = query.getOrDefault("MaxRecords")
  valid_607337 = validateParameter(valid_607337, JInt, required = false, default = nil)
  if valid_607337 != nil:
    section.add "MaxRecords", valid_607337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607338 = header.getOrDefault("X-Amz-Signature")
  valid_607338 = validateParameter(valid_607338, JString, required = false,
                                 default = nil)
  if valid_607338 != nil:
    section.add "X-Amz-Signature", valid_607338
  var valid_607339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607339 = validateParameter(valid_607339, JString, required = false,
                                 default = nil)
  if valid_607339 != nil:
    section.add "X-Amz-Content-Sha256", valid_607339
  var valid_607340 = header.getOrDefault("X-Amz-Date")
  valid_607340 = validateParameter(valid_607340, JString, required = false,
                                 default = nil)
  if valid_607340 != nil:
    section.add "X-Amz-Date", valid_607340
  var valid_607341 = header.getOrDefault("X-Amz-Credential")
  valid_607341 = validateParameter(valid_607341, JString, required = false,
                                 default = nil)
  if valid_607341 != nil:
    section.add "X-Amz-Credential", valid_607341
  var valid_607342 = header.getOrDefault("X-Amz-Security-Token")
  valid_607342 = validateParameter(valid_607342, JString, required = false,
                                 default = nil)
  if valid_607342 != nil:
    section.add "X-Amz-Security-Token", valid_607342
  var valid_607343 = header.getOrDefault("X-Amz-Algorithm")
  valid_607343 = validateParameter(valid_607343, JString, required = false,
                                 default = nil)
  if valid_607343 != nil:
    section.add "X-Amz-Algorithm", valid_607343
  var valid_607344 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607344 = validateParameter(valid_607344, JString, required = false,
                                 default = nil)
  if valid_607344 != nil:
    section.add "X-Amz-SignedHeaders", valid_607344
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607345: Call_GetDescribeDBInstances_607329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_607345.validator(path, query, header, formData, body)
  let scheme = call_607345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607345.url(scheme.get, call_607345.host, call_607345.base,
                         call_607345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607345, url, valid)

proc call*(call_607346: Call_GetDescribeDBInstances_607329; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607347 = newJObject()
  add(query_607347, "Marker", newJString(Marker))
  add(query_607347, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607347, "Action", newJString(Action))
  add(query_607347, "Version", newJString(Version))
  if Filters != nil:
    query_607347.add "Filters", Filters
  add(query_607347, "MaxRecords", newJInt(MaxRecords))
  result = call_607346.call(nil, query_607347, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_607329(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_607330, base: "/",
    url: url_GetDescribeDBInstances_607331, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_607387 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBParameterGroups_607389(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_607388(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607390 = query.getOrDefault("Action")
  valid_607390 = validateParameter(valid_607390, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_607390 != nil:
    section.add "Action", valid_607390
  var valid_607391 = query.getOrDefault("Version")
  valid_607391 = validateParameter(valid_607391, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607391 != nil:
    section.add "Version", valid_607391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607392 = header.getOrDefault("X-Amz-Signature")
  valid_607392 = validateParameter(valid_607392, JString, required = false,
                                 default = nil)
  if valid_607392 != nil:
    section.add "X-Amz-Signature", valid_607392
  var valid_607393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607393 = validateParameter(valid_607393, JString, required = false,
                                 default = nil)
  if valid_607393 != nil:
    section.add "X-Amz-Content-Sha256", valid_607393
  var valid_607394 = header.getOrDefault("X-Amz-Date")
  valid_607394 = validateParameter(valid_607394, JString, required = false,
                                 default = nil)
  if valid_607394 != nil:
    section.add "X-Amz-Date", valid_607394
  var valid_607395 = header.getOrDefault("X-Amz-Credential")
  valid_607395 = validateParameter(valid_607395, JString, required = false,
                                 default = nil)
  if valid_607395 != nil:
    section.add "X-Amz-Credential", valid_607395
  var valid_607396 = header.getOrDefault("X-Amz-Security-Token")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "X-Amz-Security-Token", valid_607396
  var valid_607397 = header.getOrDefault("X-Amz-Algorithm")
  valid_607397 = validateParameter(valid_607397, JString, required = false,
                                 default = nil)
  if valid_607397 != nil:
    section.add "X-Amz-Algorithm", valid_607397
  var valid_607398 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607398 = validateParameter(valid_607398, JString, required = false,
                                 default = nil)
  if valid_607398 != nil:
    section.add "X-Amz-SignedHeaders", valid_607398
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607399 = formData.getOrDefault("MaxRecords")
  valid_607399 = validateParameter(valid_607399, JInt, required = false, default = nil)
  if valid_607399 != nil:
    section.add "MaxRecords", valid_607399
  var valid_607400 = formData.getOrDefault("DBParameterGroupName")
  valid_607400 = validateParameter(valid_607400, JString, required = false,
                                 default = nil)
  if valid_607400 != nil:
    section.add "DBParameterGroupName", valid_607400
  var valid_607401 = formData.getOrDefault("Marker")
  valid_607401 = validateParameter(valid_607401, JString, required = false,
                                 default = nil)
  if valid_607401 != nil:
    section.add "Marker", valid_607401
  var valid_607402 = formData.getOrDefault("Filters")
  valid_607402 = validateParameter(valid_607402, JArray, required = false,
                                 default = nil)
  if valid_607402 != nil:
    section.add "Filters", valid_607402
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607403: Call_PostDescribeDBParameterGroups_607387; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_607403.validator(path, query, header, formData, body)
  let scheme = call_607403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607403.url(scheme.get, call_607403.host, call_607403.base,
                         call_607403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607403, url, valid)

proc call*(call_607404: Call_PostDescribeDBParameterGroups_607387;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607405 = newJObject()
  var formData_607406 = newJObject()
  add(formData_607406, "MaxRecords", newJInt(MaxRecords))
  add(formData_607406, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607406, "Marker", newJString(Marker))
  add(query_607405, "Action", newJString(Action))
  if Filters != nil:
    formData_607406.add "Filters", Filters
  add(query_607405, "Version", newJString(Version))
  result = call_607404.call(nil, query_607405, nil, formData_607406, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_607387(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_607388, base: "/",
    url: url_PostDescribeDBParameterGroups_607389,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_607368 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBParameterGroups_607370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_607369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607371 = query.getOrDefault("Marker")
  valid_607371 = validateParameter(valid_607371, JString, required = false,
                                 default = nil)
  if valid_607371 != nil:
    section.add "Marker", valid_607371
  var valid_607372 = query.getOrDefault("DBParameterGroupName")
  valid_607372 = validateParameter(valid_607372, JString, required = false,
                                 default = nil)
  if valid_607372 != nil:
    section.add "DBParameterGroupName", valid_607372
  var valid_607373 = query.getOrDefault("Action")
  valid_607373 = validateParameter(valid_607373, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_607373 != nil:
    section.add "Action", valid_607373
  var valid_607374 = query.getOrDefault("Version")
  valid_607374 = validateParameter(valid_607374, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607374 != nil:
    section.add "Version", valid_607374
  var valid_607375 = query.getOrDefault("Filters")
  valid_607375 = validateParameter(valid_607375, JArray, required = false,
                                 default = nil)
  if valid_607375 != nil:
    section.add "Filters", valid_607375
  var valid_607376 = query.getOrDefault("MaxRecords")
  valid_607376 = validateParameter(valid_607376, JInt, required = false, default = nil)
  if valid_607376 != nil:
    section.add "MaxRecords", valid_607376
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607377 = header.getOrDefault("X-Amz-Signature")
  valid_607377 = validateParameter(valid_607377, JString, required = false,
                                 default = nil)
  if valid_607377 != nil:
    section.add "X-Amz-Signature", valid_607377
  var valid_607378 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607378 = validateParameter(valid_607378, JString, required = false,
                                 default = nil)
  if valid_607378 != nil:
    section.add "X-Amz-Content-Sha256", valid_607378
  var valid_607379 = header.getOrDefault("X-Amz-Date")
  valid_607379 = validateParameter(valid_607379, JString, required = false,
                                 default = nil)
  if valid_607379 != nil:
    section.add "X-Amz-Date", valid_607379
  var valid_607380 = header.getOrDefault("X-Amz-Credential")
  valid_607380 = validateParameter(valid_607380, JString, required = false,
                                 default = nil)
  if valid_607380 != nil:
    section.add "X-Amz-Credential", valid_607380
  var valid_607381 = header.getOrDefault("X-Amz-Security-Token")
  valid_607381 = validateParameter(valid_607381, JString, required = false,
                                 default = nil)
  if valid_607381 != nil:
    section.add "X-Amz-Security-Token", valid_607381
  var valid_607382 = header.getOrDefault("X-Amz-Algorithm")
  valid_607382 = validateParameter(valid_607382, JString, required = false,
                                 default = nil)
  if valid_607382 != nil:
    section.add "X-Amz-Algorithm", valid_607382
  var valid_607383 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607383 = validateParameter(valid_607383, JString, required = false,
                                 default = nil)
  if valid_607383 != nil:
    section.add "X-Amz-SignedHeaders", valid_607383
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607384: Call_GetDescribeDBParameterGroups_607368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_607384.validator(path, query, header, formData, body)
  let scheme = call_607384.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607384.url(scheme.get, call_607384.host, call_607384.base,
                         call_607384.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607384, url, valid)

proc call*(call_607385: Call_GetDescribeDBParameterGroups_607368;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607386 = newJObject()
  add(query_607386, "Marker", newJString(Marker))
  add(query_607386, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607386, "Action", newJString(Action))
  add(query_607386, "Version", newJString(Version))
  if Filters != nil:
    query_607386.add "Filters", Filters
  add(query_607386, "MaxRecords", newJInt(MaxRecords))
  result = call_607385.call(nil, query_607386, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_607368(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_607369, base: "/",
    url: url_GetDescribeDBParameterGroups_607370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_607427 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBParameters_607429(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_607428(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607430 = query.getOrDefault("Action")
  valid_607430 = validateParameter(valid_607430, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_607430 != nil:
    section.add "Action", valid_607430
  var valid_607431 = query.getOrDefault("Version")
  valid_607431 = validateParameter(valid_607431, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607431 != nil:
    section.add "Version", valid_607431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607432 = header.getOrDefault("X-Amz-Signature")
  valid_607432 = validateParameter(valid_607432, JString, required = false,
                                 default = nil)
  if valid_607432 != nil:
    section.add "X-Amz-Signature", valid_607432
  var valid_607433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607433 = validateParameter(valid_607433, JString, required = false,
                                 default = nil)
  if valid_607433 != nil:
    section.add "X-Amz-Content-Sha256", valid_607433
  var valid_607434 = header.getOrDefault("X-Amz-Date")
  valid_607434 = validateParameter(valid_607434, JString, required = false,
                                 default = nil)
  if valid_607434 != nil:
    section.add "X-Amz-Date", valid_607434
  var valid_607435 = header.getOrDefault("X-Amz-Credential")
  valid_607435 = validateParameter(valid_607435, JString, required = false,
                                 default = nil)
  if valid_607435 != nil:
    section.add "X-Amz-Credential", valid_607435
  var valid_607436 = header.getOrDefault("X-Amz-Security-Token")
  valid_607436 = validateParameter(valid_607436, JString, required = false,
                                 default = nil)
  if valid_607436 != nil:
    section.add "X-Amz-Security-Token", valid_607436
  var valid_607437 = header.getOrDefault("X-Amz-Algorithm")
  valid_607437 = validateParameter(valid_607437, JString, required = false,
                                 default = nil)
  if valid_607437 != nil:
    section.add "X-Amz-Algorithm", valid_607437
  var valid_607438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607438 = validateParameter(valid_607438, JString, required = false,
                                 default = nil)
  if valid_607438 != nil:
    section.add "X-Amz-SignedHeaders", valid_607438
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607439 = formData.getOrDefault("Source")
  valid_607439 = validateParameter(valid_607439, JString, required = false,
                                 default = nil)
  if valid_607439 != nil:
    section.add "Source", valid_607439
  var valid_607440 = formData.getOrDefault("MaxRecords")
  valid_607440 = validateParameter(valid_607440, JInt, required = false, default = nil)
  if valid_607440 != nil:
    section.add "MaxRecords", valid_607440
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_607441 = formData.getOrDefault("DBParameterGroupName")
  valid_607441 = validateParameter(valid_607441, JString, required = true,
                                 default = nil)
  if valid_607441 != nil:
    section.add "DBParameterGroupName", valid_607441
  var valid_607442 = formData.getOrDefault("Marker")
  valid_607442 = validateParameter(valid_607442, JString, required = false,
                                 default = nil)
  if valid_607442 != nil:
    section.add "Marker", valid_607442
  var valid_607443 = formData.getOrDefault("Filters")
  valid_607443 = validateParameter(valid_607443, JArray, required = false,
                                 default = nil)
  if valid_607443 != nil:
    section.add "Filters", valid_607443
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607444: Call_PostDescribeDBParameters_607427; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_607444.validator(path, query, header, formData, body)
  let scheme = call_607444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607444.url(scheme.get, call_607444.host, call_607444.base,
                         call_607444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607444, url, valid)

proc call*(call_607445: Call_PostDescribeDBParameters_607427;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607446 = newJObject()
  var formData_607447 = newJObject()
  add(formData_607447, "Source", newJString(Source))
  add(formData_607447, "MaxRecords", newJInt(MaxRecords))
  add(formData_607447, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607447, "Marker", newJString(Marker))
  add(query_607446, "Action", newJString(Action))
  if Filters != nil:
    formData_607447.add "Filters", Filters
  add(query_607446, "Version", newJString(Version))
  result = call_607445.call(nil, query_607446, nil, formData_607447, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_607427(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_607428, base: "/",
    url: url_PostDescribeDBParameters_607429, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_607407 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBParameters_607409(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_607408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607410 = query.getOrDefault("Marker")
  valid_607410 = validateParameter(valid_607410, JString, required = false,
                                 default = nil)
  if valid_607410 != nil:
    section.add "Marker", valid_607410
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_607411 = query.getOrDefault("DBParameterGroupName")
  valid_607411 = validateParameter(valid_607411, JString, required = true,
                                 default = nil)
  if valid_607411 != nil:
    section.add "DBParameterGroupName", valid_607411
  var valid_607412 = query.getOrDefault("Source")
  valid_607412 = validateParameter(valid_607412, JString, required = false,
                                 default = nil)
  if valid_607412 != nil:
    section.add "Source", valid_607412
  var valid_607413 = query.getOrDefault("Action")
  valid_607413 = validateParameter(valid_607413, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_607413 != nil:
    section.add "Action", valid_607413
  var valid_607414 = query.getOrDefault("Version")
  valid_607414 = validateParameter(valid_607414, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607414 != nil:
    section.add "Version", valid_607414
  var valid_607415 = query.getOrDefault("Filters")
  valid_607415 = validateParameter(valid_607415, JArray, required = false,
                                 default = nil)
  if valid_607415 != nil:
    section.add "Filters", valid_607415
  var valid_607416 = query.getOrDefault("MaxRecords")
  valid_607416 = validateParameter(valid_607416, JInt, required = false, default = nil)
  if valid_607416 != nil:
    section.add "MaxRecords", valid_607416
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607417 = header.getOrDefault("X-Amz-Signature")
  valid_607417 = validateParameter(valid_607417, JString, required = false,
                                 default = nil)
  if valid_607417 != nil:
    section.add "X-Amz-Signature", valid_607417
  var valid_607418 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607418 = validateParameter(valid_607418, JString, required = false,
                                 default = nil)
  if valid_607418 != nil:
    section.add "X-Amz-Content-Sha256", valid_607418
  var valid_607419 = header.getOrDefault("X-Amz-Date")
  valid_607419 = validateParameter(valid_607419, JString, required = false,
                                 default = nil)
  if valid_607419 != nil:
    section.add "X-Amz-Date", valid_607419
  var valid_607420 = header.getOrDefault("X-Amz-Credential")
  valid_607420 = validateParameter(valid_607420, JString, required = false,
                                 default = nil)
  if valid_607420 != nil:
    section.add "X-Amz-Credential", valid_607420
  var valid_607421 = header.getOrDefault("X-Amz-Security-Token")
  valid_607421 = validateParameter(valid_607421, JString, required = false,
                                 default = nil)
  if valid_607421 != nil:
    section.add "X-Amz-Security-Token", valid_607421
  var valid_607422 = header.getOrDefault("X-Amz-Algorithm")
  valid_607422 = validateParameter(valid_607422, JString, required = false,
                                 default = nil)
  if valid_607422 != nil:
    section.add "X-Amz-Algorithm", valid_607422
  var valid_607423 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607423 = validateParameter(valid_607423, JString, required = false,
                                 default = nil)
  if valid_607423 != nil:
    section.add "X-Amz-SignedHeaders", valid_607423
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607424: Call_GetDescribeDBParameters_607407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_607424.validator(path, query, header, formData, body)
  let scheme = call_607424.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607424.url(scheme.get, call_607424.host, call_607424.base,
                         call_607424.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607424, url, valid)

proc call*(call_607425: Call_GetDescribeDBParameters_607407;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607426 = newJObject()
  add(query_607426, "Marker", newJString(Marker))
  add(query_607426, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607426, "Source", newJString(Source))
  add(query_607426, "Action", newJString(Action))
  add(query_607426, "Version", newJString(Version))
  if Filters != nil:
    query_607426.add "Filters", Filters
  add(query_607426, "MaxRecords", newJInt(MaxRecords))
  result = call_607425.call(nil, query_607426, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_607407(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_607408, base: "/",
    url: url_GetDescribeDBParameters_607409, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_607467 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBSubnetGroups_607469(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_607468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607470 = query.getOrDefault("Action")
  valid_607470 = validateParameter(valid_607470, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_607470 != nil:
    section.add "Action", valid_607470
  var valid_607471 = query.getOrDefault("Version")
  valid_607471 = validateParameter(valid_607471, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607471 != nil:
    section.add "Version", valid_607471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607472 = header.getOrDefault("X-Amz-Signature")
  valid_607472 = validateParameter(valid_607472, JString, required = false,
                                 default = nil)
  if valid_607472 != nil:
    section.add "X-Amz-Signature", valid_607472
  var valid_607473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607473 = validateParameter(valid_607473, JString, required = false,
                                 default = nil)
  if valid_607473 != nil:
    section.add "X-Amz-Content-Sha256", valid_607473
  var valid_607474 = header.getOrDefault("X-Amz-Date")
  valid_607474 = validateParameter(valid_607474, JString, required = false,
                                 default = nil)
  if valid_607474 != nil:
    section.add "X-Amz-Date", valid_607474
  var valid_607475 = header.getOrDefault("X-Amz-Credential")
  valid_607475 = validateParameter(valid_607475, JString, required = false,
                                 default = nil)
  if valid_607475 != nil:
    section.add "X-Amz-Credential", valid_607475
  var valid_607476 = header.getOrDefault("X-Amz-Security-Token")
  valid_607476 = validateParameter(valid_607476, JString, required = false,
                                 default = nil)
  if valid_607476 != nil:
    section.add "X-Amz-Security-Token", valid_607476
  var valid_607477 = header.getOrDefault("X-Amz-Algorithm")
  valid_607477 = validateParameter(valid_607477, JString, required = false,
                                 default = nil)
  if valid_607477 != nil:
    section.add "X-Amz-Algorithm", valid_607477
  var valid_607478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607478 = validateParameter(valid_607478, JString, required = false,
                                 default = nil)
  if valid_607478 != nil:
    section.add "X-Amz-SignedHeaders", valid_607478
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607479 = formData.getOrDefault("MaxRecords")
  valid_607479 = validateParameter(valid_607479, JInt, required = false, default = nil)
  if valid_607479 != nil:
    section.add "MaxRecords", valid_607479
  var valid_607480 = formData.getOrDefault("Marker")
  valid_607480 = validateParameter(valid_607480, JString, required = false,
                                 default = nil)
  if valid_607480 != nil:
    section.add "Marker", valid_607480
  var valid_607481 = formData.getOrDefault("DBSubnetGroupName")
  valid_607481 = validateParameter(valid_607481, JString, required = false,
                                 default = nil)
  if valid_607481 != nil:
    section.add "DBSubnetGroupName", valid_607481
  var valid_607482 = formData.getOrDefault("Filters")
  valid_607482 = validateParameter(valid_607482, JArray, required = false,
                                 default = nil)
  if valid_607482 != nil:
    section.add "Filters", valid_607482
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607483: Call_PostDescribeDBSubnetGroups_607467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_607483.validator(path, query, header, formData, body)
  let scheme = call_607483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607483.url(scheme.get, call_607483.host, call_607483.base,
                         call_607483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607483, url, valid)

proc call*(call_607484: Call_PostDescribeDBSubnetGroups_607467;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607485 = newJObject()
  var formData_607486 = newJObject()
  add(formData_607486, "MaxRecords", newJInt(MaxRecords))
  add(formData_607486, "Marker", newJString(Marker))
  add(query_607485, "Action", newJString(Action))
  add(formData_607486, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_607486.add "Filters", Filters
  add(query_607485, "Version", newJString(Version))
  result = call_607484.call(nil, query_607485, nil, formData_607486, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_607467(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_607468, base: "/",
    url: url_PostDescribeDBSubnetGroups_607469,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_607448 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBSubnetGroups_607450(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_607449(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607451 = query.getOrDefault("Marker")
  valid_607451 = validateParameter(valid_607451, JString, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "Marker", valid_607451
  var valid_607452 = query.getOrDefault("Action")
  valid_607452 = validateParameter(valid_607452, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_607452 != nil:
    section.add "Action", valid_607452
  var valid_607453 = query.getOrDefault("DBSubnetGroupName")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = nil)
  if valid_607453 != nil:
    section.add "DBSubnetGroupName", valid_607453
  var valid_607454 = query.getOrDefault("Version")
  valid_607454 = validateParameter(valid_607454, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607454 != nil:
    section.add "Version", valid_607454
  var valid_607455 = query.getOrDefault("Filters")
  valid_607455 = validateParameter(valid_607455, JArray, required = false,
                                 default = nil)
  if valid_607455 != nil:
    section.add "Filters", valid_607455
  var valid_607456 = query.getOrDefault("MaxRecords")
  valid_607456 = validateParameter(valid_607456, JInt, required = false, default = nil)
  if valid_607456 != nil:
    section.add "MaxRecords", valid_607456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607457 = header.getOrDefault("X-Amz-Signature")
  valid_607457 = validateParameter(valid_607457, JString, required = false,
                                 default = nil)
  if valid_607457 != nil:
    section.add "X-Amz-Signature", valid_607457
  var valid_607458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607458 = validateParameter(valid_607458, JString, required = false,
                                 default = nil)
  if valid_607458 != nil:
    section.add "X-Amz-Content-Sha256", valid_607458
  var valid_607459 = header.getOrDefault("X-Amz-Date")
  valid_607459 = validateParameter(valid_607459, JString, required = false,
                                 default = nil)
  if valid_607459 != nil:
    section.add "X-Amz-Date", valid_607459
  var valid_607460 = header.getOrDefault("X-Amz-Credential")
  valid_607460 = validateParameter(valid_607460, JString, required = false,
                                 default = nil)
  if valid_607460 != nil:
    section.add "X-Amz-Credential", valid_607460
  var valid_607461 = header.getOrDefault("X-Amz-Security-Token")
  valid_607461 = validateParameter(valid_607461, JString, required = false,
                                 default = nil)
  if valid_607461 != nil:
    section.add "X-Amz-Security-Token", valid_607461
  var valid_607462 = header.getOrDefault("X-Amz-Algorithm")
  valid_607462 = validateParameter(valid_607462, JString, required = false,
                                 default = nil)
  if valid_607462 != nil:
    section.add "X-Amz-Algorithm", valid_607462
  var valid_607463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607463 = validateParameter(valid_607463, JString, required = false,
                                 default = nil)
  if valid_607463 != nil:
    section.add "X-Amz-SignedHeaders", valid_607463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607464: Call_GetDescribeDBSubnetGroups_607448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_607464.validator(path, query, header, formData, body)
  let scheme = call_607464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607464.url(scheme.get, call_607464.host, call_607464.base,
                         call_607464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607464, url, valid)

proc call*(call_607465: Call_GetDescribeDBSubnetGroups_607448; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607466 = newJObject()
  add(query_607466, "Marker", newJString(Marker))
  add(query_607466, "Action", newJString(Action))
  add(query_607466, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607466, "Version", newJString(Version))
  if Filters != nil:
    query_607466.add "Filters", Filters
  add(query_607466, "MaxRecords", newJInt(MaxRecords))
  result = call_607465.call(nil, query_607466, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_607448(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_607449, base: "/",
    url: url_GetDescribeDBSubnetGroups_607450,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_607506 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEngineDefaultClusterParameters_607508(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_607507(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607509 = query.getOrDefault("Action")
  valid_607509 = validateParameter(valid_607509, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_607509 != nil:
    section.add "Action", valid_607509
  var valid_607510 = query.getOrDefault("Version")
  valid_607510 = validateParameter(valid_607510, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607510 != nil:
    section.add "Version", valid_607510
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607511 = header.getOrDefault("X-Amz-Signature")
  valid_607511 = validateParameter(valid_607511, JString, required = false,
                                 default = nil)
  if valid_607511 != nil:
    section.add "X-Amz-Signature", valid_607511
  var valid_607512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607512 = validateParameter(valid_607512, JString, required = false,
                                 default = nil)
  if valid_607512 != nil:
    section.add "X-Amz-Content-Sha256", valid_607512
  var valid_607513 = header.getOrDefault("X-Amz-Date")
  valid_607513 = validateParameter(valid_607513, JString, required = false,
                                 default = nil)
  if valid_607513 != nil:
    section.add "X-Amz-Date", valid_607513
  var valid_607514 = header.getOrDefault("X-Amz-Credential")
  valid_607514 = validateParameter(valid_607514, JString, required = false,
                                 default = nil)
  if valid_607514 != nil:
    section.add "X-Amz-Credential", valid_607514
  var valid_607515 = header.getOrDefault("X-Amz-Security-Token")
  valid_607515 = validateParameter(valid_607515, JString, required = false,
                                 default = nil)
  if valid_607515 != nil:
    section.add "X-Amz-Security-Token", valid_607515
  var valid_607516 = header.getOrDefault("X-Amz-Algorithm")
  valid_607516 = validateParameter(valid_607516, JString, required = false,
                                 default = nil)
  if valid_607516 != nil:
    section.add "X-Amz-Algorithm", valid_607516
  var valid_607517 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607517 = validateParameter(valid_607517, JString, required = false,
                                 default = nil)
  if valid_607517 != nil:
    section.add "X-Amz-SignedHeaders", valid_607517
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_607518 = formData.getOrDefault("MaxRecords")
  valid_607518 = validateParameter(valid_607518, JInt, required = false, default = nil)
  if valid_607518 != nil:
    section.add "MaxRecords", valid_607518
  var valid_607519 = formData.getOrDefault("Marker")
  valid_607519 = validateParameter(valid_607519, JString, required = false,
                                 default = nil)
  if valid_607519 != nil:
    section.add "Marker", valid_607519
  var valid_607520 = formData.getOrDefault("Filters")
  valid_607520 = validateParameter(valid_607520, JArray, required = false,
                                 default = nil)
  if valid_607520 != nil:
    section.add "Filters", valid_607520
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607521 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607521 = validateParameter(valid_607521, JString, required = true,
                                 default = nil)
  if valid_607521 != nil:
    section.add "DBParameterGroupFamily", valid_607521
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607522: Call_PostDescribeEngineDefaultClusterParameters_607506;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_607522.validator(path, query, header, formData, body)
  let scheme = call_607522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607522.url(scheme.get, call_607522.host, call_607522.base,
                         call_607522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607522, url, valid)

proc call*(call_607523: Call_PostDescribeEngineDefaultClusterParameters_607506;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_607524 = newJObject()
  var formData_607525 = newJObject()
  add(formData_607525, "MaxRecords", newJInt(MaxRecords))
  add(formData_607525, "Marker", newJString(Marker))
  add(query_607524, "Action", newJString(Action))
  if Filters != nil:
    formData_607525.add "Filters", Filters
  add(query_607524, "Version", newJString(Version))
  add(formData_607525, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607523.call(nil, query_607524, nil, formData_607525, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_607506(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_607507,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_607508,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_607487 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEngineDefaultClusterParameters_607489(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_607488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607490 = query.getOrDefault("Marker")
  valid_607490 = validateParameter(valid_607490, JString, required = false,
                                 default = nil)
  if valid_607490 != nil:
    section.add "Marker", valid_607490
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607491 = query.getOrDefault("DBParameterGroupFamily")
  valid_607491 = validateParameter(valid_607491, JString, required = true,
                                 default = nil)
  if valid_607491 != nil:
    section.add "DBParameterGroupFamily", valid_607491
  var valid_607492 = query.getOrDefault("Action")
  valid_607492 = validateParameter(valid_607492, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_607492 != nil:
    section.add "Action", valid_607492
  var valid_607493 = query.getOrDefault("Version")
  valid_607493 = validateParameter(valid_607493, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607493 != nil:
    section.add "Version", valid_607493
  var valid_607494 = query.getOrDefault("Filters")
  valid_607494 = validateParameter(valid_607494, JArray, required = false,
                                 default = nil)
  if valid_607494 != nil:
    section.add "Filters", valid_607494
  var valid_607495 = query.getOrDefault("MaxRecords")
  valid_607495 = validateParameter(valid_607495, JInt, required = false, default = nil)
  if valid_607495 != nil:
    section.add "MaxRecords", valid_607495
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607496 = header.getOrDefault("X-Amz-Signature")
  valid_607496 = validateParameter(valid_607496, JString, required = false,
                                 default = nil)
  if valid_607496 != nil:
    section.add "X-Amz-Signature", valid_607496
  var valid_607497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607497 = validateParameter(valid_607497, JString, required = false,
                                 default = nil)
  if valid_607497 != nil:
    section.add "X-Amz-Content-Sha256", valid_607497
  var valid_607498 = header.getOrDefault("X-Amz-Date")
  valid_607498 = validateParameter(valid_607498, JString, required = false,
                                 default = nil)
  if valid_607498 != nil:
    section.add "X-Amz-Date", valid_607498
  var valid_607499 = header.getOrDefault("X-Amz-Credential")
  valid_607499 = validateParameter(valid_607499, JString, required = false,
                                 default = nil)
  if valid_607499 != nil:
    section.add "X-Amz-Credential", valid_607499
  var valid_607500 = header.getOrDefault("X-Amz-Security-Token")
  valid_607500 = validateParameter(valid_607500, JString, required = false,
                                 default = nil)
  if valid_607500 != nil:
    section.add "X-Amz-Security-Token", valid_607500
  var valid_607501 = header.getOrDefault("X-Amz-Algorithm")
  valid_607501 = validateParameter(valid_607501, JString, required = false,
                                 default = nil)
  if valid_607501 != nil:
    section.add "X-Amz-Algorithm", valid_607501
  var valid_607502 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607502 = validateParameter(valid_607502, JString, required = false,
                                 default = nil)
  if valid_607502 != nil:
    section.add "X-Amz-SignedHeaders", valid_607502
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607503: Call_GetDescribeEngineDefaultClusterParameters_607487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_607503.validator(path, query, header, formData, body)
  let scheme = call_607503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607503.url(scheme.get, call_607503.host, call_607503.base,
                         call_607503.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607503, url, valid)

proc call*(call_607504: Call_GetDescribeEngineDefaultClusterParameters_607487;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607505 = newJObject()
  add(query_607505, "Marker", newJString(Marker))
  add(query_607505, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607505, "Action", newJString(Action))
  add(query_607505, "Version", newJString(Version))
  if Filters != nil:
    query_607505.add "Filters", Filters
  add(query_607505, "MaxRecords", newJInt(MaxRecords))
  result = call_607504.call(nil, query_607505, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_607487(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_607488,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_607489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_607545 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEngineDefaultParameters_607547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_607546(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607548 = query.getOrDefault("Action")
  valid_607548 = validateParameter(valid_607548, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607548 != nil:
    section.add "Action", valid_607548
  var valid_607549 = query.getOrDefault("Version")
  valid_607549 = validateParameter(valid_607549, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607549 != nil:
    section.add "Version", valid_607549
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607550 = header.getOrDefault("X-Amz-Signature")
  valid_607550 = validateParameter(valid_607550, JString, required = false,
                                 default = nil)
  if valid_607550 != nil:
    section.add "X-Amz-Signature", valid_607550
  var valid_607551 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607551 = validateParameter(valid_607551, JString, required = false,
                                 default = nil)
  if valid_607551 != nil:
    section.add "X-Amz-Content-Sha256", valid_607551
  var valid_607552 = header.getOrDefault("X-Amz-Date")
  valid_607552 = validateParameter(valid_607552, JString, required = false,
                                 default = nil)
  if valid_607552 != nil:
    section.add "X-Amz-Date", valid_607552
  var valid_607553 = header.getOrDefault("X-Amz-Credential")
  valid_607553 = validateParameter(valid_607553, JString, required = false,
                                 default = nil)
  if valid_607553 != nil:
    section.add "X-Amz-Credential", valid_607553
  var valid_607554 = header.getOrDefault("X-Amz-Security-Token")
  valid_607554 = validateParameter(valid_607554, JString, required = false,
                                 default = nil)
  if valid_607554 != nil:
    section.add "X-Amz-Security-Token", valid_607554
  var valid_607555 = header.getOrDefault("X-Amz-Algorithm")
  valid_607555 = validateParameter(valid_607555, JString, required = false,
                                 default = nil)
  if valid_607555 != nil:
    section.add "X-Amz-Algorithm", valid_607555
  var valid_607556 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607556 = validateParameter(valid_607556, JString, required = false,
                                 default = nil)
  if valid_607556 != nil:
    section.add "X-Amz-SignedHeaders", valid_607556
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_607557 = formData.getOrDefault("MaxRecords")
  valid_607557 = validateParameter(valid_607557, JInt, required = false, default = nil)
  if valid_607557 != nil:
    section.add "MaxRecords", valid_607557
  var valid_607558 = formData.getOrDefault("Marker")
  valid_607558 = validateParameter(valid_607558, JString, required = false,
                                 default = nil)
  if valid_607558 != nil:
    section.add "Marker", valid_607558
  var valid_607559 = formData.getOrDefault("Filters")
  valid_607559 = validateParameter(valid_607559, JArray, required = false,
                                 default = nil)
  if valid_607559 != nil:
    section.add "Filters", valid_607559
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607560 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607560 = validateParameter(valid_607560, JString, required = true,
                                 default = nil)
  if valid_607560 != nil:
    section.add "DBParameterGroupFamily", valid_607560
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607561: Call_PostDescribeEngineDefaultParameters_607545;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_607561.validator(path, query, header, formData, body)
  let scheme = call_607561.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607561.url(scheme.get, call_607561.host, call_607561.base,
                         call_607561.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607561, url, valid)

proc call*(call_607562: Call_PostDescribeEngineDefaultParameters_607545;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_607563 = newJObject()
  var formData_607564 = newJObject()
  add(formData_607564, "MaxRecords", newJInt(MaxRecords))
  add(formData_607564, "Marker", newJString(Marker))
  add(query_607563, "Action", newJString(Action))
  if Filters != nil:
    formData_607564.add "Filters", Filters
  add(query_607563, "Version", newJString(Version))
  add(formData_607564, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607562.call(nil, query_607563, nil, formData_607564, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_607545(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_607546, base: "/",
    url: url_PostDescribeEngineDefaultParameters_607547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_607526 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEngineDefaultParameters_607528(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_607527(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607529 = query.getOrDefault("Marker")
  valid_607529 = validateParameter(valid_607529, JString, required = false,
                                 default = nil)
  if valid_607529 != nil:
    section.add "Marker", valid_607529
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607530 = query.getOrDefault("DBParameterGroupFamily")
  valid_607530 = validateParameter(valid_607530, JString, required = true,
                                 default = nil)
  if valid_607530 != nil:
    section.add "DBParameterGroupFamily", valid_607530
  var valid_607531 = query.getOrDefault("Action")
  valid_607531 = validateParameter(valid_607531, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607531 != nil:
    section.add "Action", valid_607531
  var valid_607532 = query.getOrDefault("Version")
  valid_607532 = validateParameter(valid_607532, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607532 != nil:
    section.add "Version", valid_607532
  var valid_607533 = query.getOrDefault("Filters")
  valid_607533 = validateParameter(valid_607533, JArray, required = false,
                                 default = nil)
  if valid_607533 != nil:
    section.add "Filters", valid_607533
  var valid_607534 = query.getOrDefault("MaxRecords")
  valid_607534 = validateParameter(valid_607534, JInt, required = false, default = nil)
  if valid_607534 != nil:
    section.add "MaxRecords", valid_607534
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607535 = header.getOrDefault("X-Amz-Signature")
  valid_607535 = validateParameter(valid_607535, JString, required = false,
                                 default = nil)
  if valid_607535 != nil:
    section.add "X-Amz-Signature", valid_607535
  var valid_607536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607536 = validateParameter(valid_607536, JString, required = false,
                                 default = nil)
  if valid_607536 != nil:
    section.add "X-Amz-Content-Sha256", valid_607536
  var valid_607537 = header.getOrDefault("X-Amz-Date")
  valid_607537 = validateParameter(valid_607537, JString, required = false,
                                 default = nil)
  if valid_607537 != nil:
    section.add "X-Amz-Date", valid_607537
  var valid_607538 = header.getOrDefault("X-Amz-Credential")
  valid_607538 = validateParameter(valid_607538, JString, required = false,
                                 default = nil)
  if valid_607538 != nil:
    section.add "X-Amz-Credential", valid_607538
  var valid_607539 = header.getOrDefault("X-Amz-Security-Token")
  valid_607539 = validateParameter(valid_607539, JString, required = false,
                                 default = nil)
  if valid_607539 != nil:
    section.add "X-Amz-Security-Token", valid_607539
  var valid_607540 = header.getOrDefault("X-Amz-Algorithm")
  valid_607540 = validateParameter(valid_607540, JString, required = false,
                                 default = nil)
  if valid_607540 != nil:
    section.add "X-Amz-Algorithm", valid_607540
  var valid_607541 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607541 = validateParameter(valid_607541, JString, required = false,
                                 default = nil)
  if valid_607541 != nil:
    section.add "X-Amz-SignedHeaders", valid_607541
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607542: Call_GetDescribeEngineDefaultParameters_607526;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_607542.validator(path, query, header, formData, body)
  let scheme = call_607542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607542.url(scheme.get, call_607542.host, call_607542.base,
                         call_607542.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607542, url, valid)

proc call*(call_607543: Call_GetDescribeEngineDefaultParameters_607526;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607544 = newJObject()
  add(query_607544, "Marker", newJString(Marker))
  add(query_607544, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607544, "Action", newJString(Action))
  add(query_607544, "Version", newJString(Version))
  if Filters != nil:
    query_607544.add "Filters", Filters
  add(query_607544, "MaxRecords", newJInt(MaxRecords))
  result = call_607543.call(nil, query_607544, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_607526(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_607527, base: "/",
    url: url_GetDescribeEngineDefaultParameters_607528,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_607582 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEventCategories_607584(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_607583(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607585 = query.getOrDefault("Action")
  valid_607585 = validateParameter(valid_607585, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_607585 != nil:
    section.add "Action", valid_607585
  var valid_607586 = query.getOrDefault("Version")
  valid_607586 = validateParameter(valid_607586, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607586 != nil:
    section.add "Version", valid_607586
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607587 = header.getOrDefault("X-Amz-Signature")
  valid_607587 = validateParameter(valid_607587, JString, required = false,
                                 default = nil)
  if valid_607587 != nil:
    section.add "X-Amz-Signature", valid_607587
  var valid_607588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607588 = validateParameter(valid_607588, JString, required = false,
                                 default = nil)
  if valid_607588 != nil:
    section.add "X-Amz-Content-Sha256", valid_607588
  var valid_607589 = header.getOrDefault("X-Amz-Date")
  valid_607589 = validateParameter(valid_607589, JString, required = false,
                                 default = nil)
  if valid_607589 != nil:
    section.add "X-Amz-Date", valid_607589
  var valid_607590 = header.getOrDefault("X-Amz-Credential")
  valid_607590 = validateParameter(valid_607590, JString, required = false,
                                 default = nil)
  if valid_607590 != nil:
    section.add "X-Amz-Credential", valid_607590
  var valid_607591 = header.getOrDefault("X-Amz-Security-Token")
  valid_607591 = validateParameter(valid_607591, JString, required = false,
                                 default = nil)
  if valid_607591 != nil:
    section.add "X-Amz-Security-Token", valid_607591
  var valid_607592 = header.getOrDefault("X-Amz-Algorithm")
  valid_607592 = validateParameter(valid_607592, JString, required = false,
                                 default = nil)
  if valid_607592 != nil:
    section.add "X-Amz-Algorithm", valid_607592
  var valid_607593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607593 = validateParameter(valid_607593, JString, required = false,
                                 default = nil)
  if valid_607593 != nil:
    section.add "X-Amz-SignedHeaders", valid_607593
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607594 = formData.getOrDefault("SourceType")
  valid_607594 = validateParameter(valid_607594, JString, required = false,
                                 default = nil)
  if valid_607594 != nil:
    section.add "SourceType", valid_607594
  var valid_607595 = formData.getOrDefault("Filters")
  valid_607595 = validateParameter(valid_607595, JArray, required = false,
                                 default = nil)
  if valid_607595 != nil:
    section.add "Filters", valid_607595
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607596: Call_PostDescribeEventCategories_607582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_607596.validator(path, query, header, formData, body)
  let scheme = call_607596.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607596.url(scheme.get, call_607596.host, call_607596.base,
                         call_607596.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607596, url, valid)

proc call*(call_607597: Call_PostDescribeEventCategories_607582;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607598 = newJObject()
  var formData_607599 = newJObject()
  add(formData_607599, "SourceType", newJString(SourceType))
  add(query_607598, "Action", newJString(Action))
  if Filters != nil:
    formData_607599.add "Filters", Filters
  add(query_607598, "Version", newJString(Version))
  result = call_607597.call(nil, query_607598, nil, formData_607599, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_607582(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_607583, base: "/",
    url: url_PostDescribeEventCategories_607584,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_607565 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEventCategories_607567(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_607566(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607568 = query.getOrDefault("SourceType")
  valid_607568 = validateParameter(valid_607568, JString, required = false,
                                 default = nil)
  if valid_607568 != nil:
    section.add "SourceType", valid_607568
  var valid_607569 = query.getOrDefault("Action")
  valid_607569 = validateParameter(valid_607569, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_607569 != nil:
    section.add "Action", valid_607569
  var valid_607570 = query.getOrDefault("Version")
  valid_607570 = validateParameter(valid_607570, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607570 != nil:
    section.add "Version", valid_607570
  var valid_607571 = query.getOrDefault("Filters")
  valid_607571 = validateParameter(valid_607571, JArray, required = false,
                                 default = nil)
  if valid_607571 != nil:
    section.add "Filters", valid_607571
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607572 = header.getOrDefault("X-Amz-Signature")
  valid_607572 = validateParameter(valid_607572, JString, required = false,
                                 default = nil)
  if valid_607572 != nil:
    section.add "X-Amz-Signature", valid_607572
  var valid_607573 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607573 = validateParameter(valid_607573, JString, required = false,
                                 default = nil)
  if valid_607573 != nil:
    section.add "X-Amz-Content-Sha256", valid_607573
  var valid_607574 = header.getOrDefault("X-Amz-Date")
  valid_607574 = validateParameter(valid_607574, JString, required = false,
                                 default = nil)
  if valid_607574 != nil:
    section.add "X-Amz-Date", valid_607574
  var valid_607575 = header.getOrDefault("X-Amz-Credential")
  valid_607575 = validateParameter(valid_607575, JString, required = false,
                                 default = nil)
  if valid_607575 != nil:
    section.add "X-Amz-Credential", valid_607575
  var valid_607576 = header.getOrDefault("X-Amz-Security-Token")
  valid_607576 = validateParameter(valid_607576, JString, required = false,
                                 default = nil)
  if valid_607576 != nil:
    section.add "X-Amz-Security-Token", valid_607576
  var valid_607577 = header.getOrDefault("X-Amz-Algorithm")
  valid_607577 = validateParameter(valid_607577, JString, required = false,
                                 default = nil)
  if valid_607577 != nil:
    section.add "X-Amz-Algorithm", valid_607577
  var valid_607578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607578 = validateParameter(valid_607578, JString, required = false,
                                 default = nil)
  if valid_607578 != nil:
    section.add "X-Amz-SignedHeaders", valid_607578
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607579: Call_GetDescribeEventCategories_607565; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_607579.validator(path, query, header, formData, body)
  let scheme = call_607579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607579.url(scheme.get, call_607579.host, call_607579.base,
                         call_607579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607579, url, valid)

proc call*(call_607580: Call_GetDescribeEventCategories_607565;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_607581 = newJObject()
  add(query_607581, "SourceType", newJString(SourceType))
  add(query_607581, "Action", newJString(Action))
  add(query_607581, "Version", newJString(Version))
  if Filters != nil:
    query_607581.add "Filters", Filters
  result = call_607580.call(nil, query_607581, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_607565(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_607566, base: "/",
    url: url_GetDescribeEventCategories_607567,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_607619 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEventSubscriptions_607621(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_607620(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607622 = query.getOrDefault("Action")
  valid_607622 = validateParameter(valid_607622, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_607622 != nil:
    section.add "Action", valid_607622
  var valid_607623 = query.getOrDefault("Version")
  valid_607623 = validateParameter(valid_607623, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607623 != nil:
    section.add "Version", valid_607623
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607624 = header.getOrDefault("X-Amz-Signature")
  valid_607624 = validateParameter(valid_607624, JString, required = false,
                                 default = nil)
  if valid_607624 != nil:
    section.add "X-Amz-Signature", valid_607624
  var valid_607625 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607625 = validateParameter(valid_607625, JString, required = false,
                                 default = nil)
  if valid_607625 != nil:
    section.add "X-Amz-Content-Sha256", valid_607625
  var valid_607626 = header.getOrDefault("X-Amz-Date")
  valid_607626 = validateParameter(valid_607626, JString, required = false,
                                 default = nil)
  if valid_607626 != nil:
    section.add "X-Amz-Date", valid_607626
  var valid_607627 = header.getOrDefault("X-Amz-Credential")
  valid_607627 = validateParameter(valid_607627, JString, required = false,
                                 default = nil)
  if valid_607627 != nil:
    section.add "X-Amz-Credential", valid_607627
  var valid_607628 = header.getOrDefault("X-Amz-Security-Token")
  valid_607628 = validateParameter(valid_607628, JString, required = false,
                                 default = nil)
  if valid_607628 != nil:
    section.add "X-Amz-Security-Token", valid_607628
  var valid_607629 = header.getOrDefault("X-Amz-Algorithm")
  valid_607629 = validateParameter(valid_607629, JString, required = false,
                                 default = nil)
  if valid_607629 != nil:
    section.add "X-Amz-Algorithm", valid_607629
  var valid_607630 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607630 = validateParameter(valid_607630, JString, required = false,
                                 default = nil)
  if valid_607630 != nil:
    section.add "X-Amz-SignedHeaders", valid_607630
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607631 = formData.getOrDefault("MaxRecords")
  valid_607631 = validateParameter(valid_607631, JInt, required = false, default = nil)
  if valid_607631 != nil:
    section.add "MaxRecords", valid_607631
  var valid_607632 = formData.getOrDefault("Marker")
  valid_607632 = validateParameter(valid_607632, JString, required = false,
                                 default = nil)
  if valid_607632 != nil:
    section.add "Marker", valid_607632
  var valid_607633 = formData.getOrDefault("SubscriptionName")
  valid_607633 = validateParameter(valid_607633, JString, required = false,
                                 default = nil)
  if valid_607633 != nil:
    section.add "SubscriptionName", valid_607633
  var valid_607634 = formData.getOrDefault("Filters")
  valid_607634 = validateParameter(valid_607634, JArray, required = false,
                                 default = nil)
  if valid_607634 != nil:
    section.add "Filters", valid_607634
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607635: Call_PostDescribeEventSubscriptions_607619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_607635.validator(path, query, header, formData, body)
  let scheme = call_607635.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607635.url(scheme.get, call_607635.host, call_607635.base,
                         call_607635.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607635, url, valid)

proc call*(call_607636: Call_PostDescribeEventSubscriptions_607619;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607637 = newJObject()
  var formData_607638 = newJObject()
  add(formData_607638, "MaxRecords", newJInt(MaxRecords))
  add(formData_607638, "Marker", newJString(Marker))
  add(formData_607638, "SubscriptionName", newJString(SubscriptionName))
  add(query_607637, "Action", newJString(Action))
  if Filters != nil:
    formData_607638.add "Filters", Filters
  add(query_607637, "Version", newJString(Version))
  result = call_607636.call(nil, query_607637, nil, formData_607638, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_607619(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_607620, base: "/",
    url: url_PostDescribeEventSubscriptions_607621,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_607600 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEventSubscriptions_607602(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_607601(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607603 = query.getOrDefault("Marker")
  valid_607603 = validateParameter(valid_607603, JString, required = false,
                                 default = nil)
  if valid_607603 != nil:
    section.add "Marker", valid_607603
  var valid_607604 = query.getOrDefault("SubscriptionName")
  valid_607604 = validateParameter(valid_607604, JString, required = false,
                                 default = nil)
  if valid_607604 != nil:
    section.add "SubscriptionName", valid_607604
  var valid_607605 = query.getOrDefault("Action")
  valid_607605 = validateParameter(valid_607605, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_607605 != nil:
    section.add "Action", valid_607605
  var valid_607606 = query.getOrDefault("Version")
  valid_607606 = validateParameter(valid_607606, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607606 != nil:
    section.add "Version", valid_607606
  var valid_607607 = query.getOrDefault("Filters")
  valid_607607 = validateParameter(valid_607607, JArray, required = false,
                                 default = nil)
  if valid_607607 != nil:
    section.add "Filters", valid_607607
  var valid_607608 = query.getOrDefault("MaxRecords")
  valid_607608 = validateParameter(valid_607608, JInt, required = false, default = nil)
  if valid_607608 != nil:
    section.add "MaxRecords", valid_607608
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607609 = header.getOrDefault("X-Amz-Signature")
  valid_607609 = validateParameter(valid_607609, JString, required = false,
                                 default = nil)
  if valid_607609 != nil:
    section.add "X-Amz-Signature", valid_607609
  var valid_607610 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607610 = validateParameter(valid_607610, JString, required = false,
                                 default = nil)
  if valid_607610 != nil:
    section.add "X-Amz-Content-Sha256", valid_607610
  var valid_607611 = header.getOrDefault("X-Amz-Date")
  valid_607611 = validateParameter(valid_607611, JString, required = false,
                                 default = nil)
  if valid_607611 != nil:
    section.add "X-Amz-Date", valid_607611
  var valid_607612 = header.getOrDefault("X-Amz-Credential")
  valid_607612 = validateParameter(valid_607612, JString, required = false,
                                 default = nil)
  if valid_607612 != nil:
    section.add "X-Amz-Credential", valid_607612
  var valid_607613 = header.getOrDefault("X-Amz-Security-Token")
  valid_607613 = validateParameter(valid_607613, JString, required = false,
                                 default = nil)
  if valid_607613 != nil:
    section.add "X-Amz-Security-Token", valid_607613
  var valid_607614 = header.getOrDefault("X-Amz-Algorithm")
  valid_607614 = validateParameter(valid_607614, JString, required = false,
                                 default = nil)
  if valid_607614 != nil:
    section.add "X-Amz-Algorithm", valid_607614
  var valid_607615 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607615 = validateParameter(valid_607615, JString, required = false,
                                 default = nil)
  if valid_607615 != nil:
    section.add "X-Amz-SignedHeaders", valid_607615
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607616: Call_GetDescribeEventSubscriptions_607600; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_607616.validator(path, query, header, formData, body)
  let scheme = call_607616.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607616.url(scheme.get, call_607616.host, call_607616.base,
                         call_607616.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607616, url, valid)

proc call*(call_607617: Call_GetDescribeEventSubscriptions_607600;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607618 = newJObject()
  add(query_607618, "Marker", newJString(Marker))
  add(query_607618, "SubscriptionName", newJString(SubscriptionName))
  add(query_607618, "Action", newJString(Action))
  add(query_607618, "Version", newJString(Version))
  if Filters != nil:
    query_607618.add "Filters", Filters
  add(query_607618, "MaxRecords", newJInt(MaxRecords))
  result = call_607617.call(nil, query_607618, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_607600(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_607601, base: "/",
    url: url_GetDescribeEventSubscriptions_607602,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_607663 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEvents_607665(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_607664(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607666 = query.getOrDefault("Action")
  valid_607666 = validateParameter(valid_607666, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607666 != nil:
    section.add "Action", valid_607666
  var valid_607667 = query.getOrDefault("Version")
  valid_607667 = validateParameter(valid_607667, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607667 != nil:
    section.add "Version", valid_607667
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607668 = header.getOrDefault("X-Amz-Signature")
  valid_607668 = validateParameter(valid_607668, JString, required = false,
                                 default = nil)
  if valid_607668 != nil:
    section.add "X-Amz-Signature", valid_607668
  var valid_607669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "X-Amz-Content-Sha256", valid_607669
  var valid_607670 = header.getOrDefault("X-Amz-Date")
  valid_607670 = validateParameter(valid_607670, JString, required = false,
                                 default = nil)
  if valid_607670 != nil:
    section.add "X-Amz-Date", valid_607670
  var valid_607671 = header.getOrDefault("X-Amz-Credential")
  valid_607671 = validateParameter(valid_607671, JString, required = false,
                                 default = nil)
  if valid_607671 != nil:
    section.add "X-Amz-Credential", valid_607671
  var valid_607672 = header.getOrDefault("X-Amz-Security-Token")
  valid_607672 = validateParameter(valid_607672, JString, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "X-Amz-Security-Token", valid_607672
  var valid_607673 = header.getOrDefault("X-Amz-Algorithm")
  valid_607673 = validateParameter(valid_607673, JString, required = false,
                                 default = nil)
  if valid_607673 != nil:
    section.add "X-Amz-Algorithm", valid_607673
  var valid_607674 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607674 = validateParameter(valid_607674, JString, required = false,
                                 default = nil)
  if valid_607674 != nil:
    section.add "X-Amz-SignedHeaders", valid_607674
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607675 = formData.getOrDefault("MaxRecords")
  valid_607675 = validateParameter(valid_607675, JInt, required = false, default = nil)
  if valid_607675 != nil:
    section.add "MaxRecords", valid_607675
  var valid_607676 = formData.getOrDefault("Marker")
  valid_607676 = validateParameter(valid_607676, JString, required = false,
                                 default = nil)
  if valid_607676 != nil:
    section.add "Marker", valid_607676
  var valid_607677 = formData.getOrDefault("SourceIdentifier")
  valid_607677 = validateParameter(valid_607677, JString, required = false,
                                 default = nil)
  if valid_607677 != nil:
    section.add "SourceIdentifier", valid_607677
  var valid_607678 = formData.getOrDefault("SourceType")
  valid_607678 = validateParameter(valid_607678, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_607678 != nil:
    section.add "SourceType", valid_607678
  var valid_607679 = formData.getOrDefault("Duration")
  valid_607679 = validateParameter(valid_607679, JInt, required = false, default = nil)
  if valid_607679 != nil:
    section.add "Duration", valid_607679
  var valid_607680 = formData.getOrDefault("EndTime")
  valid_607680 = validateParameter(valid_607680, JString, required = false,
                                 default = nil)
  if valid_607680 != nil:
    section.add "EndTime", valid_607680
  var valid_607681 = formData.getOrDefault("StartTime")
  valid_607681 = validateParameter(valid_607681, JString, required = false,
                                 default = nil)
  if valid_607681 != nil:
    section.add "StartTime", valid_607681
  var valid_607682 = formData.getOrDefault("EventCategories")
  valid_607682 = validateParameter(valid_607682, JArray, required = false,
                                 default = nil)
  if valid_607682 != nil:
    section.add "EventCategories", valid_607682
  var valid_607683 = formData.getOrDefault("Filters")
  valid_607683 = validateParameter(valid_607683, JArray, required = false,
                                 default = nil)
  if valid_607683 != nil:
    section.add "Filters", valid_607683
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607684: Call_PostDescribeEvents_607663; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_607684.validator(path, query, header, formData, body)
  let scheme = call_607684.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607684.url(scheme.get, call_607684.host, call_607684.base,
                         call_607684.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607684, url, valid)

proc call*(call_607685: Call_PostDescribeEvents_607663; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607686 = newJObject()
  var formData_607687 = newJObject()
  add(formData_607687, "MaxRecords", newJInt(MaxRecords))
  add(formData_607687, "Marker", newJString(Marker))
  add(formData_607687, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_607687, "SourceType", newJString(SourceType))
  add(formData_607687, "Duration", newJInt(Duration))
  add(formData_607687, "EndTime", newJString(EndTime))
  add(formData_607687, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_607687.add "EventCategories", EventCategories
  add(query_607686, "Action", newJString(Action))
  if Filters != nil:
    formData_607687.add "Filters", Filters
  add(query_607686, "Version", newJString(Version))
  result = call_607685.call(nil, query_607686, nil, formData_607687, nil)

var postDescribeEvents* = Call_PostDescribeEvents_607663(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_607664, base: "/",
    url: url_PostDescribeEvents_607665, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_607639 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEvents_607641(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_607640(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607642 = query.getOrDefault("Marker")
  valid_607642 = validateParameter(valid_607642, JString, required = false,
                                 default = nil)
  if valid_607642 != nil:
    section.add "Marker", valid_607642
  var valid_607643 = query.getOrDefault("SourceType")
  valid_607643 = validateParameter(valid_607643, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_607643 != nil:
    section.add "SourceType", valid_607643
  var valid_607644 = query.getOrDefault("SourceIdentifier")
  valid_607644 = validateParameter(valid_607644, JString, required = false,
                                 default = nil)
  if valid_607644 != nil:
    section.add "SourceIdentifier", valid_607644
  var valid_607645 = query.getOrDefault("EventCategories")
  valid_607645 = validateParameter(valid_607645, JArray, required = false,
                                 default = nil)
  if valid_607645 != nil:
    section.add "EventCategories", valid_607645
  var valid_607646 = query.getOrDefault("Action")
  valid_607646 = validateParameter(valid_607646, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607646 != nil:
    section.add "Action", valid_607646
  var valid_607647 = query.getOrDefault("StartTime")
  valid_607647 = validateParameter(valid_607647, JString, required = false,
                                 default = nil)
  if valid_607647 != nil:
    section.add "StartTime", valid_607647
  var valid_607648 = query.getOrDefault("Duration")
  valid_607648 = validateParameter(valid_607648, JInt, required = false, default = nil)
  if valid_607648 != nil:
    section.add "Duration", valid_607648
  var valid_607649 = query.getOrDefault("EndTime")
  valid_607649 = validateParameter(valid_607649, JString, required = false,
                                 default = nil)
  if valid_607649 != nil:
    section.add "EndTime", valid_607649
  var valid_607650 = query.getOrDefault("Version")
  valid_607650 = validateParameter(valid_607650, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607650 != nil:
    section.add "Version", valid_607650
  var valid_607651 = query.getOrDefault("Filters")
  valid_607651 = validateParameter(valid_607651, JArray, required = false,
                                 default = nil)
  if valid_607651 != nil:
    section.add "Filters", valid_607651
  var valid_607652 = query.getOrDefault("MaxRecords")
  valid_607652 = validateParameter(valid_607652, JInt, required = false, default = nil)
  if valid_607652 != nil:
    section.add "MaxRecords", valid_607652
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607653 = header.getOrDefault("X-Amz-Signature")
  valid_607653 = validateParameter(valid_607653, JString, required = false,
                                 default = nil)
  if valid_607653 != nil:
    section.add "X-Amz-Signature", valid_607653
  var valid_607654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607654 = validateParameter(valid_607654, JString, required = false,
                                 default = nil)
  if valid_607654 != nil:
    section.add "X-Amz-Content-Sha256", valid_607654
  var valid_607655 = header.getOrDefault("X-Amz-Date")
  valid_607655 = validateParameter(valid_607655, JString, required = false,
                                 default = nil)
  if valid_607655 != nil:
    section.add "X-Amz-Date", valid_607655
  var valid_607656 = header.getOrDefault("X-Amz-Credential")
  valid_607656 = validateParameter(valid_607656, JString, required = false,
                                 default = nil)
  if valid_607656 != nil:
    section.add "X-Amz-Credential", valid_607656
  var valid_607657 = header.getOrDefault("X-Amz-Security-Token")
  valid_607657 = validateParameter(valid_607657, JString, required = false,
                                 default = nil)
  if valid_607657 != nil:
    section.add "X-Amz-Security-Token", valid_607657
  var valid_607658 = header.getOrDefault("X-Amz-Algorithm")
  valid_607658 = validateParameter(valid_607658, JString, required = false,
                                 default = nil)
  if valid_607658 != nil:
    section.add "X-Amz-Algorithm", valid_607658
  var valid_607659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607659 = validateParameter(valid_607659, JString, required = false,
                                 default = nil)
  if valid_607659 != nil:
    section.add "X-Amz-SignedHeaders", valid_607659
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607660: Call_GetDescribeEvents_607639; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_607660.validator(path, query, header, formData, body)
  let scheme = call_607660.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607660.url(scheme.get, call_607660.host, call_607660.base,
                         call_607660.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607660, url, valid)

proc call*(call_607661: Call_GetDescribeEvents_607639; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607662 = newJObject()
  add(query_607662, "Marker", newJString(Marker))
  add(query_607662, "SourceType", newJString(SourceType))
  add(query_607662, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_607662.add "EventCategories", EventCategories
  add(query_607662, "Action", newJString(Action))
  add(query_607662, "StartTime", newJString(StartTime))
  add(query_607662, "Duration", newJInt(Duration))
  add(query_607662, "EndTime", newJString(EndTime))
  add(query_607662, "Version", newJString(Version))
  if Filters != nil:
    query_607662.add "Filters", Filters
  add(query_607662, "MaxRecords", newJInt(MaxRecords))
  result = call_607661.call(nil, query_607662, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_607639(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_607640,
    base: "/", url: url_GetDescribeEvents_607641,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_607711 = ref object of OpenApiRestCall_605573
proc url_PostDescribeOrderableDBInstanceOptions_607713(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_607712(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607714 = query.getOrDefault("Action")
  valid_607714 = validateParameter(valid_607714, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_607714 != nil:
    section.add "Action", valid_607714
  var valid_607715 = query.getOrDefault("Version")
  valid_607715 = validateParameter(valid_607715, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607715 != nil:
    section.add "Version", valid_607715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607716 = header.getOrDefault("X-Amz-Signature")
  valid_607716 = validateParameter(valid_607716, JString, required = false,
                                 default = nil)
  if valid_607716 != nil:
    section.add "X-Amz-Signature", valid_607716
  var valid_607717 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607717 = validateParameter(valid_607717, JString, required = false,
                                 default = nil)
  if valid_607717 != nil:
    section.add "X-Amz-Content-Sha256", valid_607717
  var valid_607718 = header.getOrDefault("X-Amz-Date")
  valid_607718 = validateParameter(valid_607718, JString, required = false,
                                 default = nil)
  if valid_607718 != nil:
    section.add "X-Amz-Date", valid_607718
  var valid_607719 = header.getOrDefault("X-Amz-Credential")
  valid_607719 = validateParameter(valid_607719, JString, required = false,
                                 default = nil)
  if valid_607719 != nil:
    section.add "X-Amz-Credential", valid_607719
  var valid_607720 = header.getOrDefault("X-Amz-Security-Token")
  valid_607720 = validateParameter(valid_607720, JString, required = false,
                                 default = nil)
  if valid_607720 != nil:
    section.add "X-Amz-Security-Token", valid_607720
  var valid_607721 = header.getOrDefault("X-Amz-Algorithm")
  valid_607721 = validateParameter(valid_607721, JString, required = false,
                                 default = nil)
  if valid_607721 != nil:
    section.add "X-Amz-Algorithm", valid_607721
  var valid_607722 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607722 = validateParameter(valid_607722, JString, required = false,
                                 default = nil)
  if valid_607722 != nil:
    section.add "X-Amz-SignedHeaders", valid_607722
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607723 = formData.getOrDefault("DBInstanceClass")
  valid_607723 = validateParameter(valid_607723, JString, required = false,
                                 default = nil)
  if valid_607723 != nil:
    section.add "DBInstanceClass", valid_607723
  var valid_607724 = formData.getOrDefault("MaxRecords")
  valid_607724 = validateParameter(valid_607724, JInt, required = false, default = nil)
  if valid_607724 != nil:
    section.add "MaxRecords", valid_607724
  var valid_607725 = formData.getOrDefault("EngineVersion")
  valid_607725 = validateParameter(valid_607725, JString, required = false,
                                 default = nil)
  if valid_607725 != nil:
    section.add "EngineVersion", valid_607725
  var valid_607726 = formData.getOrDefault("Marker")
  valid_607726 = validateParameter(valid_607726, JString, required = false,
                                 default = nil)
  if valid_607726 != nil:
    section.add "Marker", valid_607726
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_607727 = formData.getOrDefault("Engine")
  valid_607727 = validateParameter(valid_607727, JString, required = true,
                                 default = nil)
  if valid_607727 != nil:
    section.add "Engine", valid_607727
  var valid_607728 = formData.getOrDefault("Vpc")
  valid_607728 = validateParameter(valid_607728, JBool, required = false, default = nil)
  if valid_607728 != nil:
    section.add "Vpc", valid_607728
  var valid_607729 = formData.getOrDefault("LicenseModel")
  valid_607729 = validateParameter(valid_607729, JString, required = false,
                                 default = nil)
  if valid_607729 != nil:
    section.add "LicenseModel", valid_607729
  var valid_607730 = formData.getOrDefault("Filters")
  valid_607730 = validateParameter(valid_607730, JArray, required = false,
                                 default = nil)
  if valid_607730 != nil:
    section.add "Filters", valid_607730
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607731: Call_PostDescribeOrderableDBInstanceOptions_607711;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_607731.validator(path, query, header, formData, body)
  let scheme = call_607731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607731.url(scheme.get, call_607731.host, call_607731.base,
                         call_607731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607731, url, valid)

proc call*(call_607732: Call_PostDescribeOrderableDBInstanceOptions_607711;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607733 = newJObject()
  var formData_607734 = newJObject()
  add(formData_607734, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607734, "MaxRecords", newJInt(MaxRecords))
  add(formData_607734, "EngineVersion", newJString(EngineVersion))
  add(formData_607734, "Marker", newJString(Marker))
  add(formData_607734, "Engine", newJString(Engine))
  add(formData_607734, "Vpc", newJBool(Vpc))
  add(query_607733, "Action", newJString(Action))
  add(formData_607734, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_607734.add "Filters", Filters
  add(query_607733, "Version", newJString(Version))
  result = call_607732.call(nil, query_607733, nil, formData_607734, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_607711(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_607712, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_607713,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_607688 = ref object of OpenApiRestCall_605573
proc url_GetDescribeOrderableDBInstanceOptions_607690(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_607689(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607691 = query.getOrDefault("Marker")
  valid_607691 = validateParameter(valid_607691, JString, required = false,
                                 default = nil)
  if valid_607691 != nil:
    section.add "Marker", valid_607691
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_607692 = query.getOrDefault("Engine")
  valid_607692 = validateParameter(valid_607692, JString, required = true,
                                 default = nil)
  if valid_607692 != nil:
    section.add "Engine", valid_607692
  var valid_607693 = query.getOrDefault("LicenseModel")
  valid_607693 = validateParameter(valid_607693, JString, required = false,
                                 default = nil)
  if valid_607693 != nil:
    section.add "LicenseModel", valid_607693
  var valid_607694 = query.getOrDefault("Vpc")
  valid_607694 = validateParameter(valid_607694, JBool, required = false, default = nil)
  if valid_607694 != nil:
    section.add "Vpc", valid_607694
  var valid_607695 = query.getOrDefault("EngineVersion")
  valid_607695 = validateParameter(valid_607695, JString, required = false,
                                 default = nil)
  if valid_607695 != nil:
    section.add "EngineVersion", valid_607695
  var valid_607696 = query.getOrDefault("Action")
  valid_607696 = validateParameter(valid_607696, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_607696 != nil:
    section.add "Action", valid_607696
  var valid_607697 = query.getOrDefault("Version")
  valid_607697 = validateParameter(valid_607697, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607697 != nil:
    section.add "Version", valid_607697
  var valid_607698 = query.getOrDefault("DBInstanceClass")
  valid_607698 = validateParameter(valid_607698, JString, required = false,
                                 default = nil)
  if valid_607698 != nil:
    section.add "DBInstanceClass", valid_607698
  var valid_607699 = query.getOrDefault("Filters")
  valid_607699 = validateParameter(valid_607699, JArray, required = false,
                                 default = nil)
  if valid_607699 != nil:
    section.add "Filters", valid_607699
  var valid_607700 = query.getOrDefault("MaxRecords")
  valid_607700 = validateParameter(valid_607700, JInt, required = false, default = nil)
  if valid_607700 != nil:
    section.add "MaxRecords", valid_607700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607701 = header.getOrDefault("X-Amz-Signature")
  valid_607701 = validateParameter(valid_607701, JString, required = false,
                                 default = nil)
  if valid_607701 != nil:
    section.add "X-Amz-Signature", valid_607701
  var valid_607702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "X-Amz-Content-Sha256", valid_607702
  var valid_607703 = header.getOrDefault("X-Amz-Date")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "X-Amz-Date", valid_607703
  var valid_607704 = header.getOrDefault("X-Amz-Credential")
  valid_607704 = validateParameter(valid_607704, JString, required = false,
                                 default = nil)
  if valid_607704 != nil:
    section.add "X-Amz-Credential", valid_607704
  var valid_607705 = header.getOrDefault("X-Amz-Security-Token")
  valid_607705 = validateParameter(valid_607705, JString, required = false,
                                 default = nil)
  if valid_607705 != nil:
    section.add "X-Amz-Security-Token", valid_607705
  var valid_607706 = header.getOrDefault("X-Amz-Algorithm")
  valid_607706 = validateParameter(valid_607706, JString, required = false,
                                 default = nil)
  if valid_607706 != nil:
    section.add "X-Amz-Algorithm", valid_607706
  var valid_607707 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607707 = validateParameter(valid_607707, JString, required = false,
                                 default = nil)
  if valid_607707 != nil:
    section.add "X-Amz-SignedHeaders", valid_607707
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607708: Call_GetDescribeOrderableDBInstanceOptions_607688;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_607708.validator(path, query, header, formData, body)
  let scheme = call_607708.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607708.url(scheme.get, call_607708.host, call_607708.base,
                         call_607708.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607708, url, valid)

proc call*(call_607709: Call_GetDescribeOrderableDBInstanceOptions_607688;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607710 = newJObject()
  add(query_607710, "Marker", newJString(Marker))
  add(query_607710, "Engine", newJString(Engine))
  add(query_607710, "LicenseModel", newJString(LicenseModel))
  add(query_607710, "Vpc", newJBool(Vpc))
  add(query_607710, "EngineVersion", newJString(EngineVersion))
  add(query_607710, "Action", newJString(Action))
  add(query_607710, "Version", newJString(Version))
  add(query_607710, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_607710.add "Filters", Filters
  add(query_607710, "MaxRecords", newJInt(MaxRecords))
  result = call_607709.call(nil, query_607710, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_607688(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_607689, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_607690,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_607754 = ref object of OpenApiRestCall_605573
proc url_PostDescribePendingMaintenanceActions_607756(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_607755(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607757 = query.getOrDefault("Action")
  valid_607757 = validateParameter(valid_607757, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_607757 != nil:
    section.add "Action", valid_607757
  var valid_607758 = query.getOrDefault("Version")
  valid_607758 = validateParameter(valid_607758, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607758 != nil:
    section.add "Version", valid_607758
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607759 = header.getOrDefault("X-Amz-Signature")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-Signature", valid_607759
  var valid_607760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607760 = validateParameter(valid_607760, JString, required = false,
                                 default = nil)
  if valid_607760 != nil:
    section.add "X-Amz-Content-Sha256", valid_607760
  var valid_607761 = header.getOrDefault("X-Amz-Date")
  valid_607761 = validateParameter(valid_607761, JString, required = false,
                                 default = nil)
  if valid_607761 != nil:
    section.add "X-Amz-Date", valid_607761
  var valid_607762 = header.getOrDefault("X-Amz-Credential")
  valid_607762 = validateParameter(valid_607762, JString, required = false,
                                 default = nil)
  if valid_607762 != nil:
    section.add "X-Amz-Credential", valid_607762
  var valid_607763 = header.getOrDefault("X-Amz-Security-Token")
  valid_607763 = validateParameter(valid_607763, JString, required = false,
                                 default = nil)
  if valid_607763 != nil:
    section.add "X-Amz-Security-Token", valid_607763
  var valid_607764 = header.getOrDefault("X-Amz-Algorithm")
  valid_607764 = validateParameter(valid_607764, JString, required = false,
                                 default = nil)
  if valid_607764 != nil:
    section.add "X-Amz-Algorithm", valid_607764
  var valid_607765 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607765 = validateParameter(valid_607765, JString, required = false,
                                 default = nil)
  if valid_607765 != nil:
    section.add "X-Amz-SignedHeaders", valid_607765
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_607766 = formData.getOrDefault("MaxRecords")
  valid_607766 = validateParameter(valid_607766, JInt, required = false, default = nil)
  if valid_607766 != nil:
    section.add "MaxRecords", valid_607766
  var valid_607767 = formData.getOrDefault("Marker")
  valid_607767 = validateParameter(valid_607767, JString, required = false,
                                 default = nil)
  if valid_607767 != nil:
    section.add "Marker", valid_607767
  var valid_607768 = formData.getOrDefault("ResourceIdentifier")
  valid_607768 = validateParameter(valid_607768, JString, required = false,
                                 default = nil)
  if valid_607768 != nil:
    section.add "ResourceIdentifier", valid_607768
  var valid_607769 = formData.getOrDefault("Filters")
  valid_607769 = validateParameter(valid_607769, JArray, required = false,
                                 default = nil)
  if valid_607769 != nil:
    section.add "Filters", valid_607769
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607770: Call_PostDescribePendingMaintenanceActions_607754;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_607770.validator(path, query, header, formData, body)
  let scheme = call_607770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607770.url(scheme.get, call_607770.host, call_607770.base,
                         call_607770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607770, url, valid)

proc call*(call_607771: Call_PostDescribePendingMaintenanceActions_607754;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_607772 = newJObject()
  var formData_607773 = newJObject()
  add(formData_607773, "MaxRecords", newJInt(MaxRecords))
  add(formData_607773, "Marker", newJString(Marker))
  add(formData_607773, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_607772, "Action", newJString(Action))
  if Filters != nil:
    formData_607773.add "Filters", Filters
  add(query_607772, "Version", newJString(Version))
  result = call_607771.call(nil, query_607772, nil, formData_607773, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_607754(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_607755, base: "/",
    url: url_PostDescribePendingMaintenanceActions_607756,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_607735 = ref object of OpenApiRestCall_605573
proc url_GetDescribePendingMaintenanceActions_607737(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_607736(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607738 = query.getOrDefault("ResourceIdentifier")
  valid_607738 = validateParameter(valid_607738, JString, required = false,
                                 default = nil)
  if valid_607738 != nil:
    section.add "ResourceIdentifier", valid_607738
  var valid_607739 = query.getOrDefault("Marker")
  valid_607739 = validateParameter(valid_607739, JString, required = false,
                                 default = nil)
  if valid_607739 != nil:
    section.add "Marker", valid_607739
  var valid_607740 = query.getOrDefault("Action")
  valid_607740 = validateParameter(valid_607740, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_607740 != nil:
    section.add "Action", valid_607740
  var valid_607741 = query.getOrDefault("Version")
  valid_607741 = validateParameter(valid_607741, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607741 != nil:
    section.add "Version", valid_607741
  var valid_607742 = query.getOrDefault("Filters")
  valid_607742 = validateParameter(valid_607742, JArray, required = false,
                                 default = nil)
  if valid_607742 != nil:
    section.add "Filters", valid_607742
  var valid_607743 = query.getOrDefault("MaxRecords")
  valid_607743 = validateParameter(valid_607743, JInt, required = false, default = nil)
  if valid_607743 != nil:
    section.add "MaxRecords", valid_607743
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607744 = header.getOrDefault("X-Amz-Signature")
  valid_607744 = validateParameter(valid_607744, JString, required = false,
                                 default = nil)
  if valid_607744 != nil:
    section.add "X-Amz-Signature", valid_607744
  var valid_607745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607745 = validateParameter(valid_607745, JString, required = false,
                                 default = nil)
  if valid_607745 != nil:
    section.add "X-Amz-Content-Sha256", valid_607745
  var valid_607746 = header.getOrDefault("X-Amz-Date")
  valid_607746 = validateParameter(valid_607746, JString, required = false,
                                 default = nil)
  if valid_607746 != nil:
    section.add "X-Amz-Date", valid_607746
  var valid_607747 = header.getOrDefault("X-Amz-Credential")
  valid_607747 = validateParameter(valid_607747, JString, required = false,
                                 default = nil)
  if valid_607747 != nil:
    section.add "X-Amz-Credential", valid_607747
  var valid_607748 = header.getOrDefault("X-Amz-Security-Token")
  valid_607748 = validateParameter(valid_607748, JString, required = false,
                                 default = nil)
  if valid_607748 != nil:
    section.add "X-Amz-Security-Token", valid_607748
  var valid_607749 = header.getOrDefault("X-Amz-Algorithm")
  valid_607749 = validateParameter(valid_607749, JString, required = false,
                                 default = nil)
  if valid_607749 != nil:
    section.add "X-Amz-Algorithm", valid_607749
  var valid_607750 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607750 = validateParameter(valid_607750, JString, required = false,
                                 default = nil)
  if valid_607750 != nil:
    section.add "X-Amz-SignedHeaders", valid_607750
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607751: Call_GetDescribePendingMaintenanceActions_607735;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_607751.validator(path, query, header, formData, body)
  let scheme = call_607751.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607751.url(scheme.get, call_607751.host, call_607751.base,
                         call_607751.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607751, url, valid)

proc call*(call_607752: Call_GetDescribePendingMaintenanceActions_607735;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607753 = newJObject()
  add(query_607753, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_607753, "Marker", newJString(Marker))
  add(query_607753, "Action", newJString(Action))
  add(query_607753, "Version", newJString(Version))
  if Filters != nil:
    query_607753.add "Filters", Filters
  add(query_607753, "MaxRecords", newJInt(MaxRecords))
  result = call_607752.call(nil, query_607753, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_607735(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_607736, base: "/",
    url: url_GetDescribePendingMaintenanceActions_607737,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_607790 = ref object of OpenApiRestCall_605573
proc url_PostDescribeValidDBInstanceModifications_607792(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_607791(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607793 = query.getOrDefault("Action")
  valid_607793 = validateParameter(valid_607793, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_607793 != nil:
    section.add "Action", valid_607793
  var valid_607794 = query.getOrDefault("Version")
  valid_607794 = validateParameter(valid_607794, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607794 != nil:
    section.add "Version", valid_607794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607795 = header.getOrDefault("X-Amz-Signature")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "X-Amz-Signature", valid_607795
  var valid_607796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "X-Amz-Content-Sha256", valid_607796
  var valid_607797 = header.getOrDefault("X-Amz-Date")
  valid_607797 = validateParameter(valid_607797, JString, required = false,
                                 default = nil)
  if valid_607797 != nil:
    section.add "X-Amz-Date", valid_607797
  var valid_607798 = header.getOrDefault("X-Amz-Credential")
  valid_607798 = validateParameter(valid_607798, JString, required = false,
                                 default = nil)
  if valid_607798 != nil:
    section.add "X-Amz-Credential", valid_607798
  var valid_607799 = header.getOrDefault("X-Amz-Security-Token")
  valid_607799 = validateParameter(valid_607799, JString, required = false,
                                 default = nil)
  if valid_607799 != nil:
    section.add "X-Amz-Security-Token", valid_607799
  var valid_607800 = header.getOrDefault("X-Amz-Algorithm")
  valid_607800 = validateParameter(valid_607800, JString, required = false,
                                 default = nil)
  if valid_607800 != nil:
    section.add "X-Amz-Algorithm", valid_607800
  var valid_607801 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607801 = validateParameter(valid_607801, JString, required = false,
                                 default = nil)
  if valid_607801 != nil:
    section.add "X-Amz-SignedHeaders", valid_607801
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607802 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607802 = validateParameter(valid_607802, JString, required = true,
                                 default = nil)
  if valid_607802 != nil:
    section.add "DBInstanceIdentifier", valid_607802
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607803: Call_PostDescribeValidDBInstanceModifications_607790;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_607803.validator(path, query, header, formData, body)
  let scheme = call_607803.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607803.url(scheme.get, call_607803.host, call_607803.base,
                         call_607803.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607803, url, valid)

proc call*(call_607804: Call_PostDescribeValidDBInstanceModifications_607790;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607805 = newJObject()
  var formData_607806 = newJObject()
  add(formData_607806, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607805, "Action", newJString(Action))
  add(query_607805, "Version", newJString(Version))
  result = call_607804.call(nil, query_607805, nil, formData_607806, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_607790(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_607791,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_607792,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_607774 = ref object of OpenApiRestCall_605573
proc url_GetDescribeValidDBInstanceModifications_607776(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_607775(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607777 = query.getOrDefault("DBInstanceIdentifier")
  valid_607777 = validateParameter(valid_607777, JString, required = true,
                                 default = nil)
  if valid_607777 != nil:
    section.add "DBInstanceIdentifier", valid_607777
  var valid_607778 = query.getOrDefault("Action")
  valid_607778 = validateParameter(valid_607778, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_607778 != nil:
    section.add "Action", valid_607778
  var valid_607779 = query.getOrDefault("Version")
  valid_607779 = validateParameter(valid_607779, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607779 != nil:
    section.add "Version", valid_607779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607780 = header.getOrDefault("X-Amz-Signature")
  valid_607780 = validateParameter(valid_607780, JString, required = false,
                                 default = nil)
  if valid_607780 != nil:
    section.add "X-Amz-Signature", valid_607780
  var valid_607781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607781 = validateParameter(valid_607781, JString, required = false,
                                 default = nil)
  if valid_607781 != nil:
    section.add "X-Amz-Content-Sha256", valid_607781
  var valid_607782 = header.getOrDefault("X-Amz-Date")
  valid_607782 = validateParameter(valid_607782, JString, required = false,
                                 default = nil)
  if valid_607782 != nil:
    section.add "X-Amz-Date", valid_607782
  var valid_607783 = header.getOrDefault("X-Amz-Credential")
  valid_607783 = validateParameter(valid_607783, JString, required = false,
                                 default = nil)
  if valid_607783 != nil:
    section.add "X-Amz-Credential", valid_607783
  var valid_607784 = header.getOrDefault("X-Amz-Security-Token")
  valid_607784 = validateParameter(valid_607784, JString, required = false,
                                 default = nil)
  if valid_607784 != nil:
    section.add "X-Amz-Security-Token", valid_607784
  var valid_607785 = header.getOrDefault("X-Amz-Algorithm")
  valid_607785 = validateParameter(valid_607785, JString, required = false,
                                 default = nil)
  if valid_607785 != nil:
    section.add "X-Amz-Algorithm", valid_607785
  var valid_607786 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607786 = validateParameter(valid_607786, JString, required = false,
                                 default = nil)
  if valid_607786 != nil:
    section.add "X-Amz-SignedHeaders", valid_607786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607787: Call_GetDescribeValidDBInstanceModifications_607774;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_607787.validator(path, query, header, formData, body)
  let scheme = call_607787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607787.url(scheme.get, call_607787.host, call_607787.base,
                         call_607787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607787, url, valid)

proc call*(call_607788: Call_GetDescribeValidDBInstanceModifications_607774;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607789 = newJObject()
  add(query_607789, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607789, "Action", newJString(Action))
  add(query_607789, "Version", newJString(Version))
  result = call_607788.call(nil, query_607789, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_607774(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_607775, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_607776,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_607824 = ref object of OpenApiRestCall_605573
proc url_PostFailoverDBCluster_607826(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_607825(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607827 = query.getOrDefault("Action")
  valid_607827 = validateParameter(valid_607827, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_607827 != nil:
    section.add "Action", valid_607827
  var valid_607828 = query.getOrDefault("Version")
  valid_607828 = validateParameter(valid_607828, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607828 != nil:
    section.add "Version", valid_607828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607829 = header.getOrDefault("X-Amz-Signature")
  valid_607829 = validateParameter(valid_607829, JString, required = false,
                                 default = nil)
  if valid_607829 != nil:
    section.add "X-Amz-Signature", valid_607829
  var valid_607830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607830 = validateParameter(valid_607830, JString, required = false,
                                 default = nil)
  if valid_607830 != nil:
    section.add "X-Amz-Content-Sha256", valid_607830
  var valid_607831 = header.getOrDefault("X-Amz-Date")
  valid_607831 = validateParameter(valid_607831, JString, required = false,
                                 default = nil)
  if valid_607831 != nil:
    section.add "X-Amz-Date", valid_607831
  var valid_607832 = header.getOrDefault("X-Amz-Credential")
  valid_607832 = validateParameter(valid_607832, JString, required = false,
                                 default = nil)
  if valid_607832 != nil:
    section.add "X-Amz-Credential", valid_607832
  var valid_607833 = header.getOrDefault("X-Amz-Security-Token")
  valid_607833 = validateParameter(valid_607833, JString, required = false,
                                 default = nil)
  if valid_607833 != nil:
    section.add "X-Amz-Security-Token", valid_607833
  var valid_607834 = header.getOrDefault("X-Amz-Algorithm")
  valid_607834 = validateParameter(valid_607834, JString, required = false,
                                 default = nil)
  if valid_607834 != nil:
    section.add "X-Amz-Algorithm", valid_607834
  var valid_607835 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607835 = validateParameter(valid_607835, JString, required = false,
                                 default = nil)
  if valid_607835 != nil:
    section.add "X-Amz-SignedHeaders", valid_607835
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_607836 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_607836 = validateParameter(valid_607836, JString, required = false,
                                 default = nil)
  if valid_607836 != nil:
    section.add "TargetDBInstanceIdentifier", valid_607836
  var valid_607837 = formData.getOrDefault("DBClusterIdentifier")
  valid_607837 = validateParameter(valid_607837, JString, required = false,
                                 default = nil)
  if valid_607837 != nil:
    section.add "DBClusterIdentifier", valid_607837
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607838: Call_PostFailoverDBCluster_607824; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_607838.validator(path, query, header, formData, body)
  let scheme = call_607838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607838.url(scheme.get, call_607838.host, call_607838.base,
                         call_607838.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607838, url, valid)

proc call*(call_607839: Call_PostFailoverDBCluster_607824;
          Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBClusterIdentifier: string = ""): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_607840 = newJObject()
  var formData_607841 = newJObject()
  add(query_607840, "Action", newJString(Action))
  add(formData_607841, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_607840, "Version", newJString(Version))
  add(formData_607841, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607839.call(nil, query_607840, nil, formData_607841, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_607824(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_607825, base: "/",
    url: url_PostFailoverDBCluster_607826, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_607807 = ref object of OpenApiRestCall_605573
proc url_GetFailoverDBCluster_607809(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_607808(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607810 = query.getOrDefault("DBClusterIdentifier")
  valid_607810 = validateParameter(valid_607810, JString, required = false,
                                 default = nil)
  if valid_607810 != nil:
    section.add "DBClusterIdentifier", valid_607810
  var valid_607811 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_607811 = validateParameter(valid_607811, JString, required = false,
                                 default = nil)
  if valid_607811 != nil:
    section.add "TargetDBInstanceIdentifier", valid_607811
  var valid_607812 = query.getOrDefault("Action")
  valid_607812 = validateParameter(valid_607812, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_607812 != nil:
    section.add "Action", valid_607812
  var valid_607813 = query.getOrDefault("Version")
  valid_607813 = validateParameter(valid_607813, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607813 != nil:
    section.add "Version", valid_607813
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607814 = header.getOrDefault("X-Amz-Signature")
  valid_607814 = validateParameter(valid_607814, JString, required = false,
                                 default = nil)
  if valid_607814 != nil:
    section.add "X-Amz-Signature", valid_607814
  var valid_607815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607815 = validateParameter(valid_607815, JString, required = false,
                                 default = nil)
  if valid_607815 != nil:
    section.add "X-Amz-Content-Sha256", valid_607815
  var valid_607816 = header.getOrDefault("X-Amz-Date")
  valid_607816 = validateParameter(valid_607816, JString, required = false,
                                 default = nil)
  if valid_607816 != nil:
    section.add "X-Amz-Date", valid_607816
  var valid_607817 = header.getOrDefault("X-Amz-Credential")
  valid_607817 = validateParameter(valid_607817, JString, required = false,
                                 default = nil)
  if valid_607817 != nil:
    section.add "X-Amz-Credential", valid_607817
  var valid_607818 = header.getOrDefault("X-Amz-Security-Token")
  valid_607818 = validateParameter(valid_607818, JString, required = false,
                                 default = nil)
  if valid_607818 != nil:
    section.add "X-Amz-Security-Token", valid_607818
  var valid_607819 = header.getOrDefault("X-Amz-Algorithm")
  valid_607819 = validateParameter(valid_607819, JString, required = false,
                                 default = nil)
  if valid_607819 != nil:
    section.add "X-Amz-Algorithm", valid_607819
  var valid_607820 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607820 = validateParameter(valid_607820, JString, required = false,
                                 default = nil)
  if valid_607820 != nil:
    section.add "X-Amz-SignedHeaders", valid_607820
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607821: Call_GetFailoverDBCluster_607807; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_607821.validator(path, query, header, formData, body)
  let scheme = call_607821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607821.url(scheme.get, call_607821.host, call_607821.base,
                         call_607821.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607821, url, valid)

proc call*(call_607822: Call_GetFailoverDBCluster_607807;
          DBClusterIdentifier: string = ""; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607823 = newJObject()
  add(query_607823, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607823, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_607823, "Action", newJString(Action))
  add(query_607823, "Version", newJString(Version))
  result = call_607822.call(nil, query_607823, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_607807(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_607808, base: "/",
    url: url_GetFailoverDBCluster_607809, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_607859 = ref object of OpenApiRestCall_605573
proc url_PostListTagsForResource_607861(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_607860(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607862 = query.getOrDefault("Action")
  valid_607862 = validateParameter(valid_607862, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_607862 != nil:
    section.add "Action", valid_607862
  var valid_607863 = query.getOrDefault("Version")
  valid_607863 = validateParameter(valid_607863, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607863 != nil:
    section.add "Version", valid_607863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607864 = header.getOrDefault("X-Amz-Signature")
  valid_607864 = validateParameter(valid_607864, JString, required = false,
                                 default = nil)
  if valid_607864 != nil:
    section.add "X-Amz-Signature", valid_607864
  var valid_607865 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607865 = validateParameter(valid_607865, JString, required = false,
                                 default = nil)
  if valid_607865 != nil:
    section.add "X-Amz-Content-Sha256", valid_607865
  var valid_607866 = header.getOrDefault("X-Amz-Date")
  valid_607866 = validateParameter(valid_607866, JString, required = false,
                                 default = nil)
  if valid_607866 != nil:
    section.add "X-Amz-Date", valid_607866
  var valid_607867 = header.getOrDefault("X-Amz-Credential")
  valid_607867 = validateParameter(valid_607867, JString, required = false,
                                 default = nil)
  if valid_607867 != nil:
    section.add "X-Amz-Credential", valid_607867
  var valid_607868 = header.getOrDefault("X-Amz-Security-Token")
  valid_607868 = validateParameter(valid_607868, JString, required = false,
                                 default = nil)
  if valid_607868 != nil:
    section.add "X-Amz-Security-Token", valid_607868
  var valid_607869 = header.getOrDefault("X-Amz-Algorithm")
  valid_607869 = validateParameter(valid_607869, JString, required = false,
                                 default = nil)
  if valid_607869 != nil:
    section.add "X-Amz-Algorithm", valid_607869
  var valid_607870 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607870 = validateParameter(valid_607870, JString, required = false,
                                 default = nil)
  if valid_607870 != nil:
    section.add "X-Amz-SignedHeaders", valid_607870
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  var valid_607871 = formData.getOrDefault("Filters")
  valid_607871 = validateParameter(valid_607871, JArray, required = false,
                                 default = nil)
  if valid_607871 != nil:
    section.add "Filters", valid_607871
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_607872 = formData.getOrDefault("ResourceName")
  valid_607872 = validateParameter(valid_607872, JString, required = true,
                                 default = nil)
  if valid_607872 != nil:
    section.add "ResourceName", valid_607872
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607873: Call_PostListTagsForResource_607859; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_607873.validator(path, query, header, formData, body)
  let scheme = call_607873.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607873.url(scheme.get, call_607873.host, call_607873.base,
                         call_607873.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607873, url, valid)

proc call*(call_607874: Call_PostListTagsForResource_607859; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_607875 = newJObject()
  var formData_607876 = newJObject()
  add(query_607875, "Action", newJString(Action))
  if Filters != nil:
    formData_607876.add "Filters", Filters
  add(query_607875, "Version", newJString(Version))
  add(formData_607876, "ResourceName", newJString(ResourceName))
  result = call_607874.call(nil, query_607875, nil, formData_607876, nil)

var postListTagsForResource* = Call_PostListTagsForResource_607859(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_607860, base: "/",
    url: url_PostListTagsForResource_607861, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_607842 = ref object of OpenApiRestCall_605573
proc url_GetListTagsForResource_607844(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_607843(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_607845 = query.getOrDefault("ResourceName")
  valid_607845 = validateParameter(valid_607845, JString, required = true,
                                 default = nil)
  if valid_607845 != nil:
    section.add "ResourceName", valid_607845
  var valid_607846 = query.getOrDefault("Action")
  valid_607846 = validateParameter(valid_607846, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_607846 != nil:
    section.add "Action", valid_607846
  var valid_607847 = query.getOrDefault("Version")
  valid_607847 = validateParameter(valid_607847, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607847 != nil:
    section.add "Version", valid_607847
  var valid_607848 = query.getOrDefault("Filters")
  valid_607848 = validateParameter(valid_607848, JArray, required = false,
                                 default = nil)
  if valid_607848 != nil:
    section.add "Filters", valid_607848
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607849 = header.getOrDefault("X-Amz-Signature")
  valid_607849 = validateParameter(valid_607849, JString, required = false,
                                 default = nil)
  if valid_607849 != nil:
    section.add "X-Amz-Signature", valid_607849
  var valid_607850 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607850 = validateParameter(valid_607850, JString, required = false,
                                 default = nil)
  if valid_607850 != nil:
    section.add "X-Amz-Content-Sha256", valid_607850
  var valid_607851 = header.getOrDefault("X-Amz-Date")
  valid_607851 = validateParameter(valid_607851, JString, required = false,
                                 default = nil)
  if valid_607851 != nil:
    section.add "X-Amz-Date", valid_607851
  var valid_607852 = header.getOrDefault("X-Amz-Credential")
  valid_607852 = validateParameter(valid_607852, JString, required = false,
                                 default = nil)
  if valid_607852 != nil:
    section.add "X-Amz-Credential", valid_607852
  var valid_607853 = header.getOrDefault("X-Amz-Security-Token")
  valid_607853 = validateParameter(valid_607853, JString, required = false,
                                 default = nil)
  if valid_607853 != nil:
    section.add "X-Amz-Security-Token", valid_607853
  var valid_607854 = header.getOrDefault("X-Amz-Algorithm")
  valid_607854 = validateParameter(valid_607854, JString, required = false,
                                 default = nil)
  if valid_607854 != nil:
    section.add "X-Amz-Algorithm", valid_607854
  var valid_607855 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607855 = validateParameter(valid_607855, JString, required = false,
                                 default = nil)
  if valid_607855 != nil:
    section.add "X-Amz-SignedHeaders", valid_607855
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607856: Call_GetListTagsForResource_607842; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_607856.validator(path, query, header, formData, body)
  let scheme = call_607856.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607856.url(scheme.get, call_607856.host, call_607856.base,
                         call_607856.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607856, url, valid)

proc call*(call_607857: Call_GetListTagsForResource_607842; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_607858 = newJObject()
  add(query_607858, "ResourceName", newJString(ResourceName))
  add(query_607858, "Action", newJString(Action))
  add(query_607858, "Version", newJString(Version))
  if Filters != nil:
    query_607858.add "Filters", Filters
  result = call_607857.call(nil, query_607858, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_607842(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_607843, base: "/",
    url: url_GetListTagsForResource_607844, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_607908 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBCluster_607910(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_607909(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607911 = query.getOrDefault("Action")
  valid_607911 = validateParameter(valid_607911, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_607911 != nil:
    section.add "Action", valid_607911
  var valid_607912 = query.getOrDefault("Version")
  valid_607912 = validateParameter(valid_607912, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607912 != nil:
    section.add "Version", valid_607912
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607913 = header.getOrDefault("X-Amz-Signature")
  valid_607913 = validateParameter(valid_607913, JString, required = false,
                                 default = nil)
  if valid_607913 != nil:
    section.add "X-Amz-Signature", valid_607913
  var valid_607914 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607914 = validateParameter(valid_607914, JString, required = false,
                                 default = nil)
  if valid_607914 != nil:
    section.add "X-Amz-Content-Sha256", valid_607914
  var valid_607915 = header.getOrDefault("X-Amz-Date")
  valid_607915 = validateParameter(valid_607915, JString, required = false,
                                 default = nil)
  if valid_607915 != nil:
    section.add "X-Amz-Date", valid_607915
  var valid_607916 = header.getOrDefault("X-Amz-Credential")
  valid_607916 = validateParameter(valid_607916, JString, required = false,
                                 default = nil)
  if valid_607916 != nil:
    section.add "X-Amz-Credential", valid_607916
  var valid_607917 = header.getOrDefault("X-Amz-Security-Token")
  valid_607917 = validateParameter(valid_607917, JString, required = false,
                                 default = nil)
  if valid_607917 != nil:
    section.add "X-Amz-Security-Token", valid_607917
  var valid_607918 = header.getOrDefault("X-Amz-Algorithm")
  valid_607918 = validateParameter(valid_607918, JString, required = false,
                                 default = nil)
  if valid_607918 != nil:
    section.add "X-Amz-Algorithm", valid_607918
  var valid_607919 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607919 = validateParameter(valid_607919, JString, required = false,
                                 default = nil)
  if valid_607919 != nil:
    section.add "X-Amz-SignedHeaders", valid_607919
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_607920 = formData.getOrDefault("Port")
  valid_607920 = validateParameter(valid_607920, JInt, required = false, default = nil)
  if valid_607920 != nil:
    section.add "Port", valid_607920
  var valid_607921 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_607921 = validateParameter(valid_607921, JString, required = false,
                                 default = nil)
  if valid_607921 != nil:
    section.add "PreferredMaintenanceWindow", valid_607921
  var valid_607922 = formData.getOrDefault("PreferredBackupWindow")
  valid_607922 = validateParameter(valid_607922, JString, required = false,
                                 default = nil)
  if valid_607922 != nil:
    section.add "PreferredBackupWindow", valid_607922
  var valid_607923 = formData.getOrDefault("MasterUserPassword")
  valid_607923 = validateParameter(valid_607923, JString, required = false,
                                 default = nil)
  if valid_607923 != nil:
    section.add "MasterUserPassword", valid_607923
  var valid_607924 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_607924 = validateParameter(valid_607924, JArray, required = false,
                                 default = nil)
  if valid_607924 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_607924
  var valid_607925 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_607925 = validateParameter(valid_607925, JArray, required = false,
                                 default = nil)
  if valid_607925 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_607925
  var valid_607926 = formData.getOrDefault("EngineVersion")
  valid_607926 = validateParameter(valid_607926, JString, required = false,
                                 default = nil)
  if valid_607926 != nil:
    section.add "EngineVersion", valid_607926
  var valid_607927 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607927 = validateParameter(valid_607927, JArray, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "VpcSecurityGroupIds", valid_607927
  var valid_607928 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607928 = validateParameter(valid_607928, JBool, required = false, default = nil)
  if valid_607928 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607928
  var valid_607929 = formData.getOrDefault("BackupRetentionPeriod")
  valid_607929 = validateParameter(valid_607929, JInt, required = false, default = nil)
  if valid_607929 != nil:
    section.add "BackupRetentionPeriod", valid_607929
  var valid_607930 = formData.getOrDefault("ApplyImmediately")
  valid_607930 = validateParameter(valid_607930, JBool, required = false, default = nil)
  if valid_607930 != nil:
    section.add "ApplyImmediately", valid_607930
  var valid_607931 = formData.getOrDefault("OptionGroupName")
  valid_607931 = validateParameter(valid_607931, JString, required = false,
                                 default = nil)
  if valid_607931 != nil:
    section.add "OptionGroupName", valid_607931
  var valid_607932 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607932 = validateParameter(valid_607932, JString, required = false,
                                 default = nil)
  if valid_607932 != nil:
    section.add "DBClusterParameterGroupName", valid_607932
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607933 = formData.getOrDefault("DBClusterIdentifier")
  valid_607933 = validateParameter(valid_607933, JString, required = true,
                                 default = nil)
  if valid_607933 != nil:
    section.add "DBClusterIdentifier", valid_607933
  var valid_607934 = formData.getOrDefault("DeletionProtection")
  valid_607934 = validateParameter(valid_607934, JBool, required = false, default = nil)
  if valid_607934 != nil:
    section.add "DeletionProtection", valid_607934
  var valid_607935 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_607935 = validateParameter(valid_607935, JString, required = false,
                                 default = nil)
  if valid_607935 != nil:
    section.add "NewDBClusterIdentifier", valid_607935
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607936: Call_PostModifyDBCluster_607908; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_607936.validator(path, query, header, formData, body)
  let scheme = call_607936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607936.url(scheme.get, call_607936.host, call_607936.base,
                         call_607936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607936, url, valid)

proc call*(call_607937: Call_PostModifyDBCluster_607908;
          DBClusterIdentifier: string; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          EngineVersion: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          Action: string = "ModifyDBCluster"; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewDBClusterIdentifier: string = ""): Recallable =
  ## postModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_607938 = newJObject()
  var formData_607939 = newJObject()
  add(formData_607939, "Port", newJInt(Port))
  add(formData_607939, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_607939, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_607939, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_607939.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_607939.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_607939, "EngineVersion", newJString(EngineVersion))
  if VpcSecurityGroupIds != nil:
    formData_607939.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607939, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607939, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_607939, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607938, "Action", newJString(Action))
  add(formData_607939, "OptionGroupName", newJString(OptionGroupName))
  add(formData_607939, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607938, "Version", newJString(Version))
  add(formData_607939, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_607939, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_607939, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  result = call_607937.call(nil, query_607938, nil, formData_607939, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_607908(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_607909, base: "/",
    url: url_PostModifyDBCluster_607910, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_607877 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBCluster_607879(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_607878(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_607880 = query.getOrDefault("DeletionProtection")
  valid_607880 = validateParameter(valid_607880, JBool, required = false, default = nil)
  if valid_607880 != nil:
    section.add "DeletionProtection", valid_607880
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607881 = query.getOrDefault("DBClusterIdentifier")
  valid_607881 = validateParameter(valid_607881, JString, required = true,
                                 default = nil)
  if valid_607881 != nil:
    section.add "DBClusterIdentifier", valid_607881
  var valid_607882 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607882 = validateParameter(valid_607882, JString, required = false,
                                 default = nil)
  if valid_607882 != nil:
    section.add "DBClusterParameterGroupName", valid_607882
  var valid_607883 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_607883 = validateParameter(valid_607883, JArray, required = false,
                                 default = nil)
  if valid_607883 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_607883
  var valid_607884 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_607884 = validateParameter(valid_607884, JArray, required = false,
                                 default = nil)
  if valid_607884 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_607884
  var valid_607885 = query.getOrDefault("BackupRetentionPeriod")
  valid_607885 = validateParameter(valid_607885, JInt, required = false, default = nil)
  if valid_607885 != nil:
    section.add "BackupRetentionPeriod", valid_607885
  var valid_607886 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607886 = validateParameter(valid_607886, JBool, required = false, default = nil)
  if valid_607886 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607886
  var valid_607887 = query.getOrDefault("EngineVersion")
  valid_607887 = validateParameter(valid_607887, JString, required = false,
                                 default = nil)
  if valid_607887 != nil:
    section.add "EngineVersion", valid_607887
  var valid_607888 = query.getOrDefault("Action")
  valid_607888 = validateParameter(valid_607888, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_607888 != nil:
    section.add "Action", valid_607888
  var valid_607889 = query.getOrDefault("ApplyImmediately")
  valid_607889 = validateParameter(valid_607889, JBool, required = false, default = nil)
  if valid_607889 != nil:
    section.add "ApplyImmediately", valid_607889
  var valid_607890 = query.getOrDefault("NewDBClusterIdentifier")
  valid_607890 = validateParameter(valid_607890, JString, required = false,
                                 default = nil)
  if valid_607890 != nil:
    section.add "NewDBClusterIdentifier", valid_607890
  var valid_607891 = query.getOrDefault("Port")
  valid_607891 = validateParameter(valid_607891, JInt, required = false, default = nil)
  if valid_607891 != nil:
    section.add "Port", valid_607891
  var valid_607892 = query.getOrDefault("VpcSecurityGroupIds")
  valid_607892 = validateParameter(valid_607892, JArray, required = false,
                                 default = nil)
  if valid_607892 != nil:
    section.add "VpcSecurityGroupIds", valid_607892
  var valid_607893 = query.getOrDefault("MasterUserPassword")
  valid_607893 = validateParameter(valid_607893, JString, required = false,
                                 default = nil)
  if valid_607893 != nil:
    section.add "MasterUserPassword", valid_607893
  var valid_607894 = query.getOrDefault("OptionGroupName")
  valid_607894 = validateParameter(valid_607894, JString, required = false,
                                 default = nil)
  if valid_607894 != nil:
    section.add "OptionGroupName", valid_607894
  var valid_607895 = query.getOrDefault("Version")
  valid_607895 = validateParameter(valid_607895, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607895 != nil:
    section.add "Version", valid_607895
  var valid_607896 = query.getOrDefault("PreferredBackupWindow")
  valid_607896 = validateParameter(valid_607896, JString, required = false,
                                 default = nil)
  if valid_607896 != nil:
    section.add "PreferredBackupWindow", valid_607896
  var valid_607897 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_607897 = validateParameter(valid_607897, JString, required = false,
                                 default = nil)
  if valid_607897 != nil:
    section.add "PreferredMaintenanceWindow", valid_607897
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607898 = header.getOrDefault("X-Amz-Signature")
  valid_607898 = validateParameter(valid_607898, JString, required = false,
                                 default = nil)
  if valid_607898 != nil:
    section.add "X-Amz-Signature", valid_607898
  var valid_607899 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607899 = validateParameter(valid_607899, JString, required = false,
                                 default = nil)
  if valid_607899 != nil:
    section.add "X-Amz-Content-Sha256", valid_607899
  var valid_607900 = header.getOrDefault("X-Amz-Date")
  valid_607900 = validateParameter(valid_607900, JString, required = false,
                                 default = nil)
  if valid_607900 != nil:
    section.add "X-Amz-Date", valid_607900
  var valid_607901 = header.getOrDefault("X-Amz-Credential")
  valid_607901 = validateParameter(valid_607901, JString, required = false,
                                 default = nil)
  if valid_607901 != nil:
    section.add "X-Amz-Credential", valid_607901
  var valid_607902 = header.getOrDefault("X-Amz-Security-Token")
  valid_607902 = validateParameter(valid_607902, JString, required = false,
                                 default = nil)
  if valid_607902 != nil:
    section.add "X-Amz-Security-Token", valid_607902
  var valid_607903 = header.getOrDefault("X-Amz-Algorithm")
  valid_607903 = validateParameter(valid_607903, JString, required = false,
                                 default = nil)
  if valid_607903 != nil:
    section.add "X-Amz-Algorithm", valid_607903
  var valid_607904 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607904 = validateParameter(valid_607904, JString, required = false,
                                 default = nil)
  if valid_607904 != nil:
    section.add "X-Amz-SignedHeaders", valid_607904
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607905: Call_GetModifyDBCluster_607877; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_607905.validator(path, query, header, formData, body)
  let scheme = call_607905.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607905.url(scheme.get, call_607905.host, call_607905.base,
                         call_607905.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607905, url, valid)

proc call*(call_607906: Call_GetModifyDBCluster_607877;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false; EngineVersion: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## getModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_607907 = newJObject()
  add(query_607907, "DeletionProtection", newJBool(DeletionProtection))
  add(query_607907, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607907, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_607907.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_607907.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_607907, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_607907, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_607907, "EngineVersion", newJString(EngineVersion))
  add(query_607907, "Action", newJString(Action))
  add(query_607907, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607907, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_607907, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_607907.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_607907, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_607907, "OptionGroupName", newJString(OptionGroupName))
  add(query_607907, "Version", newJString(Version))
  add(query_607907, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_607907, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_607906.call(nil, query_607907, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_607877(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_607878,
    base: "/", url: url_GetModifyDBCluster_607879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_607957 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBClusterParameterGroup_607959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_607958(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607960 = query.getOrDefault("Action")
  valid_607960 = validateParameter(valid_607960, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_607960 != nil:
    section.add "Action", valid_607960
  var valid_607961 = query.getOrDefault("Version")
  valid_607961 = validateParameter(valid_607961, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607961 != nil:
    section.add "Version", valid_607961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607962 = header.getOrDefault("X-Amz-Signature")
  valid_607962 = validateParameter(valid_607962, JString, required = false,
                                 default = nil)
  if valid_607962 != nil:
    section.add "X-Amz-Signature", valid_607962
  var valid_607963 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607963 = validateParameter(valid_607963, JString, required = false,
                                 default = nil)
  if valid_607963 != nil:
    section.add "X-Amz-Content-Sha256", valid_607963
  var valid_607964 = header.getOrDefault("X-Amz-Date")
  valid_607964 = validateParameter(valid_607964, JString, required = false,
                                 default = nil)
  if valid_607964 != nil:
    section.add "X-Amz-Date", valid_607964
  var valid_607965 = header.getOrDefault("X-Amz-Credential")
  valid_607965 = validateParameter(valid_607965, JString, required = false,
                                 default = nil)
  if valid_607965 != nil:
    section.add "X-Amz-Credential", valid_607965
  var valid_607966 = header.getOrDefault("X-Amz-Security-Token")
  valid_607966 = validateParameter(valid_607966, JString, required = false,
                                 default = nil)
  if valid_607966 != nil:
    section.add "X-Amz-Security-Token", valid_607966
  var valid_607967 = header.getOrDefault("X-Amz-Algorithm")
  valid_607967 = validateParameter(valid_607967, JString, required = false,
                                 default = nil)
  if valid_607967 != nil:
    section.add "X-Amz-Algorithm", valid_607967
  var valid_607968 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607968 = validateParameter(valid_607968, JString, required = false,
                                 default = nil)
  if valid_607968 != nil:
    section.add "X-Amz-SignedHeaders", valid_607968
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_607969 = formData.getOrDefault("Parameters")
  valid_607969 = validateParameter(valid_607969, JArray, required = true, default = nil)
  if valid_607969 != nil:
    section.add "Parameters", valid_607969
  var valid_607970 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607970 = validateParameter(valid_607970, JString, required = true,
                                 default = nil)
  if valid_607970 != nil:
    section.add "DBClusterParameterGroupName", valid_607970
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607971: Call_PostModifyDBClusterParameterGroup_607957;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_607971.validator(path, query, header, formData, body)
  let scheme = call_607971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607971.url(scheme.get, call_607971.host, call_607971.base,
                         call_607971.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607971, url, valid)

proc call*(call_607972: Call_PostModifyDBClusterParameterGroup_607957;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_607973 = newJObject()
  var formData_607974 = newJObject()
  add(query_607973, "Action", newJString(Action))
  if Parameters != nil:
    formData_607974.add "Parameters", Parameters
  add(formData_607974, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607973, "Version", newJString(Version))
  result = call_607972.call(nil, query_607973, nil, formData_607974, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_607957(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_607958, base: "/",
    url: url_PostModifyDBClusterParameterGroup_607959,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_607940 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBClusterParameterGroup_607942(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_607941(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_607943 = query.getOrDefault("Parameters")
  valid_607943 = validateParameter(valid_607943, JArray, required = true, default = nil)
  if valid_607943 != nil:
    section.add "Parameters", valid_607943
  var valid_607944 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607944 = validateParameter(valid_607944, JString, required = true,
                                 default = nil)
  if valid_607944 != nil:
    section.add "DBClusterParameterGroupName", valid_607944
  var valid_607945 = query.getOrDefault("Action")
  valid_607945 = validateParameter(valid_607945, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_607945 != nil:
    section.add "Action", valid_607945
  var valid_607946 = query.getOrDefault("Version")
  valid_607946 = validateParameter(valid_607946, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607946 != nil:
    section.add "Version", valid_607946
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607947 = header.getOrDefault("X-Amz-Signature")
  valid_607947 = validateParameter(valid_607947, JString, required = false,
                                 default = nil)
  if valid_607947 != nil:
    section.add "X-Amz-Signature", valid_607947
  var valid_607948 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607948 = validateParameter(valid_607948, JString, required = false,
                                 default = nil)
  if valid_607948 != nil:
    section.add "X-Amz-Content-Sha256", valid_607948
  var valid_607949 = header.getOrDefault("X-Amz-Date")
  valid_607949 = validateParameter(valid_607949, JString, required = false,
                                 default = nil)
  if valid_607949 != nil:
    section.add "X-Amz-Date", valid_607949
  var valid_607950 = header.getOrDefault("X-Amz-Credential")
  valid_607950 = validateParameter(valid_607950, JString, required = false,
                                 default = nil)
  if valid_607950 != nil:
    section.add "X-Amz-Credential", valid_607950
  var valid_607951 = header.getOrDefault("X-Amz-Security-Token")
  valid_607951 = validateParameter(valid_607951, JString, required = false,
                                 default = nil)
  if valid_607951 != nil:
    section.add "X-Amz-Security-Token", valid_607951
  var valid_607952 = header.getOrDefault("X-Amz-Algorithm")
  valid_607952 = validateParameter(valid_607952, JString, required = false,
                                 default = nil)
  if valid_607952 != nil:
    section.add "X-Amz-Algorithm", valid_607952
  var valid_607953 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607953 = validateParameter(valid_607953, JString, required = false,
                                 default = nil)
  if valid_607953 != nil:
    section.add "X-Amz-SignedHeaders", valid_607953
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607954: Call_GetModifyDBClusterParameterGroup_607940;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_607954.validator(path, query, header, formData, body)
  let scheme = call_607954.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607954.url(scheme.get, call_607954.host, call_607954.base,
                         call_607954.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607954, url, valid)

proc call*(call_607955: Call_GetModifyDBClusterParameterGroup_607940;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607956 = newJObject()
  if Parameters != nil:
    query_607956.add "Parameters", Parameters
  add(query_607956, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607956, "Action", newJString(Action))
  add(query_607956, "Version", newJString(Version))
  result = call_607955.call(nil, query_607956, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_607940(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_607941, base: "/",
    url: url_GetModifyDBClusterParameterGroup_607942,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_607994 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBClusterSnapshotAttribute_607996(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_607995(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607997 = query.getOrDefault("Action")
  valid_607997 = validateParameter(valid_607997, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_607997 != nil:
    section.add "Action", valid_607997
  var valid_607998 = query.getOrDefault("Version")
  valid_607998 = validateParameter(valid_607998, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607998 != nil:
    section.add "Version", valid_607998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607999 = header.getOrDefault("X-Amz-Signature")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-Signature", valid_607999
  var valid_608000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608000 = validateParameter(valid_608000, JString, required = false,
                                 default = nil)
  if valid_608000 != nil:
    section.add "X-Amz-Content-Sha256", valid_608000
  var valid_608001 = header.getOrDefault("X-Amz-Date")
  valid_608001 = validateParameter(valid_608001, JString, required = false,
                                 default = nil)
  if valid_608001 != nil:
    section.add "X-Amz-Date", valid_608001
  var valid_608002 = header.getOrDefault("X-Amz-Credential")
  valid_608002 = validateParameter(valid_608002, JString, required = false,
                                 default = nil)
  if valid_608002 != nil:
    section.add "X-Amz-Credential", valid_608002
  var valid_608003 = header.getOrDefault("X-Amz-Security-Token")
  valid_608003 = validateParameter(valid_608003, JString, required = false,
                                 default = nil)
  if valid_608003 != nil:
    section.add "X-Amz-Security-Token", valid_608003
  var valid_608004 = header.getOrDefault("X-Amz-Algorithm")
  valid_608004 = validateParameter(valid_608004, JString, required = false,
                                 default = nil)
  if valid_608004 != nil:
    section.add "X-Amz-Algorithm", valid_608004
  var valid_608005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608005 = validateParameter(valid_608005, JString, required = false,
                                 default = nil)
  if valid_608005 != nil:
    section.add "X-Amz-SignedHeaders", valid_608005
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_608006 = formData.getOrDefault("AttributeName")
  valid_608006 = validateParameter(valid_608006, JString, required = true,
                                 default = nil)
  if valid_608006 != nil:
    section.add "AttributeName", valid_608006
  var valid_608007 = formData.getOrDefault("ValuesToAdd")
  valid_608007 = validateParameter(valid_608007, JArray, required = false,
                                 default = nil)
  if valid_608007 != nil:
    section.add "ValuesToAdd", valid_608007
  var valid_608008 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608008 = validateParameter(valid_608008, JString, required = true,
                                 default = nil)
  if valid_608008 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608008
  var valid_608009 = formData.getOrDefault("ValuesToRemove")
  valid_608009 = validateParameter(valid_608009, JArray, required = false,
                                 default = nil)
  if valid_608009 != nil:
    section.add "ValuesToRemove", valid_608009
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608010: Call_PostModifyDBClusterSnapshotAttribute_607994;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_608010.validator(path, query, header, formData, body)
  let scheme = call_608010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608010.url(scheme.get, call_608010.host, call_608010.base,
                         call_608010.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608010, url, valid)

proc call*(call_608011: Call_PostModifyDBClusterSnapshotAttribute_607994;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_608012 = newJObject()
  var formData_608013 = newJObject()
  add(formData_608013, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_608013.add "ValuesToAdd", ValuesToAdd
  add(formData_608013, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608012, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_608013.add "ValuesToRemove", ValuesToRemove
  add(query_608012, "Version", newJString(Version))
  result = call_608011.call(nil, query_608012, nil, formData_608013, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_607994(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_607995, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_607996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_607975 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBClusterSnapshotAttribute_607977(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_607976(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607978 = query.getOrDefault("ValuesToRemove")
  valid_607978 = validateParameter(valid_607978, JArray, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "ValuesToRemove", valid_607978
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607979 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607979 = validateParameter(valid_607979, JString, required = true,
                                 default = nil)
  if valid_607979 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607979
  var valid_607980 = query.getOrDefault("Action")
  valid_607980 = validateParameter(valid_607980, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_607980 != nil:
    section.add "Action", valid_607980
  var valid_607981 = query.getOrDefault("AttributeName")
  valid_607981 = validateParameter(valid_607981, JString, required = true,
                                 default = nil)
  if valid_607981 != nil:
    section.add "AttributeName", valid_607981
  var valid_607982 = query.getOrDefault("ValuesToAdd")
  valid_607982 = validateParameter(valid_607982, JArray, required = false,
                                 default = nil)
  if valid_607982 != nil:
    section.add "ValuesToAdd", valid_607982
  var valid_607983 = query.getOrDefault("Version")
  valid_607983 = validateParameter(valid_607983, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607983 != nil:
    section.add "Version", valid_607983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607984 = header.getOrDefault("X-Amz-Signature")
  valid_607984 = validateParameter(valid_607984, JString, required = false,
                                 default = nil)
  if valid_607984 != nil:
    section.add "X-Amz-Signature", valid_607984
  var valid_607985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607985 = validateParameter(valid_607985, JString, required = false,
                                 default = nil)
  if valid_607985 != nil:
    section.add "X-Amz-Content-Sha256", valid_607985
  var valid_607986 = header.getOrDefault("X-Amz-Date")
  valid_607986 = validateParameter(valid_607986, JString, required = false,
                                 default = nil)
  if valid_607986 != nil:
    section.add "X-Amz-Date", valid_607986
  var valid_607987 = header.getOrDefault("X-Amz-Credential")
  valid_607987 = validateParameter(valid_607987, JString, required = false,
                                 default = nil)
  if valid_607987 != nil:
    section.add "X-Amz-Credential", valid_607987
  var valid_607988 = header.getOrDefault("X-Amz-Security-Token")
  valid_607988 = validateParameter(valid_607988, JString, required = false,
                                 default = nil)
  if valid_607988 != nil:
    section.add "X-Amz-Security-Token", valid_607988
  var valid_607989 = header.getOrDefault("X-Amz-Algorithm")
  valid_607989 = validateParameter(valid_607989, JString, required = false,
                                 default = nil)
  if valid_607989 != nil:
    section.add "X-Amz-Algorithm", valid_607989
  var valid_607990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607990 = validateParameter(valid_607990, JString, required = false,
                                 default = nil)
  if valid_607990 != nil:
    section.add "X-Amz-SignedHeaders", valid_607990
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607991: Call_GetModifyDBClusterSnapshotAttribute_607975;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_607991.validator(path, query, header, formData, body)
  let scheme = call_607991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607991.url(scheme.get, call_607991.host, call_607991.base,
                         call_607991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607991, url, valid)

proc call*(call_607992: Call_GetModifyDBClusterSnapshotAttribute_607975;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_607993 = newJObject()
  if ValuesToRemove != nil:
    query_607993.add "ValuesToRemove", ValuesToRemove
  add(query_607993, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607993, "Action", newJString(Action))
  add(query_607993, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_607993.add "ValuesToAdd", ValuesToAdd
  add(query_607993, "Version", newJString(Version))
  result = call_607992.call(nil, query_607993, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_607975(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_607976, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_607977,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_608067 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBInstance_608069(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_608068(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608070 = query.getOrDefault("Action")
  valid_608070 = validateParameter(valid_608070, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_608070 != nil:
    section.add "Action", valid_608070
  var valid_608071 = query.getOrDefault("Version")
  valid_608071 = validateParameter(valid_608071, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608071 != nil:
    section.add "Version", valid_608071
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_608072 = header.getOrDefault("X-Amz-Security-Token")
  valid_608072 = validateParameter(valid_608072, JString, required = false,
                                 default = nil)
  if valid_608072 != nil:
    section.add "X-Amz-Security-Token", valid_608072
  var valid_608073 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608073 = validateParameter(valid_608073, JString, required = false,
                                 default = nil)
  if valid_608073 != nil:
    section.add "X-Amz-SignedHeaders", valid_608073
  var valid_608074 = header.getOrDefault("X-Amz-Signature")
  valid_608074 = validateParameter(valid_608074, JString, required = false,
                                 default = nil)
  if valid_608074 != nil:
    section.add "X-Amz-Signature", valid_608074
  var valid_608075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608075 = validateParameter(valid_608075, JString, required = false,
                                 default = nil)
  if valid_608075 != nil:
    section.add "X-Amz-Content-Sha256", valid_608075
  var valid_608076 = header.getOrDefault("X-Amz-Date")
  valid_608076 = validateParameter(valid_608076, JString, required = false,
                                 default = nil)
  if valid_608076 != nil:
    section.add "X-Amz-Date", valid_608076
  var valid_608077 = header.getOrDefault("X-Amz-Credential")
  valid_608077 = validateParameter(valid_608077, JString, required = false,
                                 default = nil)
  if valid_608077 != nil:
    section.add "X-Amz-Credential", valid_608077
  var valid_608078 = header.getOrDefault("X-Amz-Algorithm")
  valid_608078 = validateParameter(valid_608078, JString, required = false,
                                 default = nil)
  if valid_608078 != nil:
    section.add "X-Amz-Algorithm", valid_608078
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   StorageType: JString
  ##              : Not supported.
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : Not supported.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  section = newJObject()
  var valid_608079 = formData.getOrDefault("PromotionTier")
  valid_608079 = validateParameter(valid_608079, JInt, required = false, default = nil)
  if valid_608079 != nil:
    section.add "PromotionTier", valid_608079
  var valid_608080 = formData.getOrDefault("MultiAZ")
  valid_608080 = validateParameter(valid_608080, JBool, required = false, default = nil)
  if valid_608080 != nil:
    section.add "MultiAZ", valid_608080
  var valid_608081 = formData.getOrDefault("MonitoringRoleArn")
  valid_608081 = validateParameter(valid_608081, JString, required = false,
                                 default = nil)
  if valid_608081 != nil:
    section.add "MonitoringRoleArn", valid_608081
  var valid_608082 = formData.getOrDefault("CACertificateIdentifier")
  valid_608082 = validateParameter(valid_608082, JString, required = false,
                                 default = nil)
  if valid_608082 != nil:
    section.add "CACertificateIdentifier", valid_608082
  var valid_608083 = formData.getOrDefault("MonitoringInterval")
  valid_608083 = validateParameter(valid_608083, JInt, required = false, default = nil)
  if valid_608083 != nil:
    section.add "MonitoringInterval", valid_608083
  var valid_608084 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608084 = validateParameter(valid_608084, JArray, required = false,
                                 default = nil)
  if valid_608084 != nil:
    section.add "VpcSecurityGroupIds", valid_608084
  var valid_608085 = formData.getOrDefault("EnablePerformanceInsights")
  valid_608085 = validateParameter(valid_608085, JBool, required = false, default = nil)
  if valid_608085 != nil:
    section.add "EnablePerformanceInsights", valid_608085
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608086 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608086 = validateParameter(valid_608086, JString, required = true,
                                 default = nil)
  if valid_608086 != nil:
    section.add "DBInstanceIdentifier", valid_608086
  var valid_608087 = formData.getOrDefault("TdeCredentialArn")
  valid_608087 = validateParameter(valid_608087, JString, required = false,
                                 default = nil)
  if valid_608087 != nil:
    section.add "TdeCredentialArn", valid_608087
  var valid_608088 = formData.getOrDefault("DBSubnetGroupName")
  valid_608088 = validateParameter(valid_608088, JString, required = false,
                                 default = nil)
  if valid_608088 != nil:
    section.add "DBSubnetGroupName", valid_608088
  var valid_608089 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_608089 = validateParameter(valid_608089, JBool, required = false, default = nil)
  if valid_608089 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608089
  var valid_608090 = formData.getOrDefault("StorageType")
  valid_608090 = validateParameter(valid_608090, JString, required = false,
                                 default = nil)
  if valid_608090 != nil:
    section.add "StorageType", valid_608090
  var valid_608091 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_608091 = validateParameter(valid_608091, JBool, required = false, default = nil)
  if valid_608091 != nil:
    section.add "CopyTagsToSnapshot", valid_608091
  var valid_608092 = formData.getOrDefault("DeletionProtection")
  valid_608092 = validateParameter(valid_608092, JBool, required = false, default = nil)
  if valid_608092 != nil:
    section.add "DeletionProtection", valid_608092
  var valid_608093 = formData.getOrDefault("AllocatedStorage")
  valid_608093 = validateParameter(valid_608093, JInt, required = false, default = nil)
  if valid_608093 != nil:
    section.add "AllocatedStorage", valid_608093
  var valid_608094 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_608094 = validateParameter(valid_608094, JString, required = false,
                                 default = nil)
  if valid_608094 != nil:
    section.add "PreferredMaintenanceWindow", valid_608094
  var valid_608095 = formData.getOrDefault("DBInstanceClass")
  valid_608095 = validateParameter(valid_608095, JString, required = false,
                                 default = nil)
  if valid_608095 != nil:
    section.add "DBInstanceClass", valid_608095
  var valid_608096 = formData.getOrDefault("PreferredBackupWindow")
  valid_608096 = validateParameter(valid_608096, JString, required = false,
                                 default = nil)
  if valid_608096 != nil:
    section.add "PreferredBackupWindow", valid_608096
  var valid_608097 = formData.getOrDefault("MasterUserPassword")
  valid_608097 = validateParameter(valid_608097, JString, required = false,
                                 default = nil)
  if valid_608097 != nil:
    section.add "MasterUserPassword", valid_608097
  var valid_608098 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608098 = validateParameter(valid_608098, JArray, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608098
  var valid_608099 = formData.getOrDefault("Domain")
  valid_608099 = validateParameter(valid_608099, JString, required = false,
                                 default = nil)
  if valid_608099 != nil:
    section.add "Domain", valid_608099
  var valid_608100 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608100 = validateParameter(valid_608100, JArray, required = false,
                                 default = nil)
  if valid_608100 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608100
  var valid_608101 = formData.getOrDefault("DBParameterGroupName")
  valid_608101 = validateParameter(valid_608101, JString, required = false,
                                 default = nil)
  if valid_608101 != nil:
    section.add "DBParameterGroupName", valid_608101
  var valid_608102 = formData.getOrDefault("EngineVersion")
  valid_608102 = validateParameter(valid_608102, JString, required = false,
                                 default = nil)
  if valid_608102 != nil:
    section.add "EngineVersion", valid_608102
  var valid_608103 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608103 = validateParameter(valid_608103, JBool, required = false, default = nil)
  if valid_608103 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608103
  var valid_608104 = formData.getOrDefault("BackupRetentionPeriod")
  valid_608104 = validateParameter(valid_608104, JInt, required = false, default = nil)
  if valid_608104 != nil:
    section.add "BackupRetentionPeriod", valid_608104
  var valid_608105 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_608105 = validateParameter(valid_608105, JBool, required = false, default = nil)
  if valid_608105 != nil:
    section.add "AutoMinorVersionUpgrade", valid_608105
  var valid_608106 = formData.getOrDefault("TdeCredentialPassword")
  valid_608106 = validateParameter(valid_608106, JString, required = false,
                                 default = nil)
  if valid_608106 != nil:
    section.add "TdeCredentialPassword", valid_608106
  var valid_608107 = formData.getOrDefault("ApplyImmediately")
  valid_608107 = validateParameter(valid_608107, JBool, required = false, default = nil)
  if valid_608107 != nil:
    section.add "ApplyImmediately", valid_608107
  var valid_608108 = formData.getOrDefault("Iops")
  valid_608108 = validateParameter(valid_608108, JInt, required = false, default = nil)
  if valid_608108 != nil:
    section.add "Iops", valid_608108
  var valid_608109 = formData.getOrDefault("PubliclyAccessible")
  valid_608109 = validateParameter(valid_608109, JBool, required = false, default = nil)
  if valid_608109 != nil:
    section.add "PubliclyAccessible", valid_608109
  var valid_608110 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_608110 = validateParameter(valid_608110, JString, required = false,
                                 default = nil)
  if valid_608110 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_608110
  var valid_608111 = formData.getOrDefault("LicenseModel")
  valid_608111 = validateParameter(valid_608111, JString, required = false,
                                 default = nil)
  if valid_608111 != nil:
    section.add "LicenseModel", valid_608111
  var valid_608112 = formData.getOrDefault("DomainIAMRoleName")
  valid_608112 = validateParameter(valid_608112, JString, required = false,
                                 default = nil)
  if valid_608112 != nil:
    section.add "DomainIAMRoleName", valid_608112
  var valid_608113 = formData.getOrDefault("OptionGroupName")
  valid_608113 = validateParameter(valid_608113, JString, required = false,
                                 default = nil)
  if valid_608113 != nil:
    section.add "OptionGroupName", valid_608113
  var valid_608114 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_608114 = validateParameter(valid_608114, JString, required = false,
                                 default = nil)
  if valid_608114 != nil:
    section.add "NewDBInstanceIdentifier", valid_608114
  var valid_608115 = formData.getOrDefault("DBSecurityGroups")
  valid_608115 = validateParameter(valid_608115, JArray, required = false,
                                 default = nil)
  if valid_608115 != nil:
    section.add "DBSecurityGroups", valid_608115
  var valid_608116 = formData.getOrDefault("DBPortNumber")
  valid_608116 = validateParameter(valid_608116, JInt, required = false, default = nil)
  if valid_608116 != nil:
    section.add "DBPortNumber", valid_608116
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608117: Call_PostModifyDBInstance_608067; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_608117.validator(path, query, header, formData, body)
  let scheme = call_608117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608117.url(scheme.get, call_608117.host, call_608117.base,
                         call_608117.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608117, url, valid)

proc call*(call_608118: Call_PostModifyDBInstance_608067;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance"; DBSubnetGroupName: string = "";
          AllowMajorVersionUpgrade: bool = false; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; PreferredBackupWindow: string = "";
          MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   StorageType: string
  ##              : Not supported.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : Not supported.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  var query_608119 = newJObject()
  var formData_608120 = newJObject()
  add(formData_608120, "PromotionTier", newJInt(PromotionTier))
  add(formData_608120, "MultiAZ", newJBool(MultiAZ))
  add(formData_608120, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_608120, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_608120, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_608120.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608120, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_608120, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_608120, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_608119, "Action", newJString(Action))
  add(formData_608120, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608120, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_608120, "StorageType", newJString(StorageType))
  add(formData_608120, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_608120, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_608120, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_608120, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_608120, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_608120, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_608120, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_608120.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_608120, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_608120.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_608120, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_608120, "EngineVersion", newJString(EngineVersion))
  add(formData_608120, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_608120, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_608120, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_608120, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_608120, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_608120, "Iops", newJInt(Iops))
  add(formData_608120, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_608120, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_608120, "LicenseModel", newJString(LicenseModel))
  add(formData_608120, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_608120, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608120, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_608119, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_608120.add "DBSecurityGroups", DBSecurityGroups
  add(formData_608120, "DBPortNumber", newJInt(DBPortNumber))
  result = call_608118.call(nil, query_608119, nil, formData_608120, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_608067(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_608068, base: "/",
    url: url_PostModifyDBInstance_608069, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_608014 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBInstance_608016(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_608015(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  section = newJObject()
  var valid_608017 = query.getOrDefault("CopyTagsToSnapshot")
  valid_608017 = validateParameter(valid_608017, JBool, required = false, default = nil)
  if valid_608017 != nil:
    section.add "CopyTagsToSnapshot", valid_608017
  var valid_608018 = query.getOrDefault("MonitoringInterval")
  valid_608018 = validateParameter(valid_608018, JInt, required = false, default = nil)
  if valid_608018 != nil:
    section.add "MonitoringInterval", valid_608018
  var valid_608019 = query.getOrDefault("MonitoringRoleArn")
  valid_608019 = validateParameter(valid_608019, JString, required = false,
                                 default = nil)
  if valid_608019 != nil:
    section.add "MonitoringRoleArn", valid_608019
  var valid_608020 = query.getOrDefault("DBPortNumber")
  valid_608020 = validateParameter(valid_608020, JInt, required = false, default = nil)
  if valid_608020 != nil:
    section.add "DBPortNumber", valid_608020
  var valid_608021 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608021 = validateParameter(valid_608021, JArray, required = false,
                                 default = nil)
  if valid_608021 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608021
  var valid_608022 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608022 = validateParameter(valid_608022, JArray, required = false,
                                 default = nil)
  if valid_608022 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608022
  var valid_608023 = query.getOrDefault("BackupRetentionPeriod")
  valid_608023 = validateParameter(valid_608023, JInt, required = false, default = nil)
  if valid_608023 != nil:
    section.add "BackupRetentionPeriod", valid_608023
  var valid_608024 = query.getOrDefault("EngineVersion")
  valid_608024 = validateParameter(valid_608024, JString, required = false,
                                 default = nil)
  if valid_608024 != nil:
    section.add "EngineVersion", valid_608024
  var valid_608025 = query.getOrDefault("Action")
  valid_608025 = validateParameter(valid_608025, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_608025 != nil:
    section.add "Action", valid_608025
  var valid_608026 = query.getOrDefault("Domain")
  valid_608026 = validateParameter(valid_608026, JString, required = false,
                                 default = nil)
  if valid_608026 != nil:
    section.add "Domain", valid_608026
  var valid_608027 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608027 = validateParameter(valid_608027, JArray, required = false,
                                 default = nil)
  if valid_608027 != nil:
    section.add "VpcSecurityGroupIds", valid_608027
  var valid_608028 = query.getOrDefault("AllocatedStorage")
  valid_608028 = validateParameter(valid_608028, JInt, required = false, default = nil)
  if valid_608028 != nil:
    section.add "AllocatedStorage", valid_608028
  var valid_608029 = query.getOrDefault("EnablePerformanceInsights")
  valid_608029 = validateParameter(valid_608029, JBool, required = false, default = nil)
  if valid_608029 != nil:
    section.add "EnablePerformanceInsights", valid_608029
  var valid_608030 = query.getOrDefault("PubliclyAccessible")
  valid_608030 = validateParameter(valid_608030, JBool, required = false, default = nil)
  if valid_608030 != nil:
    section.add "PubliclyAccessible", valid_608030
  var valid_608031 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_608031 = validateParameter(valid_608031, JString, required = false,
                                 default = nil)
  if valid_608031 != nil:
    section.add "NewDBInstanceIdentifier", valid_608031
  var valid_608032 = query.getOrDefault("TdeCredentialPassword")
  valid_608032 = validateParameter(valid_608032, JString, required = false,
                                 default = nil)
  if valid_608032 != nil:
    section.add "TdeCredentialPassword", valid_608032
  var valid_608033 = query.getOrDefault("DeletionProtection")
  valid_608033 = validateParameter(valid_608033, JBool, required = false, default = nil)
  if valid_608033 != nil:
    section.add "DeletionProtection", valid_608033
  var valid_608034 = query.getOrDefault("DBParameterGroupName")
  valid_608034 = validateParameter(valid_608034, JString, required = false,
                                 default = nil)
  if valid_608034 != nil:
    section.add "DBParameterGroupName", valid_608034
  var valid_608035 = query.getOrDefault("LicenseModel")
  valid_608035 = validateParameter(valid_608035, JString, required = false,
                                 default = nil)
  if valid_608035 != nil:
    section.add "LicenseModel", valid_608035
  var valid_608036 = query.getOrDefault("DBInstanceIdentifier")
  valid_608036 = validateParameter(valid_608036, JString, required = true,
                                 default = nil)
  if valid_608036 != nil:
    section.add "DBInstanceIdentifier", valid_608036
  var valid_608037 = query.getOrDefault("TdeCredentialArn")
  valid_608037 = validateParameter(valid_608037, JString, required = false,
                                 default = nil)
  if valid_608037 != nil:
    section.add "TdeCredentialArn", valid_608037
  var valid_608038 = query.getOrDefault("PromotionTier")
  valid_608038 = validateParameter(valid_608038, JInt, required = false, default = nil)
  if valid_608038 != nil:
    section.add "PromotionTier", valid_608038
  var valid_608039 = query.getOrDefault("CACertificateIdentifier")
  valid_608039 = validateParameter(valid_608039, JString, required = false,
                                 default = nil)
  if valid_608039 != nil:
    section.add "CACertificateIdentifier", valid_608039
  var valid_608040 = query.getOrDefault("StorageType")
  valid_608040 = validateParameter(valid_608040, JString, required = false,
                                 default = nil)
  if valid_608040 != nil:
    section.add "StorageType", valid_608040
  var valid_608041 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608041 = validateParameter(valid_608041, JBool, required = false, default = nil)
  if valid_608041 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608041
  var valid_608042 = query.getOrDefault("MultiAZ")
  valid_608042 = validateParameter(valid_608042, JBool, required = false, default = nil)
  if valid_608042 != nil:
    section.add "MultiAZ", valid_608042
  var valid_608043 = query.getOrDefault("DBSecurityGroups")
  valid_608043 = validateParameter(valid_608043, JArray, required = false,
                                 default = nil)
  if valid_608043 != nil:
    section.add "DBSecurityGroups", valid_608043
  var valid_608044 = query.getOrDefault("ApplyImmediately")
  valid_608044 = validateParameter(valid_608044, JBool, required = false, default = nil)
  if valid_608044 != nil:
    section.add "ApplyImmediately", valid_608044
  var valid_608045 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_608045 = validateParameter(valid_608045, JBool, required = false, default = nil)
  if valid_608045 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608045
  var valid_608046 = query.getOrDefault("MasterUserPassword")
  valid_608046 = validateParameter(valid_608046, JString, required = false,
                                 default = nil)
  if valid_608046 != nil:
    section.add "MasterUserPassword", valid_608046
  var valid_608047 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_608047 = validateParameter(valid_608047, JString, required = false,
                                 default = nil)
  if valid_608047 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_608047
  var valid_608048 = query.getOrDefault("OptionGroupName")
  valid_608048 = validateParameter(valid_608048, JString, required = false,
                                 default = nil)
  if valid_608048 != nil:
    section.add "OptionGroupName", valid_608048
  var valid_608049 = query.getOrDefault("Version")
  valid_608049 = validateParameter(valid_608049, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608049 != nil:
    section.add "Version", valid_608049
  var valid_608050 = query.getOrDefault("DBSubnetGroupName")
  valid_608050 = validateParameter(valid_608050, JString, required = false,
                                 default = nil)
  if valid_608050 != nil:
    section.add "DBSubnetGroupName", valid_608050
  var valid_608051 = query.getOrDefault("DBInstanceClass")
  valid_608051 = validateParameter(valid_608051, JString, required = false,
                                 default = nil)
  if valid_608051 != nil:
    section.add "DBInstanceClass", valid_608051
  var valid_608052 = query.getOrDefault("PreferredBackupWindow")
  valid_608052 = validateParameter(valid_608052, JString, required = false,
                                 default = nil)
  if valid_608052 != nil:
    section.add "PreferredBackupWindow", valid_608052
  var valid_608053 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_608053 = validateParameter(valid_608053, JString, required = false,
                                 default = nil)
  if valid_608053 != nil:
    section.add "PreferredMaintenanceWindow", valid_608053
  var valid_608054 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_608054 = validateParameter(valid_608054, JBool, required = false, default = nil)
  if valid_608054 != nil:
    section.add "AutoMinorVersionUpgrade", valid_608054
  var valid_608055 = query.getOrDefault("Iops")
  valid_608055 = validateParameter(valid_608055, JInt, required = false, default = nil)
  if valid_608055 != nil:
    section.add "Iops", valid_608055
  var valid_608056 = query.getOrDefault("DomainIAMRoleName")
  valid_608056 = validateParameter(valid_608056, JString, required = false,
                                 default = nil)
  if valid_608056 != nil:
    section.add "DomainIAMRoleName", valid_608056
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_608057 = header.getOrDefault("X-Amz-Security-Token")
  valid_608057 = validateParameter(valid_608057, JString, required = false,
                                 default = nil)
  if valid_608057 != nil:
    section.add "X-Amz-Security-Token", valid_608057
  var valid_608058 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608058 = validateParameter(valid_608058, JString, required = false,
                                 default = nil)
  if valid_608058 != nil:
    section.add "X-Amz-SignedHeaders", valid_608058
  var valid_608059 = header.getOrDefault("X-Amz-Signature")
  valid_608059 = validateParameter(valid_608059, JString, required = false,
                                 default = nil)
  if valid_608059 != nil:
    section.add "X-Amz-Signature", valid_608059
  var valid_608060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608060 = validateParameter(valid_608060, JString, required = false,
                                 default = nil)
  if valid_608060 != nil:
    section.add "X-Amz-Content-Sha256", valid_608060
  var valid_608061 = header.getOrDefault("X-Amz-Date")
  valid_608061 = validateParameter(valid_608061, JString, required = false,
                                 default = nil)
  if valid_608061 != nil:
    section.add "X-Amz-Date", valid_608061
  var valid_608062 = header.getOrDefault("X-Amz-Credential")
  valid_608062 = validateParameter(valid_608062, JString, required = false,
                                 default = nil)
  if valid_608062 != nil:
    section.add "X-Amz-Credential", valid_608062
  var valid_608063 = header.getOrDefault("X-Amz-Algorithm")
  valid_608063 = validateParameter(valid_608063, JString, required = false,
                                 default = nil)
  if valid_608063 != nil:
    section.add "X-Amz-Algorithm", valid_608063
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608064: Call_GetModifyDBInstance_608014; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_608064.validator(path, query, header, formData, body)
  let scheme = call_608064.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608064.url(scheme.get, call_608064.host, call_608064.base,
                         call_608064.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608064, url, valid)

proc call*(call_608065: Call_GetModifyDBInstance_608014;
          DBInstanceIdentifier: string; CopyTagsToSnapshot: bool = false;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0; EngineVersion: string = "";
          Action: string = "ModifyDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          PromotionTier: int = 0; CACertificateIdentifier: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil;
          ApplyImmediately: bool = false; AllowMajorVersionUpgrade: bool = false;
          MasterUserPassword: string = ""; PerformanceInsightsKMSKeyId: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSubnetGroupName: string = ""; DBInstanceClass: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   Action: string (required)
  ##   Domain: string
  ##         : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  var query_608066 = newJObject()
  add(query_608066, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_608066, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_608066, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_608066, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_608066.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_608066.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_608066, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_608066, "EngineVersion", newJString(EngineVersion))
  add(query_608066, "Action", newJString(Action))
  add(query_608066, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_608066.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608066, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_608066, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_608066, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_608066, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_608066, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_608066, "DeletionProtection", newJBool(DeletionProtection))
  add(query_608066, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608066, "LicenseModel", newJString(LicenseModel))
  add(query_608066, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608066, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_608066, "PromotionTier", newJInt(PromotionTier))
  add(query_608066, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_608066, "StorageType", newJString(StorageType))
  add(query_608066, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_608066, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_608066.add "DBSecurityGroups", DBSecurityGroups
  add(query_608066, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_608066, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_608066, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_608066, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_608066, "OptionGroupName", newJString(OptionGroupName))
  add(query_608066, "Version", newJString(Version))
  add(query_608066, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608066, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_608066, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_608066, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_608066, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_608066, "Iops", newJInt(Iops))
  add(query_608066, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_608065.call(nil, query_608066, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_608014(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_608015, base: "/",
    url: url_GetModifyDBInstance_608016, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_608138 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBParameterGroup_608140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_608139(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608141 = query.getOrDefault("Action")
  valid_608141 = validateParameter(valid_608141, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_608141 != nil:
    section.add "Action", valid_608141
  var valid_608142 = query.getOrDefault("Version")
  valid_608142 = validateParameter(valid_608142, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608142 != nil:
    section.add "Version", valid_608142
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608143 = header.getOrDefault("X-Amz-Signature")
  valid_608143 = validateParameter(valid_608143, JString, required = false,
                                 default = nil)
  if valid_608143 != nil:
    section.add "X-Amz-Signature", valid_608143
  var valid_608144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608144 = validateParameter(valid_608144, JString, required = false,
                                 default = nil)
  if valid_608144 != nil:
    section.add "X-Amz-Content-Sha256", valid_608144
  var valid_608145 = header.getOrDefault("X-Amz-Date")
  valid_608145 = validateParameter(valid_608145, JString, required = false,
                                 default = nil)
  if valid_608145 != nil:
    section.add "X-Amz-Date", valid_608145
  var valid_608146 = header.getOrDefault("X-Amz-Credential")
  valid_608146 = validateParameter(valid_608146, JString, required = false,
                                 default = nil)
  if valid_608146 != nil:
    section.add "X-Amz-Credential", valid_608146
  var valid_608147 = header.getOrDefault("X-Amz-Security-Token")
  valid_608147 = validateParameter(valid_608147, JString, required = false,
                                 default = nil)
  if valid_608147 != nil:
    section.add "X-Amz-Security-Token", valid_608147
  var valid_608148 = header.getOrDefault("X-Amz-Algorithm")
  valid_608148 = validateParameter(valid_608148, JString, required = false,
                                 default = nil)
  if valid_608148 != nil:
    section.add "X-Amz-Algorithm", valid_608148
  var valid_608149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608149 = validateParameter(valid_608149, JString, required = false,
                                 default = nil)
  if valid_608149 != nil:
    section.add "X-Amz-SignedHeaders", valid_608149
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_608150 = formData.getOrDefault("DBParameterGroupName")
  valid_608150 = validateParameter(valid_608150, JString, required = true,
                                 default = nil)
  if valid_608150 != nil:
    section.add "DBParameterGroupName", valid_608150
  var valid_608151 = formData.getOrDefault("Parameters")
  valid_608151 = validateParameter(valid_608151, JArray, required = true, default = nil)
  if valid_608151 != nil:
    section.add "Parameters", valid_608151
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608152: Call_PostModifyDBParameterGroup_608138; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_608152.validator(path, query, header, formData, body)
  let scheme = call_608152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608152.url(scheme.get, call_608152.host, call_608152.base,
                         call_608152.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608152, url, valid)

proc call*(call_608153: Call_PostModifyDBParameterGroup_608138;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_608154 = newJObject()
  var formData_608155 = newJObject()
  add(formData_608155, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608154, "Action", newJString(Action))
  if Parameters != nil:
    formData_608155.add "Parameters", Parameters
  add(query_608154, "Version", newJString(Version))
  result = call_608153.call(nil, query_608154, nil, formData_608155, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_608138(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_608139, base: "/",
    url: url_PostModifyDBParameterGroup_608140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_608121 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBParameterGroup_608123(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_608122(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_608124 = query.getOrDefault("DBParameterGroupName")
  valid_608124 = validateParameter(valid_608124, JString, required = true,
                                 default = nil)
  if valid_608124 != nil:
    section.add "DBParameterGroupName", valid_608124
  var valid_608125 = query.getOrDefault("Parameters")
  valid_608125 = validateParameter(valid_608125, JArray, required = true, default = nil)
  if valid_608125 != nil:
    section.add "Parameters", valid_608125
  var valid_608126 = query.getOrDefault("Action")
  valid_608126 = validateParameter(valid_608126, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_608126 != nil:
    section.add "Action", valid_608126
  var valid_608127 = query.getOrDefault("Version")
  valid_608127 = validateParameter(valid_608127, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608127 != nil:
    section.add "Version", valid_608127
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608128 = header.getOrDefault("X-Amz-Signature")
  valid_608128 = validateParameter(valid_608128, JString, required = false,
                                 default = nil)
  if valid_608128 != nil:
    section.add "X-Amz-Signature", valid_608128
  var valid_608129 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608129 = validateParameter(valid_608129, JString, required = false,
                                 default = nil)
  if valid_608129 != nil:
    section.add "X-Amz-Content-Sha256", valid_608129
  var valid_608130 = header.getOrDefault("X-Amz-Date")
  valid_608130 = validateParameter(valid_608130, JString, required = false,
                                 default = nil)
  if valid_608130 != nil:
    section.add "X-Amz-Date", valid_608130
  var valid_608131 = header.getOrDefault("X-Amz-Credential")
  valid_608131 = validateParameter(valid_608131, JString, required = false,
                                 default = nil)
  if valid_608131 != nil:
    section.add "X-Amz-Credential", valid_608131
  var valid_608132 = header.getOrDefault("X-Amz-Security-Token")
  valid_608132 = validateParameter(valid_608132, JString, required = false,
                                 default = nil)
  if valid_608132 != nil:
    section.add "X-Amz-Security-Token", valid_608132
  var valid_608133 = header.getOrDefault("X-Amz-Algorithm")
  valid_608133 = validateParameter(valid_608133, JString, required = false,
                                 default = nil)
  if valid_608133 != nil:
    section.add "X-Amz-Algorithm", valid_608133
  var valid_608134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608134 = validateParameter(valid_608134, JString, required = false,
                                 default = nil)
  if valid_608134 != nil:
    section.add "X-Amz-SignedHeaders", valid_608134
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608135: Call_GetModifyDBParameterGroup_608121; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_608135.validator(path, query, header, formData, body)
  let scheme = call_608135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608135.url(scheme.get, call_608135.host, call_608135.base,
                         call_608135.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608135, url, valid)

proc call*(call_608136: Call_GetModifyDBParameterGroup_608121;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608137 = newJObject()
  add(query_608137, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_608137.add "Parameters", Parameters
  add(query_608137, "Action", newJString(Action))
  add(query_608137, "Version", newJString(Version))
  result = call_608136.call(nil, query_608137, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_608121(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_608122, base: "/",
    url: url_GetModifyDBParameterGroup_608123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_608174 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBSubnetGroup_608176(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_608175(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608177 = query.getOrDefault("Action")
  valid_608177 = validateParameter(valid_608177, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_608177 != nil:
    section.add "Action", valid_608177
  var valid_608178 = query.getOrDefault("Version")
  valid_608178 = validateParameter(valid_608178, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608178 != nil:
    section.add "Version", valid_608178
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608179 = header.getOrDefault("X-Amz-Signature")
  valid_608179 = validateParameter(valid_608179, JString, required = false,
                                 default = nil)
  if valid_608179 != nil:
    section.add "X-Amz-Signature", valid_608179
  var valid_608180 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608180 = validateParameter(valid_608180, JString, required = false,
                                 default = nil)
  if valid_608180 != nil:
    section.add "X-Amz-Content-Sha256", valid_608180
  var valid_608181 = header.getOrDefault("X-Amz-Date")
  valid_608181 = validateParameter(valid_608181, JString, required = false,
                                 default = nil)
  if valid_608181 != nil:
    section.add "X-Amz-Date", valid_608181
  var valid_608182 = header.getOrDefault("X-Amz-Credential")
  valid_608182 = validateParameter(valid_608182, JString, required = false,
                                 default = nil)
  if valid_608182 != nil:
    section.add "X-Amz-Credential", valid_608182
  var valid_608183 = header.getOrDefault("X-Amz-Security-Token")
  valid_608183 = validateParameter(valid_608183, JString, required = false,
                                 default = nil)
  if valid_608183 != nil:
    section.add "X-Amz-Security-Token", valid_608183
  var valid_608184 = header.getOrDefault("X-Amz-Algorithm")
  valid_608184 = validateParameter(valid_608184, JString, required = false,
                                 default = nil)
  if valid_608184 != nil:
    section.add "X-Amz-Algorithm", valid_608184
  var valid_608185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608185 = validateParameter(valid_608185, JString, required = false,
                                 default = nil)
  if valid_608185 != nil:
    section.add "X-Amz-SignedHeaders", valid_608185
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_608186 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_608186 = validateParameter(valid_608186, JString, required = false,
                                 default = nil)
  if valid_608186 != nil:
    section.add "DBSubnetGroupDescription", valid_608186
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_608187 = formData.getOrDefault("DBSubnetGroupName")
  valid_608187 = validateParameter(valid_608187, JString, required = true,
                                 default = nil)
  if valid_608187 != nil:
    section.add "DBSubnetGroupName", valid_608187
  var valid_608188 = formData.getOrDefault("SubnetIds")
  valid_608188 = validateParameter(valid_608188, JArray, required = true, default = nil)
  if valid_608188 != nil:
    section.add "SubnetIds", valid_608188
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608189: Call_PostModifyDBSubnetGroup_608174; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_608189.validator(path, query, header, formData, body)
  let scheme = call_608189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608189.url(scheme.get, call_608189.host, call_608189.base,
                         call_608189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608189, url, valid)

proc call*(call_608190: Call_PostModifyDBSubnetGroup_608174;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_608191 = newJObject()
  var formData_608192 = newJObject()
  add(formData_608192, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_608191, "Action", newJString(Action))
  add(formData_608192, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608191, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_608192.add "SubnetIds", SubnetIds
  result = call_608190.call(nil, query_608191, nil, formData_608192, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_608174(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_608175, base: "/",
    url: url_PostModifyDBSubnetGroup_608176, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_608156 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBSubnetGroup_608158(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_608157(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_608159 = query.getOrDefault("SubnetIds")
  valid_608159 = validateParameter(valid_608159, JArray, required = true, default = nil)
  if valid_608159 != nil:
    section.add "SubnetIds", valid_608159
  var valid_608160 = query.getOrDefault("Action")
  valid_608160 = validateParameter(valid_608160, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_608160 != nil:
    section.add "Action", valid_608160
  var valid_608161 = query.getOrDefault("DBSubnetGroupDescription")
  valid_608161 = validateParameter(valid_608161, JString, required = false,
                                 default = nil)
  if valid_608161 != nil:
    section.add "DBSubnetGroupDescription", valid_608161
  var valid_608162 = query.getOrDefault("DBSubnetGroupName")
  valid_608162 = validateParameter(valid_608162, JString, required = true,
                                 default = nil)
  if valid_608162 != nil:
    section.add "DBSubnetGroupName", valid_608162
  var valid_608163 = query.getOrDefault("Version")
  valid_608163 = validateParameter(valid_608163, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608163 != nil:
    section.add "Version", valid_608163
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608164 = header.getOrDefault("X-Amz-Signature")
  valid_608164 = validateParameter(valid_608164, JString, required = false,
                                 default = nil)
  if valid_608164 != nil:
    section.add "X-Amz-Signature", valid_608164
  var valid_608165 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608165 = validateParameter(valid_608165, JString, required = false,
                                 default = nil)
  if valid_608165 != nil:
    section.add "X-Amz-Content-Sha256", valid_608165
  var valid_608166 = header.getOrDefault("X-Amz-Date")
  valid_608166 = validateParameter(valid_608166, JString, required = false,
                                 default = nil)
  if valid_608166 != nil:
    section.add "X-Amz-Date", valid_608166
  var valid_608167 = header.getOrDefault("X-Amz-Credential")
  valid_608167 = validateParameter(valid_608167, JString, required = false,
                                 default = nil)
  if valid_608167 != nil:
    section.add "X-Amz-Credential", valid_608167
  var valid_608168 = header.getOrDefault("X-Amz-Security-Token")
  valid_608168 = validateParameter(valid_608168, JString, required = false,
                                 default = nil)
  if valid_608168 != nil:
    section.add "X-Amz-Security-Token", valid_608168
  var valid_608169 = header.getOrDefault("X-Amz-Algorithm")
  valid_608169 = validateParameter(valid_608169, JString, required = false,
                                 default = nil)
  if valid_608169 != nil:
    section.add "X-Amz-Algorithm", valid_608169
  var valid_608170 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608170 = validateParameter(valid_608170, JString, required = false,
                                 default = nil)
  if valid_608170 != nil:
    section.add "X-Amz-SignedHeaders", valid_608170
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608171: Call_GetModifyDBSubnetGroup_608156; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_608171.validator(path, query, header, formData, body)
  let scheme = call_608171.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608171.url(scheme.get, call_608171.host, call_608171.base,
                         call_608171.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608171, url, valid)

proc call*(call_608172: Call_GetModifyDBSubnetGroup_608156; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_608173 = newJObject()
  if SubnetIds != nil:
    query_608173.add "SubnetIds", SubnetIds
  add(query_608173, "Action", newJString(Action))
  add(query_608173, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_608173, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608173, "Version", newJString(Version))
  result = call_608172.call(nil, query_608173, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_608156(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_608157, base: "/",
    url: url_GetModifyDBSubnetGroup_608158, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_608213 = ref object of OpenApiRestCall_605573
proc url_PostModifyEventSubscription_608215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_608214(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608216 = query.getOrDefault("Action")
  valid_608216 = validateParameter(valid_608216, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_608216 != nil:
    section.add "Action", valid_608216
  var valid_608217 = query.getOrDefault("Version")
  valid_608217 = validateParameter(valid_608217, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608217 != nil:
    section.add "Version", valid_608217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608218 = header.getOrDefault("X-Amz-Signature")
  valid_608218 = validateParameter(valid_608218, JString, required = false,
                                 default = nil)
  if valid_608218 != nil:
    section.add "X-Amz-Signature", valid_608218
  var valid_608219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608219 = validateParameter(valid_608219, JString, required = false,
                                 default = nil)
  if valid_608219 != nil:
    section.add "X-Amz-Content-Sha256", valid_608219
  var valid_608220 = header.getOrDefault("X-Amz-Date")
  valid_608220 = validateParameter(valid_608220, JString, required = false,
                                 default = nil)
  if valid_608220 != nil:
    section.add "X-Amz-Date", valid_608220
  var valid_608221 = header.getOrDefault("X-Amz-Credential")
  valid_608221 = validateParameter(valid_608221, JString, required = false,
                                 default = nil)
  if valid_608221 != nil:
    section.add "X-Amz-Credential", valid_608221
  var valid_608222 = header.getOrDefault("X-Amz-Security-Token")
  valid_608222 = validateParameter(valid_608222, JString, required = false,
                                 default = nil)
  if valid_608222 != nil:
    section.add "X-Amz-Security-Token", valid_608222
  var valid_608223 = header.getOrDefault("X-Amz-Algorithm")
  valid_608223 = validateParameter(valid_608223, JString, required = false,
                                 default = nil)
  if valid_608223 != nil:
    section.add "X-Amz-Algorithm", valid_608223
  var valid_608224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608224 = validateParameter(valid_608224, JString, required = false,
                                 default = nil)
  if valid_608224 != nil:
    section.add "X-Amz-SignedHeaders", valid_608224
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  section = newJObject()
  var valid_608225 = formData.getOrDefault("SnsTopicArn")
  valid_608225 = validateParameter(valid_608225, JString, required = false,
                                 default = nil)
  if valid_608225 != nil:
    section.add "SnsTopicArn", valid_608225
  var valid_608226 = formData.getOrDefault("Enabled")
  valid_608226 = validateParameter(valid_608226, JBool, required = false, default = nil)
  if valid_608226 != nil:
    section.add "Enabled", valid_608226
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_608227 = formData.getOrDefault("SubscriptionName")
  valid_608227 = validateParameter(valid_608227, JString, required = true,
                                 default = nil)
  if valid_608227 != nil:
    section.add "SubscriptionName", valid_608227
  var valid_608228 = formData.getOrDefault("SourceType")
  valid_608228 = validateParameter(valid_608228, JString, required = false,
                                 default = nil)
  if valid_608228 != nil:
    section.add "SourceType", valid_608228
  var valid_608229 = formData.getOrDefault("EventCategories")
  valid_608229 = validateParameter(valid_608229, JArray, required = false,
                                 default = nil)
  if valid_608229 != nil:
    section.add "EventCategories", valid_608229
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608230: Call_PostModifyEventSubscription_608213; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_608230.validator(path, query, header, formData, body)
  let scheme = call_608230.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608230.url(scheme.get, call_608230.host, call_608230.base,
                         call_608230.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608230, url, valid)

proc call*(call_608231: Call_PostModifyEventSubscription_608213;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608232 = newJObject()
  var formData_608233 = newJObject()
  add(formData_608233, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_608233, "Enabled", newJBool(Enabled))
  add(formData_608233, "SubscriptionName", newJString(SubscriptionName))
  add(formData_608233, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_608233.add "EventCategories", EventCategories
  add(query_608232, "Action", newJString(Action))
  add(query_608232, "Version", newJString(Version))
  result = call_608231.call(nil, query_608232, nil, formData_608233, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_608213(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_608214, base: "/",
    url: url_PostModifyEventSubscription_608215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_608193 = ref object of OpenApiRestCall_605573
proc url_GetModifyEventSubscription_608195(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_608194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_608196 = query.getOrDefault("SourceType")
  valid_608196 = validateParameter(valid_608196, JString, required = false,
                                 default = nil)
  if valid_608196 != nil:
    section.add "SourceType", valid_608196
  var valid_608197 = query.getOrDefault("Enabled")
  valid_608197 = validateParameter(valid_608197, JBool, required = false, default = nil)
  if valid_608197 != nil:
    section.add "Enabled", valid_608197
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_608198 = query.getOrDefault("SubscriptionName")
  valid_608198 = validateParameter(valid_608198, JString, required = true,
                                 default = nil)
  if valid_608198 != nil:
    section.add "SubscriptionName", valid_608198
  var valid_608199 = query.getOrDefault("EventCategories")
  valid_608199 = validateParameter(valid_608199, JArray, required = false,
                                 default = nil)
  if valid_608199 != nil:
    section.add "EventCategories", valid_608199
  var valid_608200 = query.getOrDefault("Action")
  valid_608200 = validateParameter(valid_608200, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_608200 != nil:
    section.add "Action", valid_608200
  var valid_608201 = query.getOrDefault("SnsTopicArn")
  valid_608201 = validateParameter(valid_608201, JString, required = false,
                                 default = nil)
  if valid_608201 != nil:
    section.add "SnsTopicArn", valid_608201
  var valid_608202 = query.getOrDefault("Version")
  valid_608202 = validateParameter(valid_608202, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608202 != nil:
    section.add "Version", valid_608202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608203 = header.getOrDefault("X-Amz-Signature")
  valid_608203 = validateParameter(valid_608203, JString, required = false,
                                 default = nil)
  if valid_608203 != nil:
    section.add "X-Amz-Signature", valid_608203
  var valid_608204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608204 = validateParameter(valid_608204, JString, required = false,
                                 default = nil)
  if valid_608204 != nil:
    section.add "X-Amz-Content-Sha256", valid_608204
  var valid_608205 = header.getOrDefault("X-Amz-Date")
  valid_608205 = validateParameter(valid_608205, JString, required = false,
                                 default = nil)
  if valid_608205 != nil:
    section.add "X-Amz-Date", valid_608205
  var valid_608206 = header.getOrDefault("X-Amz-Credential")
  valid_608206 = validateParameter(valid_608206, JString, required = false,
                                 default = nil)
  if valid_608206 != nil:
    section.add "X-Amz-Credential", valid_608206
  var valid_608207 = header.getOrDefault("X-Amz-Security-Token")
  valid_608207 = validateParameter(valid_608207, JString, required = false,
                                 default = nil)
  if valid_608207 != nil:
    section.add "X-Amz-Security-Token", valid_608207
  var valid_608208 = header.getOrDefault("X-Amz-Algorithm")
  valid_608208 = validateParameter(valid_608208, JString, required = false,
                                 default = nil)
  if valid_608208 != nil:
    section.add "X-Amz-Algorithm", valid_608208
  var valid_608209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608209 = validateParameter(valid_608209, JString, required = false,
                                 default = nil)
  if valid_608209 != nil:
    section.add "X-Amz-SignedHeaders", valid_608209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608210: Call_GetModifyEventSubscription_608193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_608210.validator(path, query, header, formData, body)
  let scheme = call_608210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608210.url(scheme.get, call_608210.host, call_608210.base,
                         call_608210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608210, url, valid)

proc call*(call_608211: Call_GetModifyEventSubscription_608193;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_608212 = newJObject()
  add(query_608212, "SourceType", newJString(SourceType))
  add(query_608212, "Enabled", newJBool(Enabled))
  add(query_608212, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_608212.add "EventCategories", EventCategories
  add(query_608212, "Action", newJString(Action))
  add(query_608212, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_608212, "Version", newJString(Version))
  result = call_608211.call(nil, query_608212, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_608193(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_608194, base: "/",
    url: url_GetModifyEventSubscription_608195,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_608250 = ref object of OpenApiRestCall_605573
proc url_PostPromoteReadReplicaDBCluster_608252(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_608251(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608253 = query.getOrDefault("Action")
  valid_608253 = validateParameter(valid_608253, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_608253 != nil:
    section.add "Action", valid_608253
  var valid_608254 = query.getOrDefault("Version")
  valid_608254 = validateParameter(valid_608254, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608254 != nil:
    section.add "Version", valid_608254
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608255 = header.getOrDefault("X-Amz-Signature")
  valid_608255 = validateParameter(valid_608255, JString, required = false,
                                 default = nil)
  if valid_608255 != nil:
    section.add "X-Amz-Signature", valid_608255
  var valid_608256 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608256 = validateParameter(valid_608256, JString, required = false,
                                 default = nil)
  if valid_608256 != nil:
    section.add "X-Amz-Content-Sha256", valid_608256
  var valid_608257 = header.getOrDefault("X-Amz-Date")
  valid_608257 = validateParameter(valid_608257, JString, required = false,
                                 default = nil)
  if valid_608257 != nil:
    section.add "X-Amz-Date", valid_608257
  var valid_608258 = header.getOrDefault("X-Amz-Credential")
  valid_608258 = validateParameter(valid_608258, JString, required = false,
                                 default = nil)
  if valid_608258 != nil:
    section.add "X-Amz-Credential", valid_608258
  var valid_608259 = header.getOrDefault("X-Amz-Security-Token")
  valid_608259 = validateParameter(valid_608259, JString, required = false,
                                 default = nil)
  if valid_608259 != nil:
    section.add "X-Amz-Security-Token", valid_608259
  var valid_608260 = header.getOrDefault("X-Amz-Algorithm")
  valid_608260 = validateParameter(valid_608260, JString, required = false,
                                 default = nil)
  if valid_608260 != nil:
    section.add "X-Amz-Algorithm", valid_608260
  var valid_608261 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608261 = validateParameter(valid_608261, JString, required = false,
                                 default = nil)
  if valid_608261 != nil:
    section.add "X-Amz-SignedHeaders", valid_608261
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608262 = formData.getOrDefault("DBClusterIdentifier")
  valid_608262 = validateParameter(valid_608262, JString, required = true,
                                 default = nil)
  if valid_608262 != nil:
    section.add "DBClusterIdentifier", valid_608262
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608263: Call_PostPromoteReadReplicaDBCluster_608250;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_608263.validator(path, query, header, formData, body)
  let scheme = call_608263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608263.url(scheme.get, call_608263.host, call_608263.base,
                         call_608263.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608263, url, valid)

proc call*(call_608264: Call_PostPromoteReadReplicaDBCluster_608250;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  var query_608265 = newJObject()
  var formData_608266 = newJObject()
  add(query_608265, "Action", newJString(Action))
  add(query_608265, "Version", newJString(Version))
  add(formData_608266, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608264.call(nil, query_608265, nil, formData_608266, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_608250(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_608251, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_608252,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_608234 = ref object of OpenApiRestCall_605573
proc url_GetPromoteReadReplicaDBCluster_608236(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_608235(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608237 = query.getOrDefault("DBClusterIdentifier")
  valid_608237 = validateParameter(valid_608237, JString, required = true,
                                 default = nil)
  if valid_608237 != nil:
    section.add "DBClusterIdentifier", valid_608237
  var valid_608238 = query.getOrDefault("Action")
  valid_608238 = validateParameter(valid_608238, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_608238 != nil:
    section.add "Action", valid_608238
  var valid_608239 = query.getOrDefault("Version")
  valid_608239 = validateParameter(valid_608239, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608239 != nil:
    section.add "Version", valid_608239
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608240 = header.getOrDefault("X-Amz-Signature")
  valid_608240 = validateParameter(valid_608240, JString, required = false,
                                 default = nil)
  if valid_608240 != nil:
    section.add "X-Amz-Signature", valid_608240
  var valid_608241 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608241 = validateParameter(valid_608241, JString, required = false,
                                 default = nil)
  if valid_608241 != nil:
    section.add "X-Amz-Content-Sha256", valid_608241
  var valid_608242 = header.getOrDefault("X-Amz-Date")
  valid_608242 = validateParameter(valid_608242, JString, required = false,
                                 default = nil)
  if valid_608242 != nil:
    section.add "X-Amz-Date", valid_608242
  var valid_608243 = header.getOrDefault("X-Amz-Credential")
  valid_608243 = validateParameter(valid_608243, JString, required = false,
                                 default = nil)
  if valid_608243 != nil:
    section.add "X-Amz-Credential", valid_608243
  var valid_608244 = header.getOrDefault("X-Amz-Security-Token")
  valid_608244 = validateParameter(valid_608244, JString, required = false,
                                 default = nil)
  if valid_608244 != nil:
    section.add "X-Amz-Security-Token", valid_608244
  var valid_608245 = header.getOrDefault("X-Amz-Algorithm")
  valid_608245 = validateParameter(valid_608245, JString, required = false,
                                 default = nil)
  if valid_608245 != nil:
    section.add "X-Amz-Algorithm", valid_608245
  var valid_608246 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608246 = validateParameter(valid_608246, JString, required = false,
                                 default = nil)
  if valid_608246 != nil:
    section.add "X-Amz-SignedHeaders", valid_608246
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608247: Call_GetPromoteReadReplicaDBCluster_608234; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_608247.validator(path, query, header, formData, body)
  let scheme = call_608247.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608247.url(scheme.get, call_608247.host, call_608247.base,
                         call_608247.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608247, url, valid)

proc call*(call_608248: Call_GetPromoteReadReplicaDBCluster_608234;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608249 = newJObject()
  add(query_608249, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608249, "Action", newJString(Action))
  add(query_608249, "Version", newJString(Version))
  result = call_608248.call(nil, query_608249, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_608234(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_608235, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_608236,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_608284 = ref object of OpenApiRestCall_605573
proc url_PostRebootDBInstance_608286(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_608285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608287 = query.getOrDefault("Action")
  valid_608287 = validateParameter(valid_608287, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_608287 != nil:
    section.add "Action", valid_608287
  var valid_608288 = query.getOrDefault("Version")
  valid_608288 = validateParameter(valid_608288, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608288 != nil:
    section.add "Version", valid_608288
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608289 = header.getOrDefault("X-Amz-Signature")
  valid_608289 = validateParameter(valid_608289, JString, required = false,
                                 default = nil)
  if valid_608289 != nil:
    section.add "X-Amz-Signature", valid_608289
  var valid_608290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608290 = validateParameter(valid_608290, JString, required = false,
                                 default = nil)
  if valid_608290 != nil:
    section.add "X-Amz-Content-Sha256", valid_608290
  var valid_608291 = header.getOrDefault("X-Amz-Date")
  valid_608291 = validateParameter(valid_608291, JString, required = false,
                                 default = nil)
  if valid_608291 != nil:
    section.add "X-Amz-Date", valid_608291
  var valid_608292 = header.getOrDefault("X-Amz-Credential")
  valid_608292 = validateParameter(valid_608292, JString, required = false,
                                 default = nil)
  if valid_608292 != nil:
    section.add "X-Amz-Credential", valid_608292
  var valid_608293 = header.getOrDefault("X-Amz-Security-Token")
  valid_608293 = validateParameter(valid_608293, JString, required = false,
                                 default = nil)
  if valid_608293 != nil:
    section.add "X-Amz-Security-Token", valid_608293
  var valid_608294 = header.getOrDefault("X-Amz-Algorithm")
  valid_608294 = validateParameter(valid_608294, JString, required = false,
                                 default = nil)
  if valid_608294 != nil:
    section.add "X-Amz-Algorithm", valid_608294
  var valid_608295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608295 = validateParameter(valid_608295, JString, required = false,
                                 default = nil)
  if valid_608295 != nil:
    section.add "X-Amz-SignedHeaders", valid_608295
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_608296 = formData.getOrDefault("ForceFailover")
  valid_608296 = validateParameter(valid_608296, JBool, required = false, default = nil)
  if valid_608296 != nil:
    section.add "ForceFailover", valid_608296
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608297 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608297 = validateParameter(valid_608297, JString, required = true,
                                 default = nil)
  if valid_608297 != nil:
    section.add "DBInstanceIdentifier", valid_608297
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608298: Call_PostRebootDBInstance_608284; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_608298.validator(path, query, header, formData, body)
  let scheme = call_608298.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608298.url(scheme.get, call_608298.host, call_608298.base,
                         call_608298.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608298, url, valid)

proc call*(call_608299: Call_PostRebootDBInstance_608284;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608300 = newJObject()
  var formData_608301 = newJObject()
  add(formData_608301, "ForceFailover", newJBool(ForceFailover))
  add(formData_608301, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608300, "Action", newJString(Action))
  add(query_608300, "Version", newJString(Version))
  result = call_608299.call(nil, query_608300, nil, formData_608301, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_608284(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_608285, base: "/",
    url: url_PostRebootDBInstance_608286, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_608267 = ref object of OpenApiRestCall_605573
proc url_GetRebootDBInstance_608269(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_608268(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608270 = query.getOrDefault("ForceFailover")
  valid_608270 = validateParameter(valid_608270, JBool, required = false, default = nil)
  if valid_608270 != nil:
    section.add "ForceFailover", valid_608270
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608271 = query.getOrDefault("DBInstanceIdentifier")
  valid_608271 = validateParameter(valid_608271, JString, required = true,
                                 default = nil)
  if valid_608271 != nil:
    section.add "DBInstanceIdentifier", valid_608271
  var valid_608272 = query.getOrDefault("Action")
  valid_608272 = validateParameter(valid_608272, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_608272 != nil:
    section.add "Action", valid_608272
  var valid_608273 = query.getOrDefault("Version")
  valid_608273 = validateParameter(valid_608273, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608273 != nil:
    section.add "Version", valid_608273
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608274 = header.getOrDefault("X-Amz-Signature")
  valid_608274 = validateParameter(valid_608274, JString, required = false,
                                 default = nil)
  if valid_608274 != nil:
    section.add "X-Amz-Signature", valid_608274
  var valid_608275 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608275 = validateParameter(valid_608275, JString, required = false,
                                 default = nil)
  if valid_608275 != nil:
    section.add "X-Amz-Content-Sha256", valid_608275
  var valid_608276 = header.getOrDefault("X-Amz-Date")
  valid_608276 = validateParameter(valid_608276, JString, required = false,
                                 default = nil)
  if valid_608276 != nil:
    section.add "X-Amz-Date", valid_608276
  var valid_608277 = header.getOrDefault("X-Amz-Credential")
  valid_608277 = validateParameter(valid_608277, JString, required = false,
                                 default = nil)
  if valid_608277 != nil:
    section.add "X-Amz-Credential", valid_608277
  var valid_608278 = header.getOrDefault("X-Amz-Security-Token")
  valid_608278 = validateParameter(valid_608278, JString, required = false,
                                 default = nil)
  if valid_608278 != nil:
    section.add "X-Amz-Security-Token", valid_608278
  var valid_608279 = header.getOrDefault("X-Amz-Algorithm")
  valid_608279 = validateParameter(valid_608279, JString, required = false,
                                 default = nil)
  if valid_608279 != nil:
    section.add "X-Amz-Algorithm", valid_608279
  var valid_608280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608280 = validateParameter(valid_608280, JString, required = false,
                                 default = nil)
  if valid_608280 != nil:
    section.add "X-Amz-SignedHeaders", valid_608280
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608281: Call_GetRebootDBInstance_608267; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_608281.validator(path, query, header, formData, body)
  let scheme = call_608281.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608281.url(scheme.get, call_608281.host, call_608281.base,
                         call_608281.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608281, url, valid)

proc call*(call_608282: Call_GetRebootDBInstance_608267;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608283 = newJObject()
  add(query_608283, "ForceFailover", newJBool(ForceFailover))
  add(query_608283, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608283, "Action", newJString(Action))
  add(query_608283, "Version", newJString(Version))
  result = call_608282.call(nil, query_608283, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_608267(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_608268, base: "/",
    url: url_GetRebootDBInstance_608269, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_608319 = ref object of OpenApiRestCall_605573
proc url_PostRemoveRoleFromDBCluster_608321(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_608320(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608322 = query.getOrDefault("Action")
  valid_608322 = validateParameter(valid_608322, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_608322 != nil:
    section.add "Action", valid_608322
  var valid_608323 = query.getOrDefault("Version")
  valid_608323 = validateParameter(valid_608323, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608323 != nil:
    section.add "Version", valid_608323
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608324 = header.getOrDefault("X-Amz-Signature")
  valid_608324 = validateParameter(valid_608324, JString, required = false,
                                 default = nil)
  if valid_608324 != nil:
    section.add "X-Amz-Signature", valid_608324
  var valid_608325 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608325 = validateParameter(valid_608325, JString, required = false,
                                 default = nil)
  if valid_608325 != nil:
    section.add "X-Amz-Content-Sha256", valid_608325
  var valid_608326 = header.getOrDefault("X-Amz-Date")
  valid_608326 = validateParameter(valid_608326, JString, required = false,
                                 default = nil)
  if valid_608326 != nil:
    section.add "X-Amz-Date", valid_608326
  var valid_608327 = header.getOrDefault("X-Amz-Credential")
  valid_608327 = validateParameter(valid_608327, JString, required = false,
                                 default = nil)
  if valid_608327 != nil:
    section.add "X-Amz-Credential", valid_608327
  var valid_608328 = header.getOrDefault("X-Amz-Security-Token")
  valid_608328 = validateParameter(valid_608328, JString, required = false,
                                 default = nil)
  if valid_608328 != nil:
    section.add "X-Amz-Security-Token", valid_608328
  var valid_608329 = header.getOrDefault("X-Amz-Algorithm")
  valid_608329 = validateParameter(valid_608329, JString, required = false,
                                 default = nil)
  if valid_608329 != nil:
    section.add "X-Amz-Algorithm", valid_608329
  var valid_608330 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608330 = validateParameter(valid_608330, JString, required = false,
                                 default = nil)
  if valid_608330 != nil:
    section.add "X-Amz-SignedHeaders", valid_608330
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_608331 = formData.getOrDefault("RoleArn")
  valid_608331 = validateParameter(valid_608331, JString, required = true,
                                 default = nil)
  if valid_608331 != nil:
    section.add "RoleArn", valid_608331
  var valid_608332 = formData.getOrDefault("DBClusterIdentifier")
  valid_608332 = validateParameter(valid_608332, JString, required = true,
                                 default = nil)
  if valid_608332 != nil:
    section.add "DBClusterIdentifier", valid_608332
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608333: Call_PostRemoveRoleFromDBCluster_608319; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_608333.validator(path, query, header, formData, body)
  let scheme = call_608333.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608333.url(scheme.get, call_608333.host, call_608333.base,
                         call_608333.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608333, url, valid)

proc call*(call_608334: Call_PostRemoveRoleFromDBCluster_608319; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_608335 = newJObject()
  var formData_608336 = newJObject()
  add(formData_608336, "RoleArn", newJString(RoleArn))
  add(query_608335, "Action", newJString(Action))
  add(query_608335, "Version", newJString(Version))
  add(formData_608336, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608334.call(nil, query_608335, nil, formData_608336, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_608319(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_608320, base: "/",
    url: url_PostRemoveRoleFromDBCluster_608321,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_608302 = ref object of OpenApiRestCall_605573
proc url_GetRemoveRoleFromDBCluster_608304(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_608303(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_608305 = query.getOrDefault("RoleArn")
  valid_608305 = validateParameter(valid_608305, JString, required = true,
                                 default = nil)
  if valid_608305 != nil:
    section.add "RoleArn", valid_608305
  var valid_608306 = query.getOrDefault("DBClusterIdentifier")
  valid_608306 = validateParameter(valid_608306, JString, required = true,
                                 default = nil)
  if valid_608306 != nil:
    section.add "DBClusterIdentifier", valid_608306
  var valid_608307 = query.getOrDefault("Action")
  valid_608307 = validateParameter(valid_608307, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_608307 != nil:
    section.add "Action", valid_608307
  var valid_608308 = query.getOrDefault("Version")
  valid_608308 = validateParameter(valid_608308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608308 != nil:
    section.add "Version", valid_608308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608309 = header.getOrDefault("X-Amz-Signature")
  valid_608309 = validateParameter(valid_608309, JString, required = false,
                                 default = nil)
  if valid_608309 != nil:
    section.add "X-Amz-Signature", valid_608309
  var valid_608310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608310 = validateParameter(valid_608310, JString, required = false,
                                 default = nil)
  if valid_608310 != nil:
    section.add "X-Amz-Content-Sha256", valid_608310
  var valid_608311 = header.getOrDefault("X-Amz-Date")
  valid_608311 = validateParameter(valid_608311, JString, required = false,
                                 default = nil)
  if valid_608311 != nil:
    section.add "X-Amz-Date", valid_608311
  var valid_608312 = header.getOrDefault("X-Amz-Credential")
  valid_608312 = validateParameter(valid_608312, JString, required = false,
                                 default = nil)
  if valid_608312 != nil:
    section.add "X-Amz-Credential", valid_608312
  var valid_608313 = header.getOrDefault("X-Amz-Security-Token")
  valid_608313 = validateParameter(valid_608313, JString, required = false,
                                 default = nil)
  if valid_608313 != nil:
    section.add "X-Amz-Security-Token", valid_608313
  var valid_608314 = header.getOrDefault("X-Amz-Algorithm")
  valid_608314 = validateParameter(valid_608314, JString, required = false,
                                 default = nil)
  if valid_608314 != nil:
    section.add "X-Amz-Algorithm", valid_608314
  var valid_608315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608315 = validateParameter(valid_608315, JString, required = false,
                                 default = nil)
  if valid_608315 != nil:
    section.add "X-Amz-SignedHeaders", valid_608315
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608316: Call_GetRemoveRoleFromDBCluster_608302; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_608316.validator(path, query, header, formData, body)
  let scheme = call_608316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608316.url(scheme.get, call_608316.host, call_608316.base,
                         call_608316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608316, url, valid)

proc call*(call_608317: Call_GetRemoveRoleFromDBCluster_608302; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608318 = newJObject()
  add(query_608318, "RoleArn", newJString(RoleArn))
  add(query_608318, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608318, "Action", newJString(Action))
  add(query_608318, "Version", newJString(Version))
  result = call_608317.call(nil, query_608318, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_608302(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_608303, base: "/",
    url: url_GetRemoveRoleFromDBCluster_608304,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_608354 = ref object of OpenApiRestCall_605573
proc url_PostRemoveSourceIdentifierFromSubscription_608356(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_608355(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608357 = query.getOrDefault("Action")
  valid_608357 = validateParameter(valid_608357, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_608357 != nil:
    section.add "Action", valid_608357
  var valid_608358 = query.getOrDefault("Version")
  valid_608358 = validateParameter(valid_608358, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608358 != nil:
    section.add "Version", valid_608358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608359 = header.getOrDefault("X-Amz-Signature")
  valid_608359 = validateParameter(valid_608359, JString, required = false,
                                 default = nil)
  if valid_608359 != nil:
    section.add "X-Amz-Signature", valid_608359
  var valid_608360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608360 = validateParameter(valid_608360, JString, required = false,
                                 default = nil)
  if valid_608360 != nil:
    section.add "X-Amz-Content-Sha256", valid_608360
  var valid_608361 = header.getOrDefault("X-Amz-Date")
  valid_608361 = validateParameter(valid_608361, JString, required = false,
                                 default = nil)
  if valid_608361 != nil:
    section.add "X-Amz-Date", valid_608361
  var valid_608362 = header.getOrDefault("X-Amz-Credential")
  valid_608362 = validateParameter(valid_608362, JString, required = false,
                                 default = nil)
  if valid_608362 != nil:
    section.add "X-Amz-Credential", valid_608362
  var valid_608363 = header.getOrDefault("X-Amz-Security-Token")
  valid_608363 = validateParameter(valid_608363, JString, required = false,
                                 default = nil)
  if valid_608363 != nil:
    section.add "X-Amz-Security-Token", valid_608363
  var valid_608364 = header.getOrDefault("X-Amz-Algorithm")
  valid_608364 = validateParameter(valid_608364, JString, required = false,
                                 default = nil)
  if valid_608364 != nil:
    section.add "X-Amz-Algorithm", valid_608364
  var valid_608365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608365 = validateParameter(valid_608365, JString, required = false,
                                 default = nil)
  if valid_608365 != nil:
    section.add "X-Amz-SignedHeaders", valid_608365
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_608366 = formData.getOrDefault("SubscriptionName")
  valid_608366 = validateParameter(valid_608366, JString, required = true,
                                 default = nil)
  if valid_608366 != nil:
    section.add "SubscriptionName", valid_608366
  var valid_608367 = formData.getOrDefault("SourceIdentifier")
  valid_608367 = validateParameter(valid_608367, JString, required = true,
                                 default = nil)
  if valid_608367 != nil:
    section.add "SourceIdentifier", valid_608367
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608368: Call_PostRemoveSourceIdentifierFromSubscription_608354;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_608368.validator(path, query, header, formData, body)
  let scheme = call_608368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608368.url(scheme.get, call_608368.host, call_608368.base,
                         call_608368.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608368, url, valid)

proc call*(call_608369: Call_PostRemoveSourceIdentifierFromSubscription_608354;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608370 = newJObject()
  var formData_608371 = newJObject()
  add(formData_608371, "SubscriptionName", newJString(SubscriptionName))
  add(formData_608371, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_608370, "Action", newJString(Action))
  add(query_608370, "Version", newJString(Version))
  result = call_608369.call(nil, query_608370, nil, formData_608371, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_608354(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_608355,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_608356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_608337 = ref object of OpenApiRestCall_605573
proc url_GetRemoveSourceIdentifierFromSubscription_608339(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_608338(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_608340 = query.getOrDefault("SourceIdentifier")
  valid_608340 = validateParameter(valid_608340, JString, required = true,
                                 default = nil)
  if valid_608340 != nil:
    section.add "SourceIdentifier", valid_608340
  var valid_608341 = query.getOrDefault("SubscriptionName")
  valid_608341 = validateParameter(valid_608341, JString, required = true,
                                 default = nil)
  if valid_608341 != nil:
    section.add "SubscriptionName", valid_608341
  var valid_608342 = query.getOrDefault("Action")
  valid_608342 = validateParameter(valid_608342, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_608342 != nil:
    section.add "Action", valid_608342
  var valid_608343 = query.getOrDefault("Version")
  valid_608343 = validateParameter(valid_608343, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608343 != nil:
    section.add "Version", valid_608343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608344 = header.getOrDefault("X-Amz-Signature")
  valid_608344 = validateParameter(valid_608344, JString, required = false,
                                 default = nil)
  if valid_608344 != nil:
    section.add "X-Amz-Signature", valid_608344
  var valid_608345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608345 = validateParameter(valid_608345, JString, required = false,
                                 default = nil)
  if valid_608345 != nil:
    section.add "X-Amz-Content-Sha256", valid_608345
  var valid_608346 = header.getOrDefault("X-Amz-Date")
  valid_608346 = validateParameter(valid_608346, JString, required = false,
                                 default = nil)
  if valid_608346 != nil:
    section.add "X-Amz-Date", valid_608346
  var valid_608347 = header.getOrDefault("X-Amz-Credential")
  valid_608347 = validateParameter(valid_608347, JString, required = false,
                                 default = nil)
  if valid_608347 != nil:
    section.add "X-Amz-Credential", valid_608347
  var valid_608348 = header.getOrDefault("X-Amz-Security-Token")
  valid_608348 = validateParameter(valid_608348, JString, required = false,
                                 default = nil)
  if valid_608348 != nil:
    section.add "X-Amz-Security-Token", valid_608348
  var valid_608349 = header.getOrDefault("X-Amz-Algorithm")
  valid_608349 = validateParameter(valid_608349, JString, required = false,
                                 default = nil)
  if valid_608349 != nil:
    section.add "X-Amz-Algorithm", valid_608349
  var valid_608350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608350 = validateParameter(valid_608350, JString, required = false,
                                 default = nil)
  if valid_608350 != nil:
    section.add "X-Amz-SignedHeaders", valid_608350
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608351: Call_GetRemoveSourceIdentifierFromSubscription_608337;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_608351.validator(path, query, header, formData, body)
  let scheme = call_608351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608351.url(scheme.get, call_608351.host, call_608351.base,
                         call_608351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608351, url, valid)

proc call*(call_608352: Call_GetRemoveSourceIdentifierFromSubscription_608337;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608353 = newJObject()
  add(query_608353, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_608353, "SubscriptionName", newJString(SubscriptionName))
  add(query_608353, "Action", newJString(Action))
  add(query_608353, "Version", newJString(Version))
  result = call_608352.call(nil, query_608353, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_608337(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_608338,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_608339,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_608389 = ref object of OpenApiRestCall_605573
proc url_PostRemoveTagsFromResource_608391(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_608390(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608392 = query.getOrDefault("Action")
  valid_608392 = validateParameter(valid_608392, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_608392 != nil:
    section.add "Action", valid_608392
  var valid_608393 = query.getOrDefault("Version")
  valid_608393 = validateParameter(valid_608393, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608393 != nil:
    section.add "Version", valid_608393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608394 = header.getOrDefault("X-Amz-Signature")
  valid_608394 = validateParameter(valid_608394, JString, required = false,
                                 default = nil)
  if valid_608394 != nil:
    section.add "X-Amz-Signature", valid_608394
  var valid_608395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608395 = validateParameter(valid_608395, JString, required = false,
                                 default = nil)
  if valid_608395 != nil:
    section.add "X-Amz-Content-Sha256", valid_608395
  var valid_608396 = header.getOrDefault("X-Amz-Date")
  valid_608396 = validateParameter(valid_608396, JString, required = false,
                                 default = nil)
  if valid_608396 != nil:
    section.add "X-Amz-Date", valid_608396
  var valid_608397 = header.getOrDefault("X-Amz-Credential")
  valid_608397 = validateParameter(valid_608397, JString, required = false,
                                 default = nil)
  if valid_608397 != nil:
    section.add "X-Amz-Credential", valid_608397
  var valid_608398 = header.getOrDefault("X-Amz-Security-Token")
  valid_608398 = validateParameter(valid_608398, JString, required = false,
                                 default = nil)
  if valid_608398 != nil:
    section.add "X-Amz-Security-Token", valid_608398
  var valid_608399 = header.getOrDefault("X-Amz-Algorithm")
  valid_608399 = validateParameter(valid_608399, JString, required = false,
                                 default = nil)
  if valid_608399 != nil:
    section.add "X-Amz-Algorithm", valid_608399
  var valid_608400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608400 = validateParameter(valid_608400, JString, required = false,
                                 default = nil)
  if valid_608400 != nil:
    section.add "X-Amz-SignedHeaders", valid_608400
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_608401 = formData.getOrDefault("TagKeys")
  valid_608401 = validateParameter(valid_608401, JArray, required = true, default = nil)
  if valid_608401 != nil:
    section.add "TagKeys", valid_608401
  var valid_608402 = formData.getOrDefault("ResourceName")
  valid_608402 = validateParameter(valid_608402, JString, required = true,
                                 default = nil)
  if valid_608402 != nil:
    section.add "ResourceName", valid_608402
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608403: Call_PostRemoveTagsFromResource_608389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_608403.validator(path, query, header, formData, body)
  let scheme = call_608403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608403.url(scheme.get, call_608403.host, call_608403.base,
                         call_608403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608403, url, valid)

proc call*(call_608404: Call_PostRemoveTagsFromResource_608389; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_608405 = newJObject()
  var formData_608406 = newJObject()
  if TagKeys != nil:
    formData_608406.add "TagKeys", TagKeys
  add(query_608405, "Action", newJString(Action))
  add(query_608405, "Version", newJString(Version))
  add(formData_608406, "ResourceName", newJString(ResourceName))
  result = call_608404.call(nil, query_608405, nil, formData_608406, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_608389(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_608390, base: "/",
    url: url_PostRemoveTagsFromResource_608391,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_608372 = ref object of OpenApiRestCall_605573
proc url_GetRemoveTagsFromResource_608374(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_608373(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_608375 = query.getOrDefault("ResourceName")
  valid_608375 = validateParameter(valid_608375, JString, required = true,
                                 default = nil)
  if valid_608375 != nil:
    section.add "ResourceName", valid_608375
  var valid_608376 = query.getOrDefault("TagKeys")
  valid_608376 = validateParameter(valid_608376, JArray, required = true, default = nil)
  if valid_608376 != nil:
    section.add "TagKeys", valid_608376
  var valid_608377 = query.getOrDefault("Action")
  valid_608377 = validateParameter(valid_608377, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_608377 != nil:
    section.add "Action", valid_608377
  var valid_608378 = query.getOrDefault("Version")
  valid_608378 = validateParameter(valid_608378, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608378 != nil:
    section.add "Version", valid_608378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608379 = header.getOrDefault("X-Amz-Signature")
  valid_608379 = validateParameter(valid_608379, JString, required = false,
                                 default = nil)
  if valid_608379 != nil:
    section.add "X-Amz-Signature", valid_608379
  var valid_608380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608380 = validateParameter(valid_608380, JString, required = false,
                                 default = nil)
  if valid_608380 != nil:
    section.add "X-Amz-Content-Sha256", valid_608380
  var valid_608381 = header.getOrDefault("X-Amz-Date")
  valid_608381 = validateParameter(valid_608381, JString, required = false,
                                 default = nil)
  if valid_608381 != nil:
    section.add "X-Amz-Date", valid_608381
  var valid_608382 = header.getOrDefault("X-Amz-Credential")
  valid_608382 = validateParameter(valid_608382, JString, required = false,
                                 default = nil)
  if valid_608382 != nil:
    section.add "X-Amz-Credential", valid_608382
  var valid_608383 = header.getOrDefault("X-Amz-Security-Token")
  valid_608383 = validateParameter(valid_608383, JString, required = false,
                                 default = nil)
  if valid_608383 != nil:
    section.add "X-Amz-Security-Token", valid_608383
  var valid_608384 = header.getOrDefault("X-Amz-Algorithm")
  valid_608384 = validateParameter(valid_608384, JString, required = false,
                                 default = nil)
  if valid_608384 != nil:
    section.add "X-Amz-Algorithm", valid_608384
  var valid_608385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608385 = validateParameter(valid_608385, JString, required = false,
                                 default = nil)
  if valid_608385 != nil:
    section.add "X-Amz-SignedHeaders", valid_608385
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608386: Call_GetRemoveTagsFromResource_608372; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_608386.validator(path, query, header, formData, body)
  let scheme = call_608386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608386.url(scheme.get, call_608386.host, call_608386.base,
                         call_608386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608386, url, valid)

proc call*(call_608387: Call_GetRemoveTagsFromResource_608372;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608388 = newJObject()
  add(query_608388, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_608388.add "TagKeys", TagKeys
  add(query_608388, "Action", newJString(Action))
  add(query_608388, "Version", newJString(Version))
  result = call_608387.call(nil, query_608388, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_608372(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_608373, base: "/",
    url: url_GetRemoveTagsFromResource_608374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_608425 = ref object of OpenApiRestCall_605573
proc url_PostResetDBClusterParameterGroup_608427(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_608426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608428 = query.getOrDefault("Action")
  valid_608428 = validateParameter(valid_608428, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_608428 != nil:
    section.add "Action", valid_608428
  var valid_608429 = query.getOrDefault("Version")
  valid_608429 = validateParameter(valid_608429, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608429 != nil:
    section.add "Version", valid_608429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608430 = header.getOrDefault("X-Amz-Signature")
  valid_608430 = validateParameter(valid_608430, JString, required = false,
                                 default = nil)
  if valid_608430 != nil:
    section.add "X-Amz-Signature", valid_608430
  var valid_608431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608431 = validateParameter(valid_608431, JString, required = false,
                                 default = nil)
  if valid_608431 != nil:
    section.add "X-Amz-Content-Sha256", valid_608431
  var valid_608432 = header.getOrDefault("X-Amz-Date")
  valid_608432 = validateParameter(valid_608432, JString, required = false,
                                 default = nil)
  if valid_608432 != nil:
    section.add "X-Amz-Date", valid_608432
  var valid_608433 = header.getOrDefault("X-Amz-Credential")
  valid_608433 = validateParameter(valid_608433, JString, required = false,
                                 default = nil)
  if valid_608433 != nil:
    section.add "X-Amz-Credential", valid_608433
  var valid_608434 = header.getOrDefault("X-Amz-Security-Token")
  valid_608434 = validateParameter(valid_608434, JString, required = false,
                                 default = nil)
  if valid_608434 != nil:
    section.add "X-Amz-Security-Token", valid_608434
  var valid_608435 = header.getOrDefault("X-Amz-Algorithm")
  valid_608435 = validateParameter(valid_608435, JString, required = false,
                                 default = nil)
  if valid_608435 != nil:
    section.add "X-Amz-Algorithm", valid_608435
  var valid_608436 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608436 = validateParameter(valid_608436, JString, required = false,
                                 default = nil)
  if valid_608436 != nil:
    section.add "X-Amz-SignedHeaders", valid_608436
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_608437 = formData.getOrDefault("ResetAllParameters")
  valid_608437 = validateParameter(valid_608437, JBool, required = false, default = nil)
  if valid_608437 != nil:
    section.add "ResetAllParameters", valid_608437
  var valid_608438 = formData.getOrDefault("Parameters")
  valid_608438 = validateParameter(valid_608438, JArray, required = false,
                                 default = nil)
  if valid_608438 != nil:
    section.add "Parameters", valid_608438
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_608439 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608439 = validateParameter(valid_608439, JString, required = true,
                                 default = nil)
  if valid_608439 != nil:
    section.add "DBClusterParameterGroupName", valid_608439
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608440: Call_PostResetDBClusterParameterGroup_608425;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_608440.validator(path, query, header, formData, body)
  let scheme = call_608440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608440.url(scheme.get, call_608440.host, call_608440.base,
                         call_608440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608440, url, valid)

proc call*(call_608441: Call_PostResetDBClusterParameterGroup_608425;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_608442 = newJObject()
  var formData_608443 = newJObject()
  add(formData_608443, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_608442, "Action", newJString(Action))
  if Parameters != nil:
    formData_608443.add "Parameters", Parameters
  add(formData_608443, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608442, "Version", newJString(Version))
  result = call_608441.call(nil, query_608442, nil, formData_608443, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_608425(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_608426, base: "/",
    url: url_PostResetDBClusterParameterGroup_608427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_608407 = ref object of OpenApiRestCall_605573
proc url_GetResetDBClusterParameterGroup_608409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_608408(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608410 = query.getOrDefault("Parameters")
  valid_608410 = validateParameter(valid_608410, JArray, required = false,
                                 default = nil)
  if valid_608410 != nil:
    section.add "Parameters", valid_608410
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_608411 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608411 = validateParameter(valid_608411, JString, required = true,
                                 default = nil)
  if valid_608411 != nil:
    section.add "DBClusterParameterGroupName", valid_608411
  var valid_608412 = query.getOrDefault("ResetAllParameters")
  valid_608412 = validateParameter(valid_608412, JBool, required = false, default = nil)
  if valid_608412 != nil:
    section.add "ResetAllParameters", valid_608412
  var valid_608413 = query.getOrDefault("Action")
  valid_608413 = validateParameter(valid_608413, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_608413 != nil:
    section.add "Action", valid_608413
  var valid_608414 = query.getOrDefault("Version")
  valid_608414 = validateParameter(valid_608414, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608414 != nil:
    section.add "Version", valid_608414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608415 = header.getOrDefault("X-Amz-Signature")
  valid_608415 = validateParameter(valid_608415, JString, required = false,
                                 default = nil)
  if valid_608415 != nil:
    section.add "X-Amz-Signature", valid_608415
  var valid_608416 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608416 = validateParameter(valid_608416, JString, required = false,
                                 default = nil)
  if valid_608416 != nil:
    section.add "X-Amz-Content-Sha256", valid_608416
  var valid_608417 = header.getOrDefault("X-Amz-Date")
  valid_608417 = validateParameter(valid_608417, JString, required = false,
                                 default = nil)
  if valid_608417 != nil:
    section.add "X-Amz-Date", valid_608417
  var valid_608418 = header.getOrDefault("X-Amz-Credential")
  valid_608418 = validateParameter(valid_608418, JString, required = false,
                                 default = nil)
  if valid_608418 != nil:
    section.add "X-Amz-Credential", valid_608418
  var valid_608419 = header.getOrDefault("X-Amz-Security-Token")
  valid_608419 = validateParameter(valid_608419, JString, required = false,
                                 default = nil)
  if valid_608419 != nil:
    section.add "X-Amz-Security-Token", valid_608419
  var valid_608420 = header.getOrDefault("X-Amz-Algorithm")
  valid_608420 = validateParameter(valid_608420, JString, required = false,
                                 default = nil)
  if valid_608420 != nil:
    section.add "X-Amz-Algorithm", valid_608420
  var valid_608421 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608421 = validateParameter(valid_608421, JString, required = false,
                                 default = nil)
  if valid_608421 != nil:
    section.add "X-Amz-SignedHeaders", valid_608421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608422: Call_GetResetDBClusterParameterGroup_608407;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_608422.validator(path, query, header, formData, body)
  let scheme = call_608422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608422.url(scheme.get, call_608422.host, call_608422.base,
                         call_608422.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608422, url, valid)

proc call*(call_608423: Call_GetResetDBClusterParameterGroup_608407;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608424 = newJObject()
  if Parameters != nil:
    query_608424.add "Parameters", Parameters
  add(query_608424, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608424, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_608424, "Action", newJString(Action))
  add(query_608424, "Version", newJString(Version))
  result = call_608423.call(nil, query_608424, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_608407(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_608408, base: "/",
    url: url_GetResetDBClusterParameterGroup_608409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_608462 = ref object of OpenApiRestCall_605573
proc url_PostResetDBParameterGroup_608464(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_608463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608465 = query.getOrDefault("Action")
  valid_608465 = validateParameter(valid_608465, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_608465 != nil:
    section.add "Action", valid_608465
  var valid_608466 = query.getOrDefault("Version")
  valid_608466 = validateParameter(valid_608466, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608466 != nil:
    section.add "Version", valid_608466
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608467 = header.getOrDefault("X-Amz-Signature")
  valid_608467 = validateParameter(valid_608467, JString, required = false,
                                 default = nil)
  if valid_608467 != nil:
    section.add "X-Amz-Signature", valid_608467
  var valid_608468 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608468 = validateParameter(valid_608468, JString, required = false,
                                 default = nil)
  if valid_608468 != nil:
    section.add "X-Amz-Content-Sha256", valid_608468
  var valid_608469 = header.getOrDefault("X-Amz-Date")
  valid_608469 = validateParameter(valid_608469, JString, required = false,
                                 default = nil)
  if valid_608469 != nil:
    section.add "X-Amz-Date", valid_608469
  var valid_608470 = header.getOrDefault("X-Amz-Credential")
  valid_608470 = validateParameter(valid_608470, JString, required = false,
                                 default = nil)
  if valid_608470 != nil:
    section.add "X-Amz-Credential", valid_608470
  var valid_608471 = header.getOrDefault("X-Amz-Security-Token")
  valid_608471 = validateParameter(valid_608471, JString, required = false,
                                 default = nil)
  if valid_608471 != nil:
    section.add "X-Amz-Security-Token", valid_608471
  var valid_608472 = header.getOrDefault("X-Amz-Algorithm")
  valid_608472 = validateParameter(valid_608472, JString, required = false,
                                 default = nil)
  if valid_608472 != nil:
    section.add "X-Amz-Algorithm", valid_608472
  var valid_608473 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608473 = validateParameter(valid_608473, JString, required = false,
                                 default = nil)
  if valid_608473 != nil:
    section.add "X-Amz-SignedHeaders", valid_608473
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_608474 = formData.getOrDefault("ResetAllParameters")
  valid_608474 = validateParameter(valid_608474, JBool, required = false, default = nil)
  if valid_608474 != nil:
    section.add "ResetAllParameters", valid_608474
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_608475 = formData.getOrDefault("DBParameterGroupName")
  valid_608475 = validateParameter(valid_608475, JString, required = true,
                                 default = nil)
  if valid_608475 != nil:
    section.add "DBParameterGroupName", valid_608475
  var valid_608476 = formData.getOrDefault("Parameters")
  valid_608476 = validateParameter(valid_608476, JArray, required = false,
                                 default = nil)
  if valid_608476 != nil:
    section.add "Parameters", valid_608476
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608477: Call_PostResetDBParameterGroup_608462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_608477.validator(path, query, header, formData, body)
  let scheme = call_608477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608477.url(scheme.get, call_608477.host, call_608477.base,
                         call_608477.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608477, url, valid)

proc call*(call_608478: Call_PostResetDBParameterGroup_608462;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_608479 = newJObject()
  var formData_608480 = newJObject()
  add(formData_608480, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_608480, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608479, "Action", newJString(Action))
  if Parameters != nil:
    formData_608480.add "Parameters", Parameters
  add(query_608479, "Version", newJString(Version))
  result = call_608478.call(nil, query_608479, nil, formData_608480, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_608462(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_608463, base: "/",
    url: url_PostResetDBParameterGroup_608464,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_608444 = ref object of OpenApiRestCall_605573
proc url_GetResetDBParameterGroup_608446(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_608445(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_608447 = query.getOrDefault("DBParameterGroupName")
  valid_608447 = validateParameter(valid_608447, JString, required = true,
                                 default = nil)
  if valid_608447 != nil:
    section.add "DBParameterGroupName", valid_608447
  var valid_608448 = query.getOrDefault("Parameters")
  valid_608448 = validateParameter(valid_608448, JArray, required = false,
                                 default = nil)
  if valid_608448 != nil:
    section.add "Parameters", valid_608448
  var valid_608449 = query.getOrDefault("ResetAllParameters")
  valid_608449 = validateParameter(valid_608449, JBool, required = false, default = nil)
  if valid_608449 != nil:
    section.add "ResetAllParameters", valid_608449
  var valid_608450 = query.getOrDefault("Action")
  valid_608450 = validateParameter(valid_608450, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_608450 != nil:
    section.add "Action", valid_608450
  var valid_608451 = query.getOrDefault("Version")
  valid_608451 = validateParameter(valid_608451, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608451 != nil:
    section.add "Version", valid_608451
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608452 = header.getOrDefault("X-Amz-Signature")
  valid_608452 = validateParameter(valid_608452, JString, required = false,
                                 default = nil)
  if valid_608452 != nil:
    section.add "X-Amz-Signature", valid_608452
  var valid_608453 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608453 = validateParameter(valid_608453, JString, required = false,
                                 default = nil)
  if valid_608453 != nil:
    section.add "X-Amz-Content-Sha256", valid_608453
  var valid_608454 = header.getOrDefault("X-Amz-Date")
  valid_608454 = validateParameter(valid_608454, JString, required = false,
                                 default = nil)
  if valid_608454 != nil:
    section.add "X-Amz-Date", valid_608454
  var valid_608455 = header.getOrDefault("X-Amz-Credential")
  valid_608455 = validateParameter(valid_608455, JString, required = false,
                                 default = nil)
  if valid_608455 != nil:
    section.add "X-Amz-Credential", valid_608455
  var valid_608456 = header.getOrDefault("X-Amz-Security-Token")
  valid_608456 = validateParameter(valid_608456, JString, required = false,
                                 default = nil)
  if valid_608456 != nil:
    section.add "X-Amz-Security-Token", valid_608456
  var valid_608457 = header.getOrDefault("X-Amz-Algorithm")
  valid_608457 = validateParameter(valid_608457, JString, required = false,
                                 default = nil)
  if valid_608457 != nil:
    section.add "X-Amz-Algorithm", valid_608457
  var valid_608458 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608458 = validateParameter(valid_608458, JString, required = false,
                                 default = nil)
  if valid_608458 != nil:
    section.add "X-Amz-SignedHeaders", valid_608458
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608459: Call_GetResetDBParameterGroup_608444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_608459.validator(path, query, header, formData, body)
  let scheme = call_608459.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608459.url(scheme.get, call_608459.host, call_608459.base,
                         call_608459.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608459, url, valid)

proc call*(call_608460: Call_GetResetDBParameterGroup_608444;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608461 = newJObject()
  add(query_608461, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_608461.add "Parameters", Parameters
  add(query_608461, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_608461, "Action", newJString(Action))
  add(query_608461, "Version", newJString(Version))
  result = call_608460.call(nil, query_608461, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_608444(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_608445, base: "/",
    url: url_GetResetDBParameterGroup_608446, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_608512 = ref object of OpenApiRestCall_605573
proc url_PostRestoreDBClusterFromSnapshot_608514(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_608513(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608515 = query.getOrDefault("Action")
  valid_608515 = validateParameter(valid_608515, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_608515 != nil:
    section.add "Action", valid_608515
  var valid_608516 = query.getOrDefault("Version")
  valid_608516 = validateParameter(valid_608516, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608516 != nil:
    section.add "Version", valid_608516
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608517 = header.getOrDefault("X-Amz-Signature")
  valid_608517 = validateParameter(valid_608517, JString, required = false,
                                 default = nil)
  if valid_608517 != nil:
    section.add "X-Amz-Signature", valid_608517
  var valid_608518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608518 = validateParameter(valid_608518, JString, required = false,
                                 default = nil)
  if valid_608518 != nil:
    section.add "X-Amz-Content-Sha256", valid_608518
  var valid_608519 = header.getOrDefault("X-Amz-Date")
  valid_608519 = validateParameter(valid_608519, JString, required = false,
                                 default = nil)
  if valid_608519 != nil:
    section.add "X-Amz-Date", valid_608519
  var valid_608520 = header.getOrDefault("X-Amz-Credential")
  valid_608520 = validateParameter(valid_608520, JString, required = false,
                                 default = nil)
  if valid_608520 != nil:
    section.add "X-Amz-Credential", valid_608520
  var valid_608521 = header.getOrDefault("X-Amz-Security-Token")
  valid_608521 = validateParameter(valid_608521, JString, required = false,
                                 default = nil)
  if valid_608521 != nil:
    section.add "X-Amz-Security-Token", valid_608521
  var valid_608522 = header.getOrDefault("X-Amz-Algorithm")
  valid_608522 = validateParameter(valid_608522, JString, required = false,
                                 default = nil)
  if valid_608522 != nil:
    section.add "X-Amz-Algorithm", valid_608522
  var valid_608523 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608523 = validateParameter(valid_608523, JString, required = false,
                                 default = nil)
  if valid_608523 != nil:
    section.add "X-Amz-SignedHeaders", valid_608523
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  section = newJObject()
  var valid_608524 = formData.getOrDefault("Port")
  valid_608524 = validateParameter(valid_608524, JInt, required = false, default = nil)
  if valid_608524 != nil:
    section.add "Port", valid_608524
  var valid_608525 = formData.getOrDefault("EngineVersion")
  valid_608525 = validateParameter(valid_608525, JString, required = false,
                                 default = nil)
  if valid_608525 != nil:
    section.add "EngineVersion", valid_608525
  var valid_608526 = formData.getOrDefault("DatabaseName")
  valid_608526 = validateParameter(valid_608526, JString, required = false,
                                 default = nil)
  if valid_608526 != nil:
    section.add "DatabaseName", valid_608526
  var valid_608527 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608527 = validateParameter(valid_608527, JArray, required = false,
                                 default = nil)
  if valid_608527 != nil:
    section.add "VpcSecurityGroupIds", valid_608527
  var valid_608528 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608528 = validateParameter(valid_608528, JBool, required = false, default = nil)
  if valid_608528 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608528
  var valid_608529 = formData.getOrDefault("AvailabilityZones")
  valid_608529 = validateParameter(valid_608529, JArray, required = false,
                                 default = nil)
  if valid_608529 != nil:
    section.add "AvailabilityZones", valid_608529
  var valid_608530 = formData.getOrDefault("KmsKeyId")
  valid_608530 = validateParameter(valid_608530, JString, required = false,
                                 default = nil)
  if valid_608530 != nil:
    section.add "KmsKeyId", valid_608530
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_608531 = formData.getOrDefault("Engine")
  valid_608531 = validateParameter(valid_608531, JString, required = true,
                                 default = nil)
  if valid_608531 != nil:
    section.add "Engine", valid_608531
  var valid_608532 = formData.getOrDefault("SnapshotIdentifier")
  valid_608532 = validateParameter(valid_608532, JString, required = true,
                                 default = nil)
  if valid_608532 != nil:
    section.add "SnapshotIdentifier", valid_608532
  var valid_608533 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_608533 = validateParameter(valid_608533, JArray, required = false,
                                 default = nil)
  if valid_608533 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608533
  var valid_608534 = formData.getOrDefault("Tags")
  valid_608534 = validateParameter(valid_608534, JArray, required = false,
                                 default = nil)
  if valid_608534 != nil:
    section.add "Tags", valid_608534
  var valid_608535 = formData.getOrDefault("DBSubnetGroupName")
  valid_608535 = validateParameter(valid_608535, JString, required = false,
                                 default = nil)
  if valid_608535 != nil:
    section.add "DBSubnetGroupName", valid_608535
  var valid_608536 = formData.getOrDefault("OptionGroupName")
  valid_608536 = validateParameter(valid_608536, JString, required = false,
                                 default = nil)
  if valid_608536 != nil:
    section.add "OptionGroupName", valid_608536
  var valid_608537 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608537 = validateParameter(valid_608537, JString, required = false,
                                 default = nil)
  if valid_608537 != nil:
    section.add "DBClusterParameterGroupName", valid_608537
  var valid_608538 = formData.getOrDefault("DBClusterIdentifier")
  valid_608538 = validateParameter(valid_608538, JString, required = true,
                                 default = nil)
  if valid_608538 != nil:
    section.add "DBClusterIdentifier", valid_608538
  var valid_608539 = formData.getOrDefault("DeletionProtection")
  valid_608539 = validateParameter(valid_608539, JBool, required = false, default = nil)
  if valid_608539 != nil:
    section.add "DeletionProtection", valid_608539
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608540: Call_PostRestoreDBClusterFromSnapshot_608512;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_608540.validator(path, query, header, formData, body)
  let scheme = call_608540.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608540.url(scheme.get, call_608540.host, call_608540.base,
                         call_608540.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608540, url, valid)

proc call*(call_608541: Call_PostRestoreDBClusterFromSnapshot_608512;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; EngineVersion: string = ""; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   DatabaseName: string
  ##               : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  var query_608542 = newJObject()
  var formData_608543 = newJObject()
  add(formData_608543, "Port", newJInt(Port))
  add(formData_608543, "EngineVersion", newJString(EngineVersion))
  add(formData_608543, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_608543.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608543, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_608543.add "AvailabilityZones", AvailabilityZones
  add(formData_608543, "KmsKeyId", newJString(KmsKeyId))
  add(formData_608543, "Engine", newJString(Engine))
  add(formData_608543, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_608543.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608542, "Action", newJString(Action))
  if Tags != nil:
    formData_608543.add "Tags", Tags
  add(formData_608543, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608543, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608543, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608542, "Version", newJString(Version))
  add(formData_608543, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_608543, "DeletionProtection", newJBool(DeletionProtection))
  result = call_608541.call(nil, query_608542, nil, formData_608543, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_608512(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_608513, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_608514,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_608481 = ref object of OpenApiRestCall_605573
proc url_GetRestoreDBClusterFromSnapshot_608483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_608482(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_608484 = query.getOrDefault("DatabaseName")
  valid_608484 = validateParameter(valid_608484, JString, required = false,
                                 default = nil)
  if valid_608484 != nil:
    section.add "DatabaseName", valid_608484
  var valid_608485 = query.getOrDefault("DeletionProtection")
  valid_608485 = validateParameter(valid_608485, JBool, required = false, default = nil)
  if valid_608485 != nil:
    section.add "DeletionProtection", valid_608485
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_608486 = query.getOrDefault("Engine")
  valid_608486 = validateParameter(valid_608486, JString, required = true,
                                 default = nil)
  if valid_608486 != nil:
    section.add "Engine", valid_608486
  var valid_608487 = query.getOrDefault("SnapshotIdentifier")
  valid_608487 = validateParameter(valid_608487, JString, required = true,
                                 default = nil)
  if valid_608487 != nil:
    section.add "SnapshotIdentifier", valid_608487
  var valid_608488 = query.getOrDefault("Tags")
  valid_608488 = validateParameter(valid_608488, JArray, required = false,
                                 default = nil)
  if valid_608488 != nil:
    section.add "Tags", valid_608488
  var valid_608489 = query.getOrDefault("KmsKeyId")
  valid_608489 = validateParameter(valid_608489, JString, required = false,
                                 default = nil)
  if valid_608489 != nil:
    section.add "KmsKeyId", valid_608489
  var valid_608490 = query.getOrDefault("DBClusterIdentifier")
  valid_608490 = validateParameter(valid_608490, JString, required = true,
                                 default = nil)
  if valid_608490 != nil:
    section.add "DBClusterIdentifier", valid_608490
  var valid_608491 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608491 = validateParameter(valid_608491, JString, required = false,
                                 default = nil)
  if valid_608491 != nil:
    section.add "DBClusterParameterGroupName", valid_608491
  var valid_608492 = query.getOrDefault("AvailabilityZones")
  valid_608492 = validateParameter(valid_608492, JArray, required = false,
                                 default = nil)
  if valid_608492 != nil:
    section.add "AvailabilityZones", valid_608492
  var valid_608493 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608493 = validateParameter(valid_608493, JBool, required = false, default = nil)
  if valid_608493 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608493
  var valid_608494 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_608494 = validateParameter(valid_608494, JArray, required = false,
                                 default = nil)
  if valid_608494 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608494
  var valid_608495 = query.getOrDefault("EngineVersion")
  valid_608495 = validateParameter(valid_608495, JString, required = false,
                                 default = nil)
  if valid_608495 != nil:
    section.add "EngineVersion", valid_608495
  var valid_608496 = query.getOrDefault("Action")
  valid_608496 = validateParameter(valid_608496, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_608496 != nil:
    section.add "Action", valid_608496
  var valid_608497 = query.getOrDefault("Port")
  valid_608497 = validateParameter(valid_608497, JInt, required = false, default = nil)
  if valid_608497 != nil:
    section.add "Port", valid_608497
  var valid_608498 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608498 = validateParameter(valid_608498, JArray, required = false,
                                 default = nil)
  if valid_608498 != nil:
    section.add "VpcSecurityGroupIds", valid_608498
  var valid_608499 = query.getOrDefault("OptionGroupName")
  valid_608499 = validateParameter(valid_608499, JString, required = false,
                                 default = nil)
  if valid_608499 != nil:
    section.add "OptionGroupName", valid_608499
  var valid_608500 = query.getOrDefault("DBSubnetGroupName")
  valid_608500 = validateParameter(valid_608500, JString, required = false,
                                 default = nil)
  if valid_608500 != nil:
    section.add "DBSubnetGroupName", valid_608500
  var valid_608501 = query.getOrDefault("Version")
  valid_608501 = validateParameter(valid_608501, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608501 != nil:
    section.add "Version", valid_608501
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608502 = header.getOrDefault("X-Amz-Signature")
  valid_608502 = validateParameter(valid_608502, JString, required = false,
                                 default = nil)
  if valid_608502 != nil:
    section.add "X-Amz-Signature", valid_608502
  var valid_608503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608503 = validateParameter(valid_608503, JString, required = false,
                                 default = nil)
  if valid_608503 != nil:
    section.add "X-Amz-Content-Sha256", valid_608503
  var valid_608504 = header.getOrDefault("X-Amz-Date")
  valid_608504 = validateParameter(valid_608504, JString, required = false,
                                 default = nil)
  if valid_608504 != nil:
    section.add "X-Amz-Date", valid_608504
  var valid_608505 = header.getOrDefault("X-Amz-Credential")
  valid_608505 = validateParameter(valid_608505, JString, required = false,
                                 default = nil)
  if valid_608505 != nil:
    section.add "X-Amz-Credential", valid_608505
  var valid_608506 = header.getOrDefault("X-Amz-Security-Token")
  valid_608506 = validateParameter(valid_608506, JString, required = false,
                                 default = nil)
  if valid_608506 != nil:
    section.add "X-Amz-Security-Token", valid_608506
  var valid_608507 = header.getOrDefault("X-Amz-Algorithm")
  valid_608507 = validateParameter(valid_608507, JString, required = false,
                                 default = nil)
  if valid_608507 != nil:
    section.add "X-Amz-Algorithm", valid_608507
  var valid_608508 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608508 = validateParameter(valid_608508, JString, required = false,
                                 default = nil)
  if valid_608508 != nil:
    section.add "X-Amz-SignedHeaders", valid_608508
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608509: Call_GetRestoreDBClusterFromSnapshot_608481;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_608509.validator(path, query, header, formData, body)
  let scheme = call_608509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608509.url(scheme.get, call_608509.host, call_608509.base,
                         call_608509.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608509, url, valid)

proc call*(call_608510: Call_GetRestoreDBClusterFromSnapshot_608481;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   DatabaseName: string
  ##               : Not supported.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_608511 = newJObject()
  add(query_608511, "DatabaseName", newJString(DatabaseName))
  add(query_608511, "DeletionProtection", newJBool(DeletionProtection))
  add(query_608511, "Engine", newJString(Engine))
  add(query_608511, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_608511.add "Tags", Tags
  add(query_608511, "KmsKeyId", newJString(KmsKeyId))
  add(query_608511, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608511, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_608511.add "AvailabilityZones", AvailabilityZones
  add(query_608511, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_608511.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608511, "EngineVersion", newJString(EngineVersion))
  add(query_608511, "Action", newJString(Action))
  add(query_608511, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_608511.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608511, "OptionGroupName", newJString(OptionGroupName))
  add(query_608511, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608511, "Version", newJString(Version))
  result = call_608510.call(nil, query_608511, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_608481(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_608482, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_608483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_608574 = ref object of OpenApiRestCall_605573
proc url_PostRestoreDBClusterToPointInTime_608576(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_608575(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608577 = query.getOrDefault("Action")
  valid_608577 = validateParameter(valid_608577, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_608577 != nil:
    section.add "Action", valid_608577
  var valid_608578 = query.getOrDefault("Version")
  valid_608578 = validateParameter(valid_608578, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608578 != nil:
    section.add "Version", valid_608578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608579 = header.getOrDefault("X-Amz-Signature")
  valid_608579 = validateParameter(valid_608579, JString, required = false,
                                 default = nil)
  if valid_608579 != nil:
    section.add "X-Amz-Signature", valid_608579
  var valid_608580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608580 = validateParameter(valid_608580, JString, required = false,
                                 default = nil)
  if valid_608580 != nil:
    section.add "X-Amz-Content-Sha256", valid_608580
  var valid_608581 = header.getOrDefault("X-Amz-Date")
  valid_608581 = validateParameter(valid_608581, JString, required = false,
                                 default = nil)
  if valid_608581 != nil:
    section.add "X-Amz-Date", valid_608581
  var valid_608582 = header.getOrDefault("X-Amz-Credential")
  valid_608582 = validateParameter(valid_608582, JString, required = false,
                                 default = nil)
  if valid_608582 != nil:
    section.add "X-Amz-Credential", valid_608582
  var valid_608583 = header.getOrDefault("X-Amz-Security-Token")
  valid_608583 = validateParameter(valid_608583, JString, required = false,
                                 default = nil)
  if valid_608583 != nil:
    section.add "X-Amz-Security-Token", valid_608583
  var valid_608584 = header.getOrDefault("X-Amz-Algorithm")
  valid_608584 = validateParameter(valid_608584, JString, required = false,
                                 default = nil)
  if valid_608584 != nil:
    section.add "X-Amz-Algorithm", valid_608584
  var valid_608585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608585 = validateParameter(valid_608585, JString, required = false,
                                 default = nil)
  if valid_608585 != nil:
    section.add "X-Amz-SignedHeaders", valid_608585
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  section = newJObject()
  var valid_608586 = formData.getOrDefault("Port")
  valid_608586 = validateParameter(valid_608586, JInt, required = false, default = nil)
  if valid_608586 != nil:
    section.add "Port", valid_608586
  var valid_608587 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608587 = validateParameter(valid_608587, JArray, required = false,
                                 default = nil)
  if valid_608587 != nil:
    section.add "VpcSecurityGroupIds", valid_608587
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_608588 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_608588 = validateParameter(valid_608588, JString, required = true,
                                 default = nil)
  if valid_608588 != nil:
    section.add "SourceDBClusterIdentifier", valid_608588
  var valid_608589 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608589 = validateParameter(valid_608589, JBool, required = false, default = nil)
  if valid_608589 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608589
  var valid_608590 = formData.getOrDefault("KmsKeyId")
  valid_608590 = validateParameter(valid_608590, JString, required = false,
                                 default = nil)
  if valid_608590 != nil:
    section.add "KmsKeyId", valid_608590
  var valid_608591 = formData.getOrDefault("RestoreType")
  valid_608591 = validateParameter(valid_608591, JString, required = false,
                                 default = nil)
  if valid_608591 != nil:
    section.add "RestoreType", valid_608591
  var valid_608592 = formData.getOrDefault("UseLatestRestorableTime")
  valid_608592 = validateParameter(valid_608592, JBool, required = false, default = nil)
  if valid_608592 != nil:
    section.add "UseLatestRestorableTime", valid_608592
  var valid_608593 = formData.getOrDefault("RestoreToTime")
  valid_608593 = validateParameter(valid_608593, JString, required = false,
                                 default = nil)
  if valid_608593 != nil:
    section.add "RestoreToTime", valid_608593
  var valid_608594 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_608594 = validateParameter(valid_608594, JArray, required = false,
                                 default = nil)
  if valid_608594 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608594
  var valid_608595 = formData.getOrDefault("Tags")
  valid_608595 = validateParameter(valid_608595, JArray, required = false,
                                 default = nil)
  if valid_608595 != nil:
    section.add "Tags", valid_608595
  var valid_608596 = formData.getOrDefault("DBSubnetGroupName")
  valid_608596 = validateParameter(valid_608596, JString, required = false,
                                 default = nil)
  if valid_608596 != nil:
    section.add "DBSubnetGroupName", valid_608596
  var valid_608597 = formData.getOrDefault("OptionGroupName")
  valid_608597 = validateParameter(valid_608597, JString, required = false,
                                 default = nil)
  if valid_608597 != nil:
    section.add "OptionGroupName", valid_608597
  var valid_608598 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608598 = validateParameter(valid_608598, JString, required = false,
                                 default = nil)
  if valid_608598 != nil:
    section.add "DBClusterParameterGroupName", valid_608598
  var valid_608599 = formData.getOrDefault("DBClusterIdentifier")
  valid_608599 = validateParameter(valid_608599, JString, required = true,
                                 default = nil)
  if valid_608599 != nil:
    section.add "DBClusterIdentifier", valid_608599
  var valid_608600 = formData.getOrDefault("DeletionProtection")
  valid_608600 = validateParameter(valid_608600, JBool, required = false, default = nil)
  if valid_608600 != nil:
    section.add "DeletionProtection", valid_608600
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608601: Call_PostRestoreDBClusterToPointInTime_608574;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_608601.validator(path, query, header, formData, body)
  let scheme = call_608601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608601.url(scheme.get, call_608601.host, call_608601.base,
                         call_608601.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608601, url, valid)

proc call*(call_608602: Call_PostRestoreDBClusterToPointInTime_608574;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  var query_608603 = newJObject()
  var formData_608604 = newJObject()
  add(formData_608604, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_608604.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608604, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_608604, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_608604, "KmsKeyId", newJString(KmsKeyId))
  add(formData_608604, "RestoreType", newJString(RestoreType))
  add(formData_608604, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_608604, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_608604.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608603, "Action", newJString(Action))
  if Tags != nil:
    formData_608604.add "Tags", Tags
  add(formData_608604, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608604, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608604, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608603, "Version", newJString(Version))
  add(formData_608604, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_608604, "DeletionProtection", newJBool(DeletionProtection))
  result = call_608602.call(nil, query_608603, nil, formData_608604, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_608574(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_608575, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_608576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_608544 = ref object of OpenApiRestCall_605573
proc url_GetRestoreDBClusterToPointInTime_608546(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_608545(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_608547 = query.getOrDefault("DeletionProtection")
  valid_608547 = validateParameter(valid_608547, JBool, required = false, default = nil)
  if valid_608547 != nil:
    section.add "DeletionProtection", valid_608547
  var valid_608548 = query.getOrDefault("RestoreType")
  valid_608548 = validateParameter(valid_608548, JString, required = false,
                                 default = nil)
  if valid_608548 != nil:
    section.add "RestoreType", valid_608548
  var valid_608549 = query.getOrDefault("UseLatestRestorableTime")
  valid_608549 = validateParameter(valid_608549, JBool, required = false, default = nil)
  if valid_608549 != nil:
    section.add "UseLatestRestorableTime", valid_608549
  var valid_608550 = query.getOrDefault("Tags")
  valid_608550 = validateParameter(valid_608550, JArray, required = false,
                                 default = nil)
  if valid_608550 != nil:
    section.add "Tags", valid_608550
  var valid_608551 = query.getOrDefault("KmsKeyId")
  valid_608551 = validateParameter(valid_608551, JString, required = false,
                                 default = nil)
  if valid_608551 != nil:
    section.add "KmsKeyId", valid_608551
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608552 = query.getOrDefault("DBClusterIdentifier")
  valid_608552 = validateParameter(valid_608552, JString, required = true,
                                 default = nil)
  if valid_608552 != nil:
    section.add "DBClusterIdentifier", valid_608552
  var valid_608553 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_608553 = validateParameter(valid_608553, JString, required = true,
                                 default = nil)
  if valid_608553 != nil:
    section.add "SourceDBClusterIdentifier", valid_608553
  var valid_608554 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608554 = validateParameter(valid_608554, JString, required = false,
                                 default = nil)
  if valid_608554 != nil:
    section.add "DBClusterParameterGroupName", valid_608554
  var valid_608555 = query.getOrDefault("RestoreToTime")
  valid_608555 = validateParameter(valid_608555, JString, required = false,
                                 default = nil)
  if valid_608555 != nil:
    section.add "RestoreToTime", valid_608555
  var valid_608556 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608556 = validateParameter(valid_608556, JBool, required = false, default = nil)
  if valid_608556 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608556
  var valid_608557 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_608557 = validateParameter(valid_608557, JArray, required = false,
                                 default = nil)
  if valid_608557 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608557
  var valid_608558 = query.getOrDefault("Action")
  valid_608558 = validateParameter(valid_608558, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_608558 != nil:
    section.add "Action", valid_608558
  var valid_608559 = query.getOrDefault("Port")
  valid_608559 = validateParameter(valid_608559, JInt, required = false, default = nil)
  if valid_608559 != nil:
    section.add "Port", valid_608559
  var valid_608560 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608560 = validateParameter(valid_608560, JArray, required = false,
                                 default = nil)
  if valid_608560 != nil:
    section.add "VpcSecurityGroupIds", valid_608560
  var valid_608561 = query.getOrDefault("OptionGroupName")
  valid_608561 = validateParameter(valid_608561, JString, required = false,
                                 default = nil)
  if valid_608561 != nil:
    section.add "OptionGroupName", valid_608561
  var valid_608562 = query.getOrDefault("DBSubnetGroupName")
  valid_608562 = validateParameter(valid_608562, JString, required = false,
                                 default = nil)
  if valid_608562 != nil:
    section.add "DBSubnetGroupName", valid_608562
  var valid_608563 = query.getOrDefault("Version")
  valid_608563 = validateParameter(valid_608563, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608563 != nil:
    section.add "Version", valid_608563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608564 = header.getOrDefault("X-Amz-Signature")
  valid_608564 = validateParameter(valid_608564, JString, required = false,
                                 default = nil)
  if valid_608564 != nil:
    section.add "X-Amz-Signature", valid_608564
  var valid_608565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608565 = validateParameter(valid_608565, JString, required = false,
                                 default = nil)
  if valid_608565 != nil:
    section.add "X-Amz-Content-Sha256", valid_608565
  var valid_608566 = header.getOrDefault("X-Amz-Date")
  valid_608566 = validateParameter(valid_608566, JString, required = false,
                                 default = nil)
  if valid_608566 != nil:
    section.add "X-Amz-Date", valid_608566
  var valid_608567 = header.getOrDefault("X-Amz-Credential")
  valid_608567 = validateParameter(valid_608567, JString, required = false,
                                 default = nil)
  if valid_608567 != nil:
    section.add "X-Amz-Credential", valid_608567
  var valid_608568 = header.getOrDefault("X-Amz-Security-Token")
  valid_608568 = validateParameter(valid_608568, JString, required = false,
                                 default = nil)
  if valid_608568 != nil:
    section.add "X-Amz-Security-Token", valid_608568
  var valid_608569 = header.getOrDefault("X-Amz-Algorithm")
  valid_608569 = validateParameter(valid_608569, JString, required = false,
                                 default = nil)
  if valid_608569 != nil:
    section.add "X-Amz-Algorithm", valid_608569
  var valid_608570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608570 = validateParameter(valid_608570, JString, required = false,
                                 default = nil)
  if valid_608570 != nil:
    section.add "X-Amz-SignedHeaders", valid_608570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608571: Call_GetRestoreDBClusterToPointInTime_608544;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_608571.validator(path, query, header, formData, body)
  let scheme = call_608571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608571.url(scheme.get, call_608571.host, call_608571.base,
                         call_608571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608571, url, valid)

proc call*(call_608572: Call_GetRestoreDBClusterToPointInTime_608544;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; DBClusterParameterGroupName: string = "";
          RestoreToTime: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_608573 = newJObject()
  add(query_608573, "DeletionProtection", newJBool(DeletionProtection))
  add(query_608573, "RestoreType", newJString(RestoreType))
  add(query_608573, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  if Tags != nil:
    query_608573.add "Tags", Tags
  add(query_608573, "KmsKeyId", newJString(KmsKeyId))
  add(query_608573, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608573, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_608573, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608573, "RestoreToTime", newJString(RestoreToTime))
  add(query_608573, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_608573.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608573, "Action", newJString(Action))
  add(query_608573, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_608573.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608573, "OptionGroupName", newJString(OptionGroupName))
  add(query_608573, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608573, "Version", newJString(Version))
  result = call_608572.call(nil, query_608573, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_608544(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_608545, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_608546,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  const
    XAmzSecurityToken = "X-Amz-Security-Token"
  if not headers.hasKey(XAmzSecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[XAmzSecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
