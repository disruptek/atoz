
import
  json, options, hashes, uri, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Neptune
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_602450 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_602450](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_602450): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    if js.kind notin {JString, JInt, JFloat, JNull, JBool}:
      return
    head = $js
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "neptune"
method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_603059 = ref object of OpenApiRestCall_602450
proc url_PostAddRoleToDBCluster_603061(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddRoleToDBCluster_603060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603062 = query.getOrDefault("Action")
  valid_603062 = validateParameter(valid_603062, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_603062 != nil:
    section.add "Action", valid_603062
  var valid_603063 = query.getOrDefault("Version")
  valid_603063 = validateParameter(valid_603063, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603063 != nil:
    section.add "Version", valid_603063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603064 = header.getOrDefault("X-Amz-Date")
  valid_603064 = validateParameter(valid_603064, JString, required = false,
                                 default = nil)
  if valid_603064 != nil:
    section.add "X-Amz-Date", valid_603064
  var valid_603065 = header.getOrDefault("X-Amz-Security-Token")
  valid_603065 = validateParameter(valid_603065, JString, required = false,
                                 default = nil)
  if valid_603065 != nil:
    section.add "X-Amz-Security-Token", valid_603065
  var valid_603066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603066 = validateParameter(valid_603066, JString, required = false,
                                 default = nil)
  if valid_603066 != nil:
    section.add "X-Amz-Content-Sha256", valid_603066
  var valid_603067 = header.getOrDefault("X-Amz-Algorithm")
  valid_603067 = validateParameter(valid_603067, JString, required = false,
                                 default = nil)
  if valid_603067 != nil:
    section.add "X-Amz-Algorithm", valid_603067
  var valid_603068 = header.getOrDefault("X-Amz-Signature")
  valid_603068 = validateParameter(valid_603068, JString, required = false,
                                 default = nil)
  if valid_603068 != nil:
    section.add "X-Amz-Signature", valid_603068
  var valid_603069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603069 = validateParameter(valid_603069, JString, required = false,
                                 default = nil)
  if valid_603069 != nil:
    section.add "X-Amz-SignedHeaders", valid_603069
  var valid_603070 = header.getOrDefault("X-Amz-Credential")
  valid_603070 = validateParameter(valid_603070, JString, required = false,
                                 default = nil)
  if valid_603070 != nil:
    section.add "X-Amz-Credential", valid_603070
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_603071 = formData.getOrDefault("RoleArn")
  valid_603071 = validateParameter(valid_603071, JString, required = true,
                                 default = nil)
  if valid_603071 != nil:
    section.add "RoleArn", valid_603071
  var valid_603072 = formData.getOrDefault("DBClusterIdentifier")
  valid_603072 = validateParameter(valid_603072, JString, required = true,
                                 default = nil)
  if valid_603072 != nil:
    section.add "DBClusterIdentifier", valid_603072
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603073: Call_PostAddRoleToDBCluster_603059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_603073.validator(path, query, header, formData, body)
  let scheme = call_603073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603073.url(scheme.get, call_603073.host, call_603073.base,
                         call_603073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603073, url, valid)

proc call*(call_603074: Call_PostAddRoleToDBCluster_603059; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Version: string (required)
  var query_603075 = newJObject()
  var formData_603076 = newJObject()
  add(formData_603076, "RoleArn", newJString(RoleArn))
  add(query_603075, "Action", newJString(Action))
  add(formData_603076, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603075, "Version", newJString(Version))
  result = call_603074.call(nil, query_603075, nil, formData_603076, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_603059(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_603060, base: "/",
    url: url_PostAddRoleToDBCluster_603061, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_602787 = ref object of OpenApiRestCall_602450
proc url_GetAddRoleToDBCluster_602789(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddRoleToDBCluster_602788(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_602901 = query.getOrDefault("DBClusterIdentifier")
  valid_602901 = validateParameter(valid_602901, JString, required = true,
                                 default = nil)
  if valid_602901 != nil:
    section.add "DBClusterIdentifier", valid_602901
  var valid_602902 = query.getOrDefault("RoleArn")
  valid_602902 = validateParameter(valid_602902, JString, required = true,
                                 default = nil)
  if valid_602902 != nil:
    section.add "RoleArn", valid_602902
  var valid_602916 = query.getOrDefault("Action")
  valid_602916 = validateParameter(valid_602916, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_602916 != nil:
    section.add "Action", valid_602916
  var valid_602917 = query.getOrDefault("Version")
  valid_602917 = validateParameter(valid_602917, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_602917 != nil:
    section.add "Version", valid_602917
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_602918 = header.getOrDefault("X-Amz-Date")
  valid_602918 = validateParameter(valid_602918, JString, required = false,
                                 default = nil)
  if valid_602918 != nil:
    section.add "X-Amz-Date", valid_602918
  var valid_602919 = header.getOrDefault("X-Amz-Security-Token")
  valid_602919 = validateParameter(valid_602919, JString, required = false,
                                 default = nil)
  if valid_602919 != nil:
    section.add "X-Amz-Security-Token", valid_602919
  var valid_602920 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_602920 = validateParameter(valid_602920, JString, required = false,
                                 default = nil)
  if valid_602920 != nil:
    section.add "X-Amz-Content-Sha256", valid_602920
  var valid_602921 = header.getOrDefault("X-Amz-Algorithm")
  valid_602921 = validateParameter(valid_602921, JString, required = false,
                                 default = nil)
  if valid_602921 != nil:
    section.add "X-Amz-Algorithm", valid_602921
  var valid_602922 = header.getOrDefault("X-Amz-Signature")
  valid_602922 = validateParameter(valid_602922, JString, required = false,
                                 default = nil)
  if valid_602922 != nil:
    section.add "X-Amz-Signature", valid_602922
  var valid_602923 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_602923 = validateParameter(valid_602923, JString, required = false,
                                 default = nil)
  if valid_602923 != nil:
    section.add "X-Amz-SignedHeaders", valid_602923
  var valid_602924 = header.getOrDefault("X-Amz-Credential")
  valid_602924 = validateParameter(valid_602924, JString, required = false,
                                 default = nil)
  if valid_602924 != nil:
    section.add "X-Amz-Credential", valid_602924
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_602947: Call_GetAddRoleToDBCluster_602787; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_602947.validator(path, query, header, formData, body)
  let scheme = call_602947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_602947.url(scheme.get, call_602947.host, call_602947.base,
                         call_602947.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_602947, url, valid)

proc call*(call_603018: Call_GetAddRoleToDBCluster_602787;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603019 = newJObject()
  add(query_603019, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603019, "RoleArn", newJString(RoleArn))
  add(query_603019, "Action", newJString(Action))
  add(query_603019, "Version", newJString(Version))
  result = call_603018.call(nil, query_603019, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_602787(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_602788, base: "/",
    url: url_GetAddRoleToDBCluster_602789, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_603094 = ref object of OpenApiRestCall_602450
proc url_PostAddSourceIdentifierToSubscription_603096(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_603095(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603097 = query.getOrDefault("Action")
  valid_603097 = validateParameter(valid_603097, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_603097 != nil:
    section.add "Action", valid_603097
  var valid_603098 = query.getOrDefault("Version")
  valid_603098 = validateParameter(valid_603098, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603098 != nil:
    section.add "Version", valid_603098
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603099 = header.getOrDefault("X-Amz-Date")
  valid_603099 = validateParameter(valid_603099, JString, required = false,
                                 default = nil)
  if valid_603099 != nil:
    section.add "X-Amz-Date", valid_603099
  var valid_603100 = header.getOrDefault("X-Amz-Security-Token")
  valid_603100 = validateParameter(valid_603100, JString, required = false,
                                 default = nil)
  if valid_603100 != nil:
    section.add "X-Amz-Security-Token", valid_603100
  var valid_603101 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603101 = validateParameter(valid_603101, JString, required = false,
                                 default = nil)
  if valid_603101 != nil:
    section.add "X-Amz-Content-Sha256", valid_603101
  var valid_603102 = header.getOrDefault("X-Amz-Algorithm")
  valid_603102 = validateParameter(valid_603102, JString, required = false,
                                 default = nil)
  if valid_603102 != nil:
    section.add "X-Amz-Algorithm", valid_603102
  var valid_603103 = header.getOrDefault("X-Amz-Signature")
  valid_603103 = validateParameter(valid_603103, JString, required = false,
                                 default = nil)
  if valid_603103 != nil:
    section.add "X-Amz-Signature", valid_603103
  var valid_603104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603104 = validateParameter(valid_603104, JString, required = false,
                                 default = nil)
  if valid_603104 != nil:
    section.add "X-Amz-SignedHeaders", valid_603104
  var valid_603105 = header.getOrDefault("X-Amz-Credential")
  valid_603105 = validateParameter(valid_603105, JString, required = false,
                                 default = nil)
  if valid_603105 != nil:
    section.add "X-Amz-Credential", valid_603105
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_603106 = formData.getOrDefault("SourceIdentifier")
  valid_603106 = validateParameter(valid_603106, JString, required = true,
                                 default = nil)
  if valid_603106 != nil:
    section.add "SourceIdentifier", valid_603106
  var valid_603107 = formData.getOrDefault("SubscriptionName")
  valid_603107 = validateParameter(valid_603107, JString, required = true,
                                 default = nil)
  if valid_603107 != nil:
    section.add "SubscriptionName", valid_603107
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603108: Call_PostAddSourceIdentifierToSubscription_603094;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_603108.validator(path, query, header, formData, body)
  let scheme = call_603108.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603108.url(scheme.get, call_603108.host, call_603108.base,
                         call_603108.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603108, url, valid)

proc call*(call_603109: Call_PostAddSourceIdentifierToSubscription_603094;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603110 = newJObject()
  var formData_603111 = newJObject()
  add(formData_603111, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_603111, "SubscriptionName", newJString(SubscriptionName))
  add(query_603110, "Action", newJString(Action))
  add(query_603110, "Version", newJString(Version))
  result = call_603109.call(nil, query_603110, nil, formData_603111, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_603094(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_603095, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_603096,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_603077 = ref object of OpenApiRestCall_602450
proc url_GetAddSourceIdentifierToSubscription_603079(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_603078(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603080 = query.getOrDefault("Action")
  valid_603080 = validateParameter(valid_603080, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_603080 != nil:
    section.add "Action", valid_603080
  var valid_603081 = query.getOrDefault("SourceIdentifier")
  valid_603081 = validateParameter(valid_603081, JString, required = true,
                                 default = nil)
  if valid_603081 != nil:
    section.add "SourceIdentifier", valid_603081
  var valid_603082 = query.getOrDefault("SubscriptionName")
  valid_603082 = validateParameter(valid_603082, JString, required = true,
                                 default = nil)
  if valid_603082 != nil:
    section.add "SubscriptionName", valid_603082
  var valid_603083 = query.getOrDefault("Version")
  valid_603083 = validateParameter(valid_603083, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603083 != nil:
    section.add "Version", valid_603083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603084 = header.getOrDefault("X-Amz-Date")
  valid_603084 = validateParameter(valid_603084, JString, required = false,
                                 default = nil)
  if valid_603084 != nil:
    section.add "X-Amz-Date", valid_603084
  var valid_603085 = header.getOrDefault("X-Amz-Security-Token")
  valid_603085 = validateParameter(valid_603085, JString, required = false,
                                 default = nil)
  if valid_603085 != nil:
    section.add "X-Amz-Security-Token", valid_603085
  var valid_603086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603086 = validateParameter(valid_603086, JString, required = false,
                                 default = nil)
  if valid_603086 != nil:
    section.add "X-Amz-Content-Sha256", valid_603086
  var valid_603087 = header.getOrDefault("X-Amz-Algorithm")
  valid_603087 = validateParameter(valid_603087, JString, required = false,
                                 default = nil)
  if valid_603087 != nil:
    section.add "X-Amz-Algorithm", valid_603087
  var valid_603088 = header.getOrDefault("X-Amz-Signature")
  valid_603088 = validateParameter(valid_603088, JString, required = false,
                                 default = nil)
  if valid_603088 != nil:
    section.add "X-Amz-Signature", valid_603088
  var valid_603089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603089 = validateParameter(valid_603089, JString, required = false,
                                 default = nil)
  if valid_603089 != nil:
    section.add "X-Amz-SignedHeaders", valid_603089
  var valid_603090 = header.getOrDefault("X-Amz-Credential")
  valid_603090 = validateParameter(valid_603090, JString, required = false,
                                 default = nil)
  if valid_603090 != nil:
    section.add "X-Amz-Credential", valid_603090
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603091: Call_GetAddSourceIdentifierToSubscription_603077;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_603091.validator(path, query, header, formData, body)
  let scheme = call_603091.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603091.url(scheme.get, call_603091.host, call_603091.base,
                         call_603091.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603091, url, valid)

proc call*(call_603092: Call_GetAddSourceIdentifierToSubscription_603077;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Version: string (required)
  var query_603093 = newJObject()
  add(query_603093, "Action", newJString(Action))
  add(query_603093, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_603093, "SubscriptionName", newJString(SubscriptionName))
  add(query_603093, "Version", newJString(Version))
  result = call_603092.call(nil, query_603093, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_603077(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_603078, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_603079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_603129 = ref object of OpenApiRestCall_602450
proc url_PostAddTagsToResource_603131(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostAddTagsToResource_603130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603132 = query.getOrDefault("Action")
  valid_603132 = validateParameter(valid_603132, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_603132 != nil:
    section.add "Action", valid_603132
  var valid_603133 = query.getOrDefault("Version")
  valid_603133 = validateParameter(valid_603133, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603133 != nil:
    section.add "Version", valid_603133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603134 = header.getOrDefault("X-Amz-Date")
  valid_603134 = validateParameter(valid_603134, JString, required = false,
                                 default = nil)
  if valid_603134 != nil:
    section.add "X-Amz-Date", valid_603134
  var valid_603135 = header.getOrDefault("X-Amz-Security-Token")
  valid_603135 = validateParameter(valid_603135, JString, required = false,
                                 default = nil)
  if valid_603135 != nil:
    section.add "X-Amz-Security-Token", valid_603135
  var valid_603136 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603136 = validateParameter(valid_603136, JString, required = false,
                                 default = nil)
  if valid_603136 != nil:
    section.add "X-Amz-Content-Sha256", valid_603136
  var valid_603137 = header.getOrDefault("X-Amz-Algorithm")
  valid_603137 = validateParameter(valid_603137, JString, required = false,
                                 default = nil)
  if valid_603137 != nil:
    section.add "X-Amz-Algorithm", valid_603137
  var valid_603138 = header.getOrDefault("X-Amz-Signature")
  valid_603138 = validateParameter(valid_603138, JString, required = false,
                                 default = nil)
  if valid_603138 != nil:
    section.add "X-Amz-Signature", valid_603138
  var valid_603139 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603139 = validateParameter(valid_603139, JString, required = false,
                                 default = nil)
  if valid_603139 != nil:
    section.add "X-Amz-SignedHeaders", valid_603139
  var valid_603140 = header.getOrDefault("X-Amz-Credential")
  valid_603140 = validateParameter(valid_603140, JString, required = false,
                                 default = nil)
  if valid_603140 != nil:
    section.add "X-Amz-Credential", valid_603140
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_603141 = formData.getOrDefault("Tags")
  valid_603141 = validateParameter(valid_603141, JArray, required = true, default = nil)
  if valid_603141 != nil:
    section.add "Tags", valid_603141
  var valid_603142 = formData.getOrDefault("ResourceName")
  valid_603142 = validateParameter(valid_603142, JString, required = true,
                                 default = nil)
  if valid_603142 != nil:
    section.add "ResourceName", valid_603142
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603143: Call_PostAddTagsToResource_603129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_603143.validator(path, query, header, formData, body)
  let scheme = call_603143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603143.url(scheme.get, call_603143.host, call_603143.base,
                         call_603143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603143, url, valid)

proc call*(call_603144: Call_PostAddTagsToResource_603129; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_603145 = newJObject()
  var formData_603146 = newJObject()
  if Tags != nil:
    formData_603146.add "Tags", Tags
  add(query_603145, "Action", newJString(Action))
  add(formData_603146, "ResourceName", newJString(ResourceName))
  add(query_603145, "Version", newJString(Version))
  result = call_603144.call(nil, query_603145, nil, formData_603146, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_603129(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_603130, base: "/",
    url: url_PostAddTagsToResource_603131, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_603112 = ref object of OpenApiRestCall_602450
proc url_GetAddTagsToResource_603114(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetAddTagsToResource_603113(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_603115 = query.getOrDefault("Tags")
  valid_603115 = validateParameter(valid_603115, JArray, required = true, default = nil)
  if valid_603115 != nil:
    section.add "Tags", valid_603115
  var valid_603116 = query.getOrDefault("ResourceName")
  valid_603116 = validateParameter(valid_603116, JString, required = true,
                                 default = nil)
  if valid_603116 != nil:
    section.add "ResourceName", valid_603116
  var valid_603117 = query.getOrDefault("Action")
  valid_603117 = validateParameter(valid_603117, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_603117 != nil:
    section.add "Action", valid_603117
  var valid_603118 = query.getOrDefault("Version")
  valid_603118 = validateParameter(valid_603118, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603118 != nil:
    section.add "Version", valid_603118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603119 = header.getOrDefault("X-Amz-Date")
  valid_603119 = validateParameter(valid_603119, JString, required = false,
                                 default = nil)
  if valid_603119 != nil:
    section.add "X-Amz-Date", valid_603119
  var valid_603120 = header.getOrDefault("X-Amz-Security-Token")
  valid_603120 = validateParameter(valid_603120, JString, required = false,
                                 default = nil)
  if valid_603120 != nil:
    section.add "X-Amz-Security-Token", valid_603120
  var valid_603121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603121 = validateParameter(valid_603121, JString, required = false,
                                 default = nil)
  if valid_603121 != nil:
    section.add "X-Amz-Content-Sha256", valid_603121
  var valid_603122 = header.getOrDefault("X-Amz-Algorithm")
  valid_603122 = validateParameter(valid_603122, JString, required = false,
                                 default = nil)
  if valid_603122 != nil:
    section.add "X-Amz-Algorithm", valid_603122
  var valid_603123 = header.getOrDefault("X-Amz-Signature")
  valid_603123 = validateParameter(valid_603123, JString, required = false,
                                 default = nil)
  if valid_603123 != nil:
    section.add "X-Amz-Signature", valid_603123
  var valid_603124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603124 = validateParameter(valid_603124, JString, required = false,
                                 default = nil)
  if valid_603124 != nil:
    section.add "X-Amz-SignedHeaders", valid_603124
  var valid_603125 = header.getOrDefault("X-Amz-Credential")
  valid_603125 = validateParameter(valid_603125, JString, required = false,
                                 default = nil)
  if valid_603125 != nil:
    section.add "X-Amz-Credential", valid_603125
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603126: Call_GetAddTagsToResource_603112; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_603126.validator(path, query, header, formData, body)
  let scheme = call_603126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603126.url(scheme.get, call_603126.host, call_603126.base,
                         call_603126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603126, url, valid)

proc call*(call_603127: Call_GetAddTagsToResource_603112; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603128 = newJObject()
  if Tags != nil:
    query_603128.add "Tags", Tags
  add(query_603128, "ResourceName", newJString(ResourceName))
  add(query_603128, "Action", newJString(Action))
  add(query_603128, "Version", newJString(Version))
  result = call_603127.call(nil, query_603128, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_603112(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_603113, base: "/",
    url: url_GetAddTagsToResource_603114, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_603165 = ref object of OpenApiRestCall_602450
proc url_PostApplyPendingMaintenanceAction_603167(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_603166(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603168 = query.getOrDefault("Action")
  valid_603168 = validateParameter(valid_603168, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_603168 != nil:
    section.add "Action", valid_603168
  var valid_603169 = query.getOrDefault("Version")
  valid_603169 = validateParameter(valid_603169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603169 != nil:
    section.add "Version", valid_603169
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603170 = header.getOrDefault("X-Amz-Date")
  valid_603170 = validateParameter(valid_603170, JString, required = false,
                                 default = nil)
  if valid_603170 != nil:
    section.add "X-Amz-Date", valid_603170
  var valid_603171 = header.getOrDefault("X-Amz-Security-Token")
  valid_603171 = validateParameter(valid_603171, JString, required = false,
                                 default = nil)
  if valid_603171 != nil:
    section.add "X-Amz-Security-Token", valid_603171
  var valid_603172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603172 = validateParameter(valid_603172, JString, required = false,
                                 default = nil)
  if valid_603172 != nil:
    section.add "X-Amz-Content-Sha256", valid_603172
  var valid_603173 = header.getOrDefault("X-Amz-Algorithm")
  valid_603173 = validateParameter(valid_603173, JString, required = false,
                                 default = nil)
  if valid_603173 != nil:
    section.add "X-Amz-Algorithm", valid_603173
  var valid_603174 = header.getOrDefault("X-Amz-Signature")
  valid_603174 = validateParameter(valid_603174, JString, required = false,
                                 default = nil)
  if valid_603174 != nil:
    section.add "X-Amz-Signature", valid_603174
  var valid_603175 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603175 = validateParameter(valid_603175, JString, required = false,
                                 default = nil)
  if valid_603175 != nil:
    section.add "X-Amz-SignedHeaders", valid_603175
  var valid_603176 = header.getOrDefault("X-Amz-Credential")
  valid_603176 = validateParameter(valid_603176, JString, required = false,
                                 default = nil)
  if valid_603176 != nil:
    section.add "X-Amz-Credential", valid_603176
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ApplyAction` field"
  var valid_603177 = formData.getOrDefault("ApplyAction")
  valid_603177 = validateParameter(valid_603177, JString, required = true,
                                 default = nil)
  if valid_603177 != nil:
    section.add "ApplyAction", valid_603177
  var valid_603178 = formData.getOrDefault("ResourceIdentifier")
  valid_603178 = validateParameter(valid_603178, JString, required = true,
                                 default = nil)
  if valid_603178 != nil:
    section.add "ResourceIdentifier", valid_603178
  var valid_603179 = formData.getOrDefault("OptInType")
  valid_603179 = validateParameter(valid_603179, JString, required = true,
                                 default = nil)
  if valid_603179 != nil:
    section.add "OptInType", valid_603179
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603180: Call_PostApplyPendingMaintenanceAction_603165;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_603180.validator(path, query, header, formData, body)
  let scheme = call_603180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603180.url(scheme.get, call_603180.host, call_603180.base,
                         call_603180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603180, url, valid)

proc call*(call_603181: Call_PostApplyPendingMaintenanceAction_603165;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   Action: string (required)
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_603182 = newJObject()
  var formData_603183 = newJObject()
  add(query_603182, "Action", newJString(Action))
  add(formData_603183, "ApplyAction", newJString(ApplyAction))
  add(formData_603183, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_603183, "OptInType", newJString(OptInType))
  add(query_603182, "Version", newJString(Version))
  result = call_603181.call(nil, query_603182, nil, formData_603183, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_603165(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_603166, base: "/",
    url: url_PostApplyPendingMaintenanceAction_603167,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_603147 = ref object of OpenApiRestCall_602450
proc url_GetApplyPendingMaintenanceAction_603149(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_603148(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ApplyAction` field"
  var valid_603150 = query.getOrDefault("ApplyAction")
  valid_603150 = validateParameter(valid_603150, JString, required = true,
                                 default = nil)
  if valid_603150 != nil:
    section.add "ApplyAction", valid_603150
  var valid_603151 = query.getOrDefault("ResourceIdentifier")
  valid_603151 = validateParameter(valid_603151, JString, required = true,
                                 default = nil)
  if valid_603151 != nil:
    section.add "ResourceIdentifier", valid_603151
  var valid_603152 = query.getOrDefault("Action")
  valid_603152 = validateParameter(valid_603152, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_603152 != nil:
    section.add "Action", valid_603152
  var valid_603153 = query.getOrDefault("OptInType")
  valid_603153 = validateParameter(valid_603153, JString, required = true,
                                 default = nil)
  if valid_603153 != nil:
    section.add "OptInType", valid_603153
  var valid_603154 = query.getOrDefault("Version")
  valid_603154 = validateParameter(valid_603154, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603154 != nil:
    section.add "Version", valid_603154
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603155 = header.getOrDefault("X-Amz-Date")
  valid_603155 = validateParameter(valid_603155, JString, required = false,
                                 default = nil)
  if valid_603155 != nil:
    section.add "X-Amz-Date", valid_603155
  var valid_603156 = header.getOrDefault("X-Amz-Security-Token")
  valid_603156 = validateParameter(valid_603156, JString, required = false,
                                 default = nil)
  if valid_603156 != nil:
    section.add "X-Amz-Security-Token", valid_603156
  var valid_603157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603157 = validateParameter(valid_603157, JString, required = false,
                                 default = nil)
  if valid_603157 != nil:
    section.add "X-Amz-Content-Sha256", valid_603157
  var valid_603158 = header.getOrDefault("X-Amz-Algorithm")
  valid_603158 = validateParameter(valid_603158, JString, required = false,
                                 default = nil)
  if valid_603158 != nil:
    section.add "X-Amz-Algorithm", valid_603158
  var valid_603159 = header.getOrDefault("X-Amz-Signature")
  valid_603159 = validateParameter(valid_603159, JString, required = false,
                                 default = nil)
  if valid_603159 != nil:
    section.add "X-Amz-Signature", valid_603159
  var valid_603160 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603160 = validateParameter(valid_603160, JString, required = false,
                                 default = nil)
  if valid_603160 != nil:
    section.add "X-Amz-SignedHeaders", valid_603160
  var valid_603161 = header.getOrDefault("X-Amz-Credential")
  valid_603161 = validateParameter(valid_603161, JString, required = false,
                                 default = nil)
  if valid_603161 != nil:
    section.add "X-Amz-Credential", valid_603161
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603162: Call_GetApplyPendingMaintenanceAction_603147;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_603162.validator(path, query, header, formData, body)
  let scheme = call_603162.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603162.url(scheme.get, call_603162.host, call_603162.base,
                         call_603162.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603162, url, valid)

proc call*(call_603163: Call_GetApplyPendingMaintenanceAction_603147;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_603164 = newJObject()
  add(query_603164, "ApplyAction", newJString(ApplyAction))
  add(query_603164, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_603164, "Action", newJString(Action))
  add(query_603164, "OptInType", newJString(OptInType))
  add(query_603164, "Version", newJString(Version))
  result = call_603163.call(nil, query_603164, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_603147(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_603148, base: "/",
    url: url_GetApplyPendingMaintenanceAction_603149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_603203 = ref object of OpenApiRestCall_602450
proc url_PostCopyDBClusterParameterGroup_603205(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_603204(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603206 = query.getOrDefault("Action")
  valid_603206 = validateParameter(valid_603206, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_603206 != nil:
    section.add "Action", valid_603206
  var valid_603207 = query.getOrDefault("Version")
  valid_603207 = validateParameter(valid_603207, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603207 != nil:
    section.add "Version", valid_603207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603208 = header.getOrDefault("X-Amz-Date")
  valid_603208 = validateParameter(valid_603208, JString, required = false,
                                 default = nil)
  if valid_603208 != nil:
    section.add "X-Amz-Date", valid_603208
  var valid_603209 = header.getOrDefault("X-Amz-Security-Token")
  valid_603209 = validateParameter(valid_603209, JString, required = false,
                                 default = nil)
  if valid_603209 != nil:
    section.add "X-Amz-Security-Token", valid_603209
  var valid_603210 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603210 = validateParameter(valid_603210, JString, required = false,
                                 default = nil)
  if valid_603210 != nil:
    section.add "X-Amz-Content-Sha256", valid_603210
  var valid_603211 = header.getOrDefault("X-Amz-Algorithm")
  valid_603211 = validateParameter(valid_603211, JString, required = false,
                                 default = nil)
  if valid_603211 != nil:
    section.add "X-Amz-Algorithm", valid_603211
  var valid_603212 = header.getOrDefault("X-Amz-Signature")
  valid_603212 = validateParameter(valid_603212, JString, required = false,
                                 default = nil)
  if valid_603212 != nil:
    section.add "X-Amz-Signature", valid_603212
  var valid_603213 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603213 = validateParameter(valid_603213, JString, required = false,
                                 default = nil)
  if valid_603213 != nil:
    section.add "X-Amz-SignedHeaders", valid_603213
  var valid_603214 = header.getOrDefault("X-Amz-Credential")
  valid_603214 = validateParameter(valid_603214, JString, required = false,
                                 default = nil)
  if valid_603214 != nil:
    section.add "X-Amz-Credential", valid_603214
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_603215 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_603215 = validateParameter(valid_603215, JString, required = true,
                                 default = nil)
  if valid_603215 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_603215
  var valid_603216 = formData.getOrDefault("Tags")
  valid_603216 = validateParameter(valid_603216, JArray, required = false,
                                 default = nil)
  if valid_603216 != nil:
    section.add "Tags", valid_603216
  var valid_603217 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_603217 = validateParameter(valid_603217, JString, required = true,
                                 default = nil)
  if valid_603217 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_603217
  var valid_603218 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_603218 = validateParameter(valid_603218, JString, required = true,
                                 default = nil)
  if valid_603218 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_603218
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603219: Call_PostCopyDBClusterParameterGroup_603203;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_603219.validator(path, query, header, formData, body)
  let scheme = call_603219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603219.url(scheme.get, call_603219.host, call_603219.base,
                         call_603219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603219, url, valid)

proc call*(call_603220: Call_PostCopyDBClusterParameterGroup_603203;
          TargetDBClusterParameterGroupDescription: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_603221 = newJObject()
  var formData_603222 = newJObject()
  add(formData_603222, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    formData_603222.add "Tags", Tags
  add(query_603221, "Action", newJString(Action))
  add(formData_603222, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(formData_603222, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_603221, "Version", newJString(Version))
  result = call_603220.call(nil, query_603221, nil, formData_603222, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_603203(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_603204, base: "/",
    url: url_PostCopyDBClusterParameterGroup_603205,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_603184 = ref object of OpenApiRestCall_602450
proc url_GetCopyDBClusterParameterGroup_603186(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_603185(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: JString (required)
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBClusterParameterGroupIdentifier` field"
  var valid_603187 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_603187 = validateParameter(valid_603187, JString, required = true,
                                 default = nil)
  if valid_603187 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_603187
  var valid_603188 = query.getOrDefault("Tags")
  valid_603188 = validateParameter(valid_603188, JArray, required = false,
                                 default = nil)
  if valid_603188 != nil:
    section.add "Tags", valid_603188
  var valid_603189 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_603189 = validateParameter(valid_603189, JString, required = true,
                                 default = nil)
  if valid_603189 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_603189
  var valid_603190 = query.getOrDefault("Action")
  valid_603190 = validateParameter(valid_603190, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_603190 != nil:
    section.add "Action", valid_603190
  var valid_603191 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_603191 = validateParameter(valid_603191, JString, required = true,
                                 default = nil)
  if valid_603191 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_603191
  var valid_603192 = query.getOrDefault("Version")
  valid_603192 = validateParameter(valid_603192, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603192 != nil:
    section.add "Version", valid_603192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603193 = header.getOrDefault("X-Amz-Date")
  valid_603193 = validateParameter(valid_603193, JString, required = false,
                                 default = nil)
  if valid_603193 != nil:
    section.add "X-Amz-Date", valid_603193
  var valid_603194 = header.getOrDefault("X-Amz-Security-Token")
  valid_603194 = validateParameter(valid_603194, JString, required = false,
                                 default = nil)
  if valid_603194 != nil:
    section.add "X-Amz-Security-Token", valid_603194
  var valid_603195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603195 = validateParameter(valid_603195, JString, required = false,
                                 default = nil)
  if valid_603195 != nil:
    section.add "X-Amz-Content-Sha256", valid_603195
  var valid_603196 = header.getOrDefault("X-Amz-Algorithm")
  valid_603196 = validateParameter(valid_603196, JString, required = false,
                                 default = nil)
  if valid_603196 != nil:
    section.add "X-Amz-Algorithm", valid_603196
  var valid_603197 = header.getOrDefault("X-Amz-Signature")
  valid_603197 = validateParameter(valid_603197, JString, required = false,
                                 default = nil)
  if valid_603197 != nil:
    section.add "X-Amz-Signature", valid_603197
  var valid_603198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603198 = validateParameter(valid_603198, JString, required = false,
                                 default = nil)
  if valid_603198 != nil:
    section.add "X-Amz-SignedHeaders", valid_603198
  var valid_603199 = header.getOrDefault("X-Amz-Credential")
  valid_603199 = validateParameter(valid_603199, JString, required = false,
                                 default = nil)
  if valid_603199 != nil:
    section.add "X-Amz-Credential", valid_603199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603200: Call_GetCopyDBClusterParameterGroup_603184; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_603200.validator(path, query, header, formData, body)
  let scheme = call_603200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603200.url(scheme.get, call_603200.host, call_603200.base,
                         call_603200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603200, url, valid)

proc call*(call_603201: Call_GetCopyDBClusterParameterGroup_603184;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_603202 = newJObject()
  add(query_603202, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  if Tags != nil:
    query_603202.add "Tags", Tags
  add(query_603202, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  add(query_603202, "Action", newJString(Action))
  add(query_603202, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_603202, "Version", newJString(Version))
  result = call_603201.call(nil, query_603202, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_603184(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_603185, base: "/",
    url: url_GetCopyDBClusterParameterGroup_603186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_603244 = ref object of OpenApiRestCall_602450
proc url_PostCopyDBClusterSnapshot_603246(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBClusterSnapshot_603245(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603247 = query.getOrDefault("Action")
  valid_603247 = validateParameter(valid_603247, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_603247 != nil:
    section.add "Action", valid_603247
  var valid_603248 = query.getOrDefault("Version")
  valid_603248 = validateParameter(valid_603248, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603248 != nil:
    section.add "Version", valid_603248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603249 = header.getOrDefault("X-Amz-Date")
  valid_603249 = validateParameter(valid_603249, JString, required = false,
                                 default = nil)
  if valid_603249 != nil:
    section.add "X-Amz-Date", valid_603249
  var valid_603250 = header.getOrDefault("X-Amz-Security-Token")
  valid_603250 = validateParameter(valid_603250, JString, required = false,
                                 default = nil)
  if valid_603250 != nil:
    section.add "X-Amz-Security-Token", valid_603250
  var valid_603251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603251 = validateParameter(valid_603251, JString, required = false,
                                 default = nil)
  if valid_603251 != nil:
    section.add "X-Amz-Content-Sha256", valid_603251
  var valid_603252 = header.getOrDefault("X-Amz-Algorithm")
  valid_603252 = validateParameter(valid_603252, JString, required = false,
                                 default = nil)
  if valid_603252 != nil:
    section.add "X-Amz-Algorithm", valid_603252
  var valid_603253 = header.getOrDefault("X-Amz-Signature")
  valid_603253 = validateParameter(valid_603253, JString, required = false,
                                 default = nil)
  if valid_603253 != nil:
    section.add "X-Amz-Signature", valid_603253
  var valid_603254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603254 = validateParameter(valid_603254, JString, required = false,
                                 default = nil)
  if valid_603254 != nil:
    section.add "X-Amz-SignedHeaders", valid_603254
  var valid_603255 = header.getOrDefault("X-Amz-Credential")
  valid_603255 = validateParameter(valid_603255, JString, required = false,
                                 default = nil)
  if valid_603255 != nil:
    section.add "X-Amz-Credential", valid_603255
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  section = newJObject()
  var valid_603256 = formData.getOrDefault("PreSignedUrl")
  valid_603256 = validateParameter(valid_603256, JString, required = false,
                                 default = nil)
  if valid_603256 != nil:
    section.add "PreSignedUrl", valid_603256
  var valid_603257 = formData.getOrDefault("Tags")
  valid_603257 = validateParameter(valid_603257, JArray, required = false,
                                 default = nil)
  if valid_603257 != nil:
    section.add "Tags", valid_603257
  var valid_603258 = formData.getOrDefault("CopyTags")
  valid_603258 = validateParameter(valid_603258, JBool, required = false, default = nil)
  if valid_603258 != nil:
    section.add "CopyTags", valid_603258
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_603259 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_603259 = validateParameter(valid_603259, JString, required = true,
                                 default = nil)
  if valid_603259 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_603259
  var valid_603260 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_603260 = validateParameter(valid_603260, JString, required = true,
                                 default = nil)
  if valid_603260 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_603260
  var valid_603261 = formData.getOrDefault("KmsKeyId")
  valid_603261 = validateParameter(valid_603261, JString, required = false,
                                 default = nil)
  if valid_603261 != nil:
    section.add "KmsKeyId", valid_603261
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603262: Call_PostCopyDBClusterSnapshot_603244; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_603262.validator(path, query, header, formData, body)
  let scheme = call_603262.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603262.url(scheme.get, call_603262.host, call_603262.base,
                         call_603262.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603262, url, valid)

proc call*(call_603263: Call_PostCopyDBClusterSnapshot_603244;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   Version: string (required)
  var query_603264 = newJObject()
  var formData_603265 = newJObject()
  add(formData_603265, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    formData_603265.add "Tags", Tags
  add(formData_603265, "CopyTags", newJBool(CopyTags))
  add(formData_603265, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_603265, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_603264, "Action", newJString(Action))
  add(formData_603265, "KmsKeyId", newJString(KmsKeyId))
  add(query_603264, "Version", newJString(Version))
  result = call_603263.call(nil, query_603264, nil, formData_603265, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_603244(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_603245, base: "/",
    url: url_PostCopyDBClusterSnapshot_603246,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_603223 = ref object of OpenApiRestCall_602450
proc url_GetCopyDBClusterSnapshot_603225(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBClusterSnapshot_603224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  section = newJObject()
  var valid_603226 = query.getOrDefault("PreSignedUrl")
  valid_603226 = validateParameter(valid_603226, JString, required = false,
                                 default = nil)
  if valid_603226 != nil:
    section.add "PreSignedUrl", valid_603226
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_603227 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_603227 = validateParameter(valid_603227, JString, required = true,
                                 default = nil)
  if valid_603227 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_603227
  var valid_603228 = query.getOrDefault("Tags")
  valid_603228 = validateParameter(valid_603228, JArray, required = false,
                                 default = nil)
  if valid_603228 != nil:
    section.add "Tags", valid_603228
  var valid_603229 = query.getOrDefault("Action")
  valid_603229 = validateParameter(valid_603229, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_603229 != nil:
    section.add "Action", valid_603229
  var valid_603230 = query.getOrDefault("KmsKeyId")
  valid_603230 = validateParameter(valid_603230, JString, required = false,
                                 default = nil)
  if valid_603230 != nil:
    section.add "KmsKeyId", valid_603230
  var valid_603231 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_603231 = validateParameter(valid_603231, JString, required = true,
                                 default = nil)
  if valid_603231 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_603231
  var valid_603232 = query.getOrDefault("Version")
  valid_603232 = validateParameter(valid_603232, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603232 != nil:
    section.add "Version", valid_603232
  var valid_603233 = query.getOrDefault("CopyTags")
  valid_603233 = validateParameter(valid_603233, JBool, required = false, default = nil)
  if valid_603233 != nil:
    section.add "CopyTags", valid_603233
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603234 = header.getOrDefault("X-Amz-Date")
  valid_603234 = validateParameter(valid_603234, JString, required = false,
                                 default = nil)
  if valid_603234 != nil:
    section.add "X-Amz-Date", valid_603234
  var valid_603235 = header.getOrDefault("X-Amz-Security-Token")
  valid_603235 = validateParameter(valid_603235, JString, required = false,
                                 default = nil)
  if valid_603235 != nil:
    section.add "X-Amz-Security-Token", valid_603235
  var valid_603236 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603236 = validateParameter(valid_603236, JString, required = false,
                                 default = nil)
  if valid_603236 != nil:
    section.add "X-Amz-Content-Sha256", valid_603236
  var valid_603237 = header.getOrDefault("X-Amz-Algorithm")
  valid_603237 = validateParameter(valid_603237, JString, required = false,
                                 default = nil)
  if valid_603237 != nil:
    section.add "X-Amz-Algorithm", valid_603237
  var valid_603238 = header.getOrDefault("X-Amz-Signature")
  valid_603238 = validateParameter(valid_603238, JString, required = false,
                                 default = nil)
  if valid_603238 != nil:
    section.add "X-Amz-Signature", valid_603238
  var valid_603239 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603239 = validateParameter(valid_603239, JString, required = false,
                                 default = nil)
  if valid_603239 != nil:
    section.add "X-Amz-SignedHeaders", valid_603239
  var valid_603240 = header.getOrDefault("X-Amz-Credential")
  valid_603240 = validateParameter(valid_603240, JString, required = false,
                                 default = nil)
  if valid_603240 != nil:
    section.add "X-Amz-Credential", valid_603240
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603241: Call_GetCopyDBClusterSnapshot_603223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_603241.validator(path, query, header, formData, body)
  let scheme = call_603241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603241.url(scheme.get, call_603241.host, call_603241.base,
                         call_603241.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603241, url, valid)

proc call*(call_603242: Call_GetCopyDBClusterSnapshot_603223;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; Action: string = "CopyDBClusterSnapshot";
          KmsKeyId: string = ""; Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  var query_603243 = newJObject()
  add(query_603243, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_603243, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  if Tags != nil:
    query_603243.add "Tags", Tags
  add(query_603243, "Action", newJString(Action))
  add(query_603243, "KmsKeyId", newJString(KmsKeyId))
  add(query_603243, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_603243, "Version", newJString(Version))
  add(query_603243, "CopyTags", newJBool(CopyTags))
  result = call_603242.call(nil, query_603243, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_603223(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_603224, base: "/",
    url: url_GetCopyDBClusterSnapshot_603225, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_603285 = ref object of OpenApiRestCall_602450
proc url_PostCopyDBParameterGroup_603287(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCopyDBParameterGroup_603286(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603288 = query.getOrDefault("Action")
  valid_603288 = validateParameter(valid_603288, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_603288 != nil:
    section.add "Action", valid_603288
  var valid_603289 = query.getOrDefault("Version")
  valid_603289 = validateParameter(valid_603289, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603289 != nil:
    section.add "Version", valid_603289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603290 = header.getOrDefault("X-Amz-Date")
  valid_603290 = validateParameter(valid_603290, JString, required = false,
                                 default = nil)
  if valid_603290 != nil:
    section.add "X-Amz-Date", valid_603290
  var valid_603291 = header.getOrDefault("X-Amz-Security-Token")
  valid_603291 = validateParameter(valid_603291, JString, required = false,
                                 default = nil)
  if valid_603291 != nil:
    section.add "X-Amz-Security-Token", valid_603291
  var valid_603292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603292 = validateParameter(valid_603292, JString, required = false,
                                 default = nil)
  if valid_603292 != nil:
    section.add "X-Amz-Content-Sha256", valid_603292
  var valid_603293 = header.getOrDefault("X-Amz-Algorithm")
  valid_603293 = validateParameter(valid_603293, JString, required = false,
                                 default = nil)
  if valid_603293 != nil:
    section.add "X-Amz-Algorithm", valid_603293
  var valid_603294 = header.getOrDefault("X-Amz-Signature")
  valid_603294 = validateParameter(valid_603294, JString, required = false,
                                 default = nil)
  if valid_603294 != nil:
    section.add "X-Amz-Signature", valid_603294
  var valid_603295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603295 = validateParameter(valid_603295, JString, required = false,
                                 default = nil)
  if valid_603295 != nil:
    section.add "X-Amz-SignedHeaders", valid_603295
  var valid_603296 = header.getOrDefault("X-Amz-Credential")
  valid_603296 = validateParameter(valid_603296, JString, required = false,
                                 default = nil)
  if valid_603296 != nil:
    section.add "X-Amz-Credential", valid_603296
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBParameterGroupIdentifier` field"
  var valid_603297 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_603297 = validateParameter(valid_603297, JString, required = true,
                                 default = nil)
  if valid_603297 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_603297
  var valid_603298 = formData.getOrDefault("Tags")
  valid_603298 = validateParameter(valid_603298, JArray, required = false,
                                 default = nil)
  if valid_603298 != nil:
    section.add "Tags", valid_603298
  var valid_603299 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_603299 = validateParameter(valid_603299, JString, required = true,
                                 default = nil)
  if valid_603299 != nil:
    section.add "TargetDBParameterGroupDescription", valid_603299
  var valid_603300 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_603300 = validateParameter(valid_603300, JString, required = true,
                                 default = nil)
  if valid_603300 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_603300
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603301: Call_PostCopyDBParameterGroup_603285; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_603301.validator(path, query, header, formData, body)
  let scheme = call_603301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603301.url(scheme.get, call_603301.host, call_603301.base,
                         call_603301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603301, url, valid)

proc call*(call_603302: Call_PostCopyDBParameterGroup_603285;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          SourceDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  var query_603303 = newJObject()
  var formData_603304 = newJObject()
  add(formData_603304, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  if Tags != nil:
    formData_603304.add "Tags", Tags
  add(query_603303, "Action", newJString(Action))
  add(formData_603304, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(formData_603304, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_603303, "Version", newJString(Version))
  result = call_603302.call(nil, query_603303, nil, formData_603304, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_603285(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_603286, base: "/",
    url: url_PostCopyDBParameterGroup_603287, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_603266 = ref object of OpenApiRestCall_602450
proc url_GetCopyDBParameterGroup_603268(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCopyDBParameterGroup_603267(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: JString (required)
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: JString (required)
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  section = newJObject()
  var valid_603269 = query.getOrDefault("Tags")
  valid_603269 = validateParameter(valid_603269, JArray, required = false,
                                 default = nil)
  if valid_603269 != nil:
    section.add "Tags", valid_603269
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603270 = query.getOrDefault("Action")
  valid_603270 = validateParameter(valid_603270, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_603270 != nil:
    section.add "Action", valid_603270
  var valid_603271 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_603271 = validateParameter(valid_603271, JString, required = true,
                                 default = nil)
  if valid_603271 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_603271
  var valid_603272 = query.getOrDefault("Version")
  valid_603272 = validateParameter(valid_603272, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603272 != nil:
    section.add "Version", valid_603272
  var valid_603273 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_603273 = validateParameter(valid_603273, JString, required = true,
                                 default = nil)
  if valid_603273 != nil:
    section.add "TargetDBParameterGroupDescription", valid_603273
  var valid_603274 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_603274 = validateParameter(valid_603274, JString, required = true,
                                 default = nil)
  if valid_603274 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_603274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603275 = header.getOrDefault("X-Amz-Date")
  valid_603275 = validateParameter(valid_603275, JString, required = false,
                                 default = nil)
  if valid_603275 != nil:
    section.add "X-Amz-Date", valid_603275
  var valid_603276 = header.getOrDefault("X-Amz-Security-Token")
  valid_603276 = validateParameter(valid_603276, JString, required = false,
                                 default = nil)
  if valid_603276 != nil:
    section.add "X-Amz-Security-Token", valid_603276
  var valid_603277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603277 = validateParameter(valid_603277, JString, required = false,
                                 default = nil)
  if valid_603277 != nil:
    section.add "X-Amz-Content-Sha256", valid_603277
  var valid_603278 = header.getOrDefault("X-Amz-Algorithm")
  valid_603278 = validateParameter(valid_603278, JString, required = false,
                                 default = nil)
  if valid_603278 != nil:
    section.add "X-Amz-Algorithm", valid_603278
  var valid_603279 = header.getOrDefault("X-Amz-Signature")
  valid_603279 = validateParameter(valid_603279, JString, required = false,
                                 default = nil)
  if valid_603279 != nil:
    section.add "X-Amz-Signature", valid_603279
  var valid_603280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603280 = validateParameter(valid_603280, JString, required = false,
                                 default = nil)
  if valid_603280 != nil:
    section.add "X-Amz-SignedHeaders", valid_603280
  var valid_603281 = header.getOrDefault("X-Amz-Credential")
  valid_603281 = validateParameter(valid_603281, JString, required = false,
                                 default = nil)
  if valid_603281 != nil:
    section.add "X-Amz-Credential", valid_603281
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603282: Call_GetCopyDBParameterGroup_603266; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_603282.validator(path, query, header, formData, body)
  let scheme = call_603282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603282.url(scheme.get, call_603282.host, call_603282.base,
                         call_603282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603282, url, valid)

proc call*(call_603283: Call_GetCopyDBParameterGroup_603266;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: string (required)
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  var query_603284 = newJObject()
  if Tags != nil:
    query_603284.add "Tags", Tags
  add(query_603284, "Action", newJString(Action))
  add(query_603284, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_603284, "Version", newJString(Version))
  add(query_603284, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_603284, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  result = call_603283.call(nil, query_603284, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_603266(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_603267, base: "/",
    url: url_GetCopyDBParameterGroup_603268, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_603343 = ref object of OpenApiRestCall_602450
proc url_PostCreateDBCluster_603345(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBCluster_603344(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603346 = query.getOrDefault("Action")
  valid_603346 = validateParameter(valid_603346, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_603346 != nil:
    section.add "Action", valid_603346
  var valid_603347 = query.getOrDefault("Version")
  valid_603347 = validateParameter(valid_603347, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603347 != nil:
    section.add "Version", valid_603347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603348 = header.getOrDefault("X-Amz-Date")
  valid_603348 = validateParameter(valid_603348, JString, required = false,
                                 default = nil)
  if valid_603348 != nil:
    section.add "X-Amz-Date", valid_603348
  var valid_603349 = header.getOrDefault("X-Amz-Security-Token")
  valid_603349 = validateParameter(valid_603349, JString, required = false,
                                 default = nil)
  if valid_603349 != nil:
    section.add "X-Amz-Security-Token", valid_603349
  var valid_603350 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603350 = validateParameter(valid_603350, JString, required = false,
                                 default = nil)
  if valid_603350 != nil:
    section.add "X-Amz-Content-Sha256", valid_603350
  var valid_603351 = header.getOrDefault("X-Amz-Algorithm")
  valid_603351 = validateParameter(valid_603351, JString, required = false,
                                 default = nil)
  if valid_603351 != nil:
    section.add "X-Amz-Algorithm", valid_603351
  var valid_603352 = header.getOrDefault("X-Amz-Signature")
  valid_603352 = validateParameter(valid_603352, JString, required = false,
                                 default = nil)
  if valid_603352 != nil:
    section.add "X-Amz-Signature", valid_603352
  var valid_603353 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603353 = validateParameter(valid_603353, JString, required = false,
                                 default = nil)
  if valid_603353 != nil:
    section.add "X-Amz-SignedHeaders", valid_603353
  var valid_603354 = header.getOrDefault("X-Amz-Credential")
  valid_603354 = validateParameter(valid_603354, JString, required = false,
                                 default = nil)
  if valid_603354 != nil:
    section.add "X-Amz-Credential", valid_603354
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_603355 = formData.getOrDefault("Port")
  valid_603355 = validateParameter(valid_603355, JInt, required = false, default = nil)
  if valid_603355 != nil:
    section.add "Port", valid_603355
  var valid_603356 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_603356 = validateParameter(valid_603356, JArray, required = false,
                                 default = nil)
  if valid_603356 != nil:
    section.add "VpcSecurityGroupIds", valid_603356
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_603357 = formData.getOrDefault("Engine")
  valid_603357 = validateParameter(valid_603357, JString, required = true,
                                 default = nil)
  if valid_603357 != nil:
    section.add "Engine", valid_603357
  var valid_603358 = formData.getOrDefault("PreSignedUrl")
  valid_603358 = validateParameter(valid_603358, JString, required = false,
                                 default = nil)
  if valid_603358 != nil:
    section.add "PreSignedUrl", valid_603358
  var valid_603359 = formData.getOrDefault("OptionGroupName")
  valid_603359 = validateParameter(valid_603359, JString, required = false,
                                 default = nil)
  if valid_603359 != nil:
    section.add "OptionGroupName", valid_603359
  var valid_603360 = formData.getOrDefault("BackupRetentionPeriod")
  valid_603360 = validateParameter(valid_603360, JInt, required = false, default = nil)
  if valid_603360 != nil:
    section.add "BackupRetentionPeriod", valid_603360
  var valid_603361 = formData.getOrDefault("Tags")
  valid_603361 = validateParameter(valid_603361, JArray, required = false,
                                 default = nil)
  if valid_603361 != nil:
    section.add "Tags", valid_603361
  var valid_603362 = formData.getOrDefault("MasterUserPassword")
  valid_603362 = validateParameter(valid_603362, JString, required = false,
                                 default = nil)
  if valid_603362 != nil:
    section.add "MasterUserPassword", valid_603362
  var valid_603363 = formData.getOrDefault("DBSubnetGroupName")
  valid_603363 = validateParameter(valid_603363, JString, required = false,
                                 default = nil)
  if valid_603363 != nil:
    section.add "DBSubnetGroupName", valid_603363
  var valid_603364 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_603364 = validateParameter(valid_603364, JString, required = false,
                                 default = nil)
  if valid_603364 != nil:
    section.add "ReplicationSourceIdentifier", valid_603364
  var valid_603365 = formData.getOrDefault("AvailabilityZones")
  valid_603365 = validateParameter(valid_603365, JArray, required = false,
                                 default = nil)
  if valid_603365 != nil:
    section.add "AvailabilityZones", valid_603365
  var valid_603366 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_603366 = validateParameter(valid_603366, JString, required = false,
                                 default = nil)
  if valid_603366 != nil:
    section.add "DBClusterParameterGroupName", valid_603366
  var valid_603367 = formData.getOrDefault("MasterUsername")
  valid_603367 = validateParameter(valid_603367, JString, required = false,
                                 default = nil)
  if valid_603367 != nil:
    section.add "MasterUsername", valid_603367
  var valid_603368 = formData.getOrDefault("DatabaseName")
  valid_603368 = validateParameter(valid_603368, JString, required = false,
                                 default = nil)
  if valid_603368 != nil:
    section.add "DatabaseName", valid_603368
  var valid_603369 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_603369 = validateParameter(valid_603369, JArray, required = false,
                                 default = nil)
  if valid_603369 != nil:
    section.add "EnableCloudwatchLogsExports", valid_603369
  var valid_603370 = formData.getOrDefault("CharacterSetName")
  valid_603370 = validateParameter(valid_603370, JString, required = false,
                                 default = nil)
  if valid_603370 != nil:
    section.add "CharacterSetName", valid_603370
  var valid_603371 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_603371 = validateParameter(valid_603371, JBool, required = false, default = nil)
  if valid_603371 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_603371
  var valid_603372 = formData.getOrDefault("PreferredBackupWindow")
  valid_603372 = validateParameter(valid_603372, JString, required = false,
                                 default = nil)
  if valid_603372 != nil:
    section.add "PreferredBackupWindow", valid_603372
  var valid_603373 = formData.getOrDefault("KmsKeyId")
  valid_603373 = validateParameter(valid_603373, JString, required = false,
                                 default = nil)
  if valid_603373 != nil:
    section.add "KmsKeyId", valid_603373
  var valid_603374 = formData.getOrDefault("StorageEncrypted")
  valid_603374 = validateParameter(valid_603374, JBool, required = false, default = nil)
  if valid_603374 != nil:
    section.add "StorageEncrypted", valid_603374
  var valid_603375 = formData.getOrDefault("DBClusterIdentifier")
  valid_603375 = validateParameter(valid_603375, JString, required = true,
                                 default = nil)
  if valid_603375 != nil:
    section.add "DBClusterIdentifier", valid_603375
  var valid_603376 = formData.getOrDefault("EngineVersion")
  valid_603376 = validateParameter(valid_603376, JString, required = false,
                                 default = nil)
  if valid_603376 != nil:
    section.add "EngineVersion", valid_603376
  var valid_603377 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_603377 = validateParameter(valid_603377, JString, required = false,
                                 default = nil)
  if valid_603377 != nil:
    section.add "PreferredMaintenanceWindow", valid_603377
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603378: Call_PostCreateDBCluster_603343; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_603378.validator(path, query, header, formData, body)
  let scheme = call_603378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603378.url(scheme.get, call_603378.host, call_603378.base,
                         call_603378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603378, url, valid)

proc call*(call_603379: Call_PostCreateDBCluster_603343; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; PreSignedUrl: string = "";
          OptionGroupName: string = ""; BackupRetentionPeriod: int = 0;
          Tags: JsonNode = nil; MasterUserPassword: string = "";
          DBSubnetGroupName: string = ""; ReplicationSourceIdentifier: string = "";
          Action: string = "CreateDBCluster"; AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_603380 = newJObject()
  var formData_603381 = newJObject()
  add(formData_603381, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_603381.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_603381, "Engine", newJString(Engine))
  add(formData_603381, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_603381, "OptionGroupName", newJString(OptionGroupName))
  add(formData_603381, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_603381.add "Tags", Tags
  add(formData_603381, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_603381, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_603381, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_603380, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_603381.add "AvailabilityZones", AvailabilityZones
  add(formData_603381, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_603381, "MasterUsername", newJString(MasterUsername))
  add(formData_603381, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_603381.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_603381, "CharacterSetName", newJString(CharacterSetName))
  add(formData_603381, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_603381, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_603381, "KmsKeyId", newJString(KmsKeyId))
  add(formData_603381, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_603381, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_603381, "EngineVersion", newJString(EngineVersion))
  add(query_603380, "Version", newJString(Version))
  add(formData_603381, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_603379.call(nil, query_603380, nil, formData_603381, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_603343(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_603344, base: "/",
    url: url_PostCreateDBCluster_603345, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_603305 = ref object of OpenApiRestCall_602450
proc url_GetCreateDBCluster_603307(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBCluster_603306(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_603308 = query.getOrDefault("Engine")
  valid_603308 = validateParameter(valid_603308, JString, required = true,
                                 default = nil)
  if valid_603308 != nil:
    section.add "Engine", valid_603308
  var valid_603309 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_603309 = validateParameter(valid_603309, JString, required = false,
                                 default = nil)
  if valid_603309 != nil:
    section.add "ReplicationSourceIdentifier", valid_603309
  var valid_603310 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_603310 = validateParameter(valid_603310, JString, required = false,
                                 default = nil)
  if valid_603310 != nil:
    section.add "PreferredMaintenanceWindow", valid_603310
  var valid_603311 = query.getOrDefault("DBClusterParameterGroupName")
  valid_603311 = validateParameter(valid_603311, JString, required = false,
                                 default = nil)
  if valid_603311 != nil:
    section.add "DBClusterParameterGroupName", valid_603311
  var valid_603312 = query.getOrDefault("StorageEncrypted")
  valid_603312 = validateParameter(valid_603312, JBool, required = false, default = nil)
  if valid_603312 != nil:
    section.add "StorageEncrypted", valid_603312
  var valid_603313 = query.getOrDefault("AvailabilityZones")
  valid_603313 = validateParameter(valid_603313, JArray, required = false,
                                 default = nil)
  if valid_603313 != nil:
    section.add "AvailabilityZones", valid_603313
  var valid_603314 = query.getOrDefault("DatabaseName")
  valid_603314 = validateParameter(valid_603314, JString, required = false,
                                 default = nil)
  if valid_603314 != nil:
    section.add "DatabaseName", valid_603314
  var valid_603315 = query.getOrDefault("DBClusterIdentifier")
  valid_603315 = validateParameter(valid_603315, JString, required = true,
                                 default = nil)
  if valid_603315 != nil:
    section.add "DBClusterIdentifier", valid_603315
  var valid_603316 = query.getOrDefault("OptionGroupName")
  valid_603316 = validateParameter(valid_603316, JString, required = false,
                                 default = nil)
  if valid_603316 != nil:
    section.add "OptionGroupName", valid_603316
  var valid_603317 = query.getOrDefault("MasterUserPassword")
  valid_603317 = validateParameter(valid_603317, JString, required = false,
                                 default = nil)
  if valid_603317 != nil:
    section.add "MasterUserPassword", valid_603317
  var valid_603318 = query.getOrDefault("PreSignedUrl")
  valid_603318 = validateParameter(valid_603318, JString, required = false,
                                 default = nil)
  if valid_603318 != nil:
    section.add "PreSignedUrl", valid_603318
  var valid_603319 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_603319 = validateParameter(valid_603319, JBool, required = false, default = nil)
  if valid_603319 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_603319
  var valid_603320 = query.getOrDefault("VpcSecurityGroupIds")
  valid_603320 = validateParameter(valid_603320, JArray, required = false,
                                 default = nil)
  if valid_603320 != nil:
    section.add "VpcSecurityGroupIds", valid_603320
  var valid_603321 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_603321 = validateParameter(valid_603321, JArray, required = false,
                                 default = nil)
  if valid_603321 != nil:
    section.add "EnableCloudwatchLogsExports", valid_603321
  var valid_603322 = query.getOrDefault("Tags")
  valid_603322 = validateParameter(valid_603322, JArray, required = false,
                                 default = nil)
  if valid_603322 != nil:
    section.add "Tags", valid_603322
  var valid_603323 = query.getOrDefault("BackupRetentionPeriod")
  valid_603323 = validateParameter(valid_603323, JInt, required = false, default = nil)
  if valid_603323 != nil:
    section.add "BackupRetentionPeriod", valid_603323
  var valid_603324 = query.getOrDefault("Action")
  valid_603324 = validateParameter(valid_603324, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_603324 != nil:
    section.add "Action", valid_603324
  var valid_603325 = query.getOrDefault("CharacterSetName")
  valid_603325 = validateParameter(valid_603325, JString, required = false,
                                 default = nil)
  if valid_603325 != nil:
    section.add "CharacterSetName", valid_603325
  var valid_603326 = query.getOrDefault("DBSubnetGroupName")
  valid_603326 = validateParameter(valid_603326, JString, required = false,
                                 default = nil)
  if valid_603326 != nil:
    section.add "DBSubnetGroupName", valid_603326
  var valid_603327 = query.getOrDefault("KmsKeyId")
  valid_603327 = validateParameter(valid_603327, JString, required = false,
                                 default = nil)
  if valid_603327 != nil:
    section.add "KmsKeyId", valid_603327
  var valid_603328 = query.getOrDefault("EngineVersion")
  valid_603328 = validateParameter(valid_603328, JString, required = false,
                                 default = nil)
  if valid_603328 != nil:
    section.add "EngineVersion", valid_603328
  var valid_603329 = query.getOrDefault("Port")
  valid_603329 = validateParameter(valid_603329, JInt, required = false, default = nil)
  if valid_603329 != nil:
    section.add "Port", valid_603329
  var valid_603330 = query.getOrDefault("PreferredBackupWindow")
  valid_603330 = validateParameter(valid_603330, JString, required = false,
                                 default = nil)
  if valid_603330 != nil:
    section.add "PreferredBackupWindow", valid_603330
  var valid_603331 = query.getOrDefault("Version")
  valid_603331 = validateParameter(valid_603331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603331 != nil:
    section.add "Version", valid_603331
  var valid_603332 = query.getOrDefault("MasterUsername")
  valid_603332 = validateParameter(valid_603332, JString, required = false,
                                 default = nil)
  if valid_603332 != nil:
    section.add "MasterUsername", valid_603332
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603333 = header.getOrDefault("X-Amz-Date")
  valid_603333 = validateParameter(valid_603333, JString, required = false,
                                 default = nil)
  if valid_603333 != nil:
    section.add "X-Amz-Date", valid_603333
  var valid_603334 = header.getOrDefault("X-Amz-Security-Token")
  valid_603334 = validateParameter(valid_603334, JString, required = false,
                                 default = nil)
  if valid_603334 != nil:
    section.add "X-Amz-Security-Token", valid_603334
  var valid_603335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603335 = validateParameter(valid_603335, JString, required = false,
                                 default = nil)
  if valid_603335 != nil:
    section.add "X-Amz-Content-Sha256", valid_603335
  var valid_603336 = header.getOrDefault("X-Amz-Algorithm")
  valid_603336 = validateParameter(valid_603336, JString, required = false,
                                 default = nil)
  if valid_603336 != nil:
    section.add "X-Amz-Algorithm", valid_603336
  var valid_603337 = header.getOrDefault("X-Amz-Signature")
  valid_603337 = validateParameter(valid_603337, JString, required = false,
                                 default = nil)
  if valid_603337 != nil:
    section.add "X-Amz-Signature", valid_603337
  var valid_603338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603338 = validateParameter(valid_603338, JString, required = false,
                                 default = nil)
  if valid_603338 != nil:
    section.add "X-Amz-SignedHeaders", valid_603338
  var valid_603339 = header.getOrDefault("X-Amz-Credential")
  valid_603339 = validateParameter(valid_603339, JString, required = false,
                                 default = nil)
  if valid_603339 != nil:
    section.add "X-Amz-Credential", valid_603339
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603340: Call_GetCreateDBCluster_603305; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_603340.validator(path, query, header, formData, body)
  let scheme = call_603340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603340.url(scheme.get, call_603340.host, call_603340.base,
                         call_603340.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603340, url, valid)

proc call*(call_603341: Call_GetCreateDBCluster_603305; Engine: string;
          DBClusterIdentifier: string; ReplicationSourceIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          PreSignedUrl: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          BackupRetentionPeriod: int = 0; Action: string = "CreateDBCluster";
          CharacterSetName: string = ""; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; EngineVersion: string = ""; Port: int = 0;
          PreferredBackupWindow: string = ""; Version: string = "2014-10-31";
          MasterUsername: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  var query_603342 = newJObject()
  add(query_603342, "Engine", newJString(Engine))
  add(query_603342, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_603342, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_603342, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_603342, "StorageEncrypted", newJBool(StorageEncrypted))
  if AvailabilityZones != nil:
    query_603342.add "AvailabilityZones", AvailabilityZones
  add(query_603342, "DatabaseName", newJString(DatabaseName))
  add(query_603342, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603342, "OptionGroupName", newJString(OptionGroupName))
  add(query_603342, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_603342, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_603342, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_603342.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_603342.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_603342.add "Tags", Tags
  add(query_603342, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_603342, "Action", newJString(Action))
  add(query_603342, "CharacterSetName", newJString(CharacterSetName))
  add(query_603342, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603342, "KmsKeyId", newJString(KmsKeyId))
  add(query_603342, "EngineVersion", newJString(EngineVersion))
  add(query_603342, "Port", newJInt(Port))
  add(query_603342, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_603342, "Version", newJString(Version))
  add(query_603342, "MasterUsername", newJString(MasterUsername))
  result = call_603341.call(nil, query_603342, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_603305(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_603306,
    base: "/", url: url_GetCreateDBCluster_603307,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_603401 = ref object of OpenApiRestCall_602450
proc url_PostCreateDBClusterParameterGroup_603403(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_603402(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603404 = query.getOrDefault("Action")
  valid_603404 = validateParameter(valid_603404, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_603404 != nil:
    section.add "Action", valid_603404
  var valid_603405 = query.getOrDefault("Version")
  valid_603405 = validateParameter(valid_603405, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603405 != nil:
    section.add "Version", valid_603405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603406 = header.getOrDefault("X-Amz-Date")
  valid_603406 = validateParameter(valid_603406, JString, required = false,
                                 default = nil)
  if valid_603406 != nil:
    section.add "X-Amz-Date", valid_603406
  var valid_603407 = header.getOrDefault("X-Amz-Security-Token")
  valid_603407 = validateParameter(valid_603407, JString, required = false,
                                 default = nil)
  if valid_603407 != nil:
    section.add "X-Amz-Security-Token", valid_603407
  var valid_603408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603408 = validateParameter(valid_603408, JString, required = false,
                                 default = nil)
  if valid_603408 != nil:
    section.add "X-Amz-Content-Sha256", valid_603408
  var valid_603409 = header.getOrDefault("X-Amz-Algorithm")
  valid_603409 = validateParameter(valid_603409, JString, required = false,
                                 default = nil)
  if valid_603409 != nil:
    section.add "X-Amz-Algorithm", valid_603409
  var valid_603410 = header.getOrDefault("X-Amz-Signature")
  valid_603410 = validateParameter(valid_603410, JString, required = false,
                                 default = nil)
  if valid_603410 != nil:
    section.add "X-Amz-Signature", valid_603410
  var valid_603411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603411 = validateParameter(valid_603411, JString, required = false,
                                 default = nil)
  if valid_603411 != nil:
    section.add "X-Amz-SignedHeaders", valid_603411
  var valid_603412 = header.getOrDefault("X-Amz-Credential")
  valid_603412 = validateParameter(valid_603412, JString, required = false,
                                 default = nil)
  if valid_603412 != nil:
    section.add "X-Amz-Credential", valid_603412
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  section = newJObject()
  var valid_603413 = formData.getOrDefault("Tags")
  valid_603413 = validateParameter(valid_603413, JArray, required = false,
                                 default = nil)
  if valid_603413 != nil:
    section.add "Tags", valid_603413
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603414 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_603414 = validateParameter(valid_603414, JString, required = true,
                                 default = nil)
  if valid_603414 != nil:
    section.add "DBClusterParameterGroupName", valid_603414
  var valid_603415 = formData.getOrDefault("DBParameterGroupFamily")
  valid_603415 = validateParameter(valid_603415, JString, required = true,
                                 default = nil)
  if valid_603415 != nil:
    section.add "DBParameterGroupFamily", valid_603415
  var valid_603416 = formData.getOrDefault("Description")
  valid_603416 = validateParameter(valid_603416, JString, required = true,
                                 default = nil)
  if valid_603416 != nil:
    section.add "Description", valid_603416
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603417: Call_PostCreateDBClusterParameterGroup_603401;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_603417.validator(path, query, header, formData, body)
  let scheme = call_603417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603417.url(scheme.get, call_603417.host, call_603417.base,
                         call_603417.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603417, url, valid)

proc call*(call_603418: Call_PostCreateDBClusterParameterGroup_603401;
          DBClusterParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  var query_603419 = newJObject()
  var formData_603420 = newJObject()
  if Tags != nil:
    formData_603420.add "Tags", Tags
  add(query_603419, "Action", newJString(Action))
  add(formData_603420, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_603420, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_603419, "Version", newJString(Version))
  add(formData_603420, "Description", newJString(Description))
  result = call_603418.call(nil, query_603419, nil, formData_603420, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_603401(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_603402, base: "/",
    url: url_PostCreateDBClusterParameterGroup_603403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_603382 = ref object of OpenApiRestCall_602450
proc url_GetCreateDBClusterParameterGroup_603384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_603383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603385 = query.getOrDefault("DBClusterParameterGroupName")
  valid_603385 = validateParameter(valid_603385, JString, required = true,
                                 default = nil)
  if valid_603385 != nil:
    section.add "DBClusterParameterGroupName", valid_603385
  var valid_603386 = query.getOrDefault("Description")
  valid_603386 = validateParameter(valid_603386, JString, required = true,
                                 default = nil)
  if valid_603386 != nil:
    section.add "Description", valid_603386
  var valid_603387 = query.getOrDefault("DBParameterGroupFamily")
  valid_603387 = validateParameter(valid_603387, JString, required = true,
                                 default = nil)
  if valid_603387 != nil:
    section.add "DBParameterGroupFamily", valid_603387
  var valid_603388 = query.getOrDefault("Tags")
  valid_603388 = validateParameter(valid_603388, JArray, required = false,
                                 default = nil)
  if valid_603388 != nil:
    section.add "Tags", valid_603388
  var valid_603389 = query.getOrDefault("Action")
  valid_603389 = validateParameter(valid_603389, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_603389 != nil:
    section.add "Action", valid_603389
  var valid_603390 = query.getOrDefault("Version")
  valid_603390 = validateParameter(valid_603390, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603390 != nil:
    section.add "Version", valid_603390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603391 = header.getOrDefault("X-Amz-Date")
  valid_603391 = validateParameter(valid_603391, JString, required = false,
                                 default = nil)
  if valid_603391 != nil:
    section.add "X-Amz-Date", valid_603391
  var valid_603392 = header.getOrDefault("X-Amz-Security-Token")
  valid_603392 = validateParameter(valid_603392, JString, required = false,
                                 default = nil)
  if valid_603392 != nil:
    section.add "X-Amz-Security-Token", valid_603392
  var valid_603393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603393 = validateParameter(valid_603393, JString, required = false,
                                 default = nil)
  if valid_603393 != nil:
    section.add "X-Amz-Content-Sha256", valid_603393
  var valid_603394 = header.getOrDefault("X-Amz-Algorithm")
  valid_603394 = validateParameter(valid_603394, JString, required = false,
                                 default = nil)
  if valid_603394 != nil:
    section.add "X-Amz-Algorithm", valid_603394
  var valid_603395 = header.getOrDefault("X-Amz-Signature")
  valid_603395 = validateParameter(valid_603395, JString, required = false,
                                 default = nil)
  if valid_603395 != nil:
    section.add "X-Amz-Signature", valid_603395
  var valid_603396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603396 = validateParameter(valid_603396, JString, required = false,
                                 default = nil)
  if valid_603396 != nil:
    section.add "X-Amz-SignedHeaders", valid_603396
  var valid_603397 = header.getOrDefault("X-Amz-Credential")
  valid_603397 = validateParameter(valid_603397, JString, required = false,
                                 default = nil)
  if valid_603397 != nil:
    section.add "X-Amz-Credential", valid_603397
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603398: Call_GetCreateDBClusterParameterGroup_603382;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_603398.validator(path, query, header, formData, body)
  let scheme = call_603398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603398.url(scheme.get, call_603398.host, call_603398.base,
                         call_603398.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603398, url, valid)

proc call*(call_603399: Call_GetCreateDBClusterParameterGroup_603382;
          DBClusterParameterGroupName: string; Description: string;
          DBParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603400 = newJObject()
  add(query_603400, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_603400, "Description", newJString(Description))
  add(query_603400, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_603400.add "Tags", Tags
  add(query_603400, "Action", newJString(Action))
  add(query_603400, "Version", newJString(Version))
  result = call_603399.call(nil, query_603400, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_603382(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_603383, base: "/",
    url: url_GetCreateDBClusterParameterGroup_603384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_603439 = ref object of OpenApiRestCall_602450
proc url_PostCreateDBClusterSnapshot_603441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBClusterSnapshot_603440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603442 = query.getOrDefault("Action")
  valid_603442 = validateParameter(valid_603442, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_603442 != nil:
    section.add "Action", valid_603442
  var valid_603443 = query.getOrDefault("Version")
  valid_603443 = validateParameter(valid_603443, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603443 != nil:
    section.add "Version", valid_603443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603444 = header.getOrDefault("X-Amz-Date")
  valid_603444 = validateParameter(valid_603444, JString, required = false,
                                 default = nil)
  if valid_603444 != nil:
    section.add "X-Amz-Date", valid_603444
  var valid_603445 = header.getOrDefault("X-Amz-Security-Token")
  valid_603445 = validateParameter(valid_603445, JString, required = false,
                                 default = nil)
  if valid_603445 != nil:
    section.add "X-Amz-Security-Token", valid_603445
  var valid_603446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603446 = validateParameter(valid_603446, JString, required = false,
                                 default = nil)
  if valid_603446 != nil:
    section.add "X-Amz-Content-Sha256", valid_603446
  var valid_603447 = header.getOrDefault("X-Amz-Algorithm")
  valid_603447 = validateParameter(valid_603447, JString, required = false,
                                 default = nil)
  if valid_603447 != nil:
    section.add "X-Amz-Algorithm", valid_603447
  var valid_603448 = header.getOrDefault("X-Amz-Signature")
  valid_603448 = validateParameter(valid_603448, JString, required = false,
                                 default = nil)
  if valid_603448 != nil:
    section.add "X-Amz-Signature", valid_603448
  var valid_603449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603449 = validateParameter(valid_603449, JString, required = false,
                                 default = nil)
  if valid_603449 != nil:
    section.add "X-Amz-SignedHeaders", valid_603449
  var valid_603450 = header.getOrDefault("X-Amz-Credential")
  valid_603450 = validateParameter(valid_603450, JString, required = false,
                                 default = nil)
  if valid_603450 != nil:
    section.add "X-Amz-Credential", valid_603450
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_603451 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_603451 = validateParameter(valid_603451, JString, required = true,
                                 default = nil)
  if valid_603451 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_603451
  var valid_603452 = formData.getOrDefault("Tags")
  valid_603452 = validateParameter(valid_603452, JArray, required = false,
                                 default = nil)
  if valid_603452 != nil:
    section.add "Tags", valid_603452
  var valid_603453 = formData.getOrDefault("DBClusterIdentifier")
  valid_603453 = validateParameter(valid_603453, JString, required = true,
                                 default = nil)
  if valid_603453 != nil:
    section.add "DBClusterIdentifier", valid_603453
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603454: Call_PostCreateDBClusterSnapshot_603439; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_603454.validator(path, query, header, formData, body)
  let scheme = call_603454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603454.url(scheme.get, call_603454.host, call_603454.base,
                         call_603454.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603454, url, valid)

proc call*(call_603455: Call_PostCreateDBClusterSnapshot_603439;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_603456 = newJObject()
  var formData_603457 = newJObject()
  add(formData_603457, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    formData_603457.add "Tags", Tags
  add(query_603456, "Action", newJString(Action))
  add(formData_603457, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603456, "Version", newJString(Version))
  result = call_603455.call(nil, query_603456, nil, formData_603457, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_603439(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_603440, base: "/",
    url: url_PostCreateDBClusterSnapshot_603441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_603421 = ref object of OpenApiRestCall_602450
proc url_GetCreateDBClusterSnapshot_603423(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBClusterSnapshot_603422(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_603424 = query.getOrDefault("DBClusterIdentifier")
  valid_603424 = validateParameter(valid_603424, JString, required = true,
                                 default = nil)
  if valid_603424 != nil:
    section.add "DBClusterIdentifier", valid_603424
  var valid_603425 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_603425 = validateParameter(valid_603425, JString, required = true,
                                 default = nil)
  if valid_603425 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_603425
  var valid_603426 = query.getOrDefault("Tags")
  valid_603426 = validateParameter(valid_603426, JArray, required = false,
                                 default = nil)
  if valid_603426 != nil:
    section.add "Tags", valid_603426
  var valid_603427 = query.getOrDefault("Action")
  valid_603427 = validateParameter(valid_603427, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_603427 != nil:
    section.add "Action", valid_603427
  var valid_603428 = query.getOrDefault("Version")
  valid_603428 = validateParameter(valid_603428, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603428 != nil:
    section.add "Version", valid_603428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603429 = header.getOrDefault("X-Amz-Date")
  valid_603429 = validateParameter(valid_603429, JString, required = false,
                                 default = nil)
  if valid_603429 != nil:
    section.add "X-Amz-Date", valid_603429
  var valid_603430 = header.getOrDefault("X-Amz-Security-Token")
  valid_603430 = validateParameter(valid_603430, JString, required = false,
                                 default = nil)
  if valid_603430 != nil:
    section.add "X-Amz-Security-Token", valid_603430
  var valid_603431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603431 = validateParameter(valid_603431, JString, required = false,
                                 default = nil)
  if valid_603431 != nil:
    section.add "X-Amz-Content-Sha256", valid_603431
  var valid_603432 = header.getOrDefault("X-Amz-Algorithm")
  valid_603432 = validateParameter(valid_603432, JString, required = false,
                                 default = nil)
  if valid_603432 != nil:
    section.add "X-Amz-Algorithm", valid_603432
  var valid_603433 = header.getOrDefault("X-Amz-Signature")
  valid_603433 = validateParameter(valid_603433, JString, required = false,
                                 default = nil)
  if valid_603433 != nil:
    section.add "X-Amz-Signature", valid_603433
  var valid_603434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603434 = validateParameter(valid_603434, JString, required = false,
                                 default = nil)
  if valid_603434 != nil:
    section.add "X-Amz-SignedHeaders", valid_603434
  var valid_603435 = header.getOrDefault("X-Amz-Credential")
  valid_603435 = validateParameter(valid_603435, JString, required = false,
                                 default = nil)
  if valid_603435 != nil:
    section.add "X-Amz-Credential", valid_603435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603436: Call_GetCreateDBClusterSnapshot_603421; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_603436.validator(path, query, header, formData, body)
  let scheme = call_603436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603436.url(scheme.get, call_603436.host, call_603436.base,
                         call_603436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603436, url, valid)

proc call*(call_603437: Call_GetCreateDBClusterSnapshot_603421;
          DBClusterIdentifier: string; DBClusterSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603438 = newJObject()
  add(query_603438, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603438, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_603438.add "Tags", Tags
  add(query_603438, "Action", newJString(Action))
  add(query_603438, "Version", newJString(Version))
  result = call_603437.call(nil, query_603438, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_603421(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_603422, base: "/",
    url: url_GetCreateDBClusterSnapshot_603423,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_603533 = ref object of OpenApiRestCall_602450
proc url_PostCreateDBInstance_603535(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBInstance_603534(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603536 = query.getOrDefault("Action")
  valid_603536 = validateParameter(valid_603536, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_603536 != nil:
    section.add "Action", valid_603536
  var valid_603537 = query.getOrDefault("Version")
  valid_603537 = validateParameter(valid_603537, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603537 != nil:
    section.add "Version", valid_603537
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603538 = header.getOrDefault("X-Amz-Date")
  valid_603538 = validateParameter(valid_603538, JString, required = false,
                                 default = nil)
  if valid_603538 != nil:
    section.add "X-Amz-Date", valid_603538
  var valid_603539 = header.getOrDefault("X-Amz-Security-Token")
  valid_603539 = validateParameter(valid_603539, JString, required = false,
                                 default = nil)
  if valid_603539 != nil:
    section.add "X-Amz-Security-Token", valid_603539
  var valid_603540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603540 = validateParameter(valid_603540, JString, required = false,
                                 default = nil)
  if valid_603540 != nil:
    section.add "X-Amz-Content-Sha256", valid_603540
  var valid_603541 = header.getOrDefault("X-Amz-Algorithm")
  valid_603541 = validateParameter(valid_603541, JString, required = false,
                                 default = nil)
  if valid_603541 != nil:
    section.add "X-Amz-Algorithm", valid_603541
  var valid_603542 = header.getOrDefault("X-Amz-Signature")
  valid_603542 = validateParameter(valid_603542, JString, required = false,
                                 default = nil)
  if valid_603542 != nil:
    section.add "X-Amz-Signature", valid_603542
  var valid_603543 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603543 = validateParameter(valid_603543, JString, required = false,
                                 default = nil)
  if valid_603543 != nil:
    section.add "X-Amz-SignedHeaders", valid_603543
  var valid_603544 = header.getOrDefault("X-Amz-Credential")
  valid_603544 = validateParameter(valid_603544, JString, required = false,
                                 default = nil)
  if valid_603544 != nil:
    section.add "X-Amz-Credential", valid_603544
  result.add "header", section
  ## parameters in `formData` object:
  ##   EnablePerformanceInsights: JBool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: JString
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   DBName: JString
  ##         : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_603545 = formData.getOrDefault("EnablePerformanceInsights")
  valid_603545 = validateParameter(valid_603545, JBool, required = false, default = nil)
  if valid_603545 != nil:
    section.add "EnablePerformanceInsights", valid_603545
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_603546 = formData.getOrDefault("Engine")
  valid_603546 = validateParameter(valid_603546, JString, required = true,
                                 default = nil)
  if valid_603546 != nil:
    section.add "Engine", valid_603546
  var valid_603547 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_603547 = validateParameter(valid_603547, JArray, required = false,
                                 default = nil)
  if valid_603547 != nil:
    section.add "VpcSecurityGroupIds", valid_603547
  var valid_603548 = formData.getOrDefault("Iops")
  valid_603548 = validateParameter(valid_603548, JInt, required = false, default = nil)
  if valid_603548 != nil:
    section.add "Iops", valid_603548
  var valid_603549 = formData.getOrDefault("BackupRetentionPeriod")
  valid_603549 = validateParameter(valid_603549, JInt, required = false, default = nil)
  if valid_603549 != nil:
    section.add "BackupRetentionPeriod", valid_603549
  var valid_603550 = formData.getOrDefault("Tags")
  valid_603550 = validateParameter(valid_603550, JArray, required = false,
                                 default = nil)
  if valid_603550 != nil:
    section.add "Tags", valid_603550
  var valid_603551 = formData.getOrDefault("TdeCredentialArn")
  valid_603551 = validateParameter(valid_603551, JString, required = false,
                                 default = nil)
  if valid_603551 != nil:
    section.add "TdeCredentialArn", valid_603551
  var valid_603552 = formData.getOrDefault("DBSubnetGroupName")
  valid_603552 = validateParameter(valid_603552, JString, required = false,
                                 default = nil)
  if valid_603552 != nil:
    section.add "DBSubnetGroupName", valid_603552
  var valid_603553 = formData.getOrDefault("MultiAZ")
  valid_603553 = validateParameter(valid_603553, JBool, required = false, default = nil)
  if valid_603553 != nil:
    section.add "MultiAZ", valid_603553
  var valid_603554 = formData.getOrDefault("PubliclyAccessible")
  valid_603554 = validateParameter(valid_603554, JBool, required = false, default = nil)
  if valid_603554 != nil:
    section.add "PubliclyAccessible", valid_603554
  var valid_603555 = formData.getOrDefault("StorageType")
  valid_603555 = validateParameter(valid_603555, JString, required = false,
                                 default = nil)
  if valid_603555 != nil:
    section.add "StorageType", valid_603555
  var valid_603556 = formData.getOrDefault("Timezone")
  valid_603556 = validateParameter(valid_603556, JString, required = false,
                                 default = nil)
  if valid_603556 != nil:
    section.add "Timezone", valid_603556
  var valid_603557 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_603557 = validateParameter(valid_603557, JArray, required = false,
                                 default = nil)
  if valid_603557 != nil:
    section.add "EnableCloudwatchLogsExports", valid_603557
  var valid_603558 = formData.getOrDefault("CharacterSetName")
  valid_603558 = validateParameter(valid_603558, JString, required = false,
                                 default = nil)
  if valid_603558 != nil:
    section.add "CharacterSetName", valid_603558
  var valid_603559 = formData.getOrDefault("Domain")
  valid_603559 = validateParameter(valid_603559, JString, required = false,
                                 default = nil)
  if valid_603559 != nil:
    section.add "Domain", valid_603559
  var valid_603560 = formData.getOrDefault("LicenseModel")
  valid_603560 = validateParameter(valid_603560, JString, required = false,
                                 default = nil)
  if valid_603560 != nil:
    section.add "LicenseModel", valid_603560
  var valid_603561 = formData.getOrDefault("KmsKeyId")
  valid_603561 = validateParameter(valid_603561, JString, required = false,
                                 default = nil)
  if valid_603561 != nil:
    section.add "KmsKeyId", valid_603561
  var valid_603562 = formData.getOrDefault("StorageEncrypted")
  valid_603562 = validateParameter(valid_603562, JBool, required = false, default = nil)
  if valid_603562 != nil:
    section.add "StorageEncrypted", valid_603562
  var valid_603563 = formData.getOrDefault("DBClusterIdentifier")
  valid_603563 = validateParameter(valid_603563, JString, required = false,
                                 default = nil)
  if valid_603563 != nil:
    section.add "DBClusterIdentifier", valid_603563
  var valid_603564 = formData.getOrDefault("MonitoringRoleArn")
  valid_603564 = validateParameter(valid_603564, JString, required = false,
                                 default = nil)
  if valid_603564 != nil:
    section.add "MonitoringRoleArn", valid_603564
  var valid_603565 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_603565 = validateParameter(valid_603565, JString, required = false,
                                 default = nil)
  if valid_603565 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_603565
  var valid_603566 = formData.getOrDefault("DBSecurityGroups")
  valid_603566 = validateParameter(valid_603566, JArray, required = false,
                                 default = nil)
  if valid_603566 != nil:
    section.add "DBSecurityGroups", valid_603566
  var valid_603567 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_603567 = validateParameter(valid_603567, JBool, required = false, default = nil)
  if valid_603567 != nil:
    section.add "CopyTagsToSnapshot", valid_603567
  var valid_603568 = formData.getOrDefault("Port")
  valid_603568 = validateParameter(valid_603568, JInt, required = false, default = nil)
  if valid_603568 != nil:
    section.add "Port", valid_603568
  var valid_603569 = formData.getOrDefault("DBName")
  valid_603569 = validateParameter(valid_603569, JString, required = false,
                                 default = nil)
  if valid_603569 != nil:
    section.add "DBName", valid_603569
  var valid_603570 = formData.getOrDefault("DBInstanceIdentifier")
  valid_603570 = validateParameter(valid_603570, JString, required = true,
                                 default = nil)
  if valid_603570 != nil:
    section.add "DBInstanceIdentifier", valid_603570
  var valid_603571 = formData.getOrDefault("OptionGroupName")
  valid_603571 = validateParameter(valid_603571, JString, required = false,
                                 default = nil)
  if valid_603571 != nil:
    section.add "OptionGroupName", valid_603571
  var valid_603572 = formData.getOrDefault("DBParameterGroupName")
  valid_603572 = validateParameter(valid_603572, JString, required = false,
                                 default = nil)
  if valid_603572 != nil:
    section.add "DBParameterGroupName", valid_603572
  var valid_603573 = formData.getOrDefault("MasterUserPassword")
  valid_603573 = validateParameter(valid_603573, JString, required = false,
                                 default = nil)
  if valid_603573 != nil:
    section.add "MasterUserPassword", valid_603573
  var valid_603574 = formData.getOrDefault("TdeCredentialPassword")
  valid_603574 = validateParameter(valid_603574, JString, required = false,
                                 default = nil)
  if valid_603574 != nil:
    section.add "TdeCredentialPassword", valid_603574
  var valid_603575 = formData.getOrDefault("AvailabilityZone")
  valid_603575 = validateParameter(valid_603575, JString, required = false,
                                 default = nil)
  if valid_603575 != nil:
    section.add "AvailabilityZone", valid_603575
  var valid_603576 = formData.getOrDefault("MonitoringInterval")
  valid_603576 = validateParameter(valid_603576, JInt, required = false, default = nil)
  if valid_603576 != nil:
    section.add "MonitoringInterval", valid_603576
  var valid_603577 = formData.getOrDefault("DomainIAMRoleName")
  valid_603577 = validateParameter(valid_603577, JString, required = false,
                                 default = nil)
  if valid_603577 != nil:
    section.add "DomainIAMRoleName", valid_603577
  var valid_603578 = formData.getOrDefault("AllocatedStorage")
  valid_603578 = validateParameter(valid_603578, JInt, required = false, default = nil)
  if valid_603578 != nil:
    section.add "AllocatedStorage", valid_603578
  var valid_603579 = formData.getOrDefault("MasterUsername")
  valid_603579 = validateParameter(valid_603579, JString, required = false,
                                 default = nil)
  if valid_603579 != nil:
    section.add "MasterUsername", valid_603579
  var valid_603580 = formData.getOrDefault("PromotionTier")
  valid_603580 = validateParameter(valid_603580, JInt, required = false, default = nil)
  if valid_603580 != nil:
    section.add "PromotionTier", valid_603580
  var valid_603581 = formData.getOrDefault("DBInstanceClass")
  valid_603581 = validateParameter(valid_603581, JString, required = true,
                                 default = nil)
  if valid_603581 != nil:
    section.add "DBInstanceClass", valid_603581
  var valid_603582 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_603582 = validateParameter(valid_603582, JBool, required = false, default = nil)
  if valid_603582 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_603582
  var valid_603583 = formData.getOrDefault("PreferredBackupWindow")
  valid_603583 = validateParameter(valid_603583, JString, required = false,
                                 default = nil)
  if valid_603583 != nil:
    section.add "PreferredBackupWindow", valid_603583
  var valid_603584 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_603584 = validateParameter(valid_603584, JBool, required = false, default = nil)
  if valid_603584 != nil:
    section.add "AutoMinorVersionUpgrade", valid_603584
  var valid_603585 = formData.getOrDefault("EngineVersion")
  valid_603585 = validateParameter(valid_603585, JString, required = false,
                                 default = nil)
  if valid_603585 != nil:
    section.add "EngineVersion", valid_603585
  var valid_603586 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_603586 = validateParameter(valid_603586, JString, required = false,
                                 default = nil)
  if valid_603586 != nil:
    section.add "PreferredMaintenanceWindow", valid_603586
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603587: Call_PostCreateDBInstance_603533; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_603587.validator(path, query, header, formData, body)
  let scheme = call_603587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603587.url(scheme.get, call_603587.host, call_603587.base,
                         call_603587.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603587, url, valid)

proc call*(call_603588: Call_PostCreateDBInstance_603533; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; Tags: JsonNode = nil;
          TdeCredentialArn: string = ""; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; Timezone: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; LicenseModel: string = "";
          KmsKeyId: string = ""; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""; MonitoringRoleArn: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstance"; AllocatedStorage: int = 0;
          MasterUsername: string = ""; PromotionTier: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: string
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   DBName: string
  ##         : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use.
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_603589 = newJObject()
  var formData_603590 = newJObject()
  add(formData_603590, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_603590, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_603590.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_603590, "Iops", newJInt(Iops))
  add(formData_603590, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_603590.add "Tags", Tags
  add(formData_603590, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_603590, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_603590, "MultiAZ", newJBool(MultiAZ))
  add(formData_603590, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_603590, "StorageType", newJString(StorageType))
  add(formData_603590, "Timezone", newJString(Timezone))
  if EnableCloudwatchLogsExports != nil:
    formData_603590.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_603590, "CharacterSetName", newJString(CharacterSetName))
  add(formData_603590, "Domain", newJString(Domain))
  add(formData_603590, "LicenseModel", newJString(LicenseModel))
  add(formData_603590, "KmsKeyId", newJString(KmsKeyId))
  add(formData_603590, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_603590, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_603590, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_603590, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_603590.add "DBSecurityGroups", DBSecurityGroups
  add(formData_603590, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_603590, "Port", newJInt(Port))
  add(formData_603590, "DBName", newJString(DBName))
  add(formData_603590, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_603590, "OptionGroupName", newJString(OptionGroupName))
  add(formData_603590, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_603590, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_603590, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_603590, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_603590, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_603590, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_603589, "Action", newJString(Action))
  add(formData_603590, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_603590, "MasterUsername", newJString(MasterUsername))
  add(formData_603590, "PromotionTier", newJInt(PromotionTier))
  add(formData_603590, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_603590, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_603590, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_603590, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_603590, "EngineVersion", newJString(EngineVersion))
  add(query_603589, "Version", newJString(Version))
  add(formData_603590, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_603588.call(nil, query_603589, nil, formData_603590, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_603533(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_603534, base: "/",
    url: url_PostCreateDBInstance_603535, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_603458 = ref object of OpenApiRestCall_602450
proc url_GetCreateDBInstance_603460(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBInstance_603459(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: JString
  ##         : Not supported.
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603479 = query.getOrDefault("MonitoringInterval")
  valid_603479 = validateParameter(valid_603479, JInt, required = false, default = nil)
  if valid_603479 != nil:
    section.add "MonitoringInterval", valid_603479
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_603480 = query.getOrDefault("Engine")
  valid_603480 = validateParameter(valid_603480, JString, required = true,
                                 default = nil)
  if valid_603480 != nil:
    section.add "Engine", valid_603480
  var valid_603481 = query.getOrDefault("PromotionTier")
  valid_603481 = validateParameter(valid_603481, JInt, required = false, default = nil)
  if valid_603481 != nil:
    section.add "PromotionTier", valid_603481
  var valid_603482 = query.getOrDefault("StorageEncrypted")
  valid_603482 = validateParameter(valid_603482, JBool, required = false, default = nil)
  if valid_603482 != nil:
    section.add "StorageEncrypted", valid_603482
  var valid_603483 = query.getOrDefault("AllocatedStorage")
  valid_603483 = validateParameter(valid_603483, JInt, required = false, default = nil)
  if valid_603483 != nil:
    section.add "AllocatedStorage", valid_603483
  var valid_603484 = query.getOrDefault("StorageType")
  valid_603484 = validateParameter(valid_603484, JString, required = false,
                                 default = nil)
  if valid_603484 != nil:
    section.add "StorageType", valid_603484
  var valid_603485 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_603485 = validateParameter(valid_603485, JBool, required = false, default = nil)
  if valid_603485 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_603485
  var valid_603486 = query.getOrDefault("DBClusterIdentifier")
  valid_603486 = validateParameter(valid_603486, JString, required = false,
                                 default = nil)
  if valid_603486 != nil:
    section.add "DBClusterIdentifier", valid_603486
  var valid_603487 = query.getOrDefault("DBSecurityGroups")
  valid_603487 = validateParameter(valid_603487, JArray, required = false,
                                 default = nil)
  if valid_603487 != nil:
    section.add "DBSecurityGroups", valid_603487
  var valid_603488 = query.getOrDefault("MasterUserPassword")
  valid_603488 = validateParameter(valid_603488, JString, required = false,
                                 default = nil)
  if valid_603488 != nil:
    section.add "MasterUserPassword", valid_603488
  var valid_603489 = query.getOrDefault("MonitoringRoleArn")
  valid_603489 = validateParameter(valid_603489, JString, required = false,
                                 default = nil)
  if valid_603489 != nil:
    section.add "MonitoringRoleArn", valid_603489
  var valid_603490 = query.getOrDefault("MultiAZ")
  valid_603490 = validateParameter(valid_603490, JBool, required = false, default = nil)
  if valid_603490 != nil:
    section.add "MultiAZ", valid_603490
  var valid_603491 = query.getOrDefault("TdeCredentialPassword")
  valid_603491 = validateParameter(valid_603491, JString, required = false,
                                 default = nil)
  if valid_603491 != nil:
    section.add "TdeCredentialPassword", valid_603491
  var valid_603492 = query.getOrDefault("DomainIAMRoleName")
  valid_603492 = validateParameter(valid_603492, JString, required = false,
                                 default = nil)
  if valid_603492 != nil:
    section.add "DomainIAMRoleName", valid_603492
  var valid_603493 = query.getOrDefault("BackupRetentionPeriod")
  valid_603493 = validateParameter(valid_603493, JInt, required = false, default = nil)
  if valid_603493 != nil:
    section.add "BackupRetentionPeriod", valid_603493
  var valid_603494 = query.getOrDefault("DBName")
  valid_603494 = validateParameter(valid_603494, JString, required = false,
                                 default = nil)
  if valid_603494 != nil:
    section.add "DBName", valid_603494
  var valid_603495 = query.getOrDefault("CopyTagsToSnapshot")
  valid_603495 = validateParameter(valid_603495, JBool, required = false, default = nil)
  if valid_603495 != nil:
    section.add "CopyTagsToSnapshot", valid_603495
  var valid_603496 = query.getOrDefault("DBSubnetGroupName")
  valid_603496 = validateParameter(valid_603496, JString, required = false,
                                 default = nil)
  if valid_603496 != nil:
    section.add "DBSubnetGroupName", valid_603496
  var valid_603497 = query.getOrDefault("KmsKeyId")
  valid_603497 = validateParameter(valid_603497, JString, required = false,
                                 default = nil)
  if valid_603497 != nil:
    section.add "KmsKeyId", valid_603497
  var valid_603498 = query.getOrDefault("Domain")
  valid_603498 = validateParameter(valid_603498, JString, required = false,
                                 default = nil)
  if valid_603498 != nil:
    section.add "Domain", valid_603498
  var valid_603499 = query.getOrDefault("EngineVersion")
  valid_603499 = validateParameter(valid_603499, JString, required = false,
                                 default = nil)
  if valid_603499 != nil:
    section.add "EngineVersion", valid_603499
  var valid_603500 = query.getOrDefault("PreferredBackupWindow")
  valid_603500 = validateParameter(valid_603500, JString, required = false,
                                 default = nil)
  if valid_603500 != nil:
    section.add "PreferredBackupWindow", valid_603500
  var valid_603501 = query.getOrDefault("DBInstanceIdentifier")
  valid_603501 = validateParameter(valid_603501, JString, required = true,
                                 default = nil)
  if valid_603501 != nil:
    section.add "DBInstanceIdentifier", valid_603501
  var valid_603502 = query.getOrDefault("MasterUsername")
  valid_603502 = validateParameter(valid_603502, JString, required = false,
                                 default = nil)
  if valid_603502 != nil:
    section.add "MasterUsername", valid_603502
  var valid_603503 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_603503 = validateParameter(valid_603503, JString, required = false,
                                 default = nil)
  if valid_603503 != nil:
    section.add "PreferredMaintenanceWindow", valid_603503
  var valid_603504 = query.getOrDefault("OptionGroupName")
  valid_603504 = validateParameter(valid_603504, JString, required = false,
                                 default = nil)
  if valid_603504 != nil:
    section.add "OptionGroupName", valid_603504
  var valid_603505 = query.getOrDefault("AvailabilityZone")
  valid_603505 = validateParameter(valid_603505, JString, required = false,
                                 default = nil)
  if valid_603505 != nil:
    section.add "AvailabilityZone", valid_603505
  var valid_603506 = query.getOrDefault("Iops")
  valid_603506 = validateParameter(valid_603506, JInt, required = false, default = nil)
  if valid_603506 != nil:
    section.add "Iops", valid_603506
  var valid_603507 = query.getOrDefault("VpcSecurityGroupIds")
  valid_603507 = validateParameter(valid_603507, JArray, required = false,
                                 default = nil)
  if valid_603507 != nil:
    section.add "VpcSecurityGroupIds", valid_603507
  var valid_603508 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_603508 = validateParameter(valid_603508, JArray, required = false,
                                 default = nil)
  if valid_603508 != nil:
    section.add "EnableCloudwatchLogsExports", valid_603508
  var valid_603509 = query.getOrDefault("LicenseModel")
  valid_603509 = validateParameter(valid_603509, JString, required = false,
                                 default = nil)
  if valid_603509 != nil:
    section.add "LicenseModel", valid_603509
  var valid_603510 = query.getOrDefault("Tags")
  valid_603510 = validateParameter(valid_603510, JArray, required = false,
                                 default = nil)
  if valid_603510 != nil:
    section.add "Tags", valid_603510
  var valid_603511 = query.getOrDefault("DBParameterGroupName")
  valid_603511 = validateParameter(valid_603511, JString, required = false,
                                 default = nil)
  if valid_603511 != nil:
    section.add "DBParameterGroupName", valid_603511
  var valid_603512 = query.getOrDefault("DBInstanceClass")
  valid_603512 = validateParameter(valid_603512, JString, required = true,
                                 default = nil)
  if valid_603512 != nil:
    section.add "DBInstanceClass", valid_603512
  var valid_603513 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_603513 = validateParameter(valid_603513, JString, required = false,
                                 default = nil)
  if valid_603513 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_603513
  var valid_603514 = query.getOrDefault("Action")
  valid_603514 = validateParameter(valid_603514, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_603514 != nil:
    section.add "Action", valid_603514
  var valid_603515 = query.getOrDefault("CharacterSetName")
  valid_603515 = validateParameter(valid_603515, JString, required = false,
                                 default = nil)
  if valid_603515 != nil:
    section.add "CharacterSetName", valid_603515
  var valid_603516 = query.getOrDefault("TdeCredentialArn")
  valid_603516 = validateParameter(valid_603516, JString, required = false,
                                 default = nil)
  if valid_603516 != nil:
    section.add "TdeCredentialArn", valid_603516
  var valid_603517 = query.getOrDefault("PubliclyAccessible")
  valid_603517 = validateParameter(valid_603517, JBool, required = false, default = nil)
  if valid_603517 != nil:
    section.add "PubliclyAccessible", valid_603517
  var valid_603518 = query.getOrDefault("Timezone")
  valid_603518 = validateParameter(valid_603518, JString, required = false,
                                 default = nil)
  if valid_603518 != nil:
    section.add "Timezone", valid_603518
  var valid_603519 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_603519 = validateParameter(valid_603519, JBool, required = false, default = nil)
  if valid_603519 != nil:
    section.add "AutoMinorVersionUpgrade", valid_603519
  var valid_603520 = query.getOrDefault("Port")
  valid_603520 = validateParameter(valid_603520, JInt, required = false, default = nil)
  if valid_603520 != nil:
    section.add "Port", valid_603520
  var valid_603521 = query.getOrDefault("EnablePerformanceInsights")
  valid_603521 = validateParameter(valid_603521, JBool, required = false, default = nil)
  if valid_603521 != nil:
    section.add "EnablePerformanceInsights", valid_603521
  var valid_603522 = query.getOrDefault("Version")
  valid_603522 = validateParameter(valid_603522, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603522 != nil:
    section.add "Version", valid_603522
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603523 = header.getOrDefault("X-Amz-Date")
  valid_603523 = validateParameter(valid_603523, JString, required = false,
                                 default = nil)
  if valid_603523 != nil:
    section.add "X-Amz-Date", valid_603523
  var valid_603524 = header.getOrDefault("X-Amz-Security-Token")
  valid_603524 = validateParameter(valid_603524, JString, required = false,
                                 default = nil)
  if valid_603524 != nil:
    section.add "X-Amz-Security-Token", valid_603524
  var valid_603525 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603525 = validateParameter(valid_603525, JString, required = false,
                                 default = nil)
  if valid_603525 != nil:
    section.add "X-Amz-Content-Sha256", valid_603525
  var valid_603526 = header.getOrDefault("X-Amz-Algorithm")
  valid_603526 = validateParameter(valid_603526, JString, required = false,
                                 default = nil)
  if valid_603526 != nil:
    section.add "X-Amz-Algorithm", valid_603526
  var valid_603527 = header.getOrDefault("X-Amz-Signature")
  valid_603527 = validateParameter(valid_603527, JString, required = false,
                                 default = nil)
  if valid_603527 != nil:
    section.add "X-Amz-Signature", valid_603527
  var valid_603528 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603528 = validateParameter(valid_603528, JString, required = false,
                                 default = nil)
  if valid_603528 != nil:
    section.add "X-Amz-SignedHeaders", valid_603528
  var valid_603529 = header.getOrDefault("X-Amz-Credential")
  valid_603529 = validateParameter(valid_603529, JString, required = false,
                                 default = nil)
  if valid_603529 != nil:
    section.add "X-Amz-Credential", valid_603529
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603530: Call_GetCreateDBInstance_603458; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_603530.validator(path, query, header, formData, body)
  let scheme = call_603530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603530.url(scheme.get, call_603530.host, call_603530.base,
                         call_603530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603530, url, valid)

proc call*(call_603531: Call_GetCreateDBInstance_603458; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; PromotionTier: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          DBClusterIdentifier: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          DomainIAMRoleName: string = ""; BackupRetentionPeriod: int = 0;
          DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DBSubnetGroupName: string = ""; KmsKeyId: string = ""; Domain: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; PreferredMaintenanceWindow: string = "";
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "CreateDBInstance"; CharacterSetName: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          Timezone: string = ""; AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: string
  ##         : Not supported.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: bool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   Version: string (required)
  var query_603532 = newJObject()
  add(query_603532, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_603532, "Engine", newJString(Engine))
  add(query_603532, "PromotionTier", newJInt(PromotionTier))
  add(query_603532, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_603532, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_603532, "StorageType", newJString(StorageType))
  add(query_603532, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_603532, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if DBSecurityGroups != nil:
    query_603532.add "DBSecurityGroups", DBSecurityGroups
  add(query_603532, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_603532, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_603532, "MultiAZ", newJBool(MultiAZ))
  add(query_603532, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_603532, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_603532, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_603532, "DBName", newJString(DBName))
  add(query_603532, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_603532, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603532, "KmsKeyId", newJString(KmsKeyId))
  add(query_603532, "Domain", newJString(Domain))
  add(query_603532, "EngineVersion", newJString(EngineVersion))
  add(query_603532, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_603532, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_603532, "MasterUsername", newJString(MasterUsername))
  add(query_603532, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_603532, "OptionGroupName", newJString(OptionGroupName))
  add(query_603532, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_603532, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_603532.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_603532.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_603532, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_603532.add "Tags", Tags
  add(query_603532, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_603532, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_603532, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_603532, "Action", newJString(Action))
  add(query_603532, "CharacterSetName", newJString(CharacterSetName))
  add(query_603532, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_603532, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_603532, "Timezone", newJString(Timezone))
  add(query_603532, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_603532, "Port", newJInt(Port))
  add(query_603532, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_603532, "Version", newJString(Version))
  result = call_603531.call(nil, query_603532, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_603458(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_603459, base: "/",
    url: url_GetCreateDBInstance_603460, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_603610 = ref object of OpenApiRestCall_602450
proc url_PostCreateDBParameterGroup_603612(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBParameterGroup_603611(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603613 = query.getOrDefault("Action")
  valid_603613 = validateParameter(valid_603613, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_603613 != nil:
    section.add "Action", valid_603613
  var valid_603614 = query.getOrDefault("Version")
  valid_603614 = validateParameter(valid_603614, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603614 != nil:
    section.add "Version", valid_603614
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603615 = header.getOrDefault("X-Amz-Date")
  valid_603615 = validateParameter(valid_603615, JString, required = false,
                                 default = nil)
  if valid_603615 != nil:
    section.add "X-Amz-Date", valid_603615
  var valid_603616 = header.getOrDefault("X-Amz-Security-Token")
  valid_603616 = validateParameter(valid_603616, JString, required = false,
                                 default = nil)
  if valid_603616 != nil:
    section.add "X-Amz-Security-Token", valid_603616
  var valid_603617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603617 = validateParameter(valid_603617, JString, required = false,
                                 default = nil)
  if valid_603617 != nil:
    section.add "X-Amz-Content-Sha256", valid_603617
  var valid_603618 = header.getOrDefault("X-Amz-Algorithm")
  valid_603618 = validateParameter(valid_603618, JString, required = false,
                                 default = nil)
  if valid_603618 != nil:
    section.add "X-Amz-Algorithm", valid_603618
  var valid_603619 = header.getOrDefault("X-Amz-Signature")
  valid_603619 = validateParameter(valid_603619, JString, required = false,
                                 default = nil)
  if valid_603619 != nil:
    section.add "X-Amz-Signature", valid_603619
  var valid_603620 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603620 = validateParameter(valid_603620, JString, required = false,
                                 default = nil)
  if valid_603620 != nil:
    section.add "X-Amz-SignedHeaders", valid_603620
  var valid_603621 = header.getOrDefault("X-Amz-Credential")
  valid_603621 = validateParameter(valid_603621, JString, required = false,
                                 default = nil)
  if valid_603621 != nil:
    section.add "X-Amz-Credential", valid_603621
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_603622 = formData.getOrDefault("DBParameterGroupName")
  valid_603622 = validateParameter(valid_603622, JString, required = true,
                                 default = nil)
  if valid_603622 != nil:
    section.add "DBParameterGroupName", valid_603622
  var valid_603623 = formData.getOrDefault("Tags")
  valid_603623 = validateParameter(valid_603623, JArray, required = false,
                                 default = nil)
  if valid_603623 != nil:
    section.add "Tags", valid_603623
  var valid_603624 = formData.getOrDefault("DBParameterGroupFamily")
  valid_603624 = validateParameter(valid_603624, JString, required = true,
                                 default = nil)
  if valid_603624 != nil:
    section.add "DBParameterGroupFamily", valid_603624
  var valid_603625 = formData.getOrDefault("Description")
  valid_603625 = validateParameter(valid_603625, JString, required = true,
                                 default = nil)
  if valid_603625 != nil:
    section.add "Description", valid_603625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603626: Call_PostCreateDBParameterGroup_603610; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_603626.validator(path, query, header, formData, body)
  let scheme = call_603626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603626.url(scheme.get, call_603626.host, call_603626.base,
                         call_603626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603626, url, valid)

proc call*(call_603627: Call_PostCreateDBParameterGroup_603610;
          DBParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  var query_603628 = newJObject()
  var formData_603629 = newJObject()
  add(formData_603629, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_603629.add "Tags", Tags
  add(query_603628, "Action", newJString(Action))
  add(formData_603629, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_603628, "Version", newJString(Version))
  add(formData_603629, "Description", newJString(Description))
  result = call_603627.call(nil, query_603628, nil, formData_603629, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_603610(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_603611, base: "/",
    url: url_PostCreateDBParameterGroup_603612,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_603591 = ref object of OpenApiRestCall_602450
proc url_GetCreateDBParameterGroup_603593(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBParameterGroup_603592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_603594 = query.getOrDefault("Description")
  valid_603594 = validateParameter(valid_603594, JString, required = true,
                                 default = nil)
  if valid_603594 != nil:
    section.add "Description", valid_603594
  var valid_603595 = query.getOrDefault("DBParameterGroupFamily")
  valid_603595 = validateParameter(valid_603595, JString, required = true,
                                 default = nil)
  if valid_603595 != nil:
    section.add "DBParameterGroupFamily", valid_603595
  var valid_603596 = query.getOrDefault("Tags")
  valid_603596 = validateParameter(valid_603596, JArray, required = false,
                                 default = nil)
  if valid_603596 != nil:
    section.add "Tags", valid_603596
  var valid_603597 = query.getOrDefault("DBParameterGroupName")
  valid_603597 = validateParameter(valid_603597, JString, required = true,
                                 default = nil)
  if valid_603597 != nil:
    section.add "DBParameterGroupName", valid_603597
  var valid_603598 = query.getOrDefault("Action")
  valid_603598 = validateParameter(valid_603598, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_603598 != nil:
    section.add "Action", valid_603598
  var valid_603599 = query.getOrDefault("Version")
  valid_603599 = validateParameter(valid_603599, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603599 != nil:
    section.add "Version", valid_603599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603600 = header.getOrDefault("X-Amz-Date")
  valid_603600 = validateParameter(valid_603600, JString, required = false,
                                 default = nil)
  if valid_603600 != nil:
    section.add "X-Amz-Date", valid_603600
  var valid_603601 = header.getOrDefault("X-Amz-Security-Token")
  valid_603601 = validateParameter(valid_603601, JString, required = false,
                                 default = nil)
  if valid_603601 != nil:
    section.add "X-Amz-Security-Token", valid_603601
  var valid_603602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603602 = validateParameter(valid_603602, JString, required = false,
                                 default = nil)
  if valid_603602 != nil:
    section.add "X-Amz-Content-Sha256", valid_603602
  var valid_603603 = header.getOrDefault("X-Amz-Algorithm")
  valid_603603 = validateParameter(valid_603603, JString, required = false,
                                 default = nil)
  if valid_603603 != nil:
    section.add "X-Amz-Algorithm", valid_603603
  var valid_603604 = header.getOrDefault("X-Amz-Signature")
  valid_603604 = validateParameter(valid_603604, JString, required = false,
                                 default = nil)
  if valid_603604 != nil:
    section.add "X-Amz-Signature", valid_603604
  var valid_603605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603605 = validateParameter(valid_603605, JString, required = false,
                                 default = nil)
  if valid_603605 != nil:
    section.add "X-Amz-SignedHeaders", valid_603605
  var valid_603606 = header.getOrDefault("X-Amz-Credential")
  valid_603606 = validateParameter(valid_603606, JString, required = false,
                                 default = nil)
  if valid_603606 != nil:
    section.add "X-Amz-Credential", valid_603606
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603607: Call_GetCreateDBParameterGroup_603591; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_603607.validator(path, query, header, formData, body)
  let scheme = call_603607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603607.url(scheme.get, call_603607.host, call_603607.base,
                         call_603607.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603607, url, valid)

proc call*(call_603608: Call_GetCreateDBParameterGroup_603591; Description: string;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603609 = newJObject()
  add(query_603609, "Description", newJString(Description))
  add(query_603609, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_603609.add "Tags", Tags
  add(query_603609, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_603609, "Action", newJString(Action))
  add(query_603609, "Version", newJString(Version))
  result = call_603608.call(nil, query_603609, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_603591(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_603592, base: "/",
    url: url_GetCreateDBParameterGroup_603593,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_603649 = ref object of OpenApiRestCall_602450
proc url_PostCreateDBSubnetGroup_603651(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateDBSubnetGroup_603650(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603652 = query.getOrDefault("Action")
  valid_603652 = validateParameter(valid_603652, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_603652 != nil:
    section.add "Action", valid_603652
  var valid_603653 = query.getOrDefault("Version")
  valid_603653 = validateParameter(valid_603653, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603653 != nil:
    section.add "Version", valid_603653
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603654 = header.getOrDefault("X-Amz-Date")
  valid_603654 = validateParameter(valid_603654, JString, required = false,
                                 default = nil)
  if valid_603654 != nil:
    section.add "X-Amz-Date", valid_603654
  var valid_603655 = header.getOrDefault("X-Amz-Security-Token")
  valid_603655 = validateParameter(valid_603655, JString, required = false,
                                 default = nil)
  if valid_603655 != nil:
    section.add "X-Amz-Security-Token", valid_603655
  var valid_603656 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603656 = validateParameter(valid_603656, JString, required = false,
                                 default = nil)
  if valid_603656 != nil:
    section.add "X-Amz-Content-Sha256", valid_603656
  var valid_603657 = header.getOrDefault("X-Amz-Algorithm")
  valid_603657 = validateParameter(valid_603657, JString, required = false,
                                 default = nil)
  if valid_603657 != nil:
    section.add "X-Amz-Algorithm", valid_603657
  var valid_603658 = header.getOrDefault("X-Amz-Signature")
  valid_603658 = validateParameter(valid_603658, JString, required = false,
                                 default = nil)
  if valid_603658 != nil:
    section.add "X-Amz-Signature", valid_603658
  var valid_603659 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603659 = validateParameter(valid_603659, JString, required = false,
                                 default = nil)
  if valid_603659 != nil:
    section.add "X-Amz-SignedHeaders", valid_603659
  var valid_603660 = header.getOrDefault("X-Amz-Credential")
  valid_603660 = validateParameter(valid_603660, JString, required = false,
                                 default = nil)
  if valid_603660 != nil:
    section.add "X-Amz-Credential", valid_603660
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  section = newJObject()
  var valid_603661 = formData.getOrDefault("Tags")
  valid_603661 = validateParameter(valid_603661, JArray, required = false,
                                 default = nil)
  if valid_603661 != nil:
    section.add "Tags", valid_603661
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_603662 = formData.getOrDefault("DBSubnetGroupName")
  valid_603662 = validateParameter(valid_603662, JString, required = true,
                                 default = nil)
  if valid_603662 != nil:
    section.add "DBSubnetGroupName", valid_603662
  var valid_603663 = formData.getOrDefault("SubnetIds")
  valid_603663 = validateParameter(valid_603663, JArray, required = true, default = nil)
  if valid_603663 != nil:
    section.add "SubnetIds", valid_603663
  var valid_603664 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_603664 = validateParameter(valid_603664, JString, required = true,
                                 default = nil)
  if valid_603664 != nil:
    section.add "DBSubnetGroupDescription", valid_603664
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603665: Call_PostCreateDBSubnetGroup_603649; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_603665.validator(path, query, header, formData, body)
  let scheme = call_603665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603665.url(scheme.get, call_603665.host, call_603665.base,
                         call_603665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603665, url, valid)

proc call*(call_603666: Call_PostCreateDBSubnetGroup_603649;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_603667 = newJObject()
  var formData_603668 = newJObject()
  if Tags != nil:
    formData_603668.add "Tags", Tags
  add(formData_603668, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_603668.add "SubnetIds", SubnetIds
  add(query_603667, "Action", newJString(Action))
  add(formData_603668, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_603667, "Version", newJString(Version))
  result = call_603666.call(nil, query_603667, nil, formData_603668, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_603649(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_603650, base: "/",
    url: url_PostCreateDBSubnetGroup_603651, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_603630 = ref object of OpenApiRestCall_602450
proc url_GetCreateDBSubnetGroup_603632(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateDBSubnetGroup_603631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603633 = query.getOrDefault("Tags")
  valid_603633 = validateParameter(valid_603633, JArray, required = false,
                                 default = nil)
  if valid_603633 != nil:
    section.add "Tags", valid_603633
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603634 = query.getOrDefault("Action")
  valid_603634 = validateParameter(valid_603634, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_603634 != nil:
    section.add "Action", valid_603634
  var valid_603635 = query.getOrDefault("DBSubnetGroupName")
  valid_603635 = validateParameter(valid_603635, JString, required = true,
                                 default = nil)
  if valid_603635 != nil:
    section.add "DBSubnetGroupName", valid_603635
  var valid_603636 = query.getOrDefault("SubnetIds")
  valid_603636 = validateParameter(valid_603636, JArray, required = true, default = nil)
  if valid_603636 != nil:
    section.add "SubnetIds", valid_603636
  var valid_603637 = query.getOrDefault("DBSubnetGroupDescription")
  valid_603637 = validateParameter(valid_603637, JString, required = true,
                                 default = nil)
  if valid_603637 != nil:
    section.add "DBSubnetGroupDescription", valid_603637
  var valid_603638 = query.getOrDefault("Version")
  valid_603638 = validateParameter(valid_603638, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603638 != nil:
    section.add "Version", valid_603638
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603639 = header.getOrDefault("X-Amz-Date")
  valid_603639 = validateParameter(valid_603639, JString, required = false,
                                 default = nil)
  if valid_603639 != nil:
    section.add "X-Amz-Date", valid_603639
  var valid_603640 = header.getOrDefault("X-Amz-Security-Token")
  valid_603640 = validateParameter(valid_603640, JString, required = false,
                                 default = nil)
  if valid_603640 != nil:
    section.add "X-Amz-Security-Token", valid_603640
  var valid_603641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603641 = validateParameter(valid_603641, JString, required = false,
                                 default = nil)
  if valid_603641 != nil:
    section.add "X-Amz-Content-Sha256", valid_603641
  var valid_603642 = header.getOrDefault("X-Amz-Algorithm")
  valid_603642 = validateParameter(valid_603642, JString, required = false,
                                 default = nil)
  if valid_603642 != nil:
    section.add "X-Amz-Algorithm", valid_603642
  var valid_603643 = header.getOrDefault("X-Amz-Signature")
  valid_603643 = validateParameter(valid_603643, JString, required = false,
                                 default = nil)
  if valid_603643 != nil:
    section.add "X-Amz-Signature", valid_603643
  var valid_603644 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603644 = validateParameter(valid_603644, JString, required = false,
                                 default = nil)
  if valid_603644 != nil:
    section.add "X-Amz-SignedHeaders", valid_603644
  var valid_603645 = header.getOrDefault("X-Amz-Credential")
  valid_603645 = validateParameter(valid_603645, JString, required = false,
                                 default = nil)
  if valid_603645 != nil:
    section.add "X-Amz-Credential", valid_603645
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603646: Call_GetCreateDBSubnetGroup_603630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_603646.validator(path, query, header, formData, body)
  let scheme = call_603646.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603646.url(scheme.get, call_603646.host, call_603646.base,
                         call_603646.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603646, url, valid)

proc call*(call_603647: Call_GetCreateDBSubnetGroup_603630;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_603648 = newJObject()
  if Tags != nil:
    query_603648.add "Tags", Tags
  add(query_603648, "Action", newJString(Action))
  add(query_603648, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_603648.add "SubnetIds", SubnetIds
  add(query_603648, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_603648, "Version", newJString(Version))
  result = call_603647.call(nil, query_603648, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_603630(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_603631, base: "/",
    url: url_GetCreateDBSubnetGroup_603632, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_603691 = ref object of OpenApiRestCall_602450
proc url_PostCreateEventSubscription_603693(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostCreateEventSubscription_603692(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603694 = query.getOrDefault("Action")
  valid_603694 = validateParameter(valid_603694, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_603694 != nil:
    section.add "Action", valid_603694
  var valid_603695 = query.getOrDefault("Version")
  valid_603695 = validateParameter(valid_603695, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603695 != nil:
    section.add "Version", valid_603695
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603696 = header.getOrDefault("X-Amz-Date")
  valid_603696 = validateParameter(valid_603696, JString, required = false,
                                 default = nil)
  if valid_603696 != nil:
    section.add "X-Amz-Date", valid_603696
  var valid_603697 = header.getOrDefault("X-Amz-Security-Token")
  valid_603697 = validateParameter(valid_603697, JString, required = false,
                                 default = nil)
  if valid_603697 != nil:
    section.add "X-Amz-Security-Token", valid_603697
  var valid_603698 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603698 = validateParameter(valid_603698, JString, required = false,
                                 default = nil)
  if valid_603698 != nil:
    section.add "X-Amz-Content-Sha256", valid_603698
  var valid_603699 = header.getOrDefault("X-Amz-Algorithm")
  valid_603699 = validateParameter(valid_603699, JString, required = false,
                                 default = nil)
  if valid_603699 != nil:
    section.add "X-Amz-Algorithm", valid_603699
  var valid_603700 = header.getOrDefault("X-Amz-Signature")
  valid_603700 = validateParameter(valid_603700, JString, required = false,
                                 default = nil)
  if valid_603700 != nil:
    section.add "X-Amz-Signature", valid_603700
  var valid_603701 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603701 = validateParameter(valid_603701, JString, required = false,
                                 default = nil)
  if valid_603701 != nil:
    section.add "X-Amz-SignedHeaders", valid_603701
  var valid_603702 = header.getOrDefault("X-Amz-Credential")
  valid_603702 = validateParameter(valid_603702, JString, required = false,
                                 default = nil)
  if valid_603702 != nil:
    section.add "X-Amz-Credential", valid_603702
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  section = newJObject()
  var valid_603703 = formData.getOrDefault("Enabled")
  valid_603703 = validateParameter(valid_603703, JBool, required = false, default = nil)
  if valid_603703 != nil:
    section.add "Enabled", valid_603703
  var valid_603704 = formData.getOrDefault("EventCategories")
  valid_603704 = validateParameter(valid_603704, JArray, required = false,
                                 default = nil)
  if valid_603704 != nil:
    section.add "EventCategories", valid_603704
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_603705 = formData.getOrDefault("SnsTopicArn")
  valid_603705 = validateParameter(valid_603705, JString, required = true,
                                 default = nil)
  if valid_603705 != nil:
    section.add "SnsTopicArn", valid_603705
  var valid_603706 = formData.getOrDefault("SourceIds")
  valid_603706 = validateParameter(valid_603706, JArray, required = false,
                                 default = nil)
  if valid_603706 != nil:
    section.add "SourceIds", valid_603706
  var valid_603707 = formData.getOrDefault("Tags")
  valid_603707 = validateParameter(valid_603707, JArray, required = false,
                                 default = nil)
  if valid_603707 != nil:
    section.add "Tags", valid_603707
  var valid_603708 = formData.getOrDefault("SubscriptionName")
  valid_603708 = validateParameter(valid_603708, JString, required = true,
                                 default = nil)
  if valid_603708 != nil:
    section.add "SubscriptionName", valid_603708
  var valid_603709 = formData.getOrDefault("SourceType")
  valid_603709 = validateParameter(valid_603709, JString, required = false,
                                 default = nil)
  if valid_603709 != nil:
    section.add "SourceType", valid_603709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603710: Call_PostCreateEventSubscription_603691; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_603710.validator(path, query, header, formData, body)
  let scheme = call_603710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603710.url(scheme.get, call_603710.host, call_603710.base,
                         call_603710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603710, url, valid)

proc call*(call_603711: Call_PostCreateEventSubscription_603691;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  var query_603712 = newJObject()
  var formData_603713 = newJObject()
  add(formData_603713, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_603713.add "EventCategories", EventCategories
  add(formData_603713, "SnsTopicArn", newJString(SnsTopicArn))
  if SourceIds != nil:
    formData_603713.add "SourceIds", SourceIds
  if Tags != nil:
    formData_603713.add "Tags", Tags
  add(formData_603713, "SubscriptionName", newJString(SubscriptionName))
  add(query_603712, "Action", newJString(Action))
  add(query_603712, "Version", newJString(Version))
  add(formData_603713, "SourceType", newJString(SourceType))
  result = call_603711.call(nil, query_603712, nil, formData_603713, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_603691(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_603692, base: "/",
    url: url_PostCreateEventSubscription_603693,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_603669 = ref object of OpenApiRestCall_602450
proc url_GetCreateEventSubscription_603671(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetCreateEventSubscription_603670(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_603672 = query.getOrDefault("SourceType")
  valid_603672 = validateParameter(valid_603672, JString, required = false,
                                 default = nil)
  if valid_603672 != nil:
    section.add "SourceType", valid_603672
  var valid_603673 = query.getOrDefault("SourceIds")
  valid_603673 = validateParameter(valid_603673, JArray, required = false,
                                 default = nil)
  if valid_603673 != nil:
    section.add "SourceIds", valid_603673
  var valid_603674 = query.getOrDefault("Enabled")
  valid_603674 = validateParameter(valid_603674, JBool, required = false, default = nil)
  if valid_603674 != nil:
    section.add "Enabled", valid_603674
  var valid_603675 = query.getOrDefault("Tags")
  valid_603675 = validateParameter(valid_603675, JArray, required = false,
                                 default = nil)
  if valid_603675 != nil:
    section.add "Tags", valid_603675
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603676 = query.getOrDefault("Action")
  valid_603676 = validateParameter(valid_603676, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_603676 != nil:
    section.add "Action", valid_603676
  var valid_603677 = query.getOrDefault("SnsTopicArn")
  valid_603677 = validateParameter(valid_603677, JString, required = true,
                                 default = nil)
  if valid_603677 != nil:
    section.add "SnsTopicArn", valid_603677
  var valid_603678 = query.getOrDefault("EventCategories")
  valid_603678 = validateParameter(valid_603678, JArray, required = false,
                                 default = nil)
  if valid_603678 != nil:
    section.add "EventCategories", valid_603678
  var valid_603679 = query.getOrDefault("SubscriptionName")
  valid_603679 = validateParameter(valid_603679, JString, required = true,
                                 default = nil)
  if valid_603679 != nil:
    section.add "SubscriptionName", valid_603679
  var valid_603680 = query.getOrDefault("Version")
  valid_603680 = validateParameter(valid_603680, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603680 != nil:
    section.add "Version", valid_603680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603681 = header.getOrDefault("X-Amz-Date")
  valid_603681 = validateParameter(valid_603681, JString, required = false,
                                 default = nil)
  if valid_603681 != nil:
    section.add "X-Amz-Date", valid_603681
  var valid_603682 = header.getOrDefault("X-Amz-Security-Token")
  valid_603682 = validateParameter(valid_603682, JString, required = false,
                                 default = nil)
  if valid_603682 != nil:
    section.add "X-Amz-Security-Token", valid_603682
  var valid_603683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603683 = validateParameter(valid_603683, JString, required = false,
                                 default = nil)
  if valid_603683 != nil:
    section.add "X-Amz-Content-Sha256", valid_603683
  var valid_603684 = header.getOrDefault("X-Amz-Algorithm")
  valid_603684 = validateParameter(valid_603684, JString, required = false,
                                 default = nil)
  if valid_603684 != nil:
    section.add "X-Amz-Algorithm", valid_603684
  var valid_603685 = header.getOrDefault("X-Amz-Signature")
  valid_603685 = validateParameter(valid_603685, JString, required = false,
                                 default = nil)
  if valid_603685 != nil:
    section.add "X-Amz-Signature", valid_603685
  var valid_603686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603686 = validateParameter(valid_603686, JString, required = false,
                                 default = nil)
  if valid_603686 != nil:
    section.add "X-Amz-SignedHeaders", valid_603686
  var valid_603687 = header.getOrDefault("X-Amz-Credential")
  valid_603687 = validateParameter(valid_603687, JString, required = false,
                                 default = nil)
  if valid_603687 != nil:
    section.add "X-Amz-Credential", valid_603687
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603688: Call_GetCreateEventSubscription_603669; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_603688.validator(path, query, header, formData, body)
  let scheme = call_603688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603688.url(scheme.get, call_603688.host, call_603688.base,
                         call_603688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603688, url, valid)

proc call*(call_603689: Call_GetCreateEventSubscription_603669;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: string (required)
  var query_603690 = newJObject()
  add(query_603690, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_603690.add "SourceIds", SourceIds
  add(query_603690, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_603690.add "Tags", Tags
  add(query_603690, "Action", newJString(Action))
  add(query_603690, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_603690.add "EventCategories", EventCategories
  add(query_603690, "SubscriptionName", newJString(SubscriptionName))
  add(query_603690, "Version", newJString(Version))
  result = call_603689.call(nil, query_603690, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_603669(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_603670, base: "/",
    url: url_GetCreateEventSubscription_603671,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_603732 = ref object of OpenApiRestCall_602450
proc url_PostDeleteDBCluster_603734(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBCluster_603733(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603735 = query.getOrDefault("Action")
  valid_603735 = validateParameter(valid_603735, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_603735 != nil:
    section.add "Action", valid_603735
  var valid_603736 = query.getOrDefault("Version")
  valid_603736 = validateParameter(valid_603736, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603736 != nil:
    section.add "Version", valid_603736
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603737 = header.getOrDefault("X-Amz-Date")
  valid_603737 = validateParameter(valid_603737, JString, required = false,
                                 default = nil)
  if valid_603737 != nil:
    section.add "X-Amz-Date", valid_603737
  var valid_603738 = header.getOrDefault("X-Amz-Security-Token")
  valid_603738 = validateParameter(valid_603738, JString, required = false,
                                 default = nil)
  if valid_603738 != nil:
    section.add "X-Amz-Security-Token", valid_603738
  var valid_603739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603739 = validateParameter(valid_603739, JString, required = false,
                                 default = nil)
  if valid_603739 != nil:
    section.add "X-Amz-Content-Sha256", valid_603739
  var valid_603740 = header.getOrDefault("X-Amz-Algorithm")
  valid_603740 = validateParameter(valid_603740, JString, required = false,
                                 default = nil)
  if valid_603740 != nil:
    section.add "X-Amz-Algorithm", valid_603740
  var valid_603741 = header.getOrDefault("X-Amz-Signature")
  valid_603741 = validateParameter(valid_603741, JString, required = false,
                                 default = nil)
  if valid_603741 != nil:
    section.add "X-Amz-Signature", valid_603741
  var valid_603742 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603742 = validateParameter(valid_603742, JString, required = false,
                                 default = nil)
  if valid_603742 != nil:
    section.add "X-Amz-SignedHeaders", valid_603742
  var valid_603743 = header.getOrDefault("X-Amz-Credential")
  valid_603743 = validateParameter(valid_603743, JString, required = false,
                                 default = nil)
  if valid_603743 != nil:
    section.add "X-Amz-Credential", valid_603743
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_603744 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603744 = validateParameter(valid_603744, JString, required = false,
                                 default = nil)
  if valid_603744 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603744
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_603745 = formData.getOrDefault("DBClusterIdentifier")
  valid_603745 = validateParameter(valid_603745, JString, required = true,
                                 default = nil)
  if valid_603745 != nil:
    section.add "DBClusterIdentifier", valid_603745
  var valid_603746 = formData.getOrDefault("SkipFinalSnapshot")
  valid_603746 = validateParameter(valid_603746, JBool, required = false, default = nil)
  if valid_603746 != nil:
    section.add "SkipFinalSnapshot", valid_603746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603747: Call_PostDeleteDBCluster_603732; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_603747.validator(path, query, header, formData, body)
  let scheme = call_603747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603747.url(scheme.get, call_603747.host, call_603747.base,
                         call_603747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603747, url, valid)

proc call*(call_603748: Call_PostDeleteDBCluster_603732;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  var query_603749 = newJObject()
  var formData_603750 = newJObject()
  add(formData_603750, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_603749, "Action", newJString(Action))
  add(formData_603750, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603749, "Version", newJString(Version))
  add(formData_603750, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_603748.call(nil, query_603749, nil, formData_603750, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_603732(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_603733, base: "/",
    url: url_PostDeleteDBCluster_603734, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_603714 = ref object of OpenApiRestCall_602450
proc url_GetDeleteDBCluster_603716(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBCluster_603715(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_603717 = query.getOrDefault("DBClusterIdentifier")
  valid_603717 = validateParameter(valid_603717, JString, required = true,
                                 default = nil)
  if valid_603717 != nil:
    section.add "DBClusterIdentifier", valid_603717
  var valid_603718 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603718 = validateParameter(valid_603718, JString, required = false,
                                 default = nil)
  if valid_603718 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603718
  var valid_603719 = query.getOrDefault("Action")
  valid_603719 = validateParameter(valid_603719, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_603719 != nil:
    section.add "Action", valid_603719
  var valid_603720 = query.getOrDefault("SkipFinalSnapshot")
  valid_603720 = validateParameter(valid_603720, JBool, required = false, default = nil)
  if valid_603720 != nil:
    section.add "SkipFinalSnapshot", valid_603720
  var valid_603721 = query.getOrDefault("Version")
  valid_603721 = validateParameter(valid_603721, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603721 != nil:
    section.add "Version", valid_603721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603722 = header.getOrDefault("X-Amz-Date")
  valid_603722 = validateParameter(valid_603722, JString, required = false,
                                 default = nil)
  if valid_603722 != nil:
    section.add "X-Amz-Date", valid_603722
  var valid_603723 = header.getOrDefault("X-Amz-Security-Token")
  valid_603723 = validateParameter(valid_603723, JString, required = false,
                                 default = nil)
  if valid_603723 != nil:
    section.add "X-Amz-Security-Token", valid_603723
  var valid_603724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603724 = validateParameter(valid_603724, JString, required = false,
                                 default = nil)
  if valid_603724 != nil:
    section.add "X-Amz-Content-Sha256", valid_603724
  var valid_603725 = header.getOrDefault("X-Amz-Algorithm")
  valid_603725 = validateParameter(valid_603725, JString, required = false,
                                 default = nil)
  if valid_603725 != nil:
    section.add "X-Amz-Algorithm", valid_603725
  var valid_603726 = header.getOrDefault("X-Amz-Signature")
  valid_603726 = validateParameter(valid_603726, JString, required = false,
                                 default = nil)
  if valid_603726 != nil:
    section.add "X-Amz-Signature", valid_603726
  var valid_603727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603727 = validateParameter(valid_603727, JString, required = false,
                                 default = nil)
  if valid_603727 != nil:
    section.add "X-Amz-SignedHeaders", valid_603727
  var valid_603728 = header.getOrDefault("X-Amz-Credential")
  valid_603728 = validateParameter(valid_603728, JString, required = false,
                                 default = nil)
  if valid_603728 != nil:
    section.add "X-Amz-Credential", valid_603728
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603729: Call_GetDeleteDBCluster_603714; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_603729.validator(path, query, header, formData, body)
  let scheme = call_603729.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603729.url(scheme.get, call_603729.host, call_603729.base,
                         call_603729.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603729, url, valid)

proc call*(call_603730: Call_GetDeleteDBCluster_603714;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  var query_603731 = newJObject()
  add(query_603731, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_603731, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_603731, "Action", newJString(Action))
  add(query_603731, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_603731, "Version", newJString(Version))
  result = call_603730.call(nil, query_603731, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_603714(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_603715,
    base: "/", url: url_GetDeleteDBCluster_603716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_603767 = ref object of OpenApiRestCall_602450
proc url_PostDeleteDBClusterParameterGroup_603769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_603768(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603770 = query.getOrDefault("Action")
  valid_603770 = validateParameter(valid_603770, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_603770 != nil:
    section.add "Action", valid_603770
  var valid_603771 = query.getOrDefault("Version")
  valid_603771 = validateParameter(valid_603771, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603771 != nil:
    section.add "Version", valid_603771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603772 = header.getOrDefault("X-Amz-Date")
  valid_603772 = validateParameter(valid_603772, JString, required = false,
                                 default = nil)
  if valid_603772 != nil:
    section.add "X-Amz-Date", valid_603772
  var valid_603773 = header.getOrDefault("X-Amz-Security-Token")
  valid_603773 = validateParameter(valid_603773, JString, required = false,
                                 default = nil)
  if valid_603773 != nil:
    section.add "X-Amz-Security-Token", valid_603773
  var valid_603774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603774 = validateParameter(valid_603774, JString, required = false,
                                 default = nil)
  if valid_603774 != nil:
    section.add "X-Amz-Content-Sha256", valid_603774
  var valid_603775 = header.getOrDefault("X-Amz-Algorithm")
  valid_603775 = validateParameter(valid_603775, JString, required = false,
                                 default = nil)
  if valid_603775 != nil:
    section.add "X-Amz-Algorithm", valid_603775
  var valid_603776 = header.getOrDefault("X-Amz-Signature")
  valid_603776 = validateParameter(valid_603776, JString, required = false,
                                 default = nil)
  if valid_603776 != nil:
    section.add "X-Amz-Signature", valid_603776
  var valid_603777 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603777 = validateParameter(valid_603777, JString, required = false,
                                 default = nil)
  if valid_603777 != nil:
    section.add "X-Amz-SignedHeaders", valid_603777
  var valid_603778 = header.getOrDefault("X-Amz-Credential")
  valid_603778 = validateParameter(valid_603778, JString, required = false,
                                 default = nil)
  if valid_603778 != nil:
    section.add "X-Amz-Credential", valid_603778
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603779 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_603779 = validateParameter(valid_603779, JString, required = true,
                                 default = nil)
  if valid_603779 != nil:
    section.add "DBClusterParameterGroupName", valid_603779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603780: Call_PostDeleteDBClusterParameterGroup_603767;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_603780.validator(path, query, header, formData, body)
  let scheme = call_603780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603780.url(scheme.get, call_603780.host, call_603780.base,
                         call_603780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603780, url, valid)

proc call*(call_603781: Call_PostDeleteDBClusterParameterGroup_603767;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_603782 = newJObject()
  var formData_603783 = newJObject()
  add(query_603782, "Action", newJString(Action))
  add(formData_603783, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_603782, "Version", newJString(Version))
  result = call_603781.call(nil, query_603782, nil, formData_603783, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_603767(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_603768, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_603769,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_603751 = ref object of OpenApiRestCall_602450
proc url_GetDeleteDBClusterParameterGroup_603753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_603752(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603754 = query.getOrDefault("DBClusterParameterGroupName")
  valid_603754 = validateParameter(valid_603754, JString, required = true,
                                 default = nil)
  if valid_603754 != nil:
    section.add "DBClusterParameterGroupName", valid_603754
  var valid_603755 = query.getOrDefault("Action")
  valid_603755 = validateParameter(valid_603755, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_603755 != nil:
    section.add "Action", valid_603755
  var valid_603756 = query.getOrDefault("Version")
  valid_603756 = validateParameter(valid_603756, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603756 != nil:
    section.add "Version", valid_603756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603757 = header.getOrDefault("X-Amz-Date")
  valid_603757 = validateParameter(valid_603757, JString, required = false,
                                 default = nil)
  if valid_603757 != nil:
    section.add "X-Amz-Date", valid_603757
  var valid_603758 = header.getOrDefault("X-Amz-Security-Token")
  valid_603758 = validateParameter(valid_603758, JString, required = false,
                                 default = nil)
  if valid_603758 != nil:
    section.add "X-Amz-Security-Token", valid_603758
  var valid_603759 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603759 = validateParameter(valid_603759, JString, required = false,
                                 default = nil)
  if valid_603759 != nil:
    section.add "X-Amz-Content-Sha256", valid_603759
  var valid_603760 = header.getOrDefault("X-Amz-Algorithm")
  valid_603760 = validateParameter(valid_603760, JString, required = false,
                                 default = nil)
  if valid_603760 != nil:
    section.add "X-Amz-Algorithm", valid_603760
  var valid_603761 = header.getOrDefault("X-Amz-Signature")
  valid_603761 = validateParameter(valid_603761, JString, required = false,
                                 default = nil)
  if valid_603761 != nil:
    section.add "X-Amz-Signature", valid_603761
  var valid_603762 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603762 = validateParameter(valid_603762, JString, required = false,
                                 default = nil)
  if valid_603762 != nil:
    section.add "X-Amz-SignedHeaders", valid_603762
  var valid_603763 = header.getOrDefault("X-Amz-Credential")
  valid_603763 = validateParameter(valid_603763, JString, required = false,
                                 default = nil)
  if valid_603763 != nil:
    section.add "X-Amz-Credential", valid_603763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603764: Call_GetDeleteDBClusterParameterGroup_603751;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_603764.validator(path, query, header, formData, body)
  let scheme = call_603764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603764.url(scheme.get, call_603764.host, call_603764.base,
                         call_603764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603764, url, valid)

proc call*(call_603765: Call_GetDeleteDBClusterParameterGroup_603751;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603766 = newJObject()
  add(query_603766, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_603766, "Action", newJString(Action))
  add(query_603766, "Version", newJString(Version))
  result = call_603765.call(nil, query_603766, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_603751(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_603752, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_603753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_603800 = ref object of OpenApiRestCall_602450
proc url_PostDeleteDBClusterSnapshot_603802(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_603801(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603803 = query.getOrDefault("Action")
  valid_603803 = validateParameter(valid_603803, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_603803 != nil:
    section.add "Action", valid_603803
  var valid_603804 = query.getOrDefault("Version")
  valid_603804 = validateParameter(valid_603804, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603804 != nil:
    section.add "Version", valid_603804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603805 = header.getOrDefault("X-Amz-Date")
  valid_603805 = validateParameter(valid_603805, JString, required = false,
                                 default = nil)
  if valid_603805 != nil:
    section.add "X-Amz-Date", valid_603805
  var valid_603806 = header.getOrDefault("X-Amz-Security-Token")
  valid_603806 = validateParameter(valid_603806, JString, required = false,
                                 default = nil)
  if valid_603806 != nil:
    section.add "X-Amz-Security-Token", valid_603806
  var valid_603807 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603807 = validateParameter(valid_603807, JString, required = false,
                                 default = nil)
  if valid_603807 != nil:
    section.add "X-Amz-Content-Sha256", valid_603807
  var valid_603808 = header.getOrDefault("X-Amz-Algorithm")
  valid_603808 = validateParameter(valid_603808, JString, required = false,
                                 default = nil)
  if valid_603808 != nil:
    section.add "X-Amz-Algorithm", valid_603808
  var valid_603809 = header.getOrDefault("X-Amz-Signature")
  valid_603809 = validateParameter(valid_603809, JString, required = false,
                                 default = nil)
  if valid_603809 != nil:
    section.add "X-Amz-Signature", valid_603809
  var valid_603810 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603810 = validateParameter(valid_603810, JString, required = false,
                                 default = nil)
  if valid_603810 != nil:
    section.add "X-Amz-SignedHeaders", valid_603810
  var valid_603811 = header.getOrDefault("X-Amz-Credential")
  valid_603811 = validateParameter(valid_603811, JString, required = false,
                                 default = nil)
  if valid_603811 != nil:
    section.add "X-Amz-Credential", valid_603811
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_603812 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_603812 = validateParameter(valid_603812, JString, required = true,
                                 default = nil)
  if valid_603812 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_603812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603813: Call_PostDeleteDBClusterSnapshot_603800; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_603813.validator(path, query, header, formData, body)
  let scheme = call_603813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603813.url(scheme.get, call_603813.host, call_603813.base,
                         call_603813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603813, url, valid)

proc call*(call_603814: Call_PostDeleteDBClusterSnapshot_603800;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603815 = newJObject()
  var formData_603816 = newJObject()
  add(formData_603816, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_603815, "Action", newJString(Action))
  add(query_603815, "Version", newJString(Version))
  result = call_603814.call(nil, query_603815, nil, formData_603816, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_603800(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_603801, base: "/",
    url: url_PostDeleteDBClusterSnapshot_603802,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_603784 = ref object of OpenApiRestCall_602450
proc url_GetDeleteDBClusterSnapshot_603786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_603785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_603787 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_603787 = validateParameter(valid_603787, JString, required = true,
                                 default = nil)
  if valid_603787 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_603787
  var valid_603788 = query.getOrDefault("Action")
  valid_603788 = validateParameter(valid_603788, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_603788 != nil:
    section.add "Action", valid_603788
  var valid_603789 = query.getOrDefault("Version")
  valid_603789 = validateParameter(valid_603789, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603789 != nil:
    section.add "Version", valid_603789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603790 = header.getOrDefault("X-Amz-Date")
  valid_603790 = validateParameter(valid_603790, JString, required = false,
                                 default = nil)
  if valid_603790 != nil:
    section.add "X-Amz-Date", valid_603790
  var valid_603791 = header.getOrDefault("X-Amz-Security-Token")
  valid_603791 = validateParameter(valid_603791, JString, required = false,
                                 default = nil)
  if valid_603791 != nil:
    section.add "X-Amz-Security-Token", valid_603791
  var valid_603792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603792 = validateParameter(valid_603792, JString, required = false,
                                 default = nil)
  if valid_603792 != nil:
    section.add "X-Amz-Content-Sha256", valid_603792
  var valid_603793 = header.getOrDefault("X-Amz-Algorithm")
  valid_603793 = validateParameter(valid_603793, JString, required = false,
                                 default = nil)
  if valid_603793 != nil:
    section.add "X-Amz-Algorithm", valid_603793
  var valid_603794 = header.getOrDefault("X-Amz-Signature")
  valid_603794 = validateParameter(valid_603794, JString, required = false,
                                 default = nil)
  if valid_603794 != nil:
    section.add "X-Amz-Signature", valid_603794
  var valid_603795 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603795 = validateParameter(valid_603795, JString, required = false,
                                 default = nil)
  if valid_603795 != nil:
    section.add "X-Amz-SignedHeaders", valid_603795
  var valid_603796 = header.getOrDefault("X-Amz-Credential")
  valid_603796 = validateParameter(valid_603796, JString, required = false,
                                 default = nil)
  if valid_603796 != nil:
    section.add "X-Amz-Credential", valid_603796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603797: Call_GetDeleteDBClusterSnapshot_603784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_603797.validator(path, query, header, formData, body)
  let scheme = call_603797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603797.url(scheme.get, call_603797.host, call_603797.base,
                         call_603797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603797, url, valid)

proc call*(call_603798: Call_GetDeleteDBClusterSnapshot_603784;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603799 = newJObject()
  add(query_603799, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_603799, "Action", newJString(Action))
  add(query_603799, "Version", newJString(Version))
  result = call_603798.call(nil, query_603799, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_603784(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_603785, base: "/",
    url: url_GetDeleteDBClusterSnapshot_603786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_603835 = ref object of OpenApiRestCall_602450
proc url_PostDeleteDBInstance_603837(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBInstance_603836(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603838 = query.getOrDefault("Action")
  valid_603838 = validateParameter(valid_603838, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_603838 != nil:
    section.add "Action", valid_603838
  var valid_603839 = query.getOrDefault("Version")
  valid_603839 = validateParameter(valid_603839, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603839 != nil:
    section.add "Version", valid_603839
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603840 = header.getOrDefault("X-Amz-Date")
  valid_603840 = validateParameter(valid_603840, JString, required = false,
                                 default = nil)
  if valid_603840 != nil:
    section.add "X-Amz-Date", valid_603840
  var valid_603841 = header.getOrDefault("X-Amz-Security-Token")
  valid_603841 = validateParameter(valid_603841, JString, required = false,
                                 default = nil)
  if valid_603841 != nil:
    section.add "X-Amz-Security-Token", valid_603841
  var valid_603842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603842 = validateParameter(valid_603842, JString, required = false,
                                 default = nil)
  if valid_603842 != nil:
    section.add "X-Amz-Content-Sha256", valid_603842
  var valid_603843 = header.getOrDefault("X-Amz-Algorithm")
  valid_603843 = validateParameter(valid_603843, JString, required = false,
                                 default = nil)
  if valid_603843 != nil:
    section.add "X-Amz-Algorithm", valid_603843
  var valid_603844 = header.getOrDefault("X-Amz-Signature")
  valid_603844 = validateParameter(valid_603844, JString, required = false,
                                 default = nil)
  if valid_603844 != nil:
    section.add "X-Amz-Signature", valid_603844
  var valid_603845 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603845 = validateParameter(valid_603845, JString, required = false,
                                 default = nil)
  if valid_603845 != nil:
    section.add "X-Amz-SignedHeaders", valid_603845
  var valid_603846 = header.getOrDefault("X-Amz-Credential")
  valid_603846 = validateParameter(valid_603846, JString, required = false,
                                 default = nil)
  if valid_603846 != nil:
    section.add "X-Amz-Credential", valid_603846
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_603847 = formData.getOrDefault("DBInstanceIdentifier")
  valid_603847 = validateParameter(valid_603847, JString, required = true,
                                 default = nil)
  if valid_603847 != nil:
    section.add "DBInstanceIdentifier", valid_603847
  var valid_603848 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603848 = validateParameter(valid_603848, JString, required = false,
                                 default = nil)
  if valid_603848 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603848
  var valid_603849 = formData.getOrDefault("SkipFinalSnapshot")
  valid_603849 = validateParameter(valid_603849, JBool, required = false, default = nil)
  if valid_603849 != nil:
    section.add "SkipFinalSnapshot", valid_603849
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603850: Call_PostDeleteDBInstance_603835; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_603850.validator(path, query, header, formData, body)
  let scheme = call_603850.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603850.url(scheme.get, call_603850.host, call_603850.base,
                         call_603850.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603850, url, valid)

proc call*(call_603851: Call_PostDeleteDBInstance_603835;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  var query_603852 = newJObject()
  var formData_603853 = newJObject()
  add(formData_603853, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_603853, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_603852, "Action", newJString(Action))
  add(query_603852, "Version", newJString(Version))
  add(formData_603853, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_603851.call(nil, query_603852, nil, formData_603853, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_603835(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_603836, base: "/",
    url: url_PostDeleteDBInstance_603837, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_603817 = ref object of OpenApiRestCall_602450
proc url_GetDeleteDBInstance_603819(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBInstance_603818(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  section = newJObject()
  var valid_603820 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_603820 = validateParameter(valid_603820, JString, required = false,
                                 default = nil)
  if valid_603820 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_603820
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603821 = query.getOrDefault("Action")
  valid_603821 = validateParameter(valid_603821, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_603821 != nil:
    section.add "Action", valid_603821
  var valid_603822 = query.getOrDefault("SkipFinalSnapshot")
  valid_603822 = validateParameter(valid_603822, JBool, required = false, default = nil)
  if valid_603822 != nil:
    section.add "SkipFinalSnapshot", valid_603822
  var valid_603823 = query.getOrDefault("Version")
  valid_603823 = validateParameter(valid_603823, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603823 != nil:
    section.add "Version", valid_603823
  var valid_603824 = query.getOrDefault("DBInstanceIdentifier")
  valid_603824 = validateParameter(valid_603824, JString, required = true,
                                 default = nil)
  if valid_603824 != nil:
    section.add "DBInstanceIdentifier", valid_603824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603825 = header.getOrDefault("X-Amz-Date")
  valid_603825 = validateParameter(valid_603825, JString, required = false,
                                 default = nil)
  if valid_603825 != nil:
    section.add "X-Amz-Date", valid_603825
  var valid_603826 = header.getOrDefault("X-Amz-Security-Token")
  valid_603826 = validateParameter(valid_603826, JString, required = false,
                                 default = nil)
  if valid_603826 != nil:
    section.add "X-Amz-Security-Token", valid_603826
  var valid_603827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603827 = validateParameter(valid_603827, JString, required = false,
                                 default = nil)
  if valid_603827 != nil:
    section.add "X-Amz-Content-Sha256", valid_603827
  var valid_603828 = header.getOrDefault("X-Amz-Algorithm")
  valid_603828 = validateParameter(valid_603828, JString, required = false,
                                 default = nil)
  if valid_603828 != nil:
    section.add "X-Amz-Algorithm", valid_603828
  var valid_603829 = header.getOrDefault("X-Amz-Signature")
  valid_603829 = validateParameter(valid_603829, JString, required = false,
                                 default = nil)
  if valid_603829 != nil:
    section.add "X-Amz-Signature", valid_603829
  var valid_603830 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603830 = validateParameter(valid_603830, JString, required = false,
                                 default = nil)
  if valid_603830 != nil:
    section.add "X-Amz-SignedHeaders", valid_603830
  var valid_603831 = header.getOrDefault("X-Amz-Credential")
  valid_603831 = validateParameter(valid_603831, JString, required = false,
                                 default = nil)
  if valid_603831 != nil:
    section.add "X-Amz-Credential", valid_603831
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603832: Call_GetDeleteDBInstance_603817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_603832.validator(path, query, header, formData, body)
  let scheme = call_603832.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603832.url(scheme.get, call_603832.host, call_603832.base,
                         call_603832.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603832, url, valid)

proc call*(call_603833: Call_GetDeleteDBInstance_603817;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  var query_603834 = newJObject()
  add(query_603834, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_603834, "Action", newJString(Action))
  add(query_603834, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_603834, "Version", newJString(Version))
  add(query_603834, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_603833.call(nil, query_603834, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_603817(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_603818, base: "/",
    url: url_GetDeleteDBInstance_603819, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_603870 = ref object of OpenApiRestCall_602450
proc url_PostDeleteDBParameterGroup_603872(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBParameterGroup_603871(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603873 = query.getOrDefault("Action")
  valid_603873 = validateParameter(valid_603873, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_603873 != nil:
    section.add "Action", valid_603873
  var valid_603874 = query.getOrDefault("Version")
  valid_603874 = validateParameter(valid_603874, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603874 != nil:
    section.add "Version", valid_603874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603875 = header.getOrDefault("X-Amz-Date")
  valid_603875 = validateParameter(valid_603875, JString, required = false,
                                 default = nil)
  if valid_603875 != nil:
    section.add "X-Amz-Date", valid_603875
  var valid_603876 = header.getOrDefault("X-Amz-Security-Token")
  valid_603876 = validateParameter(valid_603876, JString, required = false,
                                 default = nil)
  if valid_603876 != nil:
    section.add "X-Amz-Security-Token", valid_603876
  var valid_603877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603877 = validateParameter(valid_603877, JString, required = false,
                                 default = nil)
  if valid_603877 != nil:
    section.add "X-Amz-Content-Sha256", valid_603877
  var valid_603878 = header.getOrDefault("X-Amz-Algorithm")
  valid_603878 = validateParameter(valid_603878, JString, required = false,
                                 default = nil)
  if valid_603878 != nil:
    section.add "X-Amz-Algorithm", valid_603878
  var valid_603879 = header.getOrDefault("X-Amz-Signature")
  valid_603879 = validateParameter(valid_603879, JString, required = false,
                                 default = nil)
  if valid_603879 != nil:
    section.add "X-Amz-Signature", valid_603879
  var valid_603880 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603880 = validateParameter(valid_603880, JString, required = false,
                                 default = nil)
  if valid_603880 != nil:
    section.add "X-Amz-SignedHeaders", valid_603880
  var valid_603881 = header.getOrDefault("X-Amz-Credential")
  valid_603881 = validateParameter(valid_603881, JString, required = false,
                                 default = nil)
  if valid_603881 != nil:
    section.add "X-Amz-Credential", valid_603881
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_603882 = formData.getOrDefault("DBParameterGroupName")
  valid_603882 = validateParameter(valid_603882, JString, required = true,
                                 default = nil)
  if valid_603882 != nil:
    section.add "DBParameterGroupName", valid_603882
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603883: Call_PostDeleteDBParameterGroup_603870; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_603883.validator(path, query, header, formData, body)
  let scheme = call_603883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603883.url(scheme.get, call_603883.host, call_603883.base,
                         call_603883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603883, url, valid)

proc call*(call_603884: Call_PostDeleteDBParameterGroup_603870;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603885 = newJObject()
  var formData_603886 = newJObject()
  add(formData_603886, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_603885, "Action", newJString(Action))
  add(query_603885, "Version", newJString(Version))
  result = call_603884.call(nil, query_603885, nil, formData_603886, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_603870(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_603871, base: "/",
    url: url_PostDeleteDBParameterGroup_603872,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_603854 = ref object of OpenApiRestCall_602450
proc url_GetDeleteDBParameterGroup_603856(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBParameterGroup_603855(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_603857 = query.getOrDefault("DBParameterGroupName")
  valid_603857 = validateParameter(valid_603857, JString, required = true,
                                 default = nil)
  if valid_603857 != nil:
    section.add "DBParameterGroupName", valid_603857
  var valid_603858 = query.getOrDefault("Action")
  valid_603858 = validateParameter(valid_603858, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_603858 != nil:
    section.add "Action", valid_603858
  var valid_603859 = query.getOrDefault("Version")
  valid_603859 = validateParameter(valid_603859, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603859 != nil:
    section.add "Version", valid_603859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603860 = header.getOrDefault("X-Amz-Date")
  valid_603860 = validateParameter(valid_603860, JString, required = false,
                                 default = nil)
  if valid_603860 != nil:
    section.add "X-Amz-Date", valid_603860
  var valid_603861 = header.getOrDefault("X-Amz-Security-Token")
  valid_603861 = validateParameter(valid_603861, JString, required = false,
                                 default = nil)
  if valid_603861 != nil:
    section.add "X-Amz-Security-Token", valid_603861
  var valid_603862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603862 = validateParameter(valid_603862, JString, required = false,
                                 default = nil)
  if valid_603862 != nil:
    section.add "X-Amz-Content-Sha256", valid_603862
  var valid_603863 = header.getOrDefault("X-Amz-Algorithm")
  valid_603863 = validateParameter(valid_603863, JString, required = false,
                                 default = nil)
  if valid_603863 != nil:
    section.add "X-Amz-Algorithm", valid_603863
  var valid_603864 = header.getOrDefault("X-Amz-Signature")
  valid_603864 = validateParameter(valid_603864, JString, required = false,
                                 default = nil)
  if valid_603864 != nil:
    section.add "X-Amz-Signature", valid_603864
  var valid_603865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603865 = validateParameter(valid_603865, JString, required = false,
                                 default = nil)
  if valid_603865 != nil:
    section.add "X-Amz-SignedHeaders", valid_603865
  var valid_603866 = header.getOrDefault("X-Amz-Credential")
  valid_603866 = validateParameter(valid_603866, JString, required = false,
                                 default = nil)
  if valid_603866 != nil:
    section.add "X-Amz-Credential", valid_603866
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603867: Call_GetDeleteDBParameterGroup_603854; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_603867.validator(path, query, header, formData, body)
  let scheme = call_603867.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603867.url(scheme.get, call_603867.host, call_603867.base,
                         call_603867.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603867, url, valid)

proc call*(call_603868: Call_GetDeleteDBParameterGroup_603854;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603869 = newJObject()
  add(query_603869, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_603869, "Action", newJString(Action))
  add(query_603869, "Version", newJString(Version))
  result = call_603868.call(nil, query_603869, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_603854(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_603855, base: "/",
    url: url_GetDeleteDBParameterGroup_603856,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_603903 = ref object of OpenApiRestCall_602450
proc url_PostDeleteDBSubnetGroup_603905(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteDBSubnetGroup_603904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603906 = query.getOrDefault("Action")
  valid_603906 = validateParameter(valid_603906, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_603906 != nil:
    section.add "Action", valid_603906
  var valid_603907 = query.getOrDefault("Version")
  valid_603907 = validateParameter(valid_603907, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603907 != nil:
    section.add "Version", valid_603907
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603908 = header.getOrDefault("X-Amz-Date")
  valid_603908 = validateParameter(valid_603908, JString, required = false,
                                 default = nil)
  if valid_603908 != nil:
    section.add "X-Amz-Date", valid_603908
  var valid_603909 = header.getOrDefault("X-Amz-Security-Token")
  valid_603909 = validateParameter(valid_603909, JString, required = false,
                                 default = nil)
  if valid_603909 != nil:
    section.add "X-Amz-Security-Token", valid_603909
  var valid_603910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603910 = validateParameter(valid_603910, JString, required = false,
                                 default = nil)
  if valid_603910 != nil:
    section.add "X-Amz-Content-Sha256", valid_603910
  var valid_603911 = header.getOrDefault("X-Amz-Algorithm")
  valid_603911 = validateParameter(valid_603911, JString, required = false,
                                 default = nil)
  if valid_603911 != nil:
    section.add "X-Amz-Algorithm", valid_603911
  var valid_603912 = header.getOrDefault("X-Amz-Signature")
  valid_603912 = validateParameter(valid_603912, JString, required = false,
                                 default = nil)
  if valid_603912 != nil:
    section.add "X-Amz-Signature", valid_603912
  var valid_603913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603913 = validateParameter(valid_603913, JString, required = false,
                                 default = nil)
  if valid_603913 != nil:
    section.add "X-Amz-SignedHeaders", valid_603913
  var valid_603914 = header.getOrDefault("X-Amz-Credential")
  valid_603914 = validateParameter(valid_603914, JString, required = false,
                                 default = nil)
  if valid_603914 != nil:
    section.add "X-Amz-Credential", valid_603914
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_603915 = formData.getOrDefault("DBSubnetGroupName")
  valid_603915 = validateParameter(valid_603915, JString, required = true,
                                 default = nil)
  if valid_603915 != nil:
    section.add "DBSubnetGroupName", valid_603915
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603916: Call_PostDeleteDBSubnetGroup_603903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_603916.validator(path, query, header, formData, body)
  let scheme = call_603916.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603916.url(scheme.get, call_603916.host, call_603916.base,
                         call_603916.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603916, url, valid)

proc call*(call_603917: Call_PostDeleteDBSubnetGroup_603903;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603918 = newJObject()
  var formData_603919 = newJObject()
  add(formData_603919, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603918, "Action", newJString(Action))
  add(query_603918, "Version", newJString(Version))
  result = call_603917.call(nil, query_603918, nil, formData_603919, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_603903(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_603904, base: "/",
    url: url_PostDeleteDBSubnetGroup_603905, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_603887 = ref object of OpenApiRestCall_602450
proc url_GetDeleteDBSubnetGroup_603889(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteDBSubnetGroup_603888(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603890 = query.getOrDefault("Action")
  valid_603890 = validateParameter(valid_603890, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_603890 != nil:
    section.add "Action", valid_603890
  var valid_603891 = query.getOrDefault("DBSubnetGroupName")
  valid_603891 = validateParameter(valid_603891, JString, required = true,
                                 default = nil)
  if valid_603891 != nil:
    section.add "DBSubnetGroupName", valid_603891
  var valid_603892 = query.getOrDefault("Version")
  valid_603892 = validateParameter(valid_603892, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603892 != nil:
    section.add "Version", valid_603892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603893 = header.getOrDefault("X-Amz-Date")
  valid_603893 = validateParameter(valid_603893, JString, required = false,
                                 default = nil)
  if valid_603893 != nil:
    section.add "X-Amz-Date", valid_603893
  var valid_603894 = header.getOrDefault("X-Amz-Security-Token")
  valid_603894 = validateParameter(valid_603894, JString, required = false,
                                 default = nil)
  if valid_603894 != nil:
    section.add "X-Amz-Security-Token", valid_603894
  var valid_603895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603895 = validateParameter(valid_603895, JString, required = false,
                                 default = nil)
  if valid_603895 != nil:
    section.add "X-Amz-Content-Sha256", valid_603895
  var valid_603896 = header.getOrDefault("X-Amz-Algorithm")
  valid_603896 = validateParameter(valid_603896, JString, required = false,
                                 default = nil)
  if valid_603896 != nil:
    section.add "X-Amz-Algorithm", valid_603896
  var valid_603897 = header.getOrDefault("X-Amz-Signature")
  valid_603897 = validateParameter(valid_603897, JString, required = false,
                                 default = nil)
  if valid_603897 != nil:
    section.add "X-Amz-Signature", valid_603897
  var valid_603898 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603898 = validateParameter(valid_603898, JString, required = false,
                                 default = nil)
  if valid_603898 != nil:
    section.add "X-Amz-SignedHeaders", valid_603898
  var valid_603899 = header.getOrDefault("X-Amz-Credential")
  valid_603899 = validateParameter(valid_603899, JString, required = false,
                                 default = nil)
  if valid_603899 != nil:
    section.add "X-Amz-Credential", valid_603899
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603900: Call_GetDeleteDBSubnetGroup_603887; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_603900.validator(path, query, header, formData, body)
  let scheme = call_603900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603900.url(scheme.get, call_603900.host, call_603900.base,
                         call_603900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603900, url, valid)

proc call*(call_603901: Call_GetDeleteDBSubnetGroup_603887;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_603902 = newJObject()
  add(query_603902, "Action", newJString(Action))
  add(query_603902, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_603902, "Version", newJString(Version))
  result = call_603901.call(nil, query_603902, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_603887(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_603888, base: "/",
    url: url_GetDeleteDBSubnetGroup_603889, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_603936 = ref object of OpenApiRestCall_602450
proc url_PostDeleteEventSubscription_603938(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDeleteEventSubscription_603937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603939 = query.getOrDefault("Action")
  valid_603939 = validateParameter(valid_603939, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_603939 != nil:
    section.add "Action", valid_603939
  var valid_603940 = query.getOrDefault("Version")
  valid_603940 = validateParameter(valid_603940, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603940 != nil:
    section.add "Version", valid_603940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603941 = header.getOrDefault("X-Amz-Date")
  valid_603941 = validateParameter(valid_603941, JString, required = false,
                                 default = nil)
  if valid_603941 != nil:
    section.add "X-Amz-Date", valid_603941
  var valid_603942 = header.getOrDefault("X-Amz-Security-Token")
  valid_603942 = validateParameter(valid_603942, JString, required = false,
                                 default = nil)
  if valid_603942 != nil:
    section.add "X-Amz-Security-Token", valid_603942
  var valid_603943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603943 = validateParameter(valid_603943, JString, required = false,
                                 default = nil)
  if valid_603943 != nil:
    section.add "X-Amz-Content-Sha256", valid_603943
  var valid_603944 = header.getOrDefault("X-Amz-Algorithm")
  valid_603944 = validateParameter(valid_603944, JString, required = false,
                                 default = nil)
  if valid_603944 != nil:
    section.add "X-Amz-Algorithm", valid_603944
  var valid_603945 = header.getOrDefault("X-Amz-Signature")
  valid_603945 = validateParameter(valid_603945, JString, required = false,
                                 default = nil)
  if valid_603945 != nil:
    section.add "X-Amz-Signature", valid_603945
  var valid_603946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603946 = validateParameter(valid_603946, JString, required = false,
                                 default = nil)
  if valid_603946 != nil:
    section.add "X-Amz-SignedHeaders", valid_603946
  var valid_603947 = header.getOrDefault("X-Amz-Credential")
  valid_603947 = validateParameter(valid_603947, JString, required = false,
                                 default = nil)
  if valid_603947 != nil:
    section.add "X-Amz-Credential", valid_603947
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_603948 = formData.getOrDefault("SubscriptionName")
  valid_603948 = validateParameter(valid_603948, JString, required = true,
                                 default = nil)
  if valid_603948 != nil:
    section.add "SubscriptionName", valid_603948
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603949: Call_PostDeleteEventSubscription_603936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_603949.validator(path, query, header, formData, body)
  let scheme = call_603949.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603949.url(scheme.get, call_603949.host, call_603949.base,
                         call_603949.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603949, url, valid)

proc call*(call_603950: Call_PostDeleteEventSubscription_603936;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_603951 = newJObject()
  var formData_603952 = newJObject()
  add(formData_603952, "SubscriptionName", newJString(SubscriptionName))
  add(query_603951, "Action", newJString(Action))
  add(query_603951, "Version", newJString(Version))
  result = call_603950.call(nil, query_603951, nil, formData_603952, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_603936(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_603937, base: "/",
    url: url_PostDeleteEventSubscription_603938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_603920 = ref object of OpenApiRestCall_602450
proc url_GetDeleteEventSubscription_603922(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDeleteEventSubscription_603921(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603923 = query.getOrDefault("Action")
  valid_603923 = validateParameter(valid_603923, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_603923 != nil:
    section.add "Action", valid_603923
  var valid_603924 = query.getOrDefault("SubscriptionName")
  valid_603924 = validateParameter(valid_603924, JString, required = true,
                                 default = nil)
  if valid_603924 != nil:
    section.add "SubscriptionName", valid_603924
  var valid_603925 = query.getOrDefault("Version")
  valid_603925 = validateParameter(valid_603925, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603925 != nil:
    section.add "Version", valid_603925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603926 = header.getOrDefault("X-Amz-Date")
  valid_603926 = validateParameter(valid_603926, JString, required = false,
                                 default = nil)
  if valid_603926 != nil:
    section.add "X-Amz-Date", valid_603926
  var valid_603927 = header.getOrDefault("X-Amz-Security-Token")
  valid_603927 = validateParameter(valid_603927, JString, required = false,
                                 default = nil)
  if valid_603927 != nil:
    section.add "X-Amz-Security-Token", valid_603927
  var valid_603928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603928 = validateParameter(valid_603928, JString, required = false,
                                 default = nil)
  if valid_603928 != nil:
    section.add "X-Amz-Content-Sha256", valid_603928
  var valid_603929 = header.getOrDefault("X-Amz-Algorithm")
  valid_603929 = validateParameter(valid_603929, JString, required = false,
                                 default = nil)
  if valid_603929 != nil:
    section.add "X-Amz-Algorithm", valid_603929
  var valid_603930 = header.getOrDefault("X-Amz-Signature")
  valid_603930 = validateParameter(valid_603930, JString, required = false,
                                 default = nil)
  if valid_603930 != nil:
    section.add "X-Amz-Signature", valid_603930
  var valid_603931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603931 = validateParameter(valid_603931, JString, required = false,
                                 default = nil)
  if valid_603931 != nil:
    section.add "X-Amz-SignedHeaders", valid_603931
  var valid_603932 = header.getOrDefault("X-Amz-Credential")
  valid_603932 = validateParameter(valid_603932, JString, required = false,
                                 default = nil)
  if valid_603932 != nil:
    section.add "X-Amz-Credential", valid_603932
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603933: Call_GetDeleteEventSubscription_603920; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_603933.validator(path, query, header, formData, body)
  let scheme = call_603933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603933.url(scheme.get, call_603933.host, call_603933.base,
                         call_603933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603933, url, valid)

proc call*(call_603934: Call_GetDeleteEventSubscription_603920;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Version: string (required)
  var query_603935 = newJObject()
  add(query_603935, "Action", newJString(Action))
  add(query_603935, "SubscriptionName", newJString(SubscriptionName))
  add(query_603935, "Version", newJString(Version))
  result = call_603934.call(nil, query_603935, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_603920(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_603921, base: "/",
    url: url_GetDeleteEventSubscription_603922,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_603972 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBClusterParameterGroups_603974(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_603973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603975 = query.getOrDefault("Action")
  valid_603975 = validateParameter(valid_603975, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_603975 != nil:
    section.add "Action", valid_603975
  var valid_603976 = query.getOrDefault("Version")
  valid_603976 = validateParameter(valid_603976, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603976 != nil:
    section.add "Version", valid_603976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603977 = header.getOrDefault("X-Amz-Date")
  valid_603977 = validateParameter(valid_603977, JString, required = false,
                                 default = nil)
  if valid_603977 != nil:
    section.add "X-Amz-Date", valid_603977
  var valid_603978 = header.getOrDefault("X-Amz-Security-Token")
  valid_603978 = validateParameter(valid_603978, JString, required = false,
                                 default = nil)
  if valid_603978 != nil:
    section.add "X-Amz-Security-Token", valid_603978
  var valid_603979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603979 = validateParameter(valid_603979, JString, required = false,
                                 default = nil)
  if valid_603979 != nil:
    section.add "X-Amz-Content-Sha256", valid_603979
  var valid_603980 = header.getOrDefault("X-Amz-Algorithm")
  valid_603980 = validateParameter(valid_603980, JString, required = false,
                                 default = nil)
  if valid_603980 != nil:
    section.add "X-Amz-Algorithm", valid_603980
  var valid_603981 = header.getOrDefault("X-Amz-Signature")
  valid_603981 = validateParameter(valid_603981, JString, required = false,
                                 default = nil)
  if valid_603981 != nil:
    section.add "X-Amz-Signature", valid_603981
  var valid_603982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603982 = validateParameter(valid_603982, JString, required = false,
                                 default = nil)
  if valid_603982 != nil:
    section.add "X-Amz-SignedHeaders", valid_603982
  var valid_603983 = header.getOrDefault("X-Amz-Credential")
  valid_603983 = validateParameter(valid_603983, JString, required = false,
                                 default = nil)
  if valid_603983 != nil:
    section.add "X-Amz-Credential", valid_603983
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_603984 = formData.getOrDefault("Marker")
  valid_603984 = validateParameter(valid_603984, JString, required = false,
                                 default = nil)
  if valid_603984 != nil:
    section.add "Marker", valid_603984
  var valid_603985 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_603985 = validateParameter(valid_603985, JString, required = false,
                                 default = nil)
  if valid_603985 != nil:
    section.add "DBClusterParameterGroupName", valid_603985
  var valid_603986 = formData.getOrDefault("Filters")
  valid_603986 = validateParameter(valid_603986, JArray, required = false,
                                 default = nil)
  if valid_603986 != nil:
    section.add "Filters", valid_603986
  var valid_603987 = formData.getOrDefault("MaxRecords")
  valid_603987 = validateParameter(valid_603987, JInt, required = false, default = nil)
  if valid_603987 != nil:
    section.add "MaxRecords", valid_603987
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603988: Call_PostDescribeDBClusterParameterGroups_603972;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_603988.validator(path, query, header, formData, body)
  let scheme = call_603988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603988.url(scheme.get, call_603988.host, call_603988.base,
                         call_603988.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603988, url, valid)

proc call*(call_603989: Call_PostDescribeDBClusterParameterGroups_603972;
          Marker: string = ""; Action: string = "DescribeDBClusterParameterGroups";
          DBClusterParameterGroupName: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_603990 = newJObject()
  var formData_603991 = newJObject()
  add(formData_603991, "Marker", newJString(Marker))
  add(query_603990, "Action", newJString(Action))
  add(formData_603991, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_603991.add "Filters", Filters
  add(formData_603991, "MaxRecords", newJInt(MaxRecords))
  add(query_603990, "Version", newJString(Version))
  result = call_603989.call(nil, query_603990, nil, formData_603991, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_603972(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_603973, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_603974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_603953 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBClusterParameterGroups_603955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_603954(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603956 = query.getOrDefault("MaxRecords")
  valid_603956 = validateParameter(valid_603956, JInt, required = false, default = nil)
  if valid_603956 != nil:
    section.add "MaxRecords", valid_603956
  var valid_603957 = query.getOrDefault("DBClusterParameterGroupName")
  valid_603957 = validateParameter(valid_603957, JString, required = false,
                                 default = nil)
  if valid_603957 != nil:
    section.add "DBClusterParameterGroupName", valid_603957
  var valid_603958 = query.getOrDefault("Filters")
  valid_603958 = validateParameter(valid_603958, JArray, required = false,
                                 default = nil)
  if valid_603958 != nil:
    section.add "Filters", valid_603958
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_603959 = query.getOrDefault("Action")
  valid_603959 = validateParameter(valid_603959, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_603959 != nil:
    section.add "Action", valid_603959
  var valid_603960 = query.getOrDefault("Marker")
  valid_603960 = validateParameter(valid_603960, JString, required = false,
                                 default = nil)
  if valid_603960 != nil:
    section.add "Marker", valid_603960
  var valid_603961 = query.getOrDefault("Version")
  valid_603961 = validateParameter(valid_603961, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_603961 != nil:
    section.add "Version", valid_603961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_603962 = header.getOrDefault("X-Amz-Date")
  valid_603962 = validateParameter(valid_603962, JString, required = false,
                                 default = nil)
  if valid_603962 != nil:
    section.add "X-Amz-Date", valid_603962
  var valid_603963 = header.getOrDefault("X-Amz-Security-Token")
  valid_603963 = validateParameter(valid_603963, JString, required = false,
                                 default = nil)
  if valid_603963 != nil:
    section.add "X-Amz-Security-Token", valid_603963
  var valid_603964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_603964 = validateParameter(valid_603964, JString, required = false,
                                 default = nil)
  if valid_603964 != nil:
    section.add "X-Amz-Content-Sha256", valid_603964
  var valid_603965 = header.getOrDefault("X-Amz-Algorithm")
  valid_603965 = validateParameter(valid_603965, JString, required = false,
                                 default = nil)
  if valid_603965 != nil:
    section.add "X-Amz-Algorithm", valid_603965
  var valid_603966 = header.getOrDefault("X-Amz-Signature")
  valid_603966 = validateParameter(valid_603966, JString, required = false,
                                 default = nil)
  if valid_603966 != nil:
    section.add "X-Amz-Signature", valid_603966
  var valid_603967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_603967 = validateParameter(valid_603967, JString, required = false,
                                 default = nil)
  if valid_603967 != nil:
    section.add "X-Amz-SignedHeaders", valid_603967
  var valid_603968 = header.getOrDefault("X-Amz-Credential")
  valid_603968 = validateParameter(valid_603968, JString, required = false,
                                 default = nil)
  if valid_603968 != nil:
    section.add "X-Amz-Credential", valid_603968
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_603969: Call_GetDescribeDBClusterParameterGroups_603953;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_603969.validator(path, query, header, formData, body)
  let scheme = call_603969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_603969.url(scheme.get, call_603969.host, call_603969.base,
                         call_603969.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_603969, url, valid)

proc call*(call_603970: Call_GetDescribeDBClusterParameterGroups_603953;
          MaxRecords: int = 0; DBClusterParameterGroupName: string = "";
          Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_603971 = newJObject()
  add(query_603971, "MaxRecords", newJInt(MaxRecords))
  add(query_603971, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_603971.add "Filters", Filters
  add(query_603971, "Action", newJString(Action))
  add(query_603971, "Marker", newJString(Marker))
  add(query_603971, "Version", newJString(Version))
  result = call_603970.call(nil, query_603971, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_603953(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_603954, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_603955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_604012 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBClusterParameters_604014(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterParameters_604013(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604015 = query.getOrDefault("Action")
  valid_604015 = validateParameter(valid_604015, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_604015 != nil:
    section.add "Action", valid_604015
  var valid_604016 = query.getOrDefault("Version")
  valid_604016 = validateParameter(valid_604016, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604016 != nil:
    section.add "Version", valid_604016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604017 = header.getOrDefault("X-Amz-Date")
  valid_604017 = validateParameter(valid_604017, JString, required = false,
                                 default = nil)
  if valid_604017 != nil:
    section.add "X-Amz-Date", valid_604017
  var valid_604018 = header.getOrDefault("X-Amz-Security-Token")
  valid_604018 = validateParameter(valid_604018, JString, required = false,
                                 default = nil)
  if valid_604018 != nil:
    section.add "X-Amz-Security-Token", valid_604018
  var valid_604019 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604019 = validateParameter(valid_604019, JString, required = false,
                                 default = nil)
  if valid_604019 != nil:
    section.add "X-Amz-Content-Sha256", valid_604019
  var valid_604020 = header.getOrDefault("X-Amz-Algorithm")
  valid_604020 = validateParameter(valid_604020, JString, required = false,
                                 default = nil)
  if valid_604020 != nil:
    section.add "X-Amz-Algorithm", valid_604020
  var valid_604021 = header.getOrDefault("X-Amz-Signature")
  valid_604021 = validateParameter(valid_604021, JString, required = false,
                                 default = nil)
  if valid_604021 != nil:
    section.add "X-Amz-Signature", valid_604021
  var valid_604022 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604022 = validateParameter(valid_604022, JString, required = false,
                                 default = nil)
  if valid_604022 != nil:
    section.add "X-Amz-SignedHeaders", valid_604022
  var valid_604023 = header.getOrDefault("X-Amz-Credential")
  valid_604023 = validateParameter(valid_604023, JString, required = false,
                                 default = nil)
  if valid_604023 != nil:
    section.add "X-Amz-Credential", valid_604023
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  section = newJObject()
  var valid_604024 = formData.getOrDefault("Marker")
  valid_604024 = validateParameter(valid_604024, JString, required = false,
                                 default = nil)
  if valid_604024 != nil:
    section.add "Marker", valid_604024
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_604025 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_604025 = validateParameter(valid_604025, JString, required = true,
                                 default = nil)
  if valid_604025 != nil:
    section.add "DBClusterParameterGroupName", valid_604025
  var valid_604026 = formData.getOrDefault("Filters")
  valid_604026 = validateParameter(valid_604026, JArray, required = false,
                                 default = nil)
  if valid_604026 != nil:
    section.add "Filters", valid_604026
  var valid_604027 = formData.getOrDefault("MaxRecords")
  valid_604027 = validateParameter(valid_604027, JInt, required = false, default = nil)
  if valid_604027 != nil:
    section.add "MaxRecords", valid_604027
  var valid_604028 = formData.getOrDefault("Source")
  valid_604028 = validateParameter(valid_604028, JString, required = false,
                                 default = nil)
  if valid_604028 != nil:
    section.add "Source", valid_604028
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604029: Call_PostDescribeDBClusterParameters_604012;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_604029.validator(path, query, header, formData, body)
  let scheme = call_604029.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604029.url(scheme.get, call_604029.host, call_604029.base,
                         call_604029.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604029, url, valid)

proc call*(call_604030: Call_PostDescribeDBClusterParameters_604012;
          DBClusterParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  var query_604031 = newJObject()
  var formData_604032 = newJObject()
  add(formData_604032, "Marker", newJString(Marker))
  add(query_604031, "Action", newJString(Action))
  add(formData_604032, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_604032.add "Filters", Filters
  add(formData_604032, "MaxRecords", newJInt(MaxRecords))
  add(query_604031, "Version", newJString(Version))
  add(formData_604032, "Source", newJString(Source))
  result = call_604030.call(nil, query_604031, nil, formData_604032, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_604012(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_604013, base: "/",
    url: url_PostDescribeDBClusterParameters_604014,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_603992 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBClusterParameters_603994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterParameters_603993(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_603995 = query.getOrDefault("MaxRecords")
  valid_603995 = validateParameter(valid_603995, JInt, required = false, default = nil)
  if valid_603995 != nil:
    section.add "MaxRecords", valid_603995
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_603996 = query.getOrDefault("DBClusterParameterGroupName")
  valid_603996 = validateParameter(valid_603996, JString, required = true,
                                 default = nil)
  if valid_603996 != nil:
    section.add "DBClusterParameterGroupName", valid_603996
  var valid_603997 = query.getOrDefault("Filters")
  valid_603997 = validateParameter(valid_603997, JArray, required = false,
                                 default = nil)
  if valid_603997 != nil:
    section.add "Filters", valid_603997
  var valid_603998 = query.getOrDefault("Action")
  valid_603998 = validateParameter(valid_603998, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_603998 != nil:
    section.add "Action", valid_603998
  var valid_603999 = query.getOrDefault("Marker")
  valid_603999 = validateParameter(valid_603999, JString, required = false,
                                 default = nil)
  if valid_603999 != nil:
    section.add "Marker", valid_603999
  var valid_604000 = query.getOrDefault("Source")
  valid_604000 = validateParameter(valid_604000, JString, required = false,
                                 default = nil)
  if valid_604000 != nil:
    section.add "Source", valid_604000
  var valid_604001 = query.getOrDefault("Version")
  valid_604001 = validateParameter(valid_604001, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604001 != nil:
    section.add "Version", valid_604001
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604002 = header.getOrDefault("X-Amz-Date")
  valid_604002 = validateParameter(valid_604002, JString, required = false,
                                 default = nil)
  if valid_604002 != nil:
    section.add "X-Amz-Date", valid_604002
  var valid_604003 = header.getOrDefault("X-Amz-Security-Token")
  valid_604003 = validateParameter(valid_604003, JString, required = false,
                                 default = nil)
  if valid_604003 != nil:
    section.add "X-Amz-Security-Token", valid_604003
  var valid_604004 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604004 = validateParameter(valid_604004, JString, required = false,
                                 default = nil)
  if valid_604004 != nil:
    section.add "X-Amz-Content-Sha256", valid_604004
  var valid_604005 = header.getOrDefault("X-Amz-Algorithm")
  valid_604005 = validateParameter(valid_604005, JString, required = false,
                                 default = nil)
  if valid_604005 != nil:
    section.add "X-Amz-Algorithm", valid_604005
  var valid_604006 = header.getOrDefault("X-Amz-Signature")
  valid_604006 = validateParameter(valid_604006, JString, required = false,
                                 default = nil)
  if valid_604006 != nil:
    section.add "X-Amz-Signature", valid_604006
  var valid_604007 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604007 = validateParameter(valid_604007, JString, required = false,
                                 default = nil)
  if valid_604007 != nil:
    section.add "X-Amz-SignedHeaders", valid_604007
  var valid_604008 = header.getOrDefault("X-Amz-Credential")
  valid_604008 = validateParameter(valid_604008, JString, required = false,
                                 default = nil)
  if valid_604008 != nil:
    section.add "X-Amz-Credential", valid_604008
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604009: Call_GetDescribeDBClusterParameters_603992; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_604009.validator(path, query, header, formData, body)
  let scheme = call_604009.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604009.url(scheme.get, call_604009.host, call_604009.base,
                         call_604009.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604009, url, valid)

proc call*(call_604010: Call_GetDescribeDBClusterParameters_603992;
          DBClusterParameterGroupName: string; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterParameters";
          Marker: string = ""; Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   Version: string (required)
  var query_604011 = newJObject()
  add(query_604011, "MaxRecords", newJInt(MaxRecords))
  add(query_604011, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_604011.add "Filters", Filters
  add(query_604011, "Action", newJString(Action))
  add(query_604011, "Marker", newJString(Marker))
  add(query_604011, "Source", newJString(Source))
  add(query_604011, "Version", newJString(Version))
  result = call_604010.call(nil, query_604011, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_603992(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_603993, base: "/",
    url: url_GetDescribeDBClusterParameters_603994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_604049 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBClusterSnapshotAttributes_604051(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_604050(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604052 = query.getOrDefault("Action")
  valid_604052 = validateParameter(valid_604052, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_604052 != nil:
    section.add "Action", valid_604052
  var valid_604053 = query.getOrDefault("Version")
  valid_604053 = validateParameter(valid_604053, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604053 != nil:
    section.add "Version", valid_604053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604054 = header.getOrDefault("X-Amz-Date")
  valid_604054 = validateParameter(valid_604054, JString, required = false,
                                 default = nil)
  if valid_604054 != nil:
    section.add "X-Amz-Date", valid_604054
  var valid_604055 = header.getOrDefault("X-Amz-Security-Token")
  valid_604055 = validateParameter(valid_604055, JString, required = false,
                                 default = nil)
  if valid_604055 != nil:
    section.add "X-Amz-Security-Token", valid_604055
  var valid_604056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604056 = validateParameter(valid_604056, JString, required = false,
                                 default = nil)
  if valid_604056 != nil:
    section.add "X-Amz-Content-Sha256", valid_604056
  var valid_604057 = header.getOrDefault("X-Amz-Algorithm")
  valid_604057 = validateParameter(valid_604057, JString, required = false,
                                 default = nil)
  if valid_604057 != nil:
    section.add "X-Amz-Algorithm", valid_604057
  var valid_604058 = header.getOrDefault("X-Amz-Signature")
  valid_604058 = validateParameter(valid_604058, JString, required = false,
                                 default = nil)
  if valid_604058 != nil:
    section.add "X-Amz-Signature", valid_604058
  var valid_604059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604059 = validateParameter(valid_604059, JString, required = false,
                                 default = nil)
  if valid_604059 != nil:
    section.add "X-Amz-SignedHeaders", valid_604059
  var valid_604060 = header.getOrDefault("X-Amz-Credential")
  valid_604060 = validateParameter(valid_604060, JString, required = false,
                                 default = nil)
  if valid_604060 != nil:
    section.add "X-Amz-Credential", valid_604060
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_604061 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604061 = validateParameter(valid_604061, JString, required = true,
                                 default = nil)
  if valid_604061 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604061
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604062: Call_PostDescribeDBClusterSnapshotAttributes_604049;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_604062.validator(path, query, header, formData, body)
  let scheme = call_604062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604062.url(scheme.get, call_604062.host, call_604062.base,
                         call_604062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604062, url, valid)

proc call*(call_604063: Call_PostDescribeDBClusterSnapshotAttributes_604049;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604064 = newJObject()
  var formData_604065 = newJObject()
  add(formData_604065, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_604064, "Action", newJString(Action))
  add(query_604064, "Version", newJString(Version))
  result = call_604063.call(nil, query_604064, nil, formData_604065, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_604049(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_604050, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_604051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_604033 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBClusterSnapshotAttributes_604035(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_604034(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_604036 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604036 = validateParameter(valid_604036, JString, required = true,
                                 default = nil)
  if valid_604036 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604036
  var valid_604037 = query.getOrDefault("Action")
  valid_604037 = validateParameter(valid_604037, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_604037 != nil:
    section.add "Action", valid_604037
  var valid_604038 = query.getOrDefault("Version")
  valid_604038 = validateParameter(valid_604038, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604038 != nil:
    section.add "Version", valid_604038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604039 = header.getOrDefault("X-Amz-Date")
  valid_604039 = validateParameter(valid_604039, JString, required = false,
                                 default = nil)
  if valid_604039 != nil:
    section.add "X-Amz-Date", valid_604039
  var valid_604040 = header.getOrDefault("X-Amz-Security-Token")
  valid_604040 = validateParameter(valid_604040, JString, required = false,
                                 default = nil)
  if valid_604040 != nil:
    section.add "X-Amz-Security-Token", valid_604040
  var valid_604041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604041 = validateParameter(valid_604041, JString, required = false,
                                 default = nil)
  if valid_604041 != nil:
    section.add "X-Amz-Content-Sha256", valid_604041
  var valid_604042 = header.getOrDefault("X-Amz-Algorithm")
  valid_604042 = validateParameter(valid_604042, JString, required = false,
                                 default = nil)
  if valid_604042 != nil:
    section.add "X-Amz-Algorithm", valid_604042
  var valid_604043 = header.getOrDefault("X-Amz-Signature")
  valid_604043 = validateParameter(valid_604043, JString, required = false,
                                 default = nil)
  if valid_604043 != nil:
    section.add "X-Amz-Signature", valid_604043
  var valid_604044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604044 = validateParameter(valid_604044, JString, required = false,
                                 default = nil)
  if valid_604044 != nil:
    section.add "X-Amz-SignedHeaders", valid_604044
  var valid_604045 = header.getOrDefault("X-Amz-Credential")
  valid_604045 = validateParameter(valid_604045, JString, required = false,
                                 default = nil)
  if valid_604045 != nil:
    section.add "X-Amz-Credential", valid_604045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604046: Call_GetDescribeDBClusterSnapshotAttributes_604033;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_604046.validator(path, query, header, formData, body)
  let scheme = call_604046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604046.url(scheme.get, call_604046.host, call_604046.base,
                         call_604046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604046, url, valid)

proc call*(call_604047: Call_GetDescribeDBClusterSnapshotAttributes_604033;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604048 = newJObject()
  add(query_604048, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_604048, "Action", newJString(Action))
  add(query_604048, "Version", newJString(Version))
  result = call_604047.call(nil, query_604048, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_604033(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_604034, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_604035,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_604089 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBClusterSnapshots_604091(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_604090(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604092 = query.getOrDefault("Action")
  valid_604092 = validateParameter(valid_604092, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_604092 != nil:
    section.add "Action", valid_604092
  var valid_604093 = query.getOrDefault("Version")
  valid_604093 = validateParameter(valid_604093, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604093 != nil:
    section.add "Version", valid_604093
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604094 = header.getOrDefault("X-Amz-Date")
  valid_604094 = validateParameter(valid_604094, JString, required = false,
                                 default = nil)
  if valid_604094 != nil:
    section.add "X-Amz-Date", valid_604094
  var valid_604095 = header.getOrDefault("X-Amz-Security-Token")
  valid_604095 = validateParameter(valid_604095, JString, required = false,
                                 default = nil)
  if valid_604095 != nil:
    section.add "X-Amz-Security-Token", valid_604095
  var valid_604096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604096 = validateParameter(valid_604096, JString, required = false,
                                 default = nil)
  if valid_604096 != nil:
    section.add "X-Amz-Content-Sha256", valid_604096
  var valid_604097 = header.getOrDefault("X-Amz-Algorithm")
  valid_604097 = validateParameter(valid_604097, JString, required = false,
                                 default = nil)
  if valid_604097 != nil:
    section.add "X-Amz-Algorithm", valid_604097
  var valid_604098 = header.getOrDefault("X-Amz-Signature")
  valid_604098 = validateParameter(valid_604098, JString, required = false,
                                 default = nil)
  if valid_604098 != nil:
    section.add "X-Amz-Signature", valid_604098
  var valid_604099 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604099 = validateParameter(valid_604099, JString, required = false,
                                 default = nil)
  if valid_604099 != nil:
    section.add "X-Amz-SignedHeaders", valid_604099
  var valid_604100 = header.getOrDefault("X-Amz-Credential")
  valid_604100 = validateParameter(valid_604100, JString, required = false,
                                 default = nil)
  if valid_604100 != nil:
    section.add "X-Amz-Credential", valid_604100
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_604101 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604101 = validateParameter(valid_604101, JString, required = false,
                                 default = nil)
  if valid_604101 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604101
  var valid_604102 = formData.getOrDefault("IncludeShared")
  valid_604102 = validateParameter(valid_604102, JBool, required = false, default = nil)
  if valid_604102 != nil:
    section.add "IncludeShared", valid_604102
  var valid_604103 = formData.getOrDefault("IncludePublic")
  valid_604103 = validateParameter(valid_604103, JBool, required = false, default = nil)
  if valid_604103 != nil:
    section.add "IncludePublic", valid_604103
  var valid_604104 = formData.getOrDefault("SnapshotType")
  valid_604104 = validateParameter(valid_604104, JString, required = false,
                                 default = nil)
  if valid_604104 != nil:
    section.add "SnapshotType", valid_604104
  var valid_604105 = formData.getOrDefault("Marker")
  valid_604105 = validateParameter(valid_604105, JString, required = false,
                                 default = nil)
  if valid_604105 != nil:
    section.add "Marker", valid_604105
  var valid_604106 = formData.getOrDefault("Filters")
  valid_604106 = validateParameter(valid_604106, JArray, required = false,
                                 default = nil)
  if valid_604106 != nil:
    section.add "Filters", valid_604106
  var valid_604107 = formData.getOrDefault("MaxRecords")
  valid_604107 = validateParameter(valid_604107, JInt, required = false, default = nil)
  if valid_604107 != nil:
    section.add "MaxRecords", valid_604107
  var valid_604108 = formData.getOrDefault("DBClusterIdentifier")
  valid_604108 = validateParameter(valid_604108, JString, required = false,
                                 default = nil)
  if valid_604108 != nil:
    section.add "DBClusterIdentifier", valid_604108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604109: Call_PostDescribeDBClusterSnapshots_604089; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_604109.validator(path, query, header, formData, body)
  let scheme = call_604109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604109.url(scheme.get, call_604109.host, call_604109.base,
                         call_604109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604109, url, valid)

proc call*(call_604110: Call_PostDescribeDBClusterSnapshots_604089;
          DBClusterSnapshotIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; SnapshotType: string = ""; Marker: string = "";
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_604111 = newJObject()
  var formData_604112 = newJObject()
  add(formData_604112, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_604112, "IncludeShared", newJBool(IncludeShared))
  add(formData_604112, "IncludePublic", newJBool(IncludePublic))
  add(formData_604112, "SnapshotType", newJString(SnapshotType))
  add(formData_604112, "Marker", newJString(Marker))
  add(query_604111, "Action", newJString(Action))
  if Filters != nil:
    formData_604112.add "Filters", Filters
  add(formData_604112, "MaxRecords", newJInt(MaxRecords))
  add(formData_604112, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604111, "Version", newJString(Version))
  result = call_604110.call(nil, query_604111, nil, formData_604112, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_604089(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_604090, base: "/",
    url: url_PostDescribeDBClusterSnapshots_604091,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_604066 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBClusterSnapshots_604068(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_604067(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604069 = query.getOrDefault("IncludePublic")
  valid_604069 = validateParameter(valid_604069, JBool, required = false, default = nil)
  if valid_604069 != nil:
    section.add "IncludePublic", valid_604069
  var valid_604070 = query.getOrDefault("MaxRecords")
  valid_604070 = validateParameter(valid_604070, JInt, required = false, default = nil)
  if valid_604070 != nil:
    section.add "MaxRecords", valid_604070
  var valid_604071 = query.getOrDefault("DBClusterIdentifier")
  valid_604071 = validateParameter(valid_604071, JString, required = false,
                                 default = nil)
  if valid_604071 != nil:
    section.add "DBClusterIdentifier", valid_604071
  var valid_604072 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604072 = validateParameter(valid_604072, JString, required = false,
                                 default = nil)
  if valid_604072 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604072
  var valid_604073 = query.getOrDefault("Filters")
  valid_604073 = validateParameter(valid_604073, JArray, required = false,
                                 default = nil)
  if valid_604073 != nil:
    section.add "Filters", valid_604073
  var valid_604074 = query.getOrDefault("IncludeShared")
  valid_604074 = validateParameter(valid_604074, JBool, required = false, default = nil)
  if valid_604074 != nil:
    section.add "IncludeShared", valid_604074
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604075 = query.getOrDefault("Action")
  valid_604075 = validateParameter(valid_604075, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_604075 != nil:
    section.add "Action", valid_604075
  var valid_604076 = query.getOrDefault("Marker")
  valid_604076 = validateParameter(valid_604076, JString, required = false,
                                 default = nil)
  if valid_604076 != nil:
    section.add "Marker", valid_604076
  var valid_604077 = query.getOrDefault("SnapshotType")
  valid_604077 = validateParameter(valid_604077, JString, required = false,
                                 default = nil)
  if valid_604077 != nil:
    section.add "SnapshotType", valid_604077
  var valid_604078 = query.getOrDefault("Version")
  valid_604078 = validateParameter(valid_604078, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604078 != nil:
    section.add "Version", valid_604078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604079 = header.getOrDefault("X-Amz-Date")
  valid_604079 = validateParameter(valid_604079, JString, required = false,
                                 default = nil)
  if valid_604079 != nil:
    section.add "X-Amz-Date", valid_604079
  var valid_604080 = header.getOrDefault("X-Amz-Security-Token")
  valid_604080 = validateParameter(valid_604080, JString, required = false,
                                 default = nil)
  if valid_604080 != nil:
    section.add "X-Amz-Security-Token", valid_604080
  var valid_604081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604081 = validateParameter(valid_604081, JString, required = false,
                                 default = nil)
  if valid_604081 != nil:
    section.add "X-Amz-Content-Sha256", valid_604081
  var valid_604082 = header.getOrDefault("X-Amz-Algorithm")
  valid_604082 = validateParameter(valid_604082, JString, required = false,
                                 default = nil)
  if valid_604082 != nil:
    section.add "X-Amz-Algorithm", valid_604082
  var valid_604083 = header.getOrDefault("X-Amz-Signature")
  valid_604083 = validateParameter(valid_604083, JString, required = false,
                                 default = nil)
  if valid_604083 != nil:
    section.add "X-Amz-Signature", valid_604083
  var valid_604084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604084 = validateParameter(valid_604084, JString, required = false,
                                 default = nil)
  if valid_604084 != nil:
    section.add "X-Amz-SignedHeaders", valid_604084
  var valid_604085 = header.getOrDefault("X-Amz-Credential")
  valid_604085 = validateParameter(valid_604085, JString, required = false,
                                 default = nil)
  if valid_604085 != nil:
    section.add "X-Amz-Credential", valid_604085
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604086: Call_GetDescribeDBClusterSnapshots_604066; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_604086.validator(path, query, header, formData, body)
  let scheme = call_604086.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604086.url(scheme.get, call_604086.host, call_604086.base,
                         call_604086.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604086, url, valid)

proc call*(call_604087: Call_GetDescribeDBClusterSnapshots_604066;
          IncludePublic: bool = false; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterSnapshotIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  var query_604088 = newJObject()
  add(query_604088, "IncludePublic", newJBool(IncludePublic))
  add(query_604088, "MaxRecords", newJInt(MaxRecords))
  add(query_604088, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604088, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Filters != nil:
    query_604088.add "Filters", Filters
  add(query_604088, "IncludeShared", newJBool(IncludeShared))
  add(query_604088, "Action", newJString(Action))
  add(query_604088, "Marker", newJString(Marker))
  add(query_604088, "SnapshotType", newJString(SnapshotType))
  add(query_604088, "Version", newJString(Version))
  result = call_604087.call(nil, query_604088, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_604066(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_604067, base: "/",
    url: url_GetDescribeDBClusterSnapshots_604068,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_604132 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBClusters_604134(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBClusters_604133(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604135 = query.getOrDefault("Action")
  valid_604135 = validateParameter(valid_604135, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_604135 != nil:
    section.add "Action", valid_604135
  var valid_604136 = query.getOrDefault("Version")
  valid_604136 = validateParameter(valid_604136, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604136 != nil:
    section.add "Version", valid_604136
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604137 = header.getOrDefault("X-Amz-Date")
  valid_604137 = validateParameter(valid_604137, JString, required = false,
                                 default = nil)
  if valid_604137 != nil:
    section.add "X-Amz-Date", valid_604137
  var valid_604138 = header.getOrDefault("X-Amz-Security-Token")
  valid_604138 = validateParameter(valid_604138, JString, required = false,
                                 default = nil)
  if valid_604138 != nil:
    section.add "X-Amz-Security-Token", valid_604138
  var valid_604139 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604139 = validateParameter(valid_604139, JString, required = false,
                                 default = nil)
  if valid_604139 != nil:
    section.add "X-Amz-Content-Sha256", valid_604139
  var valid_604140 = header.getOrDefault("X-Amz-Algorithm")
  valid_604140 = validateParameter(valid_604140, JString, required = false,
                                 default = nil)
  if valid_604140 != nil:
    section.add "X-Amz-Algorithm", valid_604140
  var valid_604141 = header.getOrDefault("X-Amz-Signature")
  valid_604141 = validateParameter(valid_604141, JString, required = false,
                                 default = nil)
  if valid_604141 != nil:
    section.add "X-Amz-Signature", valid_604141
  var valid_604142 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604142 = validateParameter(valid_604142, JString, required = false,
                                 default = nil)
  if valid_604142 != nil:
    section.add "X-Amz-SignedHeaders", valid_604142
  var valid_604143 = header.getOrDefault("X-Amz-Credential")
  valid_604143 = validateParameter(valid_604143, JString, required = false,
                                 default = nil)
  if valid_604143 != nil:
    section.add "X-Amz-Credential", valid_604143
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_604144 = formData.getOrDefault("Marker")
  valid_604144 = validateParameter(valid_604144, JString, required = false,
                                 default = nil)
  if valid_604144 != nil:
    section.add "Marker", valid_604144
  var valid_604145 = formData.getOrDefault("Filters")
  valid_604145 = validateParameter(valid_604145, JArray, required = false,
                                 default = nil)
  if valid_604145 != nil:
    section.add "Filters", valid_604145
  var valid_604146 = formData.getOrDefault("MaxRecords")
  valid_604146 = validateParameter(valid_604146, JInt, required = false, default = nil)
  if valid_604146 != nil:
    section.add "MaxRecords", valid_604146
  var valid_604147 = formData.getOrDefault("DBClusterIdentifier")
  valid_604147 = validateParameter(valid_604147, JString, required = false,
                                 default = nil)
  if valid_604147 != nil:
    section.add "DBClusterIdentifier", valid_604147
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604148: Call_PostDescribeDBClusters_604132; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_604148.validator(path, query, header, formData, body)
  let scheme = call_604148.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604148.url(scheme.get, call_604148.host, call_604148.base,
                         call_604148.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604148, url, valid)

proc call*(call_604149: Call_PostDescribeDBClusters_604132; Marker: string = "";
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_604150 = newJObject()
  var formData_604151 = newJObject()
  add(formData_604151, "Marker", newJString(Marker))
  add(query_604150, "Action", newJString(Action))
  if Filters != nil:
    formData_604151.add "Filters", Filters
  add(formData_604151, "MaxRecords", newJInt(MaxRecords))
  add(formData_604151, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604150, "Version", newJString(Version))
  result = call_604149.call(nil, query_604150, nil, formData_604151, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_604132(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_604133, base: "/",
    url: url_PostDescribeDBClusters_604134, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_604113 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBClusters_604115(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBClusters_604114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604116 = query.getOrDefault("MaxRecords")
  valid_604116 = validateParameter(valid_604116, JInt, required = false, default = nil)
  if valid_604116 != nil:
    section.add "MaxRecords", valid_604116
  var valid_604117 = query.getOrDefault("DBClusterIdentifier")
  valid_604117 = validateParameter(valid_604117, JString, required = false,
                                 default = nil)
  if valid_604117 != nil:
    section.add "DBClusterIdentifier", valid_604117
  var valid_604118 = query.getOrDefault("Filters")
  valid_604118 = validateParameter(valid_604118, JArray, required = false,
                                 default = nil)
  if valid_604118 != nil:
    section.add "Filters", valid_604118
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604119 = query.getOrDefault("Action")
  valid_604119 = validateParameter(valid_604119, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_604119 != nil:
    section.add "Action", valid_604119
  var valid_604120 = query.getOrDefault("Marker")
  valid_604120 = validateParameter(valid_604120, JString, required = false,
                                 default = nil)
  if valid_604120 != nil:
    section.add "Marker", valid_604120
  var valid_604121 = query.getOrDefault("Version")
  valid_604121 = validateParameter(valid_604121, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604121 != nil:
    section.add "Version", valid_604121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604122 = header.getOrDefault("X-Amz-Date")
  valid_604122 = validateParameter(valid_604122, JString, required = false,
                                 default = nil)
  if valid_604122 != nil:
    section.add "X-Amz-Date", valid_604122
  var valid_604123 = header.getOrDefault("X-Amz-Security-Token")
  valid_604123 = validateParameter(valid_604123, JString, required = false,
                                 default = nil)
  if valid_604123 != nil:
    section.add "X-Amz-Security-Token", valid_604123
  var valid_604124 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604124 = validateParameter(valid_604124, JString, required = false,
                                 default = nil)
  if valid_604124 != nil:
    section.add "X-Amz-Content-Sha256", valid_604124
  var valid_604125 = header.getOrDefault("X-Amz-Algorithm")
  valid_604125 = validateParameter(valid_604125, JString, required = false,
                                 default = nil)
  if valid_604125 != nil:
    section.add "X-Amz-Algorithm", valid_604125
  var valid_604126 = header.getOrDefault("X-Amz-Signature")
  valid_604126 = validateParameter(valid_604126, JString, required = false,
                                 default = nil)
  if valid_604126 != nil:
    section.add "X-Amz-Signature", valid_604126
  var valid_604127 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604127 = validateParameter(valid_604127, JString, required = false,
                                 default = nil)
  if valid_604127 != nil:
    section.add "X-Amz-SignedHeaders", valid_604127
  var valid_604128 = header.getOrDefault("X-Amz-Credential")
  valid_604128 = validateParameter(valid_604128, JString, required = false,
                                 default = nil)
  if valid_604128 != nil:
    section.add "X-Amz-Credential", valid_604128
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604129: Call_GetDescribeDBClusters_604113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_604129.validator(path, query, header, formData, body)
  let scheme = call_604129.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604129.url(scheme.get, call_604129.host, call_604129.base,
                         call_604129.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604129, url, valid)

proc call*(call_604130: Call_GetDescribeDBClusters_604113; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeDBClusters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_604131 = newJObject()
  add(query_604131, "MaxRecords", newJInt(MaxRecords))
  add(query_604131, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_604131.add "Filters", Filters
  add(query_604131, "Action", newJString(Action))
  add(query_604131, "Marker", newJString(Marker))
  add(query_604131, "Version", newJString(Version))
  result = call_604130.call(nil, query_604131, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_604113(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_604114, base: "/",
    url: url_GetDescribeDBClusters_604115, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_604176 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBEngineVersions_604178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBEngineVersions_604177(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604179 = query.getOrDefault("Action")
  valid_604179 = validateParameter(valid_604179, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_604179 != nil:
    section.add "Action", valid_604179
  var valid_604180 = query.getOrDefault("Version")
  valid_604180 = validateParameter(valid_604180, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604180 != nil:
    section.add "Version", valid_604180
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604181 = header.getOrDefault("X-Amz-Date")
  valid_604181 = validateParameter(valid_604181, JString, required = false,
                                 default = nil)
  if valid_604181 != nil:
    section.add "X-Amz-Date", valid_604181
  var valid_604182 = header.getOrDefault("X-Amz-Security-Token")
  valid_604182 = validateParameter(valid_604182, JString, required = false,
                                 default = nil)
  if valid_604182 != nil:
    section.add "X-Amz-Security-Token", valid_604182
  var valid_604183 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604183 = validateParameter(valid_604183, JString, required = false,
                                 default = nil)
  if valid_604183 != nil:
    section.add "X-Amz-Content-Sha256", valid_604183
  var valid_604184 = header.getOrDefault("X-Amz-Algorithm")
  valid_604184 = validateParameter(valid_604184, JString, required = false,
                                 default = nil)
  if valid_604184 != nil:
    section.add "X-Amz-Algorithm", valid_604184
  var valid_604185 = header.getOrDefault("X-Amz-Signature")
  valid_604185 = validateParameter(valid_604185, JString, required = false,
                                 default = nil)
  if valid_604185 != nil:
    section.add "X-Amz-Signature", valid_604185
  var valid_604186 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604186 = validateParameter(valid_604186, JString, required = false,
                                 default = nil)
  if valid_604186 != nil:
    section.add "X-Amz-SignedHeaders", valid_604186
  var valid_604187 = header.getOrDefault("X-Amz-Credential")
  valid_604187 = validateParameter(valid_604187, JString, required = false,
                                 default = nil)
  if valid_604187 != nil:
    section.add "X-Amz-Credential", valid_604187
  result.add "header", section
  ## parameters in `formData` object:
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_604188 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_604188 = validateParameter(valid_604188, JBool, required = false, default = nil)
  if valid_604188 != nil:
    section.add "ListSupportedCharacterSets", valid_604188
  var valid_604189 = formData.getOrDefault("Engine")
  valid_604189 = validateParameter(valid_604189, JString, required = false,
                                 default = nil)
  if valid_604189 != nil:
    section.add "Engine", valid_604189
  var valid_604190 = formData.getOrDefault("Marker")
  valid_604190 = validateParameter(valid_604190, JString, required = false,
                                 default = nil)
  if valid_604190 != nil:
    section.add "Marker", valid_604190
  var valid_604191 = formData.getOrDefault("DBParameterGroupFamily")
  valid_604191 = validateParameter(valid_604191, JString, required = false,
                                 default = nil)
  if valid_604191 != nil:
    section.add "DBParameterGroupFamily", valid_604191
  var valid_604192 = formData.getOrDefault("Filters")
  valid_604192 = validateParameter(valid_604192, JArray, required = false,
                                 default = nil)
  if valid_604192 != nil:
    section.add "Filters", valid_604192
  var valid_604193 = formData.getOrDefault("MaxRecords")
  valid_604193 = validateParameter(valid_604193, JInt, required = false, default = nil)
  if valid_604193 != nil:
    section.add "MaxRecords", valid_604193
  var valid_604194 = formData.getOrDefault("EngineVersion")
  valid_604194 = validateParameter(valid_604194, JString, required = false,
                                 default = nil)
  if valid_604194 != nil:
    section.add "EngineVersion", valid_604194
  var valid_604195 = formData.getOrDefault("ListSupportedTimezones")
  valid_604195 = validateParameter(valid_604195, JBool, required = false, default = nil)
  if valid_604195 != nil:
    section.add "ListSupportedTimezones", valid_604195
  var valid_604196 = formData.getOrDefault("DefaultOnly")
  valid_604196 = validateParameter(valid_604196, JBool, required = false, default = nil)
  if valid_604196 != nil:
    section.add "DefaultOnly", valid_604196
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604197: Call_PostDescribeDBEngineVersions_604176; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_604197.validator(path, query, header, formData, body)
  let scheme = call_604197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604197.url(scheme.get, call_604197.host, call_604197.base,
                         call_604197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604197, url, valid)

proc call*(call_604198: Call_PostDescribeDBEngineVersions_604176;
          ListSupportedCharacterSets: bool = false; Engine: string = "";
          Marker: string = ""; Action: string = "DescribeDBEngineVersions";
          DBParameterGroupFamily: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; EngineVersion: string = "";
          ListSupportedTimezones: bool = false; Version: string = "2014-10-31";
          DefaultOnly: bool = false): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Engine: string
  ##         : The database engine to return.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  var query_604199 = newJObject()
  var formData_604200 = newJObject()
  add(formData_604200, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(formData_604200, "Engine", newJString(Engine))
  add(formData_604200, "Marker", newJString(Marker))
  add(query_604199, "Action", newJString(Action))
  add(formData_604200, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_604200.add "Filters", Filters
  add(formData_604200, "MaxRecords", newJInt(MaxRecords))
  add(formData_604200, "EngineVersion", newJString(EngineVersion))
  add(formData_604200, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_604199, "Version", newJString(Version))
  add(formData_604200, "DefaultOnly", newJBool(DefaultOnly))
  result = call_604198.call(nil, query_604199, nil, formData_604200, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_604176(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_604177, base: "/",
    url: url_PostDescribeDBEngineVersions_604178,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_604152 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBEngineVersions_604154(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBEngineVersions_604153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604155 = query.getOrDefault("Engine")
  valid_604155 = validateParameter(valid_604155, JString, required = false,
                                 default = nil)
  if valid_604155 != nil:
    section.add "Engine", valid_604155
  var valid_604156 = query.getOrDefault("ListSupportedCharacterSets")
  valid_604156 = validateParameter(valid_604156, JBool, required = false, default = nil)
  if valid_604156 != nil:
    section.add "ListSupportedCharacterSets", valid_604156
  var valid_604157 = query.getOrDefault("MaxRecords")
  valid_604157 = validateParameter(valid_604157, JInt, required = false, default = nil)
  if valid_604157 != nil:
    section.add "MaxRecords", valid_604157
  var valid_604158 = query.getOrDefault("DBParameterGroupFamily")
  valid_604158 = validateParameter(valid_604158, JString, required = false,
                                 default = nil)
  if valid_604158 != nil:
    section.add "DBParameterGroupFamily", valid_604158
  var valid_604159 = query.getOrDefault("Filters")
  valid_604159 = validateParameter(valid_604159, JArray, required = false,
                                 default = nil)
  if valid_604159 != nil:
    section.add "Filters", valid_604159
  var valid_604160 = query.getOrDefault("ListSupportedTimezones")
  valid_604160 = validateParameter(valid_604160, JBool, required = false, default = nil)
  if valid_604160 != nil:
    section.add "ListSupportedTimezones", valid_604160
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604161 = query.getOrDefault("Action")
  valid_604161 = validateParameter(valid_604161, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_604161 != nil:
    section.add "Action", valid_604161
  var valid_604162 = query.getOrDefault("Marker")
  valid_604162 = validateParameter(valid_604162, JString, required = false,
                                 default = nil)
  if valid_604162 != nil:
    section.add "Marker", valid_604162
  var valid_604163 = query.getOrDefault("EngineVersion")
  valid_604163 = validateParameter(valid_604163, JString, required = false,
                                 default = nil)
  if valid_604163 != nil:
    section.add "EngineVersion", valid_604163
  var valid_604164 = query.getOrDefault("DefaultOnly")
  valid_604164 = validateParameter(valid_604164, JBool, required = false, default = nil)
  if valid_604164 != nil:
    section.add "DefaultOnly", valid_604164
  var valid_604165 = query.getOrDefault("Version")
  valid_604165 = validateParameter(valid_604165, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604165 != nil:
    section.add "Version", valid_604165
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604166 = header.getOrDefault("X-Amz-Date")
  valid_604166 = validateParameter(valid_604166, JString, required = false,
                                 default = nil)
  if valid_604166 != nil:
    section.add "X-Amz-Date", valid_604166
  var valid_604167 = header.getOrDefault("X-Amz-Security-Token")
  valid_604167 = validateParameter(valid_604167, JString, required = false,
                                 default = nil)
  if valid_604167 != nil:
    section.add "X-Amz-Security-Token", valid_604167
  var valid_604168 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604168 = validateParameter(valid_604168, JString, required = false,
                                 default = nil)
  if valid_604168 != nil:
    section.add "X-Amz-Content-Sha256", valid_604168
  var valid_604169 = header.getOrDefault("X-Amz-Algorithm")
  valid_604169 = validateParameter(valid_604169, JString, required = false,
                                 default = nil)
  if valid_604169 != nil:
    section.add "X-Amz-Algorithm", valid_604169
  var valid_604170 = header.getOrDefault("X-Amz-Signature")
  valid_604170 = validateParameter(valid_604170, JString, required = false,
                                 default = nil)
  if valid_604170 != nil:
    section.add "X-Amz-Signature", valid_604170
  var valid_604171 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604171 = validateParameter(valid_604171, JString, required = false,
                                 default = nil)
  if valid_604171 != nil:
    section.add "X-Amz-SignedHeaders", valid_604171
  var valid_604172 = header.getOrDefault("X-Amz-Credential")
  valid_604172 = validateParameter(valid_604172, JString, required = false,
                                 default = nil)
  if valid_604172 != nil:
    section.add "X-Amz-Credential", valid_604172
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604173: Call_GetDescribeDBEngineVersions_604152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_604173.validator(path, query, header, formData, body)
  let scheme = call_604173.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604173.url(scheme.get, call_604173.host, call_604173.base,
                         call_604173.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604173, url, valid)

proc call*(call_604174: Call_GetDescribeDBEngineVersions_604152;
          Engine: string = ""; ListSupportedCharacterSets: bool = false;
          MaxRecords: int = 0; DBParameterGroupFamily: string = "";
          Filters: JsonNode = nil; ListSupportedTimezones: bool = false;
          Action: string = "DescribeDBEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: string (required)
  var query_604175 = newJObject()
  add(query_604175, "Engine", newJString(Engine))
  add(query_604175, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_604175, "MaxRecords", newJInt(MaxRecords))
  add(query_604175, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_604175.add "Filters", Filters
  add(query_604175, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_604175, "Action", newJString(Action))
  add(query_604175, "Marker", newJString(Marker))
  add(query_604175, "EngineVersion", newJString(EngineVersion))
  add(query_604175, "DefaultOnly", newJBool(DefaultOnly))
  add(query_604175, "Version", newJString(Version))
  result = call_604174.call(nil, query_604175, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_604152(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_604153, base: "/",
    url: url_GetDescribeDBEngineVersions_604154,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_604220 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBInstances_604222(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBInstances_604221(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604223 = query.getOrDefault("Action")
  valid_604223 = validateParameter(valid_604223, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_604223 != nil:
    section.add "Action", valid_604223
  var valid_604224 = query.getOrDefault("Version")
  valid_604224 = validateParameter(valid_604224, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604224 != nil:
    section.add "Version", valid_604224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604225 = header.getOrDefault("X-Amz-Date")
  valid_604225 = validateParameter(valid_604225, JString, required = false,
                                 default = nil)
  if valid_604225 != nil:
    section.add "X-Amz-Date", valid_604225
  var valid_604226 = header.getOrDefault("X-Amz-Security-Token")
  valid_604226 = validateParameter(valid_604226, JString, required = false,
                                 default = nil)
  if valid_604226 != nil:
    section.add "X-Amz-Security-Token", valid_604226
  var valid_604227 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604227 = validateParameter(valid_604227, JString, required = false,
                                 default = nil)
  if valid_604227 != nil:
    section.add "X-Amz-Content-Sha256", valid_604227
  var valid_604228 = header.getOrDefault("X-Amz-Algorithm")
  valid_604228 = validateParameter(valid_604228, JString, required = false,
                                 default = nil)
  if valid_604228 != nil:
    section.add "X-Amz-Algorithm", valid_604228
  var valid_604229 = header.getOrDefault("X-Amz-Signature")
  valid_604229 = validateParameter(valid_604229, JString, required = false,
                                 default = nil)
  if valid_604229 != nil:
    section.add "X-Amz-Signature", valid_604229
  var valid_604230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604230 = validateParameter(valid_604230, JString, required = false,
                                 default = nil)
  if valid_604230 != nil:
    section.add "X-Amz-SignedHeaders", valid_604230
  var valid_604231 = header.getOrDefault("X-Amz-Credential")
  valid_604231 = validateParameter(valid_604231, JString, required = false,
                                 default = nil)
  if valid_604231 != nil:
    section.add "X-Amz-Credential", valid_604231
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604232 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604232 = validateParameter(valid_604232, JString, required = false,
                                 default = nil)
  if valid_604232 != nil:
    section.add "DBInstanceIdentifier", valid_604232
  var valid_604233 = formData.getOrDefault("Marker")
  valid_604233 = validateParameter(valid_604233, JString, required = false,
                                 default = nil)
  if valid_604233 != nil:
    section.add "Marker", valid_604233
  var valid_604234 = formData.getOrDefault("Filters")
  valid_604234 = validateParameter(valid_604234, JArray, required = false,
                                 default = nil)
  if valid_604234 != nil:
    section.add "Filters", valid_604234
  var valid_604235 = formData.getOrDefault("MaxRecords")
  valid_604235 = validateParameter(valid_604235, JInt, required = false, default = nil)
  if valid_604235 != nil:
    section.add "MaxRecords", valid_604235
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604236: Call_PostDescribeDBInstances_604220; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_604236.validator(path, query, header, formData, body)
  let scheme = call_604236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604236.url(scheme.get, call_604236.host, call_604236.base,
                         call_604236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604236, url, valid)

proc call*(call_604237: Call_PostDescribeDBInstances_604220;
          DBInstanceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604238 = newJObject()
  var formData_604239 = newJObject()
  add(formData_604239, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_604239, "Marker", newJString(Marker))
  add(query_604238, "Action", newJString(Action))
  if Filters != nil:
    formData_604239.add "Filters", Filters
  add(formData_604239, "MaxRecords", newJInt(MaxRecords))
  add(query_604238, "Version", newJString(Version))
  result = call_604237.call(nil, query_604238, nil, formData_604239, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_604220(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_604221, base: "/",
    url: url_PostDescribeDBInstances_604222, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_604201 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBInstances_604203(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBInstances_604202(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_604204 = query.getOrDefault("MaxRecords")
  valid_604204 = validateParameter(valid_604204, JInt, required = false, default = nil)
  if valid_604204 != nil:
    section.add "MaxRecords", valid_604204
  var valid_604205 = query.getOrDefault("Filters")
  valid_604205 = validateParameter(valid_604205, JArray, required = false,
                                 default = nil)
  if valid_604205 != nil:
    section.add "Filters", valid_604205
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604206 = query.getOrDefault("Action")
  valid_604206 = validateParameter(valid_604206, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_604206 != nil:
    section.add "Action", valid_604206
  var valid_604207 = query.getOrDefault("Marker")
  valid_604207 = validateParameter(valid_604207, JString, required = false,
                                 default = nil)
  if valid_604207 != nil:
    section.add "Marker", valid_604207
  var valid_604208 = query.getOrDefault("Version")
  valid_604208 = validateParameter(valid_604208, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604208 != nil:
    section.add "Version", valid_604208
  var valid_604209 = query.getOrDefault("DBInstanceIdentifier")
  valid_604209 = validateParameter(valid_604209, JString, required = false,
                                 default = nil)
  if valid_604209 != nil:
    section.add "DBInstanceIdentifier", valid_604209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604210 = header.getOrDefault("X-Amz-Date")
  valid_604210 = validateParameter(valid_604210, JString, required = false,
                                 default = nil)
  if valid_604210 != nil:
    section.add "X-Amz-Date", valid_604210
  var valid_604211 = header.getOrDefault("X-Amz-Security-Token")
  valid_604211 = validateParameter(valid_604211, JString, required = false,
                                 default = nil)
  if valid_604211 != nil:
    section.add "X-Amz-Security-Token", valid_604211
  var valid_604212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604212 = validateParameter(valid_604212, JString, required = false,
                                 default = nil)
  if valid_604212 != nil:
    section.add "X-Amz-Content-Sha256", valid_604212
  var valid_604213 = header.getOrDefault("X-Amz-Algorithm")
  valid_604213 = validateParameter(valid_604213, JString, required = false,
                                 default = nil)
  if valid_604213 != nil:
    section.add "X-Amz-Algorithm", valid_604213
  var valid_604214 = header.getOrDefault("X-Amz-Signature")
  valid_604214 = validateParameter(valid_604214, JString, required = false,
                                 default = nil)
  if valid_604214 != nil:
    section.add "X-Amz-Signature", valid_604214
  var valid_604215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604215 = validateParameter(valid_604215, JString, required = false,
                                 default = nil)
  if valid_604215 != nil:
    section.add "X-Amz-SignedHeaders", valid_604215
  var valid_604216 = header.getOrDefault("X-Amz-Credential")
  valid_604216 = validateParameter(valid_604216, JString, required = false,
                                 default = nil)
  if valid_604216 != nil:
    section.add "X-Amz-Credential", valid_604216
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604217: Call_GetDescribeDBInstances_604201; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_604217.validator(path, query, header, formData, body)
  let scheme = call_604217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604217.url(scheme.get, call_604217.host, call_604217.base,
                         call_604217.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604217, url, valid)

proc call*(call_604218: Call_GetDescribeDBInstances_604201; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBInstances";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_604219 = newJObject()
  add(query_604219, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604219.add "Filters", Filters
  add(query_604219, "Action", newJString(Action))
  add(query_604219, "Marker", newJString(Marker))
  add(query_604219, "Version", newJString(Version))
  add(query_604219, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_604218.call(nil, query_604219, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_604201(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_604202, base: "/",
    url: url_GetDescribeDBInstances_604203, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_604259 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBParameterGroups_604261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameterGroups_604260(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604262 = query.getOrDefault("Action")
  valid_604262 = validateParameter(valid_604262, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_604262 != nil:
    section.add "Action", valid_604262
  var valid_604263 = query.getOrDefault("Version")
  valid_604263 = validateParameter(valid_604263, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604263 != nil:
    section.add "Version", valid_604263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604264 = header.getOrDefault("X-Amz-Date")
  valid_604264 = validateParameter(valid_604264, JString, required = false,
                                 default = nil)
  if valid_604264 != nil:
    section.add "X-Amz-Date", valid_604264
  var valid_604265 = header.getOrDefault("X-Amz-Security-Token")
  valid_604265 = validateParameter(valid_604265, JString, required = false,
                                 default = nil)
  if valid_604265 != nil:
    section.add "X-Amz-Security-Token", valid_604265
  var valid_604266 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604266 = validateParameter(valid_604266, JString, required = false,
                                 default = nil)
  if valid_604266 != nil:
    section.add "X-Amz-Content-Sha256", valid_604266
  var valid_604267 = header.getOrDefault("X-Amz-Algorithm")
  valid_604267 = validateParameter(valid_604267, JString, required = false,
                                 default = nil)
  if valid_604267 != nil:
    section.add "X-Amz-Algorithm", valid_604267
  var valid_604268 = header.getOrDefault("X-Amz-Signature")
  valid_604268 = validateParameter(valid_604268, JString, required = false,
                                 default = nil)
  if valid_604268 != nil:
    section.add "X-Amz-Signature", valid_604268
  var valid_604269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604269 = validateParameter(valid_604269, JString, required = false,
                                 default = nil)
  if valid_604269 != nil:
    section.add "X-Amz-SignedHeaders", valid_604269
  var valid_604270 = header.getOrDefault("X-Amz-Credential")
  valid_604270 = validateParameter(valid_604270, JString, required = false,
                                 default = nil)
  if valid_604270 != nil:
    section.add "X-Amz-Credential", valid_604270
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604271 = formData.getOrDefault("DBParameterGroupName")
  valid_604271 = validateParameter(valid_604271, JString, required = false,
                                 default = nil)
  if valid_604271 != nil:
    section.add "DBParameterGroupName", valid_604271
  var valid_604272 = formData.getOrDefault("Marker")
  valid_604272 = validateParameter(valid_604272, JString, required = false,
                                 default = nil)
  if valid_604272 != nil:
    section.add "Marker", valid_604272
  var valid_604273 = formData.getOrDefault("Filters")
  valid_604273 = validateParameter(valid_604273, JArray, required = false,
                                 default = nil)
  if valid_604273 != nil:
    section.add "Filters", valid_604273
  var valid_604274 = formData.getOrDefault("MaxRecords")
  valid_604274 = validateParameter(valid_604274, JInt, required = false, default = nil)
  if valid_604274 != nil:
    section.add "MaxRecords", valid_604274
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604275: Call_PostDescribeDBParameterGroups_604259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_604275.validator(path, query, header, formData, body)
  let scheme = call_604275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604275.url(scheme.get, call_604275.host, call_604275.base,
                         call_604275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604275, url, valid)

proc call*(call_604276: Call_PostDescribeDBParameterGroups_604259;
          DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604277 = newJObject()
  var formData_604278 = newJObject()
  add(formData_604278, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_604278, "Marker", newJString(Marker))
  add(query_604277, "Action", newJString(Action))
  if Filters != nil:
    formData_604278.add "Filters", Filters
  add(formData_604278, "MaxRecords", newJInt(MaxRecords))
  add(query_604277, "Version", newJString(Version))
  result = call_604276.call(nil, query_604277, nil, formData_604278, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_604259(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_604260, base: "/",
    url: url_PostDescribeDBParameterGroups_604261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_604240 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBParameterGroups_604242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameterGroups_604241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604243 = query.getOrDefault("MaxRecords")
  valid_604243 = validateParameter(valid_604243, JInt, required = false, default = nil)
  if valid_604243 != nil:
    section.add "MaxRecords", valid_604243
  var valid_604244 = query.getOrDefault("Filters")
  valid_604244 = validateParameter(valid_604244, JArray, required = false,
                                 default = nil)
  if valid_604244 != nil:
    section.add "Filters", valid_604244
  var valid_604245 = query.getOrDefault("DBParameterGroupName")
  valid_604245 = validateParameter(valid_604245, JString, required = false,
                                 default = nil)
  if valid_604245 != nil:
    section.add "DBParameterGroupName", valid_604245
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604246 = query.getOrDefault("Action")
  valid_604246 = validateParameter(valid_604246, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_604246 != nil:
    section.add "Action", valid_604246
  var valid_604247 = query.getOrDefault("Marker")
  valid_604247 = validateParameter(valid_604247, JString, required = false,
                                 default = nil)
  if valid_604247 != nil:
    section.add "Marker", valid_604247
  var valid_604248 = query.getOrDefault("Version")
  valid_604248 = validateParameter(valid_604248, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604248 != nil:
    section.add "Version", valid_604248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604249 = header.getOrDefault("X-Amz-Date")
  valid_604249 = validateParameter(valid_604249, JString, required = false,
                                 default = nil)
  if valid_604249 != nil:
    section.add "X-Amz-Date", valid_604249
  var valid_604250 = header.getOrDefault("X-Amz-Security-Token")
  valid_604250 = validateParameter(valid_604250, JString, required = false,
                                 default = nil)
  if valid_604250 != nil:
    section.add "X-Amz-Security-Token", valid_604250
  var valid_604251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604251 = validateParameter(valid_604251, JString, required = false,
                                 default = nil)
  if valid_604251 != nil:
    section.add "X-Amz-Content-Sha256", valid_604251
  var valid_604252 = header.getOrDefault("X-Amz-Algorithm")
  valid_604252 = validateParameter(valid_604252, JString, required = false,
                                 default = nil)
  if valid_604252 != nil:
    section.add "X-Amz-Algorithm", valid_604252
  var valid_604253 = header.getOrDefault("X-Amz-Signature")
  valid_604253 = validateParameter(valid_604253, JString, required = false,
                                 default = nil)
  if valid_604253 != nil:
    section.add "X-Amz-Signature", valid_604253
  var valid_604254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604254 = validateParameter(valid_604254, JString, required = false,
                                 default = nil)
  if valid_604254 != nil:
    section.add "X-Amz-SignedHeaders", valid_604254
  var valid_604255 = header.getOrDefault("X-Amz-Credential")
  valid_604255 = validateParameter(valid_604255, JString, required = false,
                                 default = nil)
  if valid_604255 != nil:
    section.add "X-Amz-Credential", valid_604255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604256: Call_GetDescribeDBParameterGroups_604240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_604256.validator(path, query, header, formData, body)
  let scheme = call_604256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604256.url(scheme.get, call_604256.host, call_604256.base,
                         call_604256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604256, url, valid)

proc call*(call_604257: Call_GetDescribeDBParameterGroups_604240;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_604258 = newJObject()
  add(query_604258, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604258.add "Filters", Filters
  add(query_604258, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_604258, "Action", newJString(Action))
  add(query_604258, "Marker", newJString(Marker))
  add(query_604258, "Version", newJString(Version))
  result = call_604257.call(nil, query_604258, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_604240(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_604241, base: "/",
    url: url_GetDescribeDBParameterGroups_604242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_604299 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBParameters_604301(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBParameters_604300(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604302 = query.getOrDefault("Action")
  valid_604302 = validateParameter(valid_604302, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_604302 != nil:
    section.add "Action", valid_604302
  var valid_604303 = query.getOrDefault("Version")
  valid_604303 = validateParameter(valid_604303, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604303 != nil:
    section.add "Version", valid_604303
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604304 = header.getOrDefault("X-Amz-Date")
  valid_604304 = validateParameter(valid_604304, JString, required = false,
                                 default = nil)
  if valid_604304 != nil:
    section.add "X-Amz-Date", valid_604304
  var valid_604305 = header.getOrDefault("X-Amz-Security-Token")
  valid_604305 = validateParameter(valid_604305, JString, required = false,
                                 default = nil)
  if valid_604305 != nil:
    section.add "X-Amz-Security-Token", valid_604305
  var valid_604306 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604306 = validateParameter(valid_604306, JString, required = false,
                                 default = nil)
  if valid_604306 != nil:
    section.add "X-Amz-Content-Sha256", valid_604306
  var valid_604307 = header.getOrDefault("X-Amz-Algorithm")
  valid_604307 = validateParameter(valid_604307, JString, required = false,
                                 default = nil)
  if valid_604307 != nil:
    section.add "X-Amz-Algorithm", valid_604307
  var valid_604308 = header.getOrDefault("X-Amz-Signature")
  valid_604308 = validateParameter(valid_604308, JString, required = false,
                                 default = nil)
  if valid_604308 != nil:
    section.add "X-Amz-Signature", valid_604308
  var valid_604309 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604309 = validateParameter(valid_604309, JString, required = false,
                                 default = nil)
  if valid_604309 != nil:
    section.add "X-Amz-SignedHeaders", valid_604309
  var valid_604310 = header.getOrDefault("X-Amz-Credential")
  valid_604310 = validateParameter(valid_604310, JString, required = false,
                                 default = nil)
  if valid_604310 != nil:
    section.add "X-Amz-Credential", valid_604310
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_604311 = formData.getOrDefault("DBParameterGroupName")
  valid_604311 = validateParameter(valid_604311, JString, required = true,
                                 default = nil)
  if valid_604311 != nil:
    section.add "DBParameterGroupName", valid_604311
  var valid_604312 = formData.getOrDefault("Marker")
  valid_604312 = validateParameter(valid_604312, JString, required = false,
                                 default = nil)
  if valid_604312 != nil:
    section.add "Marker", valid_604312
  var valid_604313 = formData.getOrDefault("Filters")
  valid_604313 = validateParameter(valid_604313, JArray, required = false,
                                 default = nil)
  if valid_604313 != nil:
    section.add "Filters", valid_604313
  var valid_604314 = formData.getOrDefault("MaxRecords")
  valid_604314 = validateParameter(valid_604314, JInt, required = false, default = nil)
  if valid_604314 != nil:
    section.add "MaxRecords", valid_604314
  var valid_604315 = formData.getOrDefault("Source")
  valid_604315 = validateParameter(valid_604315, JString, required = false,
                                 default = nil)
  if valid_604315 != nil:
    section.add "Source", valid_604315
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604316: Call_PostDescribeDBParameters_604299; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_604316.validator(path, query, header, formData, body)
  let scheme = call_604316.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604316.url(scheme.get, call_604316.host, call_604316.base,
                         call_604316.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604316, url, valid)

proc call*(call_604317: Call_PostDescribeDBParameters_604299;
          DBParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  var query_604318 = newJObject()
  var formData_604319 = newJObject()
  add(formData_604319, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_604319, "Marker", newJString(Marker))
  add(query_604318, "Action", newJString(Action))
  if Filters != nil:
    formData_604319.add "Filters", Filters
  add(formData_604319, "MaxRecords", newJInt(MaxRecords))
  add(query_604318, "Version", newJString(Version))
  add(formData_604319, "Source", newJString(Source))
  result = call_604317.call(nil, query_604318, nil, formData_604319, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_604299(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_604300, base: "/",
    url: url_PostDescribeDBParameters_604301, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_604279 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBParameters_604281(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBParameters_604280(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604282 = query.getOrDefault("MaxRecords")
  valid_604282 = validateParameter(valid_604282, JInt, required = false, default = nil)
  if valid_604282 != nil:
    section.add "MaxRecords", valid_604282
  var valid_604283 = query.getOrDefault("Filters")
  valid_604283 = validateParameter(valid_604283, JArray, required = false,
                                 default = nil)
  if valid_604283 != nil:
    section.add "Filters", valid_604283
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_604284 = query.getOrDefault("DBParameterGroupName")
  valid_604284 = validateParameter(valid_604284, JString, required = true,
                                 default = nil)
  if valid_604284 != nil:
    section.add "DBParameterGroupName", valid_604284
  var valid_604285 = query.getOrDefault("Action")
  valid_604285 = validateParameter(valid_604285, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_604285 != nil:
    section.add "Action", valid_604285
  var valid_604286 = query.getOrDefault("Marker")
  valid_604286 = validateParameter(valid_604286, JString, required = false,
                                 default = nil)
  if valid_604286 != nil:
    section.add "Marker", valid_604286
  var valid_604287 = query.getOrDefault("Source")
  valid_604287 = validateParameter(valid_604287, JString, required = false,
                                 default = nil)
  if valid_604287 != nil:
    section.add "Source", valid_604287
  var valid_604288 = query.getOrDefault("Version")
  valid_604288 = validateParameter(valid_604288, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604288 != nil:
    section.add "Version", valid_604288
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604289 = header.getOrDefault("X-Amz-Date")
  valid_604289 = validateParameter(valid_604289, JString, required = false,
                                 default = nil)
  if valid_604289 != nil:
    section.add "X-Amz-Date", valid_604289
  var valid_604290 = header.getOrDefault("X-Amz-Security-Token")
  valid_604290 = validateParameter(valid_604290, JString, required = false,
                                 default = nil)
  if valid_604290 != nil:
    section.add "X-Amz-Security-Token", valid_604290
  var valid_604291 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604291 = validateParameter(valid_604291, JString, required = false,
                                 default = nil)
  if valid_604291 != nil:
    section.add "X-Amz-Content-Sha256", valid_604291
  var valid_604292 = header.getOrDefault("X-Amz-Algorithm")
  valid_604292 = validateParameter(valid_604292, JString, required = false,
                                 default = nil)
  if valid_604292 != nil:
    section.add "X-Amz-Algorithm", valid_604292
  var valid_604293 = header.getOrDefault("X-Amz-Signature")
  valid_604293 = validateParameter(valid_604293, JString, required = false,
                                 default = nil)
  if valid_604293 != nil:
    section.add "X-Amz-Signature", valid_604293
  var valid_604294 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604294 = validateParameter(valid_604294, JString, required = false,
                                 default = nil)
  if valid_604294 != nil:
    section.add "X-Amz-SignedHeaders", valid_604294
  var valid_604295 = header.getOrDefault("X-Amz-Credential")
  valid_604295 = validateParameter(valid_604295, JString, required = false,
                                 default = nil)
  if valid_604295 != nil:
    section.add "X-Amz-Credential", valid_604295
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604296: Call_GetDescribeDBParameters_604279; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_604296.validator(path, query, header, formData, body)
  let scheme = call_604296.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604296.url(scheme.get, call_604296.host, call_604296.base,
                         call_604296.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604296, url, valid)

proc call*(call_604297: Call_GetDescribeDBParameters_604279;
          DBParameterGroupName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: string (required)
  var query_604298 = newJObject()
  add(query_604298, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604298.add "Filters", Filters
  add(query_604298, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_604298, "Action", newJString(Action))
  add(query_604298, "Marker", newJString(Marker))
  add(query_604298, "Source", newJString(Source))
  add(query_604298, "Version", newJString(Version))
  result = call_604297.call(nil, query_604298, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_604279(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_604280, base: "/",
    url: url_GetDescribeDBParameters_604281, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_604339 = ref object of OpenApiRestCall_602450
proc url_PostDescribeDBSubnetGroups_604341(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeDBSubnetGroups_604340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604342 = query.getOrDefault("Action")
  valid_604342 = validateParameter(valid_604342, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_604342 != nil:
    section.add "Action", valid_604342
  var valid_604343 = query.getOrDefault("Version")
  valid_604343 = validateParameter(valid_604343, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604343 != nil:
    section.add "Version", valid_604343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604344 = header.getOrDefault("X-Amz-Date")
  valid_604344 = validateParameter(valid_604344, JString, required = false,
                                 default = nil)
  if valid_604344 != nil:
    section.add "X-Amz-Date", valid_604344
  var valid_604345 = header.getOrDefault("X-Amz-Security-Token")
  valid_604345 = validateParameter(valid_604345, JString, required = false,
                                 default = nil)
  if valid_604345 != nil:
    section.add "X-Amz-Security-Token", valid_604345
  var valid_604346 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604346 = validateParameter(valid_604346, JString, required = false,
                                 default = nil)
  if valid_604346 != nil:
    section.add "X-Amz-Content-Sha256", valid_604346
  var valid_604347 = header.getOrDefault("X-Amz-Algorithm")
  valid_604347 = validateParameter(valid_604347, JString, required = false,
                                 default = nil)
  if valid_604347 != nil:
    section.add "X-Amz-Algorithm", valid_604347
  var valid_604348 = header.getOrDefault("X-Amz-Signature")
  valid_604348 = validateParameter(valid_604348, JString, required = false,
                                 default = nil)
  if valid_604348 != nil:
    section.add "X-Amz-Signature", valid_604348
  var valid_604349 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604349 = validateParameter(valid_604349, JString, required = false,
                                 default = nil)
  if valid_604349 != nil:
    section.add "X-Amz-SignedHeaders", valid_604349
  var valid_604350 = header.getOrDefault("X-Amz-Credential")
  valid_604350 = validateParameter(valid_604350, JString, required = false,
                                 default = nil)
  if valid_604350 != nil:
    section.add "X-Amz-Credential", valid_604350
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604351 = formData.getOrDefault("DBSubnetGroupName")
  valid_604351 = validateParameter(valid_604351, JString, required = false,
                                 default = nil)
  if valid_604351 != nil:
    section.add "DBSubnetGroupName", valid_604351
  var valid_604352 = formData.getOrDefault("Marker")
  valid_604352 = validateParameter(valid_604352, JString, required = false,
                                 default = nil)
  if valid_604352 != nil:
    section.add "Marker", valid_604352
  var valid_604353 = formData.getOrDefault("Filters")
  valid_604353 = validateParameter(valid_604353, JArray, required = false,
                                 default = nil)
  if valid_604353 != nil:
    section.add "Filters", valid_604353
  var valid_604354 = formData.getOrDefault("MaxRecords")
  valid_604354 = validateParameter(valid_604354, JInt, required = false, default = nil)
  if valid_604354 != nil:
    section.add "MaxRecords", valid_604354
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604355: Call_PostDescribeDBSubnetGroups_604339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_604355.validator(path, query, header, formData, body)
  let scheme = call_604355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604355.url(scheme.get, call_604355.host, call_604355.base,
                         call_604355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604355, url, valid)

proc call*(call_604356: Call_PostDescribeDBSubnetGroups_604339;
          DBSubnetGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604357 = newJObject()
  var formData_604358 = newJObject()
  add(formData_604358, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_604358, "Marker", newJString(Marker))
  add(query_604357, "Action", newJString(Action))
  if Filters != nil:
    formData_604358.add "Filters", Filters
  add(formData_604358, "MaxRecords", newJInt(MaxRecords))
  add(query_604357, "Version", newJString(Version))
  result = call_604356.call(nil, query_604357, nil, formData_604358, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_604339(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_604340, base: "/",
    url: url_PostDescribeDBSubnetGroups_604341,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_604320 = ref object of OpenApiRestCall_602450
proc url_GetDescribeDBSubnetGroups_604322(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeDBSubnetGroups_604321(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604323 = query.getOrDefault("MaxRecords")
  valid_604323 = validateParameter(valid_604323, JInt, required = false, default = nil)
  if valid_604323 != nil:
    section.add "MaxRecords", valid_604323
  var valid_604324 = query.getOrDefault("Filters")
  valid_604324 = validateParameter(valid_604324, JArray, required = false,
                                 default = nil)
  if valid_604324 != nil:
    section.add "Filters", valid_604324
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604325 = query.getOrDefault("Action")
  valid_604325 = validateParameter(valid_604325, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_604325 != nil:
    section.add "Action", valid_604325
  var valid_604326 = query.getOrDefault("Marker")
  valid_604326 = validateParameter(valid_604326, JString, required = false,
                                 default = nil)
  if valid_604326 != nil:
    section.add "Marker", valid_604326
  var valid_604327 = query.getOrDefault("DBSubnetGroupName")
  valid_604327 = validateParameter(valid_604327, JString, required = false,
                                 default = nil)
  if valid_604327 != nil:
    section.add "DBSubnetGroupName", valid_604327
  var valid_604328 = query.getOrDefault("Version")
  valid_604328 = validateParameter(valid_604328, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604328 != nil:
    section.add "Version", valid_604328
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604329 = header.getOrDefault("X-Amz-Date")
  valid_604329 = validateParameter(valid_604329, JString, required = false,
                                 default = nil)
  if valid_604329 != nil:
    section.add "X-Amz-Date", valid_604329
  var valid_604330 = header.getOrDefault("X-Amz-Security-Token")
  valid_604330 = validateParameter(valid_604330, JString, required = false,
                                 default = nil)
  if valid_604330 != nil:
    section.add "X-Amz-Security-Token", valid_604330
  var valid_604331 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604331 = validateParameter(valid_604331, JString, required = false,
                                 default = nil)
  if valid_604331 != nil:
    section.add "X-Amz-Content-Sha256", valid_604331
  var valid_604332 = header.getOrDefault("X-Amz-Algorithm")
  valid_604332 = validateParameter(valid_604332, JString, required = false,
                                 default = nil)
  if valid_604332 != nil:
    section.add "X-Amz-Algorithm", valid_604332
  var valid_604333 = header.getOrDefault("X-Amz-Signature")
  valid_604333 = validateParameter(valid_604333, JString, required = false,
                                 default = nil)
  if valid_604333 != nil:
    section.add "X-Amz-Signature", valid_604333
  var valid_604334 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604334 = validateParameter(valid_604334, JString, required = false,
                                 default = nil)
  if valid_604334 != nil:
    section.add "X-Amz-SignedHeaders", valid_604334
  var valid_604335 = header.getOrDefault("X-Amz-Credential")
  valid_604335 = validateParameter(valid_604335, JString, required = false,
                                 default = nil)
  if valid_604335 != nil:
    section.add "X-Amz-Credential", valid_604335
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604336: Call_GetDescribeDBSubnetGroups_604320; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_604336.validator(path, query, header, formData, body)
  let scheme = call_604336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604336.url(scheme.get, call_604336.host, call_604336.base,
                         call_604336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604336, url, valid)

proc call*(call_604337: Call_GetDescribeDBSubnetGroups_604320; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBSubnetGroups";
          Marker: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  var query_604338 = newJObject()
  add(query_604338, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604338.add "Filters", Filters
  add(query_604338, "Action", newJString(Action))
  add(query_604338, "Marker", newJString(Marker))
  add(query_604338, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_604338, "Version", newJString(Version))
  result = call_604337.call(nil, query_604338, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_604320(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_604321, base: "/",
    url: url_GetDescribeDBSubnetGroups_604322,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_604378 = ref object of OpenApiRestCall_602450
proc url_PostDescribeEngineDefaultClusterParameters_604380(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_604379(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604381 = query.getOrDefault("Action")
  valid_604381 = validateParameter(valid_604381, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_604381 != nil:
    section.add "Action", valid_604381
  var valid_604382 = query.getOrDefault("Version")
  valid_604382 = validateParameter(valid_604382, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604382 != nil:
    section.add "Version", valid_604382
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604383 = header.getOrDefault("X-Amz-Date")
  valid_604383 = validateParameter(valid_604383, JString, required = false,
                                 default = nil)
  if valid_604383 != nil:
    section.add "X-Amz-Date", valid_604383
  var valid_604384 = header.getOrDefault("X-Amz-Security-Token")
  valid_604384 = validateParameter(valid_604384, JString, required = false,
                                 default = nil)
  if valid_604384 != nil:
    section.add "X-Amz-Security-Token", valid_604384
  var valid_604385 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604385 = validateParameter(valid_604385, JString, required = false,
                                 default = nil)
  if valid_604385 != nil:
    section.add "X-Amz-Content-Sha256", valid_604385
  var valid_604386 = header.getOrDefault("X-Amz-Algorithm")
  valid_604386 = validateParameter(valid_604386, JString, required = false,
                                 default = nil)
  if valid_604386 != nil:
    section.add "X-Amz-Algorithm", valid_604386
  var valid_604387 = header.getOrDefault("X-Amz-Signature")
  valid_604387 = validateParameter(valid_604387, JString, required = false,
                                 default = nil)
  if valid_604387 != nil:
    section.add "X-Amz-Signature", valid_604387
  var valid_604388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604388 = validateParameter(valid_604388, JString, required = false,
                                 default = nil)
  if valid_604388 != nil:
    section.add "X-Amz-SignedHeaders", valid_604388
  var valid_604389 = header.getOrDefault("X-Amz-Credential")
  valid_604389 = validateParameter(valid_604389, JString, required = false,
                                 default = nil)
  if valid_604389 != nil:
    section.add "X-Amz-Credential", valid_604389
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604390 = formData.getOrDefault("Marker")
  valid_604390 = validateParameter(valid_604390, JString, required = false,
                                 default = nil)
  if valid_604390 != nil:
    section.add "Marker", valid_604390
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604391 = formData.getOrDefault("DBParameterGroupFamily")
  valid_604391 = validateParameter(valid_604391, JString, required = true,
                                 default = nil)
  if valid_604391 != nil:
    section.add "DBParameterGroupFamily", valid_604391
  var valid_604392 = formData.getOrDefault("Filters")
  valid_604392 = validateParameter(valid_604392, JArray, required = false,
                                 default = nil)
  if valid_604392 != nil:
    section.add "Filters", valid_604392
  var valid_604393 = formData.getOrDefault("MaxRecords")
  valid_604393 = validateParameter(valid_604393, JInt, required = false, default = nil)
  if valid_604393 != nil:
    section.add "MaxRecords", valid_604393
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604394: Call_PostDescribeEngineDefaultClusterParameters_604378;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_604394.validator(path, query, header, formData, body)
  let scheme = call_604394.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604394.url(scheme.get, call_604394.host, call_604394.base,
                         call_604394.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604394, url, valid)

proc call*(call_604395: Call_PostDescribeEngineDefaultClusterParameters_604378;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604396 = newJObject()
  var formData_604397 = newJObject()
  add(formData_604397, "Marker", newJString(Marker))
  add(query_604396, "Action", newJString(Action))
  add(formData_604397, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_604397.add "Filters", Filters
  add(formData_604397, "MaxRecords", newJInt(MaxRecords))
  add(query_604396, "Version", newJString(Version))
  result = call_604395.call(nil, query_604396, nil, formData_604397, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_604378(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_604379,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_604380,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_604359 = ref object of OpenApiRestCall_602450
proc url_GetDescribeEngineDefaultClusterParameters_604361(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_604360(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604362 = query.getOrDefault("MaxRecords")
  valid_604362 = validateParameter(valid_604362, JInt, required = false, default = nil)
  if valid_604362 != nil:
    section.add "MaxRecords", valid_604362
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604363 = query.getOrDefault("DBParameterGroupFamily")
  valid_604363 = validateParameter(valid_604363, JString, required = true,
                                 default = nil)
  if valid_604363 != nil:
    section.add "DBParameterGroupFamily", valid_604363
  var valid_604364 = query.getOrDefault("Filters")
  valid_604364 = validateParameter(valid_604364, JArray, required = false,
                                 default = nil)
  if valid_604364 != nil:
    section.add "Filters", valid_604364
  var valid_604365 = query.getOrDefault("Action")
  valid_604365 = validateParameter(valid_604365, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_604365 != nil:
    section.add "Action", valid_604365
  var valid_604366 = query.getOrDefault("Marker")
  valid_604366 = validateParameter(valid_604366, JString, required = false,
                                 default = nil)
  if valid_604366 != nil:
    section.add "Marker", valid_604366
  var valid_604367 = query.getOrDefault("Version")
  valid_604367 = validateParameter(valid_604367, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604367 != nil:
    section.add "Version", valid_604367
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604368 = header.getOrDefault("X-Amz-Date")
  valid_604368 = validateParameter(valid_604368, JString, required = false,
                                 default = nil)
  if valid_604368 != nil:
    section.add "X-Amz-Date", valid_604368
  var valid_604369 = header.getOrDefault("X-Amz-Security-Token")
  valid_604369 = validateParameter(valid_604369, JString, required = false,
                                 default = nil)
  if valid_604369 != nil:
    section.add "X-Amz-Security-Token", valid_604369
  var valid_604370 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604370 = validateParameter(valid_604370, JString, required = false,
                                 default = nil)
  if valid_604370 != nil:
    section.add "X-Amz-Content-Sha256", valid_604370
  var valid_604371 = header.getOrDefault("X-Amz-Algorithm")
  valid_604371 = validateParameter(valid_604371, JString, required = false,
                                 default = nil)
  if valid_604371 != nil:
    section.add "X-Amz-Algorithm", valid_604371
  var valid_604372 = header.getOrDefault("X-Amz-Signature")
  valid_604372 = validateParameter(valid_604372, JString, required = false,
                                 default = nil)
  if valid_604372 != nil:
    section.add "X-Amz-Signature", valid_604372
  var valid_604373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604373 = validateParameter(valid_604373, JString, required = false,
                                 default = nil)
  if valid_604373 != nil:
    section.add "X-Amz-SignedHeaders", valid_604373
  var valid_604374 = header.getOrDefault("X-Amz-Credential")
  valid_604374 = validateParameter(valid_604374, JString, required = false,
                                 default = nil)
  if valid_604374 != nil:
    section.add "X-Amz-Credential", valid_604374
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604375: Call_GetDescribeEngineDefaultClusterParameters_604359;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_604375.validator(path, query, header, formData, body)
  let scheme = call_604375.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604375.url(scheme.get, call_604375.host, call_604375.base,
                         call_604375.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604375, url, valid)

proc call*(call_604376: Call_GetDescribeEngineDefaultClusterParameters_604359;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultClusterParameters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_604377 = newJObject()
  add(query_604377, "MaxRecords", newJInt(MaxRecords))
  add(query_604377, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_604377.add "Filters", Filters
  add(query_604377, "Action", newJString(Action))
  add(query_604377, "Marker", newJString(Marker))
  add(query_604377, "Version", newJString(Version))
  result = call_604376.call(nil, query_604377, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_604359(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_604360,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_604361,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_604417 = ref object of OpenApiRestCall_602450
proc url_PostDescribeEngineDefaultParameters_604419(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_604418(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604420 = query.getOrDefault("Action")
  valid_604420 = validateParameter(valid_604420, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_604420 != nil:
    section.add "Action", valid_604420
  var valid_604421 = query.getOrDefault("Version")
  valid_604421 = validateParameter(valid_604421, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604421 != nil:
    section.add "Version", valid_604421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604422 = header.getOrDefault("X-Amz-Date")
  valid_604422 = validateParameter(valid_604422, JString, required = false,
                                 default = nil)
  if valid_604422 != nil:
    section.add "X-Amz-Date", valid_604422
  var valid_604423 = header.getOrDefault("X-Amz-Security-Token")
  valid_604423 = validateParameter(valid_604423, JString, required = false,
                                 default = nil)
  if valid_604423 != nil:
    section.add "X-Amz-Security-Token", valid_604423
  var valid_604424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604424 = validateParameter(valid_604424, JString, required = false,
                                 default = nil)
  if valid_604424 != nil:
    section.add "X-Amz-Content-Sha256", valid_604424
  var valid_604425 = header.getOrDefault("X-Amz-Algorithm")
  valid_604425 = validateParameter(valid_604425, JString, required = false,
                                 default = nil)
  if valid_604425 != nil:
    section.add "X-Amz-Algorithm", valid_604425
  var valid_604426 = header.getOrDefault("X-Amz-Signature")
  valid_604426 = validateParameter(valid_604426, JString, required = false,
                                 default = nil)
  if valid_604426 != nil:
    section.add "X-Amz-Signature", valid_604426
  var valid_604427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604427 = validateParameter(valid_604427, JString, required = false,
                                 default = nil)
  if valid_604427 != nil:
    section.add "X-Amz-SignedHeaders", valid_604427
  var valid_604428 = header.getOrDefault("X-Amz-Credential")
  valid_604428 = validateParameter(valid_604428, JString, required = false,
                                 default = nil)
  if valid_604428 != nil:
    section.add "X-Amz-Credential", valid_604428
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604429 = formData.getOrDefault("Marker")
  valid_604429 = validateParameter(valid_604429, JString, required = false,
                                 default = nil)
  if valid_604429 != nil:
    section.add "Marker", valid_604429
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604430 = formData.getOrDefault("DBParameterGroupFamily")
  valid_604430 = validateParameter(valid_604430, JString, required = true,
                                 default = nil)
  if valid_604430 != nil:
    section.add "DBParameterGroupFamily", valid_604430
  var valid_604431 = formData.getOrDefault("Filters")
  valid_604431 = validateParameter(valid_604431, JArray, required = false,
                                 default = nil)
  if valid_604431 != nil:
    section.add "Filters", valid_604431
  var valid_604432 = formData.getOrDefault("MaxRecords")
  valid_604432 = validateParameter(valid_604432, JInt, required = false, default = nil)
  if valid_604432 != nil:
    section.add "MaxRecords", valid_604432
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604433: Call_PostDescribeEngineDefaultParameters_604417;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_604433.validator(path, query, header, formData, body)
  let scheme = call_604433.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604433.url(scheme.get, call_604433.host, call_604433.base,
                         call_604433.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604433, url, valid)

proc call*(call_604434: Call_PostDescribeEngineDefaultParameters_604417;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604435 = newJObject()
  var formData_604436 = newJObject()
  add(formData_604436, "Marker", newJString(Marker))
  add(query_604435, "Action", newJString(Action))
  add(formData_604436, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_604436.add "Filters", Filters
  add(formData_604436, "MaxRecords", newJInt(MaxRecords))
  add(query_604435, "Version", newJString(Version))
  result = call_604434.call(nil, query_604435, nil, formData_604436, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_604417(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_604418, base: "/",
    url: url_PostDescribeEngineDefaultParameters_604419,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_604398 = ref object of OpenApiRestCall_602450
proc url_GetDescribeEngineDefaultParameters_604400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_604399(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604401 = query.getOrDefault("MaxRecords")
  valid_604401 = validateParameter(valid_604401, JInt, required = false, default = nil)
  if valid_604401 != nil:
    section.add "MaxRecords", valid_604401
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_604402 = query.getOrDefault("DBParameterGroupFamily")
  valid_604402 = validateParameter(valid_604402, JString, required = true,
                                 default = nil)
  if valid_604402 != nil:
    section.add "DBParameterGroupFamily", valid_604402
  var valid_604403 = query.getOrDefault("Filters")
  valid_604403 = validateParameter(valid_604403, JArray, required = false,
                                 default = nil)
  if valid_604403 != nil:
    section.add "Filters", valid_604403
  var valid_604404 = query.getOrDefault("Action")
  valid_604404 = validateParameter(valid_604404, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_604404 != nil:
    section.add "Action", valid_604404
  var valid_604405 = query.getOrDefault("Marker")
  valid_604405 = validateParameter(valid_604405, JString, required = false,
                                 default = nil)
  if valid_604405 != nil:
    section.add "Marker", valid_604405
  var valid_604406 = query.getOrDefault("Version")
  valid_604406 = validateParameter(valid_604406, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604406 != nil:
    section.add "Version", valid_604406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604407 = header.getOrDefault("X-Amz-Date")
  valid_604407 = validateParameter(valid_604407, JString, required = false,
                                 default = nil)
  if valid_604407 != nil:
    section.add "X-Amz-Date", valid_604407
  var valid_604408 = header.getOrDefault("X-Amz-Security-Token")
  valid_604408 = validateParameter(valid_604408, JString, required = false,
                                 default = nil)
  if valid_604408 != nil:
    section.add "X-Amz-Security-Token", valid_604408
  var valid_604409 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604409 = validateParameter(valid_604409, JString, required = false,
                                 default = nil)
  if valid_604409 != nil:
    section.add "X-Amz-Content-Sha256", valid_604409
  var valid_604410 = header.getOrDefault("X-Amz-Algorithm")
  valid_604410 = validateParameter(valid_604410, JString, required = false,
                                 default = nil)
  if valid_604410 != nil:
    section.add "X-Amz-Algorithm", valid_604410
  var valid_604411 = header.getOrDefault("X-Amz-Signature")
  valid_604411 = validateParameter(valid_604411, JString, required = false,
                                 default = nil)
  if valid_604411 != nil:
    section.add "X-Amz-Signature", valid_604411
  var valid_604412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604412 = validateParameter(valid_604412, JString, required = false,
                                 default = nil)
  if valid_604412 != nil:
    section.add "X-Amz-SignedHeaders", valid_604412
  var valid_604413 = header.getOrDefault("X-Amz-Credential")
  valid_604413 = validateParameter(valid_604413, JString, required = false,
                                 default = nil)
  if valid_604413 != nil:
    section.add "X-Amz-Credential", valid_604413
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604414: Call_GetDescribeEngineDefaultParameters_604398;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_604414.validator(path, query, header, formData, body)
  let scheme = call_604414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604414.url(scheme.get, call_604414.host, call_604414.base,
                         call_604414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604414, url, valid)

proc call*(call_604415: Call_GetDescribeEngineDefaultParameters_604398;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_604416 = newJObject()
  add(query_604416, "MaxRecords", newJInt(MaxRecords))
  add(query_604416, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_604416.add "Filters", Filters
  add(query_604416, "Action", newJString(Action))
  add(query_604416, "Marker", newJString(Marker))
  add(query_604416, "Version", newJString(Version))
  result = call_604415.call(nil, query_604416, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_604398(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_604399, base: "/",
    url: url_GetDescribeEngineDefaultParameters_604400,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_604454 = ref object of OpenApiRestCall_602450
proc url_PostDescribeEventCategories_604456(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventCategories_604455(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604457 = query.getOrDefault("Action")
  valid_604457 = validateParameter(valid_604457, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_604457 != nil:
    section.add "Action", valid_604457
  var valid_604458 = query.getOrDefault("Version")
  valid_604458 = validateParameter(valid_604458, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604458 != nil:
    section.add "Version", valid_604458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604459 = header.getOrDefault("X-Amz-Date")
  valid_604459 = validateParameter(valid_604459, JString, required = false,
                                 default = nil)
  if valid_604459 != nil:
    section.add "X-Amz-Date", valid_604459
  var valid_604460 = header.getOrDefault("X-Amz-Security-Token")
  valid_604460 = validateParameter(valid_604460, JString, required = false,
                                 default = nil)
  if valid_604460 != nil:
    section.add "X-Amz-Security-Token", valid_604460
  var valid_604461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604461 = validateParameter(valid_604461, JString, required = false,
                                 default = nil)
  if valid_604461 != nil:
    section.add "X-Amz-Content-Sha256", valid_604461
  var valid_604462 = header.getOrDefault("X-Amz-Algorithm")
  valid_604462 = validateParameter(valid_604462, JString, required = false,
                                 default = nil)
  if valid_604462 != nil:
    section.add "X-Amz-Algorithm", valid_604462
  var valid_604463 = header.getOrDefault("X-Amz-Signature")
  valid_604463 = validateParameter(valid_604463, JString, required = false,
                                 default = nil)
  if valid_604463 != nil:
    section.add "X-Amz-Signature", valid_604463
  var valid_604464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604464 = validateParameter(valid_604464, JString, required = false,
                                 default = nil)
  if valid_604464 != nil:
    section.add "X-Amz-SignedHeaders", valid_604464
  var valid_604465 = header.getOrDefault("X-Amz-Credential")
  valid_604465 = validateParameter(valid_604465, JString, required = false,
                                 default = nil)
  if valid_604465 != nil:
    section.add "X-Amz-Credential", valid_604465
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_604466 = formData.getOrDefault("Filters")
  valid_604466 = validateParameter(valid_604466, JArray, required = false,
                                 default = nil)
  if valid_604466 != nil:
    section.add "Filters", valid_604466
  var valid_604467 = formData.getOrDefault("SourceType")
  valid_604467 = validateParameter(valid_604467, JString, required = false,
                                 default = nil)
  if valid_604467 != nil:
    section.add "SourceType", valid_604467
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604468: Call_PostDescribeEventCategories_604454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_604468.validator(path, query, header, formData, body)
  let scheme = call_604468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604468.url(scheme.get, call_604468.host, call_604468.base,
                         call_604468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604468, url, valid)

proc call*(call_604469: Call_PostDescribeEventCategories_604454;
          Action: string = "DescribeEventCategories"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_604470 = newJObject()
  var formData_604471 = newJObject()
  add(query_604470, "Action", newJString(Action))
  if Filters != nil:
    formData_604471.add "Filters", Filters
  add(query_604470, "Version", newJString(Version))
  add(formData_604471, "SourceType", newJString(SourceType))
  result = call_604469.call(nil, query_604470, nil, formData_604471, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_604454(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_604455, base: "/",
    url: url_PostDescribeEventCategories_604456,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_604437 = ref object of OpenApiRestCall_602450
proc url_GetDescribeEventCategories_604439(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventCategories_604438(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604440 = query.getOrDefault("SourceType")
  valid_604440 = validateParameter(valid_604440, JString, required = false,
                                 default = nil)
  if valid_604440 != nil:
    section.add "SourceType", valid_604440
  var valid_604441 = query.getOrDefault("Filters")
  valid_604441 = validateParameter(valid_604441, JArray, required = false,
                                 default = nil)
  if valid_604441 != nil:
    section.add "Filters", valid_604441
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604442 = query.getOrDefault("Action")
  valid_604442 = validateParameter(valid_604442, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_604442 != nil:
    section.add "Action", valid_604442
  var valid_604443 = query.getOrDefault("Version")
  valid_604443 = validateParameter(valid_604443, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604443 != nil:
    section.add "Version", valid_604443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604444 = header.getOrDefault("X-Amz-Date")
  valid_604444 = validateParameter(valid_604444, JString, required = false,
                                 default = nil)
  if valid_604444 != nil:
    section.add "X-Amz-Date", valid_604444
  var valid_604445 = header.getOrDefault("X-Amz-Security-Token")
  valid_604445 = validateParameter(valid_604445, JString, required = false,
                                 default = nil)
  if valid_604445 != nil:
    section.add "X-Amz-Security-Token", valid_604445
  var valid_604446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604446 = validateParameter(valid_604446, JString, required = false,
                                 default = nil)
  if valid_604446 != nil:
    section.add "X-Amz-Content-Sha256", valid_604446
  var valid_604447 = header.getOrDefault("X-Amz-Algorithm")
  valid_604447 = validateParameter(valid_604447, JString, required = false,
                                 default = nil)
  if valid_604447 != nil:
    section.add "X-Amz-Algorithm", valid_604447
  var valid_604448 = header.getOrDefault("X-Amz-Signature")
  valid_604448 = validateParameter(valid_604448, JString, required = false,
                                 default = nil)
  if valid_604448 != nil:
    section.add "X-Amz-Signature", valid_604448
  var valid_604449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604449 = validateParameter(valid_604449, JString, required = false,
                                 default = nil)
  if valid_604449 != nil:
    section.add "X-Amz-SignedHeaders", valid_604449
  var valid_604450 = header.getOrDefault("X-Amz-Credential")
  valid_604450 = validateParameter(valid_604450, JString, required = false,
                                 default = nil)
  if valid_604450 != nil:
    section.add "X-Amz-Credential", valid_604450
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604451: Call_GetDescribeEventCategories_604437; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_604451.validator(path, query, header, formData, body)
  let scheme = call_604451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604451.url(scheme.get, call_604451.host, call_604451.base,
                         call_604451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604451, url, valid)

proc call*(call_604452: Call_GetDescribeEventCategories_604437;
          SourceType: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEventCategories"; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604453 = newJObject()
  add(query_604453, "SourceType", newJString(SourceType))
  if Filters != nil:
    query_604453.add "Filters", Filters
  add(query_604453, "Action", newJString(Action))
  add(query_604453, "Version", newJString(Version))
  result = call_604452.call(nil, query_604453, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_604437(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_604438, base: "/",
    url: url_GetDescribeEventCategories_604439,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_604491 = ref object of OpenApiRestCall_602450
proc url_PostDescribeEventSubscriptions_604493(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEventSubscriptions_604492(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604494 = query.getOrDefault("Action")
  valid_604494 = validateParameter(valid_604494, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_604494 != nil:
    section.add "Action", valid_604494
  var valid_604495 = query.getOrDefault("Version")
  valid_604495 = validateParameter(valid_604495, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604495 != nil:
    section.add "Version", valid_604495
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604496 = header.getOrDefault("X-Amz-Date")
  valid_604496 = validateParameter(valid_604496, JString, required = false,
                                 default = nil)
  if valid_604496 != nil:
    section.add "X-Amz-Date", valid_604496
  var valid_604497 = header.getOrDefault("X-Amz-Security-Token")
  valid_604497 = validateParameter(valid_604497, JString, required = false,
                                 default = nil)
  if valid_604497 != nil:
    section.add "X-Amz-Security-Token", valid_604497
  var valid_604498 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604498 = validateParameter(valid_604498, JString, required = false,
                                 default = nil)
  if valid_604498 != nil:
    section.add "X-Amz-Content-Sha256", valid_604498
  var valid_604499 = header.getOrDefault("X-Amz-Algorithm")
  valid_604499 = validateParameter(valid_604499, JString, required = false,
                                 default = nil)
  if valid_604499 != nil:
    section.add "X-Amz-Algorithm", valid_604499
  var valid_604500 = header.getOrDefault("X-Amz-Signature")
  valid_604500 = validateParameter(valid_604500, JString, required = false,
                                 default = nil)
  if valid_604500 != nil:
    section.add "X-Amz-Signature", valid_604500
  var valid_604501 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604501 = validateParameter(valid_604501, JString, required = false,
                                 default = nil)
  if valid_604501 != nil:
    section.add "X-Amz-SignedHeaders", valid_604501
  var valid_604502 = header.getOrDefault("X-Amz-Credential")
  valid_604502 = validateParameter(valid_604502, JString, required = false,
                                 default = nil)
  if valid_604502 != nil:
    section.add "X-Amz-Credential", valid_604502
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604503 = formData.getOrDefault("Marker")
  valid_604503 = validateParameter(valid_604503, JString, required = false,
                                 default = nil)
  if valid_604503 != nil:
    section.add "Marker", valid_604503
  var valid_604504 = formData.getOrDefault("SubscriptionName")
  valid_604504 = validateParameter(valid_604504, JString, required = false,
                                 default = nil)
  if valid_604504 != nil:
    section.add "SubscriptionName", valid_604504
  var valid_604505 = formData.getOrDefault("Filters")
  valid_604505 = validateParameter(valid_604505, JArray, required = false,
                                 default = nil)
  if valid_604505 != nil:
    section.add "Filters", valid_604505
  var valid_604506 = formData.getOrDefault("MaxRecords")
  valid_604506 = validateParameter(valid_604506, JInt, required = false, default = nil)
  if valid_604506 != nil:
    section.add "MaxRecords", valid_604506
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604507: Call_PostDescribeEventSubscriptions_604491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_604507.validator(path, query, header, formData, body)
  let scheme = call_604507.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604507.url(scheme.get, call_604507.host, call_604507.base,
                         call_604507.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604507, url, valid)

proc call*(call_604508: Call_PostDescribeEventSubscriptions_604491;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604509 = newJObject()
  var formData_604510 = newJObject()
  add(formData_604510, "Marker", newJString(Marker))
  add(formData_604510, "SubscriptionName", newJString(SubscriptionName))
  add(query_604509, "Action", newJString(Action))
  if Filters != nil:
    formData_604510.add "Filters", Filters
  add(formData_604510, "MaxRecords", newJInt(MaxRecords))
  add(query_604509, "Version", newJString(Version))
  result = call_604508.call(nil, query_604509, nil, formData_604510, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_604491(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_604492, base: "/",
    url: url_PostDescribeEventSubscriptions_604493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_604472 = ref object of OpenApiRestCall_602450
proc url_GetDescribeEventSubscriptions_604474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEventSubscriptions_604473(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604475 = query.getOrDefault("MaxRecords")
  valid_604475 = validateParameter(valid_604475, JInt, required = false, default = nil)
  if valid_604475 != nil:
    section.add "MaxRecords", valid_604475
  var valid_604476 = query.getOrDefault("Filters")
  valid_604476 = validateParameter(valid_604476, JArray, required = false,
                                 default = nil)
  if valid_604476 != nil:
    section.add "Filters", valid_604476
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604477 = query.getOrDefault("Action")
  valid_604477 = validateParameter(valid_604477, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_604477 != nil:
    section.add "Action", valid_604477
  var valid_604478 = query.getOrDefault("Marker")
  valid_604478 = validateParameter(valid_604478, JString, required = false,
                                 default = nil)
  if valid_604478 != nil:
    section.add "Marker", valid_604478
  var valid_604479 = query.getOrDefault("SubscriptionName")
  valid_604479 = validateParameter(valid_604479, JString, required = false,
                                 default = nil)
  if valid_604479 != nil:
    section.add "SubscriptionName", valid_604479
  var valid_604480 = query.getOrDefault("Version")
  valid_604480 = validateParameter(valid_604480, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604480 != nil:
    section.add "Version", valid_604480
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604481 = header.getOrDefault("X-Amz-Date")
  valid_604481 = validateParameter(valid_604481, JString, required = false,
                                 default = nil)
  if valid_604481 != nil:
    section.add "X-Amz-Date", valid_604481
  var valid_604482 = header.getOrDefault("X-Amz-Security-Token")
  valid_604482 = validateParameter(valid_604482, JString, required = false,
                                 default = nil)
  if valid_604482 != nil:
    section.add "X-Amz-Security-Token", valid_604482
  var valid_604483 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604483 = validateParameter(valid_604483, JString, required = false,
                                 default = nil)
  if valid_604483 != nil:
    section.add "X-Amz-Content-Sha256", valid_604483
  var valid_604484 = header.getOrDefault("X-Amz-Algorithm")
  valid_604484 = validateParameter(valid_604484, JString, required = false,
                                 default = nil)
  if valid_604484 != nil:
    section.add "X-Amz-Algorithm", valid_604484
  var valid_604485 = header.getOrDefault("X-Amz-Signature")
  valid_604485 = validateParameter(valid_604485, JString, required = false,
                                 default = nil)
  if valid_604485 != nil:
    section.add "X-Amz-Signature", valid_604485
  var valid_604486 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604486 = validateParameter(valid_604486, JString, required = false,
                                 default = nil)
  if valid_604486 != nil:
    section.add "X-Amz-SignedHeaders", valid_604486
  var valid_604487 = header.getOrDefault("X-Amz-Credential")
  valid_604487 = validateParameter(valid_604487, JString, required = false,
                                 default = nil)
  if valid_604487 != nil:
    section.add "X-Amz-Credential", valid_604487
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604488: Call_GetDescribeEventSubscriptions_604472; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_604488.validator(path, query, header, formData, body)
  let scheme = call_604488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604488.url(scheme.get, call_604488.host, call_604488.base,
                         call_604488.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604488, url, valid)

proc call*(call_604489: Call_GetDescribeEventSubscriptions_604472;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Version: string (required)
  var query_604490 = newJObject()
  add(query_604490, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604490.add "Filters", Filters
  add(query_604490, "Action", newJString(Action))
  add(query_604490, "Marker", newJString(Marker))
  add(query_604490, "SubscriptionName", newJString(SubscriptionName))
  add(query_604490, "Version", newJString(Version))
  result = call_604489.call(nil, query_604490, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_604472(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_604473, base: "/",
    url: url_GetDescribeEventSubscriptions_604474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_604535 = ref object of OpenApiRestCall_602450
proc url_PostDescribeEvents_604537(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeEvents_604536(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604538 = query.getOrDefault("Action")
  valid_604538 = validateParameter(valid_604538, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_604538 != nil:
    section.add "Action", valid_604538
  var valid_604539 = query.getOrDefault("Version")
  valid_604539 = validateParameter(valid_604539, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604539 != nil:
    section.add "Version", valid_604539
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604540 = header.getOrDefault("X-Amz-Date")
  valid_604540 = validateParameter(valid_604540, JString, required = false,
                                 default = nil)
  if valid_604540 != nil:
    section.add "X-Amz-Date", valid_604540
  var valid_604541 = header.getOrDefault("X-Amz-Security-Token")
  valid_604541 = validateParameter(valid_604541, JString, required = false,
                                 default = nil)
  if valid_604541 != nil:
    section.add "X-Amz-Security-Token", valid_604541
  var valid_604542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604542 = validateParameter(valid_604542, JString, required = false,
                                 default = nil)
  if valid_604542 != nil:
    section.add "X-Amz-Content-Sha256", valid_604542
  var valid_604543 = header.getOrDefault("X-Amz-Algorithm")
  valid_604543 = validateParameter(valid_604543, JString, required = false,
                                 default = nil)
  if valid_604543 != nil:
    section.add "X-Amz-Algorithm", valid_604543
  var valid_604544 = header.getOrDefault("X-Amz-Signature")
  valid_604544 = validateParameter(valid_604544, JString, required = false,
                                 default = nil)
  if valid_604544 != nil:
    section.add "X-Amz-Signature", valid_604544
  var valid_604545 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604545 = validateParameter(valid_604545, JString, required = false,
                                 default = nil)
  if valid_604545 != nil:
    section.add "X-Amz-SignedHeaders", valid_604545
  var valid_604546 = header.getOrDefault("X-Amz-Credential")
  valid_604546 = validateParameter(valid_604546, JString, required = false,
                                 default = nil)
  if valid_604546 != nil:
    section.add "X-Amz-Credential", valid_604546
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_604547 = formData.getOrDefault("SourceIdentifier")
  valid_604547 = validateParameter(valid_604547, JString, required = false,
                                 default = nil)
  if valid_604547 != nil:
    section.add "SourceIdentifier", valid_604547
  var valid_604548 = formData.getOrDefault("EventCategories")
  valid_604548 = validateParameter(valid_604548, JArray, required = false,
                                 default = nil)
  if valid_604548 != nil:
    section.add "EventCategories", valid_604548
  var valid_604549 = formData.getOrDefault("Marker")
  valid_604549 = validateParameter(valid_604549, JString, required = false,
                                 default = nil)
  if valid_604549 != nil:
    section.add "Marker", valid_604549
  var valid_604550 = formData.getOrDefault("StartTime")
  valid_604550 = validateParameter(valid_604550, JString, required = false,
                                 default = nil)
  if valid_604550 != nil:
    section.add "StartTime", valid_604550
  var valid_604551 = formData.getOrDefault("Duration")
  valid_604551 = validateParameter(valid_604551, JInt, required = false, default = nil)
  if valid_604551 != nil:
    section.add "Duration", valid_604551
  var valid_604552 = formData.getOrDefault("Filters")
  valid_604552 = validateParameter(valid_604552, JArray, required = false,
                                 default = nil)
  if valid_604552 != nil:
    section.add "Filters", valid_604552
  var valid_604553 = formData.getOrDefault("EndTime")
  valid_604553 = validateParameter(valid_604553, JString, required = false,
                                 default = nil)
  if valid_604553 != nil:
    section.add "EndTime", valid_604553
  var valid_604554 = formData.getOrDefault("MaxRecords")
  valid_604554 = validateParameter(valid_604554, JInt, required = false, default = nil)
  if valid_604554 != nil:
    section.add "MaxRecords", valid_604554
  var valid_604555 = formData.getOrDefault("SourceType")
  valid_604555 = validateParameter(valid_604555, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_604555 != nil:
    section.add "SourceType", valid_604555
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604556: Call_PostDescribeEvents_604535; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_604556.validator(path, query, header, formData, body)
  let scheme = call_604556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604556.url(scheme.get, call_604556.host, call_604556.base,
                         call_604556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604556, url, valid)

proc call*(call_604557: Call_PostDescribeEvents_604535;
          SourceIdentifier: string = ""; EventCategories: JsonNode = nil;
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2014-10-31";
          SourceType: string = "db-instance"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_604558 = newJObject()
  var formData_604559 = newJObject()
  add(formData_604559, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    formData_604559.add "EventCategories", EventCategories
  add(formData_604559, "Marker", newJString(Marker))
  add(formData_604559, "StartTime", newJString(StartTime))
  add(query_604558, "Action", newJString(Action))
  add(formData_604559, "Duration", newJInt(Duration))
  if Filters != nil:
    formData_604559.add "Filters", Filters
  add(formData_604559, "EndTime", newJString(EndTime))
  add(formData_604559, "MaxRecords", newJInt(MaxRecords))
  add(query_604558, "Version", newJString(Version))
  add(formData_604559, "SourceType", newJString(SourceType))
  result = call_604557.call(nil, query_604558, nil, formData_604559, nil)

var postDescribeEvents* = Call_PostDescribeEvents_604535(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_604536, base: "/",
    url: url_PostDescribeEvents_604537, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_604511 = ref object of OpenApiRestCall_602450
proc url_GetDescribeEvents_604513(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeEvents_604512(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_604514 = query.getOrDefault("SourceType")
  valid_604514 = validateParameter(valid_604514, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_604514 != nil:
    section.add "SourceType", valid_604514
  var valid_604515 = query.getOrDefault("MaxRecords")
  valid_604515 = validateParameter(valid_604515, JInt, required = false, default = nil)
  if valid_604515 != nil:
    section.add "MaxRecords", valid_604515
  var valid_604516 = query.getOrDefault("StartTime")
  valid_604516 = validateParameter(valid_604516, JString, required = false,
                                 default = nil)
  if valid_604516 != nil:
    section.add "StartTime", valid_604516
  var valid_604517 = query.getOrDefault("Filters")
  valid_604517 = validateParameter(valid_604517, JArray, required = false,
                                 default = nil)
  if valid_604517 != nil:
    section.add "Filters", valid_604517
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604518 = query.getOrDefault("Action")
  valid_604518 = validateParameter(valid_604518, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_604518 != nil:
    section.add "Action", valid_604518
  var valid_604519 = query.getOrDefault("SourceIdentifier")
  valid_604519 = validateParameter(valid_604519, JString, required = false,
                                 default = nil)
  if valid_604519 != nil:
    section.add "SourceIdentifier", valid_604519
  var valid_604520 = query.getOrDefault("Marker")
  valid_604520 = validateParameter(valid_604520, JString, required = false,
                                 default = nil)
  if valid_604520 != nil:
    section.add "Marker", valid_604520
  var valid_604521 = query.getOrDefault("EventCategories")
  valid_604521 = validateParameter(valid_604521, JArray, required = false,
                                 default = nil)
  if valid_604521 != nil:
    section.add "EventCategories", valid_604521
  var valid_604522 = query.getOrDefault("Duration")
  valid_604522 = validateParameter(valid_604522, JInt, required = false, default = nil)
  if valid_604522 != nil:
    section.add "Duration", valid_604522
  var valid_604523 = query.getOrDefault("EndTime")
  valid_604523 = validateParameter(valid_604523, JString, required = false,
                                 default = nil)
  if valid_604523 != nil:
    section.add "EndTime", valid_604523
  var valid_604524 = query.getOrDefault("Version")
  valid_604524 = validateParameter(valid_604524, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604524 != nil:
    section.add "Version", valid_604524
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604525 = header.getOrDefault("X-Amz-Date")
  valid_604525 = validateParameter(valid_604525, JString, required = false,
                                 default = nil)
  if valid_604525 != nil:
    section.add "X-Amz-Date", valid_604525
  var valid_604526 = header.getOrDefault("X-Amz-Security-Token")
  valid_604526 = validateParameter(valid_604526, JString, required = false,
                                 default = nil)
  if valid_604526 != nil:
    section.add "X-Amz-Security-Token", valid_604526
  var valid_604527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604527 = validateParameter(valid_604527, JString, required = false,
                                 default = nil)
  if valid_604527 != nil:
    section.add "X-Amz-Content-Sha256", valid_604527
  var valid_604528 = header.getOrDefault("X-Amz-Algorithm")
  valid_604528 = validateParameter(valid_604528, JString, required = false,
                                 default = nil)
  if valid_604528 != nil:
    section.add "X-Amz-Algorithm", valid_604528
  var valid_604529 = header.getOrDefault("X-Amz-Signature")
  valid_604529 = validateParameter(valid_604529, JString, required = false,
                                 default = nil)
  if valid_604529 != nil:
    section.add "X-Amz-Signature", valid_604529
  var valid_604530 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604530 = validateParameter(valid_604530, JString, required = false,
                                 default = nil)
  if valid_604530 != nil:
    section.add "X-Amz-SignedHeaders", valid_604530
  var valid_604531 = header.getOrDefault("X-Amz-Credential")
  valid_604531 = validateParameter(valid_604531, JString, required = false,
                                 default = nil)
  if valid_604531 != nil:
    section.add "X-Amz-Credential", valid_604531
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604532: Call_GetDescribeEvents_604511; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_604532.validator(path, query, header, formData, body)
  let scheme = call_604532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604532.url(scheme.get, call_604532.host, call_604532.base,
                         call_604532.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604532, url, valid)

proc call*(call_604533: Call_GetDescribeEvents_604511;
          SourceType: string = "db-instance"; MaxRecords: int = 0;
          StartTime: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; EventCategories: JsonNode = nil; Duration: int = 0;
          EndTime: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  var query_604534 = newJObject()
  add(query_604534, "SourceType", newJString(SourceType))
  add(query_604534, "MaxRecords", newJInt(MaxRecords))
  add(query_604534, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_604534.add "Filters", Filters
  add(query_604534, "Action", newJString(Action))
  add(query_604534, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_604534, "Marker", newJString(Marker))
  if EventCategories != nil:
    query_604534.add "EventCategories", EventCategories
  add(query_604534, "Duration", newJInt(Duration))
  add(query_604534, "EndTime", newJString(EndTime))
  add(query_604534, "Version", newJString(Version))
  result = call_604533.call(nil, query_604534, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_604511(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_604512,
    base: "/", url: url_GetDescribeEvents_604513,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_604583 = ref object of OpenApiRestCall_602450
proc url_PostDescribeOrderableDBInstanceOptions_604585(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_604584(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604586 = query.getOrDefault("Action")
  valid_604586 = validateParameter(valid_604586, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_604586 != nil:
    section.add "Action", valid_604586
  var valid_604587 = query.getOrDefault("Version")
  valid_604587 = validateParameter(valid_604587, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604587 != nil:
    section.add "Version", valid_604587
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604588 = header.getOrDefault("X-Amz-Date")
  valid_604588 = validateParameter(valid_604588, JString, required = false,
                                 default = nil)
  if valid_604588 != nil:
    section.add "X-Amz-Date", valid_604588
  var valid_604589 = header.getOrDefault("X-Amz-Security-Token")
  valid_604589 = validateParameter(valid_604589, JString, required = false,
                                 default = nil)
  if valid_604589 != nil:
    section.add "X-Amz-Security-Token", valid_604589
  var valid_604590 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604590 = validateParameter(valid_604590, JString, required = false,
                                 default = nil)
  if valid_604590 != nil:
    section.add "X-Amz-Content-Sha256", valid_604590
  var valid_604591 = header.getOrDefault("X-Amz-Algorithm")
  valid_604591 = validateParameter(valid_604591, JString, required = false,
                                 default = nil)
  if valid_604591 != nil:
    section.add "X-Amz-Algorithm", valid_604591
  var valid_604592 = header.getOrDefault("X-Amz-Signature")
  valid_604592 = validateParameter(valid_604592, JString, required = false,
                                 default = nil)
  if valid_604592 != nil:
    section.add "X-Amz-Signature", valid_604592
  var valid_604593 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604593 = validateParameter(valid_604593, JString, required = false,
                                 default = nil)
  if valid_604593 != nil:
    section.add "X-Amz-SignedHeaders", valid_604593
  var valid_604594 = header.getOrDefault("X-Amz-Credential")
  valid_604594 = validateParameter(valid_604594, JString, required = false,
                                 default = nil)
  if valid_604594 != nil:
    section.add "X-Amz-Credential", valid_604594
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_604595 = formData.getOrDefault("Engine")
  valid_604595 = validateParameter(valid_604595, JString, required = true,
                                 default = nil)
  if valid_604595 != nil:
    section.add "Engine", valid_604595
  var valid_604596 = formData.getOrDefault("Marker")
  valid_604596 = validateParameter(valid_604596, JString, required = false,
                                 default = nil)
  if valid_604596 != nil:
    section.add "Marker", valid_604596
  var valid_604597 = formData.getOrDefault("Vpc")
  valid_604597 = validateParameter(valid_604597, JBool, required = false, default = nil)
  if valid_604597 != nil:
    section.add "Vpc", valid_604597
  var valid_604598 = formData.getOrDefault("DBInstanceClass")
  valid_604598 = validateParameter(valid_604598, JString, required = false,
                                 default = nil)
  if valid_604598 != nil:
    section.add "DBInstanceClass", valid_604598
  var valid_604599 = formData.getOrDefault("Filters")
  valid_604599 = validateParameter(valid_604599, JArray, required = false,
                                 default = nil)
  if valid_604599 != nil:
    section.add "Filters", valid_604599
  var valid_604600 = formData.getOrDefault("LicenseModel")
  valid_604600 = validateParameter(valid_604600, JString, required = false,
                                 default = nil)
  if valid_604600 != nil:
    section.add "LicenseModel", valid_604600
  var valid_604601 = formData.getOrDefault("MaxRecords")
  valid_604601 = validateParameter(valid_604601, JInt, required = false, default = nil)
  if valid_604601 != nil:
    section.add "MaxRecords", valid_604601
  var valid_604602 = formData.getOrDefault("EngineVersion")
  valid_604602 = validateParameter(valid_604602, JString, required = false,
                                 default = nil)
  if valid_604602 != nil:
    section.add "EngineVersion", valid_604602
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604603: Call_PostDescribeOrderableDBInstanceOptions_604583;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_604603.validator(path, query, header, formData, body)
  let scheme = call_604603.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604603.url(scheme.get, call_604603.host, call_604603.base,
                         call_604603.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604603, url, valid)

proc call*(call_604604: Call_PostDescribeOrderableDBInstanceOptions_604583;
          Engine: string; Marker: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions"; Vpc: bool = false;
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          LicenseModel: string = ""; MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Action: string (required)
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_604605 = newJObject()
  var formData_604606 = newJObject()
  add(formData_604606, "Engine", newJString(Engine))
  add(formData_604606, "Marker", newJString(Marker))
  add(query_604605, "Action", newJString(Action))
  add(formData_604606, "Vpc", newJBool(Vpc))
  add(formData_604606, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_604606.add "Filters", Filters
  add(formData_604606, "LicenseModel", newJString(LicenseModel))
  add(formData_604606, "MaxRecords", newJInt(MaxRecords))
  add(formData_604606, "EngineVersion", newJString(EngineVersion))
  add(query_604605, "Version", newJString(Version))
  result = call_604604.call(nil, query_604605, nil, formData_604606, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_604583(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_604584, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_604585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_604560 = ref object of OpenApiRestCall_602450
proc url_GetDescribeOrderableDBInstanceOptions_604562(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_604561(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_604563 = query.getOrDefault("Engine")
  valid_604563 = validateParameter(valid_604563, JString, required = true,
                                 default = nil)
  if valid_604563 != nil:
    section.add "Engine", valid_604563
  var valid_604564 = query.getOrDefault("MaxRecords")
  valid_604564 = validateParameter(valid_604564, JInt, required = false, default = nil)
  if valid_604564 != nil:
    section.add "MaxRecords", valid_604564
  var valid_604565 = query.getOrDefault("Filters")
  valid_604565 = validateParameter(valid_604565, JArray, required = false,
                                 default = nil)
  if valid_604565 != nil:
    section.add "Filters", valid_604565
  var valid_604566 = query.getOrDefault("LicenseModel")
  valid_604566 = validateParameter(valid_604566, JString, required = false,
                                 default = nil)
  if valid_604566 != nil:
    section.add "LicenseModel", valid_604566
  var valid_604567 = query.getOrDefault("Vpc")
  valid_604567 = validateParameter(valid_604567, JBool, required = false, default = nil)
  if valid_604567 != nil:
    section.add "Vpc", valid_604567
  var valid_604568 = query.getOrDefault("DBInstanceClass")
  valid_604568 = validateParameter(valid_604568, JString, required = false,
                                 default = nil)
  if valid_604568 != nil:
    section.add "DBInstanceClass", valid_604568
  var valid_604569 = query.getOrDefault("Action")
  valid_604569 = validateParameter(valid_604569, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_604569 != nil:
    section.add "Action", valid_604569
  var valid_604570 = query.getOrDefault("Marker")
  valid_604570 = validateParameter(valid_604570, JString, required = false,
                                 default = nil)
  if valid_604570 != nil:
    section.add "Marker", valid_604570
  var valid_604571 = query.getOrDefault("EngineVersion")
  valid_604571 = validateParameter(valid_604571, JString, required = false,
                                 default = nil)
  if valid_604571 != nil:
    section.add "EngineVersion", valid_604571
  var valid_604572 = query.getOrDefault("Version")
  valid_604572 = validateParameter(valid_604572, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604572 != nil:
    section.add "Version", valid_604572
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604573 = header.getOrDefault("X-Amz-Date")
  valid_604573 = validateParameter(valid_604573, JString, required = false,
                                 default = nil)
  if valid_604573 != nil:
    section.add "X-Amz-Date", valid_604573
  var valid_604574 = header.getOrDefault("X-Amz-Security-Token")
  valid_604574 = validateParameter(valid_604574, JString, required = false,
                                 default = nil)
  if valid_604574 != nil:
    section.add "X-Amz-Security-Token", valid_604574
  var valid_604575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604575 = validateParameter(valid_604575, JString, required = false,
                                 default = nil)
  if valid_604575 != nil:
    section.add "X-Amz-Content-Sha256", valid_604575
  var valid_604576 = header.getOrDefault("X-Amz-Algorithm")
  valid_604576 = validateParameter(valid_604576, JString, required = false,
                                 default = nil)
  if valid_604576 != nil:
    section.add "X-Amz-Algorithm", valid_604576
  var valid_604577 = header.getOrDefault("X-Amz-Signature")
  valid_604577 = validateParameter(valid_604577, JString, required = false,
                                 default = nil)
  if valid_604577 != nil:
    section.add "X-Amz-Signature", valid_604577
  var valid_604578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604578 = validateParameter(valid_604578, JString, required = false,
                                 default = nil)
  if valid_604578 != nil:
    section.add "X-Amz-SignedHeaders", valid_604578
  var valid_604579 = header.getOrDefault("X-Amz-Credential")
  valid_604579 = validateParameter(valid_604579, JString, required = false,
                                 default = nil)
  if valid_604579 != nil:
    section.add "X-Amz-Credential", valid_604579
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604580: Call_GetDescribeOrderableDBInstanceOptions_604560;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_604580.validator(path, query, header, formData, body)
  let scheme = call_604580.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604580.url(scheme.get, call_604580.host, call_604580.base,
                         call_604580.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604580, url, valid)

proc call*(call_604581: Call_GetDescribeOrderableDBInstanceOptions_604560;
          Engine: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          LicenseModel: string = ""; Vpc: bool = false; DBInstanceClass: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Marker: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_604582 = newJObject()
  add(query_604582, "Engine", newJString(Engine))
  add(query_604582, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604582.add "Filters", Filters
  add(query_604582, "LicenseModel", newJString(LicenseModel))
  add(query_604582, "Vpc", newJBool(Vpc))
  add(query_604582, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_604582, "Action", newJString(Action))
  add(query_604582, "Marker", newJString(Marker))
  add(query_604582, "EngineVersion", newJString(EngineVersion))
  add(query_604582, "Version", newJString(Version))
  result = call_604581.call(nil, query_604582, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_604560(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_604561, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_604562,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_604626 = ref object of OpenApiRestCall_602450
proc url_PostDescribePendingMaintenanceActions_604628(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_604627(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604629 = query.getOrDefault("Action")
  valid_604629 = validateParameter(valid_604629, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_604629 != nil:
    section.add "Action", valid_604629
  var valid_604630 = query.getOrDefault("Version")
  valid_604630 = validateParameter(valid_604630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604630 != nil:
    section.add "Version", valid_604630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604631 = header.getOrDefault("X-Amz-Date")
  valid_604631 = validateParameter(valid_604631, JString, required = false,
                                 default = nil)
  if valid_604631 != nil:
    section.add "X-Amz-Date", valid_604631
  var valid_604632 = header.getOrDefault("X-Amz-Security-Token")
  valid_604632 = validateParameter(valid_604632, JString, required = false,
                                 default = nil)
  if valid_604632 != nil:
    section.add "X-Amz-Security-Token", valid_604632
  var valid_604633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604633 = validateParameter(valid_604633, JString, required = false,
                                 default = nil)
  if valid_604633 != nil:
    section.add "X-Amz-Content-Sha256", valid_604633
  var valid_604634 = header.getOrDefault("X-Amz-Algorithm")
  valid_604634 = validateParameter(valid_604634, JString, required = false,
                                 default = nil)
  if valid_604634 != nil:
    section.add "X-Amz-Algorithm", valid_604634
  var valid_604635 = header.getOrDefault("X-Amz-Signature")
  valid_604635 = validateParameter(valid_604635, JString, required = false,
                                 default = nil)
  if valid_604635 != nil:
    section.add "X-Amz-Signature", valid_604635
  var valid_604636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604636 = validateParameter(valid_604636, JString, required = false,
                                 default = nil)
  if valid_604636 != nil:
    section.add "X-Amz-SignedHeaders", valid_604636
  var valid_604637 = header.getOrDefault("X-Amz-Credential")
  valid_604637 = validateParameter(valid_604637, JString, required = false,
                                 default = nil)
  if valid_604637 != nil:
    section.add "X-Amz-Credential", valid_604637
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_604638 = formData.getOrDefault("Marker")
  valid_604638 = validateParameter(valid_604638, JString, required = false,
                                 default = nil)
  if valid_604638 != nil:
    section.add "Marker", valid_604638
  var valid_604639 = formData.getOrDefault("ResourceIdentifier")
  valid_604639 = validateParameter(valid_604639, JString, required = false,
                                 default = nil)
  if valid_604639 != nil:
    section.add "ResourceIdentifier", valid_604639
  var valid_604640 = formData.getOrDefault("Filters")
  valid_604640 = validateParameter(valid_604640, JArray, required = false,
                                 default = nil)
  if valid_604640 != nil:
    section.add "Filters", valid_604640
  var valid_604641 = formData.getOrDefault("MaxRecords")
  valid_604641 = validateParameter(valid_604641, JInt, required = false, default = nil)
  if valid_604641 != nil:
    section.add "MaxRecords", valid_604641
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604642: Call_PostDescribePendingMaintenanceActions_604626;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_604642.validator(path, query, header, formData, body)
  let scheme = call_604642.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604642.url(scheme.get, call_604642.host, call_604642.base,
                         call_604642.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604642, url, valid)

proc call*(call_604643: Call_PostDescribePendingMaintenanceActions_604626;
          Marker: string = ""; Action: string = "DescribePendingMaintenanceActions";
          ResourceIdentifier: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_604644 = newJObject()
  var formData_604645 = newJObject()
  add(formData_604645, "Marker", newJString(Marker))
  add(query_604644, "Action", newJString(Action))
  add(formData_604645, "ResourceIdentifier", newJString(ResourceIdentifier))
  if Filters != nil:
    formData_604645.add "Filters", Filters
  add(formData_604645, "MaxRecords", newJInt(MaxRecords))
  add(query_604644, "Version", newJString(Version))
  result = call_604643.call(nil, query_604644, nil, formData_604645, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_604626(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_604627, base: "/",
    url: url_PostDescribePendingMaintenanceActions_604628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_604607 = ref object of OpenApiRestCall_602450
proc url_GetDescribePendingMaintenanceActions_604609(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_604608(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_604610 = query.getOrDefault("MaxRecords")
  valid_604610 = validateParameter(valid_604610, JInt, required = false, default = nil)
  if valid_604610 != nil:
    section.add "MaxRecords", valid_604610
  var valid_604611 = query.getOrDefault("Filters")
  valid_604611 = validateParameter(valid_604611, JArray, required = false,
                                 default = nil)
  if valid_604611 != nil:
    section.add "Filters", valid_604611
  var valid_604612 = query.getOrDefault("ResourceIdentifier")
  valid_604612 = validateParameter(valid_604612, JString, required = false,
                                 default = nil)
  if valid_604612 != nil:
    section.add "ResourceIdentifier", valid_604612
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604613 = query.getOrDefault("Action")
  valid_604613 = validateParameter(valid_604613, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_604613 != nil:
    section.add "Action", valid_604613
  var valid_604614 = query.getOrDefault("Marker")
  valid_604614 = validateParameter(valid_604614, JString, required = false,
                                 default = nil)
  if valid_604614 != nil:
    section.add "Marker", valid_604614
  var valid_604615 = query.getOrDefault("Version")
  valid_604615 = validateParameter(valid_604615, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604615 != nil:
    section.add "Version", valid_604615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604616 = header.getOrDefault("X-Amz-Date")
  valid_604616 = validateParameter(valid_604616, JString, required = false,
                                 default = nil)
  if valid_604616 != nil:
    section.add "X-Amz-Date", valid_604616
  var valid_604617 = header.getOrDefault("X-Amz-Security-Token")
  valid_604617 = validateParameter(valid_604617, JString, required = false,
                                 default = nil)
  if valid_604617 != nil:
    section.add "X-Amz-Security-Token", valid_604617
  var valid_604618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604618 = validateParameter(valid_604618, JString, required = false,
                                 default = nil)
  if valid_604618 != nil:
    section.add "X-Amz-Content-Sha256", valid_604618
  var valid_604619 = header.getOrDefault("X-Amz-Algorithm")
  valid_604619 = validateParameter(valid_604619, JString, required = false,
                                 default = nil)
  if valid_604619 != nil:
    section.add "X-Amz-Algorithm", valid_604619
  var valid_604620 = header.getOrDefault("X-Amz-Signature")
  valid_604620 = validateParameter(valid_604620, JString, required = false,
                                 default = nil)
  if valid_604620 != nil:
    section.add "X-Amz-Signature", valid_604620
  var valid_604621 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604621 = validateParameter(valid_604621, JString, required = false,
                                 default = nil)
  if valid_604621 != nil:
    section.add "X-Amz-SignedHeaders", valid_604621
  var valid_604622 = header.getOrDefault("X-Amz-Credential")
  valid_604622 = validateParameter(valid_604622, JString, required = false,
                                 default = nil)
  if valid_604622 != nil:
    section.add "X-Amz-Credential", valid_604622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604623: Call_GetDescribePendingMaintenanceActions_604607;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_604623.validator(path, query, header, formData, body)
  let scheme = call_604623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604623.url(scheme.get, call_604623.host, call_604623.base,
                         call_604623.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604623, url, valid)

proc call*(call_604624: Call_GetDescribePendingMaintenanceActions_604607;
          MaxRecords: int = 0; Filters: JsonNode = nil; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_604625 = newJObject()
  add(query_604625, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_604625.add "Filters", Filters
  add(query_604625, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_604625, "Action", newJString(Action))
  add(query_604625, "Marker", newJString(Marker))
  add(query_604625, "Version", newJString(Version))
  result = call_604624.call(nil, query_604625, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_604607(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_604608, base: "/",
    url: url_GetDescribePendingMaintenanceActions_604609,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_604662 = ref object of OpenApiRestCall_602450
proc url_PostDescribeValidDBInstanceModifications_604664(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_604663(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604665 = query.getOrDefault("Action")
  valid_604665 = validateParameter(valid_604665, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_604665 != nil:
    section.add "Action", valid_604665
  var valid_604666 = query.getOrDefault("Version")
  valid_604666 = validateParameter(valid_604666, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604666 != nil:
    section.add "Version", valid_604666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604667 = header.getOrDefault("X-Amz-Date")
  valid_604667 = validateParameter(valid_604667, JString, required = false,
                                 default = nil)
  if valid_604667 != nil:
    section.add "X-Amz-Date", valid_604667
  var valid_604668 = header.getOrDefault("X-Amz-Security-Token")
  valid_604668 = validateParameter(valid_604668, JString, required = false,
                                 default = nil)
  if valid_604668 != nil:
    section.add "X-Amz-Security-Token", valid_604668
  var valid_604669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604669 = validateParameter(valid_604669, JString, required = false,
                                 default = nil)
  if valid_604669 != nil:
    section.add "X-Amz-Content-Sha256", valid_604669
  var valid_604670 = header.getOrDefault("X-Amz-Algorithm")
  valid_604670 = validateParameter(valid_604670, JString, required = false,
                                 default = nil)
  if valid_604670 != nil:
    section.add "X-Amz-Algorithm", valid_604670
  var valid_604671 = header.getOrDefault("X-Amz-Signature")
  valid_604671 = validateParameter(valid_604671, JString, required = false,
                                 default = nil)
  if valid_604671 != nil:
    section.add "X-Amz-Signature", valid_604671
  var valid_604672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604672 = validateParameter(valid_604672, JString, required = false,
                                 default = nil)
  if valid_604672 != nil:
    section.add "X-Amz-SignedHeaders", valid_604672
  var valid_604673 = header.getOrDefault("X-Amz-Credential")
  valid_604673 = validateParameter(valid_604673, JString, required = false,
                                 default = nil)
  if valid_604673 != nil:
    section.add "X-Amz-Credential", valid_604673
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_604674 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604674 = validateParameter(valid_604674, JString, required = true,
                                 default = nil)
  if valid_604674 != nil:
    section.add "DBInstanceIdentifier", valid_604674
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604675: Call_PostDescribeValidDBInstanceModifications_604662;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_604675.validator(path, query, header, formData, body)
  let scheme = call_604675.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604675.url(scheme.get, call_604675.host, call_604675.base,
                         call_604675.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604675, url, valid)

proc call*(call_604676: Call_PostDescribeValidDBInstanceModifications_604662;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604677 = newJObject()
  var formData_604678 = newJObject()
  add(formData_604678, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604677, "Action", newJString(Action))
  add(query_604677, "Version", newJString(Version))
  result = call_604676.call(nil, query_604677, nil, formData_604678, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_604662(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_604663,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_604664,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_604646 = ref object of OpenApiRestCall_602450
proc url_GetDescribeValidDBInstanceModifications_604648(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_604647(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604649 = query.getOrDefault("Action")
  valid_604649 = validateParameter(valid_604649, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_604649 != nil:
    section.add "Action", valid_604649
  var valid_604650 = query.getOrDefault("Version")
  valid_604650 = validateParameter(valid_604650, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604650 != nil:
    section.add "Version", valid_604650
  var valid_604651 = query.getOrDefault("DBInstanceIdentifier")
  valid_604651 = validateParameter(valid_604651, JString, required = true,
                                 default = nil)
  if valid_604651 != nil:
    section.add "DBInstanceIdentifier", valid_604651
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604652 = header.getOrDefault("X-Amz-Date")
  valid_604652 = validateParameter(valid_604652, JString, required = false,
                                 default = nil)
  if valid_604652 != nil:
    section.add "X-Amz-Date", valid_604652
  var valid_604653 = header.getOrDefault("X-Amz-Security-Token")
  valid_604653 = validateParameter(valid_604653, JString, required = false,
                                 default = nil)
  if valid_604653 != nil:
    section.add "X-Amz-Security-Token", valid_604653
  var valid_604654 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604654 = validateParameter(valid_604654, JString, required = false,
                                 default = nil)
  if valid_604654 != nil:
    section.add "X-Amz-Content-Sha256", valid_604654
  var valid_604655 = header.getOrDefault("X-Amz-Algorithm")
  valid_604655 = validateParameter(valid_604655, JString, required = false,
                                 default = nil)
  if valid_604655 != nil:
    section.add "X-Amz-Algorithm", valid_604655
  var valid_604656 = header.getOrDefault("X-Amz-Signature")
  valid_604656 = validateParameter(valid_604656, JString, required = false,
                                 default = nil)
  if valid_604656 != nil:
    section.add "X-Amz-Signature", valid_604656
  var valid_604657 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604657 = validateParameter(valid_604657, JString, required = false,
                                 default = nil)
  if valid_604657 != nil:
    section.add "X-Amz-SignedHeaders", valid_604657
  var valid_604658 = header.getOrDefault("X-Amz-Credential")
  valid_604658 = validateParameter(valid_604658, JString, required = false,
                                 default = nil)
  if valid_604658 != nil:
    section.add "X-Amz-Credential", valid_604658
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604659: Call_GetDescribeValidDBInstanceModifications_604646;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_604659.validator(path, query, header, formData, body)
  let scheme = call_604659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604659.url(scheme.get, call_604659.host, call_604659.base,
                         call_604659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604659, url, valid)

proc call*(call_604660: Call_GetDescribeValidDBInstanceModifications_604646;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  var query_604661 = newJObject()
  add(query_604661, "Action", newJString(Action))
  add(query_604661, "Version", newJString(Version))
  add(query_604661, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_604660.call(nil, query_604661, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_604646(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_604647, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_604648,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_604696 = ref object of OpenApiRestCall_602450
proc url_PostFailoverDBCluster_604698(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostFailoverDBCluster_604697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604699 = query.getOrDefault("Action")
  valid_604699 = validateParameter(valid_604699, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_604699 != nil:
    section.add "Action", valid_604699
  var valid_604700 = query.getOrDefault("Version")
  valid_604700 = validateParameter(valid_604700, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604700 != nil:
    section.add "Version", valid_604700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604701 = header.getOrDefault("X-Amz-Date")
  valid_604701 = validateParameter(valid_604701, JString, required = false,
                                 default = nil)
  if valid_604701 != nil:
    section.add "X-Amz-Date", valid_604701
  var valid_604702 = header.getOrDefault("X-Amz-Security-Token")
  valid_604702 = validateParameter(valid_604702, JString, required = false,
                                 default = nil)
  if valid_604702 != nil:
    section.add "X-Amz-Security-Token", valid_604702
  var valid_604703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604703 = validateParameter(valid_604703, JString, required = false,
                                 default = nil)
  if valid_604703 != nil:
    section.add "X-Amz-Content-Sha256", valid_604703
  var valid_604704 = header.getOrDefault("X-Amz-Algorithm")
  valid_604704 = validateParameter(valid_604704, JString, required = false,
                                 default = nil)
  if valid_604704 != nil:
    section.add "X-Amz-Algorithm", valid_604704
  var valid_604705 = header.getOrDefault("X-Amz-Signature")
  valid_604705 = validateParameter(valid_604705, JString, required = false,
                                 default = nil)
  if valid_604705 != nil:
    section.add "X-Amz-Signature", valid_604705
  var valid_604706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604706 = validateParameter(valid_604706, JString, required = false,
                                 default = nil)
  if valid_604706 != nil:
    section.add "X-Amz-SignedHeaders", valid_604706
  var valid_604707 = header.getOrDefault("X-Amz-Credential")
  valid_604707 = validateParameter(valid_604707, JString, required = false,
                                 default = nil)
  if valid_604707 != nil:
    section.add "X-Amz-Credential", valid_604707
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_604708 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_604708 = validateParameter(valid_604708, JString, required = false,
                                 default = nil)
  if valid_604708 != nil:
    section.add "TargetDBInstanceIdentifier", valid_604708
  var valid_604709 = formData.getOrDefault("DBClusterIdentifier")
  valid_604709 = validateParameter(valid_604709, JString, required = false,
                                 default = nil)
  if valid_604709 != nil:
    section.add "DBClusterIdentifier", valid_604709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604710: Call_PostFailoverDBCluster_604696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_604710.validator(path, query, header, formData, body)
  let scheme = call_604710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604710.url(scheme.get, call_604710.host, call_604710.base,
                         call_604710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604710, url, valid)

proc call*(call_604711: Call_PostFailoverDBCluster_604696;
          Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_604712 = newJObject()
  var formData_604713 = newJObject()
  add(query_604712, "Action", newJString(Action))
  add(formData_604713, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_604713, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604712, "Version", newJString(Version))
  result = call_604711.call(nil, query_604712, nil, formData_604713, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_604696(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_604697, base: "/",
    url: url_PostFailoverDBCluster_604698, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_604679 = ref object of OpenApiRestCall_602450
proc url_GetFailoverDBCluster_604681(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetFailoverDBCluster_604680(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604682 = query.getOrDefault("DBClusterIdentifier")
  valid_604682 = validateParameter(valid_604682, JString, required = false,
                                 default = nil)
  if valid_604682 != nil:
    section.add "DBClusterIdentifier", valid_604682
  var valid_604683 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_604683 = validateParameter(valid_604683, JString, required = false,
                                 default = nil)
  if valid_604683 != nil:
    section.add "TargetDBInstanceIdentifier", valid_604683
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604684 = query.getOrDefault("Action")
  valid_604684 = validateParameter(valid_604684, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_604684 != nil:
    section.add "Action", valid_604684
  var valid_604685 = query.getOrDefault("Version")
  valid_604685 = validateParameter(valid_604685, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604685 != nil:
    section.add "Version", valid_604685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604686 = header.getOrDefault("X-Amz-Date")
  valid_604686 = validateParameter(valid_604686, JString, required = false,
                                 default = nil)
  if valid_604686 != nil:
    section.add "X-Amz-Date", valid_604686
  var valid_604687 = header.getOrDefault("X-Amz-Security-Token")
  valid_604687 = validateParameter(valid_604687, JString, required = false,
                                 default = nil)
  if valid_604687 != nil:
    section.add "X-Amz-Security-Token", valid_604687
  var valid_604688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604688 = validateParameter(valid_604688, JString, required = false,
                                 default = nil)
  if valid_604688 != nil:
    section.add "X-Amz-Content-Sha256", valid_604688
  var valid_604689 = header.getOrDefault("X-Amz-Algorithm")
  valid_604689 = validateParameter(valid_604689, JString, required = false,
                                 default = nil)
  if valid_604689 != nil:
    section.add "X-Amz-Algorithm", valid_604689
  var valid_604690 = header.getOrDefault("X-Amz-Signature")
  valid_604690 = validateParameter(valid_604690, JString, required = false,
                                 default = nil)
  if valid_604690 != nil:
    section.add "X-Amz-Signature", valid_604690
  var valid_604691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604691 = validateParameter(valid_604691, JString, required = false,
                                 default = nil)
  if valid_604691 != nil:
    section.add "X-Amz-SignedHeaders", valid_604691
  var valid_604692 = header.getOrDefault("X-Amz-Credential")
  valid_604692 = validateParameter(valid_604692, JString, required = false,
                                 default = nil)
  if valid_604692 != nil:
    section.add "X-Amz-Credential", valid_604692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604693: Call_GetFailoverDBCluster_604679; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_604693.validator(path, query, header, formData, body)
  let scheme = call_604693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604693.url(scheme.get, call_604693.host, call_604693.base,
                         call_604693.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604693, url, valid)

proc call*(call_604694: Call_GetFailoverDBCluster_604679;
          DBClusterIdentifier: string = ""; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604695 = newJObject()
  add(query_604695, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604695, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_604695, "Action", newJString(Action))
  add(query_604695, "Version", newJString(Version))
  result = call_604694.call(nil, query_604695, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_604679(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_604680, base: "/",
    url: url_GetFailoverDBCluster_604681, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_604731 = ref object of OpenApiRestCall_602450
proc url_PostListTagsForResource_604733(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostListTagsForResource_604732(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604734 = query.getOrDefault("Action")
  valid_604734 = validateParameter(valid_604734, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_604734 != nil:
    section.add "Action", valid_604734
  var valid_604735 = query.getOrDefault("Version")
  valid_604735 = validateParameter(valid_604735, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604735 != nil:
    section.add "Version", valid_604735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604736 = header.getOrDefault("X-Amz-Date")
  valid_604736 = validateParameter(valid_604736, JString, required = false,
                                 default = nil)
  if valid_604736 != nil:
    section.add "X-Amz-Date", valid_604736
  var valid_604737 = header.getOrDefault("X-Amz-Security-Token")
  valid_604737 = validateParameter(valid_604737, JString, required = false,
                                 default = nil)
  if valid_604737 != nil:
    section.add "X-Amz-Security-Token", valid_604737
  var valid_604738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604738 = validateParameter(valid_604738, JString, required = false,
                                 default = nil)
  if valid_604738 != nil:
    section.add "X-Amz-Content-Sha256", valid_604738
  var valid_604739 = header.getOrDefault("X-Amz-Algorithm")
  valid_604739 = validateParameter(valid_604739, JString, required = false,
                                 default = nil)
  if valid_604739 != nil:
    section.add "X-Amz-Algorithm", valid_604739
  var valid_604740 = header.getOrDefault("X-Amz-Signature")
  valid_604740 = validateParameter(valid_604740, JString, required = false,
                                 default = nil)
  if valid_604740 != nil:
    section.add "X-Amz-Signature", valid_604740
  var valid_604741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604741 = validateParameter(valid_604741, JString, required = false,
                                 default = nil)
  if valid_604741 != nil:
    section.add "X-Amz-SignedHeaders", valid_604741
  var valid_604742 = header.getOrDefault("X-Amz-Credential")
  valid_604742 = validateParameter(valid_604742, JString, required = false,
                                 default = nil)
  if valid_604742 != nil:
    section.add "X-Amz-Credential", valid_604742
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  var valid_604743 = formData.getOrDefault("Filters")
  valid_604743 = validateParameter(valid_604743, JArray, required = false,
                                 default = nil)
  if valid_604743 != nil:
    section.add "Filters", valid_604743
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_604744 = formData.getOrDefault("ResourceName")
  valid_604744 = validateParameter(valid_604744, JString, required = true,
                                 default = nil)
  if valid_604744 != nil:
    section.add "ResourceName", valid_604744
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604745: Call_PostListTagsForResource_604731; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_604745.validator(path, query, header, formData, body)
  let scheme = call_604745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604745.url(scheme.get, call_604745.host, call_604745.base,
                         call_604745.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604745, url, valid)

proc call*(call_604746: Call_PostListTagsForResource_604731; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_604747 = newJObject()
  var formData_604748 = newJObject()
  add(query_604747, "Action", newJString(Action))
  if Filters != nil:
    formData_604748.add "Filters", Filters
  add(formData_604748, "ResourceName", newJString(ResourceName))
  add(query_604747, "Version", newJString(Version))
  result = call_604746.call(nil, query_604747, nil, formData_604748, nil)

var postListTagsForResource* = Call_PostListTagsForResource_604731(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_604732, base: "/",
    url: url_PostListTagsForResource_604733, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_604714 = ref object of OpenApiRestCall_602450
proc url_GetListTagsForResource_604716(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetListTagsForResource_604715(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_604717 = query.getOrDefault("Filters")
  valid_604717 = validateParameter(valid_604717, JArray, required = false,
                                 default = nil)
  if valid_604717 != nil:
    section.add "Filters", valid_604717
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_604718 = query.getOrDefault("ResourceName")
  valid_604718 = validateParameter(valid_604718, JString, required = true,
                                 default = nil)
  if valid_604718 != nil:
    section.add "ResourceName", valid_604718
  var valid_604719 = query.getOrDefault("Action")
  valid_604719 = validateParameter(valid_604719, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_604719 != nil:
    section.add "Action", valid_604719
  var valid_604720 = query.getOrDefault("Version")
  valid_604720 = validateParameter(valid_604720, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604720 != nil:
    section.add "Version", valid_604720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604721 = header.getOrDefault("X-Amz-Date")
  valid_604721 = validateParameter(valid_604721, JString, required = false,
                                 default = nil)
  if valid_604721 != nil:
    section.add "X-Amz-Date", valid_604721
  var valid_604722 = header.getOrDefault("X-Amz-Security-Token")
  valid_604722 = validateParameter(valid_604722, JString, required = false,
                                 default = nil)
  if valid_604722 != nil:
    section.add "X-Amz-Security-Token", valid_604722
  var valid_604723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604723 = validateParameter(valid_604723, JString, required = false,
                                 default = nil)
  if valid_604723 != nil:
    section.add "X-Amz-Content-Sha256", valid_604723
  var valid_604724 = header.getOrDefault("X-Amz-Algorithm")
  valid_604724 = validateParameter(valid_604724, JString, required = false,
                                 default = nil)
  if valid_604724 != nil:
    section.add "X-Amz-Algorithm", valid_604724
  var valid_604725 = header.getOrDefault("X-Amz-Signature")
  valid_604725 = validateParameter(valid_604725, JString, required = false,
                                 default = nil)
  if valid_604725 != nil:
    section.add "X-Amz-Signature", valid_604725
  var valid_604726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604726 = validateParameter(valid_604726, JString, required = false,
                                 default = nil)
  if valid_604726 != nil:
    section.add "X-Amz-SignedHeaders", valid_604726
  var valid_604727 = header.getOrDefault("X-Amz-Credential")
  valid_604727 = validateParameter(valid_604727, JString, required = false,
                                 default = nil)
  if valid_604727 != nil:
    section.add "X-Amz-Credential", valid_604727
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604728: Call_GetListTagsForResource_604714; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_604728.validator(path, query, header, formData, body)
  let scheme = call_604728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604728.url(scheme.get, call_604728.host, call_604728.base,
                         call_604728.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604728, url, valid)

proc call*(call_604729: Call_GetListTagsForResource_604714; ResourceName: string;
          Filters: JsonNode = nil; Action: string = "ListTagsForResource";
          Version: string = "2014-10-31"): Recallable =
  ## getListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604730 = newJObject()
  if Filters != nil:
    query_604730.add "Filters", Filters
  add(query_604730, "ResourceName", newJString(ResourceName))
  add(query_604730, "Action", newJString(Action))
  add(query_604730, "Version", newJString(Version))
  result = call_604729.call(nil, query_604730, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_604714(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_604715, base: "/",
    url: url_GetListTagsForResource_604716, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_604779 = ref object of OpenApiRestCall_602450
proc url_PostModifyDBCluster_604781(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBCluster_604780(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604782 = query.getOrDefault("Action")
  valid_604782 = validateParameter(valid_604782, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_604782 != nil:
    section.add "Action", valid_604782
  var valid_604783 = query.getOrDefault("Version")
  valid_604783 = validateParameter(valid_604783, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604783 != nil:
    section.add "Version", valid_604783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604784 = header.getOrDefault("X-Amz-Date")
  valid_604784 = validateParameter(valid_604784, JString, required = false,
                                 default = nil)
  if valid_604784 != nil:
    section.add "X-Amz-Date", valid_604784
  var valid_604785 = header.getOrDefault("X-Amz-Security-Token")
  valid_604785 = validateParameter(valid_604785, JString, required = false,
                                 default = nil)
  if valid_604785 != nil:
    section.add "X-Amz-Security-Token", valid_604785
  var valid_604786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604786 = validateParameter(valid_604786, JString, required = false,
                                 default = nil)
  if valid_604786 != nil:
    section.add "X-Amz-Content-Sha256", valid_604786
  var valid_604787 = header.getOrDefault("X-Amz-Algorithm")
  valid_604787 = validateParameter(valid_604787, JString, required = false,
                                 default = nil)
  if valid_604787 != nil:
    section.add "X-Amz-Algorithm", valid_604787
  var valid_604788 = header.getOrDefault("X-Amz-Signature")
  valid_604788 = validateParameter(valid_604788, JString, required = false,
                                 default = nil)
  if valid_604788 != nil:
    section.add "X-Amz-Signature", valid_604788
  var valid_604789 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604789 = validateParameter(valid_604789, JString, required = false,
                                 default = nil)
  if valid_604789 != nil:
    section.add "X-Amz-SignedHeaders", valid_604789
  var valid_604790 = header.getOrDefault("X-Amz-Credential")
  valid_604790 = validateParameter(valid_604790, JString, required = false,
                                 default = nil)
  if valid_604790 != nil:
    section.add "X-Amz-Credential", valid_604790
  result.add "header", section
  ## parameters in `formData` object:
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_604791 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_604791 = validateParameter(valid_604791, JArray, required = false,
                                 default = nil)
  if valid_604791 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_604791
  var valid_604792 = formData.getOrDefault("ApplyImmediately")
  valid_604792 = validateParameter(valid_604792, JBool, required = false, default = nil)
  if valid_604792 != nil:
    section.add "ApplyImmediately", valid_604792
  var valid_604793 = formData.getOrDefault("Port")
  valid_604793 = validateParameter(valid_604793, JInt, required = false, default = nil)
  if valid_604793 != nil:
    section.add "Port", valid_604793
  var valid_604794 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_604794 = validateParameter(valid_604794, JArray, required = false,
                                 default = nil)
  if valid_604794 != nil:
    section.add "VpcSecurityGroupIds", valid_604794
  var valid_604795 = formData.getOrDefault("OptionGroupName")
  valid_604795 = validateParameter(valid_604795, JString, required = false,
                                 default = nil)
  if valid_604795 != nil:
    section.add "OptionGroupName", valid_604795
  var valid_604796 = formData.getOrDefault("BackupRetentionPeriod")
  valid_604796 = validateParameter(valid_604796, JInt, required = false, default = nil)
  if valid_604796 != nil:
    section.add "BackupRetentionPeriod", valid_604796
  var valid_604797 = formData.getOrDefault("MasterUserPassword")
  valid_604797 = validateParameter(valid_604797, JString, required = false,
                                 default = nil)
  if valid_604797 != nil:
    section.add "MasterUserPassword", valid_604797
  var valid_604798 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_604798 = validateParameter(valid_604798, JString, required = false,
                                 default = nil)
  if valid_604798 != nil:
    section.add "NewDBClusterIdentifier", valid_604798
  var valid_604799 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_604799 = validateParameter(valid_604799, JArray, required = false,
                                 default = nil)
  if valid_604799 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_604799
  var valid_604800 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_604800 = validateParameter(valid_604800, JString, required = false,
                                 default = nil)
  if valid_604800 != nil:
    section.add "DBClusterParameterGroupName", valid_604800
  var valid_604801 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_604801 = validateParameter(valid_604801, JBool, required = false, default = nil)
  if valid_604801 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_604801
  var valid_604802 = formData.getOrDefault("PreferredBackupWindow")
  valid_604802 = validateParameter(valid_604802, JString, required = false,
                                 default = nil)
  if valid_604802 != nil:
    section.add "PreferredBackupWindow", valid_604802
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_604803 = formData.getOrDefault("DBClusterIdentifier")
  valid_604803 = validateParameter(valid_604803, JString, required = true,
                                 default = nil)
  if valid_604803 != nil:
    section.add "DBClusterIdentifier", valid_604803
  var valid_604804 = formData.getOrDefault("EngineVersion")
  valid_604804 = validateParameter(valid_604804, JString, required = false,
                                 default = nil)
  if valid_604804 != nil:
    section.add "EngineVersion", valid_604804
  var valid_604805 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_604805 = validateParameter(valid_604805, JString, required = false,
                                 default = nil)
  if valid_604805 != nil:
    section.add "PreferredMaintenanceWindow", valid_604805
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604806: Call_PostModifyDBCluster_604779; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_604806.validator(path, query, header, formData, body)
  let scheme = call_604806.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604806.url(scheme.get, call_604806.host, call_604806.base,
                         call_604806.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604806, url, valid)

proc call*(call_604807: Call_PostModifyDBCluster_604779;
          DBClusterIdentifier: string;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          BackupRetentionPeriod: int = 0; MasterUserPassword: string = "";
          NewDBClusterIdentifier: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Action: string = "ModifyDBCluster";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_604808 = newJObject()
  var formData_604809 = newJObject()
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_604809.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_604809, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_604809, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_604809.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_604809, "OptionGroupName", newJString(OptionGroupName))
  add(formData_604809, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_604809, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_604809, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_604809.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_604808, "Action", newJString(Action))
  add(formData_604809, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_604809, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_604809, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_604809, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_604809, "EngineVersion", newJString(EngineVersion))
  add(query_604808, "Version", newJString(Version))
  add(formData_604809, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_604807.call(nil, query_604808, nil, formData_604809, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_604779(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_604780, base: "/",
    url: url_PostModifyDBCluster_604781, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_604749 = ref object of OpenApiRestCall_602450
proc url_GetModifyDBCluster_604751(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBCluster_604750(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: JString (required)
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_604752 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_604752 = validateParameter(valid_604752, JString, required = false,
                                 default = nil)
  if valid_604752 != nil:
    section.add "PreferredMaintenanceWindow", valid_604752
  var valid_604753 = query.getOrDefault("DBClusterParameterGroupName")
  valid_604753 = validateParameter(valid_604753, JString, required = false,
                                 default = nil)
  if valid_604753 != nil:
    section.add "DBClusterParameterGroupName", valid_604753
  var valid_604754 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_604754 = validateParameter(valid_604754, JBool, required = false, default = nil)
  if valid_604754 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_604754
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_604755 = query.getOrDefault("DBClusterIdentifier")
  valid_604755 = validateParameter(valid_604755, JString, required = true,
                                 default = nil)
  if valid_604755 != nil:
    section.add "DBClusterIdentifier", valid_604755
  var valid_604756 = query.getOrDefault("OptionGroupName")
  valid_604756 = validateParameter(valid_604756, JString, required = false,
                                 default = nil)
  if valid_604756 != nil:
    section.add "OptionGroupName", valid_604756
  var valid_604757 = query.getOrDefault("MasterUserPassword")
  valid_604757 = validateParameter(valid_604757, JString, required = false,
                                 default = nil)
  if valid_604757 != nil:
    section.add "MasterUserPassword", valid_604757
  var valid_604758 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_604758 = validateParameter(valid_604758, JArray, required = false,
                                 default = nil)
  if valid_604758 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_604758
  var valid_604759 = query.getOrDefault("VpcSecurityGroupIds")
  valid_604759 = validateParameter(valid_604759, JArray, required = false,
                                 default = nil)
  if valid_604759 != nil:
    section.add "VpcSecurityGroupIds", valid_604759
  var valid_604760 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_604760 = validateParameter(valid_604760, JArray, required = false,
                                 default = nil)
  if valid_604760 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_604760
  var valid_604761 = query.getOrDefault("BackupRetentionPeriod")
  valid_604761 = validateParameter(valid_604761, JInt, required = false, default = nil)
  if valid_604761 != nil:
    section.add "BackupRetentionPeriod", valid_604761
  var valid_604762 = query.getOrDefault("NewDBClusterIdentifier")
  valid_604762 = validateParameter(valid_604762, JString, required = false,
                                 default = nil)
  if valid_604762 != nil:
    section.add "NewDBClusterIdentifier", valid_604762
  var valid_604763 = query.getOrDefault("Action")
  valid_604763 = validateParameter(valid_604763, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_604763 != nil:
    section.add "Action", valid_604763
  var valid_604764 = query.getOrDefault("EngineVersion")
  valid_604764 = validateParameter(valid_604764, JString, required = false,
                                 default = nil)
  if valid_604764 != nil:
    section.add "EngineVersion", valid_604764
  var valid_604765 = query.getOrDefault("Port")
  valid_604765 = validateParameter(valid_604765, JInt, required = false, default = nil)
  if valid_604765 != nil:
    section.add "Port", valid_604765
  var valid_604766 = query.getOrDefault("PreferredBackupWindow")
  valid_604766 = validateParameter(valid_604766, JString, required = false,
                                 default = nil)
  if valid_604766 != nil:
    section.add "PreferredBackupWindow", valid_604766
  var valid_604767 = query.getOrDefault("Version")
  valid_604767 = validateParameter(valid_604767, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604767 != nil:
    section.add "Version", valid_604767
  var valid_604768 = query.getOrDefault("ApplyImmediately")
  valid_604768 = validateParameter(valid_604768, JBool, required = false, default = nil)
  if valid_604768 != nil:
    section.add "ApplyImmediately", valid_604768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604769 = header.getOrDefault("X-Amz-Date")
  valid_604769 = validateParameter(valid_604769, JString, required = false,
                                 default = nil)
  if valid_604769 != nil:
    section.add "X-Amz-Date", valid_604769
  var valid_604770 = header.getOrDefault("X-Amz-Security-Token")
  valid_604770 = validateParameter(valid_604770, JString, required = false,
                                 default = nil)
  if valid_604770 != nil:
    section.add "X-Amz-Security-Token", valid_604770
  var valid_604771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604771 = validateParameter(valid_604771, JString, required = false,
                                 default = nil)
  if valid_604771 != nil:
    section.add "X-Amz-Content-Sha256", valid_604771
  var valid_604772 = header.getOrDefault("X-Amz-Algorithm")
  valid_604772 = validateParameter(valid_604772, JString, required = false,
                                 default = nil)
  if valid_604772 != nil:
    section.add "X-Amz-Algorithm", valid_604772
  var valid_604773 = header.getOrDefault("X-Amz-Signature")
  valid_604773 = validateParameter(valid_604773, JString, required = false,
                                 default = nil)
  if valid_604773 != nil:
    section.add "X-Amz-Signature", valid_604773
  var valid_604774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604774 = validateParameter(valid_604774, JString, required = false,
                                 default = nil)
  if valid_604774 != nil:
    section.add "X-Amz-SignedHeaders", valid_604774
  var valid_604775 = header.getOrDefault("X-Amz-Credential")
  valid_604775 = validateParameter(valid_604775, JString, required = false,
                                 default = nil)
  if valid_604775 != nil:
    section.add "X-Amz-Credential", valid_604775
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604776: Call_GetModifyDBCluster_604749; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_604776.validator(path, query, header, formData, body)
  let scheme = call_604776.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604776.url(scheme.get, call_604776.host, call_604776.base,
                         call_604776.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604776, url, valid)

proc call*(call_604777: Call_GetModifyDBCluster_604749;
          DBClusterIdentifier: string; PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0; NewDBClusterIdentifier: string = "";
          Action: string = "ModifyDBCluster"; EngineVersion: string = ""; Port: int = 0;
          PreferredBackupWindow: string = ""; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  var query_604778 = newJObject()
  add(query_604778, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_604778, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_604778, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_604778, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604778, "OptionGroupName", newJString(OptionGroupName))
  add(query_604778, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_604778.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_604778.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_604778.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_604778, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_604778, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_604778, "Action", newJString(Action))
  add(query_604778, "EngineVersion", newJString(EngineVersion))
  add(query_604778, "Port", newJInt(Port))
  add(query_604778, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_604778, "Version", newJString(Version))
  add(query_604778, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_604777.call(nil, query_604778, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_604749(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_604750,
    base: "/", url: url_GetModifyDBCluster_604751,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_604827 = ref object of OpenApiRestCall_602450
proc url_PostModifyDBClusterParameterGroup_604829(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_604828(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604830 = query.getOrDefault("Action")
  valid_604830 = validateParameter(valid_604830, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_604830 != nil:
    section.add "Action", valid_604830
  var valid_604831 = query.getOrDefault("Version")
  valid_604831 = validateParameter(valid_604831, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604831 != nil:
    section.add "Version", valid_604831
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604832 = header.getOrDefault("X-Amz-Date")
  valid_604832 = validateParameter(valid_604832, JString, required = false,
                                 default = nil)
  if valid_604832 != nil:
    section.add "X-Amz-Date", valid_604832
  var valid_604833 = header.getOrDefault("X-Amz-Security-Token")
  valid_604833 = validateParameter(valid_604833, JString, required = false,
                                 default = nil)
  if valid_604833 != nil:
    section.add "X-Amz-Security-Token", valid_604833
  var valid_604834 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604834 = validateParameter(valid_604834, JString, required = false,
                                 default = nil)
  if valid_604834 != nil:
    section.add "X-Amz-Content-Sha256", valid_604834
  var valid_604835 = header.getOrDefault("X-Amz-Algorithm")
  valid_604835 = validateParameter(valid_604835, JString, required = false,
                                 default = nil)
  if valid_604835 != nil:
    section.add "X-Amz-Algorithm", valid_604835
  var valid_604836 = header.getOrDefault("X-Amz-Signature")
  valid_604836 = validateParameter(valid_604836, JString, required = false,
                                 default = nil)
  if valid_604836 != nil:
    section.add "X-Amz-Signature", valid_604836
  var valid_604837 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604837 = validateParameter(valid_604837, JString, required = false,
                                 default = nil)
  if valid_604837 != nil:
    section.add "X-Amz-SignedHeaders", valid_604837
  var valid_604838 = header.getOrDefault("X-Amz-Credential")
  valid_604838 = validateParameter(valid_604838, JString, required = false,
                                 default = nil)
  if valid_604838 != nil:
    section.add "X-Amz-Credential", valid_604838
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_604839 = formData.getOrDefault("Parameters")
  valid_604839 = validateParameter(valid_604839, JArray, required = true, default = nil)
  if valid_604839 != nil:
    section.add "Parameters", valid_604839
  var valid_604840 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_604840 = validateParameter(valid_604840, JString, required = true,
                                 default = nil)
  if valid_604840 != nil:
    section.add "DBClusterParameterGroupName", valid_604840
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604841: Call_PostModifyDBClusterParameterGroup_604827;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_604841.validator(path, query, header, formData, body)
  let scheme = call_604841.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604841.url(scheme.get, call_604841.host, call_604841.base,
                         call_604841.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604841, url, valid)

proc call*(call_604842: Call_PostModifyDBClusterParameterGroup_604827;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_604843 = newJObject()
  var formData_604844 = newJObject()
  if Parameters != nil:
    formData_604844.add "Parameters", Parameters
  add(query_604843, "Action", newJString(Action))
  add(formData_604844, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_604843, "Version", newJString(Version))
  result = call_604842.call(nil, query_604843, nil, formData_604844, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_604827(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_604828, base: "/",
    url: url_PostModifyDBClusterParameterGroup_604829,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_604810 = ref object of OpenApiRestCall_602450
proc url_GetModifyDBClusterParameterGroup_604812(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_604811(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_604813 = query.getOrDefault("DBClusterParameterGroupName")
  valid_604813 = validateParameter(valid_604813, JString, required = true,
                                 default = nil)
  if valid_604813 != nil:
    section.add "DBClusterParameterGroupName", valid_604813
  var valid_604814 = query.getOrDefault("Parameters")
  valid_604814 = validateParameter(valid_604814, JArray, required = true, default = nil)
  if valid_604814 != nil:
    section.add "Parameters", valid_604814
  var valid_604815 = query.getOrDefault("Action")
  valid_604815 = validateParameter(valid_604815, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_604815 != nil:
    section.add "Action", valid_604815
  var valid_604816 = query.getOrDefault("Version")
  valid_604816 = validateParameter(valid_604816, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604816 != nil:
    section.add "Version", valid_604816
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604817 = header.getOrDefault("X-Amz-Date")
  valid_604817 = validateParameter(valid_604817, JString, required = false,
                                 default = nil)
  if valid_604817 != nil:
    section.add "X-Amz-Date", valid_604817
  var valid_604818 = header.getOrDefault("X-Amz-Security-Token")
  valid_604818 = validateParameter(valid_604818, JString, required = false,
                                 default = nil)
  if valid_604818 != nil:
    section.add "X-Amz-Security-Token", valid_604818
  var valid_604819 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604819 = validateParameter(valid_604819, JString, required = false,
                                 default = nil)
  if valid_604819 != nil:
    section.add "X-Amz-Content-Sha256", valid_604819
  var valid_604820 = header.getOrDefault("X-Amz-Algorithm")
  valid_604820 = validateParameter(valid_604820, JString, required = false,
                                 default = nil)
  if valid_604820 != nil:
    section.add "X-Amz-Algorithm", valid_604820
  var valid_604821 = header.getOrDefault("X-Amz-Signature")
  valid_604821 = validateParameter(valid_604821, JString, required = false,
                                 default = nil)
  if valid_604821 != nil:
    section.add "X-Amz-Signature", valid_604821
  var valid_604822 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604822 = validateParameter(valid_604822, JString, required = false,
                                 default = nil)
  if valid_604822 != nil:
    section.add "X-Amz-SignedHeaders", valid_604822
  var valid_604823 = header.getOrDefault("X-Amz-Credential")
  valid_604823 = validateParameter(valid_604823, JString, required = false,
                                 default = nil)
  if valid_604823 != nil:
    section.add "X-Amz-Credential", valid_604823
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604824: Call_GetModifyDBClusterParameterGroup_604810;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_604824.validator(path, query, header, formData, body)
  let scheme = call_604824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604824.url(scheme.get, call_604824.host, call_604824.base,
                         call_604824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604824, url, valid)

proc call*(call_604825: Call_GetModifyDBClusterParameterGroup_604810;
          DBClusterParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604826 = newJObject()
  add(query_604826, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_604826.add "Parameters", Parameters
  add(query_604826, "Action", newJString(Action))
  add(query_604826, "Version", newJString(Version))
  result = call_604825.call(nil, query_604826, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_604810(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_604811, base: "/",
    url: url_GetModifyDBClusterParameterGroup_604812,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_604864 = ref object of OpenApiRestCall_602450
proc url_PostModifyDBClusterSnapshotAttribute_604866(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_604865(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604867 = query.getOrDefault("Action")
  valid_604867 = validateParameter(valid_604867, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_604867 != nil:
    section.add "Action", valid_604867
  var valid_604868 = query.getOrDefault("Version")
  valid_604868 = validateParameter(valid_604868, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604868 != nil:
    section.add "Version", valid_604868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604869 = header.getOrDefault("X-Amz-Date")
  valid_604869 = validateParameter(valid_604869, JString, required = false,
                                 default = nil)
  if valid_604869 != nil:
    section.add "X-Amz-Date", valid_604869
  var valid_604870 = header.getOrDefault("X-Amz-Security-Token")
  valid_604870 = validateParameter(valid_604870, JString, required = false,
                                 default = nil)
  if valid_604870 != nil:
    section.add "X-Amz-Security-Token", valid_604870
  var valid_604871 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604871 = validateParameter(valid_604871, JString, required = false,
                                 default = nil)
  if valid_604871 != nil:
    section.add "X-Amz-Content-Sha256", valid_604871
  var valid_604872 = header.getOrDefault("X-Amz-Algorithm")
  valid_604872 = validateParameter(valid_604872, JString, required = false,
                                 default = nil)
  if valid_604872 != nil:
    section.add "X-Amz-Algorithm", valid_604872
  var valid_604873 = header.getOrDefault("X-Amz-Signature")
  valid_604873 = validateParameter(valid_604873, JString, required = false,
                                 default = nil)
  if valid_604873 != nil:
    section.add "X-Amz-Signature", valid_604873
  var valid_604874 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604874 = validateParameter(valid_604874, JString, required = false,
                                 default = nil)
  if valid_604874 != nil:
    section.add "X-Amz-SignedHeaders", valid_604874
  var valid_604875 = header.getOrDefault("X-Amz-Credential")
  valid_604875 = validateParameter(valid_604875, JString, required = false,
                                 default = nil)
  if valid_604875 != nil:
    section.add "X-Amz-Credential", valid_604875
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_604876 = formData.getOrDefault("AttributeName")
  valid_604876 = validateParameter(valid_604876, JString, required = true,
                                 default = nil)
  if valid_604876 != nil:
    section.add "AttributeName", valid_604876
  var valid_604877 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604877 = validateParameter(valid_604877, JString, required = true,
                                 default = nil)
  if valid_604877 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604877
  var valid_604878 = formData.getOrDefault("ValuesToRemove")
  valid_604878 = validateParameter(valid_604878, JArray, required = false,
                                 default = nil)
  if valid_604878 != nil:
    section.add "ValuesToRemove", valid_604878
  var valid_604879 = formData.getOrDefault("ValuesToAdd")
  valid_604879 = validateParameter(valid_604879, JArray, required = false,
                                 default = nil)
  if valid_604879 != nil:
    section.add "ValuesToAdd", valid_604879
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604880: Call_PostModifyDBClusterSnapshotAttribute_604864;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_604880.validator(path, query, header, formData, body)
  let scheme = call_604880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604880.url(scheme.get, call_604880.host, call_604880.base,
                         call_604880.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604880, url, valid)

proc call*(call_604881: Call_PostModifyDBClusterSnapshotAttribute_604864;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_604882 = newJObject()
  var formData_604883 = newJObject()
  add(formData_604883, "AttributeName", newJString(AttributeName))
  add(formData_604883, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_604882, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_604883.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_604883.add "ValuesToAdd", ValuesToAdd
  add(query_604882, "Version", newJString(Version))
  result = call_604881.call(nil, query_604882, nil, formData_604883, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_604864(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_604865, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_604866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_604845 = ref object of OpenApiRestCall_602450
proc url_GetModifyDBClusterSnapshotAttribute_604847(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_604846(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_604848 = query.getOrDefault("AttributeName")
  valid_604848 = validateParameter(valid_604848, JString, required = true,
                                 default = nil)
  if valid_604848 != nil:
    section.add "AttributeName", valid_604848
  var valid_604849 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_604849 = validateParameter(valid_604849, JString, required = true,
                                 default = nil)
  if valid_604849 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_604849
  var valid_604850 = query.getOrDefault("ValuesToAdd")
  valid_604850 = validateParameter(valid_604850, JArray, required = false,
                                 default = nil)
  if valid_604850 != nil:
    section.add "ValuesToAdd", valid_604850
  var valid_604851 = query.getOrDefault("Action")
  valid_604851 = validateParameter(valid_604851, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_604851 != nil:
    section.add "Action", valid_604851
  var valid_604852 = query.getOrDefault("ValuesToRemove")
  valid_604852 = validateParameter(valid_604852, JArray, required = false,
                                 default = nil)
  if valid_604852 != nil:
    section.add "ValuesToRemove", valid_604852
  var valid_604853 = query.getOrDefault("Version")
  valid_604853 = validateParameter(valid_604853, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604853 != nil:
    section.add "Version", valid_604853
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604854 = header.getOrDefault("X-Amz-Date")
  valid_604854 = validateParameter(valid_604854, JString, required = false,
                                 default = nil)
  if valid_604854 != nil:
    section.add "X-Amz-Date", valid_604854
  var valid_604855 = header.getOrDefault("X-Amz-Security-Token")
  valid_604855 = validateParameter(valid_604855, JString, required = false,
                                 default = nil)
  if valid_604855 != nil:
    section.add "X-Amz-Security-Token", valid_604855
  var valid_604856 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604856 = validateParameter(valid_604856, JString, required = false,
                                 default = nil)
  if valid_604856 != nil:
    section.add "X-Amz-Content-Sha256", valid_604856
  var valid_604857 = header.getOrDefault("X-Amz-Algorithm")
  valid_604857 = validateParameter(valid_604857, JString, required = false,
                                 default = nil)
  if valid_604857 != nil:
    section.add "X-Amz-Algorithm", valid_604857
  var valid_604858 = header.getOrDefault("X-Amz-Signature")
  valid_604858 = validateParameter(valid_604858, JString, required = false,
                                 default = nil)
  if valid_604858 != nil:
    section.add "X-Amz-Signature", valid_604858
  var valid_604859 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604859 = validateParameter(valid_604859, JString, required = false,
                                 default = nil)
  if valid_604859 != nil:
    section.add "X-Amz-SignedHeaders", valid_604859
  var valid_604860 = header.getOrDefault("X-Amz-Credential")
  valid_604860 = validateParameter(valid_604860, JString, required = false,
                                 default = nil)
  if valid_604860 != nil:
    section.add "X-Amz-Credential", valid_604860
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604861: Call_GetModifyDBClusterSnapshotAttribute_604845;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_604861.validator(path, query, header, formData, body)
  let scheme = call_604861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604861.url(scheme.get, call_604861.host, call_604861.base,
                         call_604861.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604861, url, valid)

proc call*(call_604862: Call_GetModifyDBClusterSnapshotAttribute_604845;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_604863 = newJObject()
  add(query_604863, "AttributeName", newJString(AttributeName))
  add(query_604863, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if ValuesToAdd != nil:
    query_604863.add "ValuesToAdd", ValuesToAdd
  add(query_604863, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_604863.add "ValuesToRemove", ValuesToRemove
  add(query_604863, "Version", newJString(Version))
  result = call_604862.call(nil, query_604863, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_604845(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_604846, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_604847,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_604936 = ref object of OpenApiRestCall_602450
proc url_PostModifyDBInstance_604938(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBInstance_604937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_604939 = query.getOrDefault("Action")
  valid_604939 = validateParameter(valid_604939, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_604939 != nil:
    section.add "Action", valid_604939
  var valid_604940 = query.getOrDefault("Version")
  valid_604940 = validateParameter(valid_604940, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604940 != nil:
    section.add "Version", valid_604940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604941 = header.getOrDefault("X-Amz-Date")
  valid_604941 = validateParameter(valid_604941, JString, required = false,
                                 default = nil)
  if valid_604941 != nil:
    section.add "X-Amz-Date", valid_604941
  var valid_604942 = header.getOrDefault("X-Amz-Security-Token")
  valid_604942 = validateParameter(valid_604942, JString, required = false,
                                 default = nil)
  if valid_604942 != nil:
    section.add "X-Amz-Security-Token", valid_604942
  var valid_604943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604943 = validateParameter(valid_604943, JString, required = false,
                                 default = nil)
  if valid_604943 != nil:
    section.add "X-Amz-Content-Sha256", valid_604943
  var valid_604944 = header.getOrDefault("X-Amz-Algorithm")
  valid_604944 = validateParameter(valid_604944, JString, required = false,
                                 default = nil)
  if valid_604944 != nil:
    section.add "X-Amz-Algorithm", valid_604944
  var valid_604945 = header.getOrDefault("X-Amz-Signature")
  valid_604945 = validateParameter(valid_604945, JString, required = false,
                                 default = nil)
  if valid_604945 != nil:
    section.add "X-Amz-Signature", valid_604945
  var valid_604946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604946 = validateParameter(valid_604946, JString, required = false,
                                 default = nil)
  if valid_604946 != nil:
    section.add "X-Amz-SignedHeaders", valid_604946
  var valid_604947 = header.getOrDefault("X-Amz-Credential")
  valid_604947 = validateParameter(valid_604947, JString, required = false,
                                 default = nil)
  if valid_604947 != nil:
    section.add "X-Amz-Credential", valid_604947
  result.add "header", section
  ## parameters in `formData` object:
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   StorageType: JString
  ##              : Not supported.
  ##   Domain: JString
  ##         : Not supported.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : Not supported.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  section = newJObject()
  var valid_604948 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_604948 = validateParameter(valid_604948, JArray, required = false,
                                 default = nil)
  if valid_604948 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_604948
  var valid_604949 = formData.getOrDefault("ApplyImmediately")
  valid_604949 = validateParameter(valid_604949, JBool, required = false, default = nil)
  if valid_604949 != nil:
    section.add "ApplyImmediately", valid_604949
  var valid_604950 = formData.getOrDefault("EnablePerformanceInsights")
  valid_604950 = validateParameter(valid_604950, JBool, required = false, default = nil)
  if valid_604950 != nil:
    section.add "EnablePerformanceInsights", valid_604950
  var valid_604951 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_604951 = validateParameter(valid_604951, JArray, required = false,
                                 default = nil)
  if valid_604951 != nil:
    section.add "VpcSecurityGroupIds", valid_604951
  var valid_604952 = formData.getOrDefault("Iops")
  valid_604952 = validateParameter(valid_604952, JInt, required = false, default = nil)
  if valid_604952 != nil:
    section.add "Iops", valid_604952
  var valid_604953 = formData.getOrDefault("BackupRetentionPeriod")
  valid_604953 = validateParameter(valid_604953, JInt, required = false, default = nil)
  if valid_604953 != nil:
    section.add "BackupRetentionPeriod", valid_604953
  var valid_604954 = formData.getOrDefault("TdeCredentialArn")
  valid_604954 = validateParameter(valid_604954, JString, required = false,
                                 default = nil)
  if valid_604954 != nil:
    section.add "TdeCredentialArn", valid_604954
  var valid_604955 = formData.getOrDefault("DBSubnetGroupName")
  valid_604955 = validateParameter(valid_604955, JString, required = false,
                                 default = nil)
  if valid_604955 != nil:
    section.add "DBSubnetGroupName", valid_604955
  var valid_604956 = formData.getOrDefault("MultiAZ")
  valid_604956 = validateParameter(valid_604956, JBool, required = false, default = nil)
  if valid_604956 != nil:
    section.add "MultiAZ", valid_604956
  var valid_604957 = formData.getOrDefault("DBPortNumber")
  valid_604957 = validateParameter(valid_604957, JInt, required = false, default = nil)
  if valid_604957 != nil:
    section.add "DBPortNumber", valid_604957
  var valid_604958 = formData.getOrDefault("PubliclyAccessible")
  valid_604958 = validateParameter(valid_604958, JBool, required = false, default = nil)
  if valid_604958 != nil:
    section.add "PubliclyAccessible", valid_604958
  var valid_604959 = formData.getOrDefault("StorageType")
  valid_604959 = validateParameter(valid_604959, JString, required = false,
                                 default = nil)
  if valid_604959 != nil:
    section.add "StorageType", valid_604959
  var valid_604960 = formData.getOrDefault("Domain")
  valid_604960 = validateParameter(valid_604960, JString, required = false,
                                 default = nil)
  if valid_604960 != nil:
    section.add "Domain", valid_604960
  var valid_604961 = formData.getOrDefault("LicenseModel")
  valid_604961 = validateParameter(valid_604961, JString, required = false,
                                 default = nil)
  if valid_604961 != nil:
    section.add "LicenseModel", valid_604961
  var valid_604962 = formData.getOrDefault("MonitoringRoleArn")
  valid_604962 = validateParameter(valid_604962, JString, required = false,
                                 default = nil)
  if valid_604962 != nil:
    section.add "MonitoringRoleArn", valid_604962
  var valid_604963 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_604963 = validateParameter(valid_604963, JBool, required = false, default = nil)
  if valid_604963 != nil:
    section.add "AllowMajorVersionUpgrade", valid_604963
  var valid_604964 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_604964 = validateParameter(valid_604964, JString, required = false,
                                 default = nil)
  if valid_604964 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_604964
  var valid_604965 = formData.getOrDefault("DBSecurityGroups")
  valid_604965 = validateParameter(valid_604965, JArray, required = false,
                                 default = nil)
  if valid_604965 != nil:
    section.add "DBSecurityGroups", valid_604965
  var valid_604966 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_604966 = validateParameter(valid_604966, JBool, required = false, default = nil)
  if valid_604966 != nil:
    section.add "CopyTagsToSnapshot", valid_604966
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_604967 = formData.getOrDefault("DBInstanceIdentifier")
  valid_604967 = validateParameter(valid_604967, JString, required = true,
                                 default = nil)
  if valid_604967 != nil:
    section.add "DBInstanceIdentifier", valid_604967
  var valid_604968 = formData.getOrDefault("OptionGroupName")
  valid_604968 = validateParameter(valid_604968, JString, required = false,
                                 default = nil)
  if valid_604968 != nil:
    section.add "OptionGroupName", valid_604968
  var valid_604969 = formData.getOrDefault("DBParameterGroupName")
  valid_604969 = validateParameter(valid_604969, JString, required = false,
                                 default = nil)
  if valid_604969 != nil:
    section.add "DBParameterGroupName", valid_604969
  var valid_604970 = formData.getOrDefault("CACertificateIdentifier")
  valid_604970 = validateParameter(valid_604970, JString, required = false,
                                 default = nil)
  if valid_604970 != nil:
    section.add "CACertificateIdentifier", valid_604970
  var valid_604971 = formData.getOrDefault("MasterUserPassword")
  valid_604971 = validateParameter(valid_604971, JString, required = false,
                                 default = nil)
  if valid_604971 != nil:
    section.add "MasterUserPassword", valid_604971
  var valid_604972 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_604972 = validateParameter(valid_604972, JString, required = false,
                                 default = nil)
  if valid_604972 != nil:
    section.add "NewDBInstanceIdentifier", valid_604972
  var valid_604973 = formData.getOrDefault("TdeCredentialPassword")
  valid_604973 = validateParameter(valid_604973, JString, required = false,
                                 default = nil)
  if valid_604973 != nil:
    section.add "TdeCredentialPassword", valid_604973
  var valid_604974 = formData.getOrDefault("MonitoringInterval")
  valid_604974 = validateParameter(valid_604974, JInt, required = false, default = nil)
  if valid_604974 != nil:
    section.add "MonitoringInterval", valid_604974
  var valid_604975 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_604975 = validateParameter(valid_604975, JArray, required = false,
                                 default = nil)
  if valid_604975 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_604975
  var valid_604976 = formData.getOrDefault("DomainIAMRoleName")
  valid_604976 = validateParameter(valid_604976, JString, required = false,
                                 default = nil)
  if valid_604976 != nil:
    section.add "DomainIAMRoleName", valid_604976
  var valid_604977 = formData.getOrDefault("AllocatedStorage")
  valid_604977 = validateParameter(valid_604977, JInt, required = false, default = nil)
  if valid_604977 != nil:
    section.add "AllocatedStorage", valid_604977
  var valid_604978 = formData.getOrDefault("PromotionTier")
  valid_604978 = validateParameter(valid_604978, JInt, required = false, default = nil)
  if valid_604978 != nil:
    section.add "PromotionTier", valid_604978
  var valid_604979 = formData.getOrDefault("DBInstanceClass")
  valid_604979 = validateParameter(valid_604979, JString, required = false,
                                 default = nil)
  if valid_604979 != nil:
    section.add "DBInstanceClass", valid_604979
  var valid_604980 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_604980 = validateParameter(valid_604980, JBool, required = false, default = nil)
  if valid_604980 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_604980
  var valid_604981 = formData.getOrDefault("PreferredBackupWindow")
  valid_604981 = validateParameter(valid_604981, JString, required = false,
                                 default = nil)
  if valid_604981 != nil:
    section.add "PreferredBackupWindow", valid_604981
  var valid_604982 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_604982 = validateParameter(valid_604982, JBool, required = false, default = nil)
  if valid_604982 != nil:
    section.add "AutoMinorVersionUpgrade", valid_604982
  var valid_604983 = formData.getOrDefault("EngineVersion")
  valid_604983 = validateParameter(valid_604983, JString, required = false,
                                 default = nil)
  if valid_604983 != nil:
    section.add "EngineVersion", valid_604983
  var valid_604984 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_604984 = validateParameter(valid_604984, JString, required = false,
                                 default = nil)
  if valid_604984 != nil:
    section.add "PreferredMaintenanceWindow", valid_604984
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604985: Call_PostModifyDBInstance_604936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_604985.validator(path, query, header, formData, body)
  let scheme = call_604985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604985.url(scheme.get, call_604985.host, call_604985.base,
                         call_604985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604985, url, valid)

proc call*(call_604986: Call_PostModifyDBInstance_604936;
          DBInstanceIdentifier: string;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; TdeCredentialArn: string = "";
          DBSubnetGroupName: string = ""; MultiAZ: bool = false; DBPortNumber: int = 0;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Domain: string = ""; LicenseModel: string = "";
          MonitoringRoleArn: string = ""; AllowMajorVersionUpgrade: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          CACertificateIdentifier: string = ""; MasterUserPassword: string = "";
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          MonitoringInterval: int = 0;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBInstance";
          AllocatedStorage: int = 0; PromotionTier: int = 0;
          DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   StorageType: string
  ##              : Not supported.
  ##   Domain: string
  ##         : Not supported.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : Not supported.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  var query_604987 = newJObject()
  var formData_604988 = newJObject()
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_604988.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_604988, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_604988, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_604988.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_604988, "Iops", newJInt(Iops))
  add(formData_604988, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_604988, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_604988, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_604988, "MultiAZ", newJBool(MultiAZ))
  add(formData_604988, "DBPortNumber", newJInt(DBPortNumber))
  add(formData_604988, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_604988, "StorageType", newJString(StorageType))
  add(formData_604988, "Domain", newJString(Domain))
  add(formData_604988, "LicenseModel", newJString(LicenseModel))
  add(formData_604988, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_604988, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_604988, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_604988.add "DBSecurityGroups", DBSecurityGroups
  add(formData_604988, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_604988, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_604988, "OptionGroupName", newJString(OptionGroupName))
  add(formData_604988, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_604988, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_604988, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_604988, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(formData_604988, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_604988, "MonitoringInterval", newJInt(MonitoringInterval))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_604988.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_604988, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_604987, "Action", newJString(Action))
  add(formData_604988, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_604988, "PromotionTier", newJInt(PromotionTier))
  add(formData_604988, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_604988, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_604988, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_604988, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_604988, "EngineVersion", newJString(EngineVersion))
  add(query_604987, "Version", newJString(Version))
  add(formData_604988, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_604986.call(nil, query_604987, nil, formData_604988, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_604936(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_604937, base: "/",
    url: url_PostModifyDBInstance_604938, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_604884 = ref object of OpenApiRestCall_602450
proc url_GetModifyDBInstance_604886(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBInstance_604885(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   StorageType: JString
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: JString
  ##         : Not supported.
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : Not supported.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: JString (required)
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EnablePerformanceInsights: JBool
  ##                            : Not supported.
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_604887 = query.getOrDefault("MonitoringInterval")
  valid_604887 = validateParameter(valid_604887, JInt, required = false, default = nil)
  if valid_604887 != nil:
    section.add "MonitoringInterval", valid_604887
  var valid_604888 = query.getOrDefault("PromotionTier")
  valid_604888 = validateParameter(valid_604888, JInt, required = false, default = nil)
  if valid_604888 != nil:
    section.add "PromotionTier", valid_604888
  var valid_604889 = query.getOrDefault("AllocatedStorage")
  valid_604889 = validateParameter(valid_604889, JInt, required = false, default = nil)
  if valid_604889 != nil:
    section.add "AllocatedStorage", valid_604889
  var valid_604890 = query.getOrDefault("StorageType")
  valid_604890 = validateParameter(valid_604890, JString, required = false,
                                 default = nil)
  if valid_604890 != nil:
    section.add "StorageType", valid_604890
  var valid_604891 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_604891 = validateParameter(valid_604891, JBool, required = false, default = nil)
  if valid_604891 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_604891
  var valid_604892 = query.getOrDefault("DBSecurityGroups")
  valid_604892 = validateParameter(valid_604892, JArray, required = false,
                                 default = nil)
  if valid_604892 != nil:
    section.add "DBSecurityGroups", valid_604892
  var valid_604893 = query.getOrDefault("MasterUserPassword")
  valid_604893 = validateParameter(valid_604893, JString, required = false,
                                 default = nil)
  if valid_604893 != nil:
    section.add "MasterUserPassword", valid_604893
  var valid_604894 = query.getOrDefault("MonitoringRoleArn")
  valid_604894 = validateParameter(valid_604894, JString, required = false,
                                 default = nil)
  if valid_604894 != nil:
    section.add "MonitoringRoleArn", valid_604894
  var valid_604895 = query.getOrDefault("MultiAZ")
  valid_604895 = validateParameter(valid_604895, JBool, required = false, default = nil)
  if valid_604895 != nil:
    section.add "MultiAZ", valid_604895
  var valid_604896 = query.getOrDefault("TdeCredentialPassword")
  valid_604896 = validateParameter(valid_604896, JString, required = false,
                                 default = nil)
  if valid_604896 != nil:
    section.add "TdeCredentialPassword", valid_604896
  var valid_604897 = query.getOrDefault("DomainIAMRoleName")
  valid_604897 = validateParameter(valid_604897, JString, required = false,
                                 default = nil)
  if valid_604897 != nil:
    section.add "DomainIAMRoleName", valid_604897
  var valid_604898 = query.getOrDefault("BackupRetentionPeriod")
  valid_604898 = validateParameter(valid_604898, JInt, required = false, default = nil)
  if valid_604898 != nil:
    section.add "BackupRetentionPeriod", valid_604898
  var valid_604899 = query.getOrDefault("CopyTagsToSnapshot")
  valid_604899 = validateParameter(valid_604899, JBool, required = false, default = nil)
  if valid_604899 != nil:
    section.add "CopyTagsToSnapshot", valid_604899
  var valid_604900 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_604900 = validateParameter(valid_604900, JString, required = false,
                                 default = nil)
  if valid_604900 != nil:
    section.add "NewDBInstanceIdentifier", valid_604900
  var valid_604901 = query.getOrDefault("DBSubnetGroupName")
  valid_604901 = validateParameter(valid_604901, JString, required = false,
                                 default = nil)
  if valid_604901 != nil:
    section.add "DBSubnetGroupName", valid_604901
  var valid_604902 = query.getOrDefault("Domain")
  valid_604902 = validateParameter(valid_604902, JString, required = false,
                                 default = nil)
  if valid_604902 != nil:
    section.add "Domain", valid_604902
  var valid_604903 = query.getOrDefault("EngineVersion")
  valid_604903 = validateParameter(valid_604903, JString, required = false,
                                 default = nil)
  if valid_604903 != nil:
    section.add "EngineVersion", valid_604903
  var valid_604904 = query.getOrDefault("PreferredBackupWindow")
  valid_604904 = validateParameter(valid_604904, JString, required = false,
                                 default = nil)
  if valid_604904 != nil:
    section.add "PreferredBackupWindow", valid_604904
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_604905 = query.getOrDefault("DBInstanceIdentifier")
  valid_604905 = validateParameter(valid_604905, JString, required = true,
                                 default = nil)
  if valid_604905 != nil:
    section.add "DBInstanceIdentifier", valid_604905
  var valid_604906 = query.getOrDefault("CACertificateIdentifier")
  valid_604906 = validateParameter(valid_604906, JString, required = false,
                                 default = nil)
  if valid_604906 != nil:
    section.add "CACertificateIdentifier", valid_604906
  var valid_604907 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_604907 = validateParameter(valid_604907, JString, required = false,
                                 default = nil)
  if valid_604907 != nil:
    section.add "PreferredMaintenanceWindow", valid_604907
  var valid_604908 = query.getOrDefault("OptionGroupName")
  valid_604908 = validateParameter(valid_604908, JString, required = false,
                                 default = nil)
  if valid_604908 != nil:
    section.add "OptionGroupName", valid_604908
  var valid_604909 = query.getOrDefault("Iops")
  valid_604909 = validateParameter(valid_604909, JInt, required = false, default = nil)
  if valid_604909 != nil:
    section.add "Iops", valid_604909
  var valid_604910 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_604910 = validateParameter(valid_604910, JArray, required = false,
                                 default = nil)
  if valid_604910 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_604910
  var valid_604911 = query.getOrDefault("VpcSecurityGroupIds")
  valid_604911 = validateParameter(valid_604911, JArray, required = false,
                                 default = nil)
  if valid_604911 != nil:
    section.add "VpcSecurityGroupIds", valid_604911
  var valid_604912 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_604912 = validateParameter(valid_604912, JArray, required = false,
                                 default = nil)
  if valid_604912 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_604912
  var valid_604913 = query.getOrDefault("LicenseModel")
  valid_604913 = validateParameter(valid_604913, JString, required = false,
                                 default = nil)
  if valid_604913 != nil:
    section.add "LicenseModel", valid_604913
  var valid_604914 = query.getOrDefault("DBPortNumber")
  valid_604914 = validateParameter(valid_604914, JInt, required = false, default = nil)
  if valid_604914 != nil:
    section.add "DBPortNumber", valid_604914
  var valid_604915 = query.getOrDefault("DBParameterGroupName")
  valid_604915 = validateParameter(valid_604915, JString, required = false,
                                 default = nil)
  if valid_604915 != nil:
    section.add "DBParameterGroupName", valid_604915
  var valid_604916 = query.getOrDefault("DBInstanceClass")
  valid_604916 = validateParameter(valid_604916, JString, required = false,
                                 default = nil)
  if valid_604916 != nil:
    section.add "DBInstanceClass", valid_604916
  var valid_604917 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_604917 = validateParameter(valid_604917, JString, required = false,
                                 default = nil)
  if valid_604917 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_604917
  var valid_604918 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_604918 = validateParameter(valid_604918, JBool, required = false, default = nil)
  if valid_604918 != nil:
    section.add "AllowMajorVersionUpgrade", valid_604918
  var valid_604919 = query.getOrDefault("Action")
  valid_604919 = validateParameter(valid_604919, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_604919 != nil:
    section.add "Action", valid_604919
  var valid_604920 = query.getOrDefault("TdeCredentialArn")
  valid_604920 = validateParameter(valid_604920, JString, required = false,
                                 default = nil)
  if valid_604920 != nil:
    section.add "TdeCredentialArn", valid_604920
  var valid_604921 = query.getOrDefault("PubliclyAccessible")
  valid_604921 = validateParameter(valid_604921, JBool, required = false, default = nil)
  if valid_604921 != nil:
    section.add "PubliclyAccessible", valid_604921
  var valid_604922 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_604922 = validateParameter(valid_604922, JBool, required = false, default = nil)
  if valid_604922 != nil:
    section.add "AutoMinorVersionUpgrade", valid_604922
  var valid_604923 = query.getOrDefault("EnablePerformanceInsights")
  valid_604923 = validateParameter(valid_604923, JBool, required = false, default = nil)
  if valid_604923 != nil:
    section.add "EnablePerformanceInsights", valid_604923
  var valid_604924 = query.getOrDefault("Version")
  valid_604924 = validateParameter(valid_604924, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604924 != nil:
    section.add "Version", valid_604924
  var valid_604925 = query.getOrDefault("ApplyImmediately")
  valid_604925 = validateParameter(valid_604925, JBool, required = false, default = nil)
  if valid_604925 != nil:
    section.add "ApplyImmediately", valid_604925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604926 = header.getOrDefault("X-Amz-Date")
  valid_604926 = validateParameter(valid_604926, JString, required = false,
                                 default = nil)
  if valid_604926 != nil:
    section.add "X-Amz-Date", valid_604926
  var valid_604927 = header.getOrDefault("X-Amz-Security-Token")
  valid_604927 = validateParameter(valid_604927, JString, required = false,
                                 default = nil)
  if valid_604927 != nil:
    section.add "X-Amz-Security-Token", valid_604927
  var valid_604928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604928 = validateParameter(valid_604928, JString, required = false,
                                 default = nil)
  if valid_604928 != nil:
    section.add "X-Amz-Content-Sha256", valid_604928
  var valid_604929 = header.getOrDefault("X-Amz-Algorithm")
  valid_604929 = validateParameter(valid_604929, JString, required = false,
                                 default = nil)
  if valid_604929 != nil:
    section.add "X-Amz-Algorithm", valid_604929
  var valid_604930 = header.getOrDefault("X-Amz-Signature")
  valid_604930 = validateParameter(valid_604930, JString, required = false,
                                 default = nil)
  if valid_604930 != nil:
    section.add "X-Amz-Signature", valid_604930
  var valid_604931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604931 = validateParameter(valid_604931, JString, required = false,
                                 default = nil)
  if valid_604931 != nil:
    section.add "X-Amz-SignedHeaders", valid_604931
  var valid_604932 = header.getOrDefault("X-Amz-Credential")
  valid_604932 = validateParameter(valid_604932, JString, required = false,
                                 default = nil)
  if valid_604932 != nil:
    section.add "X-Amz-Credential", valid_604932
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604933: Call_GetModifyDBInstance_604884; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_604933.validator(path, query, header, formData, body)
  let scheme = call_604933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604933.url(scheme.get, call_604933.host, call_604933.base,
                         call_604933.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_604933, url, valid)

proc call*(call_604934: Call_GetModifyDBInstance_604884;
          DBInstanceIdentifier: string; MonitoringInterval: int = 0;
          PromotionTier: int = 0; AllocatedStorage: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          DBSecurityGroups: JsonNode = nil; MasterUserPassword: string = "";
          MonitoringRoleArn: string = ""; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          NewDBInstanceIdentifier: string = ""; DBSubnetGroupName: string = "";
          Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; CACertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = ""; OptionGroupName: string = "";
          Iops: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          LicenseModel: string = ""; DBPortNumber: int = 0;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          AllowMajorVersionUpgrade: bool = false;
          Action: string = "ModifyDBInstance"; TdeCredentialArn: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   StorageType: string
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: string
  ##         : Not supported.
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : Not supported.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: string (required)
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EnablePerformanceInsights: bool
  ##                            : Not supported.
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  var query_604935 = newJObject()
  add(query_604935, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_604935, "PromotionTier", newJInt(PromotionTier))
  add(query_604935, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_604935, "StorageType", newJString(StorageType))
  add(query_604935, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if DBSecurityGroups != nil:
    query_604935.add "DBSecurityGroups", DBSecurityGroups
  add(query_604935, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_604935, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_604935, "MultiAZ", newJBool(MultiAZ))
  add(query_604935, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_604935, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_604935, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_604935, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_604935, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_604935, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_604935, "Domain", newJString(Domain))
  add(query_604935, "EngineVersion", newJString(EngineVersion))
  add(query_604935, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_604935, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_604935, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_604935, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_604935, "OptionGroupName", newJString(OptionGroupName))
  add(query_604935, "Iops", newJInt(Iops))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_604935.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_604935.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_604935.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_604935, "LicenseModel", newJString(LicenseModel))
  add(query_604935, "DBPortNumber", newJInt(DBPortNumber))
  add(query_604935, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_604935, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_604935, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_604935, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_604935, "Action", newJString(Action))
  add(query_604935, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_604935, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_604935, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_604935, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_604935, "Version", newJString(Version))
  add(query_604935, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_604934.call(nil, query_604935, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_604884(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_604885, base: "/",
    url: url_GetModifyDBInstance_604886, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_605006 = ref object of OpenApiRestCall_602450
proc url_PostModifyDBParameterGroup_605008(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBParameterGroup_605007(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605009 = query.getOrDefault("Action")
  valid_605009 = validateParameter(valid_605009, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_605009 != nil:
    section.add "Action", valid_605009
  var valid_605010 = query.getOrDefault("Version")
  valid_605010 = validateParameter(valid_605010, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605010 != nil:
    section.add "Version", valid_605010
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605011 = header.getOrDefault("X-Amz-Date")
  valid_605011 = validateParameter(valid_605011, JString, required = false,
                                 default = nil)
  if valid_605011 != nil:
    section.add "X-Amz-Date", valid_605011
  var valid_605012 = header.getOrDefault("X-Amz-Security-Token")
  valid_605012 = validateParameter(valid_605012, JString, required = false,
                                 default = nil)
  if valid_605012 != nil:
    section.add "X-Amz-Security-Token", valid_605012
  var valid_605013 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605013 = validateParameter(valid_605013, JString, required = false,
                                 default = nil)
  if valid_605013 != nil:
    section.add "X-Amz-Content-Sha256", valid_605013
  var valid_605014 = header.getOrDefault("X-Amz-Algorithm")
  valid_605014 = validateParameter(valid_605014, JString, required = false,
                                 default = nil)
  if valid_605014 != nil:
    section.add "X-Amz-Algorithm", valid_605014
  var valid_605015 = header.getOrDefault("X-Amz-Signature")
  valid_605015 = validateParameter(valid_605015, JString, required = false,
                                 default = nil)
  if valid_605015 != nil:
    section.add "X-Amz-Signature", valid_605015
  var valid_605016 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605016 = validateParameter(valid_605016, JString, required = false,
                                 default = nil)
  if valid_605016 != nil:
    section.add "X-Amz-SignedHeaders", valid_605016
  var valid_605017 = header.getOrDefault("X-Amz-Credential")
  valid_605017 = validateParameter(valid_605017, JString, required = false,
                                 default = nil)
  if valid_605017 != nil:
    section.add "X-Amz-Credential", valid_605017
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_605018 = formData.getOrDefault("DBParameterGroupName")
  valid_605018 = validateParameter(valid_605018, JString, required = true,
                                 default = nil)
  if valid_605018 != nil:
    section.add "DBParameterGroupName", valid_605018
  var valid_605019 = formData.getOrDefault("Parameters")
  valid_605019 = validateParameter(valid_605019, JArray, required = true, default = nil)
  if valid_605019 != nil:
    section.add "Parameters", valid_605019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605020: Call_PostModifyDBParameterGroup_605006; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_605020.validator(path, query, header, formData, body)
  let scheme = call_605020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605020.url(scheme.get, call_605020.host, call_605020.base,
                         call_605020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605020, url, valid)

proc call*(call_605021: Call_PostModifyDBParameterGroup_605006;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605022 = newJObject()
  var formData_605023 = newJObject()
  add(formData_605023, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_605023.add "Parameters", Parameters
  add(query_605022, "Action", newJString(Action))
  add(query_605022, "Version", newJString(Version))
  result = call_605021.call(nil, query_605022, nil, formData_605023, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_605006(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_605007, base: "/",
    url: url_PostModifyDBParameterGroup_605008,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_604989 = ref object of OpenApiRestCall_602450
proc url_GetModifyDBParameterGroup_604991(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBParameterGroup_604990(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_604992 = query.getOrDefault("DBParameterGroupName")
  valid_604992 = validateParameter(valid_604992, JString, required = true,
                                 default = nil)
  if valid_604992 != nil:
    section.add "DBParameterGroupName", valid_604992
  var valid_604993 = query.getOrDefault("Parameters")
  valid_604993 = validateParameter(valid_604993, JArray, required = true, default = nil)
  if valid_604993 != nil:
    section.add "Parameters", valid_604993
  var valid_604994 = query.getOrDefault("Action")
  valid_604994 = validateParameter(valid_604994, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_604994 != nil:
    section.add "Action", valid_604994
  var valid_604995 = query.getOrDefault("Version")
  valid_604995 = validateParameter(valid_604995, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604995 != nil:
    section.add "Version", valid_604995
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_604996 = header.getOrDefault("X-Amz-Date")
  valid_604996 = validateParameter(valid_604996, JString, required = false,
                                 default = nil)
  if valid_604996 != nil:
    section.add "X-Amz-Date", valid_604996
  var valid_604997 = header.getOrDefault("X-Amz-Security-Token")
  valid_604997 = validateParameter(valid_604997, JString, required = false,
                                 default = nil)
  if valid_604997 != nil:
    section.add "X-Amz-Security-Token", valid_604997
  var valid_604998 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604998 = validateParameter(valid_604998, JString, required = false,
                                 default = nil)
  if valid_604998 != nil:
    section.add "X-Amz-Content-Sha256", valid_604998
  var valid_604999 = header.getOrDefault("X-Amz-Algorithm")
  valid_604999 = validateParameter(valid_604999, JString, required = false,
                                 default = nil)
  if valid_604999 != nil:
    section.add "X-Amz-Algorithm", valid_604999
  var valid_605000 = header.getOrDefault("X-Amz-Signature")
  valid_605000 = validateParameter(valid_605000, JString, required = false,
                                 default = nil)
  if valid_605000 != nil:
    section.add "X-Amz-Signature", valid_605000
  var valid_605001 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605001 = validateParameter(valid_605001, JString, required = false,
                                 default = nil)
  if valid_605001 != nil:
    section.add "X-Amz-SignedHeaders", valid_605001
  var valid_605002 = header.getOrDefault("X-Amz-Credential")
  valid_605002 = validateParameter(valid_605002, JString, required = false,
                                 default = nil)
  if valid_605002 != nil:
    section.add "X-Amz-Credential", valid_605002
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605003: Call_GetModifyDBParameterGroup_604989; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_605003.validator(path, query, header, formData, body)
  let scheme = call_605003.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605003.url(scheme.get, call_605003.host, call_605003.base,
                         call_605003.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605003, url, valid)

proc call*(call_605004: Call_GetModifyDBParameterGroup_604989;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605005 = newJObject()
  add(query_605005, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_605005.add "Parameters", Parameters
  add(query_605005, "Action", newJString(Action))
  add(query_605005, "Version", newJString(Version))
  result = call_605004.call(nil, query_605005, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_604989(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_604990, base: "/",
    url: url_GetModifyDBParameterGroup_604991,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_605042 = ref object of OpenApiRestCall_602450
proc url_PostModifyDBSubnetGroup_605044(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyDBSubnetGroup_605043(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605045 = query.getOrDefault("Action")
  valid_605045 = validateParameter(valid_605045, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_605045 != nil:
    section.add "Action", valid_605045
  var valid_605046 = query.getOrDefault("Version")
  valid_605046 = validateParameter(valid_605046, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605046 != nil:
    section.add "Version", valid_605046
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605047 = header.getOrDefault("X-Amz-Date")
  valid_605047 = validateParameter(valid_605047, JString, required = false,
                                 default = nil)
  if valid_605047 != nil:
    section.add "X-Amz-Date", valid_605047
  var valid_605048 = header.getOrDefault("X-Amz-Security-Token")
  valid_605048 = validateParameter(valid_605048, JString, required = false,
                                 default = nil)
  if valid_605048 != nil:
    section.add "X-Amz-Security-Token", valid_605048
  var valid_605049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605049 = validateParameter(valid_605049, JString, required = false,
                                 default = nil)
  if valid_605049 != nil:
    section.add "X-Amz-Content-Sha256", valid_605049
  var valid_605050 = header.getOrDefault("X-Amz-Algorithm")
  valid_605050 = validateParameter(valid_605050, JString, required = false,
                                 default = nil)
  if valid_605050 != nil:
    section.add "X-Amz-Algorithm", valid_605050
  var valid_605051 = header.getOrDefault("X-Amz-Signature")
  valid_605051 = validateParameter(valid_605051, JString, required = false,
                                 default = nil)
  if valid_605051 != nil:
    section.add "X-Amz-Signature", valid_605051
  var valid_605052 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605052 = validateParameter(valid_605052, JString, required = false,
                                 default = nil)
  if valid_605052 != nil:
    section.add "X-Amz-SignedHeaders", valid_605052
  var valid_605053 = header.getOrDefault("X-Amz-Credential")
  valid_605053 = validateParameter(valid_605053, JString, required = false,
                                 default = nil)
  if valid_605053 != nil:
    section.add "X-Amz-Credential", valid_605053
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_605054 = formData.getOrDefault("DBSubnetGroupName")
  valid_605054 = validateParameter(valid_605054, JString, required = true,
                                 default = nil)
  if valid_605054 != nil:
    section.add "DBSubnetGroupName", valid_605054
  var valid_605055 = formData.getOrDefault("SubnetIds")
  valid_605055 = validateParameter(valid_605055, JArray, required = true, default = nil)
  if valid_605055 != nil:
    section.add "SubnetIds", valid_605055
  var valid_605056 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_605056 = validateParameter(valid_605056, JString, required = false,
                                 default = nil)
  if valid_605056 != nil:
    section.add "DBSubnetGroupDescription", valid_605056
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605057: Call_PostModifyDBSubnetGroup_605042; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_605057.validator(path, query, header, formData, body)
  let scheme = call_605057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605057.url(scheme.get, call_605057.host, call_605057.base,
                         call_605057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605057, url, valid)

proc call*(call_605058: Call_PostModifyDBSubnetGroup_605042;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_605059 = newJObject()
  var formData_605060 = newJObject()
  add(formData_605060, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_605060.add "SubnetIds", SubnetIds
  add(query_605059, "Action", newJString(Action))
  add(formData_605060, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_605059, "Version", newJString(Version))
  result = call_605058.call(nil, query_605059, nil, formData_605060, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_605042(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_605043, base: "/",
    url: url_PostModifyDBSubnetGroup_605044, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_605024 = ref object of OpenApiRestCall_602450
proc url_GetModifyDBSubnetGroup_605026(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyDBSubnetGroup_605025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605027 = query.getOrDefault("Action")
  valid_605027 = validateParameter(valid_605027, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_605027 != nil:
    section.add "Action", valid_605027
  var valid_605028 = query.getOrDefault("DBSubnetGroupName")
  valid_605028 = validateParameter(valid_605028, JString, required = true,
                                 default = nil)
  if valid_605028 != nil:
    section.add "DBSubnetGroupName", valid_605028
  var valid_605029 = query.getOrDefault("SubnetIds")
  valid_605029 = validateParameter(valid_605029, JArray, required = true, default = nil)
  if valid_605029 != nil:
    section.add "SubnetIds", valid_605029
  var valid_605030 = query.getOrDefault("DBSubnetGroupDescription")
  valid_605030 = validateParameter(valid_605030, JString, required = false,
                                 default = nil)
  if valid_605030 != nil:
    section.add "DBSubnetGroupDescription", valid_605030
  var valid_605031 = query.getOrDefault("Version")
  valid_605031 = validateParameter(valid_605031, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605031 != nil:
    section.add "Version", valid_605031
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605032 = header.getOrDefault("X-Amz-Date")
  valid_605032 = validateParameter(valid_605032, JString, required = false,
                                 default = nil)
  if valid_605032 != nil:
    section.add "X-Amz-Date", valid_605032
  var valid_605033 = header.getOrDefault("X-Amz-Security-Token")
  valid_605033 = validateParameter(valid_605033, JString, required = false,
                                 default = nil)
  if valid_605033 != nil:
    section.add "X-Amz-Security-Token", valid_605033
  var valid_605034 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605034 = validateParameter(valid_605034, JString, required = false,
                                 default = nil)
  if valid_605034 != nil:
    section.add "X-Amz-Content-Sha256", valid_605034
  var valid_605035 = header.getOrDefault("X-Amz-Algorithm")
  valid_605035 = validateParameter(valid_605035, JString, required = false,
                                 default = nil)
  if valid_605035 != nil:
    section.add "X-Amz-Algorithm", valid_605035
  var valid_605036 = header.getOrDefault("X-Amz-Signature")
  valid_605036 = validateParameter(valid_605036, JString, required = false,
                                 default = nil)
  if valid_605036 != nil:
    section.add "X-Amz-Signature", valid_605036
  var valid_605037 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605037 = validateParameter(valid_605037, JString, required = false,
                                 default = nil)
  if valid_605037 != nil:
    section.add "X-Amz-SignedHeaders", valid_605037
  var valid_605038 = header.getOrDefault("X-Amz-Credential")
  valid_605038 = validateParameter(valid_605038, JString, required = false,
                                 default = nil)
  if valid_605038 != nil:
    section.add "X-Amz-Credential", valid_605038
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605039: Call_GetModifyDBSubnetGroup_605024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_605039.validator(path, query, header, formData, body)
  let scheme = call_605039.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605039.url(scheme.get, call_605039.host, call_605039.base,
                         call_605039.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605039, url, valid)

proc call*(call_605040: Call_GetModifyDBSubnetGroup_605024;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_605041 = newJObject()
  add(query_605041, "Action", newJString(Action))
  add(query_605041, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_605041.add "SubnetIds", SubnetIds
  add(query_605041, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_605041, "Version", newJString(Version))
  result = call_605040.call(nil, query_605041, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_605024(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_605025, base: "/",
    url: url_GetModifyDBSubnetGroup_605026, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_605081 = ref object of OpenApiRestCall_602450
proc url_PostModifyEventSubscription_605083(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostModifyEventSubscription_605082(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605084 = query.getOrDefault("Action")
  valid_605084 = validateParameter(valid_605084, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_605084 != nil:
    section.add "Action", valid_605084
  var valid_605085 = query.getOrDefault("Version")
  valid_605085 = validateParameter(valid_605085, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605085 != nil:
    section.add "Version", valid_605085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605086 = header.getOrDefault("X-Amz-Date")
  valid_605086 = validateParameter(valid_605086, JString, required = false,
                                 default = nil)
  if valid_605086 != nil:
    section.add "X-Amz-Date", valid_605086
  var valid_605087 = header.getOrDefault("X-Amz-Security-Token")
  valid_605087 = validateParameter(valid_605087, JString, required = false,
                                 default = nil)
  if valid_605087 != nil:
    section.add "X-Amz-Security-Token", valid_605087
  var valid_605088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605088 = validateParameter(valid_605088, JString, required = false,
                                 default = nil)
  if valid_605088 != nil:
    section.add "X-Amz-Content-Sha256", valid_605088
  var valid_605089 = header.getOrDefault("X-Amz-Algorithm")
  valid_605089 = validateParameter(valid_605089, JString, required = false,
                                 default = nil)
  if valid_605089 != nil:
    section.add "X-Amz-Algorithm", valid_605089
  var valid_605090 = header.getOrDefault("X-Amz-Signature")
  valid_605090 = validateParameter(valid_605090, JString, required = false,
                                 default = nil)
  if valid_605090 != nil:
    section.add "X-Amz-Signature", valid_605090
  var valid_605091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605091 = validateParameter(valid_605091, JString, required = false,
                                 default = nil)
  if valid_605091 != nil:
    section.add "X-Amz-SignedHeaders", valid_605091
  var valid_605092 = header.getOrDefault("X-Amz-Credential")
  valid_605092 = validateParameter(valid_605092, JString, required = false,
                                 default = nil)
  if valid_605092 != nil:
    section.add "X-Amz-Credential", valid_605092
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_605093 = formData.getOrDefault("Enabled")
  valid_605093 = validateParameter(valid_605093, JBool, required = false, default = nil)
  if valid_605093 != nil:
    section.add "Enabled", valid_605093
  var valid_605094 = formData.getOrDefault("EventCategories")
  valid_605094 = validateParameter(valid_605094, JArray, required = false,
                                 default = nil)
  if valid_605094 != nil:
    section.add "EventCategories", valid_605094
  var valid_605095 = formData.getOrDefault("SnsTopicArn")
  valid_605095 = validateParameter(valid_605095, JString, required = false,
                                 default = nil)
  if valid_605095 != nil:
    section.add "SnsTopicArn", valid_605095
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_605096 = formData.getOrDefault("SubscriptionName")
  valid_605096 = validateParameter(valid_605096, JString, required = true,
                                 default = nil)
  if valid_605096 != nil:
    section.add "SubscriptionName", valid_605096
  var valid_605097 = formData.getOrDefault("SourceType")
  valid_605097 = validateParameter(valid_605097, JString, required = false,
                                 default = nil)
  if valid_605097 != nil:
    section.add "SourceType", valid_605097
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605098: Call_PostModifyEventSubscription_605081; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_605098.validator(path, query, header, formData, body)
  let scheme = call_605098.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605098.url(scheme.get, call_605098.host, call_605098.base,
                         call_605098.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605098, url, valid)

proc call*(call_605099: Call_PostModifyEventSubscription_605081;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Action: string = "ModifyEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_605100 = newJObject()
  var formData_605101 = newJObject()
  add(formData_605101, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_605101.add "EventCategories", EventCategories
  add(formData_605101, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_605101, "SubscriptionName", newJString(SubscriptionName))
  add(query_605100, "Action", newJString(Action))
  add(query_605100, "Version", newJString(Version))
  add(formData_605101, "SourceType", newJString(SourceType))
  result = call_605099.call(nil, query_605100, nil, formData_605101, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_605081(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_605082, base: "/",
    url: url_PostModifyEventSubscription_605083,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_605061 = ref object of OpenApiRestCall_602450
proc url_GetModifyEventSubscription_605063(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetModifyEventSubscription_605062(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605064 = query.getOrDefault("SourceType")
  valid_605064 = validateParameter(valid_605064, JString, required = false,
                                 default = nil)
  if valid_605064 != nil:
    section.add "SourceType", valid_605064
  var valid_605065 = query.getOrDefault("Enabled")
  valid_605065 = validateParameter(valid_605065, JBool, required = false, default = nil)
  if valid_605065 != nil:
    section.add "Enabled", valid_605065
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605066 = query.getOrDefault("Action")
  valid_605066 = validateParameter(valid_605066, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_605066 != nil:
    section.add "Action", valid_605066
  var valid_605067 = query.getOrDefault("SnsTopicArn")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "SnsTopicArn", valid_605067
  var valid_605068 = query.getOrDefault("EventCategories")
  valid_605068 = validateParameter(valid_605068, JArray, required = false,
                                 default = nil)
  if valid_605068 != nil:
    section.add "EventCategories", valid_605068
  var valid_605069 = query.getOrDefault("SubscriptionName")
  valid_605069 = validateParameter(valid_605069, JString, required = true,
                                 default = nil)
  if valid_605069 != nil:
    section.add "SubscriptionName", valid_605069
  var valid_605070 = query.getOrDefault("Version")
  valid_605070 = validateParameter(valid_605070, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605070 != nil:
    section.add "Version", valid_605070
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605071 = header.getOrDefault("X-Amz-Date")
  valid_605071 = validateParameter(valid_605071, JString, required = false,
                                 default = nil)
  if valid_605071 != nil:
    section.add "X-Amz-Date", valid_605071
  var valid_605072 = header.getOrDefault("X-Amz-Security-Token")
  valid_605072 = validateParameter(valid_605072, JString, required = false,
                                 default = nil)
  if valid_605072 != nil:
    section.add "X-Amz-Security-Token", valid_605072
  var valid_605073 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605073 = validateParameter(valid_605073, JString, required = false,
                                 default = nil)
  if valid_605073 != nil:
    section.add "X-Amz-Content-Sha256", valid_605073
  var valid_605074 = header.getOrDefault("X-Amz-Algorithm")
  valid_605074 = validateParameter(valid_605074, JString, required = false,
                                 default = nil)
  if valid_605074 != nil:
    section.add "X-Amz-Algorithm", valid_605074
  var valid_605075 = header.getOrDefault("X-Amz-Signature")
  valid_605075 = validateParameter(valid_605075, JString, required = false,
                                 default = nil)
  if valid_605075 != nil:
    section.add "X-Amz-Signature", valid_605075
  var valid_605076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605076 = validateParameter(valid_605076, JString, required = false,
                                 default = nil)
  if valid_605076 != nil:
    section.add "X-Amz-SignedHeaders", valid_605076
  var valid_605077 = header.getOrDefault("X-Amz-Credential")
  valid_605077 = validateParameter(valid_605077, JString, required = false,
                                 default = nil)
  if valid_605077 != nil:
    section.add "X-Amz-Credential", valid_605077
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605078: Call_GetModifyEventSubscription_605061; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_605078.validator(path, query, header, formData, body)
  let scheme = call_605078.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605078.url(scheme.get, call_605078.host, call_605078.base,
                         call_605078.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605078, url, valid)

proc call*(call_605079: Call_GetModifyEventSubscription_605061;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   Version: string (required)
  var query_605080 = newJObject()
  add(query_605080, "SourceType", newJString(SourceType))
  add(query_605080, "Enabled", newJBool(Enabled))
  add(query_605080, "Action", newJString(Action))
  add(query_605080, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_605080.add "EventCategories", EventCategories
  add(query_605080, "SubscriptionName", newJString(SubscriptionName))
  add(query_605080, "Version", newJString(Version))
  result = call_605079.call(nil, query_605080, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_605061(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_605062, base: "/",
    url: url_GetModifyEventSubscription_605063,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_605118 = ref object of OpenApiRestCall_602450
proc url_PostPromoteReadReplicaDBCluster_605120(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_605119(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605121 = query.getOrDefault("Action")
  valid_605121 = validateParameter(valid_605121, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_605121 != nil:
    section.add "Action", valid_605121
  var valid_605122 = query.getOrDefault("Version")
  valid_605122 = validateParameter(valid_605122, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605122 != nil:
    section.add "Version", valid_605122
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605123 = header.getOrDefault("X-Amz-Date")
  valid_605123 = validateParameter(valid_605123, JString, required = false,
                                 default = nil)
  if valid_605123 != nil:
    section.add "X-Amz-Date", valid_605123
  var valid_605124 = header.getOrDefault("X-Amz-Security-Token")
  valid_605124 = validateParameter(valid_605124, JString, required = false,
                                 default = nil)
  if valid_605124 != nil:
    section.add "X-Amz-Security-Token", valid_605124
  var valid_605125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605125 = validateParameter(valid_605125, JString, required = false,
                                 default = nil)
  if valid_605125 != nil:
    section.add "X-Amz-Content-Sha256", valid_605125
  var valid_605126 = header.getOrDefault("X-Amz-Algorithm")
  valid_605126 = validateParameter(valid_605126, JString, required = false,
                                 default = nil)
  if valid_605126 != nil:
    section.add "X-Amz-Algorithm", valid_605126
  var valid_605127 = header.getOrDefault("X-Amz-Signature")
  valid_605127 = validateParameter(valid_605127, JString, required = false,
                                 default = nil)
  if valid_605127 != nil:
    section.add "X-Amz-Signature", valid_605127
  var valid_605128 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605128 = validateParameter(valid_605128, JString, required = false,
                                 default = nil)
  if valid_605128 != nil:
    section.add "X-Amz-SignedHeaders", valid_605128
  var valid_605129 = header.getOrDefault("X-Amz-Credential")
  valid_605129 = validateParameter(valid_605129, JString, required = false,
                                 default = nil)
  if valid_605129 != nil:
    section.add "X-Amz-Credential", valid_605129
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605130 = formData.getOrDefault("DBClusterIdentifier")
  valid_605130 = validateParameter(valid_605130, JString, required = true,
                                 default = nil)
  if valid_605130 != nil:
    section.add "DBClusterIdentifier", valid_605130
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605131: Call_PostPromoteReadReplicaDBCluster_605118;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_605131.validator(path, query, header, formData, body)
  let scheme = call_605131.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605131.url(scheme.get, call_605131.host, call_605131.base,
                         call_605131.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605131, url, valid)

proc call*(call_605132: Call_PostPromoteReadReplicaDBCluster_605118;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## Not supported.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Version: string (required)
  var query_605133 = newJObject()
  var formData_605134 = newJObject()
  add(query_605133, "Action", newJString(Action))
  add(formData_605134, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605133, "Version", newJString(Version))
  result = call_605132.call(nil, query_605133, nil, formData_605134, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_605118(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_605119, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_605120,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_605102 = ref object of OpenApiRestCall_602450
proc url_GetPromoteReadReplicaDBCluster_605104(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_605103(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605105 = query.getOrDefault("DBClusterIdentifier")
  valid_605105 = validateParameter(valid_605105, JString, required = true,
                                 default = nil)
  if valid_605105 != nil:
    section.add "DBClusterIdentifier", valid_605105
  var valid_605106 = query.getOrDefault("Action")
  valid_605106 = validateParameter(valid_605106, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_605106 != nil:
    section.add "Action", valid_605106
  var valid_605107 = query.getOrDefault("Version")
  valid_605107 = validateParameter(valid_605107, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605107 != nil:
    section.add "Version", valid_605107
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605108 = header.getOrDefault("X-Amz-Date")
  valid_605108 = validateParameter(valid_605108, JString, required = false,
                                 default = nil)
  if valid_605108 != nil:
    section.add "X-Amz-Date", valid_605108
  var valid_605109 = header.getOrDefault("X-Amz-Security-Token")
  valid_605109 = validateParameter(valid_605109, JString, required = false,
                                 default = nil)
  if valid_605109 != nil:
    section.add "X-Amz-Security-Token", valid_605109
  var valid_605110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605110 = validateParameter(valid_605110, JString, required = false,
                                 default = nil)
  if valid_605110 != nil:
    section.add "X-Amz-Content-Sha256", valid_605110
  var valid_605111 = header.getOrDefault("X-Amz-Algorithm")
  valid_605111 = validateParameter(valid_605111, JString, required = false,
                                 default = nil)
  if valid_605111 != nil:
    section.add "X-Amz-Algorithm", valid_605111
  var valid_605112 = header.getOrDefault("X-Amz-Signature")
  valid_605112 = validateParameter(valid_605112, JString, required = false,
                                 default = nil)
  if valid_605112 != nil:
    section.add "X-Amz-Signature", valid_605112
  var valid_605113 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605113 = validateParameter(valid_605113, JString, required = false,
                                 default = nil)
  if valid_605113 != nil:
    section.add "X-Amz-SignedHeaders", valid_605113
  var valid_605114 = header.getOrDefault("X-Amz-Credential")
  valid_605114 = validateParameter(valid_605114, JString, required = false,
                                 default = nil)
  if valid_605114 != nil:
    section.add "X-Amz-Credential", valid_605114
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605115: Call_GetPromoteReadReplicaDBCluster_605102; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_605115.validator(path, query, header, formData, body)
  let scheme = call_605115.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605115.url(scheme.get, call_605115.host, call_605115.base,
                         call_605115.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605115, url, valid)

proc call*(call_605116: Call_GetPromoteReadReplicaDBCluster_605102;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605117 = newJObject()
  add(query_605117, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605117, "Action", newJString(Action))
  add(query_605117, "Version", newJString(Version))
  result = call_605116.call(nil, query_605117, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_605102(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_605103, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_605104,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_605152 = ref object of OpenApiRestCall_602450
proc url_PostRebootDBInstance_605154(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRebootDBInstance_605153(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605155 = query.getOrDefault("Action")
  valid_605155 = validateParameter(valid_605155, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_605155 != nil:
    section.add "Action", valid_605155
  var valid_605156 = query.getOrDefault("Version")
  valid_605156 = validateParameter(valid_605156, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605156 != nil:
    section.add "Version", valid_605156
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605157 = header.getOrDefault("X-Amz-Date")
  valid_605157 = validateParameter(valid_605157, JString, required = false,
                                 default = nil)
  if valid_605157 != nil:
    section.add "X-Amz-Date", valid_605157
  var valid_605158 = header.getOrDefault("X-Amz-Security-Token")
  valid_605158 = validateParameter(valid_605158, JString, required = false,
                                 default = nil)
  if valid_605158 != nil:
    section.add "X-Amz-Security-Token", valid_605158
  var valid_605159 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605159 = validateParameter(valid_605159, JString, required = false,
                                 default = nil)
  if valid_605159 != nil:
    section.add "X-Amz-Content-Sha256", valid_605159
  var valid_605160 = header.getOrDefault("X-Amz-Algorithm")
  valid_605160 = validateParameter(valid_605160, JString, required = false,
                                 default = nil)
  if valid_605160 != nil:
    section.add "X-Amz-Algorithm", valid_605160
  var valid_605161 = header.getOrDefault("X-Amz-Signature")
  valid_605161 = validateParameter(valid_605161, JString, required = false,
                                 default = nil)
  if valid_605161 != nil:
    section.add "X-Amz-Signature", valid_605161
  var valid_605162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605162 = validateParameter(valid_605162, JString, required = false,
                                 default = nil)
  if valid_605162 != nil:
    section.add "X-Amz-SignedHeaders", valid_605162
  var valid_605163 = header.getOrDefault("X-Amz-Credential")
  valid_605163 = validateParameter(valid_605163, JString, required = false,
                                 default = nil)
  if valid_605163 != nil:
    section.add "X-Amz-Credential", valid_605163
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605164 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605164 = validateParameter(valid_605164, JString, required = true,
                                 default = nil)
  if valid_605164 != nil:
    section.add "DBInstanceIdentifier", valid_605164
  var valid_605165 = formData.getOrDefault("ForceFailover")
  valid_605165 = validateParameter(valid_605165, JBool, required = false, default = nil)
  if valid_605165 != nil:
    section.add "ForceFailover", valid_605165
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605166: Call_PostRebootDBInstance_605152; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_605166.validator(path, query, header, formData, body)
  let scheme = call_605166.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605166.url(scheme.get, call_605166.host, call_605166.base,
                         call_605166.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605166, url, valid)

proc call*(call_605167: Call_PostRebootDBInstance_605152;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: string (required)
  var query_605168 = newJObject()
  var formData_605169 = newJObject()
  add(formData_605169, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605168, "Action", newJString(Action))
  add(formData_605169, "ForceFailover", newJBool(ForceFailover))
  add(query_605168, "Version", newJString(Version))
  result = call_605167.call(nil, query_605168, nil, formData_605169, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_605152(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_605153, base: "/",
    url: url_PostRebootDBInstance_605154, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_605135 = ref object of OpenApiRestCall_602450
proc url_GetRebootDBInstance_605137(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRebootDBInstance_605136(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605138 = query.getOrDefault("Action")
  valid_605138 = validateParameter(valid_605138, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_605138 != nil:
    section.add "Action", valid_605138
  var valid_605139 = query.getOrDefault("ForceFailover")
  valid_605139 = validateParameter(valid_605139, JBool, required = false, default = nil)
  if valid_605139 != nil:
    section.add "ForceFailover", valid_605139
  var valid_605140 = query.getOrDefault("Version")
  valid_605140 = validateParameter(valid_605140, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605140 != nil:
    section.add "Version", valid_605140
  var valid_605141 = query.getOrDefault("DBInstanceIdentifier")
  valid_605141 = validateParameter(valid_605141, JString, required = true,
                                 default = nil)
  if valid_605141 != nil:
    section.add "DBInstanceIdentifier", valid_605141
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605142 = header.getOrDefault("X-Amz-Date")
  valid_605142 = validateParameter(valid_605142, JString, required = false,
                                 default = nil)
  if valid_605142 != nil:
    section.add "X-Amz-Date", valid_605142
  var valid_605143 = header.getOrDefault("X-Amz-Security-Token")
  valid_605143 = validateParameter(valid_605143, JString, required = false,
                                 default = nil)
  if valid_605143 != nil:
    section.add "X-Amz-Security-Token", valid_605143
  var valid_605144 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605144 = validateParameter(valid_605144, JString, required = false,
                                 default = nil)
  if valid_605144 != nil:
    section.add "X-Amz-Content-Sha256", valid_605144
  var valid_605145 = header.getOrDefault("X-Amz-Algorithm")
  valid_605145 = validateParameter(valid_605145, JString, required = false,
                                 default = nil)
  if valid_605145 != nil:
    section.add "X-Amz-Algorithm", valid_605145
  var valid_605146 = header.getOrDefault("X-Amz-Signature")
  valid_605146 = validateParameter(valid_605146, JString, required = false,
                                 default = nil)
  if valid_605146 != nil:
    section.add "X-Amz-Signature", valid_605146
  var valid_605147 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605147 = validateParameter(valid_605147, JString, required = false,
                                 default = nil)
  if valid_605147 != nil:
    section.add "X-Amz-SignedHeaders", valid_605147
  var valid_605148 = header.getOrDefault("X-Amz-Credential")
  valid_605148 = validateParameter(valid_605148, JString, required = false,
                                 default = nil)
  if valid_605148 != nil:
    section.add "X-Amz-Credential", valid_605148
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605149: Call_GetRebootDBInstance_605135; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_605149.validator(path, query, header, formData, body)
  let scheme = call_605149.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605149.url(scheme.get, call_605149.host, call_605149.base,
                         call_605149.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605149, url, valid)

proc call*(call_605150: Call_GetRebootDBInstance_605135;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_605151 = newJObject()
  add(query_605151, "Action", newJString(Action))
  add(query_605151, "ForceFailover", newJBool(ForceFailover))
  add(query_605151, "Version", newJString(Version))
  add(query_605151, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_605150.call(nil, query_605151, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_605135(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_605136, base: "/",
    url: url_GetRebootDBInstance_605137, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_605187 = ref object of OpenApiRestCall_602450
proc url_PostRemoveRoleFromDBCluster_605189(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_605188(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605190 = query.getOrDefault("Action")
  valid_605190 = validateParameter(valid_605190, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_605190 != nil:
    section.add "Action", valid_605190
  var valid_605191 = query.getOrDefault("Version")
  valid_605191 = validateParameter(valid_605191, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605191 != nil:
    section.add "Version", valid_605191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605192 = header.getOrDefault("X-Amz-Date")
  valid_605192 = validateParameter(valid_605192, JString, required = false,
                                 default = nil)
  if valid_605192 != nil:
    section.add "X-Amz-Date", valid_605192
  var valid_605193 = header.getOrDefault("X-Amz-Security-Token")
  valid_605193 = validateParameter(valid_605193, JString, required = false,
                                 default = nil)
  if valid_605193 != nil:
    section.add "X-Amz-Security-Token", valid_605193
  var valid_605194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605194 = validateParameter(valid_605194, JString, required = false,
                                 default = nil)
  if valid_605194 != nil:
    section.add "X-Amz-Content-Sha256", valid_605194
  var valid_605195 = header.getOrDefault("X-Amz-Algorithm")
  valid_605195 = validateParameter(valid_605195, JString, required = false,
                                 default = nil)
  if valid_605195 != nil:
    section.add "X-Amz-Algorithm", valid_605195
  var valid_605196 = header.getOrDefault("X-Amz-Signature")
  valid_605196 = validateParameter(valid_605196, JString, required = false,
                                 default = nil)
  if valid_605196 != nil:
    section.add "X-Amz-Signature", valid_605196
  var valid_605197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605197 = validateParameter(valid_605197, JString, required = false,
                                 default = nil)
  if valid_605197 != nil:
    section.add "X-Amz-SignedHeaders", valid_605197
  var valid_605198 = header.getOrDefault("X-Amz-Credential")
  valid_605198 = validateParameter(valid_605198, JString, required = false,
                                 default = nil)
  if valid_605198 != nil:
    section.add "X-Amz-Credential", valid_605198
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_605199 = formData.getOrDefault("RoleArn")
  valid_605199 = validateParameter(valid_605199, JString, required = true,
                                 default = nil)
  if valid_605199 != nil:
    section.add "RoleArn", valid_605199
  var valid_605200 = formData.getOrDefault("DBClusterIdentifier")
  valid_605200 = validateParameter(valid_605200, JString, required = true,
                                 default = nil)
  if valid_605200 != nil:
    section.add "DBClusterIdentifier", valid_605200
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605201: Call_PostRemoveRoleFromDBCluster_605187; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_605201.validator(path, query, header, formData, body)
  let scheme = call_605201.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605201.url(scheme.get, call_605201.host, call_605201.base,
                         call_605201.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605201, url, valid)

proc call*(call_605202: Call_PostRemoveRoleFromDBCluster_605187; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Version: string (required)
  var query_605203 = newJObject()
  var formData_605204 = newJObject()
  add(formData_605204, "RoleArn", newJString(RoleArn))
  add(query_605203, "Action", newJString(Action))
  add(formData_605204, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605203, "Version", newJString(Version))
  result = call_605202.call(nil, query_605203, nil, formData_605204, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_605187(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_605188, base: "/",
    url: url_PostRemoveRoleFromDBCluster_605189,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_605170 = ref object of OpenApiRestCall_602450
proc url_GetRemoveRoleFromDBCluster_605172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_605171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605173 = query.getOrDefault("DBClusterIdentifier")
  valid_605173 = validateParameter(valid_605173, JString, required = true,
                                 default = nil)
  if valid_605173 != nil:
    section.add "DBClusterIdentifier", valid_605173
  var valid_605174 = query.getOrDefault("RoleArn")
  valid_605174 = validateParameter(valid_605174, JString, required = true,
                                 default = nil)
  if valid_605174 != nil:
    section.add "RoleArn", valid_605174
  var valid_605175 = query.getOrDefault("Action")
  valid_605175 = validateParameter(valid_605175, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_605175 != nil:
    section.add "Action", valid_605175
  var valid_605176 = query.getOrDefault("Version")
  valid_605176 = validateParameter(valid_605176, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605176 != nil:
    section.add "Version", valid_605176
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605177 = header.getOrDefault("X-Amz-Date")
  valid_605177 = validateParameter(valid_605177, JString, required = false,
                                 default = nil)
  if valid_605177 != nil:
    section.add "X-Amz-Date", valid_605177
  var valid_605178 = header.getOrDefault("X-Amz-Security-Token")
  valid_605178 = validateParameter(valid_605178, JString, required = false,
                                 default = nil)
  if valid_605178 != nil:
    section.add "X-Amz-Security-Token", valid_605178
  var valid_605179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605179 = validateParameter(valid_605179, JString, required = false,
                                 default = nil)
  if valid_605179 != nil:
    section.add "X-Amz-Content-Sha256", valid_605179
  var valid_605180 = header.getOrDefault("X-Amz-Algorithm")
  valid_605180 = validateParameter(valid_605180, JString, required = false,
                                 default = nil)
  if valid_605180 != nil:
    section.add "X-Amz-Algorithm", valid_605180
  var valid_605181 = header.getOrDefault("X-Amz-Signature")
  valid_605181 = validateParameter(valid_605181, JString, required = false,
                                 default = nil)
  if valid_605181 != nil:
    section.add "X-Amz-Signature", valid_605181
  var valid_605182 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605182 = validateParameter(valid_605182, JString, required = false,
                                 default = nil)
  if valid_605182 != nil:
    section.add "X-Amz-SignedHeaders", valid_605182
  var valid_605183 = header.getOrDefault("X-Amz-Credential")
  valid_605183 = validateParameter(valid_605183, JString, required = false,
                                 default = nil)
  if valid_605183 != nil:
    section.add "X-Amz-Credential", valid_605183
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605184: Call_GetRemoveRoleFromDBCluster_605170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_605184.validator(path, query, header, formData, body)
  let scheme = call_605184.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605184.url(scheme.get, call_605184.host, call_605184.base,
                         call_605184.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605184, url, valid)

proc call*(call_605185: Call_GetRemoveRoleFromDBCluster_605170;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605186 = newJObject()
  add(query_605186, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605186, "RoleArn", newJString(RoleArn))
  add(query_605186, "Action", newJString(Action))
  add(query_605186, "Version", newJString(Version))
  result = call_605185.call(nil, query_605186, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_605170(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_605171, base: "/",
    url: url_GetRemoveRoleFromDBCluster_605172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_605222 = ref object of OpenApiRestCall_602450
proc url_PostRemoveSourceIdentifierFromSubscription_605224(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_605223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605225 = query.getOrDefault("Action")
  valid_605225 = validateParameter(valid_605225, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_605225 != nil:
    section.add "Action", valid_605225
  var valid_605226 = query.getOrDefault("Version")
  valid_605226 = validateParameter(valid_605226, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605226 != nil:
    section.add "Version", valid_605226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605227 = header.getOrDefault("X-Amz-Date")
  valid_605227 = validateParameter(valid_605227, JString, required = false,
                                 default = nil)
  if valid_605227 != nil:
    section.add "X-Amz-Date", valid_605227
  var valid_605228 = header.getOrDefault("X-Amz-Security-Token")
  valid_605228 = validateParameter(valid_605228, JString, required = false,
                                 default = nil)
  if valid_605228 != nil:
    section.add "X-Amz-Security-Token", valid_605228
  var valid_605229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605229 = validateParameter(valid_605229, JString, required = false,
                                 default = nil)
  if valid_605229 != nil:
    section.add "X-Amz-Content-Sha256", valid_605229
  var valid_605230 = header.getOrDefault("X-Amz-Algorithm")
  valid_605230 = validateParameter(valid_605230, JString, required = false,
                                 default = nil)
  if valid_605230 != nil:
    section.add "X-Amz-Algorithm", valid_605230
  var valid_605231 = header.getOrDefault("X-Amz-Signature")
  valid_605231 = validateParameter(valid_605231, JString, required = false,
                                 default = nil)
  if valid_605231 != nil:
    section.add "X-Amz-Signature", valid_605231
  var valid_605232 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605232 = validateParameter(valid_605232, JString, required = false,
                                 default = nil)
  if valid_605232 != nil:
    section.add "X-Amz-SignedHeaders", valid_605232
  var valid_605233 = header.getOrDefault("X-Amz-Credential")
  valid_605233 = validateParameter(valid_605233, JString, required = false,
                                 default = nil)
  if valid_605233 != nil:
    section.add "X-Amz-Credential", valid_605233
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_605234 = formData.getOrDefault("SourceIdentifier")
  valid_605234 = validateParameter(valid_605234, JString, required = true,
                                 default = nil)
  if valid_605234 != nil:
    section.add "SourceIdentifier", valid_605234
  var valid_605235 = formData.getOrDefault("SubscriptionName")
  valid_605235 = validateParameter(valid_605235, JString, required = true,
                                 default = nil)
  if valid_605235 != nil:
    section.add "SubscriptionName", valid_605235
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605236: Call_PostRemoveSourceIdentifierFromSubscription_605222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_605236.validator(path, query, header, formData, body)
  let scheme = call_605236.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605236.url(scheme.get, call_605236.host, call_605236.base,
                         call_605236.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605236, url, valid)

proc call*(call_605237: Call_PostRemoveSourceIdentifierFromSubscription_605222;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605238 = newJObject()
  var formData_605239 = newJObject()
  add(formData_605239, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_605239, "SubscriptionName", newJString(SubscriptionName))
  add(query_605238, "Action", newJString(Action))
  add(query_605238, "Version", newJString(Version))
  result = call_605237.call(nil, query_605238, nil, formData_605239, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_605222(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_605223,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_605224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_605205 = ref object of OpenApiRestCall_602450
proc url_GetRemoveSourceIdentifierFromSubscription_605207(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_605206(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605208 = query.getOrDefault("Action")
  valid_605208 = validateParameter(valid_605208, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_605208 != nil:
    section.add "Action", valid_605208
  var valid_605209 = query.getOrDefault("SourceIdentifier")
  valid_605209 = validateParameter(valid_605209, JString, required = true,
                                 default = nil)
  if valid_605209 != nil:
    section.add "SourceIdentifier", valid_605209
  var valid_605210 = query.getOrDefault("SubscriptionName")
  valid_605210 = validateParameter(valid_605210, JString, required = true,
                                 default = nil)
  if valid_605210 != nil:
    section.add "SubscriptionName", valid_605210
  var valid_605211 = query.getOrDefault("Version")
  valid_605211 = validateParameter(valid_605211, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605211 != nil:
    section.add "Version", valid_605211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605212 = header.getOrDefault("X-Amz-Date")
  valid_605212 = validateParameter(valid_605212, JString, required = false,
                                 default = nil)
  if valid_605212 != nil:
    section.add "X-Amz-Date", valid_605212
  var valid_605213 = header.getOrDefault("X-Amz-Security-Token")
  valid_605213 = validateParameter(valid_605213, JString, required = false,
                                 default = nil)
  if valid_605213 != nil:
    section.add "X-Amz-Security-Token", valid_605213
  var valid_605214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605214 = validateParameter(valid_605214, JString, required = false,
                                 default = nil)
  if valid_605214 != nil:
    section.add "X-Amz-Content-Sha256", valid_605214
  var valid_605215 = header.getOrDefault("X-Amz-Algorithm")
  valid_605215 = validateParameter(valid_605215, JString, required = false,
                                 default = nil)
  if valid_605215 != nil:
    section.add "X-Amz-Algorithm", valid_605215
  var valid_605216 = header.getOrDefault("X-Amz-Signature")
  valid_605216 = validateParameter(valid_605216, JString, required = false,
                                 default = nil)
  if valid_605216 != nil:
    section.add "X-Amz-Signature", valid_605216
  var valid_605217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605217 = validateParameter(valid_605217, JString, required = false,
                                 default = nil)
  if valid_605217 != nil:
    section.add "X-Amz-SignedHeaders", valid_605217
  var valid_605218 = header.getOrDefault("X-Amz-Credential")
  valid_605218 = validateParameter(valid_605218, JString, required = false,
                                 default = nil)
  if valid_605218 != nil:
    section.add "X-Amz-Credential", valid_605218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605219: Call_GetRemoveSourceIdentifierFromSubscription_605205;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_605219.validator(path, query, header, formData, body)
  let scheme = call_605219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605219.url(scheme.get, call_605219.host, call_605219.base,
                         call_605219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605219, url, valid)

proc call*(call_605220: Call_GetRemoveSourceIdentifierFromSubscription_605205;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Version: string (required)
  var query_605221 = newJObject()
  add(query_605221, "Action", newJString(Action))
  add(query_605221, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_605221, "SubscriptionName", newJString(SubscriptionName))
  add(query_605221, "Version", newJString(Version))
  result = call_605220.call(nil, query_605221, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_605205(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_605206,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_605207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_605257 = ref object of OpenApiRestCall_602450
proc url_PostRemoveTagsFromResource_605259(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRemoveTagsFromResource_605258(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605260 = query.getOrDefault("Action")
  valid_605260 = validateParameter(valid_605260, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_605260 != nil:
    section.add "Action", valid_605260
  var valid_605261 = query.getOrDefault("Version")
  valid_605261 = validateParameter(valid_605261, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605261 != nil:
    section.add "Version", valid_605261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605262 = header.getOrDefault("X-Amz-Date")
  valid_605262 = validateParameter(valid_605262, JString, required = false,
                                 default = nil)
  if valid_605262 != nil:
    section.add "X-Amz-Date", valid_605262
  var valid_605263 = header.getOrDefault("X-Amz-Security-Token")
  valid_605263 = validateParameter(valid_605263, JString, required = false,
                                 default = nil)
  if valid_605263 != nil:
    section.add "X-Amz-Security-Token", valid_605263
  var valid_605264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605264 = validateParameter(valid_605264, JString, required = false,
                                 default = nil)
  if valid_605264 != nil:
    section.add "X-Amz-Content-Sha256", valid_605264
  var valid_605265 = header.getOrDefault("X-Amz-Algorithm")
  valid_605265 = validateParameter(valid_605265, JString, required = false,
                                 default = nil)
  if valid_605265 != nil:
    section.add "X-Amz-Algorithm", valid_605265
  var valid_605266 = header.getOrDefault("X-Amz-Signature")
  valid_605266 = validateParameter(valid_605266, JString, required = false,
                                 default = nil)
  if valid_605266 != nil:
    section.add "X-Amz-Signature", valid_605266
  var valid_605267 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605267 = validateParameter(valid_605267, JString, required = false,
                                 default = nil)
  if valid_605267 != nil:
    section.add "X-Amz-SignedHeaders", valid_605267
  var valid_605268 = header.getOrDefault("X-Amz-Credential")
  valid_605268 = validateParameter(valid_605268, JString, required = false,
                                 default = nil)
  if valid_605268 != nil:
    section.add "X-Amz-Credential", valid_605268
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_605269 = formData.getOrDefault("TagKeys")
  valid_605269 = validateParameter(valid_605269, JArray, required = true, default = nil)
  if valid_605269 != nil:
    section.add "TagKeys", valid_605269
  var valid_605270 = formData.getOrDefault("ResourceName")
  valid_605270 = validateParameter(valid_605270, JString, required = true,
                                 default = nil)
  if valid_605270 != nil:
    section.add "ResourceName", valid_605270
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605271: Call_PostRemoveTagsFromResource_605257; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_605271.validator(path, query, header, formData, body)
  let scheme = call_605271.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605271.url(scheme.get, call_605271.host, call_605271.base,
                         call_605271.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605271, url, valid)

proc call*(call_605272: Call_PostRemoveTagsFromResource_605257; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_605273 = newJObject()
  var formData_605274 = newJObject()
  add(query_605273, "Action", newJString(Action))
  if TagKeys != nil:
    formData_605274.add "TagKeys", TagKeys
  add(formData_605274, "ResourceName", newJString(ResourceName))
  add(query_605273, "Version", newJString(Version))
  result = call_605272.call(nil, query_605273, nil, formData_605274, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_605257(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_605258, base: "/",
    url: url_PostRemoveTagsFromResource_605259,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_605240 = ref object of OpenApiRestCall_602450
proc url_GetRemoveTagsFromResource_605242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRemoveTagsFromResource_605241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_605243 = query.getOrDefault("ResourceName")
  valid_605243 = validateParameter(valid_605243, JString, required = true,
                                 default = nil)
  if valid_605243 != nil:
    section.add "ResourceName", valid_605243
  var valid_605244 = query.getOrDefault("Action")
  valid_605244 = validateParameter(valid_605244, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_605244 != nil:
    section.add "Action", valid_605244
  var valid_605245 = query.getOrDefault("TagKeys")
  valid_605245 = validateParameter(valid_605245, JArray, required = true, default = nil)
  if valid_605245 != nil:
    section.add "TagKeys", valid_605245
  var valid_605246 = query.getOrDefault("Version")
  valid_605246 = validateParameter(valid_605246, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605246 != nil:
    section.add "Version", valid_605246
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605247 = header.getOrDefault("X-Amz-Date")
  valid_605247 = validateParameter(valid_605247, JString, required = false,
                                 default = nil)
  if valid_605247 != nil:
    section.add "X-Amz-Date", valid_605247
  var valid_605248 = header.getOrDefault("X-Amz-Security-Token")
  valid_605248 = validateParameter(valid_605248, JString, required = false,
                                 default = nil)
  if valid_605248 != nil:
    section.add "X-Amz-Security-Token", valid_605248
  var valid_605249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605249 = validateParameter(valid_605249, JString, required = false,
                                 default = nil)
  if valid_605249 != nil:
    section.add "X-Amz-Content-Sha256", valid_605249
  var valid_605250 = header.getOrDefault("X-Amz-Algorithm")
  valid_605250 = validateParameter(valid_605250, JString, required = false,
                                 default = nil)
  if valid_605250 != nil:
    section.add "X-Amz-Algorithm", valid_605250
  var valid_605251 = header.getOrDefault("X-Amz-Signature")
  valid_605251 = validateParameter(valid_605251, JString, required = false,
                                 default = nil)
  if valid_605251 != nil:
    section.add "X-Amz-Signature", valid_605251
  var valid_605252 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605252 = validateParameter(valid_605252, JString, required = false,
                                 default = nil)
  if valid_605252 != nil:
    section.add "X-Amz-SignedHeaders", valid_605252
  var valid_605253 = header.getOrDefault("X-Amz-Credential")
  valid_605253 = validateParameter(valid_605253, JString, required = false,
                                 default = nil)
  if valid_605253 != nil:
    section.add "X-Amz-Credential", valid_605253
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605254: Call_GetRemoveTagsFromResource_605240; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_605254.validator(path, query, header, formData, body)
  let scheme = call_605254.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605254.url(scheme.get, call_605254.host, call_605254.base,
                         call_605254.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605254, url, valid)

proc call*(call_605255: Call_GetRemoveTagsFromResource_605240;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: string (required)
  var query_605256 = newJObject()
  add(query_605256, "ResourceName", newJString(ResourceName))
  add(query_605256, "Action", newJString(Action))
  if TagKeys != nil:
    query_605256.add "TagKeys", TagKeys
  add(query_605256, "Version", newJString(Version))
  result = call_605255.call(nil, query_605256, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_605240(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_605241, base: "/",
    url: url_GetRemoveTagsFromResource_605242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_605293 = ref object of OpenApiRestCall_602450
proc url_PostResetDBClusterParameterGroup_605295(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBClusterParameterGroup_605294(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605296 = query.getOrDefault("Action")
  valid_605296 = validateParameter(valid_605296, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_605296 != nil:
    section.add "Action", valid_605296
  var valid_605297 = query.getOrDefault("Version")
  valid_605297 = validateParameter(valid_605297, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605297 != nil:
    section.add "Version", valid_605297
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605298 = header.getOrDefault("X-Amz-Date")
  valid_605298 = validateParameter(valid_605298, JString, required = false,
                                 default = nil)
  if valid_605298 != nil:
    section.add "X-Amz-Date", valid_605298
  var valid_605299 = header.getOrDefault("X-Amz-Security-Token")
  valid_605299 = validateParameter(valid_605299, JString, required = false,
                                 default = nil)
  if valid_605299 != nil:
    section.add "X-Amz-Security-Token", valid_605299
  var valid_605300 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605300 = validateParameter(valid_605300, JString, required = false,
                                 default = nil)
  if valid_605300 != nil:
    section.add "X-Amz-Content-Sha256", valid_605300
  var valid_605301 = header.getOrDefault("X-Amz-Algorithm")
  valid_605301 = validateParameter(valid_605301, JString, required = false,
                                 default = nil)
  if valid_605301 != nil:
    section.add "X-Amz-Algorithm", valid_605301
  var valid_605302 = header.getOrDefault("X-Amz-Signature")
  valid_605302 = validateParameter(valid_605302, JString, required = false,
                                 default = nil)
  if valid_605302 != nil:
    section.add "X-Amz-Signature", valid_605302
  var valid_605303 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605303 = validateParameter(valid_605303, JString, required = false,
                                 default = nil)
  if valid_605303 != nil:
    section.add "X-Amz-SignedHeaders", valid_605303
  var valid_605304 = header.getOrDefault("X-Amz-Credential")
  valid_605304 = validateParameter(valid_605304, JString, required = false,
                                 default = nil)
  if valid_605304 != nil:
    section.add "X-Amz-Credential", valid_605304
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  section = newJObject()
  var valid_605305 = formData.getOrDefault("Parameters")
  valid_605305 = validateParameter(valid_605305, JArray, required = false,
                                 default = nil)
  if valid_605305 != nil:
    section.add "Parameters", valid_605305
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_605306 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605306 = validateParameter(valid_605306, JString, required = true,
                                 default = nil)
  if valid_605306 != nil:
    section.add "DBClusterParameterGroupName", valid_605306
  var valid_605307 = formData.getOrDefault("ResetAllParameters")
  valid_605307 = validateParameter(valid_605307, JBool, required = false, default = nil)
  if valid_605307 != nil:
    section.add "ResetAllParameters", valid_605307
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605308: Call_PostResetDBClusterParameterGroup_605293;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_605308.validator(path, query, header, formData, body)
  let scheme = call_605308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605308.url(scheme.get, call_605308.host, call_605308.base,
                         call_605308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605308, url, valid)

proc call*(call_605309: Call_PostResetDBClusterParameterGroup_605293;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_605310 = newJObject()
  var formData_605311 = newJObject()
  if Parameters != nil:
    formData_605311.add "Parameters", Parameters
  add(query_605310, "Action", newJString(Action))
  add(formData_605311, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_605311, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_605310, "Version", newJString(Version))
  result = call_605309.call(nil, query_605310, nil, formData_605311, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_605293(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_605294, base: "/",
    url: url_PostResetDBClusterParameterGroup_605295,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_605275 = ref object of OpenApiRestCall_602450
proc url_GetResetDBClusterParameterGroup_605277(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBClusterParameterGroup_605276(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_605278 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605278 = validateParameter(valid_605278, JString, required = true,
                                 default = nil)
  if valid_605278 != nil:
    section.add "DBClusterParameterGroupName", valid_605278
  var valid_605279 = query.getOrDefault("Parameters")
  valid_605279 = validateParameter(valid_605279, JArray, required = false,
                                 default = nil)
  if valid_605279 != nil:
    section.add "Parameters", valid_605279
  var valid_605280 = query.getOrDefault("Action")
  valid_605280 = validateParameter(valid_605280, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_605280 != nil:
    section.add "Action", valid_605280
  var valid_605281 = query.getOrDefault("ResetAllParameters")
  valid_605281 = validateParameter(valid_605281, JBool, required = false, default = nil)
  if valid_605281 != nil:
    section.add "ResetAllParameters", valid_605281
  var valid_605282 = query.getOrDefault("Version")
  valid_605282 = validateParameter(valid_605282, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605282 != nil:
    section.add "Version", valid_605282
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605283 = header.getOrDefault("X-Amz-Date")
  valid_605283 = validateParameter(valid_605283, JString, required = false,
                                 default = nil)
  if valid_605283 != nil:
    section.add "X-Amz-Date", valid_605283
  var valid_605284 = header.getOrDefault("X-Amz-Security-Token")
  valid_605284 = validateParameter(valid_605284, JString, required = false,
                                 default = nil)
  if valid_605284 != nil:
    section.add "X-Amz-Security-Token", valid_605284
  var valid_605285 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605285 = validateParameter(valid_605285, JString, required = false,
                                 default = nil)
  if valid_605285 != nil:
    section.add "X-Amz-Content-Sha256", valid_605285
  var valid_605286 = header.getOrDefault("X-Amz-Algorithm")
  valid_605286 = validateParameter(valid_605286, JString, required = false,
                                 default = nil)
  if valid_605286 != nil:
    section.add "X-Amz-Algorithm", valid_605286
  var valid_605287 = header.getOrDefault("X-Amz-Signature")
  valid_605287 = validateParameter(valid_605287, JString, required = false,
                                 default = nil)
  if valid_605287 != nil:
    section.add "X-Amz-Signature", valid_605287
  var valid_605288 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605288 = validateParameter(valid_605288, JString, required = false,
                                 default = nil)
  if valid_605288 != nil:
    section.add "X-Amz-SignedHeaders", valid_605288
  var valid_605289 = header.getOrDefault("X-Amz-Credential")
  valid_605289 = validateParameter(valid_605289, JString, required = false,
                                 default = nil)
  if valid_605289 != nil:
    section.add "X-Amz-Credential", valid_605289
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605290: Call_GetResetDBClusterParameterGroup_605275;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_605290.validator(path, query, header, formData, body)
  let scheme = call_605290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605290.url(scheme.get, call_605290.host, call_605290.base,
                         call_605290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605290, url, valid)

proc call*(call_605291: Call_GetResetDBClusterParameterGroup_605275;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_605292 = newJObject()
  add(query_605292, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_605292.add "Parameters", Parameters
  add(query_605292, "Action", newJString(Action))
  add(query_605292, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_605292, "Version", newJString(Version))
  result = call_605291.call(nil, query_605292, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_605275(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_605276, base: "/",
    url: url_GetResetDBClusterParameterGroup_605277,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_605330 = ref object of OpenApiRestCall_602450
proc url_PostResetDBParameterGroup_605332(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostResetDBParameterGroup_605331(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605333 = query.getOrDefault("Action")
  valid_605333 = validateParameter(valid_605333, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_605333 != nil:
    section.add "Action", valid_605333
  var valid_605334 = query.getOrDefault("Version")
  valid_605334 = validateParameter(valid_605334, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605334 != nil:
    section.add "Version", valid_605334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605335 = header.getOrDefault("X-Amz-Date")
  valid_605335 = validateParameter(valid_605335, JString, required = false,
                                 default = nil)
  if valid_605335 != nil:
    section.add "X-Amz-Date", valid_605335
  var valid_605336 = header.getOrDefault("X-Amz-Security-Token")
  valid_605336 = validateParameter(valid_605336, JString, required = false,
                                 default = nil)
  if valid_605336 != nil:
    section.add "X-Amz-Security-Token", valid_605336
  var valid_605337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605337 = validateParameter(valid_605337, JString, required = false,
                                 default = nil)
  if valid_605337 != nil:
    section.add "X-Amz-Content-Sha256", valid_605337
  var valid_605338 = header.getOrDefault("X-Amz-Algorithm")
  valid_605338 = validateParameter(valid_605338, JString, required = false,
                                 default = nil)
  if valid_605338 != nil:
    section.add "X-Amz-Algorithm", valid_605338
  var valid_605339 = header.getOrDefault("X-Amz-Signature")
  valid_605339 = validateParameter(valid_605339, JString, required = false,
                                 default = nil)
  if valid_605339 != nil:
    section.add "X-Amz-Signature", valid_605339
  var valid_605340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605340 = validateParameter(valid_605340, JString, required = false,
                                 default = nil)
  if valid_605340 != nil:
    section.add "X-Amz-SignedHeaders", valid_605340
  var valid_605341 = header.getOrDefault("X-Amz-Credential")
  valid_605341 = validateParameter(valid_605341, JString, required = false,
                                 default = nil)
  if valid_605341 != nil:
    section.add "X-Amz-Credential", valid_605341
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_605342 = formData.getOrDefault("DBParameterGroupName")
  valid_605342 = validateParameter(valid_605342, JString, required = true,
                                 default = nil)
  if valid_605342 != nil:
    section.add "DBParameterGroupName", valid_605342
  var valid_605343 = formData.getOrDefault("Parameters")
  valid_605343 = validateParameter(valid_605343, JArray, required = false,
                                 default = nil)
  if valid_605343 != nil:
    section.add "Parameters", valid_605343
  var valid_605344 = formData.getOrDefault("ResetAllParameters")
  valid_605344 = validateParameter(valid_605344, JBool, required = false, default = nil)
  if valid_605344 != nil:
    section.add "ResetAllParameters", valid_605344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605345: Call_PostResetDBParameterGroup_605330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_605345.validator(path, query, header, formData, body)
  let scheme = call_605345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605345.url(scheme.get, call_605345.host, call_605345.base,
                         call_605345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605345, url, valid)

proc call*(call_605346: Call_PostResetDBParameterGroup_605330;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_605347 = newJObject()
  var formData_605348 = newJObject()
  add(formData_605348, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_605348.add "Parameters", Parameters
  add(query_605347, "Action", newJString(Action))
  add(formData_605348, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_605347, "Version", newJString(Version))
  result = call_605346.call(nil, query_605347, nil, formData_605348, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_605330(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_605331, base: "/",
    url: url_PostResetDBParameterGroup_605332,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_605312 = ref object of OpenApiRestCall_602450
proc url_GetResetDBParameterGroup_605314(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetResetDBParameterGroup_605313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_605315 = query.getOrDefault("DBParameterGroupName")
  valid_605315 = validateParameter(valid_605315, JString, required = true,
                                 default = nil)
  if valid_605315 != nil:
    section.add "DBParameterGroupName", valid_605315
  var valid_605316 = query.getOrDefault("Parameters")
  valid_605316 = validateParameter(valid_605316, JArray, required = false,
                                 default = nil)
  if valid_605316 != nil:
    section.add "Parameters", valid_605316
  var valid_605317 = query.getOrDefault("Action")
  valid_605317 = validateParameter(valid_605317, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_605317 != nil:
    section.add "Action", valid_605317
  var valid_605318 = query.getOrDefault("ResetAllParameters")
  valid_605318 = validateParameter(valid_605318, JBool, required = false, default = nil)
  if valid_605318 != nil:
    section.add "ResetAllParameters", valid_605318
  var valid_605319 = query.getOrDefault("Version")
  valid_605319 = validateParameter(valid_605319, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605319 != nil:
    section.add "Version", valid_605319
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605320 = header.getOrDefault("X-Amz-Date")
  valid_605320 = validateParameter(valid_605320, JString, required = false,
                                 default = nil)
  if valid_605320 != nil:
    section.add "X-Amz-Date", valid_605320
  var valid_605321 = header.getOrDefault("X-Amz-Security-Token")
  valid_605321 = validateParameter(valid_605321, JString, required = false,
                                 default = nil)
  if valid_605321 != nil:
    section.add "X-Amz-Security-Token", valid_605321
  var valid_605322 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605322 = validateParameter(valid_605322, JString, required = false,
                                 default = nil)
  if valid_605322 != nil:
    section.add "X-Amz-Content-Sha256", valid_605322
  var valid_605323 = header.getOrDefault("X-Amz-Algorithm")
  valid_605323 = validateParameter(valid_605323, JString, required = false,
                                 default = nil)
  if valid_605323 != nil:
    section.add "X-Amz-Algorithm", valid_605323
  var valid_605324 = header.getOrDefault("X-Amz-Signature")
  valid_605324 = validateParameter(valid_605324, JString, required = false,
                                 default = nil)
  if valid_605324 != nil:
    section.add "X-Amz-Signature", valid_605324
  var valid_605325 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605325 = validateParameter(valid_605325, JString, required = false,
                                 default = nil)
  if valid_605325 != nil:
    section.add "X-Amz-SignedHeaders", valid_605325
  var valid_605326 = header.getOrDefault("X-Amz-Credential")
  valid_605326 = validateParameter(valid_605326, JString, required = false,
                                 default = nil)
  if valid_605326 != nil:
    section.add "X-Amz-Credential", valid_605326
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605327: Call_GetResetDBParameterGroup_605312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_605327.validator(path, query, header, formData, body)
  let scheme = call_605327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605327.url(scheme.get, call_605327.host, call_605327.base,
                         call_605327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605327, url, valid)

proc call*(call_605328: Call_GetResetDBParameterGroup_605312;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_605329 = newJObject()
  add(query_605329, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_605329.add "Parameters", Parameters
  add(query_605329, "Action", newJString(Action))
  add(query_605329, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_605329, "Version", newJString(Version))
  result = call_605328.call(nil, query_605329, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_605312(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_605313, base: "/",
    url: url_GetResetDBParameterGroup_605314, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_605379 = ref object of OpenApiRestCall_602450
proc url_PostRestoreDBClusterFromSnapshot_605381(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_605380(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605382 = query.getOrDefault("Action")
  valid_605382 = validateParameter(valid_605382, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_605382 != nil:
    section.add "Action", valid_605382
  var valid_605383 = query.getOrDefault("Version")
  valid_605383 = validateParameter(valid_605383, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605383 != nil:
    section.add "Version", valid_605383
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605384 = header.getOrDefault("X-Amz-Date")
  valid_605384 = validateParameter(valid_605384, JString, required = false,
                                 default = nil)
  if valid_605384 != nil:
    section.add "X-Amz-Date", valid_605384
  var valid_605385 = header.getOrDefault("X-Amz-Security-Token")
  valid_605385 = validateParameter(valid_605385, JString, required = false,
                                 default = nil)
  if valid_605385 != nil:
    section.add "X-Amz-Security-Token", valid_605385
  var valid_605386 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605386 = validateParameter(valid_605386, JString, required = false,
                                 default = nil)
  if valid_605386 != nil:
    section.add "X-Amz-Content-Sha256", valid_605386
  var valid_605387 = header.getOrDefault("X-Amz-Algorithm")
  valid_605387 = validateParameter(valid_605387, JString, required = false,
                                 default = nil)
  if valid_605387 != nil:
    section.add "X-Amz-Algorithm", valid_605387
  var valid_605388 = header.getOrDefault("X-Amz-Signature")
  valid_605388 = validateParameter(valid_605388, JString, required = false,
                                 default = nil)
  if valid_605388 != nil:
    section.add "X-Amz-Signature", valid_605388
  var valid_605389 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605389 = validateParameter(valid_605389, JString, required = false,
                                 default = nil)
  if valid_605389 != nil:
    section.add "X-Amz-SignedHeaders", valid_605389
  var valid_605390 = header.getOrDefault("X-Amz-Credential")
  valid_605390 = validateParameter(valid_605390, JString, required = false,
                                 default = nil)
  if valid_605390 != nil:
    section.add "X-Amz-Credential", valid_605390
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  section = newJObject()
  var valid_605391 = formData.getOrDefault("Port")
  valid_605391 = validateParameter(valid_605391, JInt, required = false, default = nil)
  if valid_605391 != nil:
    section.add "Port", valid_605391
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_605392 = formData.getOrDefault("Engine")
  valid_605392 = validateParameter(valid_605392, JString, required = true,
                                 default = nil)
  if valid_605392 != nil:
    section.add "Engine", valid_605392
  var valid_605393 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605393 = validateParameter(valid_605393, JArray, required = false,
                                 default = nil)
  if valid_605393 != nil:
    section.add "VpcSecurityGroupIds", valid_605393
  var valid_605394 = formData.getOrDefault("OptionGroupName")
  valid_605394 = validateParameter(valid_605394, JString, required = false,
                                 default = nil)
  if valid_605394 != nil:
    section.add "OptionGroupName", valid_605394
  var valid_605395 = formData.getOrDefault("Tags")
  valid_605395 = validateParameter(valid_605395, JArray, required = false,
                                 default = nil)
  if valid_605395 != nil:
    section.add "Tags", valid_605395
  var valid_605396 = formData.getOrDefault("DBSubnetGroupName")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "DBSubnetGroupName", valid_605396
  var valid_605397 = formData.getOrDefault("AvailabilityZones")
  valid_605397 = validateParameter(valid_605397, JArray, required = false,
                                 default = nil)
  if valid_605397 != nil:
    section.add "AvailabilityZones", valid_605397
  var valid_605398 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605398 = validateParameter(valid_605398, JString, required = false,
                                 default = nil)
  if valid_605398 != nil:
    section.add "DBClusterParameterGroupName", valid_605398
  var valid_605399 = formData.getOrDefault("DatabaseName")
  valid_605399 = validateParameter(valid_605399, JString, required = false,
                                 default = nil)
  if valid_605399 != nil:
    section.add "DatabaseName", valid_605399
  var valid_605400 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_605400 = validateParameter(valid_605400, JArray, required = false,
                                 default = nil)
  if valid_605400 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605400
  var valid_605401 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605401 = validateParameter(valid_605401, JBool, required = false, default = nil)
  if valid_605401 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605401
  var valid_605402 = formData.getOrDefault("KmsKeyId")
  valid_605402 = validateParameter(valid_605402, JString, required = false,
                                 default = nil)
  if valid_605402 != nil:
    section.add "KmsKeyId", valid_605402
  var valid_605403 = formData.getOrDefault("SnapshotIdentifier")
  valid_605403 = validateParameter(valid_605403, JString, required = true,
                                 default = nil)
  if valid_605403 != nil:
    section.add "SnapshotIdentifier", valid_605403
  var valid_605404 = formData.getOrDefault("DBClusterIdentifier")
  valid_605404 = validateParameter(valid_605404, JString, required = true,
                                 default = nil)
  if valid_605404 != nil:
    section.add "DBClusterIdentifier", valid_605404
  var valid_605405 = formData.getOrDefault("EngineVersion")
  valid_605405 = validateParameter(valid_605405, JString, required = false,
                                 default = nil)
  if valid_605405 != nil:
    section.add "EngineVersion", valid_605405
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605406: Call_PostRestoreDBClusterFromSnapshot_605379;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_605406.validator(path, query, header, formData, body)
  let scheme = call_605406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605406.url(scheme.get, call_605406.host, call_605406.base,
                         call_605406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605406, url, valid)

proc call*(call_605407: Call_PostRestoreDBClusterFromSnapshot_605379;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          OptionGroupName: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromSnapshot";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : Not supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Version: string (required)
  var query_605408 = newJObject()
  var formData_605409 = newJObject()
  add(formData_605409, "Port", newJInt(Port))
  add(formData_605409, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_605409.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_605409, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_605409.add "Tags", Tags
  add(formData_605409, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605408, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_605409.add "AvailabilityZones", AvailabilityZones
  add(formData_605409, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_605409, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_605409.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_605409, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605409, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605409, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_605409, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_605409, "EngineVersion", newJString(EngineVersion))
  add(query_605408, "Version", newJString(Version))
  result = call_605407.call(nil, query_605408, nil, formData_605409, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_605379(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_605380, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_605381,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_605349 = ref object of OpenApiRestCall_602450
proc url_GetRestoreDBClusterFromSnapshot_605351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_605350(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_605352 = query.getOrDefault("Engine")
  valid_605352 = validateParameter(valid_605352, JString, required = true,
                                 default = nil)
  if valid_605352 != nil:
    section.add "Engine", valid_605352
  var valid_605353 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605353 = validateParameter(valid_605353, JString, required = false,
                                 default = nil)
  if valid_605353 != nil:
    section.add "DBClusterParameterGroupName", valid_605353
  var valid_605354 = query.getOrDefault("AvailabilityZones")
  valid_605354 = validateParameter(valid_605354, JArray, required = false,
                                 default = nil)
  if valid_605354 != nil:
    section.add "AvailabilityZones", valid_605354
  var valid_605355 = query.getOrDefault("DatabaseName")
  valid_605355 = validateParameter(valid_605355, JString, required = false,
                                 default = nil)
  if valid_605355 != nil:
    section.add "DatabaseName", valid_605355
  var valid_605356 = query.getOrDefault("DBClusterIdentifier")
  valid_605356 = validateParameter(valid_605356, JString, required = true,
                                 default = nil)
  if valid_605356 != nil:
    section.add "DBClusterIdentifier", valid_605356
  var valid_605357 = query.getOrDefault("OptionGroupName")
  valid_605357 = validateParameter(valid_605357, JString, required = false,
                                 default = nil)
  if valid_605357 != nil:
    section.add "OptionGroupName", valid_605357
  var valid_605358 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605358 = validateParameter(valid_605358, JBool, required = false, default = nil)
  if valid_605358 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605358
  var valid_605359 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605359 = validateParameter(valid_605359, JArray, required = false,
                                 default = nil)
  if valid_605359 != nil:
    section.add "VpcSecurityGroupIds", valid_605359
  var valid_605360 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_605360 = validateParameter(valid_605360, JArray, required = false,
                                 default = nil)
  if valid_605360 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605360
  var valid_605361 = query.getOrDefault("Tags")
  valid_605361 = validateParameter(valid_605361, JArray, required = false,
                                 default = nil)
  if valid_605361 != nil:
    section.add "Tags", valid_605361
  var valid_605362 = query.getOrDefault("Action")
  valid_605362 = validateParameter(valid_605362, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_605362 != nil:
    section.add "Action", valid_605362
  var valid_605363 = query.getOrDefault("DBSubnetGroupName")
  valid_605363 = validateParameter(valid_605363, JString, required = false,
                                 default = nil)
  if valid_605363 != nil:
    section.add "DBSubnetGroupName", valid_605363
  var valid_605364 = query.getOrDefault("KmsKeyId")
  valid_605364 = validateParameter(valid_605364, JString, required = false,
                                 default = nil)
  if valid_605364 != nil:
    section.add "KmsKeyId", valid_605364
  var valid_605365 = query.getOrDefault("EngineVersion")
  valid_605365 = validateParameter(valid_605365, JString, required = false,
                                 default = nil)
  if valid_605365 != nil:
    section.add "EngineVersion", valid_605365
  var valid_605366 = query.getOrDefault("Port")
  valid_605366 = validateParameter(valid_605366, JInt, required = false, default = nil)
  if valid_605366 != nil:
    section.add "Port", valid_605366
  var valid_605367 = query.getOrDefault("SnapshotIdentifier")
  valid_605367 = validateParameter(valid_605367, JString, required = true,
                                 default = nil)
  if valid_605367 != nil:
    section.add "SnapshotIdentifier", valid_605367
  var valid_605368 = query.getOrDefault("Version")
  valid_605368 = validateParameter(valid_605368, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605368 != nil:
    section.add "Version", valid_605368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605369 = header.getOrDefault("X-Amz-Date")
  valid_605369 = validateParameter(valid_605369, JString, required = false,
                                 default = nil)
  if valid_605369 != nil:
    section.add "X-Amz-Date", valid_605369
  var valid_605370 = header.getOrDefault("X-Amz-Security-Token")
  valid_605370 = validateParameter(valid_605370, JString, required = false,
                                 default = nil)
  if valid_605370 != nil:
    section.add "X-Amz-Security-Token", valid_605370
  var valid_605371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605371 = validateParameter(valid_605371, JString, required = false,
                                 default = nil)
  if valid_605371 != nil:
    section.add "X-Amz-Content-Sha256", valid_605371
  var valid_605372 = header.getOrDefault("X-Amz-Algorithm")
  valid_605372 = validateParameter(valid_605372, JString, required = false,
                                 default = nil)
  if valid_605372 != nil:
    section.add "X-Amz-Algorithm", valid_605372
  var valid_605373 = header.getOrDefault("X-Amz-Signature")
  valid_605373 = validateParameter(valid_605373, JString, required = false,
                                 default = nil)
  if valid_605373 != nil:
    section.add "X-Amz-Signature", valid_605373
  var valid_605374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605374 = validateParameter(valid_605374, JString, required = false,
                                 default = nil)
  if valid_605374 != nil:
    section.add "X-Amz-SignedHeaders", valid_605374
  var valid_605375 = header.getOrDefault("X-Amz-Credential")
  valid_605375 = validateParameter(valid_605375, JString, required = false,
                                 default = nil)
  if valid_605375 != nil:
    section.add "X-Amz-Credential", valid_605375
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605376: Call_GetRestoreDBClusterFromSnapshot_605349;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_605376.validator(path, query, header, formData, body)
  let scheme = call_605376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605376.url(scheme.get, call_605376.host, call_605376.base,
                         call_605376.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605376, url, valid)

proc call*(call_605377: Call_GetRestoreDBClusterFromSnapshot_605349;
          Engine: string; DBClusterIdentifier: string; SnapshotIdentifier: string;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          Action: string = "RestoreDBClusterFromSnapshot";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DatabaseName: string
  ##               : Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: string (required)
  var query_605378 = newJObject()
  add(query_605378, "Engine", newJString(Engine))
  add(query_605378, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_605378.add "AvailabilityZones", AvailabilityZones
  add(query_605378, "DatabaseName", newJString(DatabaseName))
  add(query_605378, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605378, "OptionGroupName", newJString(OptionGroupName))
  add(query_605378, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_605378.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_605378.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_605378.add "Tags", Tags
  add(query_605378, "Action", newJString(Action))
  add(query_605378, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605378, "KmsKeyId", newJString(KmsKeyId))
  add(query_605378, "EngineVersion", newJString(EngineVersion))
  add(query_605378, "Port", newJInt(Port))
  add(query_605378, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_605378, "Version", newJString(Version))
  result = call_605377.call(nil, query_605378, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_605349(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_605350, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_605351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_605439 = ref object of OpenApiRestCall_602450
proc url_PostRestoreDBClusterToPointInTime_605441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_605440(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605442 = query.getOrDefault("Action")
  valid_605442 = validateParameter(valid_605442, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_605442 != nil:
    section.add "Action", valid_605442
  var valid_605443 = query.getOrDefault("Version")
  valid_605443 = validateParameter(valid_605443, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605443 != nil:
    section.add "Version", valid_605443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605444 = header.getOrDefault("X-Amz-Date")
  valid_605444 = validateParameter(valid_605444, JString, required = false,
                                 default = nil)
  if valid_605444 != nil:
    section.add "X-Amz-Date", valid_605444
  var valid_605445 = header.getOrDefault("X-Amz-Security-Token")
  valid_605445 = validateParameter(valid_605445, JString, required = false,
                                 default = nil)
  if valid_605445 != nil:
    section.add "X-Amz-Security-Token", valid_605445
  var valid_605446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605446 = validateParameter(valid_605446, JString, required = false,
                                 default = nil)
  if valid_605446 != nil:
    section.add "X-Amz-Content-Sha256", valid_605446
  var valid_605447 = header.getOrDefault("X-Amz-Algorithm")
  valid_605447 = validateParameter(valid_605447, JString, required = false,
                                 default = nil)
  if valid_605447 != nil:
    section.add "X-Amz-Algorithm", valid_605447
  var valid_605448 = header.getOrDefault("X-Amz-Signature")
  valid_605448 = validateParameter(valid_605448, JString, required = false,
                                 default = nil)
  if valid_605448 != nil:
    section.add "X-Amz-Signature", valid_605448
  var valid_605449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605449 = validateParameter(valid_605449, JString, required = false,
                                 default = nil)
  if valid_605449 != nil:
    section.add "X-Amz-SignedHeaders", valid_605449
  var valid_605450 = header.getOrDefault("X-Amz-Credential")
  valid_605450 = validateParameter(valid_605450, JString, required = false,
                                 default = nil)
  if valid_605450 != nil:
    section.add "X-Amz-Credential", valid_605450
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_605451 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_605451 = validateParameter(valid_605451, JString, required = true,
                                 default = nil)
  if valid_605451 != nil:
    section.add "SourceDBClusterIdentifier", valid_605451
  var valid_605452 = formData.getOrDefault("UseLatestRestorableTime")
  valid_605452 = validateParameter(valid_605452, JBool, required = false, default = nil)
  if valid_605452 != nil:
    section.add "UseLatestRestorableTime", valid_605452
  var valid_605453 = formData.getOrDefault("Port")
  valid_605453 = validateParameter(valid_605453, JInt, required = false, default = nil)
  if valid_605453 != nil:
    section.add "Port", valid_605453
  var valid_605454 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605454 = validateParameter(valid_605454, JArray, required = false,
                                 default = nil)
  if valid_605454 != nil:
    section.add "VpcSecurityGroupIds", valid_605454
  var valid_605455 = formData.getOrDefault("RestoreToTime")
  valid_605455 = validateParameter(valid_605455, JString, required = false,
                                 default = nil)
  if valid_605455 != nil:
    section.add "RestoreToTime", valid_605455
  var valid_605456 = formData.getOrDefault("OptionGroupName")
  valid_605456 = validateParameter(valid_605456, JString, required = false,
                                 default = nil)
  if valid_605456 != nil:
    section.add "OptionGroupName", valid_605456
  var valid_605457 = formData.getOrDefault("Tags")
  valid_605457 = validateParameter(valid_605457, JArray, required = false,
                                 default = nil)
  if valid_605457 != nil:
    section.add "Tags", valid_605457
  var valid_605458 = formData.getOrDefault("DBSubnetGroupName")
  valid_605458 = validateParameter(valid_605458, JString, required = false,
                                 default = nil)
  if valid_605458 != nil:
    section.add "DBSubnetGroupName", valid_605458
  var valid_605459 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605459 = validateParameter(valid_605459, JString, required = false,
                                 default = nil)
  if valid_605459 != nil:
    section.add "DBClusterParameterGroupName", valid_605459
  var valid_605460 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_605460 = validateParameter(valid_605460, JArray, required = false,
                                 default = nil)
  if valid_605460 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605460
  var valid_605461 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605461 = validateParameter(valid_605461, JBool, required = false, default = nil)
  if valid_605461 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605461
  var valid_605462 = formData.getOrDefault("KmsKeyId")
  valid_605462 = validateParameter(valid_605462, JString, required = false,
                                 default = nil)
  if valid_605462 != nil:
    section.add "KmsKeyId", valid_605462
  var valid_605463 = formData.getOrDefault("RestoreType")
  valid_605463 = validateParameter(valid_605463, JString, required = false,
                                 default = nil)
  if valid_605463 != nil:
    section.add "RestoreType", valid_605463
  var valid_605464 = formData.getOrDefault("DBClusterIdentifier")
  valid_605464 = validateParameter(valid_605464, JString, required = true,
                                 default = nil)
  if valid_605464 != nil:
    section.add "DBClusterIdentifier", valid_605464
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605465: Call_PostRestoreDBClusterToPointInTime_605439;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_605465.validator(path, query, header, formData, body)
  let scheme = call_605465.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605465.url(scheme.get, call_605465.host, call_605465.base,
                         call_605465.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605465, url, valid)

proc call*(call_605466: Call_PostRestoreDBClusterToPointInTime_605439;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          UseLatestRestorableTime: bool = false; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; RestoreToTime: string = "";
          OptionGroupName: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          DBClusterParameterGroupName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  var query_605467 = newJObject()
  var formData_605468 = newJObject()
  add(formData_605468, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_605468, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_605468, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_605468.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_605468, "RestoreToTime", newJString(RestoreToTime))
  add(formData_605468, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_605468.add "Tags", Tags
  add(formData_605468, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605467, "Action", newJString(Action))
  add(formData_605468, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if EnableCloudwatchLogsExports != nil:
    formData_605468.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_605468, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605468, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605468, "RestoreType", newJString(RestoreType))
  add(formData_605468, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605467, "Version", newJString(Version))
  result = call_605466.call(nil, query_605467, nil, formData_605468, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_605439(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_605440, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_605441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_605410 = ref object of OpenApiRestCall_602450
proc url_GetRestoreDBClusterToPointInTime_605412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_605411(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   Action: JString (required)
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_605413 = query.getOrDefault("RestoreToTime")
  valid_605413 = validateParameter(valid_605413, JString, required = false,
                                 default = nil)
  if valid_605413 != nil:
    section.add "RestoreToTime", valid_605413
  var valid_605414 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605414 = validateParameter(valid_605414, JString, required = false,
                                 default = nil)
  if valid_605414 != nil:
    section.add "DBClusterParameterGroupName", valid_605414
  var valid_605415 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605415 = validateParameter(valid_605415, JBool, required = false, default = nil)
  if valid_605415 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605415
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605416 = query.getOrDefault("DBClusterIdentifier")
  valid_605416 = validateParameter(valid_605416, JString, required = true,
                                 default = nil)
  if valid_605416 != nil:
    section.add "DBClusterIdentifier", valid_605416
  var valid_605417 = query.getOrDefault("OptionGroupName")
  valid_605417 = validateParameter(valid_605417, JString, required = false,
                                 default = nil)
  if valid_605417 != nil:
    section.add "OptionGroupName", valid_605417
  var valid_605418 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605418 = validateParameter(valid_605418, JArray, required = false,
                                 default = nil)
  if valid_605418 != nil:
    section.add "VpcSecurityGroupIds", valid_605418
  var valid_605419 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_605419 = validateParameter(valid_605419, JArray, required = false,
                                 default = nil)
  if valid_605419 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605419
  var valid_605420 = query.getOrDefault("Tags")
  valid_605420 = validateParameter(valid_605420, JArray, required = false,
                                 default = nil)
  if valid_605420 != nil:
    section.add "Tags", valid_605420
  var valid_605421 = query.getOrDefault("RestoreType")
  valid_605421 = validateParameter(valid_605421, JString, required = false,
                                 default = nil)
  if valid_605421 != nil:
    section.add "RestoreType", valid_605421
  var valid_605422 = query.getOrDefault("Action")
  valid_605422 = validateParameter(valid_605422, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_605422 != nil:
    section.add "Action", valid_605422
  var valid_605423 = query.getOrDefault("UseLatestRestorableTime")
  valid_605423 = validateParameter(valid_605423, JBool, required = false, default = nil)
  if valid_605423 != nil:
    section.add "UseLatestRestorableTime", valid_605423
  var valid_605424 = query.getOrDefault("DBSubnetGroupName")
  valid_605424 = validateParameter(valid_605424, JString, required = false,
                                 default = nil)
  if valid_605424 != nil:
    section.add "DBSubnetGroupName", valid_605424
  var valid_605425 = query.getOrDefault("KmsKeyId")
  valid_605425 = validateParameter(valid_605425, JString, required = false,
                                 default = nil)
  if valid_605425 != nil:
    section.add "KmsKeyId", valid_605425
  var valid_605426 = query.getOrDefault("Port")
  valid_605426 = validateParameter(valid_605426, JInt, required = false, default = nil)
  if valid_605426 != nil:
    section.add "Port", valid_605426
  var valid_605427 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_605427 = validateParameter(valid_605427, JString, required = true,
                                 default = nil)
  if valid_605427 != nil:
    section.add "SourceDBClusterIdentifier", valid_605427
  var valid_605428 = query.getOrDefault("Version")
  valid_605428 = validateParameter(valid_605428, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605428 != nil:
    section.add "Version", valid_605428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_605429 = header.getOrDefault("X-Amz-Date")
  valid_605429 = validateParameter(valid_605429, JString, required = false,
                                 default = nil)
  if valid_605429 != nil:
    section.add "X-Amz-Date", valid_605429
  var valid_605430 = header.getOrDefault("X-Amz-Security-Token")
  valid_605430 = validateParameter(valid_605430, JString, required = false,
                                 default = nil)
  if valid_605430 != nil:
    section.add "X-Amz-Security-Token", valid_605430
  var valid_605431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605431 = validateParameter(valid_605431, JString, required = false,
                                 default = nil)
  if valid_605431 != nil:
    section.add "X-Amz-Content-Sha256", valid_605431
  var valid_605432 = header.getOrDefault("X-Amz-Algorithm")
  valid_605432 = validateParameter(valid_605432, JString, required = false,
                                 default = nil)
  if valid_605432 != nil:
    section.add "X-Amz-Algorithm", valid_605432
  var valid_605433 = header.getOrDefault("X-Amz-Signature")
  valid_605433 = validateParameter(valid_605433, JString, required = false,
                                 default = nil)
  if valid_605433 != nil:
    section.add "X-Amz-Signature", valid_605433
  var valid_605434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605434 = validateParameter(valid_605434, JString, required = false,
                                 default = nil)
  if valid_605434 != nil:
    section.add "X-Amz-SignedHeaders", valid_605434
  var valid_605435 = header.getOrDefault("X-Amz-Credential")
  valid_605435 = validateParameter(valid_605435, JString, required = false,
                                 default = nil)
  if valid_605435 != nil:
    section.add "X-Amz-Credential", valid_605435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605436: Call_GetRestoreDBClusterToPointInTime_605410;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_605436.validator(path, query, header, formData, body)
  let scheme = call_605436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605436.url(scheme.get, call_605436.host, call_605436.base,
                         call_605436.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = hook(call_605436, url, valid)

proc call*(call_605437: Call_GetRestoreDBClusterToPointInTime_605410;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreToTime: string = ""; DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          RestoreType: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          UseLatestRestorableTime: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   Action: string (required)
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_605438 = newJObject()
  add(query_605438, "RestoreToTime", newJString(RestoreToTime))
  add(query_605438, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_605438, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_605438, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605438, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_605438.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_605438.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_605438.add "Tags", Tags
  add(query_605438, "RestoreType", newJString(RestoreType))
  add(query_605438, "Action", newJString(Action))
  add(query_605438, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_605438, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605438, "KmsKeyId", newJString(KmsKeyId))
  add(query_605438, "Port", newJInt(Port))
  add(query_605438, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_605438, "Version", newJString(Version))
  result = call_605437.call(nil, query_605438, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_605410(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_605411, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_605412,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc sign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method hook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.sign(input.getOrDefault("query"), SHA256)
