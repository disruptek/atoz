
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5, base64,
  httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Neptune
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                          header: JsonNode = nil; formData: JsonNode = nil;
                          body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                  path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_21625418 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_21625418](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_21625418): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "neptune"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body: string = ""): Recallable {.
    base.}
type
  Call_PostAddRoleToDBCluster_21626018 = ref object of OpenApiRestCall_21625418
proc url_PostAddRoleToDBCluster_21626020(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_21626019(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626021 = query.getOrDefault("Action")
  valid_21626021 = validateParameter(valid_21626021, JString, required = true,
                                   default = newJString("AddRoleToDBCluster"))
  if valid_21626021 != nil:
    section.add "Action", valid_21626021
  var valid_21626022 = query.getOrDefault("Version")
  valid_21626022 = validateParameter(valid_21626022, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626022 != nil:
    section.add "Version", valid_21626022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626023 = header.getOrDefault("X-Amz-Date")
  valid_21626023 = validateParameter(valid_21626023, JString, required = false,
                                   default = nil)
  if valid_21626023 != nil:
    section.add "X-Amz-Date", valid_21626023
  var valid_21626024 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626024 = validateParameter(valid_21626024, JString, required = false,
                                   default = nil)
  if valid_21626024 != nil:
    section.add "X-Amz-Security-Token", valid_21626024
  var valid_21626025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626025 = validateParameter(valid_21626025, JString, required = false,
                                   default = nil)
  if valid_21626025 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626025
  var valid_21626026 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626026 = validateParameter(valid_21626026, JString, required = false,
                                   default = nil)
  if valid_21626026 != nil:
    section.add "X-Amz-Algorithm", valid_21626026
  var valid_21626027 = header.getOrDefault("X-Amz-Signature")
  valid_21626027 = validateParameter(valid_21626027, JString, required = false,
                                   default = nil)
  if valid_21626027 != nil:
    section.add "X-Amz-Signature", valid_21626027
  var valid_21626028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626028 = validateParameter(valid_21626028, JString, required = false,
                                   default = nil)
  if valid_21626028 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626028
  var valid_21626029 = header.getOrDefault("X-Amz-Credential")
  valid_21626029 = validateParameter(valid_21626029, JString, required = false,
                                   default = nil)
  if valid_21626029 != nil:
    section.add "X-Amz-Credential", valid_21626029
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_21626030 = formData.getOrDefault("RoleArn")
  valid_21626030 = validateParameter(valid_21626030, JString, required = true,
                                   default = nil)
  if valid_21626030 != nil:
    section.add "RoleArn", valid_21626030
  var valid_21626031 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626031 = validateParameter(valid_21626031, JString, required = true,
                                   default = nil)
  if valid_21626031 != nil:
    section.add "DBClusterIdentifier", valid_21626031
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626032: Call_PostAddRoleToDBCluster_21626018;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_21626032.validator(path, query, header, formData, body, _)
  let scheme = call_21626032.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626032.makeUrl(scheme.get, call_21626032.host, call_21626032.base,
                               call_21626032.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626032, uri, valid, _)

proc call*(call_21626033: Call_PostAddRoleToDBCluster_21626018; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Version: string (required)
  var query_21626034 = newJObject()
  var formData_21626035 = newJObject()
  add(formData_21626035, "RoleArn", newJString(RoleArn))
  add(query_21626034, "Action", newJString(Action))
  add(formData_21626035, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626034, "Version", newJString(Version))
  result = call_21626033.call(nil, query_21626034, nil, formData_21626035, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_21626018(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_21626019, base: "/",
    makeUrl: url_PostAddRoleToDBCluster_21626020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_21625762 = ref object of OpenApiRestCall_21625418
proc url_GetAddRoleToDBCluster_21625764(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_21625763(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21625865 = query.getOrDefault("DBClusterIdentifier")
  valid_21625865 = validateParameter(valid_21625865, JString, required = true,
                                   default = nil)
  if valid_21625865 != nil:
    section.add "DBClusterIdentifier", valid_21625865
  var valid_21625866 = query.getOrDefault("RoleArn")
  valid_21625866 = validateParameter(valid_21625866, JString, required = true,
                                   default = nil)
  if valid_21625866 != nil:
    section.add "RoleArn", valid_21625866
  var valid_21625881 = query.getOrDefault("Action")
  valid_21625881 = validateParameter(valid_21625881, JString, required = true,
                                   default = newJString("AddRoleToDBCluster"))
  if valid_21625881 != nil:
    section.add "Action", valid_21625881
  var valid_21625882 = query.getOrDefault("Version")
  valid_21625882 = validateParameter(valid_21625882, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21625882 != nil:
    section.add "Version", valid_21625882
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21625883 = header.getOrDefault("X-Amz-Date")
  valid_21625883 = validateParameter(valid_21625883, JString, required = false,
                                   default = nil)
  if valid_21625883 != nil:
    section.add "X-Amz-Date", valid_21625883
  var valid_21625884 = header.getOrDefault("X-Amz-Security-Token")
  valid_21625884 = validateParameter(valid_21625884, JString, required = false,
                                   default = nil)
  if valid_21625884 != nil:
    section.add "X-Amz-Security-Token", valid_21625884
  var valid_21625885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21625885 = validateParameter(valid_21625885, JString, required = false,
                                   default = nil)
  if valid_21625885 != nil:
    section.add "X-Amz-Content-Sha256", valid_21625885
  var valid_21625886 = header.getOrDefault("X-Amz-Algorithm")
  valid_21625886 = validateParameter(valid_21625886, JString, required = false,
                                   default = nil)
  if valid_21625886 != nil:
    section.add "X-Amz-Algorithm", valid_21625886
  var valid_21625887 = header.getOrDefault("X-Amz-Signature")
  valid_21625887 = validateParameter(valid_21625887, JString, required = false,
                                   default = nil)
  if valid_21625887 != nil:
    section.add "X-Amz-Signature", valid_21625887
  var valid_21625888 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21625888 = validateParameter(valid_21625888, JString, required = false,
                                   default = nil)
  if valid_21625888 != nil:
    section.add "X-Amz-SignedHeaders", valid_21625888
  var valid_21625889 = header.getOrDefault("X-Amz-Credential")
  valid_21625889 = validateParameter(valid_21625889, JString, required = false,
                                   default = nil)
  if valid_21625889 != nil:
    section.add "X-Amz-Credential", valid_21625889
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21625914: Call_GetAddRoleToDBCluster_21625762;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_21625914.validator(path, query, header, formData, body, _)
  let scheme = call_21625914.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21625914.makeUrl(scheme.get, call_21625914.host, call_21625914.base,
                               call_21625914.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21625914, uri, valid, _)

proc call*(call_21625977: Call_GetAddRoleToDBCluster_21625762;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21625979 = newJObject()
  add(query_21625979, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21625979, "RoleArn", newJString(RoleArn))
  add(query_21625979, "Action", newJString(Action))
  add(query_21625979, "Version", newJString(Version))
  result = call_21625977.call(nil, query_21625979, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_21625762(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_21625763, base: "/",
    makeUrl: url_GetAddRoleToDBCluster_21625764,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_21626053 = ref object of OpenApiRestCall_21625418
proc url_PostAddSourceIdentifierToSubscription_21626055(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_21626054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626056 = query.getOrDefault("Action")
  valid_21626056 = validateParameter(valid_21626056, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_21626056 != nil:
    section.add "Action", valid_21626056
  var valid_21626057 = query.getOrDefault("Version")
  valid_21626057 = validateParameter(valid_21626057, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626057 != nil:
    section.add "Version", valid_21626057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626058 = header.getOrDefault("X-Amz-Date")
  valid_21626058 = validateParameter(valid_21626058, JString, required = false,
                                   default = nil)
  if valid_21626058 != nil:
    section.add "X-Amz-Date", valid_21626058
  var valid_21626059 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626059 = validateParameter(valid_21626059, JString, required = false,
                                   default = nil)
  if valid_21626059 != nil:
    section.add "X-Amz-Security-Token", valid_21626059
  var valid_21626060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626060 = validateParameter(valid_21626060, JString, required = false,
                                   default = nil)
  if valid_21626060 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626060
  var valid_21626061 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626061 = validateParameter(valid_21626061, JString, required = false,
                                   default = nil)
  if valid_21626061 != nil:
    section.add "X-Amz-Algorithm", valid_21626061
  var valid_21626062 = header.getOrDefault("X-Amz-Signature")
  valid_21626062 = validateParameter(valid_21626062, JString, required = false,
                                   default = nil)
  if valid_21626062 != nil:
    section.add "X-Amz-Signature", valid_21626062
  var valid_21626063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626063 = validateParameter(valid_21626063, JString, required = false,
                                   default = nil)
  if valid_21626063 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626063
  var valid_21626064 = header.getOrDefault("X-Amz-Credential")
  valid_21626064 = validateParameter(valid_21626064, JString, required = false,
                                   default = nil)
  if valid_21626064 != nil:
    section.add "X-Amz-Credential", valid_21626064
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_21626065 = formData.getOrDefault("SourceIdentifier")
  valid_21626065 = validateParameter(valid_21626065, JString, required = true,
                                   default = nil)
  if valid_21626065 != nil:
    section.add "SourceIdentifier", valid_21626065
  var valid_21626066 = formData.getOrDefault("SubscriptionName")
  valid_21626066 = validateParameter(valid_21626066, JString, required = true,
                                   default = nil)
  if valid_21626066 != nil:
    section.add "SubscriptionName", valid_21626066
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626067: Call_PostAddSourceIdentifierToSubscription_21626053;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_21626067.validator(path, query, header, formData, body, _)
  let scheme = call_21626067.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626067.makeUrl(scheme.get, call_21626067.host, call_21626067.base,
                               call_21626067.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626067, uri, valid, _)

proc call*(call_21626068: Call_PostAddSourceIdentifierToSubscription_21626053;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626069 = newJObject()
  var formData_21626070 = newJObject()
  add(formData_21626070, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_21626070, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626069, "Action", newJString(Action))
  add(query_21626069, "Version", newJString(Version))
  result = call_21626068.call(nil, query_21626069, nil, formData_21626070, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_21626053(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_21626054, base: "/",
    makeUrl: url_PostAddSourceIdentifierToSubscription_21626055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_21626036 = ref object of OpenApiRestCall_21625418
proc url_GetAddSourceIdentifierToSubscription_21626038(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_21626037(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626039 = query.getOrDefault("Action")
  valid_21626039 = validateParameter(valid_21626039, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_21626039 != nil:
    section.add "Action", valid_21626039
  var valid_21626040 = query.getOrDefault("SourceIdentifier")
  valid_21626040 = validateParameter(valid_21626040, JString, required = true,
                                   default = nil)
  if valid_21626040 != nil:
    section.add "SourceIdentifier", valid_21626040
  var valid_21626041 = query.getOrDefault("SubscriptionName")
  valid_21626041 = validateParameter(valid_21626041, JString, required = true,
                                   default = nil)
  if valid_21626041 != nil:
    section.add "SubscriptionName", valid_21626041
  var valid_21626042 = query.getOrDefault("Version")
  valid_21626042 = validateParameter(valid_21626042, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626042 != nil:
    section.add "Version", valid_21626042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626043 = header.getOrDefault("X-Amz-Date")
  valid_21626043 = validateParameter(valid_21626043, JString, required = false,
                                   default = nil)
  if valid_21626043 != nil:
    section.add "X-Amz-Date", valid_21626043
  var valid_21626044 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626044 = validateParameter(valid_21626044, JString, required = false,
                                   default = nil)
  if valid_21626044 != nil:
    section.add "X-Amz-Security-Token", valid_21626044
  var valid_21626045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626045 = validateParameter(valid_21626045, JString, required = false,
                                   default = nil)
  if valid_21626045 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626045
  var valid_21626046 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626046 = validateParameter(valid_21626046, JString, required = false,
                                   default = nil)
  if valid_21626046 != nil:
    section.add "X-Amz-Algorithm", valid_21626046
  var valid_21626047 = header.getOrDefault("X-Amz-Signature")
  valid_21626047 = validateParameter(valid_21626047, JString, required = false,
                                   default = nil)
  if valid_21626047 != nil:
    section.add "X-Amz-Signature", valid_21626047
  var valid_21626048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626048 = validateParameter(valid_21626048, JString, required = false,
                                   default = nil)
  if valid_21626048 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626048
  var valid_21626049 = header.getOrDefault("X-Amz-Credential")
  valid_21626049 = validateParameter(valid_21626049, JString, required = false,
                                   default = nil)
  if valid_21626049 != nil:
    section.add "X-Amz-Credential", valid_21626049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626050: Call_GetAddSourceIdentifierToSubscription_21626036;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_21626050.validator(path, query, header, formData, body, _)
  let scheme = call_21626050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626050.makeUrl(scheme.get, call_21626050.host, call_21626050.base,
                               call_21626050.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626050, uri, valid, _)

proc call*(call_21626051: Call_GetAddSourceIdentifierToSubscription_21626036;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Version: string (required)
  var query_21626052 = newJObject()
  add(query_21626052, "Action", newJString(Action))
  add(query_21626052, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21626052, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626052, "Version", newJString(Version))
  result = call_21626051.call(nil, query_21626052, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_21626036(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_21626037, base: "/",
    makeUrl: url_GetAddSourceIdentifierToSubscription_21626038,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_21626088 = ref object of OpenApiRestCall_21625418
proc url_PostAddTagsToResource_21626090(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_21626089(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626091 = query.getOrDefault("Action")
  valid_21626091 = validateParameter(valid_21626091, JString, required = true,
                                   default = newJString("AddTagsToResource"))
  if valid_21626091 != nil:
    section.add "Action", valid_21626091
  var valid_21626092 = query.getOrDefault("Version")
  valid_21626092 = validateParameter(valid_21626092, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626092 != nil:
    section.add "Version", valid_21626092
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626093 = header.getOrDefault("X-Amz-Date")
  valid_21626093 = validateParameter(valid_21626093, JString, required = false,
                                   default = nil)
  if valid_21626093 != nil:
    section.add "X-Amz-Date", valid_21626093
  var valid_21626094 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626094 = validateParameter(valid_21626094, JString, required = false,
                                   default = nil)
  if valid_21626094 != nil:
    section.add "X-Amz-Security-Token", valid_21626094
  var valid_21626095 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626095 = validateParameter(valid_21626095, JString, required = false,
                                   default = nil)
  if valid_21626095 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626095
  var valid_21626096 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626096 = validateParameter(valid_21626096, JString, required = false,
                                   default = nil)
  if valid_21626096 != nil:
    section.add "X-Amz-Algorithm", valid_21626096
  var valid_21626097 = header.getOrDefault("X-Amz-Signature")
  valid_21626097 = validateParameter(valid_21626097, JString, required = false,
                                   default = nil)
  if valid_21626097 != nil:
    section.add "X-Amz-Signature", valid_21626097
  var valid_21626098 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626098 = validateParameter(valid_21626098, JString, required = false,
                                   default = nil)
  if valid_21626098 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626098
  var valid_21626099 = header.getOrDefault("X-Amz-Credential")
  valid_21626099 = validateParameter(valid_21626099, JString, required = false,
                                   default = nil)
  if valid_21626099 != nil:
    section.add "X-Amz-Credential", valid_21626099
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_21626100 = formData.getOrDefault("Tags")
  valid_21626100 = validateParameter(valid_21626100, JArray, required = true,
                                   default = nil)
  if valid_21626100 != nil:
    section.add "Tags", valid_21626100
  var valid_21626101 = formData.getOrDefault("ResourceName")
  valid_21626101 = validateParameter(valid_21626101, JString, required = true,
                                   default = nil)
  if valid_21626101 != nil:
    section.add "ResourceName", valid_21626101
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626102: Call_PostAddTagsToResource_21626088;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_21626102.validator(path, query, header, formData, body, _)
  let scheme = call_21626102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626102.makeUrl(scheme.get, call_21626102.host, call_21626102.base,
                               call_21626102.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626102, uri, valid, _)

proc call*(call_21626103: Call_PostAddTagsToResource_21626088; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_21626104 = newJObject()
  var formData_21626105 = newJObject()
  if Tags != nil:
    formData_21626105.add "Tags", Tags
  add(query_21626104, "Action", newJString(Action))
  add(formData_21626105, "ResourceName", newJString(ResourceName))
  add(query_21626104, "Version", newJString(Version))
  result = call_21626103.call(nil, query_21626104, nil, formData_21626105, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_21626088(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_21626089, base: "/",
    makeUrl: url_PostAddTagsToResource_21626090,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_21626071 = ref object of OpenApiRestCall_21625418
proc url_GetAddTagsToResource_21626073(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_21626072(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_21626074 = query.getOrDefault("Tags")
  valid_21626074 = validateParameter(valid_21626074, JArray, required = true,
                                   default = nil)
  if valid_21626074 != nil:
    section.add "Tags", valid_21626074
  var valid_21626075 = query.getOrDefault("ResourceName")
  valid_21626075 = validateParameter(valid_21626075, JString, required = true,
                                   default = nil)
  if valid_21626075 != nil:
    section.add "ResourceName", valid_21626075
  var valid_21626076 = query.getOrDefault("Action")
  valid_21626076 = validateParameter(valid_21626076, JString, required = true,
                                   default = newJString("AddTagsToResource"))
  if valid_21626076 != nil:
    section.add "Action", valid_21626076
  var valid_21626077 = query.getOrDefault("Version")
  valid_21626077 = validateParameter(valid_21626077, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626077 != nil:
    section.add "Version", valid_21626077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626078 = header.getOrDefault("X-Amz-Date")
  valid_21626078 = validateParameter(valid_21626078, JString, required = false,
                                   default = nil)
  if valid_21626078 != nil:
    section.add "X-Amz-Date", valid_21626078
  var valid_21626079 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626079 = validateParameter(valid_21626079, JString, required = false,
                                   default = nil)
  if valid_21626079 != nil:
    section.add "X-Amz-Security-Token", valid_21626079
  var valid_21626080 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626080 = validateParameter(valid_21626080, JString, required = false,
                                   default = nil)
  if valid_21626080 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626080
  var valid_21626081 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626081 = validateParameter(valid_21626081, JString, required = false,
                                   default = nil)
  if valid_21626081 != nil:
    section.add "X-Amz-Algorithm", valid_21626081
  var valid_21626082 = header.getOrDefault("X-Amz-Signature")
  valid_21626082 = validateParameter(valid_21626082, JString, required = false,
                                   default = nil)
  if valid_21626082 != nil:
    section.add "X-Amz-Signature", valid_21626082
  var valid_21626083 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626083 = validateParameter(valid_21626083, JString, required = false,
                                   default = nil)
  if valid_21626083 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626083
  var valid_21626084 = header.getOrDefault("X-Amz-Credential")
  valid_21626084 = validateParameter(valid_21626084, JString, required = false,
                                   default = nil)
  if valid_21626084 != nil:
    section.add "X-Amz-Credential", valid_21626084
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626085: Call_GetAddTagsToResource_21626071; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_21626085.validator(path, query, header, formData, body, _)
  let scheme = call_21626085.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626085.makeUrl(scheme.get, call_21626085.host, call_21626085.base,
                               call_21626085.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626085, uri, valid, _)

proc call*(call_21626086: Call_GetAddTagsToResource_21626071; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626087 = newJObject()
  if Tags != nil:
    query_21626087.add "Tags", Tags
  add(query_21626087, "ResourceName", newJString(ResourceName))
  add(query_21626087, "Action", newJString(Action))
  add(query_21626087, "Version", newJString(Version))
  result = call_21626086.call(nil, query_21626087, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_21626071(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_21626072, base: "/",
    makeUrl: url_GetAddTagsToResource_21626073,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_21626124 = ref object of OpenApiRestCall_21625418
proc url_PostApplyPendingMaintenanceAction_21626126(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_21626125(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626127 = query.getOrDefault("Action")
  valid_21626127 = validateParameter(valid_21626127, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_21626127 != nil:
    section.add "Action", valid_21626127
  var valid_21626128 = query.getOrDefault("Version")
  valid_21626128 = validateParameter(valid_21626128, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626128 != nil:
    section.add "Version", valid_21626128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626129 = header.getOrDefault("X-Amz-Date")
  valid_21626129 = validateParameter(valid_21626129, JString, required = false,
                                   default = nil)
  if valid_21626129 != nil:
    section.add "X-Amz-Date", valid_21626129
  var valid_21626130 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626130 = validateParameter(valid_21626130, JString, required = false,
                                   default = nil)
  if valid_21626130 != nil:
    section.add "X-Amz-Security-Token", valid_21626130
  var valid_21626131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626131 = validateParameter(valid_21626131, JString, required = false,
                                   default = nil)
  if valid_21626131 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626131
  var valid_21626132 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626132 = validateParameter(valid_21626132, JString, required = false,
                                   default = nil)
  if valid_21626132 != nil:
    section.add "X-Amz-Algorithm", valid_21626132
  var valid_21626133 = header.getOrDefault("X-Amz-Signature")
  valid_21626133 = validateParameter(valid_21626133, JString, required = false,
                                   default = nil)
  if valid_21626133 != nil:
    section.add "X-Amz-Signature", valid_21626133
  var valid_21626134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626134 = validateParameter(valid_21626134, JString, required = false,
                                   default = nil)
  if valid_21626134 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626134
  var valid_21626135 = header.getOrDefault("X-Amz-Credential")
  valid_21626135 = validateParameter(valid_21626135, JString, required = false,
                                   default = nil)
  if valid_21626135 != nil:
    section.add "X-Amz-Credential", valid_21626135
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ApplyAction` field"
  var valid_21626136 = formData.getOrDefault("ApplyAction")
  valid_21626136 = validateParameter(valid_21626136, JString, required = true,
                                   default = nil)
  if valid_21626136 != nil:
    section.add "ApplyAction", valid_21626136
  var valid_21626137 = formData.getOrDefault("ResourceIdentifier")
  valid_21626137 = validateParameter(valid_21626137, JString, required = true,
                                   default = nil)
  if valid_21626137 != nil:
    section.add "ResourceIdentifier", valid_21626137
  var valid_21626138 = formData.getOrDefault("OptInType")
  valid_21626138 = validateParameter(valid_21626138, JString, required = true,
                                   default = nil)
  if valid_21626138 != nil:
    section.add "OptInType", valid_21626138
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626139: Call_PostApplyPendingMaintenanceAction_21626124;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_21626139.validator(path, query, header, formData, body, _)
  let scheme = call_21626139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626139.makeUrl(scheme.get, call_21626139.host, call_21626139.base,
                               call_21626139.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626139, uri, valid, _)

proc call*(call_21626140: Call_PostApplyPendingMaintenanceAction_21626124;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   Action: string (required)
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626141 = newJObject()
  var formData_21626142 = newJObject()
  add(query_21626141, "Action", newJString(Action))
  add(formData_21626142, "ApplyAction", newJString(ApplyAction))
  add(formData_21626142, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_21626142, "OptInType", newJString(OptInType))
  add(query_21626141, "Version", newJString(Version))
  result = call_21626140.call(nil, query_21626141, nil, formData_21626142, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_21626124(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_21626125, base: "/",
    makeUrl: url_PostApplyPendingMaintenanceAction_21626126,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_21626106 = ref object of OpenApiRestCall_21625418
proc url_GetApplyPendingMaintenanceAction_21626108(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_21626107(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ApplyAction` field"
  var valid_21626109 = query.getOrDefault("ApplyAction")
  valid_21626109 = validateParameter(valid_21626109, JString, required = true,
                                   default = nil)
  if valid_21626109 != nil:
    section.add "ApplyAction", valid_21626109
  var valid_21626110 = query.getOrDefault("ResourceIdentifier")
  valid_21626110 = validateParameter(valid_21626110, JString, required = true,
                                   default = nil)
  if valid_21626110 != nil:
    section.add "ResourceIdentifier", valid_21626110
  var valid_21626111 = query.getOrDefault("Action")
  valid_21626111 = validateParameter(valid_21626111, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_21626111 != nil:
    section.add "Action", valid_21626111
  var valid_21626112 = query.getOrDefault("OptInType")
  valid_21626112 = validateParameter(valid_21626112, JString, required = true,
                                   default = nil)
  if valid_21626112 != nil:
    section.add "OptInType", valid_21626112
  var valid_21626113 = query.getOrDefault("Version")
  valid_21626113 = validateParameter(valid_21626113, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626113 != nil:
    section.add "Version", valid_21626113
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626114 = header.getOrDefault("X-Amz-Date")
  valid_21626114 = validateParameter(valid_21626114, JString, required = false,
                                   default = nil)
  if valid_21626114 != nil:
    section.add "X-Amz-Date", valid_21626114
  var valid_21626115 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626115 = validateParameter(valid_21626115, JString, required = false,
                                   default = nil)
  if valid_21626115 != nil:
    section.add "X-Amz-Security-Token", valid_21626115
  var valid_21626116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626116 = validateParameter(valid_21626116, JString, required = false,
                                   default = nil)
  if valid_21626116 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626116
  var valid_21626117 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626117 = validateParameter(valid_21626117, JString, required = false,
                                   default = nil)
  if valid_21626117 != nil:
    section.add "X-Amz-Algorithm", valid_21626117
  var valid_21626118 = header.getOrDefault("X-Amz-Signature")
  valid_21626118 = validateParameter(valid_21626118, JString, required = false,
                                   default = nil)
  if valid_21626118 != nil:
    section.add "X-Amz-Signature", valid_21626118
  var valid_21626119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626119 = validateParameter(valid_21626119, JString, required = false,
                                   default = nil)
  if valid_21626119 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626119
  var valid_21626120 = header.getOrDefault("X-Amz-Credential")
  valid_21626120 = validateParameter(valid_21626120, JString, required = false,
                                   default = nil)
  if valid_21626120 != nil:
    section.add "X-Amz-Credential", valid_21626120
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626121: Call_GetApplyPendingMaintenanceAction_21626106;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_21626121.validator(path, query, header, formData, body, _)
  let scheme = call_21626121.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626121.makeUrl(scheme.get, call_21626121.host, call_21626121.base,
                               call_21626121.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626121, uri, valid, _)

proc call*(call_21626122: Call_GetApplyPendingMaintenanceAction_21626106;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626123 = newJObject()
  add(query_21626123, "ApplyAction", newJString(ApplyAction))
  add(query_21626123, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_21626123, "Action", newJString(Action))
  add(query_21626123, "OptInType", newJString(OptInType))
  add(query_21626123, "Version", newJString(Version))
  result = call_21626122.call(nil, query_21626123, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_21626106(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_21626107, base: "/",
    makeUrl: url_GetApplyPendingMaintenanceAction_21626108,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_21626162 = ref object of OpenApiRestCall_21625418
proc url_PostCopyDBClusterParameterGroup_21626164(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_21626163(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626165 = query.getOrDefault("Action")
  valid_21626165 = validateParameter(valid_21626165, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_21626165 != nil:
    section.add "Action", valid_21626165
  var valid_21626166 = query.getOrDefault("Version")
  valid_21626166 = validateParameter(valid_21626166, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626166 != nil:
    section.add "Version", valid_21626166
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626167 = header.getOrDefault("X-Amz-Date")
  valid_21626167 = validateParameter(valid_21626167, JString, required = false,
                                   default = nil)
  if valid_21626167 != nil:
    section.add "X-Amz-Date", valid_21626167
  var valid_21626168 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626168 = validateParameter(valid_21626168, JString, required = false,
                                   default = nil)
  if valid_21626168 != nil:
    section.add "X-Amz-Security-Token", valid_21626168
  var valid_21626169 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626169 = validateParameter(valid_21626169, JString, required = false,
                                   default = nil)
  if valid_21626169 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626169
  var valid_21626170 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626170 = validateParameter(valid_21626170, JString, required = false,
                                   default = nil)
  if valid_21626170 != nil:
    section.add "X-Amz-Algorithm", valid_21626170
  var valid_21626171 = header.getOrDefault("X-Amz-Signature")
  valid_21626171 = validateParameter(valid_21626171, JString, required = false,
                                   default = nil)
  if valid_21626171 != nil:
    section.add "X-Amz-Signature", valid_21626171
  var valid_21626172 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626172 = validateParameter(valid_21626172, JString, required = false,
                                   default = nil)
  if valid_21626172 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626172
  var valid_21626173 = header.getOrDefault("X-Amz-Credential")
  valid_21626173 = validateParameter(valid_21626173, JString, required = false,
                                   default = nil)
  if valid_21626173 != nil:
    section.add "X-Amz-Credential", valid_21626173
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_21626174 = formData.getOrDefault(
      "TargetDBClusterParameterGroupDescription")
  valid_21626174 = validateParameter(valid_21626174, JString, required = true,
                                   default = nil)
  if valid_21626174 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_21626174
  var valid_21626175 = formData.getOrDefault("Tags")
  valid_21626175 = validateParameter(valid_21626175, JArray, required = false,
                                   default = nil)
  if valid_21626175 != nil:
    section.add "Tags", valid_21626175
  var valid_21626176 = formData.getOrDefault(
      "SourceDBClusterParameterGroupIdentifier")
  valid_21626176 = validateParameter(valid_21626176, JString, required = true,
                                   default = nil)
  if valid_21626176 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_21626176
  var valid_21626177 = formData.getOrDefault(
      "TargetDBClusterParameterGroupIdentifier")
  valid_21626177 = validateParameter(valid_21626177, JString, required = true,
                                   default = nil)
  if valid_21626177 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_21626177
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626178: Call_PostCopyDBClusterParameterGroup_21626162;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_21626178.validator(path, query, header, formData, body, _)
  let scheme = call_21626178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626178.makeUrl(scheme.get, call_21626178.host, call_21626178.base,
                               call_21626178.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626178, uri, valid, _)

proc call*(call_21626179: Call_PostCopyDBClusterParameterGroup_21626162;
          TargetDBClusterParameterGroupDescription: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_21626180 = newJObject()
  var formData_21626181 = newJObject()
  add(formData_21626181, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    formData_21626181.add "Tags", Tags
  add(query_21626180, "Action", newJString(Action))
  add(formData_21626181, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(formData_21626181, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_21626180, "Version", newJString(Version))
  result = call_21626179.call(nil, query_21626180, nil, formData_21626181, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_21626162(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_21626163, base: "/",
    makeUrl: url_PostCopyDBClusterParameterGroup_21626164,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_21626143 = ref object of OpenApiRestCall_21625418
proc url_GetCopyDBClusterParameterGroup_21626145(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_21626144(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: JString (required)
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBClusterParameterGroupIdentifier` field"
  var valid_21626146 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_21626146 = validateParameter(valid_21626146, JString, required = true,
                                   default = nil)
  if valid_21626146 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_21626146
  var valid_21626147 = query.getOrDefault("Tags")
  valid_21626147 = validateParameter(valid_21626147, JArray, required = false,
                                   default = nil)
  if valid_21626147 != nil:
    section.add "Tags", valid_21626147
  var valid_21626148 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_21626148 = validateParameter(valid_21626148, JString, required = true,
                                   default = nil)
  if valid_21626148 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_21626148
  var valid_21626149 = query.getOrDefault("Action")
  valid_21626149 = validateParameter(valid_21626149, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_21626149 != nil:
    section.add "Action", valid_21626149
  var valid_21626150 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_21626150 = validateParameter(valid_21626150, JString, required = true,
                                   default = nil)
  if valid_21626150 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_21626150
  var valid_21626151 = query.getOrDefault("Version")
  valid_21626151 = validateParameter(valid_21626151, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626151 != nil:
    section.add "Version", valid_21626151
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626152 = header.getOrDefault("X-Amz-Date")
  valid_21626152 = validateParameter(valid_21626152, JString, required = false,
                                   default = nil)
  if valid_21626152 != nil:
    section.add "X-Amz-Date", valid_21626152
  var valid_21626153 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626153 = validateParameter(valid_21626153, JString, required = false,
                                   default = nil)
  if valid_21626153 != nil:
    section.add "X-Amz-Security-Token", valid_21626153
  var valid_21626154 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626154 = validateParameter(valid_21626154, JString, required = false,
                                   default = nil)
  if valid_21626154 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626154
  var valid_21626155 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626155 = validateParameter(valid_21626155, JString, required = false,
                                   default = nil)
  if valid_21626155 != nil:
    section.add "X-Amz-Algorithm", valid_21626155
  var valid_21626156 = header.getOrDefault("X-Amz-Signature")
  valid_21626156 = validateParameter(valid_21626156, JString, required = false,
                                   default = nil)
  if valid_21626156 != nil:
    section.add "X-Amz-Signature", valid_21626156
  var valid_21626157 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626157 = validateParameter(valid_21626157, JString, required = false,
                                   default = nil)
  if valid_21626157 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626157
  var valid_21626158 = header.getOrDefault("X-Amz-Credential")
  valid_21626158 = validateParameter(valid_21626158, JString, required = false,
                                   default = nil)
  if valid_21626158 != nil:
    section.add "X-Amz-Credential", valid_21626158
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626159: Call_GetCopyDBClusterParameterGroup_21626143;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_21626159.validator(path, query, header, formData, body, _)
  let scheme = call_21626159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626159.makeUrl(scheme.get, call_21626159.host, call_21626159.base,
                               call_21626159.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626159, uri, valid, _)

proc call*(call_21626160: Call_GetCopyDBClusterParameterGroup_21626143;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_21626161 = newJObject()
  add(query_21626161, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  if Tags != nil:
    query_21626161.add "Tags", Tags
  add(query_21626161, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  add(query_21626161, "Action", newJString(Action))
  add(query_21626161, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_21626161, "Version", newJString(Version))
  result = call_21626160.call(nil, query_21626161, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_21626143(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_21626144, base: "/",
    makeUrl: url_GetCopyDBClusterParameterGroup_21626145,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_21626204 = ref object of OpenApiRestCall_21625418
proc url_PostCopyDBClusterSnapshot_21626206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_21626205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626207 = query.getOrDefault("Action")
  valid_21626207 = validateParameter(valid_21626207, JString, required = true, default = newJString(
      "CopyDBClusterSnapshot"))
  if valid_21626207 != nil:
    section.add "Action", valid_21626207
  var valid_21626208 = query.getOrDefault("Version")
  valid_21626208 = validateParameter(valid_21626208, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626208 != nil:
    section.add "Version", valid_21626208
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626209 = header.getOrDefault("X-Amz-Date")
  valid_21626209 = validateParameter(valid_21626209, JString, required = false,
                                   default = nil)
  if valid_21626209 != nil:
    section.add "X-Amz-Date", valid_21626209
  var valid_21626210 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626210 = validateParameter(valid_21626210, JString, required = false,
                                   default = nil)
  if valid_21626210 != nil:
    section.add "X-Amz-Security-Token", valid_21626210
  var valid_21626211 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626211 = validateParameter(valid_21626211, JString, required = false,
                                   default = nil)
  if valid_21626211 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626211
  var valid_21626212 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626212 = validateParameter(valid_21626212, JString, required = false,
                                   default = nil)
  if valid_21626212 != nil:
    section.add "X-Amz-Algorithm", valid_21626212
  var valid_21626213 = header.getOrDefault("X-Amz-Signature")
  valid_21626213 = validateParameter(valid_21626213, JString, required = false,
                                   default = nil)
  if valid_21626213 != nil:
    section.add "X-Amz-Signature", valid_21626213
  var valid_21626214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626214 = validateParameter(valid_21626214, JString, required = false,
                                   default = nil)
  if valid_21626214 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626214
  var valid_21626215 = header.getOrDefault("X-Amz-Credential")
  valid_21626215 = validateParameter(valid_21626215, JString, required = false,
                                   default = nil)
  if valid_21626215 != nil:
    section.add "X-Amz-Credential", valid_21626215
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  section = newJObject()
  var valid_21626216 = formData.getOrDefault("PreSignedUrl")
  valid_21626216 = validateParameter(valid_21626216, JString, required = false,
                                   default = nil)
  if valid_21626216 != nil:
    section.add "PreSignedUrl", valid_21626216
  var valid_21626217 = formData.getOrDefault("Tags")
  valid_21626217 = validateParameter(valid_21626217, JArray, required = false,
                                   default = nil)
  if valid_21626217 != nil:
    section.add "Tags", valid_21626217
  var valid_21626218 = formData.getOrDefault("CopyTags")
  valid_21626218 = validateParameter(valid_21626218, JBool, required = false,
                                   default = nil)
  if valid_21626218 != nil:
    section.add "CopyTags", valid_21626218
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_21626219 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_21626219 = validateParameter(valid_21626219, JString, required = true,
                                   default = nil)
  if valid_21626219 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_21626219
  var valid_21626220 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_21626220 = validateParameter(valid_21626220, JString, required = true,
                                   default = nil)
  if valid_21626220 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_21626220
  var valid_21626221 = formData.getOrDefault("KmsKeyId")
  valid_21626221 = validateParameter(valid_21626221, JString, required = false,
                                   default = nil)
  if valid_21626221 != nil:
    section.add "KmsKeyId", valid_21626221
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626222: Call_PostCopyDBClusterSnapshot_21626204;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
  ## 
  let valid = call_21626222.validator(path, query, header, formData, body, _)
  let scheme = call_21626222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626222.makeUrl(scheme.get, call_21626222.host, call_21626222.base,
                               call_21626222.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626222, uri, valid, _)

proc call*(call_21626223: Call_PostCopyDBClusterSnapshot_21626204;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   Version: string (required)
  var query_21626224 = newJObject()
  var formData_21626225 = newJObject()
  add(formData_21626225, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    formData_21626225.add "Tags", Tags
  add(formData_21626225, "CopyTags", newJBool(CopyTags))
  add(formData_21626225, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_21626225, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_21626224, "Action", newJString(Action))
  add(formData_21626225, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626224, "Version", newJString(Version))
  result = call_21626223.call(nil, query_21626224, nil, formData_21626225, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_21626204(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_21626205, base: "/",
    makeUrl: url_PostCopyDBClusterSnapshot_21626206,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_21626182 = ref object of OpenApiRestCall_21625418
proc url_GetCopyDBClusterSnapshot_21626184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_21626183(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  section = newJObject()
  var valid_21626185 = query.getOrDefault("PreSignedUrl")
  valid_21626185 = validateParameter(valid_21626185, JString, required = false,
                                   default = nil)
  if valid_21626185 != nil:
    section.add "PreSignedUrl", valid_21626185
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_21626186 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_21626186 = validateParameter(valid_21626186, JString, required = true,
                                   default = nil)
  if valid_21626186 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_21626186
  var valid_21626187 = query.getOrDefault("Tags")
  valid_21626187 = validateParameter(valid_21626187, JArray, required = false,
                                   default = nil)
  if valid_21626187 != nil:
    section.add "Tags", valid_21626187
  var valid_21626188 = query.getOrDefault("Action")
  valid_21626188 = validateParameter(valid_21626188, JString, required = true, default = newJString(
      "CopyDBClusterSnapshot"))
  if valid_21626188 != nil:
    section.add "Action", valid_21626188
  var valid_21626189 = query.getOrDefault("KmsKeyId")
  valid_21626189 = validateParameter(valid_21626189, JString, required = false,
                                   default = nil)
  if valid_21626189 != nil:
    section.add "KmsKeyId", valid_21626189
  var valid_21626190 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_21626190 = validateParameter(valid_21626190, JString, required = true,
                                   default = nil)
  if valid_21626190 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_21626190
  var valid_21626191 = query.getOrDefault("Version")
  valid_21626191 = validateParameter(valid_21626191, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626191 != nil:
    section.add "Version", valid_21626191
  var valid_21626192 = query.getOrDefault("CopyTags")
  valid_21626192 = validateParameter(valid_21626192, JBool, required = false,
                                   default = nil)
  if valid_21626192 != nil:
    section.add "CopyTags", valid_21626192
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626193 = header.getOrDefault("X-Amz-Date")
  valid_21626193 = validateParameter(valid_21626193, JString, required = false,
                                   default = nil)
  if valid_21626193 != nil:
    section.add "X-Amz-Date", valid_21626193
  var valid_21626194 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626194 = validateParameter(valid_21626194, JString, required = false,
                                   default = nil)
  if valid_21626194 != nil:
    section.add "X-Amz-Security-Token", valid_21626194
  var valid_21626195 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626195 = validateParameter(valid_21626195, JString, required = false,
                                   default = nil)
  if valid_21626195 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626195
  var valid_21626196 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626196 = validateParameter(valid_21626196, JString, required = false,
                                   default = nil)
  if valid_21626196 != nil:
    section.add "X-Amz-Algorithm", valid_21626196
  var valid_21626197 = header.getOrDefault("X-Amz-Signature")
  valid_21626197 = validateParameter(valid_21626197, JString, required = false,
                                   default = nil)
  if valid_21626197 != nil:
    section.add "X-Amz-Signature", valid_21626197
  var valid_21626198 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626198 = validateParameter(valid_21626198, JString, required = false,
                                   default = nil)
  if valid_21626198 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626198
  var valid_21626199 = header.getOrDefault("X-Amz-Credential")
  valid_21626199 = validateParameter(valid_21626199, JString, required = false,
                                   default = nil)
  if valid_21626199 != nil:
    section.add "X-Amz-Credential", valid_21626199
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626200: Call_GetCopyDBClusterSnapshot_21626182;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
  ## 
  let valid = call_21626200.validator(path, query, header, formData, body, _)
  let scheme = call_21626200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626200.makeUrl(scheme.get, call_21626200.host, call_21626200.base,
                               call_21626200.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626200, uri, valid, _)

proc call*(call_21626201: Call_GetCopyDBClusterSnapshot_21626182;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; Action: string = "CopyDBClusterSnapshot";
          KmsKeyId: string = ""; Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  var query_21626202 = newJObject()
  add(query_21626202, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_21626202, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  if Tags != nil:
    query_21626202.add "Tags", Tags
  add(query_21626202, "Action", newJString(Action))
  add(query_21626202, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626202, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_21626202, "Version", newJString(Version))
  add(query_21626202, "CopyTags", newJBool(CopyTags))
  result = call_21626201.call(nil, query_21626202, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_21626182(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_21626183, base: "/",
    makeUrl: url_GetCopyDBClusterSnapshot_21626184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_21626245 = ref object of OpenApiRestCall_21625418
proc url_PostCopyDBParameterGroup_21626247(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_21626246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626248 = query.getOrDefault("Action")
  valid_21626248 = validateParameter(valid_21626248, JString, required = true,
                                   default = newJString("CopyDBParameterGroup"))
  if valid_21626248 != nil:
    section.add "Action", valid_21626248
  var valid_21626249 = query.getOrDefault("Version")
  valid_21626249 = validateParameter(valid_21626249, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626249 != nil:
    section.add "Version", valid_21626249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626250 = header.getOrDefault("X-Amz-Date")
  valid_21626250 = validateParameter(valid_21626250, JString, required = false,
                                   default = nil)
  if valid_21626250 != nil:
    section.add "X-Amz-Date", valid_21626250
  var valid_21626251 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626251 = validateParameter(valid_21626251, JString, required = false,
                                   default = nil)
  if valid_21626251 != nil:
    section.add "X-Amz-Security-Token", valid_21626251
  var valid_21626252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626252 = validateParameter(valid_21626252, JString, required = false,
                                   default = nil)
  if valid_21626252 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626252
  var valid_21626253 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626253 = validateParameter(valid_21626253, JString, required = false,
                                   default = nil)
  if valid_21626253 != nil:
    section.add "X-Amz-Algorithm", valid_21626253
  var valid_21626254 = header.getOrDefault("X-Amz-Signature")
  valid_21626254 = validateParameter(valid_21626254, JString, required = false,
                                   default = nil)
  if valid_21626254 != nil:
    section.add "X-Amz-Signature", valid_21626254
  var valid_21626255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626255 = validateParameter(valid_21626255, JString, required = false,
                                   default = nil)
  if valid_21626255 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626255
  var valid_21626256 = header.getOrDefault("X-Amz-Credential")
  valid_21626256 = validateParameter(valid_21626256, JString, required = false,
                                   default = nil)
  if valid_21626256 != nil:
    section.add "X-Amz-Credential", valid_21626256
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBParameterGroupIdentifier` field"
  var valid_21626257 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_21626257 = validateParameter(valid_21626257, JString, required = true,
                                   default = nil)
  if valid_21626257 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_21626257
  var valid_21626258 = formData.getOrDefault("Tags")
  valid_21626258 = validateParameter(valid_21626258, JArray, required = false,
                                   default = nil)
  if valid_21626258 != nil:
    section.add "Tags", valid_21626258
  var valid_21626259 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_21626259 = validateParameter(valid_21626259, JString, required = true,
                                   default = nil)
  if valid_21626259 != nil:
    section.add "TargetDBParameterGroupDescription", valid_21626259
  var valid_21626260 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_21626260 = validateParameter(valid_21626260, JString, required = true,
                                   default = nil)
  if valid_21626260 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_21626260
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626261: Call_PostCopyDBParameterGroup_21626245;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_21626261.validator(path, query, header, formData, body, _)
  let scheme = call_21626261.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626261.makeUrl(scheme.get, call_21626261.host, call_21626261.base,
                               call_21626261.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626261, uri, valid, _)

proc call*(call_21626262: Call_PostCopyDBParameterGroup_21626245;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          SourceDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626263 = newJObject()
  var formData_21626264 = newJObject()
  add(formData_21626264, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  if Tags != nil:
    formData_21626264.add "Tags", Tags
  add(query_21626263, "Action", newJString(Action))
  add(formData_21626264, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(formData_21626264, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_21626263, "Version", newJString(Version))
  result = call_21626262.call(nil, query_21626263, nil, formData_21626264, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_21626245(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_21626246, base: "/",
    makeUrl: url_PostCopyDBParameterGroup_21626247,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_21626226 = ref object of OpenApiRestCall_21625418
proc url_GetCopyDBParameterGroup_21626228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_21626227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: JString (required)
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: JString (required)
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  section = newJObject()
  var valid_21626229 = query.getOrDefault("Tags")
  valid_21626229 = validateParameter(valid_21626229, JArray, required = false,
                                   default = nil)
  if valid_21626229 != nil:
    section.add "Tags", valid_21626229
  var valid_21626230 = query.getOrDefault("Action")
  valid_21626230 = validateParameter(valid_21626230, JString, required = true,
                                   default = newJString("CopyDBParameterGroup"))
  if valid_21626230 != nil:
    section.add "Action", valid_21626230
  var valid_21626231 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_21626231 = validateParameter(valid_21626231, JString, required = true,
                                   default = nil)
  if valid_21626231 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_21626231
  var valid_21626232 = query.getOrDefault("Version")
  valid_21626232 = validateParameter(valid_21626232, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626232 != nil:
    section.add "Version", valid_21626232
  var valid_21626233 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_21626233 = validateParameter(valid_21626233, JString, required = true,
                                   default = nil)
  if valid_21626233 != nil:
    section.add "TargetDBParameterGroupDescription", valid_21626233
  var valid_21626234 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_21626234 = validateParameter(valid_21626234, JString, required = true,
                                   default = nil)
  if valid_21626234 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_21626234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626235 = header.getOrDefault("X-Amz-Date")
  valid_21626235 = validateParameter(valid_21626235, JString, required = false,
                                   default = nil)
  if valid_21626235 != nil:
    section.add "X-Amz-Date", valid_21626235
  var valid_21626236 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626236 = validateParameter(valid_21626236, JString, required = false,
                                   default = nil)
  if valid_21626236 != nil:
    section.add "X-Amz-Security-Token", valid_21626236
  var valid_21626237 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626237 = validateParameter(valid_21626237, JString, required = false,
                                   default = nil)
  if valid_21626237 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626237
  var valid_21626238 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626238 = validateParameter(valid_21626238, JString, required = false,
                                   default = nil)
  if valid_21626238 != nil:
    section.add "X-Amz-Algorithm", valid_21626238
  var valid_21626239 = header.getOrDefault("X-Amz-Signature")
  valid_21626239 = validateParameter(valid_21626239, JString, required = false,
                                   default = nil)
  if valid_21626239 != nil:
    section.add "X-Amz-Signature", valid_21626239
  var valid_21626240 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626240 = validateParameter(valid_21626240, JString, required = false,
                                   default = nil)
  if valid_21626240 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626240
  var valid_21626241 = header.getOrDefault("X-Amz-Credential")
  valid_21626241 = validateParameter(valid_21626241, JString, required = false,
                                   default = nil)
  if valid_21626241 != nil:
    section.add "X-Amz-Credential", valid_21626241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626242: Call_GetCopyDBParameterGroup_21626226;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_21626242.validator(path, query, header, formData, body, _)
  let scheme = call_21626242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626242.makeUrl(scheme.get, call_21626242.host, call_21626242.base,
                               call_21626242.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626242, uri, valid, _)

proc call*(call_21626243: Call_GetCopyDBParameterGroup_21626226;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Action: string (required)
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  var query_21626244 = newJObject()
  if Tags != nil:
    query_21626244.add "Tags", Tags
  add(query_21626244, "Action", newJString(Action))
  add(query_21626244, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_21626244, "Version", newJString(Version))
  add(query_21626244, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_21626244, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  result = call_21626243.call(nil, query_21626244, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_21626226(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_21626227, base: "/",
    makeUrl: url_GetCopyDBParameterGroup_21626228,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_21626304 = ref object of OpenApiRestCall_21625418
proc url_PostCreateDBCluster_21626306(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_21626305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626307 = query.getOrDefault("Action")
  valid_21626307 = validateParameter(valid_21626307, JString, required = true,
                                   default = newJString("CreateDBCluster"))
  if valid_21626307 != nil:
    section.add "Action", valid_21626307
  var valid_21626308 = query.getOrDefault("Version")
  valid_21626308 = validateParameter(valid_21626308, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626308 != nil:
    section.add "Version", valid_21626308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626309 = header.getOrDefault("X-Amz-Date")
  valid_21626309 = validateParameter(valid_21626309, JString, required = false,
                                   default = nil)
  if valid_21626309 != nil:
    section.add "X-Amz-Date", valid_21626309
  var valid_21626310 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626310 = validateParameter(valid_21626310, JString, required = false,
                                   default = nil)
  if valid_21626310 != nil:
    section.add "X-Amz-Security-Token", valid_21626310
  var valid_21626311 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626311 = validateParameter(valid_21626311, JString, required = false,
                                   default = nil)
  if valid_21626311 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626311
  var valid_21626312 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626312 = validateParameter(valid_21626312, JString, required = false,
                                   default = nil)
  if valid_21626312 != nil:
    section.add "X-Amz-Algorithm", valid_21626312
  var valid_21626313 = header.getOrDefault("X-Amz-Signature")
  valid_21626313 = validateParameter(valid_21626313, JString, required = false,
                                   default = nil)
  if valid_21626313 != nil:
    section.add "X-Amz-Signature", valid_21626313
  var valid_21626314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626314 = validateParameter(valid_21626314, JString, required = false,
                                   default = nil)
  if valid_21626314 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626314
  var valid_21626315 = header.getOrDefault("X-Amz-Credential")
  valid_21626315 = validateParameter(valid_21626315, JString, required = false,
                                   default = nil)
  if valid_21626315 != nil:
    section.add "X-Amz-Credential", valid_21626315
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_21626316 = formData.getOrDefault("Port")
  valid_21626316 = validateParameter(valid_21626316, JInt, required = false,
                                   default = nil)
  if valid_21626316 != nil:
    section.add "Port", valid_21626316
  var valid_21626317 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21626317 = validateParameter(valid_21626317, JArray, required = false,
                                   default = nil)
  if valid_21626317 != nil:
    section.add "VpcSecurityGroupIds", valid_21626317
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21626318 = formData.getOrDefault("Engine")
  valid_21626318 = validateParameter(valid_21626318, JString, required = true,
                                   default = nil)
  if valid_21626318 != nil:
    section.add "Engine", valid_21626318
  var valid_21626319 = formData.getOrDefault("PreSignedUrl")
  valid_21626319 = validateParameter(valid_21626319, JString, required = false,
                                   default = nil)
  if valid_21626319 != nil:
    section.add "PreSignedUrl", valid_21626319
  var valid_21626320 = formData.getOrDefault("OptionGroupName")
  valid_21626320 = validateParameter(valid_21626320, JString, required = false,
                                   default = nil)
  if valid_21626320 != nil:
    section.add "OptionGroupName", valid_21626320
  var valid_21626321 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21626321 = validateParameter(valid_21626321, JInt, required = false,
                                   default = nil)
  if valid_21626321 != nil:
    section.add "BackupRetentionPeriod", valid_21626321
  var valid_21626322 = formData.getOrDefault("Tags")
  valid_21626322 = validateParameter(valid_21626322, JArray, required = false,
                                   default = nil)
  if valid_21626322 != nil:
    section.add "Tags", valid_21626322
  var valid_21626323 = formData.getOrDefault("MasterUserPassword")
  valid_21626323 = validateParameter(valid_21626323, JString, required = false,
                                   default = nil)
  if valid_21626323 != nil:
    section.add "MasterUserPassword", valid_21626323
  var valid_21626324 = formData.getOrDefault("DeletionProtection")
  valid_21626324 = validateParameter(valid_21626324, JBool, required = false,
                                   default = nil)
  if valid_21626324 != nil:
    section.add "DeletionProtection", valid_21626324
  var valid_21626325 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626325 = validateParameter(valid_21626325, JString, required = false,
                                   default = nil)
  if valid_21626325 != nil:
    section.add "DBSubnetGroupName", valid_21626325
  var valid_21626326 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_21626326 = validateParameter(valid_21626326, JString, required = false,
                                   default = nil)
  if valid_21626326 != nil:
    section.add "ReplicationSourceIdentifier", valid_21626326
  var valid_21626327 = formData.getOrDefault("AvailabilityZones")
  valid_21626327 = validateParameter(valid_21626327, JArray, required = false,
                                   default = nil)
  if valid_21626327 != nil:
    section.add "AvailabilityZones", valid_21626327
  var valid_21626328 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626328 = validateParameter(valid_21626328, JString, required = false,
                                   default = nil)
  if valid_21626328 != nil:
    section.add "DBClusterParameterGroupName", valid_21626328
  var valid_21626329 = formData.getOrDefault("MasterUsername")
  valid_21626329 = validateParameter(valid_21626329, JString, required = false,
                                   default = nil)
  if valid_21626329 != nil:
    section.add "MasterUsername", valid_21626329
  var valid_21626330 = formData.getOrDefault("DatabaseName")
  valid_21626330 = validateParameter(valid_21626330, JString, required = false,
                                   default = nil)
  if valid_21626330 != nil:
    section.add "DatabaseName", valid_21626330
  var valid_21626331 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626331 = validateParameter(valid_21626331, JArray, required = false,
                                   default = nil)
  if valid_21626331 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626331
  var valid_21626332 = formData.getOrDefault("CharacterSetName")
  valid_21626332 = validateParameter(valid_21626332, JString, required = false,
                                   default = nil)
  if valid_21626332 != nil:
    section.add "CharacterSetName", valid_21626332
  var valid_21626333 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626333 = validateParameter(valid_21626333, JBool, required = false,
                                   default = nil)
  if valid_21626333 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626333
  var valid_21626334 = formData.getOrDefault("PreferredBackupWindow")
  valid_21626334 = validateParameter(valid_21626334, JString, required = false,
                                   default = nil)
  if valid_21626334 != nil:
    section.add "PreferredBackupWindow", valid_21626334
  var valid_21626335 = formData.getOrDefault("KmsKeyId")
  valid_21626335 = validateParameter(valid_21626335, JString, required = false,
                                   default = nil)
  if valid_21626335 != nil:
    section.add "KmsKeyId", valid_21626335
  var valid_21626336 = formData.getOrDefault("StorageEncrypted")
  valid_21626336 = validateParameter(valid_21626336, JBool, required = false,
                                   default = nil)
  if valid_21626336 != nil:
    section.add "StorageEncrypted", valid_21626336
  var valid_21626337 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626337 = validateParameter(valid_21626337, JString, required = true,
                                   default = nil)
  if valid_21626337 != nil:
    section.add "DBClusterIdentifier", valid_21626337
  var valid_21626338 = formData.getOrDefault("EngineVersion")
  valid_21626338 = validateParameter(valid_21626338, JString, required = false,
                                   default = nil)
  if valid_21626338 != nil:
    section.add "EngineVersion", valid_21626338
  var valid_21626339 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21626339 = validateParameter(valid_21626339, JString, required = false,
                                   default = nil)
  if valid_21626339 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626339
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626340: Call_PostCreateDBCluster_21626304; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
  ## 
  let valid = call_21626340.validator(path, query, header, formData, body, _)
  let scheme = call_21626340.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626340.makeUrl(scheme.get, call_21626340.host, call_21626340.base,
                               call_21626340.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626340, uri, valid, _)

proc call*(call_21626341: Call_PostCreateDBCluster_21626304; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; PreSignedUrl: string = "";
          OptionGroupName: string = ""; BackupRetentionPeriod: int = 0;
          Tags: JsonNode = nil; MasterUserPassword: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          ReplicationSourceIdentifier: string = "";
          Action: string = "CreateDBCluster"; AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_21626342 = newJObject()
  var formData_21626343 = newJObject()
  add(formData_21626343, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21626343.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21626343, "Engine", newJString(Engine))
  add(formData_21626343, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_21626343, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21626343, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_21626343.add "Tags", Tags
  add(formData_21626343, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21626343, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21626343, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21626343, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_21626342, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_21626343.add "AvailabilityZones", AvailabilityZones
  add(formData_21626343, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21626343, "MasterUsername", newJString(MasterUsername))
  add(formData_21626343, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_21626343.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21626343, "CharacterSetName", newJString(CharacterSetName))
  add(formData_21626343, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21626343, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21626343, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21626343, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21626343, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21626343, "EngineVersion", newJString(EngineVersion))
  add(query_21626342, "Version", newJString(Version))
  add(formData_21626343, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21626341.call(nil, query_21626342, nil, formData_21626343, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_21626304(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_21626305, base: "/",
    makeUrl: url_PostCreateDBCluster_21626306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_21626265 = ref object of OpenApiRestCall_21625418
proc url_GetCreateDBCluster_21626267(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_21626266(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21626268 = query.getOrDefault("Engine")
  valid_21626268 = validateParameter(valid_21626268, JString, required = true,
                                   default = nil)
  if valid_21626268 != nil:
    section.add "Engine", valid_21626268
  var valid_21626269 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_21626269 = validateParameter(valid_21626269, JString, required = false,
                                   default = nil)
  if valid_21626269 != nil:
    section.add "ReplicationSourceIdentifier", valid_21626269
  var valid_21626270 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21626270 = validateParameter(valid_21626270, JString, required = false,
                                   default = nil)
  if valid_21626270 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626270
  var valid_21626271 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626271 = validateParameter(valid_21626271, JString, required = false,
                                   default = nil)
  if valid_21626271 != nil:
    section.add "DBClusterParameterGroupName", valid_21626271
  var valid_21626272 = query.getOrDefault("StorageEncrypted")
  valid_21626272 = validateParameter(valid_21626272, JBool, required = false,
                                   default = nil)
  if valid_21626272 != nil:
    section.add "StorageEncrypted", valid_21626272
  var valid_21626273 = query.getOrDefault("AvailabilityZones")
  valid_21626273 = validateParameter(valid_21626273, JArray, required = false,
                                   default = nil)
  if valid_21626273 != nil:
    section.add "AvailabilityZones", valid_21626273
  var valid_21626274 = query.getOrDefault("DatabaseName")
  valid_21626274 = validateParameter(valid_21626274, JString, required = false,
                                   default = nil)
  if valid_21626274 != nil:
    section.add "DatabaseName", valid_21626274
  var valid_21626275 = query.getOrDefault("DBClusterIdentifier")
  valid_21626275 = validateParameter(valid_21626275, JString, required = true,
                                   default = nil)
  if valid_21626275 != nil:
    section.add "DBClusterIdentifier", valid_21626275
  var valid_21626276 = query.getOrDefault("OptionGroupName")
  valid_21626276 = validateParameter(valid_21626276, JString, required = false,
                                   default = nil)
  if valid_21626276 != nil:
    section.add "OptionGroupName", valid_21626276
  var valid_21626277 = query.getOrDefault("MasterUserPassword")
  valid_21626277 = validateParameter(valid_21626277, JString, required = false,
                                   default = nil)
  if valid_21626277 != nil:
    section.add "MasterUserPassword", valid_21626277
  var valid_21626278 = query.getOrDefault("PreSignedUrl")
  valid_21626278 = validateParameter(valid_21626278, JString, required = false,
                                   default = nil)
  if valid_21626278 != nil:
    section.add "PreSignedUrl", valid_21626278
  var valid_21626279 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626279 = validateParameter(valid_21626279, JBool, required = false,
                                   default = nil)
  if valid_21626279 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626279
  var valid_21626280 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21626280 = validateParameter(valid_21626280, JArray, required = false,
                                   default = nil)
  if valid_21626280 != nil:
    section.add "VpcSecurityGroupIds", valid_21626280
  var valid_21626281 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626281 = validateParameter(valid_21626281, JArray, required = false,
                                   default = nil)
  if valid_21626281 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626281
  var valid_21626282 = query.getOrDefault("Tags")
  valid_21626282 = validateParameter(valid_21626282, JArray, required = false,
                                   default = nil)
  if valid_21626282 != nil:
    section.add "Tags", valid_21626282
  var valid_21626283 = query.getOrDefault("BackupRetentionPeriod")
  valid_21626283 = validateParameter(valid_21626283, JInt, required = false,
                                   default = nil)
  if valid_21626283 != nil:
    section.add "BackupRetentionPeriod", valid_21626283
  var valid_21626284 = query.getOrDefault("DeletionProtection")
  valid_21626284 = validateParameter(valid_21626284, JBool, required = false,
                                   default = nil)
  if valid_21626284 != nil:
    section.add "DeletionProtection", valid_21626284
  var valid_21626285 = query.getOrDefault("Action")
  valid_21626285 = validateParameter(valid_21626285, JString, required = true,
                                   default = newJString("CreateDBCluster"))
  if valid_21626285 != nil:
    section.add "Action", valid_21626285
  var valid_21626286 = query.getOrDefault("CharacterSetName")
  valid_21626286 = validateParameter(valid_21626286, JString, required = false,
                                   default = nil)
  if valid_21626286 != nil:
    section.add "CharacterSetName", valid_21626286
  var valid_21626287 = query.getOrDefault("DBSubnetGroupName")
  valid_21626287 = validateParameter(valid_21626287, JString, required = false,
                                   default = nil)
  if valid_21626287 != nil:
    section.add "DBSubnetGroupName", valid_21626287
  var valid_21626288 = query.getOrDefault("KmsKeyId")
  valid_21626288 = validateParameter(valid_21626288, JString, required = false,
                                   default = nil)
  if valid_21626288 != nil:
    section.add "KmsKeyId", valid_21626288
  var valid_21626289 = query.getOrDefault("EngineVersion")
  valid_21626289 = validateParameter(valid_21626289, JString, required = false,
                                   default = nil)
  if valid_21626289 != nil:
    section.add "EngineVersion", valid_21626289
  var valid_21626290 = query.getOrDefault("Port")
  valid_21626290 = validateParameter(valid_21626290, JInt, required = false,
                                   default = nil)
  if valid_21626290 != nil:
    section.add "Port", valid_21626290
  var valid_21626291 = query.getOrDefault("PreferredBackupWindow")
  valid_21626291 = validateParameter(valid_21626291, JString, required = false,
                                   default = nil)
  if valid_21626291 != nil:
    section.add "PreferredBackupWindow", valid_21626291
  var valid_21626292 = query.getOrDefault("Version")
  valid_21626292 = validateParameter(valid_21626292, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626292 != nil:
    section.add "Version", valid_21626292
  var valid_21626293 = query.getOrDefault("MasterUsername")
  valid_21626293 = validateParameter(valid_21626293, JString, required = false,
                                   default = nil)
  if valid_21626293 != nil:
    section.add "MasterUsername", valid_21626293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626294 = header.getOrDefault("X-Amz-Date")
  valid_21626294 = validateParameter(valid_21626294, JString, required = false,
                                   default = nil)
  if valid_21626294 != nil:
    section.add "X-Amz-Date", valid_21626294
  var valid_21626295 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626295 = validateParameter(valid_21626295, JString, required = false,
                                   default = nil)
  if valid_21626295 != nil:
    section.add "X-Amz-Security-Token", valid_21626295
  var valid_21626296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626296 = validateParameter(valid_21626296, JString, required = false,
                                   default = nil)
  if valid_21626296 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626296
  var valid_21626297 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626297 = validateParameter(valid_21626297, JString, required = false,
                                   default = nil)
  if valid_21626297 != nil:
    section.add "X-Amz-Algorithm", valid_21626297
  var valid_21626298 = header.getOrDefault("X-Amz-Signature")
  valid_21626298 = validateParameter(valid_21626298, JString, required = false,
                                   default = nil)
  if valid_21626298 != nil:
    section.add "X-Amz-Signature", valid_21626298
  var valid_21626299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626299 = validateParameter(valid_21626299, JString, required = false,
                                   default = nil)
  if valid_21626299 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626299
  var valid_21626300 = header.getOrDefault("X-Amz-Credential")
  valid_21626300 = validateParameter(valid_21626300, JString, required = false,
                                   default = nil)
  if valid_21626300 != nil:
    section.add "X-Amz-Credential", valid_21626300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626301: Call_GetCreateDBCluster_21626265; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
  ## 
  let valid = call_21626301.validator(path, query, header, formData, body, _)
  let scheme = call_21626301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626301.makeUrl(scheme.get, call_21626301.host, call_21626301.base,
                               call_21626301.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626301, uri, valid, _)

proc call*(call_21626302: Call_GetCreateDBCluster_21626265; Engine: string;
          DBClusterIdentifier: string; ReplicationSourceIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          PreSignedUrl: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          BackupRetentionPeriod: int = 0; DeletionProtection: bool = false;
          Action: string = "CreateDBCluster"; CharacterSetName: string = "";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; Port: int = 0; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"; MasterUsername: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  var query_21626303 = newJObject()
  add(query_21626303, "Engine", newJString(Engine))
  add(query_21626303, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_21626303, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21626303, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21626303, "StorageEncrypted", newJBool(StorageEncrypted))
  if AvailabilityZones != nil:
    query_21626303.add "AvailabilityZones", AvailabilityZones
  add(query_21626303, "DatabaseName", newJString(DatabaseName))
  add(query_21626303, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626303, "OptionGroupName", newJString(OptionGroupName))
  add(query_21626303, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21626303, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_21626303, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_21626303.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21626303.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_21626303.add "Tags", Tags
  add(query_21626303, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21626303, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21626303, "Action", newJString(Action))
  add(query_21626303, "CharacterSetName", newJString(CharacterSetName))
  add(query_21626303, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626303, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626303, "EngineVersion", newJString(EngineVersion))
  add(query_21626303, "Port", newJInt(Port))
  add(query_21626303, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21626303, "Version", newJString(Version))
  add(query_21626303, "MasterUsername", newJString(MasterUsername))
  result = call_21626302.call(nil, query_21626303, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_21626265(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_21626266,
    base: "/", makeUrl: url_GetCreateDBCluster_21626267,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_21626363 = ref object of OpenApiRestCall_21625418
proc url_PostCreateDBClusterParameterGroup_21626365(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_21626364(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626366 = query.getOrDefault("Action")
  valid_21626366 = validateParameter(valid_21626366, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_21626366 != nil:
    section.add "Action", valid_21626366
  var valid_21626367 = query.getOrDefault("Version")
  valid_21626367 = validateParameter(valid_21626367, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626367 != nil:
    section.add "Version", valid_21626367
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626368 = header.getOrDefault("X-Amz-Date")
  valid_21626368 = validateParameter(valid_21626368, JString, required = false,
                                   default = nil)
  if valid_21626368 != nil:
    section.add "X-Amz-Date", valid_21626368
  var valid_21626369 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626369 = validateParameter(valid_21626369, JString, required = false,
                                   default = nil)
  if valid_21626369 != nil:
    section.add "X-Amz-Security-Token", valid_21626369
  var valid_21626370 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626370 = validateParameter(valid_21626370, JString, required = false,
                                   default = nil)
  if valid_21626370 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626370
  var valid_21626371 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626371 = validateParameter(valid_21626371, JString, required = false,
                                   default = nil)
  if valid_21626371 != nil:
    section.add "X-Amz-Algorithm", valid_21626371
  var valid_21626372 = header.getOrDefault("X-Amz-Signature")
  valid_21626372 = validateParameter(valid_21626372, JString, required = false,
                                   default = nil)
  if valid_21626372 != nil:
    section.add "X-Amz-Signature", valid_21626372
  var valid_21626373 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626373 = validateParameter(valid_21626373, JString, required = false,
                                   default = nil)
  if valid_21626373 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626373
  var valid_21626374 = header.getOrDefault("X-Amz-Credential")
  valid_21626374 = validateParameter(valid_21626374, JString, required = false,
                                   default = nil)
  if valid_21626374 != nil:
    section.add "X-Amz-Credential", valid_21626374
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  section = newJObject()
  var valid_21626375 = formData.getOrDefault("Tags")
  valid_21626375 = validateParameter(valid_21626375, JArray, required = false,
                                   default = nil)
  if valid_21626375 != nil:
    section.add "Tags", valid_21626375
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626376 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626376 = validateParameter(valid_21626376, JString, required = true,
                                   default = nil)
  if valid_21626376 != nil:
    section.add "DBClusterParameterGroupName", valid_21626376
  var valid_21626377 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21626377 = validateParameter(valid_21626377, JString, required = true,
                                   default = nil)
  if valid_21626377 != nil:
    section.add "DBParameterGroupFamily", valid_21626377
  var valid_21626378 = formData.getOrDefault("Description")
  valid_21626378 = validateParameter(valid_21626378, JString, required = true,
                                   default = nil)
  if valid_21626378 != nil:
    section.add "Description", valid_21626378
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626379: Call_PostCreateDBClusterParameterGroup_21626363;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21626379.validator(path, query, header, formData, body, _)
  let scheme = call_21626379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626379.makeUrl(scheme.get, call_21626379.host, call_21626379.base,
                               call_21626379.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626379, uri, valid, _)

proc call*(call_21626380: Call_PostCreateDBClusterParameterGroup_21626363;
          DBClusterParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  var query_21626381 = newJObject()
  var formData_21626382 = newJObject()
  if Tags != nil:
    formData_21626382.add "Tags", Tags
  add(query_21626381, "Action", newJString(Action))
  add(formData_21626382, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21626382, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_21626381, "Version", newJString(Version))
  add(formData_21626382, "Description", newJString(Description))
  result = call_21626380.call(nil, query_21626381, nil, formData_21626382, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_21626363(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_21626364, base: "/",
    makeUrl: url_PostCreateDBClusterParameterGroup_21626365,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_21626344 = ref object of OpenApiRestCall_21625418
proc url_GetCreateDBClusterParameterGroup_21626346(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_21626345(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626347 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626347 = validateParameter(valid_21626347, JString, required = true,
                                   default = nil)
  if valid_21626347 != nil:
    section.add "DBClusterParameterGroupName", valid_21626347
  var valid_21626348 = query.getOrDefault("Description")
  valid_21626348 = validateParameter(valid_21626348, JString, required = true,
                                   default = nil)
  if valid_21626348 != nil:
    section.add "Description", valid_21626348
  var valid_21626349 = query.getOrDefault("DBParameterGroupFamily")
  valid_21626349 = validateParameter(valid_21626349, JString, required = true,
                                   default = nil)
  if valid_21626349 != nil:
    section.add "DBParameterGroupFamily", valid_21626349
  var valid_21626350 = query.getOrDefault("Tags")
  valid_21626350 = validateParameter(valid_21626350, JArray, required = false,
                                   default = nil)
  if valid_21626350 != nil:
    section.add "Tags", valid_21626350
  var valid_21626351 = query.getOrDefault("Action")
  valid_21626351 = validateParameter(valid_21626351, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_21626351 != nil:
    section.add "Action", valid_21626351
  var valid_21626352 = query.getOrDefault("Version")
  valid_21626352 = validateParameter(valid_21626352, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626352 != nil:
    section.add "Version", valid_21626352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626353 = header.getOrDefault("X-Amz-Date")
  valid_21626353 = validateParameter(valid_21626353, JString, required = false,
                                   default = nil)
  if valid_21626353 != nil:
    section.add "X-Amz-Date", valid_21626353
  var valid_21626354 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626354 = validateParameter(valid_21626354, JString, required = false,
                                   default = nil)
  if valid_21626354 != nil:
    section.add "X-Amz-Security-Token", valid_21626354
  var valid_21626355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626355 = validateParameter(valid_21626355, JString, required = false,
                                   default = nil)
  if valid_21626355 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626355
  var valid_21626356 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626356 = validateParameter(valid_21626356, JString, required = false,
                                   default = nil)
  if valid_21626356 != nil:
    section.add "X-Amz-Algorithm", valid_21626356
  var valid_21626357 = header.getOrDefault("X-Amz-Signature")
  valid_21626357 = validateParameter(valid_21626357, JString, required = false,
                                   default = nil)
  if valid_21626357 != nil:
    section.add "X-Amz-Signature", valid_21626357
  var valid_21626358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626358 = validateParameter(valid_21626358, JString, required = false,
                                   default = nil)
  if valid_21626358 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626358
  var valid_21626359 = header.getOrDefault("X-Amz-Credential")
  valid_21626359 = validateParameter(valid_21626359, JString, required = false,
                                   default = nil)
  if valid_21626359 != nil:
    section.add "X-Amz-Credential", valid_21626359
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626360: Call_GetCreateDBClusterParameterGroup_21626344;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21626360.validator(path, query, header, formData, body, _)
  let scheme = call_21626360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626360.makeUrl(scheme.get, call_21626360.host, call_21626360.base,
                               call_21626360.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626360, uri, valid, _)

proc call*(call_21626361: Call_GetCreateDBClusterParameterGroup_21626344;
          DBClusterParameterGroupName: string; Description: string;
          DBParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626362 = newJObject()
  add(query_21626362, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21626362, "Description", newJString(Description))
  add(query_21626362, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_21626362.add "Tags", Tags
  add(query_21626362, "Action", newJString(Action))
  add(query_21626362, "Version", newJString(Version))
  result = call_21626361.call(nil, query_21626362, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_21626344(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_21626345, base: "/",
    makeUrl: url_GetCreateDBClusterParameterGroup_21626346,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_21626401 = ref object of OpenApiRestCall_21625418
proc url_PostCreateDBClusterSnapshot_21626403(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_21626402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626404 = query.getOrDefault("Action")
  valid_21626404 = validateParameter(valid_21626404, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_21626404 != nil:
    section.add "Action", valid_21626404
  var valid_21626405 = query.getOrDefault("Version")
  valid_21626405 = validateParameter(valid_21626405, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626405 != nil:
    section.add "Version", valid_21626405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626406 = header.getOrDefault("X-Amz-Date")
  valid_21626406 = validateParameter(valid_21626406, JString, required = false,
                                   default = nil)
  if valid_21626406 != nil:
    section.add "X-Amz-Date", valid_21626406
  var valid_21626407 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626407 = validateParameter(valid_21626407, JString, required = false,
                                   default = nil)
  if valid_21626407 != nil:
    section.add "X-Amz-Security-Token", valid_21626407
  var valid_21626408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626408 = validateParameter(valid_21626408, JString, required = false,
                                   default = nil)
  if valid_21626408 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626408
  var valid_21626409 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626409 = validateParameter(valid_21626409, JString, required = false,
                                   default = nil)
  if valid_21626409 != nil:
    section.add "X-Amz-Algorithm", valid_21626409
  var valid_21626410 = header.getOrDefault("X-Amz-Signature")
  valid_21626410 = validateParameter(valid_21626410, JString, required = false,
                                   default = nil)
  if valid_21626410 != nil:
    section.add "X-Amz-Signature", valid_21626410
  var valid_21626411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626411 = validateParameter(valid_21626411, JString, required = false,
                                   default = nil)
  if valid_21626411 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626411
  var valid_21626412 = header.getOrDefault("X-Amz-Credential")
  valid_21626412 = validateParameter(valid_21626412, JString, required = false,
                                   default = nil)
  if valid_21626412 != nil:
    section.add "X-Amz-Credential", valid_21626412
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21626413 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21626413 = validateParameter(valid_21626413, JString, required = true,
                                   default = nil)
  if valid_21626413 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21626413
  var valid_21626414 = formData.getOrDefault("Tags")
  valid_21626414 = validateParameter(valid_21626414, JArray, required = false,
                                   default = nil)
  if valid_21626414 != nil:
    section.add "Tags", valid_21626414
  var valid_21626415 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626415 = validateParameter(valid_21626415, JString, required = true,
                                   default = nil)
  if valid_21626415 != nil:
    section.add "DBClusterIdentifier", valid_21626415
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626416: Call_PostCreateDBClusterSnapshot_21626401;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_21626416.validator(path, query, header, formData, body, _)
  let scheme = call_21626416.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626416.makeUrl(scheme.get, call_21626416.host, call_21626416.base,
                               call_21626416.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626416, uri, valid, _)

proc call*(call_21626417: Call_PostCreateDBClusterSnapshot_21626401;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_21626418 = newJObject()
  var formData_21626419 = newJObject()
  add(formData_21626419, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    formData_21626419.add "Tags", Tags
  add(query_21626418, "Action", newJString(Action))
  add(formData_21626419, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626418, "Version", newJString(Version))
  result = call_21626417.call(nil, query_21626418, nil, formData_21626419, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_21626401(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_21626402, base: "/",
    makeUrl: url_PostCreateDBClusterSnapshot_21626403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_21626383 = ref object of OpenApiRestCall_21625418
proc url_GetCreateDBClusterSnapshot_21626385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_21626384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21626386 = query.getOrDefault("DBClusterIdentifier")
  valid_21626386 = validateParameter(valid_21626386, JString, required = true,
                                   default = nil)
  if valid_21626386 != nil:
    section.add "DBClusterIdentifier", valid_21626386
  var valid_21626387 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21626387 = validateParameter(valid_21626387, JString, required = true,
                                   default = nil)
  if valid_21626387 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21626387
  var valid_21626388 = query.getOrDefault("Tags")
  valid_21626388 = validateParameter(valid_21626388, JArray, required = false,
                                   default = nil)
  if valid_21626388 != nil:
    section.add "Tags", valid_21626388
  var valid_21626389 = query.getOrDefault("Action")
  valid_21626389 = validateParameter(valid_21626389, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_21626389 != nil:
    section.add "Action", valid_21626389
  var valid_21626390 = query.getOrDefault("Version")
  valid_21626390 = validateParameter(valid_21626390, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626390 != nil:
    section.add "Version", valid_21626390
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626391 = header.getOrDefault("X-Amz-Date")
  valid_21626391 = validateParameter(valid_21626391, JString, required = false,
                                   default = nil)
  if valid_21626391 != nil:
    section.add "X-Amz-Date", valid_21626391
  var valid_21626392 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626392 = validateParameter(valid_21626392, JString, required = false,
                                   default = nil)
  if valid_21626392 != nil:
    section.add "X-Amz-Security-Token", valid_21626392
  var valid_21626393 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626393 = validateParameter(valid_21626393, JString, required = false,
                                   default = nil)
  if valid_21626393 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626393
  var valid_21626394 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626394 = validateParameter(valid_21626394, JString, required = false,
                                   default = nil)
  if valid_21626394 != nil:
    section.add "X-Amz-Algorithm", valid_21626394
  var valid_21626395 = header.getOrDefault("X-Amz-Signature")
  valid_21626395 = validateParameter(valid_21626395, JString, required = false,
                                   default = nil)
  if valid_21626395 != nil:
    section.add "X-Amz-Signature", valid_21626395
  var valid_21626396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626396 = validateParameter(valid_21626396, JString, required = false,
                                   default = nil)
  if valid_21626396 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626396
  var valid_21626397 = header.getOrDefault("X-Amz-Credential")
  valid_21626397 = validateParameter(valid_21626397, JString, required = false,
                                   default = nil)
  if valid_21626397 != nil:
    section.add "X-Amz-Credential", valid_21626397
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626398: Call_GetCreateDBClusterSnapshot_21626383;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_21626398.validator(path, query, header, formData, body, _)
  let scheme = call_21626398.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626398.makeUrl(scheme.get, call_21626398.host, call_21626398.base,
                               call_21626398.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626398, uri, valid, _)

proc call*(call_21626399: Call_GetCreateDBClusterSnapshot_21626383;
          DBClusterIdentifier: string; DBClusterSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626400 = newJObject()
  add(query_21626400, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626400, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_21626400.add "Tags", Tags
  add(query_21626400, "Action", newJString(Action))
  add(query_21626400, "Version", newJString(Version))
  result = call_21626399.call(nil, query_21626400, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_21626383(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_21626384, base: "/",
    makeUrl: url_GetCreateDBClusterSnapshot_21626385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_21626496 = ref object of OpenApiRestCall_21625418
proc url_PostCreateDBInstance_21626498(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_21626497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626499 = query.getOrDefault("Action")
  valid_21626499 = validateParameter(valid_21626499, JString, required = true,
                                   default = newJString("CreateDBInstance"))
  if valid_21626499 != nil:
    section.add "Action", valid_21626499
  var valid_21626500 = query.getOrDefault("Version")
  valid_21626500 = validateParameter(valid_21626500, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626500 != nil:
    section.add "Version", valid_21626500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626501 = header.getOrDefault("X-Amz-Date")
  valid_21626501 = validateParameter(valid_21626501, JString, required = false,
                                   default = nil)
  if valid_21626501 != nil:
    section.add "X-Amz-Date", valid_21626501
  var valid_21626502 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626502 = validateParameter(valid_21626502, JString, required = false,
                                   default = nil)
  if valid_21626502 != nil:
    section.add "X-Amz-Security-Token", valid_21626502
  var valid_21626503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626503 = validateParameter(valid_21626503, JString, required = false,
                                   default = nil)
  if valid_21626503 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626503
  var valid_21626504 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626504 = validateParameter(valid_21626504, JString, required = false,
                                   default = nil)
  if valid_21626504 != nil:
    section.add "X-Amz-Algorithm", valid_21626504
  var valid_21626505 = header.getOrDefault("X-Amz-Signature")
  valid_21626505 = validateParameter(valid_21626505, JString, required = false,
                                   default = nil)
  if valid_21626505 != nil:
    section.add "X-Amz-Signature", valid_21626505
  var valid_21626506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626506 = validateParameter(valid_21626506, JString, required = false,
                                   default = nil)
  if valid_21626506 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626506
  var valid_21626507 = header.getOrDefault("X-Amz-Credential")
  valid_21626507 = validateParameter(valid_21626507, JString, required = false,
                                   default = nil)
  if valid_21626507 != nil:
    section.add "X-Amz-Credential", valid_21626507
  result.add "header", section
  ## parameters in `formData` object:
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</p> <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   DBName: JString
  ##         : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_21626508 = formData.getOrDefault("EnablePerformanceInsights")
  valid_21626508 = validateParameter(valid_21626508, JBool, required = false,
                                   default = nil)
  if valid_21626508 != nil:
    section.add "EnablePerformanceInsights", valid_21626508
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21626509 = formData.getOrDefault("Engine")
  valid_21626509 = validateParameter(valid_21626509, JString, required = true,
                                   default = nil)
  if valid_21626509 != nil:
    section.add "Engine", valid_21626509
  var valid_21626510 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21626510 = validateParameter(valid_21626510, JArray, required = false,
                                   default = nil)
  if valid_21626510 != nil:
    section.add "VpcSecurityGroupIds", valid_21626510
  var valid_21626511 = formData.getOrDefault("Iops")
  valid_21626511 = validateParameter(valid_21626511, JInt, required = false,
                                   default = nil)
  if valid_21626511 != nil:
    section.add "Iops", valid_21626511
  var valid_21626512 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21626512 = validateParameter(valid_21626512, JInt, required = false,
                                   default = nil)
  if valid_21626512 != nil:
    section.add "BackupRetentionPeriod", valid_21626512
  var valid_21626513 = formData.getOrDefault("Tags")
  valid_21626513 = validateParameter(valid_21626513, JArray, required = false,
                                   default = nil)
  if valid_21626513 != nil:
    section.add "Tags", valid_21626513
  var valid_21626514 = formData.getOrDefault("TdeCredentialArn")
  valid_21626514 = validateParameter(valid_21626514, JString, required = false,
                                   default = nil)
  if valid_21626514 != nil:
    section.add "TdeCredentialArn", valid_21626514
  var valid_21626515 = formData.getOrDefault("DeletionProtection")
  valid_21626515 = validateParameter(valid_21626515, JBool, required = false,
                                   default = nil)
  if valid_21626515 != nil:
    section.add "DeletionProtection", valid_21626515
  var valid_21626516 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626516 = validateParameter(valid_21626516, JString, required = false,
                                   default = nil)
  if valid_21626516 != nil:
    section.add "DBSubnetGroupName", valid_21626516
  var valid_21626517 = formData.getOrDefault("MultiAZ")
  valid_21626517 = validateParameter(valid_21626517, JBool, required = false,
                                   default = nil)
  if valid_21626517 != nil:
    section.add "MultiAZ", valid_21626517
  var valid_21626518 = formData.getOrDefault("PubliclyAccessible")
  valid_21626518 = validateParameter(valid_21626518, JBool, required = false,
                                   default = nil)
  if valid_21626518 != nil:
    section.add "PubliclyAccessible", valid_21626518
  var valid_21626519 = formData.getOrDefault("StorageType")
  valid_21626519 = validateParameter(valid_21626519, JString, required = false,
                                   default = nil)
  if valid_21626519 != nil:
    section.add "StorageType", valid_21626519
  var valid_21626520 = formData.getOrDefault("Timezone")
  valid_21626520 = validateParameter(valid_21626520, JString, required = false,
                                   default = nil)
  if valid_21626520 != nil:
    section.add "Timezone", valid_21626520
  var valid_21626521 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626521 = validateParameter(valid_21626521, JArray, required = false,
                                   default = nil)
  if valid_21626521 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626521
  var valid_21626522 = formData.getOrDefault("CharacterSetName")
  valid_21626522 = validateParameter(valid_21626522, JString, required = false,
                                   default = nil)
  if valid_21626522 != nil:
    section.add "CharacterSetName", valid_21626522
  var valid_21626523 = formData.getOrDefault("Domain")
  valid_21626523 = validateParameter(valid_21626523, JString, required = false,
                                   default = nil)
  if valid_21626523 != nil:
    section.add "Domain", valid_21626523
  var valid_21626524 = formData.getOrDefault("LicenseModel")
  valid_21626524 = validateParameter(valid_21626524, JString, required = false,
                                   default = nil)
  if valid_21626524 != nil:
    section.add "LicenseModel", valid_21626524
  var valid_21626525 = formData.getOrDefault("KmsKeyId")
  valid_21626525 = validateParameter(valid_21626525, JString, required = false,
                                   default = nil)
  if valid_21626525 != nil:
    section.add "KmsKeyId", valid_21626525
  var valid_21626526 = formData.getOrDefault("StorageEncrypted")
  valid_21626526 = validateParameter(valid_21626526, JBool, required = false,
                                   default = nil)
  if valid_21626526 != nil:
    section.add "StorageEncrypted", valid_21626526
  var valid_21626527 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626527 = validateParameter(valid_21626527, JString, required = false,
                                   default = nil)
  if valid_21626527 != nil:
    section.add "DBClusterIdentifier", valid_21626527
  var valid_21626528 = formData.getOrDefault("MonitoringRoleArn")
  valid_21626528 = validateParameter(valid_21626528, JString, required = false,
                                   default = nil)
  if valid_21626528 != nil:
    section.add "MonitoringRoleArn", valid_21626528
  var valid_21626529 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21626529 = validateParameter(valid_21626529, JString, required = false,
                                   default = nil)
  if valid_21626529 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21626529
  var valid_21626530 = formData.getOrDefault("DBSecurityGroups")
  valid_21626530 = validateParameter(valid_21626530, JArray, required = false,
                                   default = nil)
  if valid_21626530 != nil:
    section.add "DBSecurityGroups", valid_21626530
  var valid_21626531 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21626531 = validateParameter(valid_21626531, JBool, required = false,
                                   default = nil)
  if valid_21626531 != nil:
    section.add "CopyTagsToSnapshot", valid_21626531
  var valid_21626532 = formData.getOrDefault("Port")
  valid_21626532 = validateParameter(valid_21626532, JInt, required = false,
                                   default = nil)
  if valid_21626532 != nil:
    section.add "Port", valid_21626532
  var valid_21626533 = formData.getOrDefault("DBName")
  valid_21626533 = validateParameter(valid_21626533, JString, required = false,
                                   default = nil)
  if valid_21626533 != nil:
    section.add "DBName", valid_21626533
  var valid_21626534 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21626534 = validateParameter(valid_21626534, JString, required = true,
                                   default = nil)
  if valid_21626534 != nil:
    section.add "DBInstanceIdentifier", valid_21626534
  var valid_21626535 = formData.getOrDefault("OptionGroupName")
  valid_21626535 = validateParameter(valid_21626535, JString, required = false,
                                   default = nil)
  if valid_21626535 != nil:
    section.add "OptionGroupName", valid_21626535
  var valid_21626536 = formData.getOrDefault("DBParameterGroupName")
  valid_21626536 = validateParameter(valid_21626536, JString, required = false,
                                   default = nil)
  if valid_21626536 != nil:
    section.add "DBParameterGroupName", valid_21626536
  var valid_21626537 = formData.getOrDefault("MasterUserPassword")
  valid_21626537 = validateParameter(valid_21626537, JString, required = false,
                                   default = nil)
  if valid_21626537 != nil:
    section.add "MasterUserPassword", valid_21626537
  var valid_21626538 = formData.getOrDefault("TdeCredentialPassword")
  valid_21626538 = validateParameter(valid_21626538, JString, required = false,
                                   default = nil)
  if valid_21626538 != nil:
    section.add "TdeCredentialPassword", valid_21626538
  var valid_21626539 = formData.getOrDefault("AvailabilityZone")
  valid_21626539 = validateParameter(valid_21626539, JString, required = false,
                                   default = nil)
  if valid_21626539 != nil:
    section.add "AvailabilityZone", valid_21626539
  var valid_21626540 = formData.getOrDefault("MonitoringInterval")
  valid_21626540 = validateParameter(valid_21626540, JInt, required = false,
                                   default = nil)
  if valid_21626540 != nil:
    section.add "MonitoringInterval", valid_21626540
  var valid_21626541 = formData.getOrDefault("DomainIAMRoleName")
  valid_21626541 = validateParameter(valid_21626541, JString, required = false,
                                   default = nil)
  if valid_21626541 != nil:
    section.add "DomainIAMRoleName", valid_21626541
  var valid_21626542 = formData.getOrDefault("AllocatedStorage")
  valid_21626542 = validateParameter(valid_21626542, JInt, required = false,
                                   default = nil)
  if valid_21626542 != nil:
    section.add "AllocatedStorage", valid_21626542
  var valid_21626543 = formData.getOrDefault("MasterUsername")
  valid_21626543 = validateParameter(valid_21626543, JString, required = false,
                                   default = nil)
  if valid_21626543 != nil:
    section.add "MasterUsername", valid_21626543
  var valid_21626544 = formData.getOrDefault("PromotionTier")
  valid_21626544 = validateParameter(valid_21626544, JInt, required = false,
                                   default = nil)
  if valid_21626544 != nil:
    section.add "PromotionTier", valid_21626544
  var valid_21626545 = formData.getOrDefault("DBInstanceClass")
  valid_21626545 = validateParameter(valid_21626545, JString, required = true,
                                   default = nil)
  if valid_21626545 != nil:
    section.add "DBInstanceClass", valid_21626545
  var valid_21626546 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626546 = validateParameter(valid_21626546, JBool, required = false,
                                   default = nil)
  if valid_21626546 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626546
  var valid_21626547 = formData.getOrDefault("PreferredBackupWindow")
  valid_21626547 = validateParameter(valid_21626547, JString, required = false,
                                   default = nil)
  if valid_21626547 != nil:
    section.add "PreferredBackupWindow", valid_21626547
  var valid_21626548 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21626548 = validateParameter(valid_21626548, JBool, required = false,
                                   default = nil)
  if valid_21626548 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21626548
  var valid_21626549 = formData.getOrDefault("EngineVersion")
  valid_21626549 = validateParameter(valid_21626549, JString, required = false,
                                   default = nil)
  if valid_21626549 != nil:
    section.add "EngineVersion", valid_21626549
  var valid_21626550 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21626550 = validateParameter(valid_21626550, JString, required = false,
                                   default = nil)
  if valid_21626550 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626550
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626551: Call_PostCreateDBInstance_21626496; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_21626551.validator(path, query, header, formData, body, _)
  let scheme = call_21626551.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626551.makeUrl(scheme.get, call_21626551.host, call_21626551.base,
                               call_21626551.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626551, uri, valid, _)

proc call*(call_21626552: Call_PostCreateDBInstance_21626496; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; Tags: JsonNode = nil;
          TdeCredentialArn: string = ""; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; MultiAZ: bool = false;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Timezone: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; LicenseModel: string = "";
          KmsKeyId: string = ""; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""; MonitoringRoleArn: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstance"; AllocatedStorage: int = 0;
          MasterUsername: string = ""; PromotionTier: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</p> <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   DBName: string
  ##         : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_21626553 = newJObject()
  var formData_21626554 = newJObject()
  add(formData_21626554, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_21626554, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_21626554.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21626554, "Iops", newJInt(Iops))
  add(formData_21626554, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_21626554.add "Tags", Tags
  add(formData_21626554, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_21626554, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21626554, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21626554, "MultiAZ", newJBool(MultiAZ))
  add(formData_21626554, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21626554, "StorageType", newJString(StorageType))
  add(formData_21626554, "Timezone", newJString(Timezone))
  if EnableCloudwatchLogsExports != nil:
    formData_21626554.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21626554, "CharacterSetName", newJString(CharacterSetName))
  add(formData_21626554, "Domain", newJString(Domain))
  add(formData_21626554, "LicenseModel", newJString(LicenseModel))
  add(formData_21626554, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21626554, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21626554, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21626554, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_21626554, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_21626554.add "DBSecurityGroups", DBSecurityGroups
  add(formData_21626554, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21626554, "Port", newJInt(Port))
  add(formData_21626554, "DBName", newJString(DBName))
  add(formData_21626554, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21626554, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21626554, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21626554, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21626554, "TdeCredentialPassword",
      newJString(TdeCredentialPassword))
  add(formData_21626554, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21626554, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_21626554, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21626553, "Action", newJString(Action))
  add(formData_21626554, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_21626554, "MasterUsername", newJString(MasterUsername))
  add(formData_21626554, "PromotionTier", newJInt(PromotionTier))
  add(formData_21626554, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21626554, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21626554, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21626554, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_21626554, "EngineVersion", newJString(EngineVersion))
  add(query_21626553, "Version", newJString(Version))
  add(formData_21626554, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21626552.call(nil, query_21626553, nil, formData_21626554, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_21626496(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_21626497, base: "/",
    makeUrl: url_PostCreateDBInstance_21626498,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_21626420 = ref object of OpenApiRestCall_21625418
proc url_GetCreateDBInstance_21626422(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_21626421(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: JString
  ##         : Not supported.
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</p> <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626441 = query.getOrDefault("MonitoringInterval")
  valid_21626441 = validateParameter(valid_21626441, JInt, required = false,
                                   default = nil)
  if valid_21626441 != nil:
    section.add "MonitoringInterval", valid_21626441
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21626442 = query.getOrDefault("Engine")
  valid_21626442 = validateParameter(valid_21626442, JString, required = true,
                                   default = nil)
  if valid_21626442 != nil:
    section.add "Engine", valid_21626442
  var valid_21626443 = query.getOrDefault("PromotionTier")
  valid_21626443 = validateParameter(valid_21626443, JInt, required = false,
                                   default = nil)
  if valid_21626443 != nil:
    section.add "PromotionTier", valid_21626443
  var valid_21626444 = query.getOrDefault("StorageEncrypted")
  valid_21626444 = validateParameter(valid_21626444, JBool, required = false,
                                   default = nil)
  if valid_21626444 != nil:
    section.add "StorageEncrypted", valid_21626444
  var valid_21626445 = query.getOrDefault("AllocatedStorage")
  valid_21626445 = validateParameter(valid_21626445, JInt, required = false,
                                   default = nil)
  if valid_21626445 != nil:
    section.add "AllocatedStorage", valid_21626445
  var valid_21626446 = query.getOrDefault("StorageType")
  valid_21626446 = validateParameter(valid_21626446, JString, required = false,
                                   default = nil)
  if valid_21626446 != nil:
    section.add "StorageType", valid_21626446
  var valid_21626447 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626447 = validateParameter(valid_21626447, JBool, required = false,
                                   default = nil)
  if valid_21626447 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626447
  var valid_21626448 = query.getOrDefault("DBClusterIdentifier")
  valid_21626448 = validateParameter(valid_21626448, JString, required = false,
                                   default = nil)
  if valid_21626448 != nil:
    section.add "DBClusterIdentifier", valid_21626448
  var valid_21626449 = query.getOrDefault("DBSecurityGroups")
  valid_21626449 = validateParameter(valid_21626449, JArray, required = false,
                                   default = nil)
  if valid_21626449 != nil:
    section.add "DBSecurityGroups", valid_21626449
  var valid_21626450 = query.getOrDefault("MasterUserPassword")
  valid_21626450 = validateParameter(valid_21626450, JString, required = false,
                                   default = nil)
  if valid_21626450 != nil:
    section.add "MasterUserPassword", valid_21626450
  var valid_21626451 = query.getOrDefault("MonitoringRoleArn")
  valid_21626451 = validateParameter(valid_21626451, JString, required = false,
                                   default = nil)
  if valid_21626451 != nil:
    section.add "MonitoringRoleArn", valid_21626451
  var valid_21626452 = query.getOrDefault("MultiAZ")
  valid_21626452 = validateParameter(valid_21626452, JBool, required = false,
                                   default = nil)
  if valid_21626452 != nil:
    section.add "MultiAZ", valid_21626452
  var valid_21626453 = query.getOrDefault("TdeCredentialPassword")
  valid_21626453 = validateParameter(valid_21626453, JString, required = false,
                                   default = nil)
  if valid_21626453 != nil:
    section.add "TdeCredentialPassword", valid_21626453
  var valid_21626454 = query.getOrDefault("DomainIAMRoleName")
  valid_21626454 = validateParameter(valid_21626454, JString, required = false,
                                   default = nil)
  if valid_21626454 != nil:
    section.add "DomainIAMRoleName", valid_21626454
  var valid_21626455 = query.getOrDefault("BackupRetentionPeriod")
  valid_21626455 = validateParameter(valid_21626455, JInt, required = false,
                                   default = nil)
  if valid_21626455 != nil:
    section.add "BackupRetentionPeriod", valid_21626455
  var valid_21626456 = query.getOrDefault("DBName")
  valid_21626456 = validateParameter(valid_21626456, JString, required = false,
                                   default = nil)
  if valid_21626456 != nil:
    section.add "DBName", valid_21626456
  var valid_21626457 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21626457 = validateParameter(valid_21626457, JBool, required = false,
                                   default = nil)
  if valid_21626457 != nil:
    section.add "CopyTagsToSnapshot", valid_21626457
  var valid_21626458 = query.getOrDefault("DeletionProtection")
  valid_21626458 = validateParameter(valid_21626458, JBool, required = false,
                                   default = nil)
  if valid_21626458 != nil:
    section.add "DeletionProtection", valid_21626458
  var valid_21626459 = query.getOrDefault("DBSubnetGroupName")
  valid_21626459 = validateParameter(valid_21626459, JString, required = false,
                                   default = nil)
  if valid_21626459 != nil:
    section.add "DBSubnetGroupName", valid_21626459
  var valid_21626460 = query.getOrDefault("KmsKeyId")
  valid_21626460 = validateParameter(valid_21626460, JString, required = false,
                                   default = nil)
  if valid_21626460 != nil:
    section.add "KmsKeyId", valid_21626460
  var valid_21626461 = query.getOrDefault("Domain")
  valid_21626461 = validateParameter(valid_21626461, JString, required = false,
                                   default = nil)
  if valid_21626461 != nil:
    section.add "Domain", valid_21626461
  var valid_21626462 = query.getOrDefault("EngineVersion")
  valid_21626462 = validateParameter(valid_21626462, JString, required = false,
                                   default = nil)
  if valid_21626462 != nil:
    section.add "EngineVersion", valid_21626462
  var valid_21626463 = query.getOrDefault("PreferredBackupWindow")
  valid_21626463 = validateParameter(valid_21626463, JString, required = false,
                                   default = nil)
  if valid_21626463 != nil:
    section.add "PreferredBackupWindow", valid_21626463
  var valid_21626464 = query.getOrDefault("DBInstanceIdentifier")
  valid_21626464 = validateParameter(valid_21626464, JString, required = true,
                                   default = nil)
  if valid_21626464 != nil:
    section.add "DBInstanceIdentifier", valid_21626464
  var valid_21626465 = query.getOrDefault("MasterUsername")
  valid_21626465 = validateParameter(valid_21626465, JString, required = false,
                                   default = nil)
  if valid_21626465 != nil:
    section.add "MasterUsername", valid_21626465
  var valid_21626466 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21626466 = validateParameter(valid_21626466, JString, required = false,
                                   default = nil)
  if valid_21626466 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626466
  var valid_21626467 = query.getOrDefault("OptionGroupName")
  valid_21626467 = validateParameter(valid_21626467, JString, required = false,
                                   default = nil)
  if valid_21626467 != nil:
    section.add "OptionGroupName", valid_21626467
  var valid_21626468 = query.getOrDefault("AvailabilityZone")
  valid_21626468 = validateParameter(valid_21626468, JString, required = false,
                                   default = nil)
  if valid_21626468 != nil:
    section.add "AvailabilityZone", valid_21626468
  var valid_21626469 = query.getOrDefault("Iops")
  valid_21626469 = validateParameter(valid_21626469, JInt, required = false,
                                   default = nil)
  if valid_21626469 != nil:
    section.add "Iops", valid_21626469
  var valid_21626470 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21626470 = validateParameter(valid_21626470, JArray, required = false,
                                   default = nil)
  if valid_21626470 != nil:
    section.add "VpcSecurityGroupIds", valid_21626470
  var valid_21626471 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626471 = validateParameter(valid_21626471, JArray, required = false,
                                   default = nil)
  if valid_21626471 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626471
  var valid_21626472 = query.getOrDefault("LicenseModel")
  valid_21626472 = validateParameter(valid_21626472, JString, required = false,
                                   default = nil)
  if valid_21626472 != nil:
    section.add "LicenseModel", valid_21626472
  var valid_21626473 = query.getOrDefault("Tags")
  valid_21626473 = validateParameter(valid_21626473, JArray, required = false,
                                   default = nil)
  if valid_21626473 != nil:
    section.add "Tags", valid_21626473
  var valid_21626474 = query.getOrDefault("DBParameterGroupName")
  valid_21626474 = validateParameter(valid_21626474, JString, required = false,
                                   default = nil)
  if valid_21626474 != nil:
    section.add "DBParameterGroupName", valid_21626474
  var valid_21626475 = query.getOrDefault("DBInstanceClass")
  valid_21626475 = validateParameter(valid_21626475, JString, required = true,
                                   default = nil)
  if valid_21626475 != nil:
    section.add "DBInstanceClass", valid_21626475
  var valid_21626476 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21626476 = validateParameter(valid_21626476, JString, required = false,
                                   default = nil)
  if valid_21626476 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21626476
  var valid_21626477 = query.getOrDefault("Action")
  valid_21626477 = validateParameter(valid_21626477, JString, required = true,
                                   default = newJString("CreateDBInstance"))
  if valid_21626477 != nil:
    section.add "Action", valid_21626477
  var valid_21626478 = query.getOrDefault("CharacterSetName")
  valid_21626478 = validateParameter(valid_21626478, JString, required = false,
                                   default = nil)
  if valid_21626478 != nil:
    section.add "CharacterSetName", valid_21626478
  var valid_21626479 = query.getOrDefault("TdeCredentialArn")
  valid_21626479 = validateParameter(valid_21626479, JString, required = false,
                                   default = nil)
  if valid_21626479 != nil:
    section.add "TdeCredentialArn", valid_21626479
  var valid_21626480 = query.getOrDefault("PubliclyAccessible")
  valid_21626480 = validateParameter(valid_21626480, JBool, required = false,
                                   default = nil)
  if valid_21626480 != nil:
    section.add "PubliclyAccessible", valid_21626480
  var valid_21626481 = query.getOrDefault("Timezone")
  valid_21626481 = validateParameter(valid_21626481, JString, required = false,
                                   default = nil)
  if valid_21626481 != nil:
    section.add "Timezone", valid_21626481
  var valid_21626482 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21626482 = validateParameter(valid_21626482, JBool, required = false,
                                   default = nil)
  if valid_21626482 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21626482
  var valid_21626483 = query.getOrDefault("Port")
  valid_21626483 = validateParameter(valid_21626483, JInt, required = false,
                                   default = nil)
  if valid_21626483 != nil:
    section.add "Port", valid_21626483
  var valid_21626484 = query.getOrDefault("EnablePerformanceInsights")
  valid_21626484 = validateParameter(valid_21626484, JBool, required = false,
                                   default = nil)
  if valid_21626484 != nil:
    section.add "EnablePerformanceInsights", valid_21626484
  var valid_21626485 = query.getOrDefault("Version")
  valid_21626485 = validateParameter(valid_21626485, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626485 != nil:
    section.add "Version", valid_21626485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626486 = header.getOrDefault("X-Amz-Date")
  valid_21626486 = validateParameter(valid_21626486, JString, required = false,
                                   default = nil)
  if valid_21626486 != nil:
    section.add "X-Amz-Date", valid_21626486
  var valid_21626487 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626487 = validateParameter(valid_21626487, JString, required = false,
                                   default = nil)
  if valid_21626487 != nil:
    section.add "X-Amz-Security-Token", valid_21626487
  var valid_21626488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626488 = validateParameter(valid_21626488, JString, required = false,
                                   default = nil)
  if valid_21626488 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626488
  var valid_21626489 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626489 = validateParameter(valid_21626489, JString, required = false,
                                   default = nil)
  if valid_21626489 != nil:
    section.add "X-Amz-Algorithm", valid_21626489
  var valid_21626490 = header.getOrDefault("X-Amz-Signature")
  valid_21626490 = validateParameter(valid_21626490, JString, required = false,
                                   default = nil)
  if valid_21626490 != nil:
    section.add "X-Amz-Signature", valid_21626490
  var valid_21626491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626491 = validateParameter(valid_21626491, JString, required = false,
                                   default = nil)
  if valid_21626491 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626491
  var valid_21626492 = header.getOrDefault("X-Amz-Credential")
  valid_21626492 = validateParameter(valid_21626492, JString, required = false,
                                   default = nil)
  if valid_21626492 != nil:
    section.add "X-Amz-Credential", valid_21626492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626493: Call_GetCreateDBInstance_21626420; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_21626493.validator(path, query, header, formData, body, _)
  let scheme = call_21626493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626493.makeUrl(scheme.get, call_21626493.host, call_21626493.base,
                               call_21626493.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626493, uri, valid, _)

proc call*(call_21626494: Call_GetCreateDBInstance_21626420; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; PromotionTier: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          DBClusterIdentifier: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          DomainIAMRoleName: string = ""; BackupRetentionPeriod: int = 0;
          DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; MasterUsername: string = "";
          PreferredMaintenanceWindow: string = ""; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "CreateDBInstance"; CharacterSetName: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          Timezone: string = ""; AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: string
  ##         : Not supported.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</p> <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Currently, setting this parameter has no effect.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   :  <i>(Not supported by Neptune)</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  var query_21626495 = newJObject()
  add(query_21626495, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_21626495, "Engine", newJString(Engine))
  add(query_21626495, "PromotionTier", newJInt(PromotionTier))
  add(query_21626495, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_21626495, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_21626495, "StorageType", newJString(StorageType))
  add(query_21626495, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21626495, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if DBSecurityGroups != nil:
    query_21626495.add "DBSecurityGroups", DBSecurityGroups
  add(query_21626495, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21626495, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21626495, "MultiAZ", newJBool(MultiAZ))
  add(query_21626495, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_21626495, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21626495, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21626495, "DBName", newJString(DBName))
  add(query_21626495, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21626495, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21626495, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626495, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626495, "Domain", newJString(Domain))
  add(query_21626495, "EngineVersion", newJString(EngineVersion))
  add(query_21626495, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21626495, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21626495, "MasterUsername", newJString(MasterUsername))
  add(query_21626495, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21626495, "OptionGroupName", newJString(OptionGroupName))
  add(query_21626495, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21626495, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_21626495.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21626495.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21626495, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_21626495.add "Tags", Tags
  add(query_21626495, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21626495, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21626495, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_21626495, "Action", newJString(Action))
  add(query_21626495, "CharacterSetName", newJString(CharacterSetName))
  add(query_21626495, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_21626495, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21626495, "Timezone", newJString(Timezone))
  add(query_21626495, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21626495, "Port", newJInt(Port))
  add(query_21626495, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_21626495, "Version", newJString(Version))
  result = call_21626494.call(nil, query_21626495, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_21626420(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_21626421, base: "/",
    makeUrl: url_GetCreateDBInstance_21626422,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_21626574 = ref object of OpenApiRestCall_21625418
proc url_PostCreateDBParameterGroup_21626576(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_21626575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626577 = query.getOrDefault("Action")
  valid_21626577 = validateParameter(valid_21626577, JString, required = true, default = newJString(
      "CreateDBParameterGroup"))
  if valid_21626577 != nil:
    section.add "Action", valid_21626577
  var valid_21626578 = query.getOrDefault("Version")
  valid_21626578 = validateParameter(valid_21626578, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626578 != nil:
    section.add "Version", valid_21626578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626579 = header.getOrDefault("X-Amz-Date")
  valid_21626579 = validateParameter(valid_21626579, JString, required = false,
                                   default = nil)
  if valid_21626579 != nil:
    section.add "X-Amz-Date", valid_21626579
  var valid_21626580 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626580 = validateParameter(valid_21626580, JString, required = false,
                                   default = nil)
  if valid_21626580 != nil:
    section.add "X-Amz-Security-Token", valid_21626580
  var valid_21626581 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626581 = validateParameter(valid_21626581, JString, required = false,
                                   default = nil)
  if valid_21626581 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626581
  var valid_21626582 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626582 = validateParameter(valid_21626582, JString, required = false,
                                   default = nil)
  if valid_21626582 != nil:
    section.add "X-Amz-Algorithm", valid_21626582
  var valid_21626583 = header.getOrDefault("X-Amz-Signature")
  valid_21626583 = validateParameter(valid_21626583, JString, required = false,
                                   default = nil)
  if valid_21626583 != nil:
    section.add "X-Amz-Signature", valid_21626583
  var valid_21626584 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626584 = validateParameter(valid_21626584, JString, required = false,
                                   default = nil)
  if valid_21626584 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626584
  var valid_21626585 = header.getOrDefault("X-Amz-Credential")
  valid_21626585 = validateParameter(valid_21626585, JString, required = false,
                                   default = nil)
  if valid_21626585 != nil:
    section.add "X-Amz-Credential", valid_21626585
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21626586 = formData.getOrDefault("DBParameterGroupName")
  valid_21626586 = validateParameter(valid_21626586, JString, required = true,
                                   default = nil)
  if valid_21626586 != nil:
    section.add "DBParameterGroupName", valid_21626586
  var valid_21626587 = formData.getOrDefault("Tags")
  valid_21626587 = validateParameter(valid_21626587, JArray, required = false,
                                   default = nil)
  if valid_21626587 != nil:
    section.add "Tags", valid_21626587
  var valid_21626588 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21626588 = validateParameter(valid_21626588, JString, required = true,
                                   default = nil)
  if valid_21626588 != nil:
    section.add "DBParameterGroupFamily", valid_21626588
  var valid_21626589 = formData.getOrDefault("Description")
  valid_21626589 = validateParameter(valid_21626589, JString, required = true,
                                   default = nil)
  if valid_21626589 != nil:
    section.add "Description", valid_21626589
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626590: Call_PostCreateDBParameterGroup_21626574;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21626590.validator(path, query, header, formData, body, _)
  let scheme = call_21626590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626590.makeUrl(scheme.get, call_21626590.host, call_21626590.base,
                               call_21626590.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626590, uri, valid, _)

proc call*(call_21626591: Call_PostCreateDBParameterGroup_21626574;
          DBParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  var query_21626592 = newJObject()
  var formData_21626593 = newJObject()
  add(formData_21626593, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_21626593.add "Tags", Tags
  add(query_21626592, "Action", newJString(Action))
  add(formData_21626593, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_21626592, "Version", newJString(Version))
  add(formData_21626593, "Description", newJString(Description))
  result = call_21626591.call(nil, query_21626592, nil, formData_21626593, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_21626574(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_21626575, base: "/",
    makeUrl: url_PostCreateDBParameterGroup_21626576,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_21626555 = ref object of OpenApiRestCall_21625418
proc url_GetCreateDBParameterGroup_21626557(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_21626556(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_21626558 = query.getOrDefault("Description")
  valid_21626558 = validateParameter(valid_21626558, JString, required = true,
                                   default = nil)
  if valid_21626558 != nil:
    section.add "Description", valid_21626558
  var valid_21626559 = query.getOrDefault("DBParameterGroupFamily")
  valid_21626559 = validateParameter(valid_21626559, JString, required = true,
                                   default = nil)
  if valid_21626559 != nil:
    section.add "DBParameterGroupFamily", valid_21626559
  var valid_21626560 = query.getOrDefault("Tags")
  valid_21626560 = validateParameter(valid_21626560, JArray, required = false,
                                   default = nil)
  if valid_21626560 != nil:
    section.add "Tags", valid_21626560
  var valid_21626561 = query.getOrDefault("DBParameterGroupName")
  valid_21626561 = validateParameter(valid_21626561, JString, required = true,
                                   default = nil)
  if valid_21626561 != nil:
    section.add "DBParameterGroupName", valid_21626561
  var valid_21626562 = query.getOrDefault("Action")
  valid_21626562 = validateParameter(valid_21626562, JString, required = true, default = newJString(
      "CreateDBParameterGroup"))
  if valid_21626562 != nil:
    section.add "Action", valid_21626562
  var valid_21626563 = query.getOrDefault("Version")
  valid_21626563 = validateParameter(valid_21626563, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626563 != nil:
    section.add "Version", valid_21626563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626564 = header.getOrDefault("X-Amz-Date")
  valid_21626564 = validateParameter(valid_21626564, JString, required = false,
                                   default = nil)
  if valid_21626564 != nil:
    section.add "X-Amz-Date", valid_21626564
  var valid_21626565 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626565 = validateParameter(valid_21626565, JString, required = false,
                                   default = nil)
  if valid_21626565 != nil:
    section.add "X-Amz-Security-Token", valid_21626565
  var valid_21626566 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626566 = validateParameter(valid_21626566, JString, required = false,
                                   default = nil)
  if valid_21626566 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626566
  var valid_21626567 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626567 = validateParameter(valid_21626567, JString, required = false,
                                   default = nil)
  if valid_21626567 != nil:
    section.add "X-Amz-Algorithm", valid_21626567
  var valid_21626568 = header.getOrDefault("X-Amz-Signature")
  valid_21626568 = validateParameter(valid_21626568, JString, required = false,
                                   default = nil)
  if valid_21626568 != nil:
    section.add "X-Amz-Signature", valid_21626568
  var valid_21626569 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626569 = validateParameter(valid_21626569, JString, required = false,
                                   default = nil)
  if valid_21626569 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626569
  var valid_21626570 = header.getOrDefault("X-Amz-Credential")
  valid_21626570 = validateParameter(valid_21626570, JString, required = false,
                                   default = nil)
  if valid_21626570 != nil:
    section.add "X-Amz-Credential", valid_21626570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626571: Call_GetCreateDBParameterGroup_21626555;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21626571.validator(path, query, header, formData, body, _)
  let scheme = call_21626571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626571.makeUrl(scheme.get, call_21626571.host, call_21626571.base,
                               call_21626571.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626571, uri, valid, _)

proc call*(call_21626572: Call_GetCreateDBParameterGroup_21626555;
          Description: string; DBParameterGroupFamily: string;
          DBParameterGroupName: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626573 = newJObject()
  add(query_21626573, "Description", newJString(Description))
  add(query_21626573, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_21626573.add "Tags", Tags
  add(query_21626573, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21626573, "Action", newJString(Action))
  add(query_21626573, "Version", newJString(Version))
  result = call_21626572.call(nil, query_21626573, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_21626555(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_21626556, base: "/",
    makeUrl: url_GetCreateDBParameterGroup_21626557,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_21626613 = ref object of OpenApiRestCall_21625418
proc url_PostCreateDBSubnetGroup_21626615(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_21626614(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626616 = query.getOrDefault("Action")
  valid_21626616 = validateParameter(valid_21626616, JString, required = true,
                                   default = newJString("CreateDBSubnetGroup"))
  if valid_21626616 != nil:
    section.add "Action", valid_21626616
  var valid_21626617 = query.getOrDefault("Version")
  valid_21626617 = validateParameter(valid_21626617, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626617 != nil:
    section.add "Version", valid_21626617
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626618 = header.getOrDefault("X-Amz-Date")
  valid_21626618 = validateParameter(valid_21626618, JString, required = false,
                                   default = nil)
  if valid_21626618 != nil:
    section.add "X-Amz-Date", valid_21626618
  var valid_21626619 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626619 = validateParameter(valid_21626619, JString, required = false,
                                   default = nil)
  if valid_21626619 != nil:
    section.add "X-Amz-Security-Token", valid_21626619
  var valid_21626620 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626620 = validateParameter(valid_21626620, JString, required = false,
                                   default = nil)
  if valid_21626620 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626620
  var valid_21626621 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626621 = validateParameter(valid_21626621, JString, required = false,
                                   default = nil)
  if valid_21626621 != nil:
    section.add "X-Amz-Algorithm", valid_21626621
  var valid_21626622 = header.getOrDefault("X-Amz-Signature")
  valid_21626622 = validateParameter(valid_21626622, JString, required = false,
                                   default = nil)
  if valid_21626622 != nil:
    section.add "X-Amz-Signature", valid_21626622
  var valid_21626623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626623 = validateParameter(valid_21626623, JString, required = false,
                                   default = nil)
  if valid_21626623 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626623
  var valid_21626624 = header.getOrDefault("X-Amz-Credential")
  valid_21626624 = validateParameter(valid_21626624, JString, required = false,
                                   default = nil)
  if valid_21626624 != nil:
    section.add "X-Amz-Credential", valid_21626624
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  section = newJObject()
  var valid_21626625 = formData.getOrDefault("Tags")
  valid_21626625 = validateParameter(valid_21626625, JArray, required = false,
                                   default = nil)
  if valid_21626625 != nil:
    section.add "Tags", valid_21626625
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_21626626 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626626 = validateParameter(valid_21626626, JString, required = true,
                                   default = nil)
  if valid_21626626 != nil:
    section.add "DBSubnetGroupName", valid_21626626
  var valid_21626627 = formData.getOrDefault("SubnetIds")
  valid_21626627 = validateParameter(valid_21626627, JArray, required = true,
                                   default = nil)
  if valid_21626627 != nil:
    section.add "SubnetIds", valid_21626627
  var valid_21626628 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_21626628 = validateParameter(valid_21626628, JString, required = true,
                                   default = nil)
  if valid_21626628 != nil:
    section.add "DBSubnetGroupDescription", valid_21626628
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626629: Call_PostCreateDBSubnetGroup_21626613;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21626629.validator(path, query, header, formData, body, _)
  let scheme = call_21626629.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626629.makeUrl(scheme.get, call_21626629.host, call_21626629.base,
                               call_21626629.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626629, uri, valid, _)

proc call*(call_21626630: Call_PostCreateDBSubnetGroup_21626613;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21626631 = newJObject()
  var formData_21626632 = newJObject()
  if Tags != nil:
    formData_21626632.add "Tags", Tags
  add(formData_21626632, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_21626632.add "SubnetIds", SubnetIds
  add(query_21626631, "Action", newJString(Action))
  add(formData_21626632, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21626631, "Version", newJString(Version))
  result = call_21626630.call(nil, query_21626631, nil, formData_21626632, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_21626613(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_21626614, base: "/",
    makeUrl: url_PostCreateDBSubnetGroup_21626615,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_21626594 = ref object of OpenApiRestCall_21625418
proc url_GetCreateDBSubnetGroup_21626596(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_21626595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626597 = query.getOrDefault("Tags")
  valid_21626597 = validateParameter(valid_21626597, JArray, required = false,
                                   default = nil)
  if valid_21626597 != nil:
    section.add "Tags", valid_21626597
  var valid_21626598 = query.getOrDefault("Action")
  valid_21626598 = validateParameter(valid_21626598, JString, required = true,
                                   default = newJString("CreateDBSubnetGroup"))
  if valid_21626598 != nil:
    section.add "Action", valid_21626598
  var valid_21626599 = query.getOrDefault("DBSubnetGroupName")
  valid_21626599 = validateParameter(valid_21626599, JString, required = true,
                                   default = nil)
  if valid_21626599 != nil:
    section.add "DBSubnetGroupName", valid_21626599
  var valid_21626600 = query.getOrDefault("SubnetIds")
  valid_21626600 = validateParameter(valid_21626600, JArray, required = true,
                                   default = nil)
  if valid_21626600 != nil:
    section.add "SubnetIds", valid_21626600
  var valid_21626601 = query.getOrDefault("DBSubnetGroupDescription")
  valid_21626601 = validateParameter(valid_21626601, JString, required = true,
                                   default = nil)
  if valid_21626601 != nil:
    section.add "DBSubnetGroupDescription", valid_21626601
  var valid_21626602 = query.getOrDefault("Version")
  valid_21626602 = validateParameter(valid_21626602, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626602 != nil:
    section.add "Version", valid_21626602
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626603 = header.getOrDefault("X-Amz-Date")
  valid_21626603 = validateParameter(valid_21626603, JString, required = false,
                                   default = nil)
  if valid_21626603 != nil:
    section.add "X-Amz-Date", valid_21626603
  var valid_21626604 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626604 = validateParameter(valid_21626604, JString, required = false,
                                   default = nil)
  if valid_21626604 != nil:
    section.add "X-Amz-Security-Token", valid_21626604
  var valid_21626605 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626605 = validateParameter(valid_21626605, JString, required = false,
                                   default = nil)
  if valid_21626605 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626605
  var valid_21626606 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626606 = validateParameter(valid_21626606, JString, required = false,
                                   default = nil)
  if valid_21626606 != nil:
    section.add "X-Amz-Algorithm", valid_21626606
  var valid_21626607 = header.getOrDefault("X-Amz-Signature")
  valid_21626607 = validateParameter(valid_21626607, JString, required = false,
                                   default = nil)
  if valid_21626607 != nil:
    section.add "X-Amz-Signature", valid_21626607
  var valid_21626608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626608 = validateParameter(valid_21626608, JString, required = false,
                                   default = nil)
  if valid_21626608 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626608
  var valid_21626609 = header.getOrDefault("X-Amz-Credential")
  valid_21626609 = validateParameter(valid_21626609, JString, required = false,
                                   default = nil)
  if valid_21626609 != nil:
    section.add "X-Amz-Credential", valid_21626609
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626610: Call_GetCreateDBSubnetGroup_21626594;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21626610.validator(path, query, header, formData, body, _)
  let scheme = call_21626610.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626610.makeUrl(scheme.get, call_21626610.host, call_21626610.base,
                               call_21626610.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626610, uri, valid, _)

proc call*(call_21626611: Call_GetCreateDBSubnetGroup_21626594;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21626612 = newJObject()
  if Tags != nil:
    query_21626612.add "Tags", Tags
  add(query_21626612, "Action", newJString(Action))
  add(query_21626612, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_21626612.add "SubnetIds", SubnetIds
  add(query_21626612, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21626612, "Version", newJString(Version))
  result = call_21626611.call(nil, query_21626612, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_21626594(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_21626595, base: "/",
    makeUrl: url_GetCreateDBSubnetGroup_21626596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_21626655 = ref object of OpenApiRestCall_21625418
proc url_PostCreateEventSubscription_21626657(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_21626656(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626658 = query.getOrDefault("Action")
  valid_21626658 = validateParameter(valid_21626658, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_21626658 != nil:
    section.add "Action", valid_21626658
  var valid_21626659 = query.getOrDefault("Version")
  valid_21626659 = validateParameter(valid_21626659, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626659 != nil:
    section.add "Version", valid_21626659
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626660 = header.getOrDefault("X-Amz-Date")
  valid_21626660 = validateParameter(valid_21626660, JString, required = false,
                                   default = nil)
  if valid_21626660 != nil:
    section.add "X-Amz-Date", valid_21626660
  var valid_21626661 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626661 = validateParameter(valid_21626661, JString, required = false,
                                   default = nil)
  if valid_21626661 != nil:
    section.add "X-Amz-Security-Token", valid_21626661
  var valid_21626662 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626662 = validateParameter(valid_21626662, JString, required = false,
                                   default = nil)
  if valid_21626662 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626662
  var valid_21626663 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626663 = validateParameter(valid_21626663, JString, required = false,
                                   default = nil)
  if valid_21626663 != nil:
    section.add "X-Amz-Algorithm", valid_21626663
  var valid_21626664 = header.getOrDefault("X-Amz-Signature")
  valid_21626664 = validateParameter(valid_21626664, JString, required = false,
                                   default = nil)
  if valid_21626664 != nil:
    section.add "X-Amz-Signature", valid_21626664
  var valid_21626665 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626665 = validateParameter(valid_21626665, JString, required = false,
                                   default = nil)
  if valid_21626665 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626665
  var valid_21626666 = header.getOrDefault("X-Amz-Credential")
  valid_21626666 = validateParameter(valid_21626666, JString, required = false,
                                   default = nil)
  if valid_21626666 != nil:
    section.add "X-Amz-Credential", valid_21626666
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  section = newJObject()
  var valid_21626667 = formData.getOrDefault("Enabled")
  valid_21626667 = validateParameter(valid_21626667, JBool, required = false,
                                   default = nil)
  if valid_21626667 != nil:
    section.add "Enabled", valid_21626667
  var valid_21626668 = formData.getOrDefault("EventCategories")
  valid_21626668 = validateParameter(valid_21626668, JArray, required = false,
                                   default = nil)
  if valid_21626668 != nil:
    section.add "EventCategories", valid_21626668
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_21626669 = formData.getOrDefault("SnsTopicArn")
  valid_21626669 = validateParameter(valid_21626669, JString, required = true,
                                   default = nil)
  if valid_21626669 != nil:
    section.add "SnsTopicArn", valid_21626669
  var valid_21626670 = formData.getOrDefault("SourceIds")
  valid_21626670 = validateParameter(valid_21626670, JArray, required = false,
                                   default = nil)
  if valid_21626670 != nil:
    section.add "SourceIds", valid_21626670
  var valid_21626671 = formData.getOrDefault("Tags")
  valid_21626671 = validateParameter(valid_21626671, JArray, required = false,
                                   default = nil)
  if valid_21626671 != nil:
    section.add "Tags", valid_21626671
  var valid_21626672 = formData.getOrDefault("SubscriptionName")
  valid_21626672 = validateParameter(valid_21626672, JString, required = true,
                                   default = nil)
  if valid_21626672 != nil:
    section.add "SubscriptionName", valid_21626672
  var valid_21626673 = formData.getOrDefault("SourceType")
  valid_21626673 = validateParameter(valid_21626673, JString, required = false,
                                   default = nil)
  if valid_21626673 != nil:
    section.add "SourceType", valid_21626673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626674: Call_PostCreateEventSubscription_21626655;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_21626674.validator(path, query, header, formData, body, _)
  let scheme = call_21626674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626674.makeUrl(scheme.get, call_21626674.host, call_21626674.base,
                               call_21626674.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626674, uri, valid, _)

proc call*(call_21626675: Call_PostCreateEventSubscription_21626655;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  var query_21626676 = newJObject()
  var formData_21626677 = newJObject()
  add(formData_21626677, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_21626677.add "EventCategories", EventCategories
  add(formData_21626677, "SnsTopicArn", newJString(SnsTopicArn))
  if SourceIds != nil:
    formData_21626677.add "SourceIds", SourceIds
  if Tags != nil:
    formData_21626677.add "Tags", Tags
  add(formData_21626677, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626676, "Action", newJString(Action))
  add(query_21626676, "Version", newJString(Version))
  add(formData_21626677, "SourceType", newJString(SourceType))
  result = call_21626675.call(nil, query_21626676, nil, formData_21626677, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_21626655(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_21626656, base: "/",
    makeUrl: url_PostCreateEventSubscription_21626657,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_21626633 = ref object of OpenApiRestCall_21625418
proc url_GetCreateEventSubscription_21626635(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_21626634(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626636 = query.getOrDefault("SourceType")
  valid_21626636 = validateParameter(valid_21626636, JString, required = false,
                                   default = nil)
  if valid_21626636 != nil:
    section.add "SourceType", valid_21626636
  var valid_21626637 = query.getOrDefault("SourceIds")
  valid_21626637 = validateParameter(valid_21626637, JArray, required = false,
                                   default = nil)
  if valid_21626637 != nil:
    section.add "SourceIds", valid_21626637
  var valid_21626638 = query.getOrDefault("Enabled")
  valid_21626638 = validateParameter(valid_21626638, JBool, required = false,
                                   default = nil)
  if valid_21626638 != nil:
    section.add "Enabled", valid_21626638
  var valid_21626639 = query.getOrDefault("Tags")
  valid_21626639 = validateParameter(valid_21626639, JArray, required = false,
                                   default = nil)
  if valid_21626639 != nil:
    section.add "Tags", valid_21626639
  var valid_21626640 = query.getOrDefault("Action")
  valid_21626640 = validateParameter(valid_21626640, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_21626640 != nil:
    section.add "Action", valid_21626640
  var valid_21626641 = query.getOrDefault("SnsTopicArn")
  valid_21626641 = validateParameter(valid_21626641, JString, required = true,
                                   default = nil)
  if valid_21626641 != nil:
    section.add "SnsTopicArn", valid_21626641
  var valid_21626642 = query.getOrDefault("EventCategories")
  valid_21626642 = validateParameter(valid_21626642, JArray, required = false,
                                   default = nil)
  if valid_21626642 != nil:
    section.add "EventCategories", valid_21626642
  var valid_21626643 = query.getOrDefault("SubscriptionName")
  valid_21626643 = validateParameter(valid_21626643, JString, required = true,
                                   default = nil)
  if valid_21626643 != nil:
    section.add "SubscriptionName", valid_21626643
  var valid_21626644 = query.getOrDefault("Version")
  valid_21626644 = validateParameter(valid_21626644, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626644 != nil:
    section.add "Version", valid_21626644
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626645 = header.getOrDefault("X-Amz-Date")
  valid_21626645 = validateParameter(valid_21626645, JString, required = false,
                                   default = nil)
  if valid_21626645 != nil:
    section.add "X-Amz-Date", valid_21626645
  var valid_21626646 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626646 = validateParameter(valid_21626646, JString, required = false,
                                   default = nil)
  if valid_21626646 != nil:
    section.add "X-Amz-Security-Token", valid_21626646
  var valid_21626647 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626647 = validateParameter(valid_21626647, JString, required = false,
                                   default = nil)
  if valid_21626647 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626647
  var valid_21626648 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626648 = validateParameter(valid_21626648, JString, required = false,
                                   default = nil)
  if valid_21626648 != nil:
    section.add "X-Amz-Algorithm", valid_21626648
  var valid_21626649 = header.getOrDefault("X-Amz-Signature")
  valid_21626649 = validateParameter(valid_21626649, JString, required = false,
                                   default = nil)
  if valid_21626649 != nil:
    section.add "X-Amz-Signature", valid_21626649
  var valid_21626650 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626650 = validateParameter(valid_21626650, JString, required = false,
                                   default = nil)
  if valid_21626650 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626650
  var valid_21626651 = header.getOrDefault("X-Amz-Credential")
  valid_21626651 = validateParameter(valid_21626651, JString, required = false,
                                   default = nil)
  if valid_21626651 != nil:
    section.add "X-Amz-Credential", valid_21626651
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626652: Call_GetCreateEventSubscription_21626633;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_21626652.validator(path, query, header, formData, body, _)
  let scheme = call_21626652.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626652.makeUrl(scheme.get, call_21626652.host, call_21626652.base,
                               call_21626652.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626652, uri, valid, _)

proc call*(call_21626653: Call_GetCreateEventSubscription_21626633;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: string (required)
  var query_21626654 = newJObject()
  add(query_21626654, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_21626654.add "SourceIds", SourceIds
  add(query_21626654, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_21626654.add "Tags", Tags
  add(query_21626654, "Action", newJString(Action))
  add(query_21626654, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_21626654.add "EventCategories", EventCategories
  add(query_21626654, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626654, "Version", newJString(Version))
  result = call_21626653.call(nil, query_21626654, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_21626633(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_21626634, base: "/",
    makeUrl: url_GetCreateEventSubscription_21626635,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_21626696 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteDBCluster_21626698(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_21626697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626699 = query.getOrDefault("Action")
  valid_21626699 = validateParameter(valid_21626699, JString, required = true,
                                   default = newJString("DeleteDBCluster"))
  if valid_21626699 != nil:
    section.add "Action", valid_21626699
  var valid_21626700 = query.getOrDefault("Version")
  valid_21626700 = validateParameter(valid_21626700, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626700 != nil:
    section.add "Version", valid_21626700
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626701 = header.getOrDefault("X-Amz-Date")
  valid_21626701 = validateParameter(valid_21626701, JString, required = false,
                                   default = nil)
  if valid_21626701 != nil:
    section.add "X-Amz-Date", valid_21626701
  var valid_21626702 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626702 = validateParameter(valid_21626702, JString, required = false,
                                   default = nil)
  if valid_21626702 != nil:
    section.add "X-Amz-Security-Token", valid_21626702
  var valid_21626703 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626703 = validateParameter(valid_21626703, JString, required = false,
                                   default = nil)
  if valid_21626703 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626703
  var valid_21626704 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626704 = validateParameter(valid_21626704, JString, required = false,
                                   default = nil)
  if valid_21626704 != nil:
    section.add "X-Amz-Algorithm", valid_21626704
  var valid_21626705 = header.getOrDefault("X-Amz-Signature")
  valid_21626705 = validateParameter(valid_21626705, JString, required = false,
                                   default = nil)
  if valid_21626705 != nil:
    section.add "X-Amz-Signature", valid_21626705
  var valid_21626706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626706 = validateParameter(valid_21626706, JString, required = false,
                                   default = nil)
  if valid_21626706 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626706
  var valid_21626707 = header.getOrDefault("X-Amz-Credential")
  valid_21626707 = validateParameter(valid_21626707, JString, required = false,
                                   default = nil)
  if valid_21626707 != nil:
    section.add "X-Amz-Credential", valid_21626707
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_21626708 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21626708 = validateParameter(valid_21626708, JString, required = false,
                                   default = nil)
  if valid_21626708 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21626708
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21626709 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626709 = validateParameter(valid_21626709, JString, required = true,
                                   default = nil)
  if valid_21626709 != nil:
    section.add "DBClusterIdentifier", valid_21626709
  var valid_21626710 = formData.getOrDefault("SkipFinalSnapshot")
  valid_21626710 = validateParameter(valid_21626710, JBool, required = false,
                                   default = nil)
  if valid_21626710 != nil:
    section.add "SkipFinalSnapshot", valid_21626710
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626711: Call_PostDeleteDBCluster_21626696; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
  ## 
  let valid = call_21626711.validator(path, query, header, formData, body, _)
  let scheme = call_21626711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626711.makeUrl(scheme.get, call_21626711.host, call_21626711.base,
                               call_21626711.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626711, uri, valid, _)

proc call*(call_21626712: Call_PostDeleteDBCluster_21626696;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  var query_21626713 = newJObject()
  var formData_21626714 = newJObject()
  add(formData_21626714, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21626713, "Action", newJString(Action))
  add(formData_21626714, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626713, "Version", newJString(Version))
  add(formData_21626714, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_21626712.call(nil, query_21626713, nil, formData_21626714, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_21626696(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_21626697, base: "/",
    makeUrl: url_PostDeleteDBCluster_21626698,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_21626678 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteDBCluster_21626680(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_21626679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21626681 = query.getOrDefault("DBClusterIdentifier")
  valid_21626681 = validateParameter(valid_21626681, JString, required = true,
                                   default = nil)
  if valid_21626681 != nil:
    section.add "DBClusterIdentifier", valid_21626681
  var valid_21626682 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21626682 = validateParameter(valid_21626682, JString, required = false,
                                   default = nil)
  if valid_21626682 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21626682
  var valid_21626683 = query.getOrDefault("Action")
  valid_21626683 = validateParameter(valid_21626683, JString, required = true,
                                   default = newJString("DeleteDBCluster"))
  if valid_21626683 != nil:
    section.add "Action", valid_21626683
  var valid_21626684 = query.getOrDefault("SkipFinalSnapshot")
  valid_21626684 = validateParameter(valid_21626684, JBool, required = false,
                                   default = nil)
  if valid_21626684 != nil:
    section.add "SkipFinalSnapshot", valid_21626684
  var valid_21626685 = query.getOrDefault("Version")
  valid_21626685 = validateParameter(valid_21626685, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626685 != nil:
    section.add "Version", valid_21626685
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626686 = header.getOrDefault("X-Amz-Date")
  valid_21626686 = validateParameter(valid_21626686, JString, required = false,
                                   default = nil)
  if valid_21626686 != nil:
    section.add "X-Amz-Date", valid_21626686
  var valid_21626687 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626687 = validateParameter(valid_21626687, JString, required = false,
                                   default = nil)
  if valid_21626687 != nil:
    section.add "X-Amz-Security-Token", valid_21626687
  var valid_21626688 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626688 = validateParameter(valid_21626688, JString, required = false,
                                   default = nil)
  if valid_21626688 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626688
  var valid_21626689 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626689 = validateParameter(valid_21626689, JString, required = false,
                                   default = nil)
  if valid_21626689 != nil:
    section.add "X-Amz-Algorithm", valid_21626689
  var valid_21626690 = header.getOrDefault("X-Amz-Signature")
  valid_21626690 = validateParameter(valid_21626690, JString, required = false,
                                   default = nil)
  if valid_21626690 != nil:
    section.add "X-Amz-Signature", valid_21626690
  var valid_21626691 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626691 = validateParameter(valid_21626691, JString, required = false,
                                   default = nil)
  if valid_21626691 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626691
  var valid_21626692 = header.getOrDefault("X-Amz-Credential")
  valid_21626692 = validateParameter(valid_21626692, JString, required = false,
                                   default = nil)
  if valid_21626692 != nil:
    section.add "X-Amz-Credential", valid_21626692
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626693: Call_GetDeleteDBCluster_21626678; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
  ## 
  let valid = call_21626693.validator(path, query, header, formData, body, _)
  let scheme = call_21626693.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626693.makeUrl(scheme.get, call_21626693.host, call_21626693.base,
                               call_21626693.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626693, uri, valid, _)

proc call*(call_21626694: Call_GetDeleteDBCluster_21626678;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  var query_21626695 = newJObject()
  add(query_21626695, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626695, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21626695, "Action", newJString(Action))
  add(query_21626695, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_21626695, "Version", newJString(Version))
  result = call_21626694.call(nil, query_21626695, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_21626678(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_21626679,
    base: "/", makeUrl: url_GetDeleteDBCluster_21626680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_21626731 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteDBClusterParameterGroup_21626733(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_21626732(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626734 = query.getOrDefault("Action")
  valid_21626734 = validateParameter(valid_21626734, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_21626734 != nil:
    section.add "Action", valid_21626734
  var valid_21626735 = query.getOrDefault("Version")
  valid_21626735 = validateParameter(valid_21626735, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626735 != nil:
    section.add "Version", valid_21626735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626736 = header.getOrDefault("X-Amz-Date")
  valid_21626736 = validateParameter(valid_21626736, JString, required = false,
                                   default = nil)
  if valid_21626736 != nil:
    section.add "X-Amz-Date", valid_21626736
  var valid_21626737 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626737 = validateParameter(valid_21626737, JString, required = false,
                                   default = nil)
  if valid_21626737 != nil:
    section.add "X-Amz-Security-Token", valid_21626737
  var valid_21626738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626738 = validateParameter(valid_21626738, JString, required = false,
                                   default = nil)
  if valid_21626738 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626738
  var valid_21626739 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626739 = validateParameter(valid_21626739, JString, required = false,
                                   default = nil)
  if valid_21626739 != nil:
    section.add "X-Amz-Algorithm", valid_21626739
  var valid_21626740 = header.getOrDefault("X-Amz-Signature")
  valid_21626740 = validateParameter(valid_21626740, JString, required = false,
                                   default = nil)
  if valid_21626740 != nil:
    section.add "X-Amz-Signature", valid_21626740
  var valid_21626741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626741 = validateParameter(valid_21626741, JString, required = false,
                                   default = nil)
  if valid_21626741 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626741
  var valid_21626742 = header.getOrDefault("X-Amz-Credential")
  valid_21626742 = validateParameter(valid_21626742, JString, required = false,
                                   default = nil)
  if valid_21626742 != nil:
    section.add "X-Amz-Credential", valid_21626742
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626743 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626743 = validateParameter(valid_21626743, JString, required = true,
                                   default = nil)
  if valid_21626743 != nil:
    section.add "DBClusterParameterGroupName", valid_21626743
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626744: Call_PostDeleteDBClusterParameterGroup_21626731;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_21626744.validator(path, query, header, formData, body, _)
  let scheme = call_21626744.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626744.makeUrl(scheme.get, call_21626744.host, call_21626744.base,
                               call_21626744.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626744, uri, valid, _)

proc call*(call_21626745: Call_PostDeleteDBClusterParameterGroup_21626731;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626746 = newJObject()
  var formData_21626747 = newJObject()
  add(query_21626746, "Action", newJString(Action))
  add(formData_21626747, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21626746, "Version", newJString(Version))
  result = call_21626745.call(nil, query_21626746, nil, formData_21626747, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_21626731(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_21626732, base: "/",
    makeUrl: url_PostDeleteDBClusterParameterGroup_21626733,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_21626715 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteDBClusterParameterGroup_21626717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_21626716(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626718 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626718 = validateParameter(valid_21626718, JString, required = true,
                                   default = nil)
  if valid_21626718 != nil:
    section.add "DBClusterParameterGroupName", valid_21626718
  var valid_21626719 = query.getOrDefault("Action")
  valid_21626719 = validateParameter(valid_21626719, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_21626719 != nil:
    section.add "Action", valid_21626719
  var valid_21626720 = query.getOrDefault("Version")
  valid_21626720 = validateParameter(valid_21626720, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626720 != nil:
    section.add "Version", valid_21626720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626721 = header.getOrDefault("X-Amz-Date")
  valid_21626721 = validateParameter(valid_21626721, JString, required = false,
                                   default = nil)
  if valid_21626721 != nil:
    section.add "X-Amz-Date", valid_21626721
  var valid_21626722 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626722 = validateParameter(valid_21626722, JString, required = false,
                                   default = nil)
  if valid_21626722 != nil:
    section.add "X-Amz-Security-Token", valid_21626722
  var valid_21626723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626723 = validateParameter(valid_21626723, JString, required = false,
                                   default = nil)
  if valid_21626723 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626723
  var valid_21626724 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626724 = validateParameter(valid_21626724, JString, required = false,
                                   default = nil)
  if valid_21626724 != nil:
    section.add "X-Amz-Algorithm", valid_21626724
  var valid_21626725 = header.getOrDefault("X-Amz-Signature")
  valid_21626725 = validateParameter(valid_21626725, JString, required = false,
                                   default = nil)
  if valid_21626725 != nil:
    section.add "X-Amz-Signature", valid_21626725
  var valid_21626726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626726 = validateParameter(valid_21626726, JString, required = false,
                                   default = nil)
  if valid_21626726 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626726
  var valid_21626727 = header.getOrDefault("X-Amz-Credential")
  valid_21626727 = validateParameter(valid_21626727, JString, required = false,
                                   default = nil)
  if valid_21626727 != nil:
    section.add "X-Amz-Credential", valid_21626727
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626728: Call_GetDeleteDBClusterParameterGroup_21626715;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_21626728.validator(path, query, header, formData, body, _)
  let scheme = call_21626728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626728.makeUrl(scheme.get, call_21626728.host, call_21626728.base,
                               call_21626728.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626728, uri, valid, _)

proc call*(call_21626729: Call_GetDeleteDBClusterParameterGroup_21626715;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626730 = newJObject()
  add(query_21626730, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21626730, "Action", newJString(Action))
  add(query_21626730, "Version", newJString(Version))
  result = call_21626729.call(nil, query_21626730, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_21626715(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_21626716, base: "/",
    makeUrl: url_GetDeleteDBClusterParameterGroup_21626717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_21626764 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteDBClusterSnapshot_21626766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_21626765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626767 = query.getOrDefault("Action")
  valid_21626767 = validateParameter(valid_21626767, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_21626767 != nil:
    section.add "Action", valid_21626767
  var valid_21626768 = query.getOrDefault("Version")
  valid_21626768 = validateParameter(valid_21626768, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626768 != nil:
    section.add "Version", valid_21626768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626769 = header.getOrDefault("X-Amz-Date")
  valid_21626769 = validateParameter(valid_21626769, JString, required = false,
                                   default = nil)
  if valid_21626769 != nil:
    section.add "X-Amz-Date", valid_21626769
  var valid_21626770 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626770 = validateParameter(valid_21626770, JString, required = false,
                                   default = nil)
  if valid_21626770 != nil:
    section.add "X-Amz-Security-Token", valid_21626770
  var valid_21626771 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626771 = validateParameter(valid_21626771, JString, required = false,
                                   default = nil)
  if valid_21626771 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626771
  var valid_21626772 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626772 = validateParameter(valid_21626772, JString, required = false,
                                   default = nil)
  if valid_21626772 != nil:
    section.add "X-Amz-Algorithm", valid_21626772
  var valid_21626773 = header.getOrDefault("X-Amz-Signature")
  valid_21626773 = validateParameter(valid_21626773, JString, required = false,
                                   default = nil)
  if valid_21626773 != nil:
    section.add "X-Amz-Signature", valid_21626773
  var valid_21626774 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626774 = validateParameter(valid_21626774, JString, required = false,
                                   default = nil)
  if valid_21626774 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626774
  var valid_21626775 = header.getOrDefault("X-Amz-Credential")
  valid_21626775 = validateParameter(valid_21626775, JString, required = false,
                                   default = nil)
  if valid_21626775 != nil:
    section.add "X-Amz-Credential", valid_21626775
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21626776 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21626776 = validateParameter(valid_21626776, JString, required = true,
                                   default = nil)
  if valid_21626776 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21626776
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626777: Call_PostDeleteDBClusterSnapshot_21626764;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_21626777.validator(path, query, header, formData, body, _)
  let scheme = call_21626777.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626777.makeUrl(scheme.get, call_21626777.host, call_21626777.base,
                               call_21626777.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626777, uri, valid, _)

proc call*(call_21626778: Call_PostDeleteDBClusterSnapshot_21626764;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626779 = newJObject()
  var formData_21626780 = newJObject()
  add(formData_21626780, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21626779, "Action", newJString(Action))
  add(query_21626779, "Version", newJString(Version))
  result = call_21626778.call(nil, query_21626779, nil, formData_21626780, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_21626764(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_21626765, base: "/",
    makeUrl: url_PostDeleteDBClusterSnapshot_21626766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_21626748 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteDBClusterSnapshot_21626750(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_21626749(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21626751 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21626751 = validateParameter(valid_21626751, JString, required = true,
                                   default = nil)
  if valid_21626751 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21626751
  var valid_21626752 = query.getOrDefault("Action")
  valid_21626752 = validateParameter(valid_21626752, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_21626752 != nil:
    section.add "Action", valid_21626752
  var valid_21626753 = query.getOrDefault("Version")
  valid_21626753 = validateParameter(valid_21626753, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626753 != nil:
    section.add "Version", valid_21626753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626754 = header.getOrDefault("X-Amz-Date")
  valid_21626754 = validateParameter(valid_21626754, JString, required = false,
                                   default = nil)
  if valid_21626754 != nil:
    section.add "X-Amz-Date", valid_21626754
  var valid_21626755 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626755 = validateParameter(valid_21626755, JString, required = false,
                                   default = nil)
  if valid_21626755 != nil:
    section.add "X-Amz-Security-Token", valid_21626755
  var valid_21626756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626756 = validateParameter(valid_21626756, JString, required = false,
                                   default = nil)
  if valid_21626756 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626756
  var valid_21626757 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626757 = validateParameter(valid_21626757, JString, required = false,
                                   default = nil)
  if valid_21626757 != nil:
    section.add "X-Amz-Algorithm", valid_21626757
  var valid_21626758 = header.getOrDefault("X-Amz-Signature")
  valid_21626758 = validateParameter(valid_21626758, JString, required = false,
                                   default = nil)
  if valid_21626758 != nil:
    section.add "X-Amz-Signature", valid_21626758
  var valid_21626759 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626759 = validateParameter(valid_21626759, JString, required = false,
                                   default = nil)
  if valid_21626759 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626759
  var valid_21626760 = header.getOrDefault("X-Amz-Credential")
  valid_21626760 = validateParameter(valid_21626760, JString, required = false,
                                   default = nil)
  if valid_21626760 != nil:
    section.add "X-Amz-Credential", valid_21626760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626761: Call_GetDeleteDBClusterSnapshot_21626748;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_21626761.validator(path, query, header, formData, body, _)
  let scheme = call_21626761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626761.makeUrl(scheme.get, call_21626761.host, call_21626761.base,
                               call_21626761.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626761, uri, valid, _)

proc call*(call_21626762: Call_GetDeleteDBClusterSnapshot_21626748;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626763 = newJObject()
  add(query_21626763, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21626763, "Action", newJString(Action))
  add(query_21626763, "Version", newJString(Version))
  result = call_21626762.call(nil, query_21626763, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_21626748(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_21626749, base: "/",
    makeUrl: url_GetDeleteDBClusterSnapshot_21626750,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_21626799 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteDBInstance_21626801(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_21626800(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626802 = query.getOrDefault("Action")
  valid_21626802 = validateParameter(valid_21626802, JString, required = true,
                                   default = newJString("DeleteDBInstance"))
  if valid_21626802 != nil:
    section.add "Action", valid_21626802
  var valid_21626803 = query.getOrDefault("Version")
  valid_21626803 = validateParameter(valid_21626803, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626803 != nil:
    section.add "Version", valid_21626803
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626804 = header.getOrDefault("X-Amz-Date")
  valid_21626804 = validateParameter(valid_21626804, JString, required = false,
                                   default = nil)
  if valid_21626804 != nil:
    section.add "X-Amz-Date", valid_21626804
  var valid_21626805 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626805 = validateParameter(valid_21626805, JString, required = false,
                                   default = nil)
  if valid_21626805 != nil:
    section.add "X-Amz-Security-Token", valid_21626805
  var valid_21626806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626806 = validateParameter(valid_21626806, JString, required = false,
                                   default = nil)
  if valid_21626806 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626806
  var valid_21626807 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626807 = validateParameter(valid_21626807, JString, required = false,
                                   default = nil)
  if valid_21626807 != nil:
    section.add "X-Amz-Algorithm", valid_21626807
  var valid_21626808 = header.getOrDefault("X-Amz-Signature")
  valid_21626808 = validateParameter(valid_21626808, JString, required = false,
                                   default = nil)
  if valid_21626808 != nil:
    section.add "X-Amz-Signature", valid_21626808
  var valid_21626809 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626809 = validateParameter(valid_21626809, JString, required = false,
                                   default = nil)
  if valid_21626809 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626809
  var valid_21626810 = header.getOrDefault("X-Amz-Credential")
  valid_21626810 = validateParameter(valid_21626810, JString, required = false,
                                   default = nil)
  if valid_21626810 != nil:
    section.add "X-Amz-Credential", valid_21626810
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21626811 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21626811 = validateParameter(valid_21626811, JString, required = true,
                                   default = nil)
  if valid_21626811 != nil:
    section.add "DBInstanceIdentifier", valid_21626811
  var valid_21626812 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21626812 = validateParameter(valid_21626812, JString, required = false,
                                   default = nil)
  if valid_21626812 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21626812
  var valid_21626813 = formData.getOrDefault("SkipFinalSnapshot")
  valid_21626813 = validateParameter(valid_21626813, JBool, required = false,
                                   default = nil)
  if valid_21626813 != nil:
    section.add "SkipFinalSnapshot", valid_21626813
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626814: Call_PostDeleteDBInstance_21626799; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
  ## 
  let valid = call_21626814.validator(path, query, header, formData, body, _)
  let scheme = call_21626814.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626814.makeUrl(scheme.get, call_21626814.host, call_21626814.base,
                               call_21626814.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626814, uri, valid, _)

proc call*(call_21626815: Call_PostDeleteDBInstance_21626799;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  var query_21626816 = newJObject()
  var formData_21626817 = newJObject()
  add(formData_21626817, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21626817, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21626816, "Action", newJString(Action))
  add(query_21626816, "Version", newJString(Version))
  add(formData_21626817, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_21626815.call(nil, query_21626816, nil, formData_21626817, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_21626799(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_21626800, base: "/",
    makeUrl: url_PostDeleteDBInstance_21626801,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_21626781 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteDBInstance_21626783(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_21626782(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  section = newJObject()
  var valid_21626784 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21626784 = validateParameter(valid_21626784, JString, required = false,
                                   default = nil)
  if valid_21626784 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21626784
  var valid_21626785 = query.getOrDefault("Action")
  valid_21626785 = validateParameter(valid_21626785, JString, required = true,
                                   default = newJString("DeleteDBInstance"))
  if valid_21626785 != nil:
    section.add "Action", valid_21626785
  var valid_21626786 = query.getOrDefault("SkipFinalSnapshot")
  valid_21626786 = validateParameter(valid_21626786, JBool, required = false,
                                   default = nil)
  if valid_21626786 != nil:
    section.add "SkipFinalSnapshot", valid_21626786
  var valid_21626787 = query.getOrDefault("Version")
  valid_21626787 = validateParameter(valid_21626787, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626787 != nil:
    section.add "Version", valid_21626787
  var valid_21626788 = query.getOrDefault("DBInstanceIdentifier")
  valid_21626788 = validateParameter(valid_21626788, JString, required = true,
                                   default = nil)
  if valid_21626788 != nil:
    section.add "DBInstanceIdentifier", valid_21626788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626789 = header.getOrDefault("X-Amz-Date")
  valid_21626789 = validateParameter(valid_21626789, JString, required = false,
                                   default = nil)
  if valid_21626789 != nil:
    section.add "X-Amz-Date", valid_21626789
  var valid_21626790 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626790 = validateParameter(valid_21626790, JString, required = false,
                                   default = nil)
  if valid_21626790 != nil:
    section.add "X-Amz-Security-Token", valid_21626790
  var valid_21626791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626791 = validateParameter(valid_21626791, JString, required = false,
                                   default = nil)
  if valid_21626791 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626791
  var valid_21626792 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626792 = validateParameter(valid_21626792, JString, required = false,
                                   default = nil)
  if valid_21626792 != nil:
    section.add "X-Amz-Algorithm", valid_21626792
  var valid_21626793 = header.getOrDefault("X-Amz-Signature")
  valid_21626793 = validateParameter(valid_21626793, JString, required = false,
                                   default = nil)
  if valid_21626793 != nil:
    section.add "X-Amz-Signature", valid_21626793
  var valid_21626794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626794 = validateParameter(valid_21626794, JString, required = false,
                                   default = nil)
  if valid_21626794 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626794
  var valid_21626795 = header.getOrDefault("X-Amz-Credential")
  valid_21626795 = validateParameter(valid_21626795, JString, required = false,
                                   default = nil)
  if valid_21626795 != nil:
    section.add "X-Amz-Credential", valid_21626795
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626796: Call_GetDeleteDBInstance_21626781; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
  ## 
  let valid = call_21626796.validator(path, query, header, formData, body, _)
  let scheme = call_21626796.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626796.makeUrl(scheme.get, call_21626796.host, call_21626796.base,
                               call_21626796.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626796, uri, valid, _)

proc call*(call_21626797: Call_GetDeleteDBInstance_21626781;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  var query_21626798 = newJObject()
  add(query_21626798, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21626798, "Action", newJString(Action))
  add(query_21626798, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_21626798, "Version", newJString(Version))
  add(query_21626798, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21626797.call(nil, query_21626798, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_21626781(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_21626782, base: "/",
    makeUrl: url_GetDeleteDBInstance_21626783,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_21626834 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteDBParameterGroup_21626836(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_21626835(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626837 = query.getOrDefault("Action")
  valid_21626837 = validateParameter(valid_21626837, JString, required = true, default = newJString(
      "DeleteDBParameterGroup"))
  if valid_21626837 != nil:
    section.add "Action", valid_21626837
  var valid_21626838 = query.getOrDefault("Version")
  valid_21626838 = validateParameter(valid_21626838, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626838 != nil:
    section.add "Version", valid_21626838
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626839 = header.getOrDefault("X-Amz-Date")
  valid_21626839 = validateParameter(valid_21626839, JString, required = false,
                                   default = nil)
  if valid_21626839 != nil:
    section.add "X-Amz-Date", valid_21626839
  var valid_21626840 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626840 = validateParameter(valid_21626840, JString, required = false,
                                   default = nil)
  if valid_21626840 != nil:
    section.add "X-Amz-Security-Token", valid_21626840
  var valid_21626841 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626841 = validateParameter(valid_21626841, JString, required = false,
                                   default = nil)
  if valid_21626841 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626841
  var valid_21626842 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626842 = validateParameter(valid_21626842, JString, required = false,
                                   default = nil)
  if valid_21626842 != nil:
    section.add "X-Amz-Algorithm", valid_21626842
  var valid_21626843 = header.getOrDefault("X-Amz-Signature")
  valid_21626843 = validateParameter(valid_21626843, JString, required = false,
                                   default = nil)
  if valid_21626843 != nil:
    section.add "X-Amz-Signature", valid_21626843
  var valid_21626844 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626844 = validateParameter(valid_21626844, JString, required = false,
                                   default = nil)
  if valid_21626844 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626844
  var valid_21626845 = header.getOrDefault("X-Amz-Credential")
  valid_21626845 = validateParameter(valid_21626845, JString, required = false,
                                   default = nil)
  if valid_21626845 != nil:
    section.add "X-Amz-Credential", valid_21626845
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21626846 = formData.getOrDefault("DBParameterGroupName")
  valid_21626846 = validateParameter(valid_21626846, JString, required = true,
                                   default = nil)
  if valid_21626846 != nil:
    section.add "DBParameterGroupName", valid_21626846
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626847: Call_PostDeleteDBParameterGroup_21626834;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_21626847.validator(path, query, header, formData, body, _)
  let scheme = call_21626847.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626847.makeUrl(scheme.get, call_21626847.host, call_21626847.base,
                               call_21626847.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626847, uri, valid, _)

proc call*(call_21626848: Call_PostDeleteDBParameterGroup_21626834;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626849 = newJObject()
  var formData_21626850 = newJObject()
  add(formData_21626850, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21626849, "Action", newJString(Action))
  add(query_21626849, "Version", newJString(Version))
  result = call_21626848.call(nil, query_21626849, nil, formData_21626850, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_21626834(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_21626835, base: "/",
    makeUrl: url_PostDeleteDBParameterGroup_21626836,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_21626818 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteDBParameterGroup_21626820(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_21626819(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21626821 = query.getOrDefault("DBParameterGroupName")
  valid_21626821 = validateParameter(valid_21626821, JString, required = true,
                                   default = nil)
  if valid_21626821 != nil:
    section.add "DBParameterGroupName", valid_21626821
  var valid_21626822 = query.getOrDefault("Action")
  valid_21626822 = validateParameter(valid_21626822, JString, required = true, default = newJString(
      "DeleteDBParameterGroup"))
  if valid_21626822 != nil:
    section.add "Action", valid_21626822
  var valid_21626823 = query.getOrDefault("Version")
  valid_21626823 = validateParameter(valid_21626823, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626823 != nil:
    section.add "Version", valid_21626823
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626824 = header.getOrDefault("X-Amz-Date")
  valid_21626824 = validateParameter(valid_21626824, JString, required = false,
                                   default = nil)
  if valid_21626824 != nil:
    section.add "X-Amz-Date", valid_21626824
  var valid_21626825 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626825 = validateParameter(valid_21626825, JString, required = false,
                                   default = nil)
  if valid_21626825 != nil:
    section.add "X-Amz-Security-Token", valid_21626825
  var valid_21626826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626826 = validateParameter(valid_21626826, JString, required = false,
                                   default = nil)
  if valid_21626826 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626826
  var valid_21626827 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626827 = validateParameter(valid_21626827, JString, required = false,
                                   default = nil)
  if valid_21626827 != nil:
    section.add "X-Amz-Algorithm", valid_21626827
  var valid_21626828 = header.getOrDefault("X-Amz-Signature")
  valid_21626828 = validateParameter(valid_21626828, JString, required = false,
                                   default = nil)
  if valid_21626828 != nil:
    section.add "X-Amz-Signature", valid_21626828
  var valid_21626829 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626829 = validateParameter(valid_21626829, JString, required = false,
                                   default = nil)
  if valid_21626829 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626829
  var valid_21626830 = header.getOrDefault("X-Amz-Credential")
  valid_21626830 = validateParameter(valid_21626830, JString, required = false,
                                   default = nil)
  if valid_21626830 != nil:
    section.add "X-Amz-Credential", valid_21626830
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626831: Call_GetDeleteDBParameterGroup_21626818;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_21626831.validator(path, query, header, formData, body, _)
  let scheme = call_21626831.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626831.makeUrl(scheme.get, call_21626831.host, call_21626831.base,
                               call_21626831.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626831, uri, valid, _)

proc call*(call_21626832: Call_GetDeleteDBParameterGroup_21626818;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626833 = newJObject()
  add(query_21626833, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21626833, "Action", newJString(Action))
  add(query_21626833, "Version", newJString(Version))
  result = call_21626832.call(nil, query_21626833, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_21626818(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_21626819, base: "/",
    makeUrl: url_GetDeleteDBParameterGroup_21626820,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_21626867 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteDBSubnetGroup_21626869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_21626868(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626870 = query.getOrDefault("Action")
  valid_21626870 = validateParameter(valid_21626870, JString, required = true,
                                   default = newJString("DeleteDBSubnetGroup"))
  if valid_21626870 != nil:
    section.add "Action", valid_21626870
  var valid_21626871 = query.getOrDefault("Version")
  valid_21626871 = validateParameter(valid_21626871, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626871 != nil:
    section.add "Version", valid_21626871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626872 = header.getOrDefault("X-Amz-Date")
  valid_21626872 = validateParameter(valid_21626872, JString, required = false,
                                   default = nil)
  if valid_21626872 != nil:
    section.add "X-Amz-Date", valid_21626872
  var valid_21626873 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626873 = validateParameter(valid_21626873, JString, required = false,
                                   default = nil)
  if valid_21626873 != nil:
    section.add "X-Amz-Security-Token", valid_21626873
  var valid_21626874 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626874 = validateParameter(valid_21626874, JString, required = false,
                                   default = nil)
  if valid_21626874 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626874
  var valid_21626875 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626875 = validateParameter(valid_21626875, JString, required = false,
                                   default = nil)
  if valid_21626875 != nil:
    section.add "X-Amz-Algorithm", valid_21626875
  var valid_21626876 = header.getOrDefault("X-Amz-Signature")
  valid_21626876 = validateParameter(valid_21626876, JString, required = false,
                                   default = nil)
  if valid_21626876 != nil:
    section.add "X-Amz-Signature", valid_21626876
  var valid_21626877 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626877 = validateParameter(valid_21626877, JString, required = false,
                                   default = nil)
  if valid_21626877 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626877
  var valid_21626878 = header.getOrDefault("X-Amz-Credential")
  valid_21626878 = validateParameter(valid_21626878, JString, required = false,
                                   default = nil)
  if valid_21626878 != nil:
    section.add "X-Amz-Credential", valid_21626878
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_21626879 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626879 = validateParameter(valid_21626879, JString, required = true,
                                   default = nil)
  if valid_21626879 != nil:
    section.add "DBSubnetGroupName", valid_21626879
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626880: Call_PostDeleteDBSubnetGroup_21626867;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_21626880.validator(path, query, header, formData, body, _)
  let scheme = call_21626880.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626880.makeUrl(scheme.get, call_21626880.host, call_21626880.base,
                               call_21626880.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626880, uri, valid, _)

proc call*(call_21626881: Call_PostDeleteDBSubnetGroup_21626867;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626882 = newJObject()
  var formData_21626883 = newJObject()
  add(formData_21626883, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626882, "Action", newJString(Action))
  add(query_21626882, "Version", newJString(Version))
  result = call_21626881.call(nil, query_21626882, nil, formData_21626883, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_21626867(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_21626868, base: "/",
    makeUrl: url_PostDeleteDBSubnetGroup_21626869,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_21626851 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteDBSubnetGroup_21626853(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_21626852(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626854 = query.getOrDefault("Action")
  valid_21626854 = validateParameter(valid_21626854, JString, required = true,
                                   default = newJString("DeleteDBSubnetGroup"))
  if valid_21626854 != nil:
    section.add "Action", valid_21626854
  var valid_21626855 = query.getOrDefault("DBSubnetGroupName")
  valid_21626855 = validateParameter(valid_21626855, JString, required = true,
                                   default = nil)
  if valid_21626855 != nil:
    section.add "DBSubnetGroupName", valid_21626855
  var valid_21626856 = query.getOrDefault("Version")
  valid_21626856 = validateParameter(valid_21626856, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626856 != nil:
    section.add "Version", valid_21626856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626857 = header.getOrDefault("X-Amz-Date")
  valid_21626857 = validateParameter(valid_21626857, JString, required = false,
                                   default = nil)
  if valid_21626857 != nil:
    section.add "X-Amz-Date", valid_21626857
  var valid_21626858 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626858 = validateParameter(valid_21626858, JString, required = false,
                                   default = nil)
  if valid_21626858 != nil:
    section.add "X-Amz-Security-Token", valid_21626858
  var valid_21626859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626859 = validateParameter(valid_21626859, JString, required = false,
                                   default = nil)
  if valid_21626859 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626859
  var valid_21626860 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626860 = validateParameter(valid_21626860, JString, required = false,
                                   default = nil)
  if valid_21626860 != nil:
    section.add "X-Amz-Algorithm", valid_21626860
  var valid_21626861 = header.getOrDefault("X-Amz-Signature")
  valid_21626861 = validateParameter(valid_21626861, JString, required = false,
                                   default = nil)
  if valid_21626861 != nil:
    section.add "X-Amz-Signature", valid_21626861
  var valid_21626862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626862 = validateParameter(valid_21626862, JString, required = false,
                                   default = nil)
  if valid_21626862 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626862
  var valid_21626863 = header.getOrDefault("X-Amz-Credential")
  valid_21626863 = validateParameter(valid_21626863, JString, required = false,
                                   default = nil)
  if valid_21626863 != nil:
    section.add "X-Amz-Credential", valid_21626863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626864: Call_GetDeleteDBSubnetGroup_21626851;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_21626864.validator(path, query, header, formData, body, _)
  let scheme = call_21626864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626864.makeUrl(scheme.get, call_21626864.host, call_21626864.base,
                               call_21626864.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626864, uri, valid, _)

proc call*(call_21626865: Call_GetDeleteDBSubnetGroup_21626851;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_21626866 = newJObject()
  add(query_21626866, "Action", newJString(Action))
  add(query_21626866, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626866, "Version", newJString(Version))
  result = call_21626865.call(nil, query_21626866, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_21626851(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_21626852, base: "/",
    makeUrl: url_GetDeleteDBSubnetGroup_21626853,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_21626900 = ref object of OpenApiRestCall_21625418
proc url_PostDeleteEventSubscription_21626902(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_21626901(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626903 = query.getOrDefault("Action")
  valid_21626903 = validateParameter(valid_21626903, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_21626903 != nil:
    section.add "Action", valid_21626903
  var valid_21626904 = query.getOrDefault("Version")
  valid_21626904 = validateParameter(valid_21626904, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626904 != nil:
    section.add "Version", valid_21626904
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626905 = header.getOrDefault("X-Amz-Date")
  valid_21626905 = validateParameter(valid_21626905, JString, required = false,
                                   default = nil)
  if valid_21626905 != nil:
    section.add "X-Amz-Date", valid_21626905
  var valid_21626906 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626906 = validateParameter(valid_21626906, JString, required = false,
                                   default = nil)
  if valid_21626906 != nil:
    section.add "X-Amz-Security-Token", valid_21626906
  var valid_21626907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626907 = validateParameter(valid_21626907, JString, required = false,
                                   default = nil)
  if valid_21626907 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626907
  var valid_21626908 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626908 = validateParameter(valid_21626908, JString, required = false,
                                   default = nil)
  if valid_21626908 != nil:
    section.add "X-Amz-Algorithm", valid_21626908
  var valid_21626909 = header.getOrDefault("X-Amz-Signature")
  valid_21626909 = validateParameter(valid_21626909, JString, required = false,
                                   default = nil)
  if valid_21626909 != nil:
    section.add "X-Amz-Signature", valid_21626909
  var valid_21626910 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626910 = validateParameter(valid_21626910, JString, required = false,
                                   default = nil)
  if valid_21626910 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626910
  var valid_21626911 = header.getOrDefault("X-Amz-Credential")
  valid_21626911 = validateParameter(valid_21626911, JString, required = false,
                                   default = nil)
  if valid_21626911 != nil:
    section.add "X-Amz-Credential", valid_21626911
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_21626912 = formData.getOrDefault("SubscriptionName")
  valid_21626912 = validateParameter(valid_21626912, JString, required = true,
                                   default = nil)
  if valid_21626912 != nil:
    section.add "SubscriptionName", valid_21626912
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626913: Call_PostDeleteEventSubscription_21626900;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_21626913.validator(path, query, header, formData, body, _)
  let scheme = call_21626913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626913.makeUrl(scheme.get, call_21626913.host, call_21626913.base,
                               call_21626913.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626913, uri, valid, _)

proc call*(call_21626914: Call_PostDeleteEventSubscription_21626900;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626915 = newJObject()
  var formData_21626916 = newJObject()
  add(formData_21626916, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626915, "Action", newJString(Action))
  add(query_21626915, "Version", newJString(Version))
  result = call_21626914.call(nil, query_21626915, nil, formData_21626916, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_21626900(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_21626901, base: "/",
    makeUrl: url_PostDeleteEventSubscription_21626902,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_21626884 = ref object of OpenApiRestCall_21625418
proc url_GetDeleteEventSubscription_21626886(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_21626885(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626887 = query.getOrDefault("Action")
  valid_21626887 = validateParameter(valid_21626887, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_21626887 != nil:
    section.add "Action", valid_21626887
  var valid_21626888 = query.getOrDefault("SubscriptionName")
  valid_21626888 = validateParameter(valid_21626888, JString, required = true,
                                   default = nil)
  if valid_21626888 != nil:
    section.add "SubscriptionName", valid_21626888
  var valid_21626889 = query.getOrDefault("Version")
  valid_21626889 = validateParameter(valid_21626889, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626889 != nil:
    section.add "Version", valid_21626889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626890 = header.getOrDefault("X-Amz-Date")
  valid_21626890 = validateParameter(valid_21626890, JString, required = false,
                                   default = nil)
  if valid_21626890 != nil:
    section.add "X-Amz-Date", valid_21626890
  var valid_21626891 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626891 = validateParameter(valid_21626891, JString, required = false,
                                   default = nil)
  if valid_21626891 != nil:
    section.add "X-Amz-Security-Token", valid_21626891
  var valid_21626892 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626892 = validateParameter(valid_21626892, JString, required = false,
                                   default = nil)
  if valid_21626892 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626892
  var valid_21626893 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626893 = validateParameter(valid_21626893, JString, required = false,
                                   default = nil)
  if valid_21626893 != nil:
    section.add "X-Amz-Algorithm", valid_21626893
  var valid_21626894 = header.getOrDefault("X-Amz-Signature")
  valid_21626894 = validateParameter(valid_21626894, JString, required = false,
                                   default = nil)
  if valid_21626894 != nil:
    section.add "X-Amz-Signature", valid_21626894
  var valid_21626895 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626895 = validateParameter(valid_21626895, JString, required = false,
                                   default = nil)
  if valid_21626895 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626895
  var valid_21626896 = header.getOrDefault("X-Amz-Credential")
  valid_21626896 = validateParameter(valid_21626896, JString, required = false,
                                   default = nil)
  if valid_21626896 != nil:
    section.add "X-Amz-Credential", valid_21626896
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626897: Call_GetDeleteEventSubscription_21626884;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_21626897.validator(path, query, header, formData, body, _)
  let scheme = call_21626897.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626897.makeUrl(scheme.get, call_21626897.host, call_21626897.base,
                               call_21626897.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626897, uri, valid, _)

proc call*(call_21626898: Call_GetDeleteEventSubscription_21626884;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Version: string (required)
  var query_21626899 = newJObject()
  add(query_21626899, "Action", newJString(Action))
  add(query_21626899, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626899, "Version", newJString(Version))
  result = call_21626898.call(nil, query_21626899, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_21626884(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_21626885, base: "/",
    makeUrl: url_GetDeleteEventSubscription_21626886,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_21626936 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBClusterParameterGroups_21626938(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_21626937(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626939 = query.getOrDefault("Action")
  valid_21626939 = validateParameter(valid_21626939, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_21626939 != nil:
    section.add "Action", valid_21626939
  var valid_21626940 = query.getOrDefault("Version")
  valid_21626940 = validateParameter(valid_21626940, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626940 != nil:
    section.add "Version", valid_21626940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626941 = header.getOrDefault("X-Amz-Date")
  valid_21626941 = validateParameter(valid_21626941, JString, required = false,
                                   default = nil)
  if valid_21626941 != nil:
    section.add "X-Amz-Date", valid_21626941
  var valid_21626942 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626942 = validateParameter(valid_21626942, JString, required = false,
                                   default = nil)
  if valid_21626942 != nil:
    section.add "X-Amz-Security-Token", valid_21626942
  var valid_21626943 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626943 = validateParameter(valid_21626943, JString, required = false,
                                   default = nil)
  if valid_21626943 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626943
  var valid_21626944 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626944 = validateParameter(valid_21626944, JString, required = false,
                                   default = nil)
  if valid_21626944 != nil:
    section.add "X-Amz-Algorithm", valid_21626944
  var valid_21626945 = header.getOrDefault("X-Amz-Signature")
  valid_21626945 = validateParameter(valid_21626945, JString, required = false,
                                   default = nil)
  if valid_21626945 != nil:
    section.add "X-Amz-Signature", valid_21626945
  var valid_21626946 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626946 = validateParameter(valid_21626946, JString, required = false,
                                   default = nil)
  if valid_21626946 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626946
  var valid_21626947 = header.getOrDefault("X-Amz-Credential")
  valid_21626947 = validateParameter(valid_21626947, JString, required = false,
                                   default = nil)
  if valid_21626947 != nil:
    section.add "X-Amz-Credential", valid_21626947
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21626948 = formData.getOrDefault("Marker")
  valid_21626948 = validateParameter(valid_21626948, JString, required = false,
                                   default = nil)
  if valid_21626948 != nil:
    section.add "Marker", valid_21626948
  var valid_21626949 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626949 = validateParameter(valid_21626949, JString, required = false,
                                   default = nil)
  if valid_21626949 != nil:
    section.add "DBClusterParameterGroupName", valid_21626949
  var valid_21626950 = formData.getOrDefault("Filters")
  valid_21626950 = validateParameter(valid_21626950, JArray, required = false,
                                   default = nil)
  if valid_21626950 != nil:
    section.add "Filters", valid_21626950
  var valid_21626951 = formData.getOrDefault("MaxRecords")
  valid_21626951 = validateParameter(valid_21626951, JInt, required = false,
                                   default = nil)
  if valid_21626951 != nil:
    section.add "MaxRecords", valid_21626951
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626952: Call_PostDescribeDBClusterParameterGroups_21626936;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_21626952.validator(path, query, header, formData, body, _)
  let scheme = call_21626952.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626952.makeUrl(scheme.get, call_21626952.host, call_21626952.base,
                               call_21626952.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626952, uri, valid, _)

proc call*(call_21626953: Call_PostDescribeDBClusterParameterGroups_21626936;
          Marker: string = ""; Action: string = "DescribeDBClusterParameterGroups";
          DBClusterParameterGroupName: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21626954 = newJObject()
  var formData_21626955 = newJObject()
  add(formData_21626955, "Marker", newJString(Marker))
  add(query_21626954, "Action", newJString(Action))
  add(formData_21626955, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_21626955.add "Filters", Filters
  add(formData_21626955, "MaxRecords", newJInt(MaxRecords))
  add(query_21626954, "Version", newJString(Version))
  result = call_21626953.call(nil, query_21626954, nil, formData_21626955, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_21626936(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_21626937, base: "/",
    makeUrl: url_PostDescribeDBClusterParameterGroups_21626938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_21626917 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBClusterParameterGroups_21626919(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_21626918(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626920 = query.getOrDefault("MaxRecords")
  valid_21626920 = validateParameter(valid_21626920, JInt, required = false,
                                   default = nil)
  if valid_21626920 != nil:
    section.add "MaxRecords", valid_21626920
  var valid_21626921 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626921 = validateParameter(valid_21626921, JString, required = false,
                                   default = nil)
  if valid_21626921 != nil:
    section.add "DBClusterParameterGroupName", valid_21626921
  var valid_21626922 = query.getOrDefault("Filters")
  valid_21626922 = validateParameter(valid_21626922, JArray, required = false,
                                   default = nil)
  if valid_21626922 != nil:
    section.add "Filters", valid_21626922
  var valid_21626923 = query.getOrDefault("Action")
  valid_21626923 = validateParameter(valid_21626923, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_21626923 != nil:
    section.add "Action", valid_21626923
  var valid_21626924 = query.getOrDefault("Marker")
  valid_21626924 = validateParameter(valid_21626924, JString, required = false,
                                   default = nil)
  if valid_21626924 != nil:
    section.add "Marker", valid_21626924
  var valid_21626925 = query.getOrDefault("Version")
  valid_21626925 = validateParameter(valid_21626925, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626925 != nil:
    section.add "Version", valid_21626925
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626926 = header.getOrDefault("X-Amz-Date")
  valid_21626926 = validateParameter(valid_21626926, JString, required = false,
                                   default = nil)
  if valid_21626926 != nil:
    section.add "X-Amz-Date", valid_21626926
  var valid_21626927 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626927 = validateParameter(valid_21626927, JString, required = false,
                                   default = nil)
  if valid_21626927 != nil:
    section.add "X-Amz-Security-Token", valid_21626927
  var valid_21626928 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626928 = validateParameter(valid_21626928, JString, required = false,
                                   default = nil)
  if valid_21626928 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626928
  var valid_21626929 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626929 = validateParameter(valid_21626929, JString, required = false,
                                   default = nil)
  if valid_21626929 != nil:
    section.add "X-Amz-Algorithm", valid_21626929
  var valid_21626930 = header.getOrDefault("X-Amz-Signature")
  valid_21626930 = validateParameter(valid_21626930, JString, required = false,
                                   default = nil)
  if valid_21626930 != nil:
    section.add "X-Amz-Signature", valid_21626930
  var valid_21626931 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626931 = validateParameter(valid_21626931, JString, required = false,
                                   default = nil)
  if valid_21626931 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626931
  var valid_21626932 = header.getOrDefault("X-Amz-Credential")
  valid_21626932 = validateParameter(valid_21626932, JString, required = false,
                                   default = nil)
  if valid_21626932 != nil:
    section.add "X-Amz-Credential", valid_21626932
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626933: Call_GetDescribeDBClusterParameterGroups_21626917;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_21626933.validator(path, query, header, formData, body, _)
  let scheme = call_21626933.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626933.makeUrl(scheme.get, call_21626933.host, call_21626933.base,
                               call_21626933.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626933, uri, valid, _)

proc call*(call_21626934: Call_GetDescribeDBClusterParameterGroups_21626917;
          MaxRecords: int = 0; DBClusterParameterGroupName: string = "";
          Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21626935 = newJObject()
  add(query_21626935, "MaxRecords", newJInt(MaxRecords))
  add(query_21626935, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_21626935.add "Filters", Filters
  add(query_21626935, "Action", newJString(Action))
  add(query_21626935, "Marker", newJString(Marker))
  add(query_21626935, "Version", newJString(Version))
  result = call_21626934.call(nil, query_21626935, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_21626917(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_21626918, base: "/",
    makeUrl: url_GetDescribeDBClusterParameterGroups_21626919,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_21626976 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBClusterParameters_21626978(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_21626977(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626979 = query.getOrDefault("Action")
  valid_21626979 = validateParameter(valid_21626979, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_21626979 != nil:
    section.add "Action", valid_21626979
  var valid_21626980 = query.getOrDefault("Version")
  valid_21626980 = validateParameter(valid_21626980, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626980 != nil:
    section.add "Version", valid_21626980
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626981 = header.getOrDefault("X-Amz-Date")
  valid_21626981 = validateParameter(valid_21626981, JString, required = false,
                                   default = nil)
  if valid_21626981 != nil:
    section.add "X-Amz-Date", valid_21626981
  var valid_21626982 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626982 = validateParameter(valid_21626982, JString, required = false,
                                   default = nil)
  if valid_21626982 != nil:
    section.add "X-Amz-Security-Token", valid_21626982
  var valid_21626983 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626983 = validateParameter(valid_21626983, JString, required = false,
                                   default = nil)
  if valid_21626983 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626983
  var valid_21626984 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626984 = validateParameter(valid_21626984, JString, required = false,
                                   default = nil)
  if valid_21626984 != nil:
    section.add "X-Amz-Algorithm", valid_21626984
  var valid_21626985 = header.getOrDefault("X-Amz-Signature")
  valid_21626985 = validateParameter(valid_21626985, JString, required = false,
                                   default = nil)
  if valid_21626985 != nil:
    section.add "X-Amz-Signature", valid_21626985
  var valid_21626986 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626986 = validateParameter(valid_21626986, JString, required = false,
                                   default = nil)
  if valid_21626986 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626986
  var valid_21626987 = header.getOrDefault("X-Amz-Credential")
  valid_21626987 = validateParameter(valid_21626987, JString, required = false,
                                   default = nil)
  if valid_21626987 != nil:
    section.add "X-Amz-Credential", valid_21626987
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  section = newJObject()
  var valid_21626988 = formData.getOrDefault("Marker")
  valid_21626988 = validateParameter(valid_21626988, JString, required = false,
                                   default = nil)
  if valid_21626988 != nil:
    section.add "Marker", valid_21626988
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626989 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626989 = validateParameter(valid_21626989, JString, required = true,
                                   default = nil)
  if valid_21626989 != nil:
    section.add "DBClusterParameterGroupName", valid_21626989
  var valid_21626990 = formData.getOrDefault("Filters")
  valid_21626990 = validateParameter(valid_21626990, JArray, required = false,
                                   default = nil)
  if valid_21626990 != nil:
    section.add "Filters", valid_21626990
  var valid_21626991 = formData.getOrDefault("MaxRecords")
  valid_21626991 = validateParameter(valid_21626991, JInt, required = false,
                                   default = nil)
  if valid_21626991 != nil:
    section.add "MaxRecords", valid_21626991
  var valid_21626992 = formData.getOrDefault("Source")
  valid_21626992 = validateParameter(valid_21626992, JString, required = false,
                                   default = nil)
  if valid_21626992 != nil:
    section.add "Source", valid_21626992
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626993: Call_PostDescribeDBClusterParameters_21626976;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_21626993.validator(path, query, header, formData, body, _)
  let scheme = call_21626993.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626993.makeUrl(scheme.get, call_21626993.host, call_21626993.base,
                               call_21626993.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626993, uri, valid, _)

proc call*(call_21626994: Call_PostDescribeDBClusterParameters_21626976;
          DBClusterParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  var query_21626995 = newJObject()
  var formData_21626996 = newJObject()
  add(formData_21626996, "Marker", newJString(Marker))
  add(query_21626995, "Action", newJString(Action))
  add(formData_21626996, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_21626996.add "Filters", Filters
  add(formData_21626996, "MaxRecords", newJInt(MaxRecords))
  add(query_21626995, "Version", newJString(Version))
  add(formData_21626996, "Source", newJString(Source))
  result = call_21626994.call(nil, query_21626995, nil, formData_21626996, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_21626976(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_21626977, base: "/",
    makeUrl: url_PostDescribeDBClusterParameters_21626978,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_21626956 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBClusterParameters_21626958(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_21626957(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626959 = query.getOrDefault("MaxRecords")
  valid_21626959 = validateParameter(valid_21626959, JInt, required = false,
                                   default = nil)
  if valid_21626959 != nil:
    section.add "MaxRecords", valid_21626959
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626960 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626960 = validateParameter(valid_21626960, JString, required = true,
                                   default = nil)
  if valid_21626960 != nil:
    section.add "DBClusterParameterGroupName", valid_21626960
  var valid_21626961 = query.getOrDefault("Filters")
  valid_21626961 = validateParameter(valid_21626961, JArray, required = false,
                                   default = nil)
  if valid_21626961 != nil:
    section.add "Filters", valid_21626961
  var valid_21626962 = query.getOrDefault("Action")
  valid_21626962 = validateParameter(valid_21626962, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_21626962 != nil:
    section.add "Action", valid_21626962
  var valid_21626963 = query.getOrDefault("Marker")
  valid_21626963 = validateParameter(valid_21626963, JString, required = false,
                                   default = nil)
  if valid_21626963 != nil:
    section.add "Marker", valid_21626963
  var valid_21626964 = query.getOrDefault("Source")
  valid_21626964 = validateParameter(valid_21626964, JString, required = false,
                                   default = nil)
  if valid_21626964 != nil:
    section.add "Source", valid_21626964
  var valid_21626965 = query.getOrDefault("Version")
  valid_21626965 = validateParameter(valid_21626965, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626965 != nil:
    section.add "Version", valid_21626965
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626966 = header.getOrDefault("X-Amz-Date")
  valid_21626966 = validateParameter(valid_21626966, JString, required = false,
                                   default = nil)
  if valid_21626966 != nil:
    section.add "X-Amz-Date", valid_21626966
  var valid_21626967 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626967 = validateParameter(valid_21626967, JString, required = false,
                                   default = nil)
  if valid_21626967 != nil:
    section.add "X-Amz-Security-Token", valid_21626967
  var valid_21626968 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626968 = validateParameter(valid_21626968, JString, required = false,
                                   default = nil)
  if valid_21626968 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626968
  var valid_21626969 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626969 = validateParameter(valid_21626969, JString, required = false,
                                   default = nil)
  if valid_21626969 != nil:
    section.add "X-Amz-Algorithm", valid_21626969
  var valid_21626970 = header.getOrDefault("X-Amz-Signature")
  valid_21626970 = validateParameter(valid_21626970, JString, required = false,
                                   default = nil)
  if valid_21626970 != nil:
    section.add "X-Amz-Signature", valid_21626970
  var valid_21626971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626971 = validateParameter(valid_21626971, JString, required = false,
                                   default = nil)
  if valid_21626971 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626971
  var valid_21626972 = header.getOrDefault("X-Amz-Credential")
  valid_21626972 = validateParameter(valid_21626972, JString, required = false,
                                   default = nil)
  if valid_21626972 != nil:
    section.add "X-Amz-Credential", valid_21626972
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626973: Call_GetDescribeDBClusterParameters_21626956;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_21626973.validator(path, query, header, formData, body, _)
  let scheme = call_21626973.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626973.makeUrl(scheme.get, call_21626973.host, call_21626973.base,
                               call_21626973.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626973, uri, valid, _)

proc call*(call_21626974: Call_GetDescribeDBClusterParameters_21626956;
          DBClusterParameterGroupName: string; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterParameters";
          Marker: string = ""; Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   Version: string (required)
  var query_21626975 = newJObject()
  add(query_21626975, "MaxRecords", newJInt(MaxRecords))
  add(query_21626975, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_21626975.add "Filters", Filters
  add(query_21626975, "Action", newJString(Action))
  add(query_21626975, "Marker", newJString(Marker))
  add(query_21626975, "Source", newJString(Source))
  add(query_21626975, "Version", newJString(Version))
  result = call_21626974.call(nil, query_21626975, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_21626956(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_21626957, base: "/",
    makeUrl: url_GetDescribeDBClusterParameters_21626958,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_21627013 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBClusterSnapshotAttributes_21627015(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_21627014(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627016 = query.getOrDefault("Action")
  valid_21627016 = validateParameter(valid_21627016, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_21627016 != nil:
    section.add "Action", valid_21627016
  var valid_21627017 = query.getOrDefault("Version")
  valid_21627017 = validateParameter(valid_21627017, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627017 != nil:
    section.add "Version", valid_21627017
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627018 = header.getOrDefault("X-Amz-Date")
  valid_21627018 = validateParameter(valid_21627018, JString, required = false,
                                   default = nil)
  if valid_21627018 != nil:
    section.add "X-Amz-Date", valid_21627018
  var valid_21627019 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627019 = validateParameter(valid_21627019, JString, required = false,
                                   default = nil)
  if valid_21627019 != nil:
    section.add "X-Amz-Security-Token", valid_21627019
  var valid_21627020 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627020 = validateParameter(valid_21627020, JString, required = false,
                                   default = nil)
  if valid_21627020 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627020
  var valid_21627021 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627021 = validateParameter(valid_21627021, JString, required = false,
                                   default = nil)
  if valid_21627021 != nil:
    section.add "X-Amz-Algorithm", valid_21627021
  var valid_21627022 = header.getOrDefault("X-Amz-Signature")
  valid_21627022 = validateParameter(valid_21627022, JString, required = false,
                                   default = nil)
  if valid_21627022 != nil:
    section.add "X-Amz-Signature", valid_21627022
  var valid_21627023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627023 = validateParameter(valid_21627023, JString, required = false,
                                   default = nil)
  if valid_21627023 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627023
  var valid_21627024 = header.getOrDefault("X-Amz-Credential")
  valid_21627024 = validateParameter(valid_21627024, JString, required = false,
                                   default = nil)
  if valid_21627024 != nil:
    section.add "X-Amz-Credential", valid_21627024
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21627025 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627025 = validateParameter(valid_21627025, JString, required = true,
                                   default = nil)
  if valid_21627025 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627025
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627026: Call_PostDescribeDBClusterSnapshotAttributes_21627013;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_21627026.validator(path, query, header, formData, body, _)
  let scheme = call_21627026.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627026.makeUrl(scheme.get, call_21627026.host, call_21627026.base,
                               call_21627026.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627026, uri, valid, _)

proc call*(call_21627027: Call_PostDescribeDBClusterSnapshotAttributes_21627013;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627028 = newJObject()
  var formData_21627029 = newJObject()
  add(formData_21627029, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21627028, "Action", newJString(Action))
  add(query_21627028, "Version", newJString(Version))
  result = call_21627027.call(nil, query_21627028, nil, formData_21627029, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_21627013(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_21627014,
    base: "/", makeUrl: url_PostDescribeDBClusterSnapshotAttributes_21627015,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_21626997 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBClusterSnapshotAttributes_21626999(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_21626998(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21627000 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627000 = validateParameter(valid_21627000, JString, required = true,
                                   default = nil)
  if valid_21627000 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627000
  var valid_21627001 = query.getOrDefault("Action")
  valid_21627001 = validateParameter(valid_21627001, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_21627001 != nil:
    section.add "Action", valid_21627001
  var valid_21627002 = query.getOrDefault("Version")
  valid_21627002 = validateParameter(valid_21627002, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627002 != nil:
    section.add "Version", valid_21627002
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627003 = header.getOrDefault("X-Amz-Date")
  valid_21627003 = validateParameter(valid_21627003, JString, required = false,
                                   default = nil)
  if valid_21627003 != nil:
    section.add "X-Amz-Date", valid_21627003
  var valid_21627004 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627004 = validateParameter(valid_21627004, JString, required = false,
                                   default = nil)
  if valid_21627004 != nil:
    section.add "X-Amz-Security-Token", valid_21627004
  var valid_21627005 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627005 = validateParameter(valid_21627005, JString, required = false,
                                   default = nil)
  if valid_21627005 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627005
  var valid_21627006 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627006 = validateParameter(valid_21627006, JString, required = false,
                                   default = nil)
  if valid_21627006 != nil:
    section.add "X-Amz-Algorithm", valid_21627006
  var valid_21627007 = header.getOrDefault("X-Amz-Signature")
  valid_21627007 = validateParameter(valid_21627007, JString, required = false,
                                   default = nil)
  if valid_21627007 != nil:
    section.add "X-Amz-Signature", valid_21627007
  var valid_21627008 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627008 = validateParameter(valid_21627008, JString, required = false,
                                   default = nil)
  if valid_21627008 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627008
  var valid_21627009 = header.getOrDefault("X-Amz-Credential")
  valid_21627009 = validateParameter(valid_21627009, JString, required = false,
                                   default = nil)
  if valid_21627009 != nil:
    section.add "X-Amz-Credential", valid_21627009
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627010: Call_GetDescribeDBClusterSnapshotAttributes_21626997;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_21627010.validator(path, query, header, formData, body, _)
  let scheme = call_21627010.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627010.makeUrl(scheme.get, call_21627010.host, call_21627010.base,
                               call_21627010.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627010, uri, valid, _)

proc call*(call_21627011: Call_GetDescribeDBClusterSnapshotAttributes_21626997;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627012 = newJObject()
  add(query_21627012, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21627012, "Action", newJString(Action))
  add(query_21627012, "Version", newJString(Version))
  result = call_21627011.call(nil, query_21627012, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_21626997(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_21626998,
    base: "/", makeUrl: url_GetDescribeDBClusterSnapshotAttributes_21626999,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_21627053 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBClusterSnapshots_21627055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_21627054(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627056 = query.getOrDefault("Action")
  valid_21627056 = validateParameter(valid_21627056, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_21627056 != nil:
    section.add "Action", valid_21627056
  var valid_21627057 = query.getOrDefault("Version")
  valid_21627057 = validateParameter(valid_21627057, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627057 != nil:
    section.add "Version", valid_21627057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627058 = header.getOrDefault("X-Amz-Date")
  valid_21627058 = validateParameter(valid_21627058, JString, required = false,
                                   default = nil)
  if valid_21627058 != nil:
    section.add "X-Amz-Date", valid_21627058
  var valid_21627059 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627059 = validateParameter(valid_21627059, JString, required = false,
                                   default = nil)
  if valid_21627059 != nil:
    section.add "X-Amz-Security-Token", valid_21627059
  var valid_21627060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627060 = validateParameter(valid_21627060, JString, required = false,
                                   default = nil)
  if valid_21627060 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627060
  var valid_21627061 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627061 = validateParameter(valid_21627061, JString, required = false,
                                   default = nil)
  if valid_21627061 != nil:
    section.add "X-Amz-Algorithm", valid_21627061
  var valid_21627062 = header.getOrDefault("X-Amz-Signature")
  valid_21627062 = validateParameter(valid_21627062, JString, required = false,
                                   default = nil)
  if valid_21627062 != nil:
    section.add "X-Amz-Signature", valid_21627062
  var valid_21627063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627063 = validateParameter(valid_21627063, JString, required = false,
                                   default = nil)
  if valid_21627063 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627063
  var valid_21627064 = header.getOrDefault("X-Amz-Credential")
  valid_21627064 = validateParameter(valid_21627064, JString, required = false,
                                   default = nil)
  if valid_21627064 != nil:
    section.add "X-Amz-Credential", valid_21627064
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_21627065 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627065 = validateParameter(valid_21627065, JString, required = false,
                                   default = nil)
  if valid_21627065 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627065
  var valid_21627066 = formData.getOrDefault("IncludeShared")
  valid_21627066 = validateParameter(valid_21627066, JBool, required = false,
                                   default = nil)
  if valid_21627066 != nil:
    section.add "IncludeShared", valid_21627066
  var valid_21627067 = formData.getOrDefault("IncludePublic")
  valid_21627067 = validateParameter(valid_21627067, JBool, required = false,
                                   default = nil)
  if valid_21627067 != nil:
    section.add "IncludePublic", valid_21627067
  var valid_21627068 = formData.getOrDefault("SnapshotType")
  valid_21627068 = validateParameter(valid_21627068, JString, required = false,
                                   default = nil)
  if valid_21627068 != nil:
    section.add "SnapshotType", valid_21627068
  var valid_21627069 = formData.getOrDefault("Marker")
  valid_21627069 = validateParameter(valid_21627069, JString, required = false,
                                   default = nil)
  if valid_21627069 != nil:
    section.add "Marker", valid_21627069
  var valid_21627070 = formData.getOrDefault("Filters")
  valid_21627070 = validateParameter(valid_21627070, JArray, required = false,
                                   default = nil)
  if valid_21627070 != nil:
    section.add "Filters", valid_21627070
  var valid_21627071 = formData.getOrDefault("MaxRecords")
  valid_21627071 = validateParameter(valid_21627071, JInt, required = false,
                                   default = nil)
  if valid_21627071 != nil:
    section.add "MaxRecords", valid_21627071
  var valid_21627072 = formData.getOrDefault("DBClusterIdentifier")
  valid_21627072 = validateParameter(valid_21627072, JString, required = false,
                                   default = nil)
  if valid_21627072 != nil:
    section.add "DBClusterIdentifier", valid_21627072
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627073: Call_PostDescribeDBClusterSnapshots_21627053;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_21627073.validator(path, query, header, formData, body, _)
  let scheme = call_21627073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627073.makeUrl(scheme.get, call_21627073.host, call_21627073.base,
                               call_21627073.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627073, uri, valid, _)

proc call*(call_21627074: Call_PostDescribeDBClusterSnapshots_21627053;
          DBClusterSnapshotIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; SnapshotType: string = ""; Marker: string = "";
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21627075 = newJObject()
  var formData_21627076 = newJObject()
  add(formData_21627076, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_21627076, "IncludeShared", newJBool(IncludeShared))
  add(formData_21627076, "IncludePublic", newJBool(IncludePublic))
  add(formData_21627076, "SnapshotType", newJString(SnapshotType))
  add(formData_21627076, "Marker", newJString(Marker))
  add(query_21627075, "Action", newJString(Action))
  if Filters != nil:
    formData_21627076.add "Filters", Filters
  add(formData_21627076, "MaxRecords", newJInt(MaxRecords))
  add(formData_21627076, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627075, "Version", newJString(Version))
  result = call_21627074.call(nil, query_21627075, nil, formData_21627076, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_21627053(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_21627054, base: "/",
    makeUrl: url_PostDescribeDBClusterSnapshots_21627055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_21627030 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBClusterSnapshots_21627032(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_21627031(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627033 = query.getOrDefault("IncludePublic")
  valid_21627033 = validateParameter(valid_21627033, JBool, required = false,
                                   default = nil)
  if valid_21627033 != nil:
    section.add "IncludePublic", valid_21627033
  var valid_21627034 = query.getOrDefault("MaxRecords")
  valid_21627034 = validateParameter(valid_21627034, JInt, required = false,
                                   default = nil)
  if valid_21627034 != nil:
    section.add "MaxRecords", valid_21627034
  var valid_21627035 = query.getOrDefault("DBClusterIdentifier")
  valid_21627035 = validateParameter(valid_21627035, JString, required = false,
                                   default = nil)
  if valid_21627035 != nil:
    section.add "DBClusterIdentifier", valid_21627035
  var valid_21627036 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627036 = validateParameter(valid_21627036, JString, required = false,
                                   default = nil)
  if valid_21627036 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627036
  var valid_21627037 = query.getOrDefault("Filters")
  valid_21627037 = validateParameter(valid_21627037, JArray, required = false,
                                   default = nil)
  if valid_21627037 != nil:
    section.add "Filters", valid_21627037
  var valid_21627038 = query.getOrDefault("IncludeShared")
  valid_21627038 = validateParameter(valid_21627038, JBool, required = false,
                                   default = nil)
  if valid_21627038 != nil:
    section.add "IncludeShared", valid_21627038
  var valid_21627039 = query.getOrDefault("Action")
  valid_21627039 = validateParameter(valid_21627039, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_21627039 != nil:
    section.add "Action", valid_21627039
  var valid_21627040 = query.getOrDefault("Marker")
  valid_21627040 = validateParameter(valid_21627040, JString, required = false,
                                   default = nil)
  if valid_21627040 != nil:
    section.add "Marker", valid_21627040
  var valid_21627041 = query.getOrDefault("SnapshotType")
  valid_21627041 = validateParameter(valid_21627041, JString, required = false,
                                   default = nil)
  if valid_21627041 != nil:
    section.add "SnapshotType", valid_21627041
  var valid_21627042 = query.getOrDefault("Version")
  valid_21627042 = validateParameter(valid_21627042, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627042 != nil:
    section.add "Version", valid_21627042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627043 = header.getOrDefault("X-Amz-Date")
  valid_21627043 = validateParameter(valid_21627043, JString, required = false,
                                   default = nil)
  if valid_21627043 != nil:
    section.add "X-Amz-Date", valid_21627043
  var valid_21627044 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627044 = validateParameter(valid_21627044, JString, required = false,
                                   default = nil)
  if valid_21627044 != nil:
    section.add "X-Amz-Security-Token", valid_21627044
  var valid_21627045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627045 = validateParameter(valid_21627045, JString, required = false,
                                   default = nil)
  if valid_21627045 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627045
  var valid_21627046 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627046 = validateParameter(valid_21627046, JString, required = false,
                                   default = nil)
  if valid_21627046 != nil:
    section.add "X-Amz-Algorithm", valid_21627046
  var valid_21627047 = header.getOrDefault("X-Amz-Signature")
  valid_21627047 = validateParameter(valid_21627047, JString, required = false,
                                   default = nil)
  if valid_21627047 != nil:
    section.add "X-Amz-Signature", valid_21627047
  var valid_21627048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627048 = validateParameter(valid_21627048, JString, required = false,
                                   default = nil)
  if valid_21627048 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627048
  var valid_21627049 = header.getOrDefault("X-Amz-Credential")
  valid_21627049 = validateParameter(valid_21627049, JString, required = false,
                                   default = nil)
  if valid_21627049 != nil:
    section.add "X-Amz-Credential", valid_21627049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627050: Call_GetDescribeDBClusterSnapshots_21627030;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_21627050.validator(path, query, header, formData, body, _)
  let scheme = call_21627050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627050.makeUrl(scheme.get, call_21627050.host, call_21627050.base,
                               call_21627050.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627050, uri, valid, _)

proc call*(call_21627051: Call_GetDescribeDBClusterSnapshots_21627030;
          IncludePublic: bool = false; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterSnapshotIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  var query_21627052 = newJObject()
  add(query_21627052, "IncludePublic", newJBool(IncludePublic))
  add(query_21627052, "MaxRecords", newJInt(MaxRecords))
  add(query_21627052, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627052, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Filters != nil:
    query_21627052.add "Filters", Filters
  add(query_21627052, "IncludeShared", newJBool(IncludeShared))
  add(query_21627052, "Action", newJString(Action))
  add(query_21627052, "Marker", newJString(Marker))
  add(query_21627052, "SnapshotType", newJString(SnapshotType))
  add(query_21627052, "Version", newJString(Version))
  result = call_21627051.call(nil, query_21627052, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_21627030(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_21627031, base: "/",
    makeUrl: url_GetDescribeDBClusterSnapshots_21627032,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_21627096 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBClusters_21627098(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_21627097(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627099 = query.getOrDefault("Action")
  valid_21627099 = validateParameter(valid_21627099, JString, required = true,
                                   default = newJString("DescribeDBClusters"))
  if valid_21627099 != nil:
    section.add "Action", valid_21627099
  var valid_21627100 = query.getOrDefault("Version")
  valid_21627100 = validateParameter(valid_21627100, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627100 != nil:
    section.add "Version", valid_21627100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627101 = header.getOrDefault("X-Amz-Date")
  valid_21627101 = validateParameter(valid_21627101, JString, required = false,
                                   default = nil)
  if valid_21627101 != nil:
    section.add "X-Amz-Date", valid_21627101
  var valid_21627102 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627102 = validateParameter(valid_21627102, JString, required = false,
                                   default = nil)
  if valid_21627102 != nil:
    section.add "X-Amz-Security-Token", valid_21627102
  var valid_21627103 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627103 = validateParameter(valid_21627103, JString, required = false,
                                   default = nil)
  if valid_21627103 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627103
  var valid_21627104 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627104 = validateParameter(valid_21627104, JString, required = false,
                                   default = nil)
  if valid_21627104 != nil:
    section.add "X-Amz-Algorithm", valid_21627104
  var valid_21627105 = header.getOrDefault("X-Amz-Signature")
  valid_21627105 = validateParameter(valid_21627105, JString, required = false,
                                   default = nil)
  if valid_21627105 != nil:
    section.add "X-Amz-Signature", valid_21627105
  var valid_21627106 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627106 = validateParameter(valid_21627106, JString, required = false,
                                   default = nil)
  if valid_21627106 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627106
  var valid_21627107 = header.getOrDefault("X-Amz-Credential")
  valid_21627107 = validateParameter(valid_21627107, JString, required = false,
                                   default = nil)
  if valid_21627107 != nil:
    section.add "X-Amz-Credential", valid_21627107
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB clusters created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB clusters are returned, you could use the following command:</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_21627108 = formData.getOrDefault("Marker")
  valid_21627108 = validateParameter(valid_21627108, JString, required = false,
                                   default = nil)
  if valid_21627108 != nil:
    section.add "Marker", valid_21627108
  var valid_21627109 = formData.getOrDefault("Filters")
  valid_21627109 = validateParameter(valid_21627109, JArray, required = false,
                                   default = nil)
  if valid_21627109 != nil:
    section.add "Filters", valid_21627109
  var valid_21627110 = formData.getOrDefault("MaxRecords")
  valid_21627110 = validateParameter(valid_21627110, JInt, required = false,
                                   default = nil)
  if valid_21627110 != nil:
    section.add "MaxRecords", valid_21627110
  var valid_21627111 = formData.getOrDefault("DBClusterIdentifier")
  valid_21627111 = validateParameter(valid_21627111, JString, required = false,
                                   default = nil)
  if valid_21627111 != nil:
    section.add "DBClusterIdentifier", valid_21627111
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627112: Call_PostDescribeDBClusters_21627096;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
  ## 
  let valid = call_21627112.validator(path, query, header, formData, body, _)
  let scheme = call_21627112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627112.makeUrl(scheme.get, call_21627112.host, call_21627112.base,
                               call_21627112.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627112, uri, valid, _)

proc call*(call_21627113: Call_PostDescribeDBClusters_21627096;
          Marker: string = ""; Action: string = "DescribeDBClusters";
          Filters: JsonNode = nil; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB clusters created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB clusters are returned, you could use the following command:</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_21627114 = newJObject()
  var formData_21627115 = newJObject()
  add(formData_21627115, "Marker", newJString(Marker))
  add(query_21627114, "Action", newJString(Action))
  if Filters != nil:
    formData_21627115.add "Filters", Filters
  add(formData_21627115, "MaxRecords", newJInt(MaxRecords))
  add(formData_21627115, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627114, "Version", newJString(Version))
  result = call_21627113.call(nil, query_21627114, nil, formData_21627115, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_21627096(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_21627097, base: "/",
    makeUrl: url_PostDescribeDBClusters_21627098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_21627077 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBClusters_21627079(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_21627078(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB clusters created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB clusters are returned, you could use the following command:</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627080 = query.getOrDefault("MaxRecords")
  valid_21627080 = validateParameter(valid_21627080, JInt, required = false,
                                   default = nil)
  if valid_21627080 != nil:
    section.add "MaxRecords", valid_21627080
  var valid_21627081 = query.getOrDefault("DBClusterIdentifier")
  valid_21627081 = validateParameter(valid_21627081, JString, required = false,
                                   default = nil)
  if valid_21627081 != nil:
    section.add "DBClusterIdentifier", valid_21627081
  var valid_21627082 = query.getOrDefault("Filters")
  valid_21627082 = validateParameter(valid_21627082, JArray, required = false,
                                   default = nil)
  if valid_21627082 != nil:
    section.add "Filters", valid_21627082
  var valid_21627083 = query.getOrDefault("Action")
  valid_21627083 = validateParameter(valid_21627083, JString, required = true,
                                   default = newJString("DescribeDBClusters"))
  if valid_21627083 != nil:
    section.add "Action", valid_21627083
  var valid_21627084 = query.getOrDefault("Marker")
  valid_21627084 = validateParameter(valid_21627084, JString, required = false,
                                   default = nil)
  if valid_21627084 != nil:
    section.add "Marker", valid_21627084
  var valid_21627085 = query.getOrDefault("Version")
  valid_21627085 = validateParameter(valid_21627085, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627085 != nil:
    section.add "Version", valid_21627085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627086 = header.getOrDefault("X-Amz-Date")
  valid_21627086 = validateParameter(valid_21627086, JString, required = false,
                                   default = nil)
  if valid_21627086 != nil:
    section.add "X-Amz-Date", valid_21627086
  var valid_21627087 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627087 = validateParameter(valid_21627087, JString, required = false,
                                   default = nil)
  if valid_21627087 != nil:
    section.add "X-Amz-Security-Token", valid_21627087
  var valid_21627088 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627088 = validateParameter(valid_21627088, JString, required = false,
                                   default = nil)
  if valid_21627088 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627088
  var valid_21627089 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627089 = validateParameter(valid_21627089, JString, required = false,
                                   default = nil)
  if valid_21627089 != nil:
    section.add "X-Amz-Algorithm", valid_21627089
  var valid_21627090 = header.getOrDefault("X-Amz-Signature")
  valid_21627090 = validateParameter(valid_21627090, JString, required = false,
                                   default = nil)
  if valid_21627090 != nil:
    section.add "X-Amz-Signature", valid_21627090
  var valid_21627091 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627091 = validateParameter(valid_21627091, JString, required = false,
                                   default = nil)
  if valid_21627091 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627091
  var valid_21627092 = header.getOrDefault("X-Amz-Credential")
  valid_21627092 = validateParameter(valid_21627092, JString, required = false,
                                   default = nil)
  if valid_21627092 != nil:
    section.add "X-Amz-Credential", valid_21627092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627093: Call_GetDescribeDBClusters_21627077;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
  ## 
  let valid = call_21627093.validator(path, query, header, formData, body, _)
  let scheme = call_21627093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627093.makeUrl(scheme.get, call_21627093.host, call_21627093.base,
                               call_21627093.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627093, uri, valid, _)

proc call*(call_21627094: Call_GetDescribeDBClusters_21627077; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeDBClusters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB clusters created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB clusters are returned, you could use the following command:</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21627095 = newJObject()
  add(query_21627095, "MaxRecords", newJInt(MaxRecords))
  add(query_21627095, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_21627095.add "Filters", Filters
  add(query_21627095, "Action", newJString(Action))
  add(query_21627095, "Marker", newJString(Marker))
  add(query_21627095, "Version", newJString(Version))
  result = call_21627094.call(nil, query_21627095, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_21627077(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_21627078, base: "/",
    makeUrl: url_GetDescribeDBClusters_21627079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_21627140 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBEngineVersions_21627142(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_21627141(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627143 = query.getOrDefault("Action")
  valid_21627143 = validateParameter(valid_21627143, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_21627143 != nil:
    section.add "Action", valid_21627143
  var valid_21627144 = query.getOrDefault("Version")
  valid_21627144 = validateParameter(valid_21627144, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627144 != nil:
    section.add "Version", valid_21627144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627145 = header.getOrDefault("X-Amz-Date")
  valid_21627145 = validateParameter(valid_21627145, JString, required = false,
                                   default = nil)
  if valid_21627145 != nil:
    section.add "X-Amz-Date", valid_21627145
  var valid_21627146 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627146 = validateParameter(valid_21627146, JString, required = false,
                                   default = nil)
  if valid_21627146 != nil:
    section.add "X-Amz-Security-Token", valid_21627146
  var valid_21627147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627147 = validateParameter(valid_21627147, JString, required = false,
                                   default = nil)
  if valid_21627147 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627147
  var valid_21627148 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627148 = validateParameter(valid_21627148, JString, required = false,
                                   default = nil)
  if valid_21627148 != nil:
    section.add "X-Amz-Algorithm", valid_21627148
  var valid_21627149 = header.getOrDefault("X-Amz-Signature")
  valid_21627149 = validateParameter(valid_21627149, JString, required = false,
                                   default = nil)
  if valid_21627149 != nil:
    section.add "X-Amz-Signature", valid_21627149
  var valid_21627150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627150 = validateParameter(valid_21627150, JString, required = false,
                                   default = nil)
  if valid_21627150 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627150
  var valid_21627151 = header.getOrDefault("X-Amz-Credential")
  valid_21627151 = validateParameter(valid_21627151, JString, required = false,
                                   default = nil)
  if valid_21627151 != nil:
    section.add "X-Amz-Credential", valid_21627151
  result.add "header", section
  ## parameters in `formData` object:
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_21627152 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_21627152 = validateParameter(valid_21627152, JBool, required = false,
                                   default = nil)
  if valid_21627152 != nil:
    section.add "ListSupportedCharacterSets", valid_21627152
  var valid_21627153 = formData.getOrDefault("Engine")
  valid_21627153 = validateParameter(valid_21627153, JString, required = false,
                                   default = nil)
  if valid_21627153 != nil:
    section.add "Engine", valid_21627153
  var valid_21627154 = formData.getOrDefault("Marker")
  valid_21627154 = validateParameter(valid_21627154, JString, required = false,
                                   default = nil)
  if valid_21627154 != nil:
    section.add "Marker", valid_21627154
  var valid_21627155 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21627155 = validateParameter(valid_21627155, JString, required = false,
                                   default = nil)
  if valid_21627155 != nil:
    section.add "DBParameterGroupFamily", valid_21627155
  var valid_21627156 = formData.getOrDefault("Filters")
  valid_21627156 = validateParameter(valid_21627156, JArray, required = false,
                                   default = nil)
  if valid_21627156 != nil:
    section.add "Filters", valid_21627156
  var valid_21627157 = formData.getOrDefault("MaxRecords")
  valid_21627157 = validateParameter(valid_21627157, JInt, required = false,
                                   default = nil)
  if valid_21627157 != nil:
    section.add "MaxRecords", valid_21627157
  var valid_21627158 = formData.getOrDefault("EngineVersion")
  valid_21627158 = validateParameter(valid_21627158, JString, required = false,
                                   default = nil)
  if valid_21627158 != nil:
    section.add "EngineVersion", valid_21627158
  var valid_21627159 = formData.getOrDefault("ListSupportedTimezones")
  valid_21627159 = validateParameter(valid_21627159, JBool, required = false,
                                   default = nil)
  if valid_21627159 != nil:
    section.add "ListSupportedTimezones", valid_21627159
  var valid_21627160 = formData.getOrDefault("DefaultOnly")
  valid_21627160 = validateParameter(valid_21627160, JBool, required = false,
                                   default = nil)
  if valid_21627160 != nil:
    section.add "DefaultOnly", valid_21627160
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627161: Call_PostDescribeDBEngineVersions_21627140;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_21627161.validator(path, query, header, formData, body, _)
  let scheme = call_21627161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627161.makeUrl(scheme.get, call_21627161.host, call_21627161.base,
                               call_21627161.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627161, uri, valid, _)

proc call*(call_21627162: Call_PostDescribeDBEngineVersions_21627140;
          ListSupportedCharacterSets: bool = false; Engine: string = "";
          Marker: string = ""; Action: string = "DescribeDBEngineVersions";
          DBParameterGroupFamily: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; EngineVersion: string = "";
          ListSupportedTimezones: bool = false; Version: string = "2014-10-31";
          DefaultOnly: bool = false): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Engine: string
  ##         : The database engine to return.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  var query_21627163 = newJObject()
  var formData_21627164 = newJObject()
  add(formData_21627164, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(formData_21627164, "Engine", newJString(Engine))
  add(formData_21627164, "Marker", newJString(Marker))
  add(query_21627163, "Action", newJString(Action))
  add(formData_21627164, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_21627164.add "Filters", Filters
  add(formData_21627164, "MaxRecords", newJInt(MaxRecords))
  add(formData_21627164, "EngineVersion", newJString(EngineVersion))
  add(formData_21627164, "ListSupportedTimezones",
      newJBool(ListSupportedTimezones))
  add(query_21627163, "Version", newJString(Version))
  add(formData_21627164, "DefaultOnly", newJBool(DefaultOnly))
  result = call_21627162.call(nil, query_21627163, nil, formData_21627164, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_21627140(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_21627141, base: "/",
    makeUrl: url_PostDescribeDBEngineVersions_21627142,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_21627116 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBEngineVersions_21627118(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_21627117(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627119 = query.getOrDefault("Engine")
  valid_21627119 = validateParameter(valid_21627119, JString, required = false,
                                   default = nil)
  if valid_21627119 != nil:
    section.add "Engine", valid_21627119
  var valid_21627120 = query.getOrDefault("ListSupportedCharacterSets")
  valid_21627120 = validateParameter(valid_21627120, JBool, required = false,
                                   default = nil)
  if valid_21627120 != nil:
    section.add "ListSupportedCharacterSets", valid_21627120
  var valid_21627121 = query.getOrDefault("MaxRecords")
  valid_21627121 = validateParameter(valid_21627121, JInt, required = false,
                                   default = nil)
  if valid_21627121 != nil:
    section.add "MaxRecords", valid_21627121
  var valid_21627122 = query.getOrDefault("DBParameterGroupFamily")
  valid_21627122 = validateParameter(valid_21627122, JString, required = false,
                                   default = nil)
  if valid_21627122 != nil:
    section.add "DBParameterGroupFamily", valid_21627122
  var valid_21627123 = query.getOrDefault("Filters")
  valid_21627123 = validateParameter(valid_21627123, JArray, required = false,
                                   default = nil)
  if valid_21627123 != nil:
    section.add "Filters", valid_21627123
  var valid_21627124 = query.getOrDefault("ListSupportedTimezones")
  valid_21627124 = validateParameter(valid_21627124, JBool, required = false,
                                   default = nil)
  if valid_21627124 != nil:
    section.add "ListSupportedTimezones", valid_21627124
  var valid_21627125 = query.getOrDefault("Action")
  valid_21627125 = validateParameter(valid_21627125, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_21627125 != nil:
    section.add "Action", valid_21627125
  var valid_21627126 = query.getOrDefault("Marker")
  valid_21627126 = validateParameter(valid_21627126, JString, required = false,
                                   default = nil)
  if valid_21627126 != nil:
    section.add "Marker", valid_21627126
  var valid_21627127 = query.getOrDefault("EngineVersion")
  valid_21627127 = validateParameter(valid_21627127, JString, required = false,
                                   default = nil)
  if valid_21627127 != nil:
    section.add "EngineVersion", valid_21627127
  var valid_21627128 = query.getOrDefault("DefaultOnly")
  valid_21627128 = validateParameter(valid_21627128, JBool, required = false,
                                   default = nil)
  if valid_21627128 != nil:
    section.add "DefaultOnly", valid_21627128
  var valid_21627129 = query.getOrDefault("Version")
  valid_21627129 = validateParameter(valid_21627129, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627129 != nil:
    section.add "Version", valid_21627129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627130 = header.getOrDefault("X-Amz-Date")
  valid_21627130 = validateParameter(valid_21627130, JString, required = false,
                                   default = nil)
  if valid_21627130 != nil:
    section.add "X-Amz-Date", valid_21627130
  var valid_21627131 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627131 = validateParameter(valid_21627131, JString, required = false,
                                   default = nil)
  if valid_21627131 != nil:
    section.add "X-Amz-Security-Token", valid_21627131
  var valid_21627132 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627132 = validateParameter(valid_21627132, JString, required = false,
                                   default = nil)
  if valid_21627132 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627132
  var valid_21627133 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627133 = validateParameter(valid_21627133, JString, required = false,
                                   default = nil)
  if valid_21627133 != nil:
    section.add "X-Amz-Algorithm", valid_21627133
  var valid_21627134 = header.getOrDefault("X-Amz-Signature")
  valid_21627134 = validateParameter(valid_21627134, JString, required = false,
                                   default = nil)
  if valid_21627134 != nil:
    section.add "X-Amz-Signature", valid_21627134
  var valid_21627135 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627135 = validateParameter(valid_21627135, JString, required = false,
                                   default = nil)
  if valid_21627135 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627135
  var valid_21627136 = header.getOrDefault("X-Amz-Credential")
  valid_21627136 = validateParameter(valid_21627136, JString, required = false,
                                   default = nil)
  if valid_21627136 != nil:
    section.add "X-Amz-Credential", valid_21627136
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627137: Call_GetDescribeDBEngineVersions_21627116;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_21627137.validator(path, query, header, formData, body, _)
  let scheme = call_21627137.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627137.makeUrl(scheme.get, call_21627137.host, call_21627137.base,
                               call_21627137.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627137, uri, valid, _)

proc call*(call_21627138: Call_GetDescribeDBEngineVersions_21627116;
          Engine: string = ""; ListSupportedCharacterSets: bool = false;
          MaxRecords: int = 0; DBParameterGroupFamily: string = "";
          Filters: JsonNode = nil; ListSupportedTimezones: bool = false;
          Action: string = "DescribeDBEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: string (required)
  var query_21627139 = newJObject()
  add(query_21627139, "Engine", newJString(Engine))
  add(query_21627139, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_21627139, "MaxRecords", newJInt(MaxRecords))
  add(query_21627139, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_21627139.add "Filters", Filters
  add(query_21627139, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_21627139, "Action", newJString(Action))
  add(query_21627139, "Marker", newJString(Marker))
  add(query_21627139, "EngineVersion", newJString(EngineVersion))
  add(query_21627139, "DefaultOnly", newJBool(DefaultOnly))
  add(query_21627139, "Version", newJString(Version))
  result = call_21627138.call(nil, query_21627139, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_21627116(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_21627117, base: "/",
    makeUrl: url_GetDescribeDBEngineVersions_21627118,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_21627184 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBInstances_21627186(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_21627185(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627187 = query.getOrDefault("Action")
  valid_21627187 = validateParameter(valid_21627187, JString, required = true,
                                   default = newJString("DescribeDBInstances"))
  if valid_21627187 != nil:
    section.add "Action", valid_21627187
  var valid_21627188 = query.getOrDefault("Version")
  valid_21627188 = validateParameter(valid_21627188, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627188 != nil:
    section.add "Version", valid_21627188
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627189 = header.getOrDefault("X-Amz-Date")
  valid_21627189 = validateParameter(valid_21627189, JString, required = false,
                                   default = nil)
  if valid_21627189 != nil:
    section.add "X-Amz-Date", valid_21627189
  var valid_21627190 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627190 = validateParameter(valid_21627190, JString, required = false,
                                   default = nil)
  if valid_21627190 != nil:
    section.add "X-Amz-Security-Token", valid_21627190
  var valid_21627191 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627191 = validateParameter(valid_21627191, JString, required = false,
                                   default = nil)
  if valid_21627191 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627191
  var valid_21627192 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627192 = validateParameter(valid_21627192, JString, required = false,
                                   default = nil)
  if valid_21627192 != nil:
    section.add "X-Amz-Algorithm", valid_21627192
  var valid_21627193 = header.getOrDefault("X-Amz-Signature")
  valid_21627193 = validateParameter(valid_21627193, JString, required = false,
                                   default = nil)
  if valid_21627193 != nil:
    section.add "X-Amz-Signature", valid_21627193
  var valid_21627194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627194 = validateParameter(valid_21627194, JString, required = false,
                                   default = nil)
  if valid_21627194 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627194
  var valid_21627195 = header.getOrDefault("X-Amz-Credential")
  valid_21627195 = validateParameter(valid_21627195, JString, required = false,
                                   default = nil)
  if valid_21627195 != nil:
    section.add "X-Amz-Credential", valid_21627195
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627196 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21627196 = validateParameter(valid_21627196, JString, required = false,
                                   default = nil)
  if valid_21627196 != nil:
    section.add "DBInstanceIdentifier", valid_21627196
  var valid_21627197 = formData.getOrDefault("Marker")
  valid_21627197 = validateParameter(valid_21627197, JString, required = false,
                                   default = nil)
  if valid_21627197 != nil:
    section.add "Marker", valid_21627197
  var valid_21627198 = formData.getOrDefault("Filters")
  valid_21627198 = validateParameter(valid_21627198, JArray, required = false,
                                   default = nil)
  if valid_21627198 != nil:
    section.add "Filters", valid_21627198
  var valid_21627199 = formData.getOrDefault("MaxRecords")
  valid_21627199 = validateParameter(valid_21627199, JInt, required = false,
                                   default = nil)
  if valid_21627199 != nil:
    section.add "MaxRecords", valid_21627199
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627200: Call_PostDescribeDBInstances_21627184;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
  ## 
  let valid = call_21627200.validator(path, query, header, formData, body, _)
  let scheme = call_21627200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627200.makeUrl(scheme.get, call_21627200.host, call_21627200.base,
                               call_21627200.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627200, uri, valid, _)

proc call*(call_21627201: Call_PostDescribeDBInstances_21627184;
          DBInstanceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627202 = newJObject()
  var formData_21627203 = newJObject()
  add(formData_21627203, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21627203, "Marker", newJString(Marker))
  add(query_21627202, "Action", newJString(Action))
  if Filters != nil:
    formData_21627203.add "Filters", Filters
  add(formData_21627203, "MaxRecords", newJInt(MaxRecords))
  add(query_21627202, "Version", newJString(Version))
  result = call_21627201.call(nil, query_21627202, nil, formData_21627203, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_21627184(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_21627185, base: "/",
    makeUrl: url_PostDescribeDBInstances_21627186,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_21627165 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBInstances_21627167(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_21627166(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_21627168 = query.getOrDefault("MaxRecords")
  valid_21627168 = validateParameter(valid_21627168, JInt, required = false,
                                   default = nil)
  if valid_21627168 != nil:
    section.add "MaxRecords", valid_21627168
  var valid_21627169 = query.getOrDefault("Filters")
  valid_21627169 = validateParameter(valid_21627169, JArray, required = false,
                                   default = nil)
  if valid_21627169 != nil:
    section.add "Filters", valid_21627169
  var valid_21627170 = query.getOrDefault("Action")
  valid_21627170 = validateParameter(valid_21627170, JString, required = true,
                                   default = newJString("DescribeDBInstances"))
  if valid_21627170 != nil:
    section.add "Action", valid_21627170
  var valid_21627171 = query.getOrDefault("Marker")
  valid_21627171 = validateParameter(valid_21627171, JString, required = false,
                                   default = nil)
  if valid_21627171 != nil:
    section.add "Marker", valid_21627171
  var valid_21627172 = query.getOrDefault("Version")
  valid_21627172 = validateParameter(valid_21627172, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627172 != nil:
    section.add "Version", valid_21627172
  var valid_21627173 = query.getOrDefault("DBInstanceIdentifier")
  valid_21627173 = validateParameter(valid_21627173, JString, required = false,
                                   default = nil)
  if valid_21627173 != nil:
    section.add "DBInstanceIdentifier", valid_21627173
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627174 = header.getOrDefault("X-Amz-Date")
  valid_21627174 = validateParameter(valid_21627174, JString, required = false,
                                   default = nil)
  if valid_21627174 != nil:
    section.add "X-Amz-Date", valid_21627174
  var valid_21627175 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627175 = validateParameter(valid_21627175, JString, required = false,
                                   default = nil)
  if valid_21627175 != nil:
    section.add "X-Amz-Security-Token", valid_21627175
  var valid_21627176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627176 = validateParameter(valid_21627176, JString, required = false,
                                   default = nil)
  if valid_21627176 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627176
  var valid_21627177 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627177 = validateParameter(valid_21627177, JString, required = false,
                                   default = nil)
  if valid_21627177 != nil:
    section.add "X-Amz-Algorithm", valid_21627177
  var valid_21627178 = header.getOrDefault("X-Amz-Signature")
  valid_21627178 = validateParameter(valid_21627178, JString, required = false,
                                   default = nil)
  if valid_21627178 != nil:
    section.add "X-Amz-Signature", valid_21627178
  var valid_21627179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627179 = validateParameter(valid_21627179, JString, required = false,
                                   default = nil)
  if valid_21627179 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627179
  var valid_21627180 = header.getOrDefault("X-Amz-Credential")
  valid_21627180 = validateParameter(valid_21627180, JString, required = false,
                                   default = nil)
  if valid_21627180 != nil:
    section.add "X-Amz-Credential", valid_21627180
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627181: Call_GetDescribeDBInstances_21627165;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
  ## 
  let valid = call_21627181.validator(path, query, header, formData, body, _)
  let scheme = call_21627181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627181.makeUrl(scheme.get, call_21627181.host, call_21627181.base,
                               call_21627181.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627181, uri, valid, _)

proc call*(call_21627182: Call_GetDescribeDBInstances_21627165;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBInstances"; Marker: string = "";
          Version: string = "2014-10-31"; DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstances
  ## <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_21627183 = newJObject()
  add(query_21627183, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627183.add "Filters", Filters
  add(query_21627183, "Action", newJString(Action))
  add(query_21627183, "Marker", newJString(Marker))
  add(query_21627183, "Version", newJString(Version))
  add(query_21627183, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21627182.call(nil, query_21627183, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_21627165(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_21627166, base: "/",
    makeUrl: url_GetDescribeDBInstances_21627167,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_21627223 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBParameterGroups_21627225(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_21627224(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627226 = query.getOrDefault("Action")
  valid_21627226 = validateParameter(valid_21627226, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_21627226 != nil:
    section.add "Action", valid_21627226
  var valid_21627227 = query.getOrDefault("Version")
  valid_21627227 = validateParameter(valid_21627227, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627227 != nil:
    section.add "Version", valid_21627227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627228 = header.getOrDefault("X-Amz-Date")
  valid_21627228 = validateParameter(valid_21627228, JString, required = false,
                                   default = nil)
  if valid_21627228 != nil:
    section.add "X-Amz-Date", valid_21627228
  var valid_21627229 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627229 = validateParameter(valid_21627229, JString, required = false,
                                   default = nil)
  if valid_21627229 != nil:
    section.add "X-Amz-Security-Token", valid_21627229
  var valid_21627230 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627230 = validateParameter(valid_21627230, JString, required = false,
                                   default = nil)
  if valid_21627230 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627230
  var valid_21627231 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627231 = validateParameter(valid_21627231, JString, required = false,
                                   default = nil)
  if valid_21627231 != nil:
    section.add "X-Amz-Algorithm", valid_21627231
  var valid_21627232 = header.getOrDefault("X-Amz-Signature")
  valid_21627232 = validateParameter(valid_21627232, JString, required = false,
                                   default = nil)
  if valid_21627232 != nil:
    section.add "X-Amz-Signature", valid_21627232
  var valid_21627233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627233 = validateParameter(valid_21627233, JString, required = false,
                                   default = nil)
  if valid_21627233 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627233
  var valid_21627234 = header.getOrDefault("X-Amz-Credential")
  valid_21627234 = validateParameter(valid_21627234, JString, required = false,
                                   default = nil)
  if valid_21627234 != nil:
    section.add "X-Amz-Credential", valid_21627234
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627235 = formData.getOrDefault("DBParameterGroupName")
  valid_21627235 = validateParameter(valid_21627235, JString, required = false,
                                   default = nil)
  if valid_21627235 != nil:
    section.add "DBParameterGroupName", valid_21627235
  var valid_21627236 = formData.getOrDefault("Marker")
  valid_21627236 = validateParameter(valid_21627236, JString, required = false,
                                   default = nil)
  if valid_21627236 != nil:
    section.add "Marker", valid_21627236
  var valid_21627237 = formData.getOrDefault("Filters")
  valid_21627237 = validateParameter(valid_21627237, JArray, required = false,
                                   default = nil)
  if valid_21627237 != nil:
    section.add "Filters", valid_21627237
  var valid_21627238 = formData.getOrDefault("MaxRecords")
  valid_21627238 = validateParameter(valid_21627238, JInt, required = false,
                                   default = nil)
  if valid_21627238 != nil:
    section.add "MaxRecords", valid_21627238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627239: Call_PostDescribeDBParameterGroups_21627223;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_21627239.validator(path, query, header, formData, body, _)
  let scheme = call_21627239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627239.makeUrl(scheme.get, call_21627239.host, call_21627239.base,
                               call_21627239.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627239, uri, valid, _)

proc call*(call_21627240: Call_PostDescribeDBParameterGroups_21627223;
          DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627241 = newJObject()
  var formData_21627242 = newJObject()
  add(formData_21627242, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21627242, "Marker", newJString(Marker))
  add(query_21627241, "Action", newJString(Action))
  if Filters != nil:
    formData_21627242.add "Filters", Filters
  add(formData_21627242, "MaxRecords", newJInt(MaxRecords))
  add(query_21627241, "Version", newJString(Version))
  result = call_21627240.call(nil, query_21627241, nil, formData_21627242, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_21627223(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_21627224, base: "/",
    makeUrl: url_PostDescribeDBParameterGroups_21627225,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_21627204 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBParameterGroups_21627206(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_21627205(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627207 = query.getOrDefault("MaxRecords")
  valid_21627207 = validateParameter(valid_21627207, JInt, required = false,
                                   default = nil)
  if valid_21627207 != nil:
    section.add "MaxRecords", valid_21627207
  var valid_21627208 = query.getOrDefault("Filters")
  valid_21627208 = validateParameter(valid_21627208, JArray, required = false,
                                   default = nil)
  if valid_21627208 != nil:
    section.add "Filters", valid_21627208
  var valid_21627209 = query.getOrDefault("DBParameterGroupName")
  valid_21627209 = validateParameter(valid_21627209, JString, required = false,
                                   default = nil)
  if valid_21627209 != nil:
    section.add "DBParameterGroupName", valid_21627209
  var valid_21627210 = query.getOrDefault("Action")
  valid_21627210 = validateParameter(valid_21627210, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_21627210 != nil:
    section.add "Action", valid_21627210
  var valid_21627211 = query.getOrDefault("Marker")
  valid_21627211 = validateParameter(valid_21627211, JString, required = false,
                                   default = nil)
  if valid_21627211 != nil:
    section.add "Marker", valid_21627211
  var valid_21627212 = query.getOrDefault("Version")
  valid_21627212 = validateParameter(valid_21627212, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627212 != nil:
    section.add "Version", valid_21627212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627213 = header.getOrDefault("X-Amz-Date")
  valid_21627213 = validateParameter(valid_21627213, JString, required = false,
                                   default = nil)
  if valid_21627213 != nil:
    section.add "X-Amz-Date", valid_21627213
  var valid_21627214 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627214 = validateParameter(valid_21627214, JString, required = false,
                                   default = nil)
  if valid_21627214 != nil:
    section.add "X-Amz-Security-Token", valid_21627214
  var valid_21627215 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627215 = validateParameter(valid_21627215, JString, required = false,
                                   default = nil)
  if valid_21627215 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627215
  var valid_21627216 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627216 = validateParameter(valid_21627216, JString, required = false,
                                   default = nil)
  if valid_21627216 != nil:
    section.add "X-Amz-Algorithm", valid_21627216
  var valid_21627217 = header.getOrDefault("X-Amz-Signature")
  valid_21627217 = validateParameter(valid_21627217, JString, required = false,
                                   default = nil)
  if valid_21627217 != nil:
    section.add "X-Amz-Signature", valid_21627217
  var valid_21627218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627218 = validateParameter(valid_21627218, JString, required = false,
                                   default = nil)
  if valid_21627218 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627218
  var valid_21627219 = header.getOrDefault("X-Amz-Credential")
  valid_21627219 = validateParameter(valid_21627219, JString, required = false,
                                   default = nil)
  if valid_21627219 != nil:
    section.add "X-Amz-Credential", valid_21627219
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627220: Call_GetDescribeDBParameterGroups_21627204;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_21627220.validator(path, query, header, formData, body, _)
  let scheme = call_21627220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627220.makeUrl(scheme.get, call_21627220.host, call_21627220.base,
                               call_21627220.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627220, uri, valid, _)

proc call*(call_21627221: Call_GetDescribeDBParameterGroups_21627204;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21627222 = newJObject()
  add(query_21627222, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627222.add "Filters", Filters
  add(query_21627222, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21627222, "Action", newJString(Action))
  add(query_21627222, "Marker", newJString(Marker))
  add(query_21627222, "Version", newJString(Version))
  result = call_21627221.call(nil, query_21627222, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_21627204(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_21627205, base: "/",
    makeUrl: url_GetDescribeDBParameterGroups_21627206,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_21627263 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBParameters_21627265(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_21627264(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627266 = query.getOrDefault("Action")
  valid_21627266 = validateParameter(valid_21627266, JString, required = true,
                                   default = newJString("DescribeDBParameters"))
  if valid_21627266 != nil:
    section.add "Action", valid_21627266
  var valid_21627267 = query.getOrDefault("Version")
  valid_21627267 = validateParameter(valid_21627267, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627267 != nil:
    section.add "Version", valid_21627267
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627268 = header.getOrDefault("X-Amz-Date")
  valid_21627268 = validateParameter(valid_21627268, JString, required = false,
                                   default = nil)
  if valid_21627268 != nil:
    section.add "X-Amz-Date", valid_21627268
  var valid_21627269 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627269 = validateParameter(valid_21627269, JString, required = false,
                                   default = nil)
  if valid_21627269 != nil:
    section.add "X-Amz-Security-Token", valid_21627269
  var valid_21627270 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627270 = validateParameter(valid_21627270, JString, required = false,
                                   default = nil)
  if valid_21627270 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627270
  var valid_21627271 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627271 = validateParameter(valid_21627271, JString, required = false,
                                   default = nil)
  if valid_21627271 != nil:
    section.add "X-Amz-Algorithm", valid_21627271
  var valid_21627272 = header.getOrDefault("X-Amz-Signature")
  valid_21627272 = validateParameter(valid_21627272, JString, required = false,
                                   default = nil)
  if valid_21627272 != nil:
    section.add "X-Amz-Signature", valid_21627272
  var valid_21627273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627273 = validateParameter(valid_21627273, JString, required = false,
                                   default = nil)
  if valid_21627273 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627273
  var valid_21627274 = header.getOrDefault("X-Amz-Credential")
  valid_21627274 = validateParameter(valid_21627274, JString, required = false,
                                   default = nil)
  if valid_21627274 != nil:
    section.add "X-Amz-Credential", valid_21627274
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627275 = formData.getOrDefault("DBParameterGroupName")
  valid_21627275 = validateParameter(valid_21627275, JString, required = true,
                                   default = nil)
  if valid_21627275 != nil:
    section.add "DBParameterGroupName", valid_21627275
  var valid_21627276 = formData.getOrDefault("Marker")
  valid_21627276 = validateParameter(valid_21627276, JString, required = false,
                                   default = nil)
  if valid_21627276 != nil:
    section.add "Marker", valid_21627276
  var valid_21627277 = formData.getOrDefault("Filters")
  valid_21627277 = validateParameter(valid_21627277, JArray, required = false,
                                   default = nil)
  if valid_21627277 != nil:
    section.add "Filters", valid_21627277
  var valid_21627278 = formData.getOrDefault("MaxRecords")
  valid_21627278 = validateParameter(valid_21627278, JInt, required = false,
                                   default = nil)
  if valid_21627278 != nil:
    section.add "MaxRecords", valid_21627278
  var valid_21627279 = formData.getOrDefault("Source")
  valid_21627279 = validateParameter(valid_21627279, JString, required = false,
                                   default = nil)
  if valid_21627279 != nil:
    section.add "Source", valid_21627279
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627280: Call_PostDescribeDBParameters_21627263;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_21627280.validator(path, query, header, formData, body, _)
  let scheme = call_21627280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627280.makeUrl(scheme.get, call_21627280.host, call_21627280.base,
                               call_21627280.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627280, uri, valid, _)

proc call*(call_21627281: Call_PostDescribeDBParameters_21627263;
          DBParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  var query_21627282 = newJObject()
  var formData_21627283 = newJObject()
  add(formData_21627283, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21627283, "Marker", newJString(Marker))
  add(query_21627282, "Action", newJString(Action))
  if Filters != nil:
    formData_21627283.add "Filters", Filters
  add(formData_21627283, "MaxRecords", newJInt(MaxRecords))
  add(query_21627282, "Version", newJString(Version))
  add(formData_21627283, "Source", newJString(Source))
  result = call_21627281.call(nil, query_21627282, nil, formData_21627283, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_21627263(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_21627264, base: "/",
    makeUrl: url_PostDescribeDBParameters_21627265,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_21627243 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBParameters_21627245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_21627244(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627246 = query.getOrDefault("MaxRecords")
  valid_21627246 = validateParameter(valid_21627246, JInt, required = false,
                                   default = nil)
  if valid_21627246 != nil:
    section.add "MaxRecords", valid_21627246
  var valid_21627247 = query.getOrDefault("Filters")
  valid_21627247 = validateParameter(valid_21627247, JArray, required = false,
                                   default = nil)
  if valid_21627247 != nil:
    section.add "Filters", valid_21627247
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627248 = query.getOrDefault("DBParameterGroupName")
  valid_21627248 = validateParameter(valid_21627248, JString, required = true,
                                   default = nil)
  if valid_21627248 != nil:
    section.add "DBParameterGroupName", valid_21627248
  var valid_21627249 = query.getOrDefault("Action")
  valid_21627249 = validateParameter(valid_21627249, JString, required = true,
                                   default = newJString("DescribeDBParameters"))
  if valid_21627249 != nil:
    section.add "Action", valid_21627249
  var valid_21627250 = query.getOrDefault("Marker")
  valid_21627250 = validateParameter(valid_21627250, JString, required = false,
                                   default = nil)
  if valid_21627250 != nil:
    section.add "Marker", valid_21627250
  var valid_21627251 = query.getOrDefault("Source")
  valid_21627251 = validateParameter(valid_21627251, JString, required = false,
                                   default = nil)
  if valid_21627251 != nil:
    section.add "Source", valid_21627251
  var valid_21627252 = query.getOrDefault("Version")
  valid_21627252 = validateParameter(valid_21627252, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627252 != nil:
    section.add "Version", valid_21627252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627253 = header.getOrDefault("X-Amz-Date")
  valid_21627253 = validateParameter(valid_21627253, JString, required = false,
                                   default = nil)
  if valid_21627253 != nil:
    section.add "X-Amz-Date", valid_21627253
  var valid_21627254 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627254 = validateParameter(valid_21627254, JString, required = false,
                                   default = nil)
  if valid_21627254 != nil:
    section.add "X-Amz-Security-Token", valid_21627254
  var valid_21627255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627255 = validateParameter(valid_21627255, JString, required = false,
                                   default = nil)
  if valid_21627255 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627255
  var valid_21627256 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627256 = validateParameter(valid_21627256, JString, required = false,
                                   default = nil)
  if valid_21627256 != nil:
    section.add "X-Amz-Algorithm", valid_21627256
  var valid_21627257 = header.getOrDefault("X-Amz-Signature")
  valid_21627257 = validateParameter(valid_21627257, JString, required = false,
                                   default = nil)
  if valid_21627257 != nil:
    section.add "X-Amz-Signature", valid_21627257
  var valid_21627258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627258 = validateParameter(valid_21627258, JString, required = false,
                                   default = nil)
  if valid_21627258 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627258
  var valid_21627259 = header.getOrDefault("X-Amz-Credential")
  valid_21627259 = validateParameter(valid_21627259, JString, required = false,
                                   default = nil)
  if valid_21627259 != nil:
    section.add "X-Amz-Credential", valid_21627259
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627260: Call_GetDescribeDBParameters_21627243;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_21627260.validator(path, query, header, formData, body, _)
  let scheme = call_21627260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627260.makeUrl(scheme.get, call_21627260.host, call_21627260.base,
                               call_21627260.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627260, uri, valid, _)

proc call*(call_21627261: Call_GetDescribeDBParameters_21627243;
          DBParameterGroupName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: string (required)
  var query_21627262 = newJObject()
  add(query_21627262, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627262.add "Filters", Filters
  add(query_21627262, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21627262, "Action", newJString(Action))
  add(query_21627262, "Marker", newJString(Marker))
  add(query_21627262, "Source", newJString(Source))
  add(query_21627262, "Version", newJString(Version))
  result = call_21627261.call(nil, query_21627262, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_21627243(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_21627244, base: "/",
    makeUrl: url_GetDescribeDBParameters_21627245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_21627303 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeDBSubnetGroups_21627305(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_21627304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627306 = query.getOrDefault("Action")
  valid_21627306 = validateParameter(valid_21627306, JString, required = true, default = newJString(
      "DescribeDBSubnetGroups"))
  if valid_21627306 != nil:
    section.add "Action", valid_21627306
  var valid_21627307 = query.getOrDefault("Version")
  valid_21627307 = validateParameter(valid_21627307, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627307 != nil:
    section.add "Version", valid_21627307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627308 = header.getOrDefault("X-Amz-Date")
  valid_21627308 = validateParameter(valid_21627308, JString, required = false,
                                   default = nil)
  if valid_21627308 != nil:
    section.add "X-Amz-Date", valid_21627308
  var valid_21627309 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627309 = validateParameter(valid_21627309, JString, required = false,
                                   default = nil)
  if valid_21627309 != nil:
    section.add "X-Amz-Security-Token", valid_21627309
  var valid_21627310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627310 = validateParameter(valid_21627310, JString, required = false,
                                   default = nil)
  if valid_21627310 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627310
  var valid_21627311 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627311 = validateParameter(valid_21627311, JString, required = false,
                                   default = nil)
  if valid_21627311 != nil:
    section.add "X-Amz-Algorithm", valid_21627311
  var valid_21627312 = header.getOrDefault("X-Amz-Signature")
  valid_21627312 = validateParameter(valid_21627312, JString, required = false,
                                   default = nil)
  if valid_21627312 != nil:
    section.add "X-Amz-Signature", valid_21627312
  var valid_21627313 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627313 = validateParameter(valid_21627313, JString, required = false,
                                   default = nil)
  if valid_21627313 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627313
  var valid_21627314 = header.getOrDefault("X-Amz-Credential")
  valid_21627314 = validateParameter(valid_21627314, JString, required = false,
                                   default = nil)
  if valid_21627314 != nil:
    section.add "X-Amz-Credential", valid_21627314
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627315 = formData.getOrDefault("DBSubnetGroupName")
  valid_21627315 = validateParameter(valid_21627315, JString, required = false,
                                   default = nil)
  if valid_21627315 != nil:
    section.add "DBSubnetGroupName", valid_21627315
  var valid_21627316 = formData.getOrDefault("Marker")
  valid_21627316 = validateParameter(valid_21627316, JString, required = false,
                                   default = nil)
  if valid_21627316 != nil:
    section.add "Marker", valid_21627316
  var valid_21627317 = formData.getOrDefault("Filters")
  valid_21627317 = validateParameter(valid_21627317, JArray, required = false,
                                   default = nil)
  if valid_21627317 != nil:
    section.add "Filters", valid_21627317
  var valid_21627318 = formData.getOrDefault("MaxRecords")
  valid_21627318 = validateParameter(valid_21627318, JInt, required = false,
                                   default = nil)
  if valid_21627318 != nil:
    section.add "MaxRecords", valid_21627318
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627319: Call_PostDescribeDBSubnetGroups_21627303;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_21627319.validator(path, query, header, formData, body, _)
  let scheme = call_21627319.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627319.makeUrl(scheme.get, call_21627319.host, call_21627319.base,
                               call_21627319.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627319, uri, valid, _)

proc call*(call_21627320: Call_PostDescribeDBSubnetGroups_21627303;
          DBSubnetGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627321 = newJObject()
  var formData_21627322 = newJObject()
  add(formData_21627322, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21627322, "Marker", newJString(Marker))
  add(query_21627321, "Action", newJString(Action))
  if Filters != nil:
    formData_21627322.add "Filters", Filters
  add(formData_21627322, "MaxRecords", newJInt(MaxRecords))
  add(query_21627321, "Version", newJString(Version))
  result = call_21627320.call(nil, query_21627321, nil, formData_21627322, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_21627303(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_21627304, base: "/",
    makeUrl: url_PostDescribeDBSubnetGroups_21627305,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_21627284 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeDBSubnetGroups_21627286(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_21627285(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627287 = query.getOrDefault("MaxRecords")
  valid_21627287 = validateParameter(valid_21627287, JInt, required = false,
                                   default = nil)
  if valid_21627287 != nil:
    section.add "MaxRecords", valid_21627287
  var valid_21627288 = query.getOrDefault("Filters")
  valid_21627288 = validateParameter(valid_21627288, JArray, required = false,
                                   default = nil)
  if valid_21627288 != nil:
    section.add "Filters", valid_21627288
  var valid_21627289 = query.getOrDefault("Action")
  valid_21627289 = validateParameter(valid_21627289, JString, required = true, default = newJString(
      "DescribeDBSubnetGroups"))
  if valid_21627289 != nil:
    section.add "Action", valid_21627289
  var valid_21627290 = query.getOrDefault("Marker")
  valid_21627290 = validateParameter(valid_21627290, JString, required = false,
                                   default = nil)
  if valid_21627290 != nil:
    section.add "Marker", valid_21627290
  var valid_21627291 = query.getOrDefault("DBSubnetGroupName")
  valid_21627291 = validateParameter(valid_21627291, JString, required = false,
                                   default = nil)
  if valid_21627291 != nil:
    section.add "DBSubnetGroupName", valid_21627291
  var valid_21627292 = query.getOrDefault("Version")
  valid_21627292 = validateParameter(valid_21627292, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627292 != nil:
    section.add "Version", valid_21627292
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627293 = header.getOrDefault("X-Amz-Date")
  valid_21627293 = validateParameter(valid_21627293, JString, required = false,
                                   default = nil)
  if valid_21627293 != nil:
    section.add "X-Amz-Date", valid_21627293
  var valid_21627294 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627294 = validateParameter(valid_21627294, JString, required = false,
                                   default = nil)
  if valid_21627294 != nil:
    section.add "X-Amz-Security-Token", valid_21627294
  var valid_21627295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627295 = validateParameter(valid_21627295, JString, required = false,
                                   default = nil)
  if valid_21627295 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627295
  var valid_21627296 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627296 = validateParameter(valid_21627296, JString, required = false,
                                   default = nil)
  if valid_21627296 != nil:
    section.add "X-Amz-Algorithm", valid_21627296
  var valid_21627297 = header.getOrDefault("X-Amz-Signature")
  valid_21627297 = validateParameter(valid_21627297, JString, required = false,
                                   default = nil)
  if valid_21627297 != nil:
    section.add "X-Amz-Signature", valid_21627297
  var valid_21627298 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627298 = validateParameter(valid_21627298, JString, required = false,
                                   default = nil)
  if valid_21627298 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627298
  var valid_21627299 = header.getOrDefault("X-Amz-Credential")
  valid_21627299 = validateParameter(valid_21627299, JString, required = false,
                                   default = nil)
  if valid_21627299 != nil:
    section.add "X-Amz-Credential", valid_21627299
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627300: Call_GetDescribeDBSubnetGroups_21627284;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_21627300.validator(path, query, header, formData, body, _)
  let scheme = call_21627300.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627300.makeUrl(scheme.get, call_21627300.host, call_21627300.base,
                               call_21627300.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627300, uri, valid, _)

proc call*(call_21627301: Call_GetDescribeDBSubnetGroups_21627284;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBSubnetGroups"; Marker: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  var query_21627302 = newJObject()
  add(query_21627302, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627302.add "Filters", Filters
  add(query_21627302, "Action", newJString(Action))
  add(query_21627302, "Marker", newJString(Marker))
  add(query_21627302, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21627302, "Version", newJString(Version))
  result = call_21627301.call(nil, query_21627302, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_21627284(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_21627285, base: "/",
    makeUrl: url_GetDescribeDBSubnetGroups_21627286,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_21627342 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEngineDefaultClusterParameters_21627344(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_21627343(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627345 = query.getOrDefault("Action")
  valid_21627345 = validateParameter(valid_21627345, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_21627345 != nil:
    section.add "Action", valid_21627345
  var valid_21627346 = query.getOrDefault("Version")
  valid_21627346 = validateParameter(valid_21627346, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627346 != nil:
    section.add "Version", valid_21627346
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627347 = header.getOrDefault("X-Amz-Date")
  valid_21627347 = validateParameter(valid_21627347, JString, required = false,
                                   default = nil)
  if valid_21627347 != nil:
    section.add "X-Amz-Date", valid_21627347
  var valid_21627348 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627348 = validateParameter(valid_21627348, JString, required = false,
                                   default = nil)
  if valid_21627348 != nil:
    section.add "X-Amz-Security-Token", valid_21627348
  var valid_21627349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627349 = validateParameter(valid_21627349, JString, required = false,
                                   default = nil)
  if valid_21627349 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627349
  var valid_21627350 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627350 = validateParameter(valid_21627350, JString, required = false,
                                   default = nil)
  if valid_21627350 != nil:
    section.add "X-Amz-Algorithm", valid_21627350
  var valid_21627351 = header.getOrDefault("X-Amz-Signature")
  valid_21627351 = validateParameter(valid_21627351, JString, required = false,
                                   default = nil)
  if valid_21627351 != nil:
    section.add "X-Amz-Signature", valid_21627351
  var valid_21627352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627352 = validateParameter(valid_21627352, JString, required = false,
                                   default = nil)
  if valid_21627352 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627352
  var valid_21627353 = header.getOrDefault("X-Amz-Credential")
  valid_21627353 = validateParameter(valid_21627353, JString, required = false,
                                   default = nil)
  if valid_21627353 != nil:
    section.add "X-Amz-Credential", valid_21627353
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627354 = formData.getOrDefault("Marker")
  valid_21627354 = validateParameter(valid_21627354, JString, required = false,
                                   default = nil)
  if valid_21627354 != nil:
    section.add "Marker", valid_21627354
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21627355 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21627355 = validateParameter(valid_21627355, JString, required = true,
                                   default = nil)
  if valid_21627355 != nil:
    section.add "DBParameterGroupFamily", valid_21627355
  var valid_21627356 = formData.getOrDefault("Filters")
  valid_21627356 = validateParameter(valid_21627356, JArray, required = false,
                                   default = nil)
  if valid_21627356 != nil:
    section.add "Filters", valid_21627356
  var valid_21627357 = formData.getOrDefault("MaxRecords")
  valid_21627357 = validateParameter(valid_21627357, JInt, required = false,
                                   default = nil)
  if valid_21627357 != nil:
    section.add "MaxRecords", valid_21627357
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627358: Call_PostDescribeEngineDefaultClusterParameters_21627342;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_21627358.validator(path, query, header, formData, body, _)
  let scheme = call_21627358.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627358.makeUrl(scheme.get, call_21627358.host, call_21627358.base,
                               call_21627358.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627358, uri, valid, _)

proc call*(call_21627359: Call_PostDescribeEngineDefaultClusterParameters_21627342;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627360 = newJObject()
  var formData_21627361 = newJObject()
  add(formData_21627361, "Marker", newJString(Marker))
  add(query_21627360, "Action", newJString(Action))
  add(formData_21627361, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_21627361.add "Filters", Filters
  add(formData_21627361, "MaxRecords", newJInt(MaxRecords))
  add(query_21627360, "Version", newJString(Version))
  result = call_21627359.call(nil, query_21627360, nil, formData_21627361, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_21627342(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_21627343,
    base: "/", makeUrl: url_PostDescribeEngineDefaultClusterParameters_21627344,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_21627323 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEngineDefaultClusterParameters_21627325(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_21627324(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627326 = query.getOrDefault("MaxRecords")
  valid_21627326 = validateParameter(valid_21627326, JInt, required = false,
                                   default = nil)
  if valid_21627326 != nil:
    section.add "MaxRecords", valid_21627326
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21627327 = query.getOrDefault("DBParameterGroupFamily")
  valid_21627327 = validateParameter(valid_21627327, JString, required = true,
                                   default = nil)
  if valid_21627327 != nil:
    section.add "DBParameterGroupFamily", valid_21627327
  var valid_21627328 = query.getOrDefault("Filters")
  valid_21627328 = validateParameter(valid_21627328, JArray, required = false,
                                   default = nil)
  if valid_21627328 != nil:
    section.add "Filters", valid_21627328
  var valid_21627329 = query.getOrDefault("Action")
  valid_21627329 = validateParameter(valid_21627329, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_21627329 != nil:
    section.add "Action", valid_21627329
  var valid_21627330 = query.getOrDefault("Marker")
  valid_21627330 = validateParameter(valid_21627330, JString, required = false,
                                   default = nil)
  if valid_21627330 != nil:
    section.add "Marker", valid_21627330
  var valid_21627331 = query.getOrDefault("Version")
  valid_21627331 = validateParameter(valid_21627331, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627331 != nil:
    section.add "Version", valid_21627331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627332 = header.getOrDefault("X-Amz-Date")
  valid_21627332 = validateParameter(valid_21627332, JString, required = false,
                                   default = nil)
  if valid_21627332 != nil:
    section.add "X-Amz-Date", valid_21627332
  var valid_21627333 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627333 = validateParameter(valid_21627333, JString, required = false,
                                   default = nil)
  if valid_21627333 != nil:
    section.add "X-Amz-Security-Token", valid_21627333
  var valid_21627334 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627334 = validateParameter(valid_21627334, JString, required = false,
                                   default = nil)
  if valid_21627334 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627334
  var valid_21627335 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627335 = validateParameter(valid_21627335, JString, required = false,
                                   default = nil)
  if valid_21627335 != nil:
    section.add "X-Amz-Algorithm", valid_21627335
  var valid_21627336 = header.getOrDefault("X-Amz-Signature")
  valid_21627336 = validateParameter(valid_21627336, JString, required = false,
                                   default = nil)
  if valid_21627336 != nil:
    section.add "X-Amz-Signature", valid_21627336
  var valid_21627337 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627337 = validateParameter(valid_21627337, JString, required = false,
                                   default = nil)
  if valid_21627337 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627337
  var valid_21627338 = header.getOrDefault("X-Amz-Credential")
  valid_21627338 = validateParameter(valid_21627338, JString, required = false,
                                   default = nil)
  if valid_21627338 != nil:
    section.add "X-Amz-Credential", valid_21627338
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627339: Call_GetDescribeEngineDefaultClusterParameters_21627323;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_21627339.validator(path, query, header, formData, body, _)
  let scheme = call_21627339.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627339.makeUrl(scheme.get, call_21627339.host, call_21627339.base,
                               call_21627339.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627339, uri, valid, _)

proc call*(call_21627340: Call_GetDescribeEngineDefaultClusterParameters_21627323;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultClusterParameters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21627341 = newJObject()
  add(query_21627341, "MaxRecords", newJInt(MaxRecords))
  add(query_21627341, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_21627341.add "Filters", Filters
  add(query_21627341, "Action", newJString(Action))
  add(query_21627341, "Marker", newJString(Marker))
  add(query_21627341, "Version", newJString(Version))
  result = call_21627340.call(nil, query_21627341, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_21627323(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_21627324,
    base: "/", makeUrl: url_GetDescribeEngineDefaultClusterParameters_21627325,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_21627381 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEngineDefaultParameters_21627383(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_21627382(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627384 = query.getOrDefault("Action")
  valid_21627384 = validateParameter(valid_21627384, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_21627384 != nil:
    section.add "Action", valid_21627384
  var valid_21627385 = query.getOrDefault("Version")
  valid_21627385 = validateParameter(valid_21627385, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627385 != nil:
    section.add "Version", valid_21627385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627386 = header.getOrDefault("X-Amz-Date")
  valid_21627386 = validateParameter(valid_21627386, JString, required = false,
                                   default = nil)
  if valid_21627386 != nil:
    section.add "X-Amz-Date", valid_21627386
  var valid_21627387 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627387 = validateParameter(valid_21627387, JString, required = false,
                                   default = nil)
  if valid_21627387 != nil:
    section.add "X-Amz-Security-Token", valid_21627387
  var valid_21627388 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627388 = validateParameter(valid_21627388, JString, required = false,
                                   default = nil)
  if valid_21627388 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627388
  var valid_21627389 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627389 = validateParameter(valid_21627389, JString, required = false,
                                   default = nil)
  if valid_21627389 != nil:
    section.add "X-Amz-Algorithm", valid_21627389
  var valid_21627390 = header.getOrDefault("X-Amz-Signature")
  valid_21627390 = validateParameter(valid_21627390, JString, required = false,
                                   default = nil)
  if valid_21627390 != nil:
    section.add "X-Amz-Signature", valid_21627390
  var valid_21627391 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627391 = validateParameter(valid_21627391, JString, required = false,
                                   default = nil)
  if valid_21627391 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627391
  var valid_21627392 = header.getOrDefault("X-Amz-Credential")
  valid_21627392 = validateParameter(valid_21627392, JString, required = false,
                                   default = nil)
  if valid_21627392 != nil:
    section.add "X-Amz-Credential", valid_21627392
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627393 = formData.getOrDefault("Marker")
  valid_21627393 = validateParameter(valid_21627393, JString, required = false,
                                   default = nil)
  if valid_21627393 != nil:
    section.add "Marker", valid_21627393
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21627394 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21627394 = validateParameter(valid_21627394, JString, required = true,
                                   default = nil)
  if valid_21627394 != nil:
    section.add "DBParameterGroupFamily", valid_21627394
  var valid_21627395 = formData.getOrDefault("Filters")
  valid_21627395 = validateParameter(valid_21627395, JArray, required = false,
                                   default = nil)
  if valid_21627395 != nil:
    section.add "Filters", valid_21627395
  var valid_21627396 = formData.getOrDefault("MaxRecords")
  valid_21627396 = validateParameter(valid_21627396, JInt, required = false,
                                   default = nil)
  if valid_21627396 != nil:
    section.add "MaxRecords", valid_21627396
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627397: Call_PostDescribeEngineDefaultParameters_21627381;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_21627397.validator(path, query, header, formData, body, _)
  let scheme = call_21627397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627397.makeUrl(scheme.get, call_21627397.host, call_21627397.base,
                               call_21627397.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627397, uri, valid, _)

proc call*(call_21627398: Call_PostDescribeEngineDefaultParameters_21627381;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627399 = newJObject()
  var formData_21627400 = newJObject()
  add(formData_21627400, "Marker", newJString(Marker))
  add(query_21627399, "Action", newJString(Action))
  add(formData_21627400, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_21627400.add "Filters", Filters
  add(formData_21627400, "MaxRecords", newJInt(MaxRecords))
  add(query_21627399, "Version", newJString(Version))
  result = call_21627398.call(nil, query_21627399, nil, formData_21627400, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_21627381(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_21627382, base: "/",
    makeUrl: url_PostDescribeEngineDefaultParameters_21627383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_21627362 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEngineDefaultParameters_21627364(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_21627363(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627365 = query.getOrDefault("MaxRecords")
  valid_21627365 = validateParameter(valid_21627365, JInt, required = false,
                                   default = nil)
  if valid_21627365 != nil:
    section.add "MaxRecords", valid_21627365
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21627366 = query.getOrDefault("DBParameterGroupFamily")
  valid_21627366 = validateParameter(valid_21627366, JString, required = true,
                                   default = nil)
  if valid_21627366 != nil:
    section.add "DBParameterGroupFamily", valid_21627366
  var valid_21627367 = query.getOrDefault("Filters")
  valid_21627367 = validateParameter(valid_21627367, JArray, required = false,
                                   default = nil)
  if valid_21627367 != nil:
    section.add "Filters", valid_21627367
  var valid_21627368 = query.getOrDefault("Action")
  valid_21627368 = validateParameter(valid_21627368, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_21627368 != nil:
    section.add "Action", valid_21627368
  var valid_21627369 = query.getOrDefault("Marker")
  valid_21627369 = validateParameter(valid_21627369, JString, required = false,
                                   default = nil)
  if valid_21627369 != nil:
    section.add "Marker", valid_21627369
  var valid_21627370 = query.getOrDefault("Version")
  valid_21627370 = validateParameter(valid_21627370, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627370 != nil:
    section.add "Version", valid_21627370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627371 = header.getOrDefault("X-Amz-Date")
  valid_21627371 = validateParameter(valid_21627371, JString, required = false,
                                   default = nil)
  if valid_21627371 != nil:
    section.add "X-Amz-Date", valid_21627371
  var valid_21627372 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627372 = validateParameter(valid_21627372, JString, required = false,
                                   default = nil)
  if valid_21627372 != nil:
    section.add "X-Amz-Security-Token", valid_21627372
  var valid_21627373 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627373 = validateParameter(valid_21627373, JString, required = false,
                                   default = nil)
  if valid_21627373 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627373
  var valid_21627374 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627374 = validateParameter(valid_21627374, JString, required = false,
                                   default = nil)
  if valid_21627374 != nil:
    section.add "X-Amz-Algorithm", valid_21627374
  var valid_21627375 = header.getOrDefault("X-Amz-Signature")
  valid_21627375 = validateParameter(valid_21627375, JString, required = false,
                                   default = nil)
  if valid_21627375 != nil:
    section.add "X-Amz-Signature", valid_21627375
  var valid_21627376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627376 = validateParameter(valid_21627376, JString, required = false,
                                   default = nil)
  if valid_21627376 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627376
  var valid_21627377 = header.getOrDefault("X-Amz-Credential")
  valid_21627377 = validateParameter(valid_21627377, JString, required = false,
                                   default = nil)
  if valid_21627377 != nil:
    section.add "X-Amz-Credential", valid_21627377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627378: Call_GetDescribeEngineDefaultParameters_21627362;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_21627378.validator(path, query, header, formData, body, _)
  let scheme = call_21627378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627378.makeUrl(scheme.get, call_21627378.host, call_21627378.base,
                               call_21627378.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627378, uri, valid, _)

proc call*(call_21627379: Call_GetDescribeEngineDefaultParameters_21627362;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21627380 = newJObject()
  add(query_21627380, "MaxRecords", newJInt(MaxRecords))
  add(query_21627380, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_21627380.add "Filters", Filters
  add(query_21627380, "Action", newJString(Action))
  add(query_21627380, "Marker", newJString(Marker))
  add(query_21627380, "Version", newJString(Version))
  result = call_21627379.call(nil, query_21627380, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_21627362(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_21627363, base: "/",
    makeUrl: url_GetDescribeEngineDefaultParameters_21627364,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_21627418 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEventCategories_21627420(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_21627419(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627421 = query.getOrDefault("Action")
  valid_21627421 = validateParameter(valid_21627421, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_21627421 != nil:
    section.add "Action", valid_21627421
  var valid_21627422 = query.getOrDefault("Version")
  valid_21627422 = validateParameter(valid_21627422, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627422 != nil:
    section.add "Version", valid_21627422
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627423 = header.getOrDefault("X-Amz-Date")
  valid_21627423 = validateParameter(valid_21627423, JString, required = false,
                                   default = nil)
  if valid_21627423 != nil:
    section.add "X-Amz-Date", valid_21627423
  var valid_21627424 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627424 = validateParameter(valid_21627424, JString, required = false,
                                   default = nil)
  if valid_21627424 != nil:
    section.add "X-Amz-Security-Token", valid_21627424
  var valid_21627425 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627425 = validateParameter(valid_21627425, JString, required = false,
                                   default = nil)
  if valid_21627425 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627425
  var valid_21627426 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627426 = validateParameter(valid_21627426, JString, required = false,
                                   default = nil)
  if valid_21627426 != nil:
    section.add "X-Amz-Algorithm", valid_21627426
  var valid_21627427 = header.getOrDefault("X-Amz-Signature")
  valid_21627427 = validateParameter(valid_21627427, JString, required = false,
                                   default = nil)
  if valid_21627427 != nil:
    section.add "X-Amz-Signature", valid_21627427
  var valid_21627428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627428 = validateParameter(valid_21627428, JString, required = false,
                                   default = nil)
  if valid_21627428 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627428
  var valid_21627429 = header.getOrDefault("X-Amz-Credential")
  valid_21627429 = validateParameter(valid_21627429, JString, required = false,
                                   default = nil)
  if valid_21627429 != nil:
    section.add "X-Amz-Credential", valid_21627429
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_21627430 = formData.getOrDefault("Filters")
  valid_21627430 = validateParameter(valid_21627430, JArray, required = false,
                                   default = nil)
  if valid_21627430 != nil:
    section.add "Filters", valid_21627430
  var valid_21627431 = formData.getOrDefault("SourceType")
  valid_21627431 = validateParameter(valid_21627431, JString, required = false,
                                   default = nil)
  if valid_21627431 != nil:
    section.add "SourceType", valid_21627431
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627432: Call_PostDescribeEventCategories_21627418;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_21627432.validator(path, query, header, formData, body, _)
  let scheme = call_21627432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627432.makeUrl(scheme.get, call_21627432.host, call_21627432.base,
                               call_21627432.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627432, uri, valid, _)

proc call*(call_21627433: Call_PostDescribeEventCategories_21627418;
          Action: string = "DescribeEventCategories"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_21627434 = newJObject()
  var formData_21627435 = newJObject()
  add(query_21627434, "Action", newJString(Action))
  if Filters != nil:
    formData_21627435.add "Filters", Filters
  add(query_21627434, "Version", newJString(Version))
  add(formData_21627435, "SourceType", newJString(SourceType))
  result = call_21627433.call(nil, query_21627434, nil, formData_21627435, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_21627418(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_21627419, base: "/",
    makeUrl: url_PostDescribeEventCategories_21627420,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_21627401 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEventCategories_21627403(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_21627402(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627404 = query.getOrDefault("SourceType")
  valid_21627404 = validateParameter(valid_21627404, JString, required = false,
                                   default = nil)
  if valid_21627404 != nil:
    section.add "SourceType", valid_21627404
  var valid_21627405 = query.getOrDefault("Filters")
  valid_21627405 = validateParameter(valid_21627405, JArray, required = false,
                                   default = nil)
  if valid_21627405 != nil:
    section.add "Filters", valid_21627405
  var valid_21627406 = query.getOrDefault("Action")
  valid_21627406 = validateParameter(valid_21627406, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_21627406 != nil:
    section.add "Action", valid_21627406
  var valid_21627407 = query.getOrDefault("Version")
  valid_21627407 = validateParameter(valid_21627407, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627407 != nil:
    section.add "Version", valid_21627407
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627408 = header.getOrDefault("X-Amz-Date")
  valid_21627408 = validateParameter(valid_21627408, JString, required = false,
                                   default = nil)
  if valid_21627408 != nil:
    section.add "X-Amz-Date", valid_21627408
  var valid_21627409 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627409 = validateParameter(valid_21627409, JString, required = false,
                                   default = nil)
  if valid_21627409 != nil:
    section.add "X-Amz-Security-Token", valid_21627409
  var valid_21627410 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627410 = validateParameter(valid_21627410, JString, required = false,
                                   default = nil)
  if valid_21627410 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627410
  var valid_21627411 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627411 = validateParameter(valid_21627411, JString, required = false,
                                   default = nil)
  if valid_21627411 != nil:
    section.add "X-Amz-Algorithm", valid_21627411
  var valid_21627412 = header.getOrDefault("X-Amz-Signature")
  valid_21627412 = validateParameter(valid_21627412, JString, required = false,
                                   default = nil)
  if valid_21627412 != nil:
    section.add "X-Amz-Signature", valid_21627412
  var valid_21627413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627413 = validateParameter(valid_21627413, JString, required = false,
                                   default = nil)
  if valid_21627413 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627413
  var valid_21627414 = header.getOrDefault("X-Amz-Credential")
  valid_21627414 = validateParameter(valid_21627414, JString, required = false,
                                   default = nil)
  if valid_21627414 != nil:
    section.add "X-Amz-Credential", valid_21627414
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627415: Call_GetDescribeEventCategories_21627401;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_21627415.validator(path, query, header, formData, body, _)
  let scheme = call_21627415.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627415.makeUrl(scheme.get, call_21627415.host, call_21627415.base,
                               call_21627415.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627415, uri, valid, _)

proc call*(call_21627416: Call_GetDescribeEventCategories_21627401;
          SourceType: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEventCategories"; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627417 = newJObject()
  add(query_21627417, "SourceType", newJString(SourceType))
  if Filters != nil:
    query_21627417.add "Filters", Filters
  add(query_21627417, "Action", newJString(Action))
  add(query_21627417, "Version", newJString(Version))
  result = call_21627416.call(nil, query_21627417, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_21627401(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_21627402, base: "/",
    makeUrl: url_GetDescribeEventCategories_21627403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_21627455 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEventSubscriptions_21627457(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_21627456(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627458 = query.getOrDefault("Action")
  valid_21627458 = validateParameter(valid_21627458, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_21627458 != nil:
    section.add "Action", valid_21627458
  var valid_21627459 = query.getOrDefault("Version")
  valid_21627459 = validateParameter(valid_21627459, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627459 != nil:
    section.add "Version", valid_21627459
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627460 = header.getOrDefault("X-Amz-Date")
  valid_21627460 = validateParameter(valid_21627460, JString, required = false,
                                   default = nil)
  if valid_21627460 != nil:
    section.add "X-Amz-Date", valid_21627460
  var valid_21627461 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627461 = validateParameter(valid_21627461, JString, required = false,
                                   default = nil)
  if valid_21627461 != nil:
    section.add "X-Amz-Security-Token", valid_21627461
  var valid_21627462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627462 = validateParameter(valid_21627462, JString, required = false,
                                   default = nil)
  if valid_21627462 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627462
  var valid_21627463 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627463 = validateParameter(valid_21627463, JString, required = false,
                                   default = nil)
  if valid_21627463 != nil:
    section.add "X-Amz-Algorithm", valid_21627463
  var valid_21627464 = header.getOrDefault("X-Amz-Signature")
  valid_21627464 = validateParameter(valid_21627464, JString, required = false,
                                   default = nil)
  if valid_21627464 != nil:
    section.add "X-Amz-Signature", valid_21627464
  var valid_21627465 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627465 = validateParameter(valid_21627465, JString, required = false,
                                   default = nil)
  if valid_21627465 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627465
  var valid_21627466 = header.getOrDefault("X-Amz-Credential")
  valid_21627466 = validateParameter(valid_21627466, JString, required = false,
                                   default = nil)
  if valid_21627466 != nil:
    section.add "X-Amz-Credential", valid_21627466
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627467 = formData.getOrDefault("Marker")
  valid_21627467 = validateParameter(valid_21627467, JString, required = false,
                                   default = nil)
  if valid_21627467 != nil:
    section.add "Marker", valid_21627467
  var valid_21627468 = formData.getOrDefault("SubscriptionName")
  valid_21627468 = validateParameter(valid_21627468, JString, required = false,
                                   default = nil)
  if valid_21627468 != nil:
    section.add "SubscriptionName", valid_21627468
  var valid_21627469 = formData.getOrDefault("Filters")
  valid_21627469 = validateParameter(valid_21627469, JArray, required = false,
                                   default = nil)
  if valid_21627469 != nil:
    section.add "Filters", valid_21627469
  var valid_21627470 = formData.getOrDefault("MaxRecords")
  valid_21627470 = validateParameter(valid_21627470, JInt, required = false,
                                   default = nil)
  if valid_21627470 != nil:
    section.add "MaxRecords", valid_21627470
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627471: Call_PostDescribeEventSubscriptions_21627455;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_21627471.validator(path, query, header, formData, body, _)
  let scheme = call_21627471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627471.makeUrl(scheme.get, call_21627471.host, call_21627471.base,
                               call_21627471.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627471, uri, valid, _)

proc call*(call_21627472: Call_PostDescribeEventSubscriptions_21627455;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627473 = newJObject()
  var formData_21627474 = newJObject()
  add(formData_21627474, "Marker", newJString(Marker))
  add(formData_21627474, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627473, "Action", newJString(Action))
  if Filters != nil:
    formData_21627474.add "Filters", Filters
  add(formData_21627474, "MaxRecords", newJInt(MaxRecords))
  add(query_21627473, "Version", newJString(Version))
  result = call_21627472.call(nil, query_21627473, nil, formData_21627474, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_21627455(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_21627456, base: "/",
    makeUrl: url_PostDescribeEventSubscriptions_21627457,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_21627436 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEventSubscriptions_21627438(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_21627437(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627439 = query.getOrDefault("MaxRecords")
  valid_21627439 = validateParameter(valid_21627439, JInt, required = false,
                                   default = nil)
  if valid_21627439 != nil:
    section.add "MaxRecords", valid_21627439
  var valid_21627440 = query.getOrDefault("Filters")
  valid_21627440 = validateParameter(valid_21627440, JArray, required = false,
                                   default = nil)
  if valid_21627440 != nil:
    section.add "Filters", valid_21627440
  var valid_21627441 = query.getOrDefault("Action")
  valid_21627441 = validateParameter(valid_21627441, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_21627441 != nil:
    section.add "Action", valid_21627441
  var valid_21627442 = query.getOrDefault("Marker")
  valid_21627442 = validateParameter(valid_21627442, JString, required = false,
                                   default = nil)
  if valid_21627442 != nil:
    section.add "Marker", valid_21627442
  var valid_21627443 = query.getOrDefault("SubscriptionName")
  valid_21627443 = validateParameter(valid_21627443, JString, required = false,
                                   default = nil)
  if valid_21627443 != nil:
    section.add "SubscriptionName", valid_21627443
  var valid_21627444 = query.getOrDefault("Version")
  valid_21627444 = validateParameter(valid_21627444, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627444 != nil:
    section.add "Version", valid_21627444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627445 = header.getOrDefault("X-Amz-Date")
  valid_21627445 = validateParameter(valid_21627445, JString, required = false,
                                   default = nil)
  if valid_21627445 != nil:
    section.add "X-Amz-Date", valid_21627445
  var valid_21627446 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627446 = validateParameter(valid_21627446, JString, required = false,
                                   default = nil)
  if valid_21627446 != nil:
    section.add "X-Amz-Security-Token", valid_21627446
  var valid_21627447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627447 = validateParameter(valid_21627447, JString, required = false,
                                   default = nil)
  if valid_21627447 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627447
  var valid_21627448 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627448 = validateParameter(valid_21627448, JString, required = false,
                                   default = nil)
  if valid_21627448 != nil:
    section.add "X-Amz-Algorithm", valid_21627448
  var valid_21627449 = header.getOrDefault("X-Amz-Signature")
  valid_21627449 = validateParameter(valid_21627449, JString, required = false,
                                   default = nil)
  if valid_21627449 != nil:
    section.add "X-Amz-Signature", valid_21627449
  var valid_21627450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627450 = validateParameter(valid_21627450, JString, required = false,
                                   default = nil)
  if valid_21627450 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627450
  var valid_21627451 = header.getOrDefault("X-Amz-Credential")
  valid_21627451 = validateParameter(valid_21627451, JString, required = false,
                                   default = nil)
  if valid_21627451 != nil:
    section.add "X-Amz-Credential", valid_21627451
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627452: Call_GetDescribeEventSubscriptions_21627436;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_21627452.validator(path, query, header, formData, body, _)
  let scheme = call_21627452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627452.makeUrl(scheme.get, call_21627452.host, call_21627452.base,
                               call_21627452.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627452, uri, valid, _)

proc call*(call_21627453: Call_GetDescribeEventSubscriptions_21627436;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Version: string (required)
  var query_21627454 = newJObject()
  add(query_21627454, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627454.add "Filters", Filters
  add(query_21627454, "Action", newJString(Action))
  add(query_21627454, "Marker", newJString(Marker))
  add(query_21627454, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627454, "Version", newJString(Version))
  result = call_21627453.call(nil, query_21627454, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_21627436(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_21627437, base: "/",
    makeUrl: url_GetDescribeEventSubscriptions_21627438,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_21627499 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeEvents_21627501(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_21627500(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627502 = query.getOrDefault("Action")
  valid_21627502 = validateParameter(valid_21627502, JString, required = true,
                                   default = newJString("DescribeEvents"))
  if valid_21627502 != nil:
    section.add "Action", valid_21627502
  var valid_21627503 = query.getOrDefault("Version")
  valid_21627503 = validateParameter(valid_21627503, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627503 != nil:
    section.add "Version", valid_21627503
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627504 = header.getOrDefault("X-Amz-Date")
  valid_21627504 = validateParameter(valid_21627504, JString, required = false,
                                   default = nil)
  if valid_21627504 != nil:
    section.add "X-Amz-Date", valid_21627504
  var valid_21627505 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627505 = validateParameter(valid_21627505, JString, required = false,
                                   default = nil)
  if valid_21627505 != nil:
    section.add "X-Amz-Security-Token", valid_21627505
  var valid_21627506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627506 = validateParameter(valid_21627506, JString, required = false,
                                   default = nil)
  if valid_21627506 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627506
  var valid_21627507 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627507 = validateParameter(valid_21627507, JString, required = false,
                                   default = nil)
  if valid_21627507 != nil:
    section.add "X-Amz-Algorithm", valid_21627507
  var valid_21627508 = header.getOrDefault("X-Amz-Signature")
  valid_21627508 = validateParameter(valid_21627508, JString, required = false,
                                   default = nil)
  if valid_21627508 != nil:
    section.add "X-Amz-Signature", valid_21627508
  var valid_21627509 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627509 = validateParameter(valid_21627509, JString, required = false,
                                   default = nil)
  if valid_21627509 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627509
  var valid_21627510 = header.getOrDefault("X-Amz-Credential")
  valid_21627510 = validateParameter(valid_21627510, JString, required = false,
                                   default = nil)
  if valid_21627510 != nil:
    section.add "X-Amz-Credential", valid_21627510
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_21627511 = formData.getOrDefault("SourceIdentifier")
  valid_21627511 = validateParameter(valid_21627511, JString, required = false,
                                   default = nil)
  if valid_21627511 != nil:
    section.add "SourceIdentifier", valid_21627511
  var valid_21627512 = formData.getOrDefault("EventCategories")
  valid_21627512 = validateParameter(valid_21627512, JArray, required = false,
                                   default = nil)
  if valid_21627512 != nil:
    section.add "EventCategories", valid_21627512
  var valid_21627513 = formData.getOrDefault("Marker")
  valid_21627513 = validateParameter(valid_21627513, JString, required = false,
                                   default = nil)
  if valid_21627513 != nil:
    section.add "Marker", valid_21627513
  var valid_21627514 = formData.getOrDefault("StartTime")
  valid_21627514 = validateParameter(valid_21627514, JString, required = false,
                                   default = nil)
  if valid_21627514 != nil:
    section.add "StartTime", valid_21627514
  var valid_21627515 = formData.getOrDefault("Duration")
  valid_21627515 = validateParameter(valid_21627515, JInt, required = false,
                                   default = nil)
  if valid_21627515 != nil:
    section.add "Duration", valid_21627515
  var valid_21627516 = formData.getOrDefault("Filters")
  valid_21627516 = validateParameter(valid_21627516, JArray, required = false,
                                   default = nil)
  if valid_21627516 != nil:
    section.add "Filters", valid_21627516
  var valid_21627517 = formData.getOrDefault("EndTime")
  valid_21627517 = validateParameter(valid_21627517, JString, required = false,
                                   default = nil)
  if valid_21627517 != nil:
    section.add "EndTime", valid_21627517
  var valid_21627518 = formData.getOrDefault("MaxRecords")
  valid_21627518 = validateParameter(valid_21627518, JInt, required = false,
                                   default = nil)
  if valid_21627518 != nil:
    section.add "MaxRecords", valid_21627518
  var valid_21627519 = formData.getOrDefault("SourceType")
  valid_21627519 = validateParameter(valid_21627519, JString, required = false,
                                   default = newJString("db-instance"))
  if valid_21627519 != nil:
    section.add "SourceType", valid_21627519
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627520: Call_PostDescribeEvents_21627499; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_21627520.validator(path, query, header, formData, body, _)
  let scheme = call_21627520.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627520.makeUrl(scheme.get, call_21627520.host, call_21627520.base,
                               call_21627520.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627520, uri, valid, _)

proc call*(call_21627521: Call_PostDescribeEvents_21627499;
          SourceIdentifier: string = ""; EventCategories: JsonNode = nil;
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2014-10-31";
          SourceType: string = "db-instance"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_21627522 = newJObject()
  var formData_21627523 = newJObject()
  add(formData_21627523, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    formData_21627523.add "EventCategories", EventCategories
  add(formData_21627523, "Marker", newJString(Marker))
  add(formData_21627523, "StartTime", newJString(StartTime))
  add(query_21627522, "Action", newJString(Action))
  add(formData_21627523, "Duration", newJInt(Duration))
  if Filters != nil:
    formData_21627523.add "Filters", Filters
  add(formData_21627523, "EndTime", newJString(EndTime))
  add(formData_21627523, "MaxRecords", newJInt(MaxRecords))
  add(query_21627522, "Version", newJString(Version))
  add(formData_21627523, "SourceType", newJString(SourceType))
  result = call_21627521.call(nil, query_21627522, nil, formData_21627523, nil)

var postDescribeEvents* = Call_PostDescribeEvents_21627499(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_21627500, base: "/",
    makeUrl: url_PostDescribeEvents_21627501, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_21627475 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeEvents_21627477(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_21627476(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627478 = query.getOrDefault("SourceType")
  valid_21627478 = validateParameter(valid_21627478, JString, required = false,
                                   default = newJString("db-instance"))
  if valid_21627478 != nil:
    section.add "SourceType", valid_21627478
  var valid_21627479 = query.getOrDefault("MaxRecords")
  valid_21627479 = validateParameter(valid_21627479, JInt, required = false,
                                   default = nil)
  if valid_21627479 != nil:
    section.add "MaxRecords", valid_21627479
  var valid_21627480 = query.getOrDefault("StartTime")
  valid_21627480 = validateParameter(valid_21627480, JString, required = false,
                                   default = nil)
  if valid_21627480 != nil:
    section.add "StartTime", valid_21627480
  var valid_21627481 = query.getOrDefault("Filters")
  valid_21627481 = validateParameter(valid_21627481, JArray, required = false,
                                   default = nil)
  if valid_21627481 != nil:
    section.add "Filters", valid_21627481
  var valid_21627482 = query.getOrDefault("Action")
  valid_21627482 = validateParameter(valid_21627482, JString, required = true,
                                   default = newJString("DescribeEvents"))
  if valid_21627482 != nil:
    section.add "Action", valid_21627482
  var valid_21627483 = query.getOrDefault("SourceIdentifier")
  valid_21627483 = validateParameter(valid_21627483, JString, required = false,
                                   default = nil)
  if valid_21627483 != nil:
    section.add "SourceIdentifier", valid_21627483
  var valid_21627484 = query.getOrDefault("Marker")
  valid_21627484 = validateParameter(valid_21627484, JString, required = false,
                                   default = nil)
  if valid_21627484 != nil:
    section.add "Marker", valid_21627484
  var valid_21627485 = query.getOrDefault("EventCategories")
  valid_21627485 = validateParameter(valid_21627485, JArray, required = false,
                                   default = nil)
  if valid_21627485 != nil:
    section.add "EventCategories", valid_21627485
  var valid_21627486 = query.getOrDefault("Duration")
  valid_21627486 = validateParameter(valid_21627486, JInt, required = false,
                                   default = nil)
  if valid_21627486 != nil:
    section.add "Duration", valid_21627486
  var valid_21627487 = query.getOrDefault("EndTime")
  valid_21627487 = validateParameter(valid_21627487, JString, required = false,
                                   default = nil)
  if valid_21627487 != nil:
    section.add "EndTime", valid_21627487
  var valid_21627488 = query.getOrDefault("Version")
  valid_21627488 = validateParameter(valid_21627488, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627488 != nil:
    section.add "Version", valid_21627488
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627489 = header.getOrDefault("X-Amz-Date")
  valid_21627489 = validateParameter(valid_21627489, JString, required = false,
                                   default = nil)
  if valid_21627489 != nil:
    section.add "X-Amz-Date", valid_21627489
  var valid_21627490 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627490 = validateParameter(valid_21627490, JString, required = false,
                                   default = nil)
  if valid_21627490 != nil:
    section.add "X-Amz-Security-Token", valid_21627490
  var valid_21627491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627491 = validateParameter(valid_21627491, JString, required = false,
                                   default = nil)
  if valid_21627491 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627491
  var valid_21627492 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627492 = validateParameter(valid_21627492, JString, required = false,
                                   default = nil)
  if valid_21627492 != nil:
    section.add "X-Amz-Algorithm", valid_21627492
  var valid_21627493 = header.getOrDefault("X-Amz-Signature")
  valid_21627493 = validateParameter(valid_21627493, JString, required = false,
                                   default = nil)
  if valid_21627493 != nil:
    section.add "X-Amz-Signature", valid_21627493
  var valid_21627494 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627494 = validateParameter(valid_21627494, JString, required = false,
                                   default = nil)
  if valid_21627494 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627494
  var valid_21627495 = header.getOrDefault("X-Amz-Credential")
  valid_21627495 = validateParameter(valid_21627495, JString, required = false,
                                   default = nil)
  if valid_21627495 != nil:
    section.add "X-Amz-Credential", valid_21627495
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627496: Call_GetDescribeEvents_21627475; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_21627496.validator(path, query, header, formData, body, _)
  let scheme = call_21627496.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627496.makeUrl(scheme.get, call_21627496.host, call_21627496.base,
                               call_21627496.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627496, uri, valid, _)

proc call*(call_21627497: Call_GetDescribeEvents_21627475;
          SourceType: string = "db-instance"; MaxRecords: int = 0;
          StartTime: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; EventCategories: JsonNode = nil; Duration: int = 0;
          EndTime: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  var query_21627498 = newJObject()
  add(query_21627498, "SourceType", newJString(SourceType))
  add(query_21627498, "MaxRecords", newJInt(MaxRecords))
  add(query_21627498, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_21627498.add "Filters", Filters
  add(query_21627498, "Action", newJString(Action))
  add(query_21627498, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21627498, "Marker", newJString(Marker))
  if EventCategories != nil:
    query_21627498.add "EventCategories", EventCategories
  add(query_21627498, "Duration", newJInt(Duration))
  add(query_21627498, "EndTime", newJString(EndTime))
  add(query_21627498, "Version", newJString(Version))
  result = call_21627497.call(nil, query_21627498, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_21627475(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_21627476,
    base: "/", makeUrl: url_GetDescribeEvents_21627477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_21627547 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeOrderableDBInstanceOptions_21627549(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_21627548(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627550 = query.getOrDefault("Action")
  valid_21627550 = validateParameter(valid_21627550, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_21627550 != nil:
    section.add "Action", valid_21627550
  var valid_21627551 = query.getOrDefault("Version")
  valid_21627551 = validateParameter(valid_21627551, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627551 != nil:
    section.add "Version", valid_21627551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627552 = header.getOrDefault("X-Amz-Date")
  valid_21627552 = validateParameter(valid_21627552, JString, required = false,
                                   default = nil)
  if valid_21627552 != nil:
    section.add "X-Amz-Date", valid_21627552
  var valid_21627553 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627553 = validateParameter(valid_21627553, JString, required = false,
                                   default = nil)
  if valid_21627553 != nil:
    section.add "X-Amz-Security-Token", valid_21627553
  var valid_21627554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627554 = validateParameter(valid_21627554, JString, required = false,
                                   default = nil)
  if valid_21627554 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627554
  var valid_21627555 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627555 = validateParameter(valid_21627555, JString, required = false,
                                   default = nil)
  if valid_21627555 != nil:
    section.add "X-Amz-Algorithm", valid_21627555
  var valid_21627556 = header.getOrDefault("X-Amz-Signature")
  valid_21627556 = validateParameter(valid_21627556, JString, required = false,
                                   default = nil)
  if valid_21627556 != nil:
    section.add "X-Amz-Signature", valid_21627556
  var valid_21627557 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627557 = validateParameter(valid_21627557, JString, required = false,
                                   default = nil)
  if valid_21627557 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627557
  var valid_21627558 = header.getOrDefault("X-Amz-Credential")
  valid_21627558 = validateParameter(valid_21627558, JString, required = false,
                                   default = nil)
  if valid_21627558 != nil:
    section.add "X-Amz-Credential", valid_21627558
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21627559 = formData.getOrDefault("Engine")
  valid_21627559 = validateParameter(valid_21627559, JString, required = true,
                                   default = nil)
  if valid_21627559 != nil:
    section.add "Engine", valid_21627559
  var valid_21627560 = formData.getOrDefault("Marker")
  valid_21627560 = validateParameter(valid_21627560, JString, required = false,
                                   default = nil)
  if valid_21627560 != nil:
    section.add "Marker", valid_21627560
  var valid_21627561 = formData.getOrDefault("Vpc")
  valid_21627561 = validateParameter(valid_21627561, JBool, required = false,
                                   default = nil)
  if valid_21627561 != nil:
    section.add "Vpc", valid_21627561
  var valid_21627562 = formData.getOrDefault("DBInstanceClass")
  valid_21627562 = validateParameter(valid_21627562, JString, required = false,
                                   default = nil)
  if valid_21627562 != nil:
    section.add "DBInstanceClass", valid_21627562
  var valid_21627563 = formData.getOrDefault("Filters")
  valid_21627563 = validateParameter(valid_21627563, JArray, required = false,
                                   default = nil)
  if valid_21627563 != nil:
    section.add "Filters", valid_21627563
  var valid_21627564 = formData.getOrDefault("LicenseModel")
  valid_21627564 = validateParameter(valid_21627564, JString, required = false,
                                   default = nil)
  if valid_21627564 != nil:
    section.add "LicenseModel", valid_21627564
  var valid_21627565 = formData.getOrDefault("MaxRecords")
  valid_21627565 = validateParameter(valid_21627565, JInt, required = false,
                                   default = nil)
  if valid_21627565 != nil:
    section.add "MaxRecords", valid_21627565
  var valid_21627566 = formData.getOrDefault("EngineVersion")
  valid_21627566 = validateParameter(valid_21627566, JString, required = false,
                                   default = nil)
  if valid_21627566 != nil:
    section.add "EngineVersion", valid_21627566
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627567: Call_PostDescribeOrderableDBInstanceOptions_21627547;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_21627567.validator(path, query, header, formData, body, _)
  let scheme = call_21627567.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627567.makeUrl(scheme.get, call_21627567.host, call_21627567.base,
                               call_21627567.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627567, uri, valid, _)

proc call*(call_21627568: Call_PostDescribeOrderableDBInstanceOptions_21627547;
          Engine: string; Marker: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions"; Vpc: bool = false;
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          LicenseModel: string = ""; MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Action: string (required)
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_21627569 = newJObject()
  var formData_21627570 = newJObject()
  add(formData_21627570, "Engine", newJString(Engine))
  add(formData_21627570, "Marker", newJString(Marker))
  add(query_21627569, "Action", newJString(Action))
  add(formData_21627570, "Vpc", newJBool(Vpc))
  add(formData_21627570, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_21627570.add "Filters", Filters
  add(formData_21627570, "LicenseModel", newJString(LicenseModel))
  add(formData_21627570, "MaxRecords", newJInt(MaxRecords))
  add(formData_21627570, "EngineVersion", newJString(EngineVersion))
  add(query_21627569, "Version", newJString(Version))
  result = call_21627568.call(nil, query_21627569, nil, formData_21627570, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_21627547(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_21627548,
    base: "/", makeUrl: url_PostDescribeOrderableDBInstanceOptions_21627549,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_21627524 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeOrderableDBInstanceOptions_21627526(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_21627525(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21627527 = query.getOrDefault("Engine")
  valid_21627527 = validateParameter(valid_21627527, JString, required = true,
                                   default = nil)
  if valid_21627527 != nil:
    section.add "Engine", valid_21627527
  var valid_21627528 = query.getOrDefault("MaxRecords")
  valid_21627528 = validateParameter(valid_21627528, JInt, required = false,
                                   default = nil)
  if valid_21627528 != nil:
    section.add "MaxRecords", valid_21627528
  var valid_21627529 = query.getOrDefault("Filters")
  valid_21627529 = validateParameter(valid_21627529, JArray, required = false,
                                   default = nil)
  if valid_21627529 != nil:
    section.add "Filters", valid_21627529
  var valid_21627530 = query.getOrDefault("LicenseModel")
  valid_21627530 = validateParameter(valid_21627530, JString, required = false,
                                   default = nil)
  if valid_21627530 != nil:
    section.add "LicenseModel", valid_21627530
  var valid_21627531 = query.getOrDefault("Vpc")
  valid_21627531 = validateParameter(valid_21627531, JBool, required = false,
                                   default = nil)
  if valid_21627531 != nil:
    section.add "Vpc", valid_21627531
  var valid_21627532 = query.getOrDefault("DBInstanceClass")
  valid_21627532 = validateParameter(valid_21627532, JString, required = false,
                                   default = nil)
  if valid_21627532 != nil:
    section.add "DBInstanceClass", valid_21627532
  var valid_21627533 = query.getOrDefault("Action")
  valid_21627533 = validateParameter(valid_21627533, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_21627533 != nil:
    section.add "Action", valid_21627533
  var valid_21627534 = query.getOrDefault("Marker")
  valid_21627534 = validateParameter(valid_21627534, JString, required = false,
                                   default = nil)
  if valid_21627534 != nil:
    section.add "Marker", valid_21627534
  var valid_21627535 = query.getOrDefault("EngineVersion")
  valid_21627535 = validateParameter(valid_21627535, JString, required = false,
                                   default = nil)
  if valid_21627535 != nil:
    section.add "EngineVersion", valid_21627535
  var valid_21627536 = query.getOrDefault("Version")
  valid_21627536 = validateParameter(valid_21627536, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627536 != nil:
    section.add "Version", valid_21627536
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627537 = header.getOrDefault("X-Amz-Date")
  valid_21627537 = validateParameter(valid_21627537, JString, required = false,
                                   default = nil)
  if valid_21627537 != nil:
    section.add "X-Amz-Date", valid_21627537
  var valid_21627538 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627538 = validateParameter(valid_21627538, JString, required = false,
                                   default = nil)
  if valid_21627538 != nil:
    section.add "X-Amz-Security-Token", valid_21627538
  var valid_21627539 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627539 = validateParameter(valid_21627539, JString, required = false,
                                   default = nil)
  if valid_21627539 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627539
  var valid_21627540 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627540 = validateParameter(valid_21627540, JString, required = false,
                                   default = nil)
  if valid_21627540 != nil:
    section.add "X-Amz-Algorithm", valid_21627540
  var valid_21627541 = header.getOrDefault("X-Amz-Signature")
  valid_21627541 = validateParameter(valid_21627541, JString, required = false,
                                   default = nil)
  if valid_21627541 != nil:
    section.add "X-Amz-Signature", valid_21627541
  var valid_21627542 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627542 = validateParameter(valid_21627542, JString, required = false,
                                   default = nil)
  if valid_21627542 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627542
  var valid_21627543 = header.getOrDefault("X-Amz-Credential")
  valid_21627543 = validateParameter(valid_21627543, JString, required = false,
                                   default = nil)
  if valid_21627543 != nil:
    section.add "X-Amz-Credential", valid_21627543
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627544: Call_GetDescribeOrderableDBInstanceOptions_21627524;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_21627544.validator(path, query, header, formData, body, _)
  let scheme = call_21627544.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627544.makeUrl(scheme.get, call_21627544.host, call_21627544.base,
                               call_21627544.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627544, uri, valid, _)

proc call*(call_21627545: Call_GetDescribeOrderableDBInstanceOptions_21627524;
          Engine: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          LicenseModel: string = ""; Vpc: bool = false; DBInstanceClass: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Marker: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_21627546 = newJObject()
  add(query_21627546, "Engine", newJString(Engine))
  add(query_21627546, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627546.add "Filters", Filters
  add(query_21627546, "LicenseModel", newJString(LicenseModel))
  add(query_21627546, "Vpc", newJBool(Vpc))
  add(query_21627546, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21627546, "Action", newJString(Action))
  add(query_21627546, "Marker", newJString(Marker))
  add(query_21627546, "EngineVersion", newJString(EngineVersion))
  add(query_21627546, "Version", newJString(Version))
  result = call_21627545.call(nil, query_21627546, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_21627524(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_21627525, base: "/",
    makeUrl: url_GetDescribeOrderableDBInstanceOptions_21627526,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_21627590 = ref object of OpenApiRestCall_21625418
proc url_PostDescribePendingMaintenanceActions_21627592(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_21627591(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627593 = query.getOrDefault("Action")
  valid_21627593 = validateParameter(valid_21627593, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_21627593 != nil:
    section.add "Action", valid_21627593
  var valid_21627594 = query.getOrDefault("Version")
  valid_21627594 = validateParameter(valid_21627594, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627594 != nil:
    section.add "Version", valid_21627594
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627595 = header.getOrDefault("X-Amz-Date")
  valid_21627595 = validateParameter(valid_21627595, JString, required = false,
                                   default = nil)
  if valid_21627595 != nil:
    section.add "X-Amz-Date", valid_21627595
  var valid_21627596 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627596 = validateParameter(valid_21627596, JString, required = false,
                                   default = nil)
  if valid_21627596 != nil:
    section.add "X-Amz-Security-Token", valid_21627596
  var valid_21627597 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627597 = validateParameter(valid_21627597, JString, required = false,
                                   default = nil)
  if valid_21627597 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627597
  var valid_21627598 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627598 = validateParameter(valid_21627598, JString, required = false,
                                   default = nil)
  if valid_21627598 != nil:
    section.add "X-Amz-Algorithm", valid_21627598
  var valid_21627599 = header.getOrDefault("X-Amz-Signature")
  valid_21627599 = validateParameter(valid_21627599, JString, required = false,
                                   default = nil)
  if valid_21627599 != nil:
    section.add "X-Amz-Signature", valid_21627599
  var valid_21627600 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627600 = validateParameter(valid_21627600, JString, required = false,
                                   default = nil)
  if valid_21627600 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627600
  var valid_21627601 = header.getOrDefault("X-Amz-Credential")
  valid_21627601 = validateParameter(valid_21627601, JString, required = false,
                                   default = nil)
  if valid_21627601 != nil:
    section.add "X-Amz-Credential", valid_21627601
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627602 = formData.getOrDefault("Marker")
  valid_21627602 = validateParameter(valid_21627602, JString, required = false,
                                   default = nil)
  if valid_21627602 != nil:
    section.add "Marker", valid_21627602
  var valid_21627603 = formData.getOrDefault("ResourceIdentifier")
  valid_21627603 = validateParameter(valid_21627603, JString, required = false,
                                   default = nil)
  if valid_21627603 != nil:
    section.add "ResourceIdentifier", valid_21627603
  var valid_21627604 = formData.getOrDefault("Filters")
  valid_21627604 = validateParameter(valid_21627604, JArray, required = false,
                                   default = nil)
  if valid_21627604 != nil:
    section.add "Filters", valid_21627604
  var valid_21627605 = formData.getOrDefault("MaxRecords")
  valid_21627605 = validateParameter(valid_21627605, JInt, required = false,
                                   default = nil)
  if valid_21627605 != nil:
    section.add "MaxRecords", valid_21627605
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627606: Call_PostDescribePendingMaintenanceActions_21627590;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_21627606.validator(path, query, header, formData, body, _)
  let scheme = call_21627606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627606.makeUrl(scheme.get, call_21627606.host, call_21627606.base,
                               call_21627606.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627606, uri, valid, _)

proc call*(call_21627607: Call_PostDescribePendingMaintenanceActions_21627590;
          Marker: string = ""; Action: string = "DescribePendingMaintenanceActions";
          ResourceIdentifier: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627608 = newJObject()
  var formData_21627609 = newJObject()
  add(formData_21627609, "Marker", newJString(Marker))
  add(query_21627608, "Action", newJString(Action))
  add(formData_21627609, "ResourceIdentifier", newJString(ResourceIdentifier))
  if Filters != nil:
    formData_21627609.add "Filters", Filters
  add(formData_21627609, "MaxRecords", newJInt(MaxRecords))
  add(query_21627608, "Version", newJString(Version))
  result = call_21627607.call(nil, query_21627608, nil, formData_21627609, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_21627590(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_21627591, base: "/",
    makeUrl: url_PostDescribePendingMaintenanceActions_21627592,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_21627571 = ref object of OpenApiRestCall_21625418
proc url_GetDescribePendingMaintenanceActions_21627573(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_21627572(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627574 = query.getOrDefault("MaxRecords")
  valid_21627574 = validateParameter(valid_21627574, JInt, required = false,
                                   default = nil)
  if valid_21627574 != nil:
    section.add "MaxRecords", valid_21627574
  var valid_21627575 = query.getOrDefault("Filters")
  valid_21627575 = validateParameter(valid_21627575, JArray, required = false,
                                   default = nil)
  if valid_21627575 != nil:
    section.add "Filters", valid_21627575
  var valid_21627576 = query.getOrDefault("ResourceIdentifier")
  valid_21627576 = validateParameter(valid_21627576, JString, required = false,
                                   default = nil)
  if valid_21627576 != nil:
    section.add "ResourceIdentifier", valid_21627576
  var valid_21627577 = query.getOrDefault("Action")
  valid_21627577 = validateParameter(valid_21627577, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_21627577 != nil:
    section.add "Action", valid_21627577
  var valid_21627578 = query.getOrDefault("Marker")
  valid_21627578 = validateParameter(valid_21627578, JString, required = false,
                                   default = nil)
  if valid_21627578 != nil:
    section.add "Marker", valid_21627578
  var valid_21627579 = query.getOrDefault("Version")
  valid_21627579 = validateParameter(valid_21627579, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627579 != nil:
    section.add "Version", valid_21627579
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627580 = header.getOrDefault("X-Amz-Date")
  valid_21627580 = validateParameter(valid_21627580, JString, required = false,
                                   default = nil)
  if valid_21627580 != nil:
    section.add "X-Amz-Date", valid_21627580
  var valid_21627581 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627581 = validateParameter(valid_21627581, JString, required = false,
                                   default = nil)
  if valid_21627581 != nil:
    section.add "X-Amz-Security-Token", valid_21627581
  var valid_21627582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627582 = validateParameter(valid_21627582, JString, required = false,
                                   default = nil)
  if valid_21627582 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627582
  var valid_21627583 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627583 = validateParameter(valid_21627583, JString, required = false,
                                   default = nil)
  if valid_21627583 != nil:
    section.add "X-Amz-Algorithm", valid_21627583
  var valid_21627584 = header.getOrDefault("X-Amz-Signature")
  valid_21627584 = validateParameter(valid_21627584, JString, required = false,
                                   default = nil)
  if valid_21627584 != nil:
    section.add "X-Amz-Signature", valid_21627584
  var valid_21627585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627585 = validateParameter(valid_21627585, JString, required = false,
                                   default = nil)
  if valid_21627585 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627585
  var valid_21627586 = header.getOrDefault("X-Amz-Credential")
  valid_21627586 = validateParameter(valid_21627586, JString, required = false,
                                   default = nil)
  if valid_21627586 != nil:
    section.add "X-Amz-Credential", valid_21627586
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627587: Call_GetDescribePendingMaintenanceActions_21627571;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_21627587.validator(path, query, header, formData, body, _)
  let scheme = call_21627587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627587.makeUrl(scheme.get, call_21627587.host, call_21627587.base,
                               call_21627587.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627587, uri, valid, _)

proc call*(call_21627588: Call_GetDescribePendingMaintenanceActions_21627571;
          MaxRecords: int = 0; Filters: JsonNode = nil; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21627589 = newJObject()
  add(query_21627589, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21627589.add "Filters", Filters
  add(query_21627589, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_21627589, "Action", newJString(Action))
  add(query_21627589, "Marker", newJString(Marker))
  add(query_21627589, "Version", newJString(Version))
  result = call_21627588.call(nil, query_21627589, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_21627571(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_21627572, base: "/",
    makeUrl: url_GetDescribePendingMaintenanceActions_21627573,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_21627626 = ref object of OpenApiRestCall_21625418
proc url_PostDescribeValidDBInstanceModifications_21627628(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_21627627(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627629 = query.getOrDefault("Action")
  valid_21627629 = validateParameter(valid_21627629, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_21627629 != nil:
    section.add "Action", valid_21627629
  var valid_21627630 = query.getOrDefault("Version")
  valid_21627630 = validateParameter(valid_21627630, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627630 != nil:
    section.add "Version", valid_21627630
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627631 = header.getOrDefault("X-Amz-Date")
  valid_21627631 = validateParameter(valid_21627631, JString, required = false,
                                   default = nil)
  if valid_21627631 != nil:
    section.add "X-Amz-Date", valid_21627631
  var valid_21627632 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627632 = validateParameter(valid_21627632, JString, required = false,
                                   default = nil)
  if valid_21627632 != nil:
    section.add "X-Amz-Security-Token", valid_21627632
  var valid_21627633 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627633 = validateParameter(valid_21627633, JString, required = false,
                                   default = nil)
  if valid_21627633 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627633
  var valid_21627634 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627634 = validateParameter(valid_21627634, JString, required = false,
                                   default = nil)
  if valid_21627634 != nil:
    section.add "X-Amz-Algorithm", valid_21627634
  var valid_21627635 = header.getOrDefault("X-Amz-Signature")
  valid_21627635 = validateParameter(valid_21627635, JString, required = false,
                                   default = nil)
  if valid_21627635 != nil:
    section.add "X-Amz-Signature", valid_21627635
  var valid_21627636 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627636 = validateParameter(valid_21627636, JString, required = false,
                                   default = nil)
  if valid_21627636 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627636
  var valid_21627637 = header.getOrDefault("X-Amz-Credential")
  valid_21627637 = validateParameter(valid_21627637, JString, required = false,
                                   default = nil)
  if valid_21627637 != nil:
    section.add "X-Amz-Credential", valid_21627637
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21627638 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21627638 = validateParameter(valid_21627638, JString, required = true,
                                   default = nil)
  if valid_21627638 != nil:
    section.add "DBInstanceIdentifier", valid_21627638
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627639: Call_PostDescribeValidDBInstanceModifications_21627626;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_21627639.validator(path, query, header, formData, body, _)
  let scheme = call_21627639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627639.makeUrl(scheme.get, call_21627639.host, call_21627639.base,
                               call_21627639.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627639, uri, valid, _)

proc call*(call_21627640: Call_PostDescribeValidDBInstanceModifications_21627626;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627641 = newJObject()
  var formData_21627642 = newJObject()
  add(formData_21627642, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21627641, "Action", newJString(Action))
  add(query_21627641, "Version", newJString(Version))
  result = call_21627640.call(nil, query_21627641, nil, formData_21627642, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_21627626(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_21627627,
    base: "/", makeUrl: url_PostDescribeValidDBInstanceModifications_21627628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_21627610 = ref object of OpenApiRestCall_21625418
proc url_GetDescribeValidDBInstanceModifications_21627612(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_21627611(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  var valid_21627613 = query.getOrDefault("Action")
  valid_21627613 = validateParameter(valid_21627613, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_21627613 != nil:
    section.add "Action", valid_21627613
  var valid_21627614 = query.getOrDefault("Version")
  valid_21627614 = validateParameter(valid_21627614, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627614 != nil:
    section.add "Version", valid_21627614
  var valid_21627615 = query.getOrDefault("DBInstanceIdentifier")
  valid_21627615 = validateParameter(valid_21627615, JString, required = true,
                                   default = nil)
  if valid_21627615 != nil:
    section.add "DBInstanceIdentifier", valid_21627615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627616 = header.getOrDefault("X-Amz-Date")
  valid_21627616 = validateParameter(valid_21627616, JString, required = false,
                                   default = nil)
  if valid_21627616 != nil:
    section.add "X-Amz-Date", valid_21627616
  var valid_21627617 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627617 = validateParameter(valid_21627617, JString, required = false,
                                   default = nil)
  if valid_21627617 != nil:
    section.add "X-Amz-Security-Token", valid_21627617
  var valid_21627618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627618 = validateParameter(valid_21627618, JString, required = false,
                                   default = nil)
  if valid_21627618 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627618
  var valid_21627619 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627619 = validateParameter(valid_21627619, JString, required = false,
                                   default = nil)
  if valid_21627619 != nil:
    section.add "X-Amz-Algorithm", valid_21627619
  var valid_21627620 = header.getOrDefault("X-Amz-Signature")
  valid_21627620 = validateParameter(valid_21627620, JString, required = false,
                                   default = nil)
  if valid_21627620 != nil:
    section.add "X-Amz-Signature", valid_21627620
  var valid_21627621 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627621 = validateParameter(valid_21627621, JString, required = false,
                                   default = nil)
  if valid_21627621 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627621
  var valid_21627622 = header.getOrDefault("X-Amz-Credential")
  valid_21627622 = validateParameter(valid_21627622, JString, required = false,
                                   default = nil)
  if valid_21627622 != nil:
    section.add "X-Amz-Credential", valid_21627622
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627623: Call_GetDescribeValidDBInstanceModifications_21627610;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_21627623.validator(path, query, header, formData, body, _)
  let scheme = call_21627623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627623.makeUrl(scheme.get, call_21627623.host, call_21627623.base,
                               call_21627623.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627623, uri, valid, _)

proc call*(call_21627624: Call_GetDescribeValidDBInstanceModifications_21627610;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  var query_21627625 = newJObject()
  add(query_21627625, "Action", newJString(Action))
  add(query_21627625, "Version", newJString(Version))
  add(query_21627625, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21627624.call(nil, query_21627625, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_21627610(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_21627611,
    base: "/", makeUrl: url_GetDescribeValidDBInstanceModifications_21627612,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_21627660 = ref object of OpenApiRestCall_21625418
proc url_PostFailoverDBCluster_21627662(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_21627661(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627663 = query.getOrDefault("Action")
  valid_21627663 = validateParameter(valid_21627663, JString, required = true,
                                   default = newJString("FailoverDBCluster"))
  if valid_21627663 != nil:
    section.add "Action", valid_21627663
  var valid_21627664 = query.getOrDefault("Version")
  valid_21627664 = validateParameter(valid_21627664, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627664 != nil:
    section.add "Version", valid_21627664
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627665 = header.getOrDefault("X-Amz-Date")
  valid_21627665 = validateParameter(valid_21627665, JString, required = false,
                                   default = nil)
  if valid_21627665 != nil:
    section.add "X-Amz-Date", valid_21627665
  var valid_21627666 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627666 = validateParameter(valid_21627666, JString, required = false,
                                   default = nil)
  if valid_21627666 != nil:
    section.add "X-Amz-Security-Token", valid_21627666
  var valid_21627667 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627667 = validateParameter(valid_21627667, JString, required = false,
                                   default = nil)
  if valid_21627667 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627667
  var valid_21627668 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627668 = validateParameter(valid_21627668, JString, required = false,
                                   default = nil)
  if valid_21627668 != nil:
    section.add "X-Amz-Algorithm", valid_21627668
  var valid_21627669 = header.getOrDefault("X-Amz-Signature")
  valid_21627669 = validateParameter(valid_21627669, JString, required = false,
                                   default = nil)
  if valid_21627669 != nil:
    section.add "X-Amz-Signature", valid_21627669
  var valid_21627670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627670 = validateParameter(valid_21627670, JString, required = false,
                                   default = nil)
  if valid_21627670 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627670
  var valid_21627671 = header.getOrDefault("X-Amz-Credential")
  valid_21627671 = validateParameter(valid_21627671, JString, required = false,
                                   default = nil)
  if valid_21627671 != nil:
    section.add "X-Amz-Credential", valid_21627671
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_21627672 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_21627672 = validateParameter(valid_21627672, JString, required = false,
                                   default = nil)
  if valid_21627672 != nil:
    section.add "TargetDBInstanceIdentifier", valid_21627672
  var valid_21627673 = formData.getOrDefault("DBClusterIdentifier")
  valid_21627673 = validateParameter(valid_21627673, JString, required = false,
                                   default = nil)
  if valid_21627673 != nil:
    section.add "DBClusterIdentifier", valid_21627673
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627674: Call_PostFailoverDBCluster_21627660;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_21627674.validator(path, query, header, formData, body, _)
  let scheme = call_21627674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627674.makeUrl(scheme.get, call_21627674.host, call_21627674.base,
                               call_21627674.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627674, uri, valid, _)

proc call*(call_21627675: Call_PostFailoverDBCluster_21627660;
          Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21627676 = newJObject()
  var formData_21627677 = newJObject()
  add(query_21627676, "Action", newJString(Action))
  add(formData_21627677, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_21627677, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627676, "Version", newJString(Version))
  result = call_21627675.call(nil, query_21627676, nil, formData_21627677, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_21627660(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_21627661, base: "/",
    makeUrl: url_PostFailoverDBCluster_21627662,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_21627643 = ref object of OpenApiRestCall_21625418
proc url_GetFailoverDBCluster_21627645(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_21627644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627646 = query.getOrDefault("DBClusterIdentifier")
  valid_21627646 = validateParameter(valid_21627646, JString, required = false,
                                   default = nil)
  if valid_21627646 != nil:
    section.add "DBClusterIdentifier", valid_21627646
  var valid_21627647 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_21627647 = validateParameter(valid_21627647, JString, required = false,
                                   default = nil)
  if valid_21627647 != nil:
    section.add "TargetDBInstanceIdentifier", valid_21627647
  var valid_21627648 = query.getOrDefault("Action")
  valid_21627648 = validateParameter(valid_21627648, JString, required = true,
                                   default = newJString("FailoverDBCluster"))
  if valid_21627648 != nil:
    section.add "Action", valid_21627648
  var valid_21627649 = query.getOrDefault("Version")
  valid_21627649 = validateParameter(valid_21627649, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627649 != nil:
    section.add "Version", valid_21627649
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627650 = header.getOrDefault("X-Amz-Date")
  valid_21627650 = validateParameter(valid_21627650, JString, required = false,
                                   default = nil)
  if valid_21627650 != nil:
    section.add "X-Amz-Date", valid_21627650
  var valid_21627651 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627651 = validateParameter(valid_21627651, JString, required = false,
                                   default = nil)
  if valid_21627651 != nil:
    section.add "X-Amz-Security-Token", valid_21627651
  var valid_21627652 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627652 = validateParameter(valid_21627652, JString, required = false,
                                   default = nil)
  if valid_21627652 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627652
  var valid_21627653 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627653 = validateParameter(valid_21627653, JString, required = false,
                                   default = nil)
  if valid_21627653 != nil:
    section.add "X-Amz-Algorithm", valid_21627653
  var valid_21627654 = header.getOrDefault("X-Amz-Signature")
  valid_21627654 = validateParameter(valid_21627654, JString, required = false,
                                   default = nil)
  if valid_21627654 != nil:
    section.add "X-Amz-Signature", valid_21627654
  var valid_21627655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627655 = validateParameter(valid_21627655, JString, required = false,
                                   default = nil)
  if valid_21627655 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627655
  var valid_21627656 = header.getOrDefault("X-Amz-Credential")
  valid_21627656 = validateParameter(valid_21627656, JString, required = false,
                                   default = nil)
  if valid_21627656 != nil:
    section.add "X-Amz-Credential", valid_21627656
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627657: Call_GetFailoverDBCluster_21627643; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_21627657.validator(path, query, header, formData, body, _)
  let scheme = call_21627657.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627657.makeUrl(scheme.get, call_21627657.host, call_21627657.base,
                               call_21627657.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627657, uri, valid, _)

proc call*(call_21627658: Call_GetFailoverDBCluster_21627643;
          DBClusterIdentifier: string = ""; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627659 = newJObject()
  add(query_21627659, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627659, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_21627659, "Action", newJString(Action))
  add(query_21627659, "Version", newJString(Version))
  result = call_21627658.call(nil, query_21627659, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_21627643(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_21627644, base: "/",
    makeUrl: url_GetFailoverDBCluster_21627645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_21627695 = ref object of OpenApiRestCall_21625418
proc url_PostListTagsForResource_21627697(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_21627696(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627698 = query.getOrDefault("Action")
  valid_21627698 = validateParameter(valid_21627698, JString, required = true,
                                   default = newJString("ListTagsForResource"))
  if valid_21627698 != nil:
    section.add "Action", valid_21627698
  var valid_21627699 = query.getOrDefault("Version")
  valid_21627699 = validateParameter(valid_21627699, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627699 != nil:
    section.add "Version", valid_21627699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627700 = header.getOrDefault("X-Amz-Date")
  valid_21627700 = validateParameter(valid_21627700, JString, required = false,
                                   default = nil)
  if valid_21627700 != nil:
    section.add "X-Amz-Date", valid_21627700
  var valid_21627701 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627701 = validateParameter(valid_21627701, JString, required = false,
                                   default = nil)
  if valid_21627701 != nil:
    section.add "X-Amz-Security-Token", valid_21627701
  var valid_21627702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627702 = validateParameter(valid_21627702, JString, required = false,
                                   default = nil)
  if valid_21627702 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627702
  var valid_21627703 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627703 = validateParameter(valid_21627703, JString, required = false,
                                   default = nil)
  if valid_21627703 != nil:
    section.add "X-Amz-Algorithm", valid_21627703
  var valid_21627704 = header.getOrDefault("X-Amz-Signature")
  valid_21627704 = validateParameter(valid_21627704, JString, required = false,
                                   default = nil)
  if valid_21627704 != nil:
    section.add "X-Amz-Signature", valid_21627704
  var valid_21627705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627705 = validateParameter(valid_21627705, JString, required = false,
                                   default = nil)
  if valid_21627705 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627705
  var valid_21627706 = header.getOrDefault("X-Amz-Credential")
  valid_21627706 = validateParameter(valid_21627706, JString, required = false,
                                   default = nil)
  if valid_21627706 != nil:
    section.add "X-Amz-Credential", valid_21627706
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  var valid_21627707 = formData.getOrDefault("Filters")
  valid_21627707 = validateParameter(valid_21627707, JArray, required = false,
                                   default = nil)
  if valid_21627707 != nil:
    section.add "Filters", valid_21627707
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_21627708 = formData.getOrDefault("ResourceName")
  valid_21627708 = validateParameter(valid_21627708, JString, required = true,
                                   default = nil)
  if valid_21627708 != nil:
    section.add "ResourceName", valid_21627708
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627709: Call_PostListTagsForResource_21627695;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_21627709.validator(path, query, header, formData, body, _)
  let scheme = call_21627709.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627709.makeUrl(scheme.get, call_21627709.host, call_21627709.base,
                               call_21627709.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627709, uri, valid, _)

proc call*(call_21627710: Call_PostListTagsForResource_21627695;
          ResourceName: string; Action: string = "ListTagsForResource";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_21627711 = newJObject()
  var formData_21627712 = newJObject()
  add(query_21627711, "Action", newJString(Action))
  if Filters != nil:
    formData_21627712.add "Filters", Filters
  add(formData_21627712, "ResourceName", newJString(ResourceName))
  add(query_21627711, "Version", newJString(Version))
  result = call_21627710.call(nil, query_21627711, nil, formData_21627712, nil)

var postListTagsForResource* = Call_PostListTagsForResource_21627695(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_21627696, base: "/",
    makeUrl: url_PostListTagsForResource_21627697,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_21627678 = ref object of OpenApiRestCall_21625418
proc url_GetListTagsForResource_21627680(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_21627679(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627681 = query.getOrDefault("Filters")
  valid_21627681 = validateParameter(valid_21627681, JArray, required = false,
                                   default = nil)
  if valid_21627681 != nil:
    section.add "Filters", valid_21627681
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_21627682 = query.getOrDefault("ResourceName")
  valid_21627682 = validateParameter(valid_21627682, JString, required = true,
                                   default = nil)
  if valid_21627682 != nil:
    section.add "ResourceName", valid_21627682
  var valid_21627683 = query.getOrDefault("Action")
  valid_21627683 = validateParameter(valid_21627683, JString, required = true,
                                   default = newJString("ListTagsForResource"))
  if valid_21627683 != nil:
    section.add "Action", valid_21627683
  var valid_21627684 = query.getOrDefault("Version")
  valid_21627684 = validateParameter(valid_21627684, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627684 != nil:
    section.add "Version", valid_21627684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627685 = header.getOrDefault("X-Amz-Date")
  valid_21627685 = validateParameter(valid_21627685, JString, required = false,
                                   default = nil)
  if valid_21627685 != nil:
    section.add "X-Amz-Date", valid_21627685
  var valid_21627686 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627686 = validateParameter(valid_21627686, JString, required = false,
                                   default = nil)
  if valid_21627686 != nil:
    section.add "X-Amz-Security-Token", valid_21627686
  var valid_21627687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627687 = validateParameter(valid_21627687, JString, required = false,
                                   default = nil)
  if valid_21627687 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627687
  var valid_21627688 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627688 = validateParameter(valid_21627688, JString, required = false,
                                   default = nil)
  if valid_21627688 != nil:
    section.add "X-Amz-Algorithm", valid_21627688
  var valid_21627689 = header.getOrDefault("X-Amz-Signature")
  valid_21627689 = validateParameter(valid_21627689, JString, required = false,
                                   default = nil)
  if valid_21627689 != nil:
    section.add "X-Amz-Signature", valid_21627689
  var valid_21627690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627690 = validateParameter(valid_21627690, JString, required = false,
                                   default = nil)
  if valid_21627690 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627690
  var valid_21627691 = header.getOrDefault("X-Amz-Credential")
  valid_21627691 = validateParameter(valid_21627691, JString, required = false,
                                   default = nil)
  if valid_21627691 != nil:
    section.add "X-Amz-Credential", valid_21627691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627692: Call_GetListTagsForResource_21627678;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_21627692.validator(path, query, header, formData, body, _)
  let scheme = call_21627692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627692.makeUrl(scheme.get, call_21627692.host, call_21627692.base,
                               call_21627692.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627692, uri, valid, _)

proc call*(call_21627693: Call_GetListTagsForResource_21627678;
          ResourceName: string; Filters: JsonNode = nil;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31"): Recallable =
  ## getListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627694 = newJObject()
  if Filters != nil:
    query_21627694.add "Filters", Filters
  add(query_21627694, "ResourceName", newJString(ResourceName))
  add(query_21627694, "Action", newJString(Action))
  add(query_21627694, "Version", newJString(Version))
  result = call_21627693.call(nil, query_21627694, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_21627678(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_21627679, base: "/",
    makeUrl: url_GetListTagsForResource_21627680,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_21627744 = ref object of OpenApiRestCall_21625418
proc url_PostModifyDBCluster_21627746(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_21627745(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627747 = query.getOrDefault("Action")
  valid_21627747 = validateParameter(valid_21627747, JString, required = true,
                                   default = newJString("ModifyDBCluster"))
  if valid_21627747 != nil:
    section.add "Action", valid_21627747
  var valid_21627748 = query.getOrDefault("Version")
  valid_21627748 = validateParameter(valid_21627748, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627748 != nil:
    section.add "Version", valid_21627748
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627749 = header.getOrDefault("X-Amz-Date")
  valid_21627749 = validateParameter(valid_21627749, JString, required = false,
                                   default = nil)
  if valid_21627749 != nil:
    section.add "X-Amz-Date", valid_21627749
  var valid_21627750 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627750 = validateParameter(valid_21627750, JString, required = false,
                                   default = nil)
  if valid_21627750 != nil:
    section.add "X-Amz-Security-Token", valid_21627750
  var valid_21627751 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627751 = validateParameter(valid_21627751, JString, required = false,
                                   default = nil)
  if valid_21627751 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627751
  var valid_21627752 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627752 = validateParameter(valid_21627752, JString, required = false,
                                   default = nil)
  if valid_21627752 != nil:
    section.add "X-Amz-Algorithm", valid_21627752
  var valid_21627753 = header.getOrDefault("X-Amz-Signature")
  valid_21627753 = validateParameter(valid_21627753, JString, required = false,
                                   default = nil)
  if valid_21627753 != nil:
    section.add "X-Amz-Signature", valid_21627753
  var valid_21627754 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627754 = validateParameter(valid_21627754, JString, required = false,
                                   default = nil)
  if valid_21627754 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627754
  var valid_21627755 = header.getOrDefault("X-Amz-Credential")
  valid_21627755 = validateParameter(valid_21627755, JString, required = false,
                                   default = nil)
  if valid_21627755 != nil:
    section.add "X-Amz-Credential", valid_21627755
  result.add "header", section
  ## parameters in `formData` object:
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_21627756 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21627756 = validateParameter(valid_21627756, JArray, required = false,
                                   default = nil)
  if valid_21627756 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21627756
  var valid_21627757 = formData.getOrDefault("ApplyImmediately")
  valid_21627757 = validateParameter(valid_21627757, JBool, required = false,
                                   default = nil)
  if valid_21627757 != nil:
    section.add "ApplyImmediately", valid_21627757
  var valid_21627758 = formData.getOrDefault("Port")
  valid_21627758 = validateParameter(valid_21627758, JInt, required = false,
                                   default = nil)
  if valid_21627758 != nil:
    section.add "Port", valid_21627758
  var valid_21627759 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21627759 = validateParameter(valid_21627759, JArray, required = false,
                                   default = nil)
  if valid_21627759 != nil:
    section.add "VpcSecurityGroupIds", valid_21627759
  var valid_21627760 = formData.getOrDefault("OptionGroupName")
  valid_21627760 = validateParameter(valid_21627760, JString, required = false,
                                   default = nil)
  if valid_21627760 != nil:
    section.add "OptionGroupName", valid_21627760
  var valid_21627761 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21627761 = validateParameter(valid_21627761, JInt, required = false,
                                   default = nil)
  if valid_21627761 != nil:
    section.add "BackupRetentionPeriod", valid_21627761
  var valid_21627762 = formData.getOrDefault("MasterUserPassword")
  valid_21627762 = validateParameter(valid_21627762, JString, required = false,
                                   default = nil)
  if valid_21627762 != nil:
    section.add "MasterUserPassword", valid_21627762
  var valid_21627763 = formData.getOrDefault("DeletionProtection")
  valid_21627763 = validateParameter(valid_21627763, JBool, required = false,
                                   default = nil)
  if valid_21627763 != nil:
    section.add "DeletionProtection", valid_21627763
  var valid_21627764 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_21627764 = validateParameter(valid_21627764, JString, required = false,
                                   default = nil)
  if valid_21627764 != nil:
    section.add "NewDBClusterIdentifier", valid_21627764
  var valid_21627765 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21627765 = validateParameter(valid_21627765, JArray, required = false,
                                   default = nil)
  if valid_21627765 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21627765
  var valid_21627766 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21627766 = validateParameter(valid_21627766, JString, required = false,
                                   default = nil)
  if valid_21627766 != nil:
    section.add "DBClusterParameterGroupName", valid_21627766
  var valid_21627767 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21627767 = validateParameter(valid_21627767, JBool, required = false,
                                   default = nil)
  if valid_21627767 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21627767
  var valid_21627768 = formData.getOrDefault("PreferredBackupWindow")
  valid_21627768 = validateParameter(valid_21627768, JString, required = false,
                                   default = nil)
  if valid_21627768 != nil:
    section.add "PreferredBackupWindow", valid_21627768
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21627769 = formData.getOrDefault("DBClusterIdentifier")
  valid_21627769 = validateParameter(valid_21627769, JString, required = true,
                                   default = nil)
  if valid_21627769 != nil:
    section.add "DBClusterIdentifier", valid_21627769
  var valid_21627770 = formData.getOrDefault("EngineVersion")
  valid_21627770 = validateParameter(valid_21627770, JString, required = false,
                                   default = nil)
  if valid_21627770 != nil:
    section.add "EngineVersion", valid_21627770
  var valid_21627771 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21627771 = validateParameter(valid_21627771, JString, required = false,
                                   default = nil)
  if valid_21627771 != nil:
    section.add "PreferredMaintenanceWindow", valid_21627771
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627772: Call_PostModifyDBCluster_21627744; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_21627772.validator(path, query, header, formData, body, _)
  let scheme = call_21627772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627772.makeUrl(scheme.get, call_21627772.host, call_21627772.base,
                               call_21627772.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627772, uri, valid, _)

proc call*(call_21627773: Call_PostModifyDBCluster_21627744;
          DBClusterIdentifier: string;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          BackupRetentionPeriod: int = 0; MasterUserPassword: string = "";
          DeletionProtection: bool = false; NewDBClusterIdentifier: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Action: string = "ModifyDBCluster";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_21627774 = newJObject()
  var formData_21627775 = newJObject()
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_21627775.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                         CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_21627775, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_21627775, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21627775.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21627775, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21627775, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21627775, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21627775, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21627775, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_21627775.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                         CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_21627774, "Action", newJString(Action))
  add(formData_21627775, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21627775, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21627775, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21627775, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21627775, "EngineVersion", newJString(EngineVersion))
  add(query_21627774, "Version", newJString(Version))
  add(formData_21627775, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21627773.call(nil, query_21627774, nil, formData_21627775, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_21627744(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_21627745, base: "/",
    makeUrl: url_PostModifyDBCluster_21627746,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_21627713 = ref object of OpenApiRestCall_21625418
proc url_GetModifyDBCluster_21627715(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_21627714(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   Action: JString (required)
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_21627716 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21627716 = validateParameter(valid_21627716, JString, required = false,
                                   default = nil)
  if valid_21627716 != nil:
    section.add "PreferredMaintenanceWindow", valid_21627716
  var valid_21627717 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21627717 = validateParameter(valid_21627717, JString, required = false,
                                   default = nil)
  if valid_21627717 != nil:
    section.add "DBClusterParameterGroupName", valid_21627717
  var valid_21627718 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21627718 = validateParameter(valid_21627718, JBool, required = false,
                                   default = nil)
  if valid_21627718 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21627718
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21627719 = query.getOrDefault("DBClusterIdentifier")
  valid_21627719 = validateParameter(valid_21627719, JString, required = true,
                                   default = nil)
  if valid_21627719 != nil:
    section.add "DBClusterIdentifier", valid_21627719
  var valid_21627720 = query.getOrDefault("OptionGroupName")
  valid_21627720 = validateParameter(valid_21627720, JString, required = false,
                                   default = nil)
  if valid_21627720 != nil:
    section.add "OptionGroupName", valid_21627720
  var valid_21627721 = query.getOrDefault("MasterUserPassword")
  valid_21627721 = validateParameter(valid_21627721, JString, required = false,
                                   default = nil)
  if valid_21627721 != nil:
    section.add "MasterUserPassword", valid_21627721
  var valid_21627722 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21627722 = validateParameter(valid_21627722, JArray, required = false,
                                   default = nil)
  if valid_21627722 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21627722
  var valid_21627723 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21627723 = validateParameter(valid_21627723, JArray, required = false,
                                   default = nil)
  if valid_21627723 != nil:
    section.add "VpcSecurityGroupIds", valid_21627723
  var valid_21627724 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21627724 = validateParameter(valid_21627724, JArray, required = false,
                                   default = nil)
  if valid_21627724 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21627724
  var valid_21627725 = query.getOrDefault("BackupRetentionPeriod")
  valid_21627725 = validateParameter(valid_21627725, JInt, required = false,
                                   default = nil)
  if valid_21627725 != nil:
    section.add "BackupRetentionPeriod", valid_21627725
  var valid_21627726 = query.getOrDefault("NewDBClusterIdentifier")
  valid_21627726 = validateParameter(valid_21627726, JString, required = false,
                                   default = nil)
  if valid_21627726 != nil:
    section.add "NewDBClusterIdentifier", valid_21627726
  var valid_21627727 = query.getOrDefault("DeletionProtection")
  valid_21627727 = validateParameter(valid_21627727, JBool, required = false,
                                   default = nil)
  if valid_21627727 != nil:
    section.add "DeletionProtection", valid_21627727
  var valid_21627728 = query.getOrDefault("Action")
  valid_21627728 = validateParameter(valid_21627728, JString, required = true,
                                   default = newJString("ModifyDBCluster"))
  if valid_21627728 != nil:
    section.add "Action", valid_21627728
  var valid_21627729 = query.getOrDefault("EngineVersion")
  valid_21627729 = validateParameter(valid_21627729, JString, required = false,
                                   default = nil)
  if valid_21627729 != nil:
    section.add "EngineVersion", valid_21627729
  var valid_21627730 = query.getOrDefault("Port")
  valid_21627730 = validateParameter(valid_21627730, JInt, required = false,
                                   default = nil)
  if valid_21627730 != nil:
    section.add "Port", valid_21627730
  var valid_21627731 = query.getOrDefault("PreferredBackupWindow")
  valid_21627731 = validateParameter(valid_21627731, JString, required = false,
                                   default = nil)
  if valid_21627731 != nil:
    section.add "PreferredBackupWindow", valid_21627731
  var valid_21627732 = query.getOrDefault("Version")
  valid_21627732 = validateParameter(valid_21627732, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627732 != nil:
    section.add "Version", valid_21627732
  var valid_21627733 = query.getOrDefault("ApplyImmediately")
  valid_21627733 = validateParameter(valid_21627733, JBool, required = false,
                                   default = nil)
  if valid_21627733 != nil:
    section.add "ApplyImmediately", valid_21627733
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627734 = header.getOrDefault("X-Amz-Date")
  valid_21627734 = validateParameter(valid_21627734, JString, required = false,
                                   default = nil)
  if valid_21627734 != nil:
    section.add "X-Amz-Date", valid_21627734
  var valid_21627735 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627735 = validateParameter(valid_21627735, JString, required = false,
                                   default = nil)
  if valid_21627735 != nil:
    section.add "X-Amz-Security-Token", valid_21627735
  var valid_21627736 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627736 = validateParameter(valid_21627736, JString, required = false,
                                   default = nil)
  if valid_21627736 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627736
  var valid_21627737 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627737 = validateParameter(valid_21627737, JString, required = false,
                                   default = nil)
  if valid_21627737 != nil:
    section.add "X-Amz-Algorithm", valid_21627737
  var valid_21627738 = header.getOrDefault("X-Amz-Signature")
  valid_21627738 = validateParameter(valid_21627738, JString, required = false,
                                   default = nil)
  if valid_21627738 != nil:
    section.add "X-Amz-Signature", valid_21627738
  var valid_21627739 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627739 = validateParameter(valid_21627739, JString, required = false,
                                   default = nil)
  if valid_21627739 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627739
  var valid_21627740 = header.getOrDefault("X-Amz-Credential")
  valid_21627740 = validateParameter(valid_21627740, JString, required = false,
                                   default = nil)
  if valid_21627740 != nil:
    section.add "X-Amz-Credential", valid_21627740
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627741: Call_GetModifyDBCluster_21627713; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_21627741.validator(path, query, header, formData, body, _)
  let scheme = call_21627741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627741.makeUrl(scheme.get, call_21627741.host, call_21627741.base,
                               call_21627741.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627741, uri, valid, _)

proc call*(call_21627742: Call_GetModifyDBCluster_21627713;
          DBClusterIdentifier: string; PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0; NewDBClusterIdentifier: string = "";
          DeletionProtection: bool = false; Action: string = "ModifyDBCluster";
          EngineVersion: string = ""; Port: int = 0; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"; ApplyImmediately: bool = false): Recallable =
  ## getModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  var query_21627743 = newJObject()
  add(query_21627743, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21627743, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21627743, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21627743, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627743, "OptionGroupName", newJString(OptionGroupName))
  add(query_21627743, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_21627743.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                      CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_21627743.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_21627743.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                      CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_21627743, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21627743, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_21627743, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21627743, "Action", newJString(Action))
  add(query_21627743, "EngineVersion", newJString(EngineVersion))
  add(query_21627743, "Port", newJInt(Port))
  add(query_21627743, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21627743, "Version", newJString(Version))
  add(query_21627743, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_21627742.call(nil, query_21627743, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_21627713(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_21627714,
    base: "/", makeUrl: url_GetModifyDBCluster_21627715,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_21627793 = ref object of OpenApiRestCall_21625418
proc url_PostModifyDBClusterParameterGroup_21627795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_21627794(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627796 = query.getOrDefault("Action")
  valid_21627796 = validateParameter(valid_21627796, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_21627796 != nil:
    section.add "Action", valid_21627796
  var valid_21627797 = query.getOrDefault("Version")
  valid_21627797 = validateParameter(valid_21627797, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627797 != nil:
    section.add "Version", valid_21627797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627798 = header.getOrDefault("X-Amz-Date")
  valid_21627798 = validateParameter(valid_21627798, JString, required = false,
                                   default = nil)
  if valid_21627798 != nil:
    section.add "X-Amz-Date", valid_21627798
  var valid_21627799 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627799 = validateParameter(valid_21627799, JString, required = false,
                                   default = nil)
  if valid_21627799 != nil:
    section.add "X-Amz-Security-Token", valid_21627799
  var valid_21627800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627800 = validateParameter(valid_21627800, JString, required = false,
                                   default = nil)
  if valid_21627800 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627800
  var valid_21627801 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627801 = validateParameter(valid_21627801, JString, required = false,
                                   default = nil)
  if valid_21627801 != nil:
    section.add "X-Amz-Algorithm", valid_21627801
  var valid_21627802 = header.getOrDefault("X-Amz-Signature")
  valid_21627802 = validateParameter(valid_21627802, JString, required = false,
                                   default = nil)
  if valid_21627802 != nil:
    section.add "X-Amz-Signature", valid_21627802
  var valid_21627803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627803 = validateParameter(valid_21627803, JString, required = false,
                                   default = nil)
  if valid_21627803 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627803
  var valid_21627804 = header.getOrDefault("X-Amz-Credential")
  valid_21627804 = validateParameter(valid_21627804, JString, required = false,
                                   default = nil)
  if valid_21627804 != nil:
    section.add "X-Amz-Credential", valid_21627804
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_21627805 = formData.getOrDefault("Parameters")
  valid_21627805 = validateParameter(valid_21627805, JArray, required = true,
                                   default = nil)
  if valid_21627805 != nil:
    section.add "Parameters", valid_21627805
  var valid_21627806 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21627806 = validateParameter(valid_21627806, JString, required = true,
                                   default = nil)
  if valid_21627806 != nil:
    section.add "DBClusterParameterGroupName", valid_21627806
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627807: Call_PostModifyDBClusterParameterGroup_21627793;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21627807.validator(path, query, header, formData, body, _)
  let scheme = call_21627807.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627807.makeUrl(scheme.get, call_21627807.host, call_21627807.base,
                               call_21627807.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627807, uri, valid, _)

proc call*(call_21627808: Call_PostModifyDBClusterParameterGroup_21627793;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_21627809 = newJObject()
  var formData_21627810 = newJObject()
  if Parameters != nil:
    formData_21627810.add "Parameters", Parameters
  add(query_21627809, "Action", newJString(Action))
  add(formData_21627810, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21627809, "Version", newJString(Version))
  result = call_21627808.call(nil, query_21627809, nil, formData_21627810, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_21627793(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_21627794, base: "/",
    makeUrl: url_PostModifyDBClusterParameterGroup_21627795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_21627776 = ref object of OpenApiRestCall_21625418
proc url_GetModifyDBClusterParameterGroup_21627778(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_21627777(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21627779 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21627779 = validateParameter(valid_21627779, JString, required = true,
                                   default = nil)
  if valid_21627779 != nil:
    section.add "DBClusterParameterGroupName", valid_21627779
  var valid_21627780 = query.getOrDefault("Parameters")
  valid_21627780 = validateParameter(valid_21627780, JArray, required = true,
                                   default = nil)
  if valid_21627780 != nil:
    section.add "Parameters", valid_21627780
  var valid_21627781 = query.getOrDefault("Action")
  valid_21627781 = validateParameter(valid_21627781, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_21627781 != nil:
    section.add "Action", valid_21627781
  var valid_21627782 = query.getOrDefault("Version")
  valid_21627782 = validateParameter(valid_21627782, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627782 != nil:
    section.add "Version", valid_21627782
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627783 = header.getOrDefault("X-Amz-Date")
  valid_21627783 = validateParameter(valid_21627783, JString, required = false,
                                   default = nil)
  if valid_21627783 != nil:
    section.add "X-Amz-Date", valid_21627783
  var valid_21627784 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627784 = validateParameter(valid_21627784, JString, required = false,
                                   default = nil)
  if valid_21627784 != nil:
    section.add "X-Amz-Security-Token", valid_21627784
  var valid_21627785 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627785 = validateParameter(valid_21627785, JString, required = false,
                                   default = nil)
  if valid_21627785 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627785
  var valid_21627786 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627786 = validateParameter(valid_21627786, JString, required = false,
                                   default = nil)
  if valid_21627786 != nil:
    section.add "X-Amz-Algorithm", valid_21627786
  var valid_21627787 = header.getOrDefault("X-Amz-Signature")
  valid_21627787 = validateParameter(valid_21627787, JString, required = false,
                                   default = nil)
  if valid_21627787 != nil:
    section.add "X-Amz-Signature", valid_21627787
  var valid_21627788 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627788 = validateParameter(valid_21627788, JString, required = false,
                                   default = nil)
  if valid_21627788 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627788
  var valid_21627789 = header.getOrDefault("X-Amz-Credential")
  valid_21627789 = validateParameter(valid_21627789, JString, required = false,
                                   default = nil)
  if valid_21627789 != nil:
    section.add "X-Amz-Credential", valid_21627789
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627790: Call_GetModifyDBClusterParameterGroup_21627776;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21627790.validator(path, query, header, formData, body, _)
  let scheme = call_21627790.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627790.makeUrl(scheme.get, call_21627790.host, call_21627790.base,
                               call_21627790.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627790, uri, valid, _)

proc call*(call_21627791: Call_GetModifyDBClusterParameterGroup_21627776;
          DBClusterParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627792 = newJObject()
  add(query_21627792, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_21627792.add "Parameters", Parameters
  add(query_21627792, "Action", newJString(Action))
  add(query_21627792, "Version", newJString(Version))
  result = call_21627791.call(nil, query_21627792, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_21627776(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_21627777, base: "/",
    makeUrl: url_GetModifyDBClusterParameterGroup_21627778,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_21627830 = ref object of OpenApiRestCall_21625418
proc url_PostModifyDBClusterSnapshotAttribute_21627832(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_21627831(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627833 = query.getOrDefault("Action")
  valid_21627833 = validateParameter(valid_21627833, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_21627833 != nil:
    section.add "Action", valid_21627833
  var valid_21627834 = query.getOrDefault("Version")
  valid_21627834 = validateParameter(valid_21627834, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627834 != nil:
    section.add "Version", valid_21627834
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627835 = header.getOrDefault("X-Amz-Date")
  valid_21627835 = validateParameter(valid_21627835, JString, required = false,
                                   default = nil)
  if valid_21627835 != nil:
    section.add "X-Amz-Date", valid_21627835
  var valid_21627836 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627836 = validateParameter(valid_21627836, JString, required = false,
                                   default = nil)
  if valid_21627836 != nil:
    section.add "X-Amz-Security-Token", valid_21627836
  var valid_21627837 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627837 = validateParameter(valid_21627837, JString, required = false,
                                   default = nil)
  if valid_21627837 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627837
  var valid_21627838 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627838 = validateParameter(valid_21627838, JString, required = false,
                                   default = nil)
  if valid_21627838 != nil:
    section.add "X-Amz-Algorithm", valid_21627838
  var valid_21627839 = header.getOrDefault("X-Amz-Signature")
  valid_21627839 = validateParameter(valid_21627839, JString, required = false,
                                   default = nil)
  if valid_21627839 != nil:
    section.add "X-Amz-Signature", valid_21627839
  var valid_21627840 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627840 = validateParameter(valid_21627840, JString, required = false,
                                   default = nil)
  if valid_21627840 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627840
  var valid_21627841 = header.getOrDefault("X-Amz-Credential")
  valid_21627841 = validateParameter(valid_21627841, JString, required = false,
                                   default = nil)
  if valid_21627841 != nil:
    section.add "X-Amz-Credential", valid_21627841
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_21627842 = formData.getOrDefault("AttributeName")
  valid_21627842 = validateParameter(valid_21627842, JString, required = true,
                                   default = nil)
  if valid_21627842 != nil:
    section.add "AttributeName", valid_21627842
  var valid_21627843 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627843 = validateParameter(valid_21627843, JString, required = true,
                                   default = nil)
  if valid_21627843 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627843
  var valid_21627844 = formData.getOrDefault("ValuesToRemove")
  valid_21627844 = validateParameter(valid_21627844, JArray, required = false,
                                   default = nil)
  if valid_21627844 != nil:
    section.add "ValuesToRemove", valid_21627844
  var valid_21627845 = formData.getOrDefault("ValuesToAdd")
  valid_21627845 = validateParameter(valid_21627845, JArray, required = false,
                                   default = nil)
  if valid_21627845 != nil:
    section.add "ValuesToAdd", valid_21627845
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627846: Call_PostModifyDBClusterSnapshotAttribute_21627830;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_21627846.validator(path, query, header, formData, body, _)
  let scheme = call_21627846.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627846.makeUrl(scheme.get, call_21627846.host, call_21627846.base,
                               call_21627846.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627846, uri, valid, _)

proc call*(call_21627847: Call_PostModifyDBClusterSnapshotAttribute_21627830;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_21627848 = newJObject()
  var formData_21627849 = newJObject()
  add(formData_21627849, "AttributeName", newJString(AttributeName))
  add(formData_21627849, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21627848, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_21627849.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_21627849.add "ValuesToAdd", ValuesToAdd
  add(query_21627848, "Version", newJString(Version))
  result = call_21627847.call(nil, query_21627848, nil, formData_21627849, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_21627830(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_21627831, base: "/",
    makeUrl: url_PostModifyDBClusterSnapshotAttribute_21627832,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_21627811 = ref object of OpenApiRestCall_21625418
proc url_GetModifyDBClusterSnapshotAttribute_21627813(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_21627812(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_21627814 = query.getOrDefault("AttributeName")
  valid_21627814 = validateParameter(valid_21627814, JString, required = true,
                                   default = nil)
  if valid_21627814 != nil:
    section.add "AttributeName", valid_21627814
  var valid_21627815 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627815 = validateParameter(valid_21627815, JString, required = true,
                                   default = nil)
  if valid_21627815 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627815
  var valid_21627816 = query.getOrDefault("ValuesToAdd")
  valid_21627816 = validateParameter(valid_21627816, JArray, required = false,
                                   default = nil)
  if valid_21627816 != nil:
    section.add "ValuesToAdd", valid_21627816
  var valid_21627817 = query.getOrDefault("Action")
  valid_21627817 = validateParameter(valid_21627817, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_21627817 != nil:
    section.add "Action", valid_21627817
  var valid_21627818 = query.getOrDefault("ValuesToRemove")
  valid_21627818 = validateParameter(valid_21627818, JArray, required = false,
                                   default = nil)
  if valid_21627818 != nil:
    section.add "ValuesToRemove", valid_21627818
  var valid_21627819 = query.getOrDefault("Version")
  valid_21627819 = validateParameter(valid_21627819, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627819 != nil:
    section.add "Version", valid_21627819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627820 = header.getOrDefault("X-Amz-Date")
  valid_21627820 = validateParameter(valid_21627820, JString, required = false,
                                   default = nil)
  if valid_21627820 != nil:
    section.add "X-Amz-Date", valid_21627820
  var valid_21627821 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627821 = validateParameter(valid_21627821, JString, required = false,
                                   default = nil)
  if valid_21627821 != nil:
    section.add "X-Amz-Security-Token", valid_21627821
  var valid_21627822 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627822 = validateParameter(valid_21627822, JString, required = false,
                                   default = nil)
  if valid_21627822 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627822
  var valid_21627823 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627823 = validateParameter(valid_21627823, JString, required = false,
                                   default = nil)
  if valid_21627823 != nil:
    section.add "X-Amz-Algorithm", valid_21627823
  var valid_21627824 = header.getOrDefault("X-Amz-Signature")
  valid_21627824 = validateParameter(valid_21627824, JString, required = false,
                                   default = nil)
  if valid_21627824 != nil:
    section.add "X-Amz-Signature", valid_21627824
  var valid_21627825 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627825 = validateParameter(valid_21627825, JString, required = false,
                                   default = nil)
  if valid_21627825 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627825
  var valid_21627826 = header.getOrDefault("X-Amz-Credential")
  valid_21627826 = validateParameter(valid_21627826, JString, required = false,
                                   default = nil)
  if valid_21627826 != nil:
    section.add "X-Amz-Credential", valid_21627826
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627827: Call_GetModifyDBClusterSnapshotAttribute_21627811;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_21627827.validator(path, query, header, formData, body, _)
  let scheme = call_21627827.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627827.makeUrl(scheme.get, call_21627827.host, call_21627827.base,
                               call_21627827.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627827, uri, valid, _)

proc call*(call_21627828: Call_GetModifyDBClusterSnapshotAttribute_21627811;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_21627829 = newJObject()
  add(query_21627829, "AttributeName", newJString(AttributeName))
  add(query_21627829, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if ValuesToAdd != nil:
    query_21627829.add "ValuesToAdd", ValuesToAdd
  add(query_21627829, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_21627829.add "ValuesToRemove", ValuesToRemove
  add(query_21627829, "Version", newJString(Version))
  result = call_21627828.call(nil, query_21627829, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_21627811(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_21627812, base: "/",
    makeUrl: url_GetModifyDBClusterSnapshotAttribute_21627813,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_21627903 = ref object of OpenApiRestCall_21625418
proc url_PostModifyDBInstance_21627905(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_21627904(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627906 = query.getOrDefault("Action")
  valid_21627906 = validateParameter(valid_21627906, JString, required = true,
                                   default = newJString("ModifyDBInstance"))
  if valid_21627906 != nil:
    section.add "Action", valid_21627906
  var valid_21627907 = query.getOrDefault("Version")
  valid_21627907 = validateParameter(valid_21627907, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627907 != nil:
    section.add "Version", valid_21627907
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627908 = header.getOrDefault("X-Amz-Date")
  valid_21627908 = validateParameter(valid_21627908, JString, required = false,
                                   default = nil)
  if valid_21627908 != nil:
    section.add "X-Amz-Date", valid_21627908
  var valid_21627909 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627909 = validateParameter(valid_21627909, JString, required = false,
                                   default = nil)
  if valid_21627909 != nil:
    section.add "X-Amz-Security-Token", valid_21627909
  var valid_21627910 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627910 = validateParameter(valid_21627910, JString, required = false,
                                   default = nil)
  if valid_21627910 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627910
  var valid_21627911 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627911 = validateParameter(valid_21627911, JString, required = false,
                                   default = nil)
  if valid_21627911 != nil:
    section.add "X-Amz-Algorithm", valid_21627911
  var valid_21627912 = header.getOrDefault("X-Amz-Signature")
  valid_21627912 = validateParameter(valid_21627912, JString, required = false,
                                   default = nil)
  if valid_21627912 != nil:
    section.add "X-Amz-Signature", valid_21627912
  var valid_21627913 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627913 = validateParameter(valid_21627913, JString, required = false,
                                   default = nil)
  if valid_21627913 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627913
  var valid_21627914 = header.getOrDefault("X-Amz-Credential")
  valid_21627914 = validateParameter(valid_21627914, JString, required = false,
                                   default = nil)
  if valid_21627914 != nil:
    section.add "X-Amz-Credential", valid_21627914
  result.add "header", section
  ## parameters in `formData` object:
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   StorageType: JString
  ##              : Not supported.
  ##   Domain: JString
  ##         : Not supported.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  section = newJObject()
  var valid_21627915 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21627915 = validateParameter(valid_21627915, JArray, required = false,
                                   default = nil)
  if valid_21627915 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21627915
  var valid_21627916 = formData.getOrDefault("ApplyImmediately")
  valid_21627916 = validateParameter(valid_21627916, JBool, required = false,
                                   default = nil)
  if valid_21627916 != nil:
    section.add "ApplyImmediately", valid_21627916
  var valid_21627917 = formData.getOrDefault("EnablePerformanceInsights")
  valid_21627917 = validateParameter(valid_21627917, JBool, required = false,
                                   default = nil)
  if valid_21627917 != nil:
    section.add "EnablePerformanceInsights", valid_21627917
  var valid_21627918 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21627918 = validateParameter(valid_21627918, JArray, required = false,
                                   default = nil)
  if valid_21627918 != nil:
    section.add "VpcSecurityGroupIds", valid_21627918
  var valid_21627919 = formData.getOrDefault("Iops")
  valid_21627919 = validateParameter(valid_21627919, JInt, required = false,
                                   default = nil)
  if valid_21627919 != nil:
    section.add "Iops", valid_21627919
  var valid_21627920 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21627920 = validateParameter(valid_21627920, JInt, required = false,
                                   default = nil)
  if valid_21627920 != nil:
    section.add "BackupRetentionPeriod", valid_21627920
  var valid_21627921 = formData.getOrDefault("TdeCredentialArn")
  valid_21627921 = validateParameter(valid_21627921, JString, required = false,
                                   default = nil)
  if valid_21627921 != nil:
    section.add "TdeCredentialArn", valid_21627921
  var valid_21627922 = formData.getOrDefault("DeletionProtection")
  valid_21627922 = validateParameter(valid_21627922, JBool, required = false,
                                   default = nil)
  if valid_21627922 != nil:
    section.add "DeletionProtection", valid_21627922
  var valid_21627923 = formData.getOrDefault("DBSubnetGroupName")
  valid_21627923 = validateParameter(valid_21627923, JString, required = false,
                                   default = nil)
  if valid_21627923 != nil:
    section.add "DBSubnetGroupName", valid_21627923
  var valid_21627924 = formData.getOrDefault("MultiAZ")
  valid_21627924 = validateParameter(valid_21627924, JBool, required = false,
                                   default = nil)
  if valid_21627924 != nil:
    section.add "MultiAZ", valid_21627924
  var valid_21627925 = formData.getOrDefault("DBPortNumber")
  valid_21627925 = validateParameter(valid_21627925, JInt, required = false,
                                   default = nil)
  if valid_21627925 != nil:
    section.add "DBPortNumber", valid_21627925
  var valid_21627926 = formData.getOrDefault("PubliclyAccessible")
  valid_21627926 = validateParameter(valid_21627926, JBool, required = false,
                                   default = nil)
  if valid_21627926 != nil:
    section.add "PubliclyAccessible", valid_21627926
  var valid_21627927 = formData.getOrDefault("StorageType")
  valid_21627927 = validateParameter(valid_21627927, JString, required = false,
                                   default = nil)
  if valid_21627927 != nil:
    section.add "StorageType", valid_21627927
  var valid_21627928 = formData.getOrDefault("Domain")
  valid_21627928 = validateParameter(valid_21627928, JString, required = false,
                                   default = nil)
  if valid_21627928 != nil:
    section.add "Domain", valid_21627928
  var valid_21627929 = formData.getOrDefault("LicenseModel")
  valid_21627929 = validateParameter(valid_21627929, JString, required = false,
                                   default = nil)
  if valid_21627929 != nil:
    section.add "LicenseModel", valid_21627929
  var valid_21627930 = formData.getOrDefault("MonitoringRoleArn")
  valid_21627930 = validateParameter(valid_21627930, JString, required = false,
                                   default = nil)
  if valid_21627930 != nil:
    section.add "MonitoringRoleArn", valid_21627930
  var valid_21627931 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_21627931 = validateParameter(valid_21627931, JBool, required = false,
                                   default = nil)
  if valid_21627931 != nil:
    section.add "AllowMajorVersionUpgrade", valid_21627931
  var valid_21627932 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21627932 = validateParameter(valid_21627932, JString, required = false,
                                   default = nil)
  if valid_21627932 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21627932
  var valid_21627933 = formData.getOrDefault("DBSecurityGroups")
  valid_21627933 = validateParameter(valid_21627933, JArray, required = false,
                                   default = nil)
  if valid_21627933 != nil:
    section.add "DBSecurityGroups", valid_21627933
  var valid_21627934 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21627934 = validateParameter(valid_21627934, JBool, required = false,
                                   default = nil)
  if valid_21627934 != nil:
    section.add "CopyTagsToSnapshot", valid_21627934
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21627935 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21627935 = validateParameter(valid_21627935, JString, required = true,
                                   default = nil)
  if valid_21627935 != nil:
    section.add "DBInstanceIdentifier", valid_21627935
  var valid_21627936 = formData.getOrDefault("OptionGroupName")
  valid_21627936 = validateParameter(valid_21627936, JString, required = false,
                                   default = nil)
  if valid_21627936 != nil:
    section.add "OptionGroupName", valid_21627936
  var valid_21627937 = formData.getOrDefault("DBParameterGroupName")
  valid_21627937 = validateParameter(valid_21627937, JString, required = false,
                                   default = nil)
  if valid_21627937 != nil:
    section.add "DBParameterGroupName", valid_21627937
  var valid_21627938 = formData.getOrDefault("CACertificateIdentifier")
  valid_21627938 = validateParameter(valid_21627938, JString, required = false,
                                   default = nil)
  if valid_21627938 != nil:
    section.add "CACertificateIdentifier", valid_21627938
  var valid_21627939 = formData.getOrDefault("MasterUserPassword")
  valid_21627939 = validateParameter(valid_21627939, JString, required = false,
                                   default = nil)
  if valid_21627939 != nil:
    section.add "MasterUserPassword", valid_21627939
  var valid_21627940 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_21627940 = validateParameter(valid_21627940, JString, required = false,
                                   default = nil)
  if valid_21627940 != nil:
    section.add "NewDBInstanceIdentifier", valid_21627940
  var valid_21627941 = formData.getOrDefault("TdeCredentialPassword")
  valid_21627941 = validateParameter(valid_21627941, JString, required = false,
                                   default = nil)
  if valid_21627941 != nil:
    section.add "TdeCredentialPassword", valid_21627941
  var valid_21627942 = formData.getOrDefault("MonitoringInterval")
  valid_21627942 = validateParameter(valid_21627942, JInt, required = false,
                                   default = nil)
  if valid_21627942 != nil:
    section.add "MonitoringInterval", valid_21627942
  var valid_21627943 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21627943 = validateParameter(valid_21627943, JArray, required = false,
                                   default = nil)
  if valid_21627943 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21627943
  var valid_21627944 = formData.getOrDefault("DomainIAMRoleName")
  valid_21627944 = validateParameter(valid_21627944, JString, required = false,
                                   default = nil)
  if valid_21627944 != nil:
    section.add "DomainIAMRoleName", valid_21627944
  var valid_21627945 = formData.getOrDefault("AllocatedStorage")
  valid_21627945 = validateParameter(valid_21627945, JInt, required = false,
                                   default = nil)
  if valid_21627945 != nil:
    section.add "AllocatedStorage", valid_21627945
  var valid_21627946 = formData.getOrDefault("PromotionTier")
  valid_21627946 = validateParameter(valid_21627946, JInt, required = false,
                                   default = nil)
  if valid_21627946 != nil:
    section.add "PromotionTier", valid_21627946
  var valid_21627947 = formData.getOrDefault("DBInstanceClass")
  valid_21627947 = validateParameter(valid_21627947, JString, required = false,
                                   default = nil)
  if valid_21627947 != nil:
    section.add "DBInstanceClass", valid_21627947
  var valid_21627948 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21627948 = validateParameter(valid_21627948, JBool, required = false,
                                   default = nil)
  if valid_21627948 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21627948
  var valid_21627949 = formData.getOrDefault("PreferredBackupWindow")
  valid_21627949 = validateParameter(valid_21627949, JString, required = false,
                                   default = nil)
  if valid_21627949 != nil:
    section.add "PreferredBackupWindow", valid_21627949
  var valid_21627950 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21627950 = validateParameter(valid_21627950, JBool, required = false,
                                   default = nil)
  if valid_21627950 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21627950
  var valid_21627951 = formData.getOrDefault("EngineVersion")
  valid_21627951 = validateParameter(valid_21627951, JString, required = false,
                                   default = nil)
  if valid_21627951 != nil:
    section.add "EngineVersion", valid_21627951
  var valid_21627952 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21627952 = validateParameter(valid_21627952, JString, required = false,
                                   default = nil)
  if valid_21627952 != nil:
    section.add "PreferredMaintenanceWindow", valid_21627952
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627953: Call_PostModifyDBInstance_21627903; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_21627953.validator(path, query, header, formData, body, _)
  let scheme = call_21627953.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627953.makeUrl(scheme.get, call_21627953.host, call_21627953.base,
                               call_21627953.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627953, uri, valid, _)

proc call*(call_21627954: Call_PostModifyDBInstance_21627903;
          DBInstanceIdentifier: string;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; DBPortNumber: int = 0;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Domain: string = ""; LicenseModel: string = "";
          MonitoringRoleArn: string = ""; AllowMajorVersionUpgrade: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          CACertificateIdentifier: string = ""; MasterUserPassword: string = "";
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          MonitoringInterval: int = 0;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBInstance";
          AllocatedStorage: int = 0; PromotionTier: int = 0;
          DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   StorageType: string
  ##              : Not supported.
  ##   Domain: string
  ##         : Not supported.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EngineVersion: string
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  var query_21627955 = newJObject()
  var formData_21627956 = newJObject()
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_21627956.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                         CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_21627956, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_21627956, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_21627956.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21627956, "Iops", newJInt(Iops))
  add(formData_21627956, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21627956, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_21627956, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21627956, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21627956, "MultiAZ", newJBool(MultiAZ))
  add(formData_21627956, "DBPortNumber", newJInt(DBPortNumber))
  add(formData_21627956, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21627956, "StorageType", newJString(StorageType))
  add(formData_21627956, "Domain", newJString(Domain))
  add(formData_21627956, "LicenseModel", newJString(LicenseModel))
  add(formData_21627956, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_21627956, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_21627956, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_21627956.add "DBSecurityGroups", DBSecurityGroups
  add(formData_21627956, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21627956, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21627956, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21627956, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21627956, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_21627956, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21627956, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(formData_21627956, "TdeCredentialPassword",
      newJString(TdeCredentialPassword))
  add(formData_21627956, "MonitoringInterval", newJInt(MonitoringInterval))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_21627956.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                         CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_21627956, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21627955, "Action", newJString(Action))
  add(formData_21627956, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_21627956, "PromotionTier", newJInt(PromotionTier))
  add(formData_21627956, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21627956, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21627956, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21627956, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_21627956, "EngineVersion", newJString(EngineVersion))
  add(query_21627955, "Version", newJString(Version))
  add(formData_21627956, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21627954.call(nil, query_21627955, nil, formData_21627956, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_21627903(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_21627904, base: "/",
    makeUrl: url_PostModifyDBInstance_21627905,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_21627850 = ref object of OpenApiRestCall_21625418
proc url_GetModifyDBInstance_21627852(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_21627851(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   StorageType: JString
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: JString
  ##         : Not supported.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   Action: JString (required)
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EnablePerformanceInsights: JBool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  section = newJObject()
  var valid_21627853 = query.getOrDefault("MonitoringInterval")
  valid_21627853 = validateParameter(valid_21627853, JInt, required = false,
                                   default = nil)
  if valid_21627853 != nil:
    section.add "MonitoringInterval", valid_21627853
  var valid_21627854 = query.getOrDefault("PromotionTier")
  valid_21627854 = validateParameter(valid_21627854, JInt, required = false,
                                   default = nil)
  if valid_21627854 != nil:
    section.add "PromotionTier", valid_21627854
  var valid_21627855 = query.getOrDefault("AllocatedStorage")
  valid_21627855 = validateParameter(valid_21627855, JInt, required = false,
                                   default = nil)
  if valid_21627855 != nil:
    section.add "AllocatedStorage", valid_21627855
  var valid_21627856 = query.getOrDefault("StorageType")
  valid_21627856 = validateParameter(valid_21627856, JString, required = false,
                                   default = nil)
  if valid_21627856 != nil:
    section.add "StorageType", valid_21627856
  var valid_21627857 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21627857 = validateParameter(valid_21627857, JBool, required = false,
                                   default = nil)
  if valid_21627857 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21627857
  var valid_21627858 = query.getOrDefault("DBSecurityGroups")
  valid_21627858 = validateParameter(valid_21627858, JArray, required = false,
                                   default = nil)
  if valid_21627858 != nil:
    section.add "DBSecurityGroups", valid_21627858
  var valid_21627859 = query.getOrDefault("MasterUserPassword")
  valid_21627859 = validateParameter(valid_21627859, JString, required = false,
                                   default = nil)
  if valid_21627859 != nil:
    section.add "MasterUserPassword", valid_21627859
  var valid_21627860 = query.getOrDefault("MonitoringRoleArn")
  valid_21627860 = validateParameter(valid_21627860, JString, required = false,
                                   default = nil)
  if valid_21627860 != nil:
    section.add "MonitoringRoleArn", valid_21627860
  var valid_21627861 = query.getOrDefault("MultiAZ")
  valid_21627861 = validateParameter(valid_21627861, JBool, required = false,
                                   default = nil)
  if valid_21627861 != nil:
    section.add "MultiAZ", valid_21627861
  var valid_21627862 = query.getOrDefault("TdeCredentialPassword")
  valid_21627862 = validateParameter(valid_21627862, JString, required = false,
                                   default = nil)
  if valid_21627862 != nil:
    section.add "TdeCredentialPassword", valid_21627862
  var valid_21627863 = query.getOrDefault("DomainIAMRoleName")
  valid_21627863 = validateParameter(valid_21627863, JString, required = false,
                                   default = nil)
  if valid_21627863 != nil:
    section.add "DomainIAMRoleName", valid_21627863
  var valid_21627864 = query.getOrDefault("BackupRetentionPeriod")
  valid_21627864 = validateParameter(valid_21627864, JInt, required = false,
                                   default = nil)
  if valid_21627864 != nil:
    section.add "BackupRetentionPeriod", valid_21627864
  var valid_21627865 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21627865 = validateParameter(valid_21627865, JBool, required = false,
                                   default = nil)
  if valid_21627865 != nil:
    section.add "CopyTagsToSnapshot", valid_21627865
  var valid_21627866 = query.getOrDefault("DeletionProtection")
  valid_21627866 = validateParameter(valid_21627866, JBool, required = false,
                                   default = nil)
  if valid_21627866 != nil:
    section.add "DeletionProtection", valid_21627866
  var valid_21627867 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_21627867 = validateParameter(valid_21627867, JString, required = false,
                                   default = nil)
  if valid_21627867 != nil:
    section.add "NewDBInstanceIdentifier", valid_21627867
  var valid_21627868 = query.getOrDefault("DBSubnetGroupName")
  valid_21627868 = validateParameter(valid_21627868, JString, required = false,
                                   default = nil)
  if valid_21627868 != nil:
    section.add "DBSubnetGroupName", valid_21627868
  var valid_21627869 = query.getOrDefault("Domain")
  valid_21627869 = validateParameter(valid_21627869, JString, required = false,
                                   default = nil)
  if valid_21627869 != nil:
    section.add "Domain", valid_21627869
  var valid_21627870 = query.getOrDefault("EngineVersion")
  valid_21627870 = validateParameter(valid_21627870, JString, required = false,
                                   default = nil)
  if valid_21627870 != nil:
    section.add "EngineVersion", valid_21627870
  var valid_21627871 = query.getOrDefault("PreferredBackupWindow")
  valid_21627871 = validateParameter(valid_21627871, JString, required = false,
                                   default = nil)
  if valid_21627871 != nil:
    section.add "PreferredBackupWindow", valid_21627871
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21627872 = query.getOrDefault("DBInstanceIdentifier")
  valid_21627872 = validateParameter(valid_21627872, JString, required = true,
                                   default = nil)
  if valid_21627872 != nil:
    section.add "DBInstanceIdentifier", valid_21627872
  var valid_21627873 = query.getOrDefault("CACertificateIdentifier")
  valid_21627873 = validateParameter(valid_21627873, JString, required = false,
                                   default = nil)
  if valid_21627873 != nil:
    section.add "CACertificateIdentifier", valid_21627873
  var valid_21627874 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21627874 = validateParameter(valid_21627874, JString, required = false,
                                   default = nil)
  if valid_21627874 != nil:
    section.add "PreferredMaintenanceWindow", valid_21627874
  var valid_21627875 = query.getOrDefault("OptionGroupName")
  valid_21627875 = validateParameter(valid_21627875, JString, required = false,
                                   default = nil)
  if valid_21627875 != nil:
    section.add "OptionGroupName", valid_21627875
  var valid_21627876 = query.getOrDefault("Iops")
  valid_21627876 = validateParameter(valid_21627876, JInt, required = false,
                                   default = nil)
  if valid_21627876 != nil:
    section.add "Iops", valid_21627876
  var valid_21627877 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21627877 = validateParameter(valid_21627877, JArray, required = false,
                                   default = nil)
  if valid_21627877 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21627877
  var valid_21627878 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21627878 = validateParameter(valid_21627878, JArray, required = false,
                                   default = nil)
  if valid_21627878 != nil:
    section.add "VpcSecurityGroupIds", valid_21627878
  var valid_21627879 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21627879 = validateParameter(valid_21627879, JArray, required = false,
                                   default = nil)
  if valid_21627879 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21627879
  var valid_21627880 = query.getOrDefault("LicenseModel")
  valid_21627880 = validateParameter(valid_21627880, JString, required = false,
                                   default = nil)
  if valid_21627880 != nil:
    section.add "LicenseModel", valid_21627880
  var valid_21627881 = query.getOrDefault("DBPortNumber")
  valid_21627881 = validateParameter(valid_21627881, JInt, required = false,
                                   default = nil)
  if valid_21627881 != nil:
    section.add "DBPortNumber", valid_21627881
  var valid_21627882 = query.getOrDefault("DBParameterGroupName")
  valid_21627882 = validateParameter(valid_21627882, JString, required = false,
                                   default = nil)
  if valid_21627882 != nil:
    section.add "DBParameterGroupName", valid_21627882
  var valid_21627883 = query.getOrDefault("DBInstanceClass")
  valid_21627883 = validateParameter(valid_21627883, JString, required = false,
                                   default = nil)
  if valid_21627883 != nil:
    section.add "DBInstanceClass", valid_21627883
  var valid_21627884 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21627884 = validateParameter(valid_21627884, JString, required = false,
                                   default = nil)
  if valid_21627884 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21627884
  var valid_21627885 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_21627885 = validateParameter(valid_21627885, JBool, required = false,
                                   default = nil)
  if valid_21627885 != nil:
    section.add "AllowMajorVersionUpgrade", valid_21627885
  var valid_21627886 = query.getOrDefault("Action")
  valid_21627886 = validateParameter(valid_21627886, JString, required = true,
                                   default = newJString("ModifyDBInstance"))
  if valid_21627886 != nil:
    section.add "Action", valid_21627886
  var valid_21627887 = query.getOrDefault("TdeCredentialArn")
  valid_21627887 = validateParameter(valid_21627887, JString, required = false,
                                   default = nil)
  if valid_21627887 != nil:
    section.add "TdeCredentialArn", valid_21627887
  var valid_21627888 = query.getOrDefault("PubliclyAccessible")
  valid_21627888 = validateParameter(valid_21627888, JBool, required = false,
                                   default = nil)
  if valid_21627888 != nil:
    section.add "PubliclyAccessible", valid_21627888
  var valid_21627889 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21627889 = validateParameter(valid_21627889, JBool, required = false,
                                   default = nil)
  if valid_21627889 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21627889
  var valid_21627890 = query.getOrDefault("EnablePerformanceInsights")
  valid_21627890 = validateParameter(valid_21627890, JBool, required = false,
                                   default = nil)
  if valid_21627890 != nil:
    section.add "EnablePerformanceInsights", valid_21627890
  var valid_21627891 = query.getOrDefault("Version")
  valid_21627891 = validateParameter(valid_21627891, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627891 != nil:
    section.add "Version", valid_21627891
  var valid_21627892 = query.getOrDefault("ApplyImmediately")
  valid_21627892 = validateParameter(valid_21627892, JBool, required = false,
                                   default = nil)
  if valid_21627892 != nil:
    section.add "ApplyImmediately", valid_21627892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627893 = header.getOrDefault("X-Amz-Date")
  valid_21627893 = validateParameter(valid_21627893, JString, required = false,
                                   default = nil)
  if valid_21627893 != nil:
    section.add "X-Amz-Date", valid_21627893
  var valid_21627894 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627894 = validateParameter(valid_21627894, JString, required = false,
                                   default = nil)
  if valid_21627894 != nil:
    section.add "X-Amz-Security-Token", valid_21627894
  var valid_21627895 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627895 = validateParameter(valid_21627895, JString, required = false,
                                   default = nil)
  if valid_21627895 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627895
  var valid_21627896 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627896 = validateParameter(valid_21627896, JString, required = false,
                                   default = nil)
  if valid_21627896 != nil:
    section.add "X-Amz-Algorithm", valid_21627896
  var valid_21627897 = header.getOrDefault("X-Amz-Signature")
  valid_21627897 = validateParameter(valid_21627897, JString, required = false,
                                   default = nil)
  if valid_21627897 != nil:
    section.add "X-Amz-Signature", valid_21627897
  var valid_21627898 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627898 = validateParameter(valid_21627898, JString, required = false,
                                   default = nil)
  if valid_21627898 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627898
  var valid_21627899 = header.getOrDefault("X-Amz-Credential")
  valid_21627899 = validateParameter(valid_21627899, JString, required = false,
                                   default = nil)
  if valid_21627899 != nil:
    section.add "X-Amz-Credential", valid_21627899
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627900: Call_GetModifyDBInstance_21627850; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_21627900.validator(path, query, header, formData, body, _)
  let scheme = call_21627900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627900.makeUrl(scheme.get, call_21627900.host, call_21627900.base,
                               call_21627900.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627900, uri, valid, _)

proc call*(call_21627901: Call_GetModifyDBInstance_21627850;
          DBInstanceIdentifier: string; MonitoringInterval: int = 0;
          PromotionTier: int = 0; AllocatedStorage: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          DBSecurityGroups: JsonNode = nil; MasterUserPassword: string = "";
          MonitoringRoleArn: string = ""; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; NewDBInstanceIdentifier: string = "";
          DBSubnetGroupName: string = ""; Domain: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          CACertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = ""; OptionGroupName: string = "";
          Iops: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          LicenseModel: string = ""; DBPortNumber: int = 0;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          AllowMajorVersionUpgrade: bool = false;
          Action: string = "ModifyDBInstance"; TdeCredentialArn: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   StorageType: string
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: string
  ##         : Not supported.
  ##   EngineVersion: string
  ##                : The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              :  <i>(Not supported by Neptune)</i> 
  ##   AllowMajorVersionUpgrade: bool
  ##                           : Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
  ##   Action: string (required)
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   EnablePerformanceInsights: bool
  ##                            :  <i>(Not supported by Neptune)</i> 
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  var query_21627902 = newJObject()
  add(query_21627902, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_21627902, "PromotionTier", newJInt(PromotionTier))
  add(query_21627902, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_21627902, "StorageType", newJString(StorageType))
  add(query_21627902, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if DBSecurityGroups != nil:
    query_21627902.add "DBSecurityGroups", DBSecurityGroups
  add(query_21627902, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21627902, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21627902, "MultiAZ", newJBool(MultiAZ))
  add(query_21627902, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_21627902, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21627902, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21627902, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21627902, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21627902, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_21627902, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21627902, "Domain", newJString(Domain))
  add(query_21627902, "EngineVersion", newJString(EngineVersion))
  add(query_21627902, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21627902, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21627902, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(query_21627902, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21627902, "OptionGroupName", newJString(OptionGroupName))
  add(query_21627902, "Iops", newJInt(Iops))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_21627902.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                      CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_21627902.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_21627902.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                      CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_21627902, "LicenseModel", newJString(LicenseModel))
  add(query_21627902, "DBPortNumber", newJInt(DBPortNumber))
  add(query_21627902, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21627902, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21627902, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_21627902, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(query_21627902, "Action", newJString(Action))
  add(query_21627902, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_21627902, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21627902, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21627902, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_21627902, "Version", newJString(Version))
  add(query_21627902, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_21627901.call(nil, query_21627902, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_21627850(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_21627851, base: "/",
    makeUrl: url_GetModifyDBInstance_21627852,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_21627974 = ref object of OpenApiRestCall_21625418
proc url_PostModifyDBParameterGroup_21627976(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_21627975(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627977 = query.getOrDefault("Action")
  valid_21627977 = validateParameter(valid_21627977, JString, required = true, default = newJString(
      "ModifyDBParameterGroup"))
  if valid_21627977 != nil:
    section.add "Action", valid_21627977
  var valid_21627978 = query.getOrDefault("Version")
  valid_21627978 = validateParameter(valid_21627978, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627978 != nil:
    section.add "Version", valid_21627978
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627979 = header.getOrDefault("X-Amz-Date")
  valid_21627979 = validateParameter(valid_21627979, JString, required = false,
                                   default = nil)
  if valid_21627979 != nil:
    section.add "X-Amz-Date", valid_21627979
  var valid_21627980 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627980 = validateParameter(valid_21627980, JString, required = false,
                                   default = nil)
  if valid_21627980 != nil:
    section.add "X-Amz-Security-Token", valid_21627980
  var valid_21627981 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627981 = validateParameter(valid_21627981, JString, required = false,
                                   default = nil)
  if valid_21627981 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627981
  var valid_21627982 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627982 = validateParameter(valid_21627982, JString, required = false,
                                   default = nil)
  if valid_21627982 != nil:
    section.add "X-Amz-Algorithm", valid_21627982
  var valid_21627983 = header.getOrDefault("X-Amz-Signature")
  valid_21627983 = validateParameter(valid_21627983, JString, required = false,
                                   default = nil)
  if valid_21627983 != nil:
    section.add "X-Amz-Signature", valid_21627983
  var valid_21627984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627984 = validateParameter(valid_21627984, JString, required = false,
                                   default = nil)
  if valid_21627984 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627984
  var valid_21627985 = header.getOrDefault("X-Amz-Credential")
  valid_21627985 = validateParameter(valid_21627985, JString, required = false,
                                   default = nil)
  if valid_21627985 != nil:
    section.add "X-Amz-Credential", valid_21627985
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627986 = formData.getOrDefault("DBParameterGroupName")
  valid_21627986 = validateParameter(valid_21627986, JString, required = true,
                                   default = nil)
  if valid_21627986 != nil:
    section.add "DBParameterGroupName", valid_21627986
  var valid_21627987 = formData.getOrDefault("Parameters")
  valid_21627987 = validateParameter(valid_21627987, JArray, required = true,
                                   default = nil)
  if valid_21627987 != nil:
    section.add "Parameters", valid_21627987
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627988: Call_PostModifyDBParameterGroup_21627974;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21627988.validator(path, query, header, formData, body, _)
  let scheme = call_21627988.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627988.makeUrl(scheme.get, call_21627988.host, call_21627988.base,
                               call_21627988.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627988, uri, valid, _)

proc call*(call_21627989: Call_PostModifyDBParameterGroup_21627974;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627990 = newJObject()
  var formData_21627991 = newJObject()
  add(formData_21627991, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_21627991.add "Parameters", Parameters
  add(query_21627990, "Action", newJString(Action))
  add(query_21627990, "Version", newJString(Version))
  result = call_21627989.call(nil, query_21627990, nil, formData_21627991, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_21627974(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_21627975, base: "/",
    makeUrl: url_PostModifyDBParameterGroup_21627976,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_21627957 = ref object of OpenApiRestCall_21625418
proc url_GetModifyDBParameterGroup_21627959(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_21627958(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627960 = query.getOrDefault("DBParameterGroupName")
  valid_21627960 = validateParameter(valid_21627960, JString, required = true,
                                   default = nil)
  if valid_21627960 != nil:
    section.add "DBParameterGroupName", valid_21627960
  var valid_21627961 = query.getOrDefault("Parameters")
  valid_21627961 = validateParameter(valid_21627961, JArray, required = true,
                                   default = nil)
  if valid_21627961 != nil:
    section.add "Parameters", valid_21627961
  var valid_21627962 = query.getOrDefault("Action")
  valid_21627962 = validateParameter(valid_21627962, JString, required = true, default = newJString(
      "ModifyDBParameterGroup"))
  if valid_21627962 != nil:
    section.add "Action", valid_21627962
  var valid_21627963 = query.getOrDefault("Version")
  valid_21627963 = validateParameter(valid_21627963, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627963 != nil:
    section.add "Version", valid_21627963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627964 = header.getOrDefault("X-Amz-Date")
  valid_21627964 = validateParameter(valid_21627964, JString, required = false,
                                   default = nil)
  if valid_21627964 != nil:
    section.add "X-Amz-Date", valid_21627964
  var valid_21627965 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627965 = validateParameter(valid_21627965, JString, required = false,
                                   default = nil)
  if valid_21627965 != nil:
    section.add "X-Amz-Security-Token", valid_21627965
  var valid_21627966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627966 = validateParameter(valid_21627966, JString, required = false,
                                   default = nil)
  if valid_21627966 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627966
  var valid_21627967 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627967 = validateParameter(valid_21627967, JString, required = false,
                                   default = nil)
  if valid_21627967 != nil:
    section.add "X-Amz-Algorithm", valid_21627967
  var valid_21627968 = header.getOrDefault("X-Amz-Signature")
  valid_21627968 = validateParameter(valid_21627968, JString, required = false,
                                   default = nil)
  if valid_21627968 != nil:
    section.add "X-Amz-Signature", valid_21627968
  var valid_21627969 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627969 = validateParameter(valid_21627969, JString, required = false,
                                   default = nil)
  if valid_21627969 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627969
  var valid_21627970 = header.getOrDefault("X-Amz-Credential")
  valid_21627970 = validateParameter(valid_21627970, JString, required = false,
                                   default = nil)
  if valid_21627970 != nil:
    section.add "X-Amz-Credential", valid_21627970
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627971: Call_GetModifyDBParameterGroup_21627957;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21627971.validator(path, query, header, formData, body, _)
  let scheme = call_21627971.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627971.makeUrl(scheme.get, call_21627971.host, call_21627971.base,
                               call_21627971.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627971, uri, valid, _)

proc call*(call_21627972: Call_GetModifyDBParameterGroup_21627957;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627973 = newJObject()
  add(query_21627973, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_21627973.add "Parameters", Parameters
  add(query_21627973, "Action", newJString(Action))
  add(query_21627973, "Version", newJString(Version))
  result = call_21627972.call(nil, query_21627973, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_21627957(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_21627958, base: "/",
    makeUrl: url_GetModifyDBParameterGroup_21627959,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_21628010 = ref object of OpenApiRestCall_21625418
proc url_PostModifyDBSubnetGroup_21628012(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_21628011(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628013 = query.getOrDefault("Action")
  valid_21628013 = validateParameter(valid_21628013, JString, required = true,
                                   default = newJString("ModifyDBSubnetGroup"))
  if valid_21628013 != nil:
    section.add "Action", valid_21628013
  var valid_21628014 = query.getOrDefault("Version")
  valid_21628014 = validateParameter(valid_21628014, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628014 != nil:
    section.add "Version", valid_21628014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628015 = header.getOrDefault("X-Amz-Date")
  valid_21628015 = validateParameter(valid_21628015, JString, required = false,
                                   default = nil)
  if valid_21628015 != nil:
    section.add "X-Amz-Date", valid_21628015
  var valid_21628016 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628016 = validateParameter(valid_21628016, JString, required = false,
                                   default = nil)
  if valid_21628016 != nil:
    section.add "X-Amz-Security-Token", valid_21628016
  var valid_21628017 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628017 = validateParameter(valid_21628017, JString, required = false,
                                   default = nil)
  if valid_21628017 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628017
  var valid_21628018 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628018 = validateParameter(valid_21628018, JString, required = false,
                                   default = nil)
  if valid_21628018 != nil:
    section.add "X-Amz-Algorithm", valid_21628018
  var valid_21628019 = header.getOrDefault("X-Amz-Signature")
  valid_21628019 = validateParameter(valid_21628019, JString, required = false,
                                   default = nil)
  if valid_21628019 != nil:
    section.add "X-Amz-Signature", valid_21628019
  var valid_21628020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628020 = validateParameter(valid_21628020, JString, required = false,
                                   default = nil)
  if valid_21628020 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628020
  var valid_21628021 = header.getOrDefault("X-Amz-Credential")
  valid_21628021 = validateParameter(valid_21628021, JString, required = false,
                                   default = nil)
  if valid_21628021 != nil:
    section.add "X-Amz-Credential", valid_21628021
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_21628022 = formData.getOrDefault("DBSubnetGroupName")
  valid_21628022 = validateParameter(valid_21628022, JString, required = true,
                                   default = nil)
  if valid_21628022 != nil:
    section.add "DBSubnetGroupName", valid_21628022
  var valid_21628023 = formData.getOrDefault("SubnetIds")
  valid_21628023 = validateParameter(valid_21628023, JArray, required = true,
                                   default = nil)
  if valid_21628023 != nil:
    section.add "SubnetIds", valid_21628023
  var valid_21628024 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_21628024 = validateParameter(valid_21628024, JString, required = false,
                                   default = nil)
  if valid_21628024 != nil:
    section.add "DBSubnetGroupDescription", valid_21628024
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628025: Call_PostModifyDBSubnetGroup_21628010;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21628025.validator(path, query, header, formData, body, _)
  let scheme = call_21628025.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628025.makeUrl(scheme.get, call_21628025.host, call_21628025.base,
                               call_21628025.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628025, uri, valid, _)

proc call*(call_21628026: Call_PostModifyDBSubnetGroup_21628010;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21628027 = newJObject()
  var formData_21628028 = newJObject()
  add(formData_21628028, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_21628028.add "SubnetIds", SubnetIds
  add(query_21628027, "Action", newJString(Action))
  add(formData_21628028, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21628027, "Version", newJString(Version))
  result = call_21628026.call(nil, query_21628027, nil, formData_21628028, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_21628010(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_21628011, base: "/",
    makeUrl: url_PostModifyDBSubnetGroup_21628012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_21627992 = ref object of OpenApiRestCall_21625418
proc url_GetModifyDBSubnetGroup_21627994(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_21627993(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627995 = query.getOrDefault("Action")
  valid_21627995 = validateParameter(valid_21627995, JString, required = true,
                                   default = newJString("ModifyDBSubnetGroup"))
  if valid_21627995 != nil:
    section.add "Action", valid_21627995
  var valid_21627996 = query.getOrDefault("DBSubnetGroupName")
  valid_21627996 = validateParameter(valid_21627996, JString, required = true,
                                   default = nil)
  if valid_21627996 != nil:
    section.add "DBSubnetGroupName", valid_21627996
  var valid_21627997 = query.getOrDefault("SubnetIds")
  valid_21627997 = validateParameter(valid_21627997, JArray, required = true,
                                   default = nil)
  if valid_21627997 != nil:
    section.add "SubnetIds", valid_21627997
  var valid_21627998 = query.getOrDefault("DBSubnetGroupDescription")
  valid_21627998 = validateParameter(valid_21627998, JString, required = false,
                                   default = nil)
  if valid_21627998 != nil:
    section.add "DBSubnetGroupDescription", valid_21627998
  var valid_21627999 = query.getOrDefault("Version")
  valid_21627999 = validateParameter(valid_21627999, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627999 != nil:
    section.add "Version", valid_21627999
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628000 = header.getOrDefault("X-Amz-Date")
  valid_21628000 = validateParameter(valid_21628000, JString, required = false,
                                   default = nil)
  if valid_21628000 != nil:
    section.add "X-Amz-Date", valid_21628000
  var valid_21628001 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628001 = validateParameter(valid_21628001, JString, required = false,
                                   default = nil)
  if valid_21628001 != nil:
    section.add "X-Amz-Security-Token", valid_21628001
  var valid_21628002 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628002 = validateParameter(valid_21628002, JString, required = false,
                                   default = nil)
  if valid_21628002 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628002
  var valid_21628003 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628003 = validateParameter(valid_21628003, JString, required = false,
                                   default = nil)
  if valid_21628003 != nil:
    section.add "X-Amz-Algorithm", valid_21628003
  var valid_21628004 = header.getOrDefault("X-Amz-Signature")
  valid_21628004 = validateParameter(valid_21628004, JString, required = false,
                                   default = nil)
  if valid_21628004 != nil:
    section.add "X-Amz-Signature", valid_21628004
  var valid_21628005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628005 = validateParameter(valid_21628005, JString, required = false,
                                   default = nil)
  if valid_21628005 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628005
  var valid_21628006 = header.getOrDefault("X-Amz-Credential")
  valid_21628006 = validateParameter(valid_21628006, JString, required = false,
                                   default = nil)
  if valid_21628006 != nil:
    section.add "X-Amz-Credential", valid_21628006
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628007: Call_GetModifyDBSubnetGroup_21627992;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21628007.validator(path, query, header, formData, body, _)
  let scheme = call_21628007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628007.makeUrl(scheme.get, call_21628007.host, call_21628007.base,
                               call_21628007.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628007, uri, valid, _)

proc call*(call_21628008: Call_GetModifyDBSubnetGroup_21627992;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21628009 = newJObject()
  add(query_21628009, "Action", newJString(Action))
  add(query_21628009, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_21628009.add "SubnetIds", SubnetIds
  add(query_21628009, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21628009, "Version", newJString(Version))
  result = call_21628008.call(nil, query_21628009, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_21627992(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_21627993, base: "/",
    makeUrl: url_GetModifyDBSubnetGroup_21627994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_21628049 = ref object of OpenApiRestCall_21625418
proc url_PostModifyEventSubscription_21628051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_21628050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628052 = query.getOrDefault("Action")
  valid_21628052 = validateParameter(valid_21628052, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_21628052 != nil:
    section.add "Action", valid_21628052
  var valid_21628053 = query.getOrDefault("Version")
  valid_21628053 = validateParameter(valid_21628053, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628053 != nil:
    section.add "Version", valid_21628053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628054 = header.getOrDefault("X-Amz-Date")
  valid_21628054 = validateParameter(valid_21628054, JString, required = false,
                                   default = nil)
  if valid_21628054 != nil:
    section.add "X-Amz-Date", valid_21628054
  var valid_21628055 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628055 = validateParameter(valid_21628055, JString, required = false,
                                   default = nil)
  if valid_21628055 != nil:
    section.add "X-Amz-Security-Token", valid_21628055
  var valid_21628056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628056 = validateParameter(valid_21628056, JString, required = false,
                                   default = nil)
  if valid_21628056 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628056
  var valid_21628057 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628057 = validateParameter(valid_21628057, JString, required = false,
                                   default = nil)
  if valid_21628057 != nil:
    section.add "X-Amz-Algorithm", valid_21628057
  var valid_21628058 = header.getOrDefault("X-Amz-Signature")
  valid_21628058 = validateParameter(valid_21628058, JString, required = false,
                                   default = nil)
  if valid_21628058 != nil:
    section.add "X-Amz-Signature", valid_21628058
  var valid_21628059 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628059 = validateParameter(valid_21628059, JString, required = false,
                                   default = nil)
  if valid_21628059 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628059
  var valid_21628060 = header.getOrDefault("X-Amz-Credential")
  valid_21628060 = validateParameter(valid_21628060, JString, required = false,
                                   default = nil)
  if valid_21628060 != nil:
    section.add "X-Amz-Credential", valid_21628060
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_21628061 = formData.getOrDefault("Enabled")
  valid_21628061 = validateParameter(valid_21628061, JBool, required = false,
                                   default = nil)
  if valid_21628061 != nil:
    section.add "Enabled", valid_21628061
  var valid_21628062 = formData.getOrDefault("EventCategories")
  valid_21628062 = validateParameter(valid_21628062, JArray, required = false,
                                   default = nil)
  if valid_21628062 != nil:
    section.add "EventCategories", valid_21628062
  var valid_21628063 = formData.getOrDefault("SnsTopicArn")
  valid_21628063 = validateParameter(valid_21628063, JString, required = false,
                                   default = nil)
  if valid_21628063 != nil:
    section.add "SnsTopicArn", valid_21628063
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_21628064 = formData.getOrDefault("SubscriptionName")
  valid_21628064 = validateParameter(valid_21628064, JString, required = true,
                                   default = nil)
  if valid_21628064 != nil:
    section.add "SubscriptionName", valid_21628064
  var valid_21628065 = formData.getOrDefault("SourceType")
  valid_21628065 = validateParameter(valid_21628065, JString, required = false,
                                   default = nil)
  if valid_21628065 != nil:
    section.add "SourceType", valid_21628065
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628066: Call_PostModifyEventSubscription_21628049;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_21628066.validator(path, query, header, formData, body, _)
  let scheme = call_21628066.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628066.makeUrl(scheme.get, call_21628066.host, call_21628066.base,
                               call_21628066.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628066, uri, valid, _)

proc call*(call_21628067: Call_PostModifyEventSubscription_21628049;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Action: string = "ModifyEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_21628068 = newJObject()
  var formData_21628069 = newJObject()
  add(formData_21628069, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_21628069.add "EventCategories", EventCategories
  add(formData_21628069, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_21628069, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628068, "Action", newJString(Action))
  add(query_21628068, "Version", newJString(Version))
  add(formData_21628069, "SourceType", newJString(SourceType))
  result = call_21628067.call(nil, query_21628068, nil, formData_21628069, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_21628049(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_21628050, base: "/",
    makeUrl: url_PostModifyEventSubscription_21628051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_21628029 = ref object of OpenApiRestCall_21625418
proc url_GetModifyEventSubscription_21628031(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_21628030(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628032 = query.getOrDefault("SourceType")
  valid_21628032 = validateParameter(valid_21628032, JString, required = false,
                                   default = nil)
  if valid_21628032 != nil:
    section.add "SourceType", valid_21628032
  var valid_21628033 = query.getOrDefault("Enabled")
  valid_21628033 = validateParameter(valid_21628033, JBool, required = false,
                                   default = nil)
  if valid_21628033 != nil:
    section.add "Enabled", valid_21628033
  var valid_21628034 = query.getOrDefault("Action")
  valid_21628034 = validateParameter(valid_21628034, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_21628034 != nil:
    section.add "Action", valid_21628034
  var valid_21628035 = query.getOrDefault("SnsTopicArn")
  valid_21628035 = validateParameter(valid_21628035, JString, required = false,
                                   default = nil)
  if valid_21628035 != nil:
    section.add "SnsTopicArn", valid_21628035
  var valid_21628036 = query.getOrDefault("EventCategories")
  valid_21628036 = validateParameter(valid_21628036, JArray, required = false,
                                   default = nil)
  if valid_21628036 != nil:
    section.add "EventCategories", valid_21628036
  var valid_21628037 = query.getOrDefault("SubscriptionName")
  valid_21628037 = validateParameter(valid_21628037, JString, required = true,
                                   default = nil)
  if valid_21628037 != nil:
    section.add "SubscriptionName", valid_21628037
  var valid_21628038 = query.getOrDefault("Version")
  valid_21628038 = validateParameter(valid_21628038, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628038 != nil:
    section.add "Version", valid_21628038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628039 = header.getOrDefault("X-Amz-Date")
  valid_21628039 = validateParameter(valid_21628039, JString, required = false,
                                   default = nil)
  if valid_21628039 != nil:
    section.add "X-Amz-Date", valid_21628039
  var valid_21628040 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628040 = validateParameter(valid_21628040, JString, required = false,
                                   default = nil)
  if valid_21628040 != nil:
    section.add "X-Amz-Security-Token", valid_21628040
  var valid_21628041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628041 = validateParameter(valid_21628041, JString, required = false,
                                   default = nil)
  if valid_21628041 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628041
  var valid_21628042 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628042 = validateParameter(valid_21628042, JString, required = false,
                                   default = nil)
  if valid_21628042 != nil:
    section.add "X-Amz-Algorithm", valid_21628042
  var valid_21628043 = header.getOrDefault("X-Amz-Signature")
  valid_21628043 = validateParameter(valid_21628043, JString, required = false,
                                   default = nil)
  if valid_21628043 != nil:
    section.add "X-Amz-Signature", valid_21628043
  var valid_21628044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628044 = validateParameter(valid_21628044, JString, required = false,
                                   default = nil)
  if valid_21628044 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628044
  var valid_21628045 = header.getOrDefault("X-Amz-Credential")
  valid_21628045 = validateParameter(valid_21628045, JString, required = false,
                                   default = nil)
  if valid_21628045 != nil:
    section.add "X-Amz-Credential", valid_21628045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628046: Call_GetModifyEventSubscription_21628029;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_21628046.validator(path, query, header, formData, body, _)
  let scheme = call_21628046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628046.makeUrl(scheme.get, call_21628046.host, call_21628046.base,
                               call_21628046.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628046, uri, valid, _)

proc call*(call_21628047: Call_GetModifyEventSubscription_21628029;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   Version: string (required)
  var query_21628048 = newJObject()
  add(query_21628048, "SourceType", newJString(SourceType))
  add(query_21628048, "Enabled", newJBool(Enabled))
  add(query_21628048, "Action", newJString(Action))
  add(query_21628048, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_21628048.add "EventCategories", EventCategories
  add(query_21628048, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628048, "Version", newJString(Version))
  result = call_21628047.call(nil, query_21628048, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_21628029(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_21628030, base: "/",
    makeUrl: url_GetModifyEventSubscription_21628031,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_21628086 = ref object of OpenApiRestCall_21625418
proc url_PostPromoteReadReplicaDBCluster_21628088(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_21628087(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628089 = query.getOrDefault("Action")
  valid_21628089 = validateParameter(valid_21628089, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_21628089 != nil:
    section.add "Action", valid_21628089
  var valid_21628090 = query.getOrDefault("Version")
  valid_21628090 = validateParameter(valid_21628090, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628090 != nil:
    section.add "Version", valid_21628090
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628091 = header.getOrDefault("X-Amz-Date")
  valid_21628091 = validateParameter(valid_21628091, JString, required = false,
                                   default = nil)
  if valid_21628091 != nil:
    section.add "X-Amz-Date", valid_21628091
  var valid_21628092 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628092 = validateParameter(valid_21628092, JString, required = false,
                                   default = nil)
  if valid_21628092 != nil:
    section.add "X-Amz-Security-Token", valid_21628092
  var valid_21628093 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628093 = validateParameter(valid_21628093, JString, required = false,
                                   default = nil)
  if valid_21628093 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628093
  var valid_21628094 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628094 = validateParameter(valid_21628094, JString, required = false,
                                   default = nil)
  if valid_21628094 != nil:
    section.add "X-Amz-Algorithm", valid_21628094
  var valid_21628095 = header.getOrDefault("X-Amz-Signature")
  valid_21628095 = validateParameter(valid_21628095, JString, required = false,
                                   default = nil)
  if valid_21628095 != nil:
    section.add "X-Amz-Signature", valid_21628095
  var valid_21628096 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628096 = validateParameter(valid_21628096, JString, required = false,
                                   default = nil)
  if valid_21628096 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628096
  var valid_21628097 = header.getOrDefault("X-Amz-Credential")
  valid_21628097 = validateParameter(valid_21628097, JString, required = false,
                                   default = nil)
  if valid_21628097 != nil:
    section.add "X-Amz-Credential", valid_21628097
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628098 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628098 = validateParameter(valid_21628098, JString, required = true,
                                   default = nil)
  if valid_21628098 != nil:
    section.add "DBClusterIdentifier", valid_21628098
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628099: Call_PostPromoteReadReplicaDBCluster_21628086;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Not supported.
  ## 
  let valid = call_21628099.validator(path, query, header, formData, body, _)
  let scheme = call_21628099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628099.makeUrl(scheme.get, call_21628099.host, call_21628099.base,
                               call_21628099.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628099, uri, valid, _)

proc call*(call_21628100: Call_PostPromoteReadReplicaDBCluster_21628086;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## Not supported.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Version: string (required)
  var query_21628101 = newJObject()
  var formData_21628102 = newJObject()
  add(query_21628101, "Action", newJString(Action))
  add(formData_21628102, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628101, "Version", newJString(Version))
  result = call_21628100.call(nil, query_21628101, nil, formData_21628102, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_21628086(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_21628087, base: "/",
    makeUrl: url_PostPromoteReadReplicaDBCluster_21628088,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_21628070 = ref object of OpenApiRestCall_21625418
proc url_GetPromoteReadReplicaDBCluster_21628072(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_21628071(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628073 = query.getOrDefault("DBClusterIdentifier")
  valid_21628073 = validateParameter(valid_21628073, JString, required = true,
                                   default = nil)
  if valid_21628073 != nil:
    section.add "DBClusterIdentifier", valid_21628073
  var valid_21628074 = query.getOrDefault("Action")
  valid_21628074 = validateParameter(valid_21628074, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_21628074 != nil:
    section.add "Action", valid_21628074
  var valid_21628075 = query.getOrDefault("Version")
  valid_21628075 = validateParameter(valid_21628075, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628075 != nil:
    section.add "Version", valid_21628075
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628076 = header.getOrDefault("X-Amz-Date")
  valid_21628076 = validateParameter(valid_21628076, JString, required = false,
                                   default = nil)
  if valid_21628076 != nil:
    section.add "X-Amz-Date", valid_21628076
  var valid_21628077 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628077 = validateParameter(valid_21628077, JString, required = false,
                                   default = nil)
  if valid_21628077 != nil:
    section.add "X-Amz-Security-Token", valid_21628077
  var valid_21628078 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628078 = validateParameter(valid_21628078, JString, required = false,
                                   default = nil)
  if valid_21628078 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628078
  var valid_21628079 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628079 = validateParameter(valid_21628079, JString, required = false,
                                   default = nil)
  if valid_21628079 != nil:
    section.add "X-Amz-Algorithm", valid_21628079
  var valid_21628080 = header.getOrDefault("X-Amz-Signature")
  valid_21628080 = validateParameter(valid_21628080, JString, required = false,
                                   default = nil)
  if valid_21628080 != nil:
    section.add "X-Amz-Signature", valid_21628080
  var valid_21628081 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628081 = validateParameter(valid_21628081, JString, required = false,
                                   default = nil)
  if valid_21628081 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628081
  var valid_21628082 = header.getOrDefault("X-Amz-Credential")
  valid_21628082 = validateParameter(valid_21628082, JString, required = false,
                                   default = nil)
  if valid_21628082 != nil:
    section.add "X-Amz-Credential", valid_21628082
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628083: Call_GetPromoteReadReplicaDBCluster_21628070;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Not supported.
  ## 
  let valid = call_21628083.validator(path, query, header, formData, body, _)
  let scheme = call_21628083.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628083.makeUrl(scheme.get, call_21628083.host, call_21628083.base,
                               call_21628083.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628083, uri, valid, _)

proc call*(call_21628084: Call_GetPromoteReadReplicaDBCluster_21628070;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628085 = newJObject()
  add(query_21628085, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628085, "Action", newJString(Action))
  add(query_21628085, "Version", newJString(Version))
  result = call_21628084.call(nil, query_21628085, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_21628070(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_21628071, base: "/",
    makeUrl: url_GetPromoteReadReplicaDBCluster_21628072,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_21628120 = ref object of OpenApiRestCall_21625418
proc url_PostRebootDBInstance_21628122(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_21628121(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628123 = query.getOrDefault("Action")
  valid_21628123 = validateParameter(valid_21628123, JString, required = true,
                                   default = newJString("RebootDBInstance"))
  if valid_21628123 != nil:
    section.add "Action", valid_21628123
  var valid_21628124 = query.getOrDefault("Version")
  valid_21628124 = validateParameter(valid_21628124, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628124 != nil:
    section.add "Version", valid_21628124
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628125 = header.getOrDefault("X-Amz-Date")
  valid_21628125 = validateParameter(valid_21628125, JString, required = false,
                                   default = nil)
  if valid_21628125 != nil:
    section.add "X-Amz-Date", valid_21628125
  var valid_21628126 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628126 = validateParameter(valid_21628126, JString, required = false,
                                   default = nil)
  if valid_21628126 != nil:
    section.add "X-Amz-Security-Token", valid_21628126
  var valid_21628127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628127 = validateParameter(valid_21628127, JString, required = false,
                                   default = nil)
  if valid_21628127 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628127
  var valid_21628128 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628128 = validateParameter(valid_21628128, JString, required = false,
                                   default = nil)
  if valid_21628128 != nil:
    section.add "X-Amz-Algorithm", valid_21628128
  var valid_21628129 = header.getOrDefault("X-Amz-Signature")
  valid_21628129 = validateParameter(valid_21628129, JString, required = false,
                                   default = nil)
  if valid_21628129 != nil:
    section.add "X-Amz-Signature", valid_21628129
  var valid_21628130 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628130 = validateParameter(valid_21628130, JString, required = false,
                                   default = nil)
  if valid_21628130 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628130
  var valid_21628131 = header.getOrDefault("X-Amz-Credential")
  valid_21628131 = validateParameter(valid_21628131, JString, required = false,
                                   default = nil)
  if valid_21628131 != nil:
    section.add "X-Amz-Credential", valid_21628131
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21628132 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21628132 = validateParameter(valid_21628132, JString, required = true,
                                   default = nil)
  if valid_21628132 != nil:
    section.add "DBInstanceIdentifier", valid_21628132
  var valid_21628133 = formData.getOrDefault("ForceFailover")
  valid_21628133 = validateParameter(valid_21628133, JBool, required = false,
                                   default = nil)
  if valid_21628133 != nil:
    section.add "ForceFailover", valid_21628133
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628134: Call_PostRebootDBInstance_21628120; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_21628134.validator(path, query, header, formData, body, _)
  let scheme = call_21628134.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628134.makeUrl(scheme.get, call_21628134.host, call_21628134.base,
                               call_21628134.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628134, uri, valid, _)

proc call*(call_21628135: Call_PostRebootDBInstance_21628120;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: string (required)
  var query_21628136 = newJObject()
  var formData_21628137 = newJObject()
  add(formData_21628137, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21628136, "Action", newJString(Action))
  add(formData_21628137, "ForceFailover", newJBool(ForceFailover))
  add(query_21628136, "Version", newJString(Version))
  result = call_21628135.call(nil, query_21628136, nil, formData_21628137, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_21628120(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_21628121, base: "/",
    makeUrl: url_PostRebootDBInstance_21628122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_21628103 = ref object of OpenApiRestCall_21625418
proc url_GetRebootDBInstance_21628105(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_21628104(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_21628106 = query.getOrDefault("Action")
  valid_21628106 = validateParameter(valid_21628106, JString, required = true,
                                   default = newJString("RebootDBInstance"))
  if valid_21628106 != nil:
    section.add "Action", valid_21628106
  var valid_21628107 = query.getOrDefault("ForceFailover")
  valid_21628107 = validateParameter(valid_21628107, JBool, required = false,
                                   default = nil)
  if valid_21628107 != nil:
    section.add "ForceFailover", valid_21628107
  var valid_21628108 = query.getOrDefault("Version")
  valid_21628108 = validateParameter(valid_21628108, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628108 != nil:
    section.add "Version", valid_21628108
  var valid_21628109 = query.getOrDefault("DBInstanceIdentifier")
  valid_21628109 = validateParameter(valid_21628109, JString, required = true,
                                   default = nil)
  if valid_21628109 != nil:
    section.add "DBInstanceIdentifier", valid_21628109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628110 = header.getOrDefault("X-Amz-Date")
  valid_21628110 = validateParameter(valid_21628110, JString, required = false,
                                   default = nil)
  if valid_21628110 != nil:
    section.add "X-Amz-Date", valid_21628110
  var valid_21628111 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628111 = validateParameter(valid_21628111, JString, required = false,
                                   default = nil)
  if valid_21628111 != nil:
    section.add "X-Amz-Security-Token", valid_21628111
  var valid_21628112 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628112 = validateParameter(valid_21628112, JString, required = false,
                                   default = nil)
  if valid_21628112 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628112
  var valid_21628113 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628113 = validateParameter(valid_21628113, JString, required = false,
                                   default = nil)
  if valid_21628113 != nil:
    section.add "X-Amz-Algorithm", valid_21628113
  var valid_21628114 = header.getOrDefault("X-Amz-Signature")
  valid_21628114 = validateParameter(valid_21628114, JString, required = false,
                                   default = nil)
  if valid_21628114 != nil:
    section.add "X-Amz-Signature", valid_21628114
  var valid_21628115 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628115 = validateParameter(valid_21628115, JString, required = false,
                                   default = nil)
  if valid_21628115 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628115
  var valid_21628116 = header.getOrDefault("X-Amz-Credential")
  valid_21628116 = validateParameter(valid_21628116, JString, required = false,
                                   default = nil)
  if valid_21628116 != nil:
    section.add "X-Amz-Credential", valid_21628116
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628117: Call_GetRebootDBInstance_21628103; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_21628117.validator(path, query, header, formData, body, _)
  let scheme = call_21628117.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628117.makeUrl(scheme.get, call_21628117.host, call_21628117.base,
                               call_21628117.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628117, uri, valid, _)

proc call*(call_21628118: Call_GetRebootDBInstance_21628103;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_21628119 = newJObject()
  add(query_21628119, "Action", newJString(Action))
  add(query_21628119, "ForceFailover", newJBool(ForceFailover))
  add(query_21628119, "Version", newJString(Version))
  add(query_21628119, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21628118.call(nil, query_21628119, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_21628103(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_21628104, base: "/",
    makeUrl: url_GetRebootDBInstance_21628105,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_21628155 = ref object of OpenApiRestCall_21625418
proc url_PostRemoveRoleFromDBCluster_21628157(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_21628156(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628158 = query.getOrDefault("Action")
  valid_21628158 = validateParameter(valid_21628158, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_21628158 != nil:
    section.add "Action", valid_21628158
  var valid_21628159 = query.getOrDefault("Version")
  valid_21628159 = validateParameter(valid_21628159, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628159 != nil:
    section.add "Version", valid_21628159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628160 = header.getOrDefault("X-Amz-Date")
  valid_21628160 = validateParameter(valid_21628160, JString, required = false,
                                   default = nil)
  if valid_21628160 != nil:
    section.add "X-Amz-Date", valid_21628160
  var valid_21628161 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628161 = validateParameter(valid_21628161, JString, required = false,
                                   default = nil)
  if valid_21628161 != nil:
    section.add "X-Amz-Security-Token", valid_21628161
  var valid_21628162 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628162 = validateParameter(valid_21628162, JString, required = false,
                                   default = nil)
  if valid_21628162 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628162
  var valid_21628163 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628163 = validateParameter(valid_21628163, JString, required = false,
                                   default = nil)
  if valid_21628163 != nil:
    section.add "X-Amz-Algorithm", valid_21628163
  var valid_21628164 = header.getOrDefault("X-Amz-Signature")
  valid_21628164 = validateParameter(valid_21628164, JString, required = false,
                                   default = nil)
  if valid_21628164 != nil:
    section.add "X-Amz-Signature", valid_21628164
  var valid_21628165 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628165 = validateParameter(valid_21628165, JString, required = false,
                                   default = nil)
  if valid_21628165 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628165
  var valid_21628166 = header.getOrDefault("X-Amz-Credential")
  valid_21628166 = validateParameter(valid_21628166, JString, required = false,
                                   default = nil)
  if valid_21628166 != nil:
    section.add "X-Amz-Credential", valid_21628166
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_21628167 = formData.getOrDefault("RoleArn")
  valid_21628167 = validateParameter(valid_21628167, JString, required = true,
                                   default = nil)
  if valid_21628167 != nil:
    section.add "RoleArn", valid_21628167
  var valid_21628168 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628168 = validateParameter(valid_21628168, JString, required = true,
                                   default = nil)
  if valid_21628168 != nil:
    section.add "DBClusterIdentifier", valid_21628168
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628169: Call_PostRemoveRoleFromDBCluster_21628155;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_21628169.validator(path, query, header, formData, body, _)
  let scheme = call_21628169.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628169.makeUrl(scheme.get, call_21628169.host, call_21628169.base,
                               call_21628169.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628169, uri, valid, _)

proc call*(call_21628170: Call_PostRemoveRoleFromDBCluster_21628155;
          RoleArn: string; DBClusterIdentifier: string;
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Version: string (required)
  var query_21628171 = newJObject()
  var formData_21628172 = newJObject()
  add(formData_21628172, "RoleArn", newJString(RoleArn))
  add(query_21628171, "Action", newJString(Action))
  add(formData_21628172, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628171, "Version", newJString(Version))
  result = call_21628170.call(nil, query_21628171, nil, formData_21628172, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_21628155(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_21628156, base: "/",
    makeUrl: url_PostRemoveRoleFromDBCluster_21628157,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_21628138 = ref object of OpenApiRestCall_21625418
proc url_GetRemoveRoleFromDBCluster_21628140(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_21628139(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628141 = query.getOrDefault("DBClusterIdentifier")
  valid_21628141 = validateParameter(valid_21628141, JString, required = true,
                                   default = nil)
  if valid_21628141 != nil:
    section.add "DBClusterIdentifier", valid_21628141
  var valid_21628142 = query.getOrDefault("RoleArn")
  valid_21628142 = validateParameter(valid_21628142, JString, required = true,
                                   default = nil)
  if valid_21628142 != nil:
    section.add "RoleArn", valid_21628142
  var valid_21628143 = query.getOrDefault("Action")
  valid_21628143 = validateParameter(valid_21628143, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_21628143 != nil:
    section.add "Action", valid_21628143
  var valid_21628144 = query.getOrDefault("Version")
  valid_21628144 = validateParameter(valid_21628144, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628144 != nil:
    section.add "Version", valid_21628144
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628145 = header.getOrDefault("X-Amz-Date")
  valid_21628145 = validateParameter(valid_21628145, JString, required = false,
                                   default = nil)
  if valid_21628145 != nil:
    section.add "X-Amz-Date", valid_21628145
  var valid_21628146 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628146 = validateParameter(valid_21628146, JString, required = false,
                                   default = nil)
  if valid_21628146 != nil:
    section.add "X-Amz-Security-Token", valid_21628146
  var valid_21628147 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628147 = validateParameter(valid_21628147, JString, required = false,
                                   default = nil)
  if valid_21628147 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628147
  var valid_21628148 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628148 = validateParameter(valid_21628148, JString, required = false,
                                   default = nil)
  if valid_21628148 != nil:
    section.add "X-Amz-Algorithm", valid_21628148
  var valid_21628149 = header.getOrDefault("X-Amz-Signature")
  valid_21628149 = validateParameter(valid_21628149, JString, required = false,
                                   default = nil)
  if valid_21628149 != nil:
    section.add "X-Amz-Signature", valid_21628149
  var valid_21628150 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628150 = validateParameter(valid_21628150, JString, required = false,
                                   default = nil)
  if valid_21628150 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628150
  var valid_21628151 = header.getOrDefault("X-Amz-Credential")
  valid_21628151 = validateParameter(valid_21628151, JString, required = false,
                                   default = nil)
  if valid_21628151 != nil:
    section.add "X-Amz-Credential", valid_21628151
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628152: Call_GetRemoveRoleFromDBCluster_21628138;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_21628152.validator(path, query, header, formData, body, _)
  let scheme = call_21628152.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628152.makeUrl(scheme.get, call_21628152.host, call_21628152.base,
                               call_21628152.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628152, uri, valid, _)

proc call*(call_21628153: Call_GetRemoveRoleFromDBCluster_21628138;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628154 = newJObject()
  add(query_21628154, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628154, "RoleArn", newJString(RoleArn))
  add(query_21628154, "Action", newJString(Action))
  add(query_21628154, "Version", newJString(Version))
  result = call_21628153.call(nil, query_21628154, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_21628138(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_21628139, base: "/",
    makeUrl: url_GetRemoveRoleFromDBCluster_21628140,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_21628190 = ref object of OpenApiRestCall_21625418
proc url_PostRemoveSourceIdentifierFromSubscription_21628192(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_21628191(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628193 = query.getOrDefault("Action")
  valid_21628193 = validateParameter(valid_21628193, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_21628193 != nil:
    section.add "Action", valid_21628193
  var valid_21628194 = query.getOrDefault("Version")
  valid_21628194 = validateParameter(valid_21628194, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628194 != nil:
    section.add "Version", valid_21628194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628195 = header.getOrDefault("X-Amz-Date")
  valid_21628195 = validateParameter(valid_21628195, JString, required = false,
                                   default = nil)
  if valid_21628195 != nil:
    section.add "X-Amz-Date", valid_21628195
  var valid_21628196 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628196 = validateParameter(valid_21628196, JString, required = false,
                                   default = nil)
  if valid_21628196 != nil:
    section.add "X-Amz-Security-Token", valid_21628196
  var valid_21628197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628197 = validateParameter(valid_21628197, JString, required = false,
                                   default = nil)
  if valid_21628197 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628197
  var valid_21628198 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628198 = validateParameter(valid_21628198, JString, required = false,
                                   default = nil)
  if valid_21628198 != nil:
    section.add "X-Amz-Algorithm", valid_21628198
  var valid_21628199 = header.getOrDefault("X-Amz-Signature")
  valid_21628199 = validateParameter(valid_21628199, JString, required = false,
                                   default = nil)
  if valid_21628199 != nil:
    section.add "X-Amz-Signature", valid_21628199
  var valid_21628200 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628200 = validateParameter(valid_21628200, JString, required = false,
                                   default = nil)
  if valid_21628200 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628200
  var valid_21628201 = header.getOrDefault("X-Amz-Credential")
  valid_21628201 = validateParameter(valid_21628201, JString, required = false,
                                   default = nil)
  if valid_21628201 != nil:
    section.add "X-Amz-Credential", valid_21628201
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_21628202 = formData.getOrDefault("SourceIdentifier")
  valid_21628202 = validateParameter(valid_21628202, JString, required = true,
                                   default = nil)
  if valid_21628202 != nil:
    section.add "SourceIdentifier", valid_21628202
  var valid_21628203 = formData.getOrDefault("SubscriptionName")
  valid_21628203 = validateParameter(valid_21628203, JString, required = true,
                                   default = nil)
  if valid_21628203 != nil:
    section.add "SubscriptionName", valid_21628203
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628204: Call_PostRemoveSourceIdentifierFromSubscription_21628190;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_21628204.validator(path, query, header, formData, body, _)
  let scheme = call_21628204.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628204.makeUrl(scheme.get, call_21628204.host, call_21628204.base,
                               call_21628204.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628204, uri, valid, _)

proc call*(call_21628205: Call_PostRemoveSourceIdentifierFromSubscription_21628190;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628206 = newJObject()
  var formData_21628207 = newJObject()
  add(formData_21628207, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_21628207, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628206, "Action", newJString(Action))
  add(query_21628206, "Version", newJString(Version))
  result = call_21628205.call(nil, query_21628206, nil, formData_21628207, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_21628190(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_21628191,
    base: "/", makeUrl: url_PostRemoveSourceIdentifierFromSubscription_21628192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_21628173 = ref object of OpenApiRestCall_21625418
proc url_GetRemoveSourceIdentifierFromSubscription_21628175(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_21628174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628176 = query.getOrDefault("Action")
  valid_21628176 = validateParameter(valid_21628176, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_21628176 != nil:
    section.add "Action", valid_21628176
  var valid_21628177 = query.getOrDefault("SourceIdentifier")
  valid_21628177 = validateParameter(valid_21628177, JString, required = true,
                                   default = nil)
  if valid_21628177 != nil:
    section.add "SourceIdentifier", valid_21628177
  var valid_21628178 = query.getOrDefault("SubscriptionName")
  valid_21628178 = validateParameter(valid_21628178, JString, required = true,
                                   default = nil)
  if valid_21628178 != nil:
    section.add "SubscriptionName", valid_21628178
  var valid_21628179 = query.getOrDefault("Version")
  valid_21628179 = validateParameter(valid_21628179, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628179 != nil:
    section.add "Version", valid_21628179
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628180 = header.getOrDefault("X-Amz-Date")
  valid_21628180 = validateParameter(valid_21628180, JString, required = false,
                                   default = nil)
  if valid_21628180 != nil:
    section.add "X-Amz-Date", valid_21628180
  var valid_21628181 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628181 = validateParameter(valid_21628181, JString, required = false,
                                   default = nil)
  if valid_21628181 != nil:
    section.add "X-Amz-Security-Token", valid_21628181
  var valid_21628182 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628182 = validateParameter(valid_21628182, JString, required = false,
                                   default = nil)
  if valid_21628182 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628182
  var valid_21628183 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628183 = validateParameter(valid_21628183, JString, required = false,
                                   default = nil)
  if valid_21628183 != nil:
    section.add "X-Amz-Algorithm", valid_21628183
  var valid_21628184 = header.getOrDefault("X-Amz-Signature")
  valid_21628184 = validateParameter(valid_21628184, JString, required = false,
                                   default = nil)
  if valid_21628184 != nil:
    section.add "X-Amz-Signature", valid_21628184
  var valid_21628185 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628185 = validateParameter(valid_21628185, JString, required = false,
                                   default = nil)
  if valid_21628185 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628185
  var valid_21628186 = header.getOrDefault("X-Amz-Credential")
  valid_21628186 = validateParameter(valid_21628186, JString, required = false,
                                   default = nil)
  if valid_21628186 != nil:
    section.add "X-Amz-Credential", valid_21628186
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628187: Call_GetRemoveSourceIdentifierFromSubscription_21628173;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_21628187.validator(path, query, header, formData, body, _)
  let scheme = call_21628187.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628187.makeUrl(scheme.get, call_21628187.host, call_21628187.base,
                               call_21628187.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628187, uri, valid, _)

proc call*(call_21628188: Call_GetRemoveSourceIdentifierFromSubscription_21628173;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Version: string (required)
  var query_21628189 = newJObject()
  add(query_21628189, "Action", newJString(Action))
  add(query_21628189, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21628189, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628189, "Version", newJString(Version))
  result = call_21628188.call(nil, query_21628189, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_21628173(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_21628174,
    base: "/", makeUrl: url_GetRemoveSourceIdentifierFromSubscription_21628175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_21628225 = ref object of OpenApiRestCall_21625418
proc url_PostRemoveTagsFromResource_21628227(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_21628226(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628228 = query.getOrDefault("Action")
  valid_21628228 = validateParameter(valid_21628228, JString, required = true, default = newJString(
      "RemoveTagsFromResource"))
  if valid_21628228 != nil:
    section.add "Action", valid_21628228
  var valid_21628229 = query.getOrDefault("Version")
  valid_21628229 = validateParameter(valid_21628229, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628229 != nil:
    section.add "Version", valid_21628229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628230 = header.getOrDefault("X-Amz-Date")
  valid_21628230 = validateParameter(valid_21628230, JString, required = false,
                                   default = nil)
  if valid_21628230 != nil:
    section.add "X-Amz-Date", valid_21628230
  var valid_21628231 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628231 = validateParameter(valid_21628231, JString, required = false,
                                   default = nil)
  if valid_21628231 != nil:
    section.add "X-Amz-Security-Token", valid_21628231
  var valid_21628232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628232 = validateParameter(valid_21628232, JString, required = false,
                                   default = nil)
  if valid_21628232 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628232
  var valid_21628233 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628233 = validateParameter(valid_21628233, JString, required = false,
                                   default = nil)
  if valid_21628233 != nil:
    section.add "X-Amz-Algorithm", valid_21628233
  var valid_21628234 = header.getOrDefault("X-Amz-Signature")
  valid_21628234 = validateParameter(valid_21628234, JString, required = false,
                                   default = nil)
  if valid_21628234 != nil:
    section.add "X-Amz-Signature", valid_21628234
  var valid_21628235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628235 = validateParameter(valid_21628235, JString, required = false,
                                   default = nil)
  if valid_21628235 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628235
  var valid_21628236 = header.getOrDefault("X-Amz-Credential")
  valid_21628236 = validateParameter(valid_21628236, JString, required = false,
                                   default = nil)
  if valid_21628236 != nil:
    section.add "X-Amz-Credential", valid_21628236
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_21628237 = formData.getOrDefault("TagKeys")
  valid_21628237 = validateParameter(valid_21628237, JArray, required = true,
                                   default = nil)
  if valid_21628237 != nil:
    section.add "TagKeys", valid_21628237
  var valid_21628238 = formData.getOrDefault("ResourceName")
  valid_21628238 = validateParameter(valid_21628238, JString, required = true,
                                   default = nil)
  if valid_21628238 != nil:
    section.add "ResourceName", valid_21628238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628239: Call_PostRemoveTagsFromResource_21628225;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_21628239.validator(path, query, header, formData, body, _)
  let scheme = call_21628239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628239.makeUrl(scheme.get, call_21628239.host, call_21628239.base,
                               call_21628239.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628239, uri, valid, _)

proc call*(call_21628240: Call_PostRemoveTagsFromResource_21628225;
          TagKeys: JsonNode; ResourceName: string;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_21628241 = newJObject()
  var formData_21628242 = newJObject()
  add(query_21628241, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21628242.add "TagKeys", TagKeys
  add(formData_21628242, "ResourceName", newJString(ResourceName))
  add(query_21628241, "Version", newJString(Version))
  result = call_21628240.call(nil, query_21628241, nil, formData_21628242, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_21628225(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_21628226, base: "/",
    makeUrl: url_PostRemoveTagsFromResource_21628227,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_21628208 = ref object of OpenApiRestCall_21625418
proc url_GetRemoveTagsFromResource_21628210(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_21628209(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_21628211 = query.getOrDefault("ResourceName")
  valid_21628211 = validateParameter(valid_21628211, JString, required = true,
                                   default = nil)
  if valid_21628211 != nil:
    section.add "ResourceName", valid_21628211
  var valid_21628212 = query.getOrDefault("Action")
  valid_21628212 = validateParameter(valid_21628212, JString, required = true, default = newJString(
      "RemoveTagsFromResource"))
  if valid_21628212 != nil:
    section.add "Action", valid_21628212
  var valid_21628213 = query.getOrDefault("TagKeys")
  valid_21628213 = validateParameter(valid_21628213, JArray, required = true,
                                   default = nil)
  if valid_21628213 != nil:
    section.add "TagKeys", valid_21628213
  var valid_21628214 = query.getOrDefault("Version")
  valid_21628214 = validateParameter(valid_21628214, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628214 != nil:
    section.add "Version", valid_21628214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628215 = header.getOrDefault("X-Amz-Date")
  valid_21628215 = validateParameter(valid_21628215, JString, required = false,
                                   default = nil)
  if valid_21628215 != nil:
    section.add "X-Amz-Date", valid_21628215
  var valid_21628216 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628216 = validateParameter(valid_21628216, JString, required = false,
                                   default = nil)
  if valid_21628216 != nil:
    section.add "X-Amz-Security-Token", valid_21628216
  var valid_21628217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628217 = validateParameter(valid_21628217, JString, required = false,
                                   default = nil)
  if valid_21628217 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628217
  var valid_21628218 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628218 = validateParameter(valid_21628218, JString, required = false,
                                   default = nil)
  if valid_21628218 != nil:
    section.add "X-Amz-Algorithm", valid_21628218
  var valid_21628219 = header.getOrDefault("X-Amz-Signature")
  valid_21628219 = validateParameter(valid_21628219, JString, required = false,
                                   default = nil)
  if valid_21628219 != nil:
    section.add "X-Amz-Signature", valid_21628219
  var valid_21628220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628220 = validateParameter(valid_21628220, JString, required = false,
                                   default = nil)
  if valid_21628220 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628220
  var valid_21628221 = header.getOrDefault("X-Amz-Credential")
  valid_21628221 = validateParameter(valid_21628221, JString, required = false,
                                   default = nil)
  if valid_21628221 != nil:
    section.add "X-Amz-Credential", valid_21628221
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628222: Call_GetRemoveTagsFromResource_21628208;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_21628222.validator(path, query, header, formData, body, _)
  let scheme = call_21628222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628222.makeUrl(scheme.get, call_21628222.host, call_21628222.base,
                               call_21628222.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628222, uri, valid, _)

proc call*(call_21628223: Call_GetRemoveTagsFromResource_21628208;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: string (required)
  var query_21628224 = newJObject()
  add(query_21628224, "ResourceName", newJString(ResourceName))
  add(query_21628224, "Action", newJString(Action))
  if TagKeys != nil:
    query_21628224.add "TagKeys", TagKeys
  add(query_21628224, "Version", newJString(Version))
  result = call_21628223.call(nil, query_21628224, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_21628208(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_21628209, base: "/",
    makeUrl: url_GetRemoveTagsFromResource_21628210,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_21628261 = ref object of OpenApiRestCall_21625418
proc url_PostResetDBClusterParameterGroup_21628263(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_21628262(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628264 = query.getOrDefault("Action")
  valid_21628264 = validateParameter(valid_21628264, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_21628264 != nil:
    section.add "Action", valid_21628264
  var valid_21628265 = query.getOrDefault("Version")
  valid_21628265 = validateParameter(valid_21628265, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628265 != nil:
    section.add "Version", valid_21628265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628266 = header.getOrDefault("X-Amz-Date")
  valid_21628266 = validateParameter(valid_21628266, JString, required = false,
                                   default = nil)
  if valid_21628266 != nil:
    section.add "X-Amz-Date", valid_21628266
  var valid_21628267 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628267 = validateParameter(valid_21628267, JString, required = false,
                                   default = nil)
  if valid_21628267 != nil:
    section.add "X-Amz-Security-Token", valid_21628267
  var valid_21628268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628268 = validateParameter(valid_21628268, JString, required = false,
                                   default = nil)
  if valid_21628268 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628268
  var valid_21628269 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628269 = validateParameter(valid_21628269, JString, required = false,
                                   default = nil)
  if valid_21628269 != nil:
    section.add "X-Amz-Algorithm", valid_21628269
  var valid_21628270 = header.getOrDefault("X-Amz-Signature")
  valid_21628270 = validateParameter(valid_21628270, JString, required = false,
                                   default = nil)
  if valid_21628270 != nil:
    section.add "X-Amz-Signature", valid_21628270
  var valid_21628271 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628271 = validateParameter(valid_21628271, JString, required = false,
                                   default = nil)
  if valid_21628271 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628271
  var valid_21628272 = header.getOrDefault("X-Amz-Credential")
  valid_21628272 = validateParameter(valid_21628272, JString, required = false,
                                   default = nil)
  if valid_21628272 != nil:
    section.add "X-Amz-Credential", valid_21628272
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  section = newJObject()
  var valid_21628273 = formData.getOrDefault("Parameters")
  valid_21628273 = validateParameter(valid_21628273, JArray, required = false,
                                   default = nil)
  if valid_21628273 != nil:
    section.add "Parameters", valid_21628273
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21628274 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21628274 = validateParameter(valid_21628274, JString, required = true,
                                   default = nil)
  if valid_21628274 != nil:
    section.add "DBClusterParameterGroupName", valid_21628274
  var valid_21628275 = formData.getOrDefault("ResetAllParameters")
  valid_21628275 = validateParameter(valid_21628275, JBool, required = false,
                                   default = nil)
  if valid_21628275 != nil:
    section.add "ResetAllParameters", valid_21628275
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628276: Call_PostResetDBClusterParameterGroup_21628261;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_21628276.validator(path, query, header, formData, body, _)
  let scheme = call_21628276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628276.makeUrl(scheme.get, call_21628276.host, call_21628276.base,
                               call_21628276.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628276, uri, valid, _)

proc call*(call_21628277: Call_PostResetDBClusterParameterGroup_21628261;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_21628278 = newJObject()
  var formData_21628279 = newJObject()
  if Parameters != nil:
    formData_21628279.add "Parameters", Parameters
  add(query_21628278, "Action", newJString(Action))
  add(formData_21628279, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21628279, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21628278, "Version", newJString(Version))
  result = call_21628277.call(nil, query_21628278, nil, formData_21628279, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_21628261(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_21628262, base: "/",
    makeUrl: url_PostResetDBClusterParameterGroup_21628263,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_21628243 = ref object of OpenApiRestCall_21625418
proc url_GetResetDBClusterParameterGroup_21628245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_21628244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21628246 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21628246 = validateParameter(valid_21628246, JString, required = true,
                                   default = nil)
  if valid_21628246 != nil:
    section.add "DBClusterParameterGroupName", valid_21628246
  var valid_21628247 = query.getOrDefault("Parameters")
  valid_21628247 = validateParameter(valid_21628247, JArray, required = false,
                                   default = nil)
  if valid_21628247 != nil:
    section.add "Parameters", valid_21628247
  var valid_21628248 = query.getOrDefault("Action")
  valid_21628248 = validateParameter(valid_21628248, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_21628248 != nil:
    section.add "Action", valid_21628248
  var valid_21628249 = query.getOrDefault("ResetAllParameters")
  valid_21628249 = validateParameter(valid_21628249, JBool, required = false,
                                   default = nil)
  if valid_21628249 != nil:
    section.add "ResetAllParameters", valid_21628249
  var valid_21628250 = query.getOrDefault("Version")
  valid_21628250 = validateParameter(valid_21628250, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628250 != nil:
    section.add "Version", valid_21628250
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628251 = header.getOrDefault("X-Amz-Date")
  valid_21628251 = validateParameter(valid_21628251, JString, required = false,
                                   default = nil)
  if valid_21628251 != nil:
    section.add "X-Amz-Date", valid_21628251
  var valid_21628252 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628252 = validateParameter(valid_21628252, JString, required = false,
                                   default = nil)
  if valid_21628252 != nil:
    section.add "X-Amz-Security-Token", valid_21628252
  var valid_21628253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628253 = validateParameter(valid_21628253, JString, required = false,
                                   default = nil)
  if valid_21628253 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628253
  var valid_21628254 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628254 = validateParameter(valid_21628254, JString, required = false,
                                   default = nil)
  if valid_21628254 != nil:
    section.add "X-Amz-Algorithm", valid_21628254
  var valid_21628255 = header.getOrDefault("X-Amz-Signature")
  valid_21628255 = validateParameter(valid_21628255, JString, required = false,
                                   default = nil)
  if valid_21628255 != nil:
    section.add "X-Amz-Signature", valid_21628255
  var valid_21628256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628256 = validateParameter(valid_21628256, JString, required = false,
                                   default = nil)
  if valid_21628256 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628256
  var valid_21628257 = header.getOrDefault("X-Amz-Credential")
  valid_21628257 = validateParameter(valid_21628257, JString, required = false,
                                   default = nil)
  if valid_21628257 != nil:
    section.add "X-Amz-Credential", valid_21628257
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628258: Call_GetResetDBClusterParameterGroup_21628243;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_21628258.validator(path, query, header, formData, body, _)
  let scheme = call_21628258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628258.makeUrl(scheme.get, call_21628258.host, call_21628258.base,
                               call_21628258.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628258, uri, valid, _)

proc call*(call_21628259: Call_GetResetDBClusterParameterGroup_21628243;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_21628260 = newJObject()
  add(query_21628260, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_21628260.add "Parameters", Parameters
  add(query_21628260, "Action", newJString(Action))
  add(query_21628260, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21628260, "Version", newJString(Version))
  result = call_21628259.call(nil, query_21628260, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_21628243(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_21628244, base: "/",
    makeUrl: url_GetResetDBClusterParameterGroup_21628245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_21628298 = ref object of OpenApiRestCall_21625418
proc url_PostResetDBParameterGroup_21628300(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_21628299(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628301 = query.getOrDefault("Action")
  valid_21628301 = validateParameter(valid_21628301, JString, required = true, default = newJString(
      "ResetDBParameterGroup"))
  if valid_21628301 != nil:
    section.add "Action", valid_21628301
  var valid_21628302 = query.getOrDefault("Version")
  valid_21628302 = validateParameter(valid_21628302, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628302 != nil:
    section.add "Version", valid_21628302
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628303 = header.getOrDefault("X-Amz-Date")
  valid_21628303 = validateParameter(valid_21628303, JString, required = false,
                                   default = nil)
  if valid_21628303 != nil:
    section.add "X-Amz-Date", valid_21628303
  var valid_21628304 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628304 = validateParameter(valid_21628304, JString, required = false,
                                   default = nil)
  if valid_21628304 != nil:
    section.add "X-Amz-Security-Token", valid_21628304
  var valid_21628305 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628305 = validateParameter(valid_21628305, JString, required = false,
                                   default = nil)
  if valid_21628305 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628305
  var valid_21628306 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628306 = validateParameter(valid_21628306, JString, required = false,
                                   default = nil)
  if valid_21628306 != nil:
    section.add "X-Amz-Algorithm", valid_21628306
  var valid_21628307 = header.getOrDefault("X-Amz-Signature")
  valid_21628307 = validateParameter(valid_21628307, JString, required = false,
                                   default = nil)
  if valid_21628307 != nil:
    section.add "X-Amz-Signature", valid_21628307
  var valid_21628308 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628308 = validateParameter(valid_21628308, JString, required = false,
                                   default = nil)
  if valid_21628308 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628308
  var valid_21628309 = header.getOrDefault("X-Amz-Credential")
  valid_21628309 = validateParameter(valid_21628309, JString, required = false,
                                   default = nil)
  if valid_21628309 != nil:
    section.add "X-Amz-Credential", valid_21628309
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21628310 = formData.getOrDefault("DBParameterGroupName")
  valid_21628310 = validateParameter(valid_21628310, JString, required = true,
                                   default = nil)
  if valid_21628310 != nil:
    section.add "DBParameterGroupName", valid_21628310
  var valid_21628311 = formData.getOrDefault("Parameters")
  valid_21628311 = validateParameter(valid_21628311, JArray, required = false,
                                   default = nil)
  if valid_21628311 != nil:
    section.add "Parameters", valid_21628311
  var valid_21628312 = formData.getOrDefault("ResetAllParameters")
  valid_21628312 = validateParameter(valid_21628312, JBool, required = false,
                                   default = nil)
  if valid_21628312 != nil:
    section.add "ResetAllParameters", valid_21628312
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628313: Call_PostResetDBParameterGroup_21628298;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_21628313.validator(path, query, header, formData, body, _)
  let scheme = call_21628313.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628313.makeUrl(scheme.get, call_21628313.host, call_21628313.base,
                               call_21628313.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628313, uri, valid, _)

proc call*(call_21628314: Call_PostResetDBParameterGroup_21628298;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_21628315 = newJObject()
  var formData_21628316 = newJObject()
  add(formData_21628316, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_21628316.add "Parameters", Parameters
  add(query_21628315, "Action", newJString(Action))
  add(formData_21628316, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21628315, "Version", newJString(Version))
  result = call_21628314.call(nil, query_21628315, nil, formData_21628316, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_21628298(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_21628299, base: "/",
    makeUrl: url_PostResetDBParameterGroup_21628300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_21628280 = ref object of OpenApiRestCall_21625418
proc url_GetResetDBParameterGroup_21628282(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_21628281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21628283 = query.getOrDefault("DBParameterGroupName")
  valid_21628283 = validateParameter(valid_21628283, JString, required = true,
                                   default = nil)
  if valid_21628283 != nil:
    section.add "DBParameterGroupName", valid_21628283
  var valid_21628284 = query.getOrDefault("Parameters")
  valid_21628284 = validateParameter(valid_21628284, JArray, required = false,
                                   default = nil)
  if valid_21628284 != nil:
    section.add "Parameters", valid_21628284
  var valid_21628285 = query.getOrDefault("Action")
  valid_21628285 = validateParameter(valid_21628285, JString, required = true, default = newJString(
      "ResetDBParameterGroup"))
  if valid_21628285 != nil:
    section.add "Action", valid_21628285
  var valid_21628286 = query.getOrDefault("ResetAllParameters")
  valid_21628286 = validateParameter(valid_21628286, JBool, required = false,
                                   default = nil)
  if valid_21628286 != nil:
    section.add "ResetAllParameters", valid_21628286
  var valid_21628287 = query.getOrDefault("Version")
  valid_21628287 = validateParameter(valid_21628287, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628287 != nil:
    section.add "Version", valid_21628287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628288 = header.getOrDefault("X-Amz-Date")
  valid_21628288 = validateParameter(valid_21628288, JString, required = false,
                                   default = nil)
  if valid_21628288 != nil:
    section.add "X-Amz-Date", valid_21628288
  var valid_21628289 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628289 = validateParameter(valid_21628289, JString, required = false,
                                   default = nil)
  if valid_21628289 != nil:
    section.add "X-Amz-Security-Token", valid_21628289
  var valid_21628290 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628290 = validateParameter(valid_21628290, JString, required = false,
                                   default = nil)
  if valid_21628290 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628290
  var valid_21628291 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628291 = validateParameter(valid_21628291, JString, required = false,
                                   default = nil)
  if valid_21628291 != nil:
    section.add "X-Amz-Algorithm", valid_21628291
  var valid_21628292 = header.getOrDefault("X-Amz-Signature")
  valid_21628292 = validateParameter(valid_21628292, JString, required = false,
                                   default = nil)
  if valid_21628292 != nil:
    section.add "X-Amz-Signature", valid_21628292
  var valid_21628293 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628293 = validateParameter(valid_21628293, JString, required = false,
                                   default = nil)
  if valid_21628293 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628293
  var valid_21628294 = header.getOrDefault("X-Amz-Credential")
  valid_21628294 = validateParameter(valid_21628294, JString, required = false,
                                   default = nil)
  if valid_21628294 != nil:
    section.add "X-Amz-Credential", valid_21628294
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628295: Call_GetResetDBParameterGroup_21628280;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_21628295.validator(path, query, header, formData, body, _)
  let scheme = call_21628295.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628295.makeUrl(scheme.get, call_21628295.host, call_21628295.base,
                               call_21628295.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628295, uri, valid, _)

proc call*(call_21628296: Call_GetResetDBParameterGroup_21628280;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Version: string (required)
  var query_21628297 = newJObject()
  add(query_21628297, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_21628297.add "Parameters", Parameters
  add(query_21628297, "Action", newJString(Action))
  add(query_21628297, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21628297, "Version", newJString(Version))
  result = call_21628296.call(nil, query_21628297, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_21628280(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_21628281, base: "/",
    makeUrl: url_GetResetDBParameterGroup_21628282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_21628348 = ref object of OpenApiRestCall_21625418
proc url_PostRestoreDBClusterFromSnapshot_21628350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_21628349(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628351 = query.getOrDefault("Action")
  valid_21628351 = validateParameter(valid_21628351, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_21628351 != nil:
    section.add "Action", valid_21628351
  var valid_21628352 = query.getOrDefault("Version")
  valid_21628352 = validateParameter(valid_21628352, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628352 != nil:
    section.add "Version", valid_21628352
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628353 = header.getOrDefault("X-Amz-Date")
  valid_21628353 = validateParameter(valid_21628353, JString, required = false,
                                   default = nil)
  if valid_21628353 != nil:
    section.add "X-Amz-Date", valid_21628353
  var valid_21628354 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628354 = validateParameter(valid_21628354, JString, required = false,
                                   default = nil)
  if valid_21628354 != nil:
    section.add "X-Amz-Security-Token", valid_21628354
  var valid_21628355 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628355 = validateParameter(valid_21628355, JString, required = false,
                                   default = nil)
  if valid_21628355 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628355
  var valid_21628356 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628356 = validateParameter(valid_21628356, JString, required = false,
                                   default = nil)
  if valid_21628356 != nil:
    section.add "X-Amz-Algorithm", valid_21628356
  var valid_21628357 = header.getOrDefault("X-Amz-Signature")
  valid_21628357 = validateParameter(valid_21628357, JString, required = false,
                                   default = nil)
  if valid_21628357 != nil:
    section.add "X-Amz-Signature", valid_21628357
  var valid_21628358 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628358 = validateParameter(valid_21628358, JString, required = false,
                                   default = nil)
  if valid_21628358 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628358
  var valid_21628359 = header.getOrDefault("X-Amz-Credential")
  valid_21628359 = validateParameter(valid_21628359, JString, required = false,
                                   default = nil)
  if valid_21628359 != nil:
    section.add "X-Amz-Credential", valid_21628359
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  section = newJObject()
  var valid_21628360 = formData.getOrDefault("Port")
  valid_21628360 = validateParameter(valid_21628360, JInt, required = false,
                                   default = nil)
  if valid_21628360 != nil:
    section.add "Port", valid_21628360
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21628361 = formData.getOrDefault("Engine")
  valid_21628361 = validateParameter(valid_21628361, JString, required = true,
                                   default = nil)
  if valid_21628361 != nil:
    section.add "Engine", valid_21628361
  var valid_21628362 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21628362 = validateParameter(valid_21628362, JArray, required = false,
                                   default = nil)
  if valid_21628362 != nil:
    section.add "VpcSecurityGroupIds", valid_21628362
  var valid_21628363 = formData.getOrDefault("OptionGroupName")
  valid_21628363 = validateParameter(valid_21628363, JString, required = false,
                                   default = nil)
  if valid_21628363 != nil:
    section.add "OptionGroupName", valid_21628363
  var valid_21628364 = formData.getOrDefault("Tags")
  valid_21628364 = validateParameter(valid_21628364, JArray, required = false,
                                   default = nil)
  if valid_21628364 != nil:
    section.add "Tags", valid_21628364
  var valid_21628365 = formData.getOrDefault("DeletionProtection")
  valid_21628365 = validateParameter(valid_21628365, JBool, required = false,
                                   default = nil)
  if valid_21628365 != nil:
    section.add "DeletionProtection", valid_21628365
  var valid_21628366 = formData.getOrDefault("DBSubnetGroupName")
  valid_21628366 = validateParameter(valid_21628366, JString, required = false,
                                   default = nil)
  if valid_21628366 != nil:
    section.add "DBSubnetGroupName", valid_21628366
  var valid_21628367 = formData.getOrDefault("AvailabilityZones")
  valid_21628367 = validateParameter(valid_21628367, JArray, required = false,
                                   default = nil)
  if valid_21628367 != nil:
    section.add "AvailabilityZones", valid_21628367
  var valid_21628368 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21628368 = validateParameter(valid_21628368, JString, required = false,
                                   default = nil)
  if valid_21628368 != nil:
    section.add "DBClusterParameterGroupName", valid_21628368
  var valid_21628369 = formData.getOrDefault("DatabaseName")
  valid_21628369 = validateParameter(valid_21628369, JString, required = false,
                                   default = nil)
  if valid_21628369 != nil:
    section.add "DatabaseName", valid_21628369
  var valid_21628370 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21628370 = validateParameter(valid_21628370, JArray, required = false,
                                   default = nil)
  if valid_21628370 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21628370
  var valid_21628371 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21628371 = validateParameter(valid_21628371, JBool, required = false,
                                   default = nil)
  if valid_21628371 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21628371
  var valid_21628372 = formData.getOrDefault("KmsKeyId")
  valid_21628372 = validateParameter(valid_21628372, JString, required = false,
                                   default = nil)
  if valid_21628372 != nil:
    section.add "KmsKeyId", valid_21628372
  var valid_21628373 = formData.getOrDefault("SnapshotIdentifier")
  valid_21628373 = validateParameter(valid_21628373, JString, required = true,
                                   default = nil)
  if valid_21628373 != nil:
    section.add "SnapshotIdentifier", valid_21628373
  var valid_21628374 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628374 = validateParameter(valid_21628374, JString, required = true,
                                   default = nil)
  if valid_21628374 != nil:
    section.add "DBClusterIdentifier", valid_21628374
  var valid_21628375 = formData.getOrDefault("EngineVersion")
  valid_21628375 = validateParameter(valid_21628375, JString, required = false,
                                   default = nil)
  if valid_21628375 != nil:
    section.add "EngineVersion", valid_21628375
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628376: Call_PostRestoreDBClusterFromSnapshot_21628348;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_21628376.validator(path, query, header, formData, body, _)
  let scheme = call_21628376.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628376.makeUrl(scheme.get, call_21628376.host, call_21628376.base,
                               call_21628376.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628376, uri, valid, _)

proc call*(call_21628377: Call_PostRestoreDBClusterFromSnapshot_21628348;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          OptionGroupName: string = ""; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterFromSnapshot";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : Not supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Version: string (required)
  var query_21628378 = newJObject()
  var formData_21628379 = newJObject()
  add(formData_21628379, "Port", newJInt(Port))
  add(formData_21628379, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_21628379.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21628379, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_21628379.add "Tags", Tags
  add(formData_21628379, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21628379, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21628378, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_21628379.add "AvailabilityZones", AvailabilityZones
  add(formData_21628379, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21628379, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_21628379.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21628379, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21628379, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21628379, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21628379, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21628379, "EngineVersion", newJString(EngineVersion))
  add(query_21628378, "Version", newJString(Version))
  result = call_21628377.call(nil, query_21628378, nil, formData_21628379, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_21628348(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_21628349, base: "/",
    makeUrl: url_PostRestoreDBClusterFromSnapshot_21628350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_21628317 = ref object of OpenApiRestCall_21625418
proc url_GetRestoreDBClusterFromSnapshot_21628319(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_21628318(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21628320 = query.getOrDefault("Engine")
  valid_21628320 = validateParameter(valid_21628320, JString, required = true,
                                   default = nil)
  if valid_21628320 != nil:
    section.add "Engine", valid_21628320
  var valid_21628321 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21628321 = validateParameter(valid_21628321, JString, required = false,
                                   default = nil)
  if valid_21628321 != nil:
    section.add "DBClusterParameterGroupName", valid_21628321
  var valid_21628322 = query.getOrDefault("AvailabilityZones")
  valid_21628322 = validateParameter(valid_21628322, JArray, required = false,
                                   default = nil)
  if valid_21628322 != nil:
    section.add "AvailabilityZones", valid_21628322
  var valid_21628323 = query.getOrDefault("DatabaseName")
  valid_21628323 = validateParameter(valid_21628323, JString, required = false,
                                   default = nil)
  if valid_21628323 != nil:
    section.add "DatabaseName", valid_21628323
  var valid_21628324 = query.getOrDefault("DBClusterIdentifier")
  valid_21628324 = validateParameter(valid_21628324, JString, required = true,
                                   default = nil)
  if valid_21628324 != nil:
    section.add "DBClusterIdentifier", valid_21628324
  var valid_21628325 = query.getOrDefault("OptionGroupName")
  valid_21628325 = validateParameter(valid_21628325, JString, required = false,
                                   default = nil)
  if valid_21628325 != nil:
    section.add "OptionGroupName", valid_21628325
  var valid_21628326 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21628326 = validateParameter(valid_21628326, JBool, required = false,
                                   default = nil)
  if valid_21628326 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21628326
  var valid_21628327 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21628327 = validateParameter(valid_21628327, JArray, required = false,
                                   default = nil)
  if valid_21628327 != nil:
    section.add "VpcSecurityGroupIds", valid_21628327
  var valid_21628328 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21628328 = validateParameter(valid_21628328, JArray, required = false,
                                   default = nil)
  if valid_21628328 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21628328
  var valid_21628329 = query.getOrDefault("Tags")
  valid_21628329 = validateParameter(valid_21628329, JArray, required = false,
                                   default = nil)
  if valid_21628329 != nil:
    section.add "Tags", valid_21628329
  var valid_21628330 = query.getOrDefault("DeletionProtection")
  valid_21628330 = validateParameter(valid_21628330, JBool, required = false,
                                   default = nil)
  if valid_21628330 != nil:
    section.add "DeletionProtection", valid_21628330
  var valid_21628331 = query.getOrDefault("Action")
  valid_21628331 = validateParameter(valid_21628331, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_21628331 != nil:
    section.add "Action", valid_21628331
  var valid_21628332 = query.getOrDefault("DBSubnetGroupName")
  valid_21628332 = validateParameter(valid_21628332, JString, required = false,
                                   default = nil)
  if valid_21628332 != nil:
    section.add "DBSubnetGroupName", valid_21628332
  var valid_21628333 = query.getOrDefault("KmsKeyId")
  valid_21628333 = validateParameter(valid_21628333, JString, required = false,
                                   default = nil)
  if valid_21628333 != nil:
    section.add "KmsKeyId", valid_21628333
  var valid_21628334 = query.getOrDefault("EngineVersion")
  valid_21628334 = validateParameter(valid_21628334, JString, required = false,
                                   default = nil)
  if valid_21628334 != nil:
    section.add "EngineVersion", valid_21628334
  var valid_21628335 = query.getOrDefault("Port")
  valid_21628335 = validateParameter(valid_21628335, JInt, required = false,
                                   default = nil)
  if valid_21628335 != nil:
    section.add "Port", valid_21628335
  var valid_21628336 = query.getOrDefault("SnapshotIdentifier")
  valid_21628336 = validateParameter(valid_21628336, JString, required = true,
                                   default = nil)
  if valid_21628336 != nil:
    section.add "SnapshotIdentifier", valid_21628336
  var valid_21628337 = query.getOrDefault("Version")
  valid_21628337 = validateParameter(valid_21628337, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628337 != nil:
    section.add "Version", valid_21628337
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628338 = header.getOrDefault("X-Amz-Date")
  valid_21628338 = validateParameter(valid_21628338, JString, required = false,
                                   default = nil)
  if valid_21628338 != nil:
    section.add "X-Amz-Date", valid_21628338
  var valid_21628339 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628339 = validateParameter(valid_21628339, JString, required = false,
                                   default = nil)
  if valid_21628339 != nil:
    section.add "X-Amz-Security-Token", valid_21628339
  var valid_21628340 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628340 = validateParameter(valid_21628340, JString, required = false,
                                   default = nil)
  if valid_21628340 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628340
  var valid_21628341 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628341 = validateParameter(valid_21628341, JString, required = false,
                                   default = nil)
  if valid_21628341 != nil:
    section.add "X-Amz-Algorithm", valid_21628341
  var valid_21628342 = header.getOrDefault("X-Amz-Signature")
  valid_21628342 = validateParameter(valid_21628342, JString, required = false,
                                   default = nil)
  if valid_21628342 != nil:
    section.add "X-Amz-Signature", valid_21628342
  var valid_21628343 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628343 = validateParameter(valid_21628343, JString, required = false,
                                   default = nil)
  if valid_21628343 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628343
  var valid_21628344 = header.getOrDefault("X-Amz-Credential")
  valid_21628344 = validateParameter(valid_21628344, JString, required = false,
                                   default = nil)
  if valid_21628344 != nil:
    section.add "X-Amz-Credential", valid_21628344
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628345: Call_GetRestoreDBClusterFromSnapshot_21628317;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_21628345.validator(path, query, header, formData, body, _)
  let scheme = call_21628345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628345.makeUrl(scheme.get, call_21628345.host, call_21628345.base,
                               call_21628345.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628345, uri, valid, _)

proc call*(call_21628346: Call_GetRestoreDBClusterFromSnapshot_21628317;
          Engine: string; DBClusterIdentifier: string; SnapshotIdentifier: string;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromSnapshot";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; Port: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   DatabaseName: string
  ##               : Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: string (required)
  var query_21628347 = newJObject()
  add(query_21628347, "Engine", newJString(Engine))
  add(query_21628347, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_21628347.add "AvailabilityZones", AvailabilityZones
  add(query_21628347, "DatabaseName", newJString(DatabaseName))
  add(query_21628347, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628347, "OptionGroupName", newJString(OptionGroupName))
  add(query_21628347, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_21628347.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21628347.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_21628347.add "Tags", Tags
  add(query_21628347, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21628347, "Action", newJString(Action))
  add(query_21628347, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21628347, "KmsKeyId", newJString(KmsKeyId))
  add(query_21628347, "EngineVersion", newJString(EngineVersion))
  add(query_21628347, "Port", newJInt(Port))
  add(query_21628347, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21628347, "Version", newJString(Version))
  result = call_21628346.call(nil, query_21628347, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_21628317(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_21628318, base: "/",
    makeUrl: url_GetRestoreDBClusterFromSnapshot_21628319,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_21628410 = ref object of OpenApiRestCall_21625418
proc url_PostRestoreDBClusterToPointInTime_21628412(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_21628411(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628413 = query.getOrDefault("Action")
  valid_21628413 = validateParameter(valid_21628413, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_21628413 != nil:
    section.add "Action", valid_21628413
  var valid_21628414 = query.getOrDefault("Version")
  valid_21628414 = validateParameter(valid_21628414, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628414 != nil:
    section.add "Version", valid_21628414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628415 = header.getOrDefault("X-Amz-Date")
  valid_21628415 = validateParameter(valid_21628415, JString, required = false,
                                   default = nil)
  if valid_21628415 != nil:
    section.add "X-Amz-Date", valid_21628415
  var valid_21628416 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628416 = validateParameter(valid_21628416, JString, required = false,
                                   default = nil)
  if valid_21628416 != nil:
    section.add "X-Amz-Security-Token", valid_21628416
  var valid_21628417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628417 = validateParameter(valid_21628417, JString, required = false,
                                   default = nil)
  if valid_21628417 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628417
  var valid_21628418 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628418 = validateParameter(valid_21628418, JString, required = false,
                                   default = nil)
  if valid_21628418 != nil:
    section.add "X-Amz-Algorithm", valid_21628418
  var valid_21628419 = header.getOrDefault("X-Amz-Signature")
  valid_21628419 = validateParameter(valid_21628419, JString, required = false,
                                   default = nil)
  if valid_21628419 != nil:
    section.add "X-Amz-Signature", valid_21628419
  var valid_21628420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628420 = validateParameter(valid_21628420, JString, required = false,
                                   default = nil)
  if valid_21628420 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628420
  var valid_21628421 = header.getOrDefault("X-Amz-Credential")
  valid_21628421 = validateParameter(valid_21628421, JString, required = false,
                                   default = nil)
  if valid_21628421 != nil:
    section.add "X-Amz-Credential", valid_21628421
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_21628422 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_21628422 = validateParameter(valid_21628422, JString, required = true,
                                   default = nil)
  if valid_21628422 != nil:
    section.add "SourceDBClusterIdentifier", valid_21628422
  var valid_21628423 = formData.getOrDefault("UseLatestRestorableTime")
  valid_21628423 = validateParameter(valid_21628423, JBool, required = false,
                                   default = nil)
  if valid_21628423 != nil:
    section.add "UseLatestRestorableTime", valid_21628423
  var valid_21628424 = formData.getOrDefault("Port")
  valid_21628424 = validateParameter(valid_21628424, JInt, required = false,
                                   default = nil)
  if valid_21628424 != nil:
    section.add "Port", valid_21628424
  var valid_21628425 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21628425 = validateParameter(valid_21628425, JArray, required = false,
                                   default = nil)
  if valid_21628425 != nil:
    section.add "VpcSecurityGroupIds", valid_21628425
  var valid_21628426 = formData.getOrDefault("RestoreToTime")
  valid_21628426 = validateParameter(valid_21628426, JString, required = false,
                                   default = nil)
  if valid_21628426 != nil:
    section.add "RestoreToTime", valid_21628426
  var valid_21628427 = formData.getOrDefault("OptionGroupName")
  valid_21628427 = validateParameter(valid_21628427, JString, required = false,
                                   default = nil)
  if valid_21628427 != nil:
    section.add "OptionGroupName", valid_21628427
  var valid_21628428 = formData.getOrDefault("Tags")
  valid_21628428 = validateParameter(valid_21628428, JArray, required = false,
                                   default = nil)
  if valid_21628428 != nil:
    section.add "Tags", valid_21628428
  var valid_21628429 = formData.getOrDefault("DeletionProtection")
  valid_21628429 = validateParameter(valid_21628429, JBool, required = false,
                                   default = nil)
  if valid_21628429 != nil:
    section.add "DeletionProtection", valid_21628429
  var valid_21628430 = formData.getOrDefault("DBSubnetGroupName")
  valid_21628430 = validateParameter(valid_21628430, JString, required = false,
                                   default = nil)
  if valid_21628430 != nil:
    section.add "DBSubnetGroupName", valid_21628430
  var valid_21628431 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21628431 = validateParameter(valid_21628431, JString, required = false,
                                   default = nil)
  if valid_21628431 != nil:
    section.add "DBClusterParameterGroupName", valid_21628431
  var valid_21628432 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21628432 = validateParameter(valid_21628432, JArray, required = false,
                                   default = nil)
  if valid_21628432 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21628432
  var valid_21628433 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21628433 = validateParameter(valid_21628433, JBool, required = false,
                                   default = nil)
  if valid_21628433 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21628433
  var valid_21628434 = formData.getOrDefault("KmsKeyId")
  valid_21628434 = validateParameter(valid_21628434, JString, required = false,
                                   default = nil)
  if valid_21628434 != nil:
    section.add "KmsKeyId", valid_21628434
  var valid_21628435 = formData.getOrDefault("RestoreType")
  valid_21628435 = validateParameter(valid_21628435, JString, required = false,
                                   default = nil)
  if valid_21628435 != nil:
    section.add "RestoreType", valid_21628435
  var valid_21628436 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628436 = validateParameter(valid_21628436, JString, required = true,
                                   default = nil)
  if valid_21628436 != nil:
    section.add "DBClusterIdentifier", valid_21628436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628437: Call_PostRestoreDBClusterToPointInTime_21628410;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_21628437.validator(path, query, header, formData, body, _)
  let scheme = call_21628437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628437.makeUrl(scheme.get, call_21628437.host, call_21628437.base,
                               call_21628437.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628437, uri, valid, _)

proc call*(call_21628438: Call_PostRestoreDBClusterToPointInTime_21628410;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          UseLatestRestorableTime: bool = false; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; RestoreToTime: string = "";
          OptionGroupName: string = ""; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          DBClusterParameterGroupName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  var query_21628439 = newJObject()
  var formData_21628440 = newJObject()
  add(formData_21628440, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_21628440, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_21628440, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21628440.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21628440, "RestoreToTime", newJString(RestoreToTime))
  add(formData_21628440, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_21628440.add "Tags", Tags
  add(formData_21628440, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21628440, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21628439, "Action", newJString(Action))
  add(formData_21628440, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if EnableCloudwatchLogsExports != nil:
    formData_21628440.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21628440, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21628440, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21628440, "RestoreType", newJString(RestoreType))
  add(formData_21628440, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628439, "Version", newJString(Version))
  result = call_21628438.call(nil, query_21628439, nil, formData_21628440, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_21628410(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_21628411, base: "/",
    makeUrl: url_PostRestoreDBClusterToPointInTime_21628412,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_21628380 = ref object of OpenApiRestCall_21625418
proc url_GetRestoreDBClusterToPointInTime_21628382(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_21628381(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628383 = query.getOrDefault("RestoreToTime")
  valid_21628383 = validateParameter(valid_21628383, JString, required = false,
                                   default = nil)
  if valid_21628383 != nil:
    section.add "RestoreToTime", valid_21628383
  var valid_21628384 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21628384 = validateParameter(valid_21628384, JString, required = false,
                                   default = nil)
  if valid_21628384 != nil:
    section.add "DBClusterParameterGroupName", valid_21628384
  var valid_21628385 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21628385 = validateParameter(valid_21628385, JBool, required = false,
                                   default = nil)
  if valid_21628385 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21628385
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628386 = query.getOrDefault("DBClusterIdentifier")
  valid_21628386 = validateParameter(valid_21628386, JString, required = true,
                                   default = nil)
  if valid_21628386 != nil:
    section.add "DBClusterIdentifier", valid_21628386
  var valid_21628387 = query.getOrDefault("OptionGroupName")
  valid_21628387 = validateParameter(valid_21628387, JString, required = false,
                                   default = nil)
  if valid_21628387 != nil:
    section.add "OptionGroupName", valid_21628387
  var valid_21628388 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21628388 = validateParameter(valid_21628388, JArray, required = false,
                                   default = nil)
  if valid_21628388 != nil:
    section.add "VpcSecurityGroupIds", valid_21628388
  var valid_21628389 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21628389 = validateParameter(valid_21628389, JArray, required = false,
                                   default = nil)
  if valid_21628389 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21628389
  var valid_21628390 = query.getOrDefault("Tags")
  valid_21628390 = validateParameter(valid_21628390, JArray, required = false,
                                   default = nil)
  if valid_21628390 != nil:
    section.add "Tags", valid_21628390
  var valid_21628391 = query.getOrDefault("RestoreType")
  valid_21628391 = validateParameter(valid_21628391, JString, required = false,
                                   default = nil)
  if valid_21628391 != nil:
    section.add "RestoreType", valid_21628391
  var valid_21628392 = query.getOrDefault("DeletionProtection")
  valid_21628392 = validateParameter(valid_21628392, JBool, required = false,
                                   default = nil)
  if valid_21628392 != nil:
    section.add "DeletionProtection", valid_21628392
  var valid_21628393 = query.getOrDefault("UseLatestRestorableTime")
  valid_21628393 = validateParameter(valid_21628393, JBool, required = false,
                                   default = nil)
  if valid_21628393 != nil:
    section.add "UseLatestRestorableTime", valid_21628393
  var valid_21628394 = query.getOrDefault("Action")
  valid_21628394 = validateParameter(valid_21628394, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_21628394 != nil:
    section.add "Action", valid_21628394
  var valid_21628395 = query.getOrDefault("DBSubnetGroupName")
  valid_21628395 = validateParameter(valid_21628395, JString, required = false,
                                   default = nil)
  if valid_21628395 != nil:
    section.add "DBSubnetGroupName", valid_21628395
  var valid_21628396 = query.getOrDefault("KmsKeyId")
  valid_21628396 = validateParameter(valid_21628396, JString, required = false,
                                   default = nil)
  if valid_21628396 != nil:
    section.add "KmsKeyId", valid_21628396
  var valid_21628397 = query.getOrDefault("Port")
  valid_21628397 = validateParameter(valid_21628397, JInt, required = false,
                                   default = nil)
  if valid_21628397 != nil:
    section.add "Port", valid_21628397
  var valid_21628398 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_21628398 = validateParameter(valid_21628398, JString, required = true,
                                   default = nil)
  if valid_21628398 != nil:
    section.add "SourceDBClusterIdentifier", valid_21628398
  var valid_21628399 = query.getOrDefault("Version")
  valid_21628399 = validateParameter(valid_21628399, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628399 != nil:
    section.add "Version", valid_21628399
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628400 = header.getOrDefault("X-Amz-Date")
  valid_21628400 = validateParameter(valid_21628400, JString, required = false,
                                   default = nil)
  if valid_21628400 != nil:
    section.add "X-Amz-Date", valid_21628400
  var valid_21628401 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628401 = validateParameter(valid_21628401, JString, required = false,
                                   default = nil)
  if valid_21628401 != nil:
    section.add "X-Amz-Security-Token", valid_21628401
  var valid_21628402 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628402 = validateParameter(valid_21628402, JString, required = false,
                                   default = nil)
  if valid_21628402 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628402
  var valid_21628403 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628403 = validateParameter(valid_21628403, JString, required = false,
                                   default = nil)
  if valid_21628403 != nil:
    section.add "X-Amz-Algorithm", valid_21628403
  var valid_21628404 = header.getOrDefault("X-Amz-Signature")
  valid_21628404 = validateParameter(valid_21628404, JString, required = false,
                                   default = nil)
  if valid_21628404 != nil:
    section.add "X-Amz-Signature", valid_21628404
  var valid_21628405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628405 = validateParameter(valid_21628405, JString, required = false,
                                   default = nil)
  if valid_21628405 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628405
  var valid_21628406 = header.getOrDefault("X-Amz-Credential")
  valid_21628406 = validateParameter(valid_21628406, JString, required = false,
                                   default = nil)
  if valid_21628406 != nil:
    section.add "X-Amz-Credential", valid_21628406
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628407: Call_GetRestoreDBClusterToPointInTime_21628380;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_21628407.validator(path, query, header, formData, body, _)
  let scheme = call_21628407.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628407.makeUrl(scheme.get, call_21628407.host, call_21628407.base,
                               call_21628407.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628407, uri, valid, _)

proc call*(call_21628408: Call_GetRestoreDBClusterToPointInTime_21628380;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreToTime: string = ""; DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          RestoreType: string = ""; DeletionProtection: bool = false;
          UseLatestRestorableTime: bool = false;
          Action: string = "RestoreDBClusterToPointInTime";
          DBSubnetGroupName: string = ""; KmsKeyId: string = ""; Port: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  :  <i>(Not supported by Neptune)</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21628409 = newJObject()
  add(query_21628409, "RestoreToTime", newJString(RestoreToTime))
  add(query_21628409, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21628409, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21628409, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628409, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_21628409.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21628409.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_21628409.add "Tags", Tags
  add(query_21628409, "RestoreType", newJString(RestoreType))
  add(query_21628409, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21628409, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_21628409, "Action", newJString(Action))
  add(query_21628409, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21628409, "KmsKeyId", newJString(KmsKeyId))
  add(query_21628409, "Port", newJInt(Port))
  add(query_21628409, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_21628409, "Version", newJString(Version))
  result = call_21628408.call(nil, query_21628409, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_21628380(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_21628381, base: "/",
    makeUrl: url_GetRestoreDBClusterToPointInTime_21628382,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_21628457 = ref object of OpenApiRestCall_21625418
proc url_PostStartDBCluster_21628459(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_21628458(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628460 = query.getOrDefault("Action")
  valid_21628460 = validateParameter(valid_21628460, JString, required = true,
                                   default = newJString("StartDBCluster"))
  if valid_21628460 != nil:
    section.add "Action", valid_21628460
  var valid_21628461 = query.getOrDefault("Version")
  valid_21628461 = validateParameter(valid_21628461, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628461 != nil:
    section.add "Version", valid_21628461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628462 = header.getOrDefault("X-Amz-Date")
  valid_21628462 = validateParameter(valid_21628462, JString, required = false,
                                   default = nil)
  if valid_21628462 != nil:
    section.add "X-Amz-Date", valid_21628462
  var valid_21628463 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628463 = validateParameter(valid_21628463, JString, required = false,
                                   default = nil)
  if valid_21628463 != nil:
    section.add "X-Amz-Security-Token", valid_21628463
  var valid_21628464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628464 = validateParameter(valid_21628464, JString, required = false,
                                   default = nil)
  if valid_21628464 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628464
  var valid_21628465 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628465 = validateParameter(valid_21628465, JString, required = false,
                                   default = nil)
  if valid_21628465 != nil:
    section.add "X-Amz-Algorithm", valid_21628465
  var valid_21628466 = header.getOrDefault("X-Amz-Signature")
  valid_21628466 = validateParameter(valid_21628466, JString, required = false,
                                   default = nil)
  if valid_21628466 != nil:
    section.add "X-Amz-Signature", valid_21628466
  var valid_21628467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628467 = validateParameter(valid_21628467, JString, required = false,
                                   default = nil)
  if valid_21628467 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628467
  var valid_21628468 = header.getOrDefault("X-Amz-Credential")
  valid_21628468 = validateParameter(valid_21628468, JString, required = false,
                                   default = nil)
  if valid_21628468 != nil:
    section.add "X-Amz-Credential", valid_21628468
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628469 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628469 = validateParameter(valid_21628469, JString, required = true,
                                   default = nil)
  if valid_21628469 != nil:
    section.add "DBClusterIdentifier", valid_21628469
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628470: Call_PostStartDBCluster_21628457; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
  ## 
  let valid = call_21628470.validator(path, query, header, formData, body, _)
  let scheme = call_21628470.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628470.makeUrl(scheme.get, call_21628470.host, call_21628470.base,
                               call_21628470.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628470, uri, valid, _)

proc call*(call_21628471: Call_PostStartDBCluster_21628457;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21628472 = newJObject()
  var formData_21628473 = newJObject()
  add(query_21628472, "Action", newJString(Action))
  add(formData_21628473, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628472, "Version", newJString(Version))
  result = call_21628471.call(nil, query_21628472, nil, formData_21628473, nil)

var postStartDBCluster* = Call_PostStartDBCluster_21628457(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_21628458, base: "/",
    makeUrl: url_PostStartDBCluster_21628459, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_21628441 = ref object of OpenApiRestCall_21625418
proc url_GetStartDBCluster_21628443(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_21628442(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628444 = query.getOrDefault("DBClusterIdentifier")
  valid_21628444 = validateParameter(valid_21628444, JString, required = true,
                                   default = nil)
  if valid_21628444 != nil:
    section.add "DBClusterIdentifier", valid_21628444
  var valid_21628445 = query.getOrDefault("Action")
  valid_21628445 = validateParameter(valid_21628445, JString, required = true,
                                   default = newJString("StartDBCluster"))
  if valid_21628445 != nil:
    section.add "Action", valid_21628445
  var valid_21628446 = query.getOrDefault("Version")
  valid_21628446 = validateParameter(valid_21628446, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628446 != nil:
    section.add "Version", valid_21628446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628447 = header.getOrDefault("X-Amz-Date")
  valid_21628447 = validateParameter(valid_21628447, JString, required = false,
                                   default = nil)
  if valid_21628447 != nil:
    section.add "X-Amz-Date", valid_21628447
  var valid_21628448 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628448 = validateParameter(valid_21628448, JString, required = false,
                                   default = nil)
  if valid_21628448 != nil:
    section.add "X-Amz-Security-Token", valid_21628448
  var valid_21628449 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628449 = validateParameter(valid_21628449, JString, required = false,
                                   default = nil)
  if valid_21628449 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628449
  var valid_21628450 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628450 = validateParameter(valid_21628450, JString, required = false,
                                   default = nil)
  if valid_21628450 != nil:
    section.add "X-Amz-Algorithm", valid_21628450
  var valid_21628451 = header.getOrDefault("X-Amz-Signature")
  valid_21628451 = validateParameter(valid_21628451, JString, required = false,
                                   default = nil)
  if valid_21628451 != nil:
    section.add "X-Amz-Signature", valid_21628451
  var valid_21628452 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628452 = validateParameter(valid_21628452, JString, required = false,
                                   default = nil)
  if valid_21628452 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628452
  var valid_21628453 = header.getOrDefault("X-Amz-Credential")
  valid_21628453 = validateParameter(valid_21628453, JString, required = false,
                                   default = nil)
  if valid_21628453 != nil:
    section.add "X-Amz-Credential", valid_21628453
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628454: Call_GetStartDBCluster_21628441; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
  ## 
  let valid = call_21628454.validator(path, query, header, formData, body, _)
  let scheme = call_21628454.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628454.makeUrl(scheme.get, call_21628454.host, call_21628454.base,
                               call_21628454.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628454, uri, valid, _)

proc call*(call_21628455: Call_GetStartDBCluster_21628441;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628456 = newJObject()
  add(query_21628456, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628456, "Action", newJString(Action))
  add(query_21628456, "Version", newJString(Version))
  result = call_21628455.call(nil, query_21628456, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_21628441(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_21628442,
    base: "/", makeUrl: url_GetStartDBCluster_21628443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_21628490 = ref object of OpenApiRestCall_21625418
proc url_PostStopDBCluster_21628492(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_21628491(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628493 = query.getOrDefault("Action")
  valid_21628493 = validateParameter(valid_21628493, JString, required = true,
                                   default = newJString("StopDBCluster"))
  if valid_21628493 != nil:
    section.add "Action", valid_21628493
  var valid_21628494 = query.getOrDefault("Version")
  valid_21628494 = validateParameter(valid_21628494, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628494 != nil:
    section.add "Version", valid_21628494
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628495 = header.getOrDefault("X-Amz-Date")
  valid_21628495 = validateParameter(valid_21628495, JString, required = false,
                                   default = nil)
  if valid_21628495 != nil:
    section.add "X-Amz-Date", valid_21628495
  var valid_21628496 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628496 = validateParameter(valid_21628496, JString, required = false,
                                   default = nil)
  if valid_21628496 != nil:
    section.add "X-Amz-Security-Token", valid_21628496
  var valid_21628497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628497 = validateParameter(valid_21628497, JString, required = false,
                                   default = nil)
  if valid_21628497 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628497
  var valid_21628498 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628498 = validateParameter(valid_21628498, JString, required = false,
                                   default = nil)
  if valid_21628498 != nil:
    section.add "X-Amz-Algorithm", valid_21628498
  var valid_21628499 = header.getOrDefault("X-Amz-Signature")
  valid_21628499 = validateParameter(valid_21628499, JString, required = false,
                                   default = nil)
  if valid_21628499 != nil:
    section.add "X-Amz-Signature", valid_21628499
  var valid_21628500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628500 = validateParameter(valid_21628500, JString, required = false,
                                   default = nil)
  if valid_21628500 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628500
  var valid_21628501 = header.getOrDefault("X-Amz-Credential")
  valid_21628501 = validateParameter(valid_21628501, JString, required = false,
                                   default = nil)
  if valid_21628501 != nil:
    section.add "X-Amz-Credential", valid_21628501
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628502 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628502 = validateParameter(valid_21628502, JString, required = true,
                                   default = nil)
  if valid_21628502 != nil:
    section.add "DBClusterIdentifier", valid_21628502
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628503: Call_PostStopDBCluster_21628490; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
  ## 
  let valid = call_21628503.validator(path, query, header, formData, body, _)
  let scheme = call_21628503.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628503.makeUrl(scheme.get, call_21628503.host, call_21628503.base,
                               call_21628503.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628503, uri, valid, _)

proc call*(call_21628504: Call_PostStopDBCluster_21628490;
          DBClusterIdentifier: string; Action: string = "StopDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21628505 = newJObject()
  var formData_21628506 = newJObject()
  add(query_21628505, "Action", newJString(Action))
  add(formData_21628506, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628505, "Version", newJString(Version))
  result = call_21628504.call(nil, query_21628505, nil, formData_21628506, nil)

var postStopDBCluster* = Call_PostStopDBCluster_21628490(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_21628491,
    base: "/", makeUrl: url_PostStopDBCluster_21628492,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_21628474 = ref object of OpenApiRestCall_21625418
proc url_GetStopDBCluster_21628476(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_21628475(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628477 = query.getOrDefault("DBClusterIdentifier")
  valid_21628477 = validateParameter(valid_21628477, JString, required = true,
                                   default = nil)
  if valid_21628477 != nil:
    section.add "DBClusterIdentifier", valid_21628477
  var valid_21628478 = query.getOrDefault("Action")
  valid_21628478 = validateParameter(valid_21628478, JString, required = true,
                                   default = newJString("StopDBCluster"))
  if valid_21628478 != nil:
    section.add "Action", valid_21628478
  var valid_21628479 = query.getOrDefault("Version")
  valid_21628479 = validateParameter(valid_21628479, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628479 != nil:
    section.add "Version", valid_21628479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628480 = header.getOrDefault("X-Amz-Date")
  valid_21628480 = validateParameter(valid_21628480, JString, required = false,
                                   default = nil)
  if valid_21628480 != nil:
    section.add "X-Amz-Date", valid_21628480
  var valid_21628481 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628481 = validateParameter(valid_21628481, JString, required = false,
                                   default = nil)
  if valid_21628481 != nil:
    section.add "X-Amz-Security-Token", valid_21628481
  var valid_21628482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628482 = validateParameter(valid_21628482, JString, required = false,
                                   default = nil)
  if valid_21628482 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628482
  var valid_21628483 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628483 = validateParameter(valid_21628483, JString, required = false,
                                   default = nil)
  if valid_21628483 != nil:
    section.add "X-Amz-Algorithm", valid_21628483
  var valid_21628484 = header.getOrDefault("X-Amz-Signature")
  valid_21628484 = validateParameter(valid_21628484, JString, required = false,
                                   default = nil)
  if valid_21628484 != nil:
    section.add "X-Amz-Signature", valid_21628484
  var valid_21628485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628485 = validateParameter(valid_21628485, JString, required = false,
                                   default = nil)
  if valid_21628485 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628485
  var valid_21628486 = header.getOrDefault("X-Amz-Credential")
  valid_21628486 = validateParameter(valid_21628486, JString, required = false,
                                   default = nil)
  if valid_21628486 != nil:
    section.add "X-Amz-Credential", valid_21628486
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628487: Call_GetStopDBCluster_21628474; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
  ## 
  let valid = call_21628487.validator(path, query, header, formData, body, _)
  let scheme = call_21628487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628487.makeUrl(scheme.get, call_21628487.host, call_21628487.base,
                               call_21628487.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628487, uri, valid, _)

proc call*(call_21628488: Call_GetStopDBCluster_21628474;
          DBClusterIdentifier: string; Action: string = "StopDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628489 = newJObject()
  add(query_21628489, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628489, "Action", newJString(Action))
  add(query_21628489, "Version", newJString(Version))
  result = call_21628488.call(nil, query_21628489, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_21628474(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_21628475,
    base: "/", makeUrl: url_GetStopDBCluster_21628476,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}