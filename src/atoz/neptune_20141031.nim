
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Neptune
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Neptune</fullname> <p>Amazon Neptune is a fast, reliable, fully-managed graph database service that makes it easy to build and run applications that work with highly connected datasets. The core of Amazon Neptune is a purpose-built, high-performance graph database engine optimized for storing billions of relationships and querying the graph with milliseconds latency. Amazon Neptune supports popular graph models Property Graph and W3C's RDF, and their respective query languages Apache TinkerPop Gremlin and SPARQL, allowing you to easily build queries that efficiently navigate highly connected datasets. Neptune powers graph use cases such as recommendation engines, fraud detection, knowledge graphs, drug discovery, and network security.</p> <p>This interface reference for Amazon Neptune contains documentation for a programming or command line interface you can use to manage Amazon Neptune. Note that Amazon Neptune is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_605573 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_605573](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_605573): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "neptune"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_606183 = ref object of OpenApiRestCall_605573
proc url_PostAddRoleToDBCluster_606185(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_606184(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606186 = query.getOrDefault("Action")
  valid_606186 = validateParameter(valid_606186, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_606186 != nil:
    section.add "Action", valid_606186
  var valid_606187 = query.getOrDefault("Version")
  valid_606187 = validateParameter(valid_606187, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606187 != nil:
    section.add "Version", valid_606187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606188 = header.getOrDefault("X-Amz-Signature")
  valid_606188 = validateParameter(valid_606188, JString, required = false,
                                 default = nil)
  if valid_606188 != nil:
    section.add "X-Amz-Signature", valid_606188
  var valid_606189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606189 = validateParameter(valid_606189, JString, required = false,
                                 default = nil)
  if valid_606189 != nil:
    section.add "X-Amz-Content-Sha256", valid_606189
  var valid_606190 = header.getOrDefault("X-Amz-Date")
  valid_606190 = validateParameter(valid_606190, JString, required = false,
                                 default = nil)
  if valid_606190 != nil:
    section.add "X-Amz-Date", valid_606190
  var valid_606191 = header.getOrDefault("X-Amz-Credential")
  valid_606191 = validateParameter(valid_606191, JString, required = false,
                                 default = nil)
  if valid_606191 != nil:
    section.add "X-Amz-Credential", valid_606191
  var valid_606192 = header.getOrDefault("X-Amz-Security-Token")
  valid_606192 = validateParameter(valid_606192, JString, required = false,
                                 default = nil)
  if valid_606192 != nil:
    section.add "X-Amz-Security-Token", valid_606192
  var valid_606193 = header.getOrDefault("X-Amz-Algorithm")
  valid_606193 = validateParameter(valid_606193, JString, required = false,
                                 default = nil)
  if valid_606193 != nil:
    section.add "X-Amz-Algorithm", valid_606193
  var valid_606194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606194 = validateParameter(valid_606194, JString, required = false,
                                 default = nil)
  if valid_606194 != nil:
    section.add "X-Amz-SignedHeaders", valid_606194
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_606195 = formData.getOrDefault("RoleArn")
  valid_606195 = validateParameter(valid_606195, JString, required = true,
                                 default = nil)
  if valid_606195 != nil:
    section.add "RoleArn", valid_606195
  var valid_606196 = formData.getOrDefault("DBClusterIdentifier")
  valid_606196 = validateParameter(valid_606196, JString, required = true,
                                 default = nil)
  if valid_606196 != nil:
    section.add "DBClusterIdentifier", valid_606196
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606197: Call_PostAddRoleToDBCluster_606183; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_606197.validator(path, query, header, formData, body)
  let scheme = call_606197.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606197.url(scheme.get, call_606197.host, call_606197.base,
                         call_606197.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606197, url, valid)

proc call*(call_606198: Call_PostAddRoleToDBCluster_606183; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_606199 = newJObject()
  var formData_606200 = newJObject()
  add(formData_606200, "RoleArn", newJString(RoleArn))
  add(query_606199, "Action", newJString(Action))
  add(query_606199, "Version", newJString(Version))
  add(formData_606200, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606198.call(nil, query_606199, nil, formData_606200, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_606183(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_606184, base: "/",
    url: url_PostAddRoleToDBCluster_606185, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_605911 = ref object of OpenApiRestCall_605573
proc url_GetAddRoleToDBCluster_605913(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_605912(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_606025 = query.getOrDefault("RoleArn")
  valid_606025 = validateParameter(valid_606025, JString, required = true,
                                 default = nil)
  if valid_606025 != nil:
    section.add "RoleArn", valid_606025
  var valid_606026 = query.getOrDefault("DBClusterIdentifier")
  valid_606026 = validateParameter(valid_606026, JString, required = true,
                                 default = nil)
  if valid_606026 != nil:
    section.add "DBClusterIdentifier", valid_606026
  var valid_606040 = query.getOrDefault("Action")
  valid_606040 = validateParameter(valid_606040, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_606040 != nil:
    section.add "Action", valid_606040
  var valid_606041 = query.getOrDefault("Version")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606041 != nil:
    section.add "Version", valid_606041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606042 = header.getOrDefault("X-Amz-Signature")
  valid_606042 = validateParameter(valid_606042, JString, required = false,
                                 default = nil)
  if valid_606042 != nil:
    section.add "X-Amz-Signature", valid_606042
  var valid_606043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606043 = validateParameter(valid_606043, JString, required = false,
                                 default = nil)
  if valid_606043 != nil:
    section.add "X-Amz-Content-Sha256", valid_606043
  var valid_606044 = header.getOrDefault("X-Amz-Date")
  valid_606044 = validateParameter(valid_606044, JString, required = false,
                                 default = nil)
  if valid_606044 != nil:
    section.add "X-Amz-Date", valid_606044
  var valid_606045 = header.getOrDefault("X-Amz-Credential")
  valid_606045 = validateParameter(valid_606045, JString, required = false,
                                 default = nil)
  if valid_606045 != nil:
    section.add "X-Amz-Credential", valid_606045
  var valid_606046 = header.getOrDefault("X-Amz-Security-Token")
  valid_606046 = validateParameter(valid_606046, JString, required = false,
                                 default = nil)
  if valid_606046 != nil:
    section.add "X-Amz-Security-Token", valid_606046
  var valid_606047 = header.getOrDefault("X-Amz-Algorithm")
  valid_606047 = validateParameter(valid_606047, JString, required = false,
                                 default = nil)
  if valid_606047 != nil:
    section.add "X-Amz-Algorithm", valid_606047
  var valid_606048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606048 = validateParameter(valid_606048, JString, required = false,
                                 default = nil)
  if valid_606048 != nil:
    section.add "X-Amz-SignedHeaders", valid_606048
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606071: Call_GetAddRoleToDBCluster_605911; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ## 
  let valid = call_606071.validator(path, query, header, formData, body)
  let scheme = call_606071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606071.url(scheme.get, call_606071.host, call_606071.base,
                         call_606071.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606071, url, valid)

proc call*(call_606142: Call_GetAddRoleToDBCluster_605911; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606143 = newJObject()
  add(query_606143, "RoleArn", newJString(RoleArn))
  add(query_606143, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606143, "Action", newJString(Action))
  add(query_606143, "Version", newJString(Version))
  result = call_606142.call(nil, query_606143, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_605911(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_605912, base: "/",
    url: url_GetAddRoleToDBCluster_605913, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_606218 = ref object of OpenApiRestCall_605573
proc url_PostAddSourceIdentifierToSubscription_606220(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_606219(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606221 = query.getOrDefault("Action")
  valid_606221 = validateParameter(valid_606221, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_606221 != nil:
    section.add "Action", valid_606221
  var valid_606222 = query.getOrDefault("Version")
  valid_606222 = validateParameter(valid_606222, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606222 != nil:
    section.add "Version", valid_606222
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606223 = header.getOrDefault("X-Amz-Signature")
  valid_606223 = validateParameter(valid_606223, JString, required = false,
                                 default = nil)
  if valid_606223 != nil:
    section.add "X-Amz-Signature", valid_606223
  var valid_606224 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "X-Amz-Content-Sha256", valid_606224
  var valid_606225 = header.getOrDefault("X-Amz-Date")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-Date", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-Credential")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-Credential", valid_606226
  var valid_606227 = header.getOrDefault("X-Amz-Security-Token")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "X-Amz-Security-Token", valid_606227
  var valid_606228 = header.getOrDefault("X-Amz-Algorithm")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "X-Amz-Algorithm", valid_606228
  var valid_606229 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "X-Amz-SignedHeaders", valid_606229
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_606230 = formData.getOrDefault("SubscriptionName")
  valid_606230 = validateParameter(valid_606230, JString, required = true,
                                 default = nil)
  if valid_606230 != nil:
    section.add "SubscriptionName", valid_606230
  var valid_606231 = formData.getOrDefault("SourceIdentifier")
  valid_606231 = validateParameter(valid_606231, JString, required = true,
                                 default = nil)
  if valid_606231 != nil:
    section.add "SourceIdentifier", valid_606231
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606232: Call_PostAddSourceIdentifierToSubscription_606218;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_606232.validator(path, query, header, formData, body)
  let scheme = call_606232.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606232.url(scheme.get, call_606232.host, call_606232.base,
                         call_606232.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606232, url, valid)

proc call*(call_606233: Call_PostAddSourceIdentifierToSubscription_606218;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606234 = newJObject()
  var formData_606235 = newJObject()
  add(formData_606235, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606235, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606234, "Action", newJString(Action))
  add(query_606234, "Version", newJString(Version))
  result = call_606233.call(nil, query_606234, nil, formData_606235, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_606218(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_606219, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_606220,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_606201 = ref object of OpenApiRestCall_605573
proc url_GetAddSourceIdentifierToSubscription_606203(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_606202(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_606204 = query.getOrDefault("SourceIdentifier")
  valid_606204 = validateParameter(valid_606204, JString, required = true,
                                 default = nil)
  if valid_606204 != nil:
    section.add "SourceIdentifier", valid_606204
  var valid_606205 = query.getOrDefault("SubscriptionName")
  valid_606205 = validateParameter(valid_606205, JString, required = true,
                                 default = nil)
  if valid_606205 != nil:
    section.add "SubscriptionName", valid_606205
  var valid_606206 = query.getOrDefault("Action")
  valid_606206 = validateParameter(valid_606206, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_606206 != nil:
    section.add "Action", valid_606206
  var valid_606207 = query.getOrDefault("Version")
  valid_606207 = validateParameter(valid_606207, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606207 != nil:
    section.add "Version", valid_606207
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606208 = header.getOrDefault("X-Amz-Signature")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Signature", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Content-Sha256", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-Date")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-Date", valid_606210
  var valid_606211 = header.getOrDefault("X-Amz-Credential")
  valid_606211 = validateParameter(valid_606211, JString, required = false,
                                 default = nil)
  if valid_606211 != nil:
    section.add "X-Amz-Credential", valid_606211
  var valid_606212 = header.getOrDefault("X-Amz-Security-Token")
  valid_606212 = validateParameter(valid_606212, JString, required = false,
                                 default = nil)
  if valid_606212 != nil:
    section.add "X-Amz-Security-Token", valid_606212
  var valid_606213 = header.getOrDefault("X-Amz-Algorithm")
  valid_606213 = validateParameter(valid_606213, JString, required = false,
                                 default = nil)
  if valid_606213 != nil:
    section.add "X-Amz-Algorithm", valid_606213
  var valid_606214 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606214 = validateParameter(valid_606214, JString, required = false,
                                 default = nil)
  if valid_606214 != nil:
    section.add "X-Amz-SignedHeaders", valid_606214
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606215: Call_GetAddSourceIdentifierToSubscription_606201;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing event notification subscription.
  ## 
  let valid = call_606215.validator(path, query, header, formData, body)
  let scheme = call_606215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606215.url(scheme.get, call_606215.host, call_606215.base,
                         call_606215.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606215, url, valid)

proc call*(call_606216: Call_GetAddSourceIdentifierToSubscription_606201;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606217 = newJObject()
  add(query_606217, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_606217, "SubscriptionName", newJString(SubscriptionName))
  add(query_606217, "Action", newJString(Action))
  add(query_606217, "Version", newJString(Version))
  result = call_606216.call(nil, query_606217, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_606201(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_606202, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_606203,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_606253 = ref object of OpenApiRestCall_605573
proc url_PostAddTagsToResource_606255(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_606254(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606256 = query.getOrDefault("Action")
  valid_606256 = validateParameter(valid_606256, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606256 != nil:
    section.add "Action", valid_606256
  var valid_606257 = query.getOrDefault("Version")
  valid_606257 = validateParameter(valid_606257, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606257 != nil:
    section.add "Version", valid_606257
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606258 = header.getOrDefault("X-Amz-Signature")
  valid_606258 = validateParameter(valid_606258, JString, required = false,
                                 default = nil)
  if valid_606258 != nil:
    section.add "X-Amz-Signature", valid_606258
  var valid_606259 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606259 = validateParameter(valid_606259, JString, required = false,
                                 default = nil)
  if valid_606259 != nil:
    section.add "X-Amz-Content-Sha256", valid_606259
  var valid_606260 = header.getOrDefault("X-Amz-Date")
  valid_606260 = validateParameter(valid_606260, JString, required = false,
                                 default = nil)
  if valid_606260 != nil:
    section.add "X-Amz-Date", valid_606260
  var valid_606261 = header.getOrDefault("X-Amz-Credential")
  valid_606261 = validateParameter(valid_606261, JString, required = false,
                                 default = nil)
  if valid_606261 != nil:
    section.add "X-Amz-Credential", valid_606261
  var valid_606262 = header.getOrDefault("X-Amz-Security-Token")
  valid_606262 = validateParameter(valid_606262, JString, required = false,
                                 default = nil)
  if valid_606262 != nil:
    section.add "X-Amz-Security-Token", valid_606262
  var valid_606263 = header.getOrDefault("X-Amz-Algorithm")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Algorithm", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-SignedHeaders", valid_606264
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_606265 = formData.getOrDefault("Tags")
  valid_606265 = validateParameter(valid_606265, JArray, required = true, default = nil)
  if valid_606265 != nil:
    section.add "Tags", valid_606265
  var valid_606266 = formData.getOrDefault("ResourceName")
  valid_606266 = validateParameter(valid_606266, JString, required = true,
                                 default = nil)
  if valid_606266 != nil:
    section.add "ResourceName", valid_606266
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606267: Call_PostAddTagsToResource_606253; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_606267.validator(path, query, header, formData, body)
  let scheme = call_606267.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606267.url(scheme.get, call_606267.host, call_606267.base,
                         call_606267.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606267, url, valid)

proc call*(call_606268: Call_PostAddTagsToResource_606253; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_606269 = newJObject()
  var formData_606270 = newJObject()
  add(query_606269, "Action", newJString(Action))
  if Tags != nil:
    formData_606270.add "Tags", Tags
  add(query_606269, "Version", newJString(Version))
  add(formData_606270, "ResourceName", newJString(ResourceName))
  result = call_606268.call(nil, query_606269, nil, formData_606270, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_606253(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_606254, base: "/",
    url: url_PostAddTagsToResource_606255, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_606236 = ref object of OpenApiRestCall_605573
proc url_GetAddTagsToResource_606238(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_606237(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_606239 = query.getOrDefault("Tags")
  valid_606239 = validateParameter(valid_606239, JArray, required = true, default = nil)
  if valid_606239 != nil:
    section.add "Tags", valid_606239
  var valid_606240 = query.getOrDefault("ResourceName")
  valid_606240 = validateParameter(valid_606240, JString, required = true,
                                 default = nil)
  if valid_606240 != nil:
    section.add "ResourceName", valid_606240
  var valid_606241 = query.getOrDefault("Action")
  valid_606241 = validateParameter(valid_606241, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_606241 != nil:
    section.add "Action", valid_606241
  var valid_606242 = query.getOrDefault("Version")
  valid_606242 = validateParameter(valid_606242, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606242 != nil:
    section.add "Version", valid_606242
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606243 = header.getOrDefault("X-Amz-Signature")
  valid_606243 = validateParameter(valid_606243, JString, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "X-Amz-Signature", valid_606243
  var valid_606244 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606244 = validateParameter(valid_606244, JString, required = false,
                                 default = nil)
  if valid_606244 != nil:
    section.add "X-Amz-Content-Sha256", valid_606244
  var valid_606245 = header.getOrDefault("X-Amz-Date")
  valid_606245 = validateParameter(valid_606245, JString, required = false,
                                 default = nil)
  if valid_606245 != nil:
    section.add "X-Amz-Date", valid_606245
  var valid_606246 = header.getOrDefault("X-Amz-Credential")
  valid_606246 = validateParameter(valid_606246, JString, required = false,
                                 default = nil)
  if valid_606246 != nil:
    section.add "X-Amz-Credential", valid_606246
  var valid_606247 = header.getOrDefault("X-Amz-Security-Token")
  valid_606247 = validateParameter(valid_606247, JString, required = false,
                                 default = nil)
  if valid_606247 != nil:
    section.add "X-Amz-Security-Token", valid_606247
  var valid_606248 = header.getOrDefault("X-Amz-Algorithm")
  valid_606248 = validateParameter(valid_606248, JString, required = false,
                                 default = nil)
  if valid_606248 != nil:
    section.add "X-Amz-Algorithm", valid_606248
  var valid_606249 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606249 = validateParameter(valid_606249, JString, required = false,
                                 default = nil)
  if valid_606249 != nil:
    section.add "X-Amz-SignedHeaders", valid_606249
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606250: Call_GetAddTagsToResource_606236; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ## 
  let valid = call_606250.validator(path, query, header, formData, body)
  let scheme = call_606250.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606250.url(scheme.get, call_606250.host, call_606250.base,
                         call_606250.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606250, url, valid)

proc call*(call_606251: Call_GetAddTagsToResource_606236; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
  ##   Tags: JArray (required)
  ##       : The tags to be assigned to the Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606252 = newJObject()
  if Tags != nil:
    query_606252.add "Tags", Tags
  add(query_606252, "ResourceName", newJString(ResourceName))
  add(query_606252, "Action", newJString(Action))
  add(query_606252, "Version", newJString(Version))
  result = call_606251.call(nil, query_606252, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_606236(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_606237, base: "/",
    url: url_GetAddTagsToResource_606238, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_606289 = ref object of OpenApiRestCall_605573
proc url_PostApplyPendingMaintenanceAction_606291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_606290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606292 = query.getOrDefault("Action")
  valid_606292 = validateParameter(valid_606292, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_606292 != nil:
    section.add "Action", valid_606292
  var valid_606293 = query.getOrDefault("Version")
  valid_606293 = validateParameter(valid_606293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606293 != nil:
    section.add "Version", valid_606293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606294 = header.getOrDefault("X-Amz-Signature")
  valid_606294 = validateParameter(valid_606294, JString, required = false,
                                 default = nil)
  if valid_606294 != nil:
    section.add "X-Amz-Signature", valid_606294
  var valid_606295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606295 = validateParameter(valid_606295, JString, required = false,
                                 default = nil)
  if valid_606295 != nil:
    section.add "X-Amz-Content-Sha256", valid_606295
  var valid_606296 = header.getOrDefault("X-Amz-Date")
  valid_606296 = validateParameter(valid_606296, JString, required = false,
                                 default = nil)
  if valid_606296 != nil:
    section.add "X-Amz-Date", valid_606296
  var valid_606297 = header.getOrDefault("X-Amz-Credential")
  valid_606297 = validateParameter(valid_606297, JString, required = false,
                                 default = nil)
  if valid_606297 != nil:
    section.add "X-Amz-Credential", valid_606297
  var valid_606298 = header.getOrDefault("X-Amz-Security-Token")
  valid_606298 = validateParameter(valid_606298, JString, required = false,
                                 default = nil)
  if valid_606298 != nil:
    section.add "X-Amz-Security-Token", valid_606298
  var valid_606299 = header.getOrDefault("X-Amz-Algorithm")
  valid_606299 = validateParameter(valid_606299, JString, required = false,
                                 default = nil)
  if valid_606299 != nil:
    section.add "X-Amz-Algorithm", valid_606299
  var valid_606300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-SignedHeaders", valid_606300
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_606301 = formData.getOrDefault("ResourceIdentifier")
  valid_606301 = validateParameter(valid_606301, JString, required = true,
                                 default = nil)
  if valid_606301 != nil:
    section.add "ResourceIdentifier", valid_606301
  var valid_606302 = formData.getOrDefault("ApplyAction")
  valid_606302 = validateParameter(valid_606302, JString, required = true,
                                 default = nil)
  if valid_606302 != nil:
    section.add "ApplyAction", valid_606302
  var valid_606303 = formData.getOrDefault("OptInType")
  valid_606303 = validateParameter(valid_606303, JString, required = true,
                                 default = nil)
  if valid_606303 != nil:
    section.add "OptInType", valid_606303
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606304: Call_PostApplyPendingMaintenanceAction_606289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_606304.validator(path, query, header, formData, body)
  let scheme = call_606304.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606304.url(scheme.get, call_606304.host, call_606304.base,
                         call_606304.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606304, url, valid)

proc call*(call_606305: Call_PostApplyPendingMaintenanceAction_606289;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_606306 = newJObject()
  var formData_606307 = newJObject()
  add(formData_606307, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_606307, "ApplyAction", newJString(ApplyAction))
  add(query_606306, "Action", newJString(Action))
  add(formData_606307, "OptInType", newJString(OptInType))
  add(query_606306, "Version", newJString(Version))
  result = call_606305.call(nil, query_606306, nil, formData_606307, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_606289(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_606290, base: "/",
    url: url_PostApplyPendingMaintenanceAction_606291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_606271 = ref object of OpenApiRestCall_605573
proc url_GetApplyPendingMaintenanceAction_606273(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_606272(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_606274 = query.getOrDefault("ResourceIdentifier")
  valid_606274 = validateParameter(valid_606274, JString, required = true,
                                 default = nil)
  if valid_606274 != nil:
    section.add "ResourceIdentifier", valid_606274
  var valid_606275 = query.getOrDefault("ApplyAction")
  valid_606275 = validateParameter(valid_606275, JString, required = true,
                                 default = nil)
  if valid_606275 != nil:
    section.add "ApplyAction", valid_606275
  var valid_606276 = query.getOrDefault("Action")
  valid_606276 = validateParameter(valid_606276, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_606276 != nil:
    section.add "Action", valid_606276
  var valid_606277 = query.getOrDefault("OptInType")
  valid_606277 = validateParameter(valid_606277, JString, required = true,
                                 default = nil)
  if valid_606277 != nil:
    section.add "OptInType", valid_606277
  var valid_606278 = query.getOrDefault("Version")
  valid_606278 = validateParameter(valid_606278, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606278 != nil:
    section.add "Version", valid_606278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606279 = header.getOrDefault("X-Amz-Signature")
  valid_606279 = validateParameter(valid_606279, JString, required = false,
                                 default = nil)
  if valid_606279 != nil:
    section.add "X-Amz-Signature", valid_606279
  var valid_606280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606280 = validateParameter(valid_606280, JString, required = false,
                                 default = nil)
  if valid_606280 != nil:
    section.add "X-Amz-Content-Sha256", valid_606280
  var valid_606281 = header.getOrDefault("X-Amz-Date")
  valid_606281 = validateParameter(valid_606281, JString, required = false,
                                 default = nil)
  if valid_606281 != nil:
    section.add "X-Amz-Date", valid_606281
  var valid_606282 = header.getOrDefault("X-Amz-Credential")
  valid_606282 = validateParameter(valid_606282, JString, required = false,
                                 default = nil)
  if valid_606282 != nil:
    section.add "X-Amz-Credential", valid_606282
  var valid_606283 = header.getOrDefault("X-Amz-Security-Token")
  valid_606283 = validateParameter(valid_606283, JString, required = false,
                                 default = nil)
  if valid_606283 != nil:
    section.add "X-Amz-Security-Token", valid_606283
  var valid_606284 = header.getOrDefault("X-Amz-Algorithm")
  valid_606284 = validateParameter(valid_606284, JString, required = false,
                                 default = nil)
  if valid_606284 != nil:
    section.add "X-Amz-Algorithm", valid_606284
  var valid_606285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606285 = validateParameter(valid_606285, JString, required = false,
                                 default = nil)
  if valid_606285 != nil:
    section.add "X-Amz-SignedHeaders", valid_606285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606286: Call_GetApplyPendingMaintenanceAction_606271;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_606286.validator(path, query, header, formData, body)
  let scheme = call_606286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606286.url(scheme.get, call_606286.host, call_606286.base,
                         call_606286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606286, url, valid)

proc call*(call_606287: Call_GetApplyPendingMaintenanceAction_606271;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_606288 = newJObject()
  add(query_606288, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_606288, "ApplyAction", newJString(ApplyAction))
  add(query_606288, "Action", newJString(Action))
  add(query_606288, "OptInType", newJString(OptInType))
  add(query_606288, "Version", newJString(Version))
  result = call_606287.call(nil, query_606288, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_606271(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_606272, base: "/",
    url: url_GetApplyPendingMaintenanceAction_606273,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_606327 = ref object of OpenApiRestCall_605573
proc url_PostCopyDBClusterParameterGroup_606329(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_606328(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606330 = query.getOrDefault("Action")
  valid_606330 = validateParameter(valid_606330, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_606330 != nil:
    section.add "Action", valid_606330
  var valid_606331 = query.getOrDefault("Version")
  valid_606331 = validateParameter(valid_606331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606331 != nil:
    section.add "Version", valid_606331
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606332 = header.getOrDefault("X-Amz-Signature")
  valid_606332 = validateParameter(valid_606332, JString, required = false,
                                 default = nil)
  if valid_606332 != nil:
    section.add "X-Amz-Signature", valid_606332
  var valid_606333 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606333 = validateParameter(valid_606333, JString, required = false,
                                 default = nil)
  if valid_606333 != nil:
    section.add "X-Amz-Content-Sha256", valid_606333
  var valid_606334 = header.getOrDefault("X-Amz-Date")
  valid_606334 = validateParameter(valid_606334, JString, required = false,
                                 default = nil)
  if valid_606334 != nil:
    section.add "X-Amz-Date", valid_606334
  var valid_606335 = header.getOrDefault("X-Amz-Credential")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-Credential", valid_606335
  var valid_606336 = header.getOrDefault("X-Amz-Security-Token")
  valid_606336 = validateParameter(valid_606336, JString, required = false,
                                 default = nil)
  if valid_606336 != nil:
    section.add "X-Amz-Security-Token", valid_606336
  var valid_606337 = header.getOrDefault("X-Amz-Algorithm")
  valid_606337 = validateParameter(valid_606337, JString, required = false,
                                 default = nil)
  if valid_606337 != nil:
    section.add "X-Amz-Algorithm", valid_606337
  var valid_606338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606338 = validateParameter(valid_606338, JString, required = false,
                                 default = nil)
  if valid_606338 != nil:
    section.add "X-Amz-SignedHeaders", valid_606338
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_606339 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_606339 = validateParameter(valid_606339, JString, required = true,
                                 default = nil)
  if valid_606339 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_606339
  var valid_606340 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_606340 = validateParameter(valid_606340, JString, required = true,
                                 default = nil)
  if valid_606340 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_606340
  var valid_606341 = formData.getOrDefault("Tags")
  valid_606341 = validateParameter(valid_606341, JArray, required = false,
                                 default = nil)
  if valid_606341 != nil:
    section.add "Tags", valid_606341
  var valid_606342 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_606342 = validateParameter(valid_606342, JString, required = true,
                                 default = nil)
  if valid_606342 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_606342
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606343: Call_PostCopyDBClusterParameterGroup_606327;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_606343.validator(path, query, header, formData, body)
  let scheme = call_606343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606343.url(scheme.get, call_606343.host, call_606343.base,
                         call_606343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606343, url, valid)

proc call*(call_606344: Call_PostCopyDBClusterParameterGroup_606327;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_606345 = newJObject()
  var formData_606346 = newJObject()
  add(formData_606346, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_606346, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_606345, "Action", newJString(Action))
  if Tags != nil:
    formData_606346.add "Tags", Tags
  add(query_606345, "Version", newJString(Version))
  add(formData_606346, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_606344.call(nil, query_606345, nil, formData_606346, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_606327(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_606328, base: "/",
    url: url_PostCopyDBClusterParameterGroup_606329,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_606308 = ref object of OpenApiRestCall_605573
proc url_GetCopyDBClusterParameterGroup_606310(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_606309(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_606311 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_606311 = validateParameter(valid_606311, JString, required = true,
                                 default = nil)
  if valid_606311 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_606311
  var valid_606312 = query.getOrDefault("Tags")
  valid_606312 = validateParameter(valid_606312, JArray, required = false,
                                 default = nil)
  if valid_606312 != nil:
    section.add "Tags", valid_606312
  var valid_606313 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_606313 = validateParameter(valid_606313, JString, required = true,
                                 default = nil)
  if valid_606313 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_606313
  var valid_606314 = query.getOrDefault("Action")
  valid_606314 = validateParameter(valid_606314, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_606314 != nil:
    section.add "Action", valid_606314
  var valid_606315 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_606315 = validateParameter(valid_606315, JString, required = true,
                                 default = nil)
  if valid_606315 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_606315
  var valid_606316 = query.getOrDefault("Version")
  valid_606316 = validateParameter(valid_606316, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606316 != nil:
    section.add "Version", valid_606316
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606317 = header.getOrDefault("X-Amz-Signature")
  valid_606317 = validateParameter(valid_606317, JString, required = false,
                                 default = nil)
  if valid_606317 != nil:
    section.add "X-Amz-Signature", valid_606317
  var valid_606318 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606318 = validateParameter(valid_606318, JString, required = false,
                                 default = nil)
  if valid_606318 != nil:
    section.add "X-Amz-Content-Sha256", valid_606318
  var valid_606319 = header.getOrDefault("X-Amz-Date")
  valid_606319 = validateParameter(valid_606319, JString, required = false,
                                 default = nil)
  if valid_606319 != nil:
    section.add "X-Amz-Date", valid_606319
  var valid_606320 = header.getOrDefault("X-Amz-Credential")
  valid_606320 = validateParameter(valid_606320, JString, required = false,
                                 default = nil)
  if valid_606320 != nil:
    section.add "X-Amz-Credential", valid_606320
  var valid_606321 = header.getOrDefault("X-Amz-Security-Token")
  valid_606321 = validateParameter(valid_606321, JString, required = false,
                                 default = nil)
  if valid_606321 != nil:
    section.add "X-Amz-Security-Token", valid_606321
  var valid_606322 = header.getOrDefault("X-Amz-Algorithm")
  valid_606322 = validateParameter(valid_606322, JString, required = false,
                                 default = nil)
  if valid_606322 != nil:
    section.add "X-Amz-Algorithm", valid_606322
  var valid_606323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606323 = validateParameter(valid_606323, JString, required = false,
                                 default = nil)
  if valid_606323 != nil:
    section.add "X-Amz-SignedHeaders", valid_606323
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606324: Call_GetCopyDBClusterParameterGroup_606308; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB cluster parameter group.
  ## 
  let valid = call_606324.validator(path, query, header, formData, body)
  let scheme = call_606324.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606324.url(scheme.get, call_606324.host, call_606324.base,
                         call_606324.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606324, url, valid)

proc call*(call_606325: Call_GetCopyDBClusterParameterGroup_606308;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## Copies the specified DB cluster parameter group.
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB cluster parameter group.
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_606326 = newJObject()
  add(query_606326, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_606326.add "Tags", Tags
  add(query_606326, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_606326, "Action", newJString(Action))
  add(query_606326, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_606326, "Version", newJString(Version))
  result = call_606325.call(nil, query_606326, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_606308(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_606309, base: "/",
    url: url_GetCopyDBClusterParameterGroup_606310,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_606368 = ref object of OpenApiRestCall_605573
proc url_PostCopyDBClusterSnapshot_606370(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_606369(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606371 = query.getOrDefault("Action")
  valid_606371 = validateParameter(valid_606371, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_606371 != nil:
    section.add "Action", valid_606371
  var valid_606372 = query.getOrDefault("Version")
  valid_606372 = validateParameter(valid_606372, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606372 != nil:
    section.add "Version", valid_606372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606373 = header.getOrDefault("X-Amz-Signature")
  valid_606373 = validateParameter(valid_606373, JString, required = false,
                                 default = nil)
  if valid_606373 != nil:
    section.add "X-Amz-Signature", valid_606373
  var valid_606374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606374 = validateParameter(valid_606374, JString, required = false,
                                 default = nil)
  if valid_606374 != nil:
    section.add "X-Amz-Content-Sha256", valid_606374
  var valid_606375 = header.getOrDefault("X-Amz-Date")
  valid_606375 = validateParameter(valid_606375, JString, required = false,
                                 default = nil)
  if valid_606375 != nil:
    section.add "X-Amz-Date", valid_606375
  var valid_606376 = header.getOrDefault("X-Amz-Credential")
  valid_606376 = validateParameter(valid_606376, JString, required = false,
                                 default = nil)
  if valid_606376 != nil:
    section.add "X-Amz-Credential", valid_606376
  var valid_606377 = header.getOrDefault("X-Amz-Security-Token")
  valid_606377 = validateParameter(valid_606377, JString, required = false,
                                 default = nil)
  if valid_606377 != nil:
    section.add "X-Amz-Security-Token", valid_606377
  var valid_606378 = header.getOrDefault("X-Amz-Algorithm")
  valid_606378 = validateParameter(valid_606378, JString, required = false,
                                 default = nil)
  if valid_606378 != nil:
    section.add "X-Amz-Algorithm", valid_606378
  var valid_606379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606379 = validateParameter(valid_606379, JString, required = false,
                                 default = nil)
  if valid_606379 != nil:
    section.add "X-Amz-SignedHeaders", valid_606379
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_606380 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_606380 = validateParameter(valid_606380, JString, required = true,
                                 default = nil)
  if valid_606380 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_606380
  var valid_606381 = formData.getOrDefault("KmsKeyId")
  valid_606381 = validateParameter(valid_606381, JString, required = false,
                                 default = nil)
  if valid_606381 != nil:
    section.add "KmsKeyId", valid_606381
  var valid_606382 = formData.getOrDefault("PreSignedUrl")
  valid_606382 = validateParameter(valid_606382, JString, required = false,
                                 default = nil)
  if valid_606382 != nil:
    section.add "PreSignedUrl", valid_606382
  var valid_606383 = formData.getOrDefault("CopyTags")
  valid_606383 = validateParameter(valid_606383, JBool, required = false, default = nil)
  if valid_606383 != nil:
    section.add "CopyTags", valid_606383
  var valid_606384 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_606384 = validateParameter(valid_606384, JString, required = true,
                                 default = nil)
  if valid_606384 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_606384
  var valid_606385 = formData.getOrDefault("Tags")
  valid_606385 = validateParameter(valid_606385, JArray, required = false,
                                 default = nil)
  if valid_606385 != nil:
    section.add "Tags", valid_606385
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606386: Call_PostCopyDBClusterSnapshot_606368; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_606386.validator(path, query, header, formData, body)
  let scheme = call_606386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606386.url(scheme.get, call_606386.host, call_606386.base,
                         call_606386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606386, url, valid)

proc call*(call_606387: Call_PostCopyDBClusterSnapshot_606368;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; KmsKeyId: string = "";
          PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   Version: string (required)
  var query_606388 = newJObject()
  var formData_606389 = newJObject()
  add(formData_606389, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_606389, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606389, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_606389, "CopyTags", newJBool(CopyTags))
  add(formData_606389, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_606388, "Action", newJString(Action))
  if Tags != nil:
    formData_606389.add "Tags", Tags
  add(query_606388, "Version", newJString(Version))
  result = call_606387.call(nil, query_606388, nil, formData_606389, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_606368(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_606369, base: "/",
    url: url_PostCopyDBClusterSnapshot_606370,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_606347 = ref object of OpenApiRestCall_605573
proc url_GetCopyDBClusterSnapshot_606349(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_606348(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606350 = query.getOrDefault("Tags")
  valid_606350 = validateParameter(valid_606350, JArray, required = false,
                                 default = nil)
  if valid_606350 != nil:
    section.add "Tags", valid_606350
  var valid_606351 = query.getOrDefault("KmsKeyId")
  valid_606351 = validateParameter(valid_606351, JString, required = false,
                                 default = nil)
  if valid_606351 != nil:
    section.add "KmsKeyId", valid_606351
  var valid_606352 = query.getOrDefault("PreSignedUrl")
  valid_606352 = validateParameter(valid_606352, JString, required = false,
                                 default = nil)
  if valid_606352 != nil:
    section.add "PreSignedUrl", valid_606352
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_606353 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_606353 = validateParameter(valid_606353, JString, required = true,
                                 default = nil)
  if valid_606353 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_606353
  var valid_606354 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_606354 = validateParameter(valid_606354, JString, required = true,
                                 default = nil)
  if valid_606354 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_606354
  var valid_606355 = query.getOrDefault("Action")
  valid_606355 = validateParameter(valid_606355, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_606355 != nil:
    section.add "Action", valid_606355
  var valid_606356 = query.getOrDefault("CopyTags")
  valid_606356 = validateParameter(valid_606356, JBool, required = false, default = nil)
  if valid_606356 != nil:
    section.add "CopyTags", valid_606356
  var valid_606357 = query.getOrDefault("Version")
  valid_606357 = validateParameter(valid_606357, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606357 != nil:
    section.add "Version", valid_606357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606358 = header.getOrDefault("X-Amz-Signature")
  valid_606358 = validateParameter(valid_606358, JString, required = false,
                                 default = nil)
  if valid_606358 != nil:
    section.add "X-Amz-Signature", valid_606358
  var valid_606359 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606359 = validateParameter(valid_606359, JString, required = false,
                                 default = nil)
  if valid_606359 != nil:
    section.add "X-Amz-Content-Sha256", valid_606359
  var valid_606360 = header.getOrDefault("X-Amz-Date")
  valid_606360 = validateParameter(valid_606360, JString, required = false,
                                 default = nil)
  if valid_606360 != nil:
    section.add "X-Amz-Date", valid_606360
  var valid_606361 = header.getOrDefault("X-Amz-Credential")
  valid_606361 = validateParameter(valid_606361, JString, required = false,
                                 default = nil)
  if valid_606361 != nil:
    section.add "X-Amz-Credential", valid_606361
  var valid_606362 = header.getOrDefault("X-Amz-Security-Token")
  valid_606362 = validateParameter(valid_606362, JString, required = false,
                                 default = nil)
  if valid_606362 != nil:
    section.add "X-Amz-Security-Token", valid_606362
  var valid_606363 = header.getOrDefault("X-Amz-Algorithm")
  valid_606363 = validateParameter(valid_606363, JString, required = false,
                                 default = nil)
  if valid_606363 != nil:
    section.add "X-Amz-Algorithm", valid_606363
  var valid_606364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606364 = validateParameter(valid_606364, JString, required = false,
                                 default = nil)
  if valid_606364 != nil:
    section.add "X-Amz-SignedHeaders", valid_606364
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606365: Call_GetCopyDBClusterSnapshot_606347; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ## 
  let valid = call_606365.validator(path, query, header, formData, body)
  let scheme = call_606365.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606365.url(scheme.get, call_606365.host, call_606365.base,
                         call_606365.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606365, url, valid)

proc call*(call_606366: Call_GetCopyDBClusterSnapshot_606347;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can't copy from one AWS Region to another.</p>
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster snapshot copy.
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, Amazon Neptune encrypts the target DB cluster snapshot using the specified KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : Not currently supported.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
  ##   Version: string (required)
  var query_606367 = newJObject()
  if Tags != nil:
    query_606367.add "Tags", Tags
  add(query_606367, "KmsKeyId", newJString(KmsKeyId))
  add(query_606367, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606367, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_606367, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_606367, "Action", newJString(Action))
  add(query_606367, "CopyTags", newJBool(CopyTags))
  add(query_606367, "Version", newJString(Version))
  result = call_606366.call(nil, query_606367, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_606347(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_606348, base: "/",
    url: url_GetCopyDBClusterSnapshot_606349, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_606409 = ref object of OpenApiRestCall_605573
proc url_PostCopyDBParameterGroup_606411(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_606410(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606412 = query.getOrDefault("Action")
  valid_606412 = validateParameter(valid_606412, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_606412 != nil:
    section.add "Action", valid_606412
  var valid_606413 = query.getOrDefault("Version")
  valid_606413 = validateParameter(valid_606413, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606413 != nil:
    section.add "Version", valid_606413
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606414 = header.getOrDefault("X-Amz-Signature")
  valid_606414 = validateParameter(valid_606414, JString, required = false,
                                 default = nil)
  if valid_606414 != nil:
    section.add "X-Amz-Signature", valid_606414
  var valid_606415 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606415 = validateParameter(valid_606415, JString, required = false,
                                 default = nil)
  if valid_606415 != nil:
    section.add "X-Amz-Content-Sha256", valid_606415
  var valid_606416 = header.getOrDefault("X-Amz-Date")
  valid_606416 = validateParameter(valid_606416, JString, required = false,
                                 default = nil)
  if valid_606416 != nil:
    section.add "X-Amz-Date", valid_606416
  var valid_606417 = header.getOrDefault("X-Amz-Credential")
  valid_606417 = validateParameter(valid_606417, JString, required = false,
                                 default = nil)
  if valid_606417 != nil:
    section.add "X-Amz-Credential", valid_606417
  var valid_606418 = header.getOrDefault("X-Amz-Security-Token")
  valid_606418 = validateParameter(valid_606418, JString, required = false,
                                 default = nil)
  if valid_606418 != nil:
    section.add "X-Amz-Security-Token", valid_606418
  var valid_606419 = header.getOrDefault("X-Amz-Algorithm")
  valid_606419 = validateParameter(valid_606419, JString, required = false,
                                 default = nil)
  if valid_606419 != nil:
    section.add "X-Amz-Algorithm", valid_606419
  var valid_606420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606420 = validateParameter(valid_606420, JString, required = false,
                                 default = nil)
  if valid_606420 != nil:
    section.add "X-Amz-SignedHeaders", valid_606420
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_606421 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_606421 = validateParameter(valid_606421, JString, required = true,
                                 default = nil)
  if valid_606421 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_606421
  var valid_606422 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_606422 = validateParameter(valid_606422, JString, required = true,
                                 default = nil)
  if valid_606422 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_606422
  var valid_606423 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_606423 = validateParameter(valid_606423, JString, required = true,
                                 default = nil)
  if valid_606423 != nil:
    section.add "TargetDBParameterGroupDescription", valid_606423
  var valid_606424 = formData.getOrDefault("Tags")
  valid_606424 = validateParameter(valid_606424, JArray, required = false,
                                 default = nil)
  if valid_606424 != nil:
    section.add "Tags", valid_606424
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606425: Call_PostCopyDBParameterGroup_606409; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_606425.validator(path, query, header, formData, body)
  let scheme = call_606425.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606425.url(scheme.get, call_606425.host, call_606425.base,
                         call_606425.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606425, url, valid)

proc call*(call_606426: Call_PostCopyDBParameterGroup_606409;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   Version: string (required)
  var query_606427 = newJObject()
  var formData_606428 = newJObject()
  add(formData_606428, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_606428, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_606428, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_606427, "Action", newJString(Action))
  if Tags != nil:
    formData_606428.add "Tags", Tags
  add(query_606427, "Version", newJString(Version))
  result = call_606426.call(nil, query_606427, nil, formData_606428, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_606409(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_606410, base: "/",
    url: url_PostCopyDBParameterGroup_606411, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_606390 = ref object of OpenApiRestCall_605573
proc url_GetCopyDBParameterGroup_606392(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_606391(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_606393 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_606393 = validateParameter(valid_606393, JString, required = true,
                                 default = nil)
  if valid_606393 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_606393
  var valid_606394 = query.getOrDefault("Tags")
  valid_606394 = validateParameter(valid_606394, JArray, required = false,
                                 default = nil)
  if valid_606394 != nil:
    section.add "Tags", valid_606394
  var valid_606395 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_606395 = validateParameter(valid_606395, JString, required = true,
                                 default = nil)
  if valid_606395 != nil:
    section.add "TargetDBParameterGroupDescription", valid_606395
  var valid_606396 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_606396 = validateParameter(valid_606396, JString, required = true,
                                 default = nil)
  if valid_606396 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_606396
  var valid_606397 = query.getOrDefault("Action")
  valid_606397 = validateParameter(valid_606397, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_606397 != nil:
    section.add "Action", valid_606397
  var valid_606398 = query.getOrDefault("Version")
  valid_606398 = validateParameter(valid_606398, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606398 != nil:
    section.add "Version", valid_606398
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606399 = header.getOrDefault("X-Amz-Signature")
  valid_606399 = validateParameter(valid_606399, JString, required = false,
                                 default = nil)
  if valid_606399 != nil:
    section.add "X-Amz-Signature", valid_606399
  var valid_606400 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606400 = validateParameter(valid_606400, JString, required = false,
                                 default = nil)
  if valid_606400 != nil:
    section.add "X-Amz-Content-Sha256", valid_606400
  var valid_606401 = header.getOrDefault("X-Amz-Date")
  valid_606401 = validateParameter(valid_606401, JString, required = false,
                                 default = nil)
  if valid_606401 != nil:
    section.add "X-Amz-Date", valid_606401
  var valid_606402 = header.getOrDefault("X-Amz-Credential")
  valid_606402 = validateParameter(valid_606402, JString, required = false,
                                 default = nil)
  if valid_606402 != nil:
    section.add "X-Amz-Credential", valid_606402
  var valid_606403 = header.getOrDefault("X-Amz-Security-Token")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "X-Amz-Security-Token", valid_606403
  var valid_606404 = header.getOrDefault("X-Amz-Algorithm")
  valid_606404 = validateParameter(valid_606404, JString, required = false,
                                 default = nil)
  if valid_606404 != nil:
    section.add "X-Amz-Algorithm", valid_606404
  var valid_606405 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606405 = validateParameter(valid_606405, JString, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "X-Amz-SignedHeaders", valid_606405
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606406: Call_GetCopyDBParameterGroup_606390; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_606406.validator(path, query, header, formData, body)
  let scheme = call_606406.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606406.url(scheme.get, call_606406.host, call_606406.base,
                         call_606406.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606406, url, valid)

proc call*(call_606407: Call_GetCopyDBParameterGroup_606390;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the copied DB parameter group.
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606408 = newJObject()
  add(query_606408, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_606408.add "Tags", Tags
  add(query_606408, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_606408, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_606408, "Action", newJString(Action))
  add(query_606408, "Version", newJString(Version))
  result = call_606407.call(nil, query_606408, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_606390(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_606391, base: "/",
    url: url_GetCopyDBParameterGroup_606392, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_606467 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBCluster_606469(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_606468(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606470 = query.getOrDefault("Action")
  valid_606470 = validateParameter(valid_606470, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_606470 != nil:
    section.add "Action", valid_606470
  var valid_606471 = query.getOrDefault("Version")
  valid_606471 = validateParameter(valid_606471, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606471 != nil:
    section.add "Version", valid_606471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606472 = header.getOrDefault("X-Amz-Signature")
  valid_606472 = validateParameter(valid_606472, JString, required = false,
                                 default = nil)
  if valid_606472 != nil:
    section.add "X-Amz-Signature", valid_606472
  var valid_606473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "X-Amz-Content-Sha256", valid_606473
  var valid_606474 = header.getOrDefault("X-Amz-Date")
  valid_606474 = validateParameter(valid_606474, JString, required = false,
                                 default = nil)
  if valid_606474 != nil:
    section.add "X-Amz-Date", valid_606474
  var valid_606475 = header.getOrDefault("X-Amz-Credential")
  valid_606475 = validateParameter(valid_606475, JString, required = false,
                                 default = nil)
  if valid_606475 != nil:
    section.add "X-Amz-Credential", valid_606475
  var valid_606476 = header.getOrDefault("X-Amz-Security-Token")
  valid_606476 = validateParameter(valid_606476, JString, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "X-Amz-Security-Token", valid_606476
  var valid_606477 = header.getOrDefault("X-Amz-Algorithm")
  valid_606477 = validateParameter(valid_606477, JString, required = false,
                                 default = nil)
  if valid_606477 != nil:
    section.add "X-Amz-Algorithm", valid_606477
  var valid_606478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606478 = validateParameter(valid_606478, JString, required = false,
                                 default = nil)
  if valid_606478 != nil:
    section.add "X-Amz-SignedHeaders", valid_606478
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_606479 = formData.getOrDefault("Port")
  valid_606479 = validateParameter(valid_606479, JInt, required = false, default = nil)
  if valid_606479 != nil:
    section.add "Port", valid_606479
  var valid_606480 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606480 = validateParameter(valid_606480, JString, required = false,
                                 default = nil)
  if valid_606480 != nil:
    section.add "PreferredMaintenanceWindow", valid_606480
  var valid_606481 = formData.getOrDefault("PreferredBackupWindow")
  valid_606481 = validateParameter(valid_606481, JString, required = false,
                                 default = nil)
  if valid_606481 != nil:
    section.add "PreferredBackupWindow", valid_606481
  var valid_606482 = formData.getOrDefault("MasterUserPassword")
  valid_606482 = validateParameter(valid_606482, JString, required = false,
                                 default = nil)
  if valid_606482 != nil:
    section.add "MasterUserPassword", valid_606482
  var valid_606483 = formData.getOrDefault("MasterUsername")
  valid_606483 = validateParameter(valid_606483, JString, required = false,
                                 default = nil)
  if valid_606483 != nil:
    section.add "MasterUsername", valid_606483
  var valid_606484 = formData.getOrDefault("EngineVersion")
  valid_606484 = validateParameter(valid_606484, JString, required = false,
                                 default = nil)
  if valid_606484 != nil:
    section.add "EngineVersion", valid_606484
  var valid_606485 = formData.getOrDefault("DatabaseName")
  valid_606485 = validateParameter(valid_606485, JString, required = false,
                                 default = nil)
  if valid_606485 != nil:
    section.add "DatabaseName", valid_606485
  var valid_606486 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606486 = validateParameter(valid_606486, JArray, required = false,
                                 default = nil)
  if valid_606486 != nil:
    section.add "VpcSecurityGroupIds", valid_606486
  var valid_606487 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606487 = validateParameter(valid_606487, JBool, required = false, default = nil)
  if valid_606487 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606487
  var valid_606488 = formData.getOrDefault("AvailabilityZones")
  valid_606488 = validateParameter(valid_606488, JArray, required = false,
                                 default = nil)
  if valid_606488 != nil:
    section.add "AvailabilityZones", valid_606488
  var valid_606489 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606489 = validateParameter(valid_606489, JInt, required = false, default = nil)
  if valid_606489 != nil:
    section.add "BackupRetentionPeriod", valid_606489
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_606490 = formData.getOrDefault("Engine")
  valid_606490 = validateParameter(valid_606490, JString, required = true,
                                 default = nil)
  if valid_606490 != nil:
    section.add "Engine", valid_606490
  var valid_606491 = formData.getOrDefault("KmsKeyId")
  valid_606491 = validateParameter(valid_606491, JString, required = false,
                                 default = nil)
  if valid_606491 != nil:
    section.add "KmsKeyId", valid_606491
  var valid_606492 = formData.getOrDefault("PreSignedUrl")
  valid_606492 = validateParameter(valid_606492, JString, required = false,
                                 default = nil)
  if valid_606492 != nil:
    section.add "PreSignedUrl", valid_606492
  var valid_606493 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606493 = validateParameter(valid_606493, JArray, required = false,
                                 default = nil)
  if valid_606493 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606493
  var valid_606494 = formData.getOrDefault("Tags")
  valid_606494 = validateParameter(valid_606494, JArray, required = false,
                                 default = nil)
  if valid_606494 != nil:
    section.add "Tags", valid_606494
  var valid_606495 = formData.getOrDefault("DBSubnetGroupName")
  valid_606495 = validateParameter(valid_606495, JString, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "DBSubnetGroupName", valid_606495
  var valid_606496 = formData.getOrDefault("OptionGroupName")
  valid_606496 = validateParameter(valid_606496, JString, required = false,
                                 default = nil)
  if valid_606496 != nil:
    section.add "OptionGroupName", valid_606496
  var valid_606497 = formData.getOrDefault("CharacterSetName")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "CharacterSetName", valid_606497
  var valid_606498 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606498 = validateParameter(valid_606498, JString, required = false,
                                 default = nil)
  if valid_606498 != nil:
    section.add "DBClusterParameterGroupName", valid_606498
  var valid_606499 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_606499 = validateParameter(valid_606499, JString, required = false,
                                 default = nil)
  if valid_606499 != nil:
    section.add "ReplicationSourceIdentifier", valid_606499
  var valid_606500 = formData.getOrDefault("StorageEncrypted")
  valid_606500 = validateParameter(valid_606500, JBool, required = false, default = nil)
  if valid_606500 != nil:
    section.add "StorageEncrypted", valid_606500
  var valid_606501 = formData.getOrDefault("DBClusterIdentifier")
  valid_606501 = validateParameter(valid_606501, JString, required = true,
                                 default = nil)
  if valid_606501 != nil:
    section.add "DBClusterIdentifier", valid_606501
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606502: Call_PostCreateDBCluster_606467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_606502.validator(path, query, header, formData, body)
  let scheme = call_606502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606502.url(scheme.get, call_606502.host, call_606502.base,
                         call_606502.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606502, url, valid)

proc call*(call_606503: Call_PostCreateDBCluster_606467; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          MasterUsername: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_606504 = newJObject()
  var formData_606505 = newJObject()
  add(formData_606505, "Port", newJInt(Port))
  add(formData_606505, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606505, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606505, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_606505, "MasterUsername", newJString(MasterUsername))
  add(formData_606505, "EngineVersion", newJString(EngineVersion))
  add(formData_606505, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_606505.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606505, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_606505.add "AvailabilityZones", AvailabilityZones
  add(formData_606505, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606505, "Engine", newJString(Engine))
  add(formData_606505, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606505, "PreSignedUrl", newJString(PreSignedUrl))
  if EnableCloudwatchLogsExports != nil:
    formData_606505.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606504, "Action", newJString(Action))
  if Tags != nil:
    formData_606505.add "Tags", Tags
  add(formData_606505, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606505, "OptionGroupName", newJString(OptionGroupName))
  add(formData_606505, "CharacterSetName", newJString(CharacterSetName))
  add(formData_606505, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_606505, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_606504, "Version", newJString(Version))
  add(formData_606505, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606505, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606503.call(nil, query_606504, nil, formData_606505, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_606467(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_606468, base: "/",
    url: url_PostCreateDBCluster_606469, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_606429 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBCluster_606431(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_606430(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   StorageEncrypted: JBool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   PreSignedUrl: JString
  ##               : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606432 = query.getOrDefault("DatabaseName")
  valid_606432 = validateParameter(valid_606432, JString, required = false,
                                 default = nil)
  if valid_606432 != nil:
    section.add "DatabaseName", valid_606432
  var valid_606433 = query.getOrDefault("StorageEncrypted")
  valid_606433 = validateParameter(valid_606433, JBool, required = false, default = nil)
  if valid_606433 != nil:
    section.add "StorageEncrypted", valid_606433
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606434 = query.getOrDefault("Engine")
  valid_606434 = validateParameter(valid_606434, JString, required = true,
                                 default = nil)
  if valid_606434 != nil:
    section.add "Engine", valid_606434
  var valid_606435 = query.getOrDefault("CharacterSetName")
  valid_606435 = validateParameter(valid_606435, JString, required = false,
                                 default = nil)
  if valid_606435 != nil:
    section.add "CharacterSetName", valid_606435
  var valid_606436 = query.getOrDefault("Tags")
  valid_606436 = validateParameter(valid_606436, JArray, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "Tags", valid_606436
  var valid_606437 = query.getOrDefault("KmsKeyId")
  valid_606437 = validateParameter(valid_606437, JString, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "KmsKeyId", valid_606437
  var valid_606438 = query.getOrDefault("DBClusterIdentifier")
  valid_606438 = validateParameter(valid_606438, JString, required = true,
                                 default = nil)
  if valid_606438 != nil:
    section.add "DBClusterIdentifier", valid_606438
  var valid_606439 = query.getOrDefault("PreSignedUrl")
  valid_606439 = validateParameter(valid_606439, JString, required = false,
                                 default = nil)
  if valid_606439 != nil:
    section.add "PreSignedUrl", valid_606439
  var valid_606440 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606440 = validateParameter(valid_606440, JString, required = false,
                                 default = nil)
  if valid_606440 != nil:
    section.add "DBClusterParameterGroupName", valid_606440
  var valid_606441 = query.getOrDefault("AvailabilityZones")
  valid_606441 = validateParameter(valid_606441, JArray, required = false,
                                 default = nil)
  if valid_606441 != nil:
    section.add "AvailabilityZones", valid_606441
  var valid_606442 = query.getOrDefault("MasterUsername")
  valid_606442 = validateParameter(valid_606442, JString, required = false,
                                 default = nil)
  if valid_606442 != nil:
    section.add "MasterUsername", valid_606442
  var valid_606443 = query.getOrDefault("BackupRetentionPeriod")
  valid_606443 = validateParameter(valid_606443, JInt, required = false, default = nil)
  if valid_606443 != nil:
    section.add "BackupRetentionPeriod", valid_606443
  var valid_606444 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606444 = validateParameter(valid_606444, JBool, required = false, default = nil)
  if valid_606444 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606444
  var valid_606445 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606445 = validateParameter(valid_606445, JArray, required = false,
                                 default = nil)
  if valid_606445 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606445
  var valid_606446 = query.getOrDefault("EngineVersion")
  valid_606446 = validateParameter(valid_606446, JString, required = false,
                                 default = nil)
  if valid_606446 != nil:
    section.add "EngineVersion", valid_606446
  var valid_606447 = query.getOrDefault("Action")
  valid_606447 = validateParameter(valid_606447, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_606447 != nil:
    section.add "Action", valid_606447
  var valid_606448 = query.getOrDefault("Port")
  valid_606448 = validateParameter(valid_606448, JInt, required = false, default = nil)
  if valid_606448 != nil:
    section.add "Port", valid_606448
  var valid_606449 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606449 = validateParameter(valid_606449, JArray, required = false,
                                 default = nil)
  if valid_606449 != nil:
    section.add "VpcSecurityGroupIds", valid_606449
  var valid_606450 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_606450 = validateParameter(valid_606450, JString, required = false,
                                 default = nil)
  if valid_606450 != nil:
    section.add "ReplicationSourceIdentifier", valid_606450
  var valid_606451 = query.getOrDefault("MasterUserPassword")
  valid_606451 = validateParameter(valid_606451, JString, required = false,
                                 default = nil)
  if valid_606451 != nil:
    section.add "MasterUserPassword", valid_606451
  var valid_606452 = query.getOrDefault("OptionGroupName")
  valid_606452 = validateParameter(valid_606452, JString, required = false,
                                 default = nil)
  if valid_606452 != nil:
    section.add "OptionGroupName", valid_606452
  var valid_606453 = query.getOrDefault("DBSubnetGroupName")
  valid_606453 = validateParameter(valid_606453, JString, required = false,
                                 default = nil)
  if valid_606453 != nil:
    section.add "DBSubnetGroupName", valid_606453
  var valid_606454 = query.getOrDefault("PreferredBackupWindow")
  valid_606454 = validateParameter(valid_606454, JString, required = false,
                                 default = nil)
  if valid_606454 != nil:
    section.add "PreferredBackupWindow", valid_606454
  var valid_606455 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606455 = validateParameter(valid_606455, JString, required = false,
                                 default = nil)
  if valid_606455 != nil:
    section.add "PreferredMaintenanceWindow", valid_606455
  var valid_606456 = query.getOrDefault("Version")
  valid_606456 = validateParameter(valid_606456, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606456 != nil:
    section.add "Version", valid_606456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606457 = header.getOrDefault("X-Amz-Signature")
  valid_606457 = validateParameter(valid_606457, JString, required = false,
                                 default = nil)
  if valid_606457 != nil:
    section.add "X-Amz-Signature", valid_606457
  var valid_606458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "X-Amz-Content-Sha256", valid_606458
  var valid_606459 = header.getOrDefault("X-Amz-Date")
  valid_606459 = validateParameter(valid_606459, JString, required = false,
                                 default = nil)
  if valid_606459 != nil:
    section.add "X-Amz-Date", valid_606459
  var valid_606460 = header.getOrDefault("X-Amz-Credential")
  valid_606460 = validateParameter(valid_606460, JString, required = false,
                                 default = nil)
  if valid_606460 != nil:
    section.add "X-Amz-Credential", valid_606460
  var valid_606461 = header.getOrDefault("X-Amz-Security-Token")
  valid_606461 = validateParameter(valid_606461, JString, required = false,
                                 default = nil)
  if valid_606461 != nil:
    section.add "X-Amz-Security-Token", valid_606461
  var valid_606462 = header.getOrDefault("X-Amz-Algorithm")
  valid_606462 = validateParameter(valid_606462, JString, required = false,
                                 default = nil)
  if valid_606462 != nil:
    section.add "X-Amz-Algorithm", valid_606462
  var valid_606463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606463 = validateParameter(valid_606463, JString, required = false,
                                 default = nil)
  if valid_606463 != nil:
    section.add "X-Amz-SignedHeaders", valid_606463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606464: Call_GetCreateDBCluster_606429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ## 
  let valid = call_606464.validator(path, query, header, formData, body)
  let scheme = call_606464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606464.url(scheme.get, call_606464.host, call_606464.base,
                         call_606464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606464, url, valid)

proc call*(call_606465: Call_GetCreateDBCluster_606429; Engine: string;
          DBClusterIdentifier: string; DatabaseName: string = "";
          StorageEncrypted: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.
  ##   StorageEncrypted: bool
  ##                   : Specifies whether the DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : The tags to assign to the new DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   PreSignedUrl: string
  ##               : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of EC2 Availability Zones that instances in the DB cluster can be created in.
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>Example: <code>1.0.1</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  var query_606466 = newJObject()
  add(query_606466, "DatabaseName", newJString(DatabaseName))
  add(query_606466, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606466, "Engine", newJString(Engine))
  add(query_606466, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_606466.add "Tags", Tags
  add(query_606466, "KmsKeyId", newJString(KmsKeyId))
  add(query_606466, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606466, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_606466, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_606466.add "AvailabilityZones", AvailabilityZones
  add(query_606466, "MasterUsername", newJString(MasterUsername))
  add(query_606466, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_606466, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_606466.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606466, "EngineVersion", newJString(EngineVersion))
  add(query_606466, "Action", newJString(Action))
  add(query_606466, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_606466.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606466, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_606466, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606466, "OptionGroupName", newJString(OptionGroupName))
  add(query_606466, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606466, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606466, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606466, "Version", newJString(Version))
  result = call_606465.call(nil, query_606466, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_606429(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_606430,
    base: "/", url: url_GetCreateDBCluster_606431,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_606525 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBClusterParameterGroup_606527(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_606526(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606528 = query.getOrDefault("Action")
  valid_606528 = validateParameter(valid_606528, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_606528 != nil:
    section.add "Action", valid_606528
  var valid_606529 = query.getOrDefault("Version")
  valid_606529 = validateParameter(valid_606529, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606529 != nil:
    section.add "Version", valid_606529
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606530 = header.getOrDefault("X-Amz-Signature")
  valid_606530 = validateParameter(valid_606530, JString, required = false,
                                 default = nil)
  if valid_606530 != nil:
    section.add "X-Amz-Signature", valid_606530
  var valid_606531 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606531 = validateParameter(valid_606531, JString, required = false,
                                 default = nil)
  if valid_606531 != nil:
    section.add "X-Amz-Content-Sha256", valid_606531
  var valid_606532 = header.getOrDefault("X-Amz-Date")
  valid_606532 = validateParameter(valid_606532, JString, required = false,
                                 default = nil)
  if valid_606532 != nil:
    section.add "X-Amz-Date", valid_606532
  var valid_606533 = header.getOrDefault("X-Amz-Credential")
  valid_606533 = validateParameter(valid_606533, JString, required = false,
                                 default = nil)
  if valid_606533 != nil:
    section.add "X-Amz-Credential", valid_606533
  var valid_606534 = header.getOrDefault("X-Amz-Security-Token")
  valid_606534 = validateParameter(valid_606534, JString, required = false,
                                 default = nil)
  if valid_606534 != nil:
    section.add "X-Amz-Security-Token", valid_606534
  var valid_606535 = header.getOrDefault("X-Amz-Algorithm")
  valid_606535 = validateParameter(valid_606535, JString, required = false,
                                 default = nil)
  if valid_606535 != nil:
    section.add "X-Amz-Algorithm", valid_606535
  var valid_606536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606536 = validateParameter(valid_606536, JString, required = false,
                                 default = nil)
  if valid_606536 != nil:
    section.add "X-Amz-SignedHeaders", valid_606536
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606537 = formData.getOrDefault("Description")
  valid_606537 = validateParameter(valid_606537, JString, required = true,
                                 default = nil)
  if valid_606537 != nil:
    section.add "Description", valid_606537
  var valid_606538 = formData.getOrDefault("Tags")
  valid_606538 = validateParameter(valid_606538, JArray, required = false,
                                 default = nil)
  if valid_606538 != nil:
    section.add "Tags", valid_606538
  var valid_606539 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606539 = validateParameter(valid_606539, JString, required = true,
                                 default = nil)
  if valid_606539 != nil:
    section.add "DBClusterParameterGroupName", valid_606539
  var valid_606540 = formData.getOrDefault("DBParameterGroupFamily")
  valid_606540 = validateParameter(valid_606540, JString, required = true,
                                 default = nil)
  if valid_606540 != nil:
    section.add "DBParameterGroupFamily", valid_606540
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606541: Call_PostCreateDBClusterParameterGroup_606525;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606541.validator(path, query, header, formData, body)
  let scheme = call_606541.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606541.url(scheme.get, call_606541.host, call_606541.base,
                         call_606541.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606541, url, valid)

proc call*(call_606542: Call_PostCreateDBClusterParameterGroup_606525;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  var query_606543 = newJObject()
  var formData_606544 = newJObject()
  add(formData_606544, "Description", newJString(Description))
  add(query_606543, "Action", newJString(Action))
  if Tags != nil:
    formData_606544.add "Tags", Tags
  add(formData_606544, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606543, "Version", newJString(Version))
  add(formData_606544, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_606542.call(nil, query_606543, nil, formData_606544, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_606525(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_606526, base: "/",
    url: url_PostCreateDBClusterParameterGroup_606527,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_606506 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBClusterParameterGroup_606508(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_606507(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_606509 = query.getOrDefault("DBParameterGroupFamily")
  valid_606509 = validateParameter(valid_606509, JString, required = true,
                                 default = nil)
  if valid_606509 != nil:
    section.add "DBParameterGroupFamily", valid_606509
  var valid_606510 = query.getOrDefault("Tags")
  valid_606510 = validateParameter(valid_606510, JArray, required = false,
                                 default = nil)
  if valid_606510 != nil:
    section.add "Tags", valid_606510
  var valid_606511 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606511 = validateParameter(valid_606511, JString, required = true,
                                 default = nil)
  if valid_606511 != nil:
    section.add "DBClusterParameterGroupName", valid_606511
  var valid_606512 = query.getOrDefault("Action")
  valid_606512 = validateParameter(valid_606512, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_606512 != nil:
    section.add "Action", valid_606512
  var valid_606513 = query.getOrDefault("Description")
  valid_606513 = validateParameter(valid_606513, JString, required = true,
                                 default = nil)
  if valid_606513 != nil:
    section.add "Description", valid_606513
  var valid_606514 = query.getOrDefault("Version")
  valid_606514 = validateParameter(valid_606514, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606514 != nil:
    section.add "Version", valid_606514
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606515 = header.getOrDefault("X-Amz-Signature")
  valid_606515 = validateParameter(valid_606515, JString, required = false,
                                 default = nil)
  if valid_606515 != nil:
    section.add "X-Amz-Signature", valid_606515
  var valid_606516 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606516 = validateParameter(valid_606516, JString, required = false,
                                 default = nil)
  if valid_606516 != nil:
    section.add "X-Amz-Content-Sha256", valid_606516
  var valid_606517 = header.getOrDefault("X-Amz-Date")
  valid_606517 = validateParameter(valid_606517, JString, required = false,
                                 default = nil)
  if valid_606517 != nil:
    section.add "X-Amz-Date", valid_606517
  var valid_606518 = header.getOrDefault("X-Amz-Credential")
  valid_606518 = validateParameter(valid_606518, JString, required = false,
                                 default = nil)
  if valid_606518 != nil:
    section.add "X-Amz-Credential", valid_606518
  var valid_606519 = header.getOrDefault("X-Amz-Security-Token")
  valid_606519 = validateParameter(valid_606519, JString, required = false,
                                 default = nil)
  if valid_606519 != nil:
    section.add "X-Amz-Security-Token", valid_606519
  var valid_606520 = header.getOrDefault("X-Amz-Algorithm")
  valid_606520 = validateParameter(valid_606520, JString, required = false,
                                 default = nil)
  if valid_606520 != nil:
    section.add "X-Amz-Algorithm", valid_606520
  var valid_606521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606521 = validateParameter(valid_606521, JString, required = false,
                                 default = nil)
  if valid_606521 != nil:
    section.add "X-Amz-SignedHeaders", valid_606521
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606522: Call_GetCreateDBClusterParameterGroup_606506;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606522.validator(path, query, header, formData, body)
  let scheme = call_606522.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606522.url(scheme.get, call_606522.host, call_606522.base,
                         call_606522.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606522, url, valid)

proc call*(call_606523: Call_GetCreateDBClusterParameterGroup_606506;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB cluster parameter group.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_606524 = newJObject()
  add(query_606524, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_606524.add "Tags", Tags
  add(query_606524, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606524, "Action", newJString(Action))
  add(query_606524, "Description", newJString(Description))
  add(query_606524, "Version", newJString(Version))
  result = call_606523.call(nil, query_606524, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_606506(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_606507, base: "/",
    url: url_GetCreateDBClusterParameterGroup_606508,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_606563 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBClusterSnapshot_606565(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_606564(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606566 = query.getOrDefault("Action")
  valid_606566 = validateParameter(valid_606566, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_606566 != nil:
    section.add "Action", valid_606566
  var valid_606567 = query.getOrDefault("Version")
  valid_606567 = validateParameter(valid_606567, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606567 != nil:
    section.add "Version", valid_606567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606568 = header.getOrDefault("X-Amz-Signature")
  valid_606568 = validateParameter(valid_606568, JString, required = false,
                                 default = nil)
  if valid_606568 != nil:
    section.add "X-Amz-Signature", valid_606568
  var valid_606569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606569 = validateParameter(valid_606569, JString, required = false,
                                 default = nil)
  if valid_606569 != nil:
    section.add "X-Amz-Content-Sha256", valid_606569
  var valid_606570 = header.getOrDefault("X-Amz-Date")
  valid_606570 = validateParameter(valid_606570, JString, required = false,
                                 default = nil)
  if valid_606570 != nil:
    section.add "X-Amz-Date", valid_606570
  var valid_606571 = header.getOrDefault("X-Amz-Credential")
  valid_606571 = validateParameter(valid_606571, JString, required = false,
                                 default = nil)
  if valid_606571 != nil:
    section.add "X-Amz-Credential", valid_606571
  var valid_606572 = header.getOrDefault("X-Amz-Security-Token")
  valid_606572 = validateParameter(valid_606572, JString, required = false,
                                 default = nil)
  if valid_606572 != nil:
    section.add "X-Amz-Security-Token", valid_606572
  var valid_606573 = header.getOrDefault("X-Amz-Algorithm")
  valid_606573 = validateParameter(valid_606573, JString, required = false,
                                 default = nil)
  if valid_606573 != nil:
    section.add "X-Amz-Algorithm", valid_606573
  var valid_606574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606574 = validateParameter(valid_606574, JString, required = false,
                                 default = nil)
  if valid_606574 != nil:
    section.add "X-Amz-SignedHeaders", valid_606574
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606575 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606575 = validateParameter(valid_606575, JString, required = true,
                                 default = nil)
  if valid_606575 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606575
  var valid_606576 = formData.getOrDefault("Tags")
  valid_606576 = validateParameter(valid_606576, JArray, required = false,
                                 default = nil)
  if valid_606576 != nil:
    section.add "Tags", valid_606576
  var valid_606577 = formData.getOrDefault("DBClusterIdentifier")
  valid_606577 = validateParameter(valid_606577, JString, required = true,
                                 default = nil)
  if valid_606577 != nil:
    section.add "DBClusterIdentifier", valid_606577
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606578: Call_PostCreateDBClusterSnapshot_606563; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_606578.validator(path, query, header, formData, body)
  let scheme = call_606578.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606578.url(scheme.get, call_606578.host, call_606578.base,
                         call_606578.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606578, url, valid)

proc call*(call_606579: Call_PostCreateDBClusterSnapshot_606563;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_606580 = newJObject()
  var formData_606581 = newJObject()
  add(formData_606581, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606580, "Action", newJString(Action))
  if Tags != nil:
    formData_606581.add "Tags", Tags
  add(query_606580, "Version", newJString(Version))
  add(formData_606581, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606579.call(nil, query_606580, nil, formData_606581, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_606563(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_606564, base: "/",
    url: url_PostCreateDBClusterSnapshot_606565,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_606545 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBClusterSnapshot_606547(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_606546(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a snapshot of a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606548 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606548 = validateParameter(valid_606548, JString, required = true,
                                 default = nil)
  if valid_606548 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606548
  var valid_606549 = query.getOrDefault("Tags")
  valid_606549 = validateParameter(valid_606549, JArray, required = false,
                                 default = nil)
  if valid_606549 != nil:
    section.add "Tags", valid_606549
  var valid_606550 = query.getOrDefault("DBClusterIdentifier")
  valid_606550 = validateParameter(valid_606550, JString, required = true,
                                 default = nil)
  if valid_606550 != nil:
    section.add "DBClusterIdentifier", valid_606550
  var valid_606551 = query.getOrDefault("Action")
  valid_606551 = validateParameter(valid_606551, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_606551 != nil:
    section.add "Action", valid_606551
  var valid_606552 = query.getOrDefault("Version")
  valid_606552 = validateParameter(valid_606552, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606552 != nil:
    section.add "Version", valid_606552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606553 = header.getOrDefault("X-Amz-Signature")
  valid_606553 = validateParameter(valid_606553, JString, required = false,
                                 default = nil)
  if valid_606553 != nil:
    section.add "X-Amz-Signature", valid_606553
  var valid_606554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606554 = validateParameter(valid_606554, JString, required = false,
                                 default = nil)
  if valid_606554 != nil:
    section.add "X-Amz-Content-Sha256", valid_606554
  var valid_606555 = header.getOrDefault("X-Amz-Date")
  valid_606555 = validateParameter(valid_606555, JString, required = false,
                                 default = nil)
  if valid_606555 != nil:
    section.add "X-Amz-Date", valid_606555
  var valid_606556 = header.getOrDefault("X-Amz-Credential")
  valid_606556 = validateParameter(valid_606556, JString, required = false,
                                 default = nil)
  if valid_606556 != nil:
    section.add "X-Amz-Credential", valid_606556
  var valid_606557 = header.getOrDefault("X-Amz-Security-Token")
  valid_606557 = validateParameter(valid_606557, JString, required = false,
                                 default = nil)
  if valid_606557 != nil:
    section.add "X-Amz-Security-Token", valid_606557
  var valid_606558 = header.getOrDefault("X-Amz-Algorithm")
  valid_606558 = validateParameter(valid_606558, JString, required = false,
                                 default = nil)
  if valid_606558 != nil:
    section.add "X-Amz-Algorithm", valid_606558
  var valid_606559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606559 = validateParameter(valid_606559, JString, required = false,
                                 default = nil)
  if valid_606559 != nil:
    section.add "X-Amz-SignedHeaders", valid_606559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606560: Call_GetCreateDBClusterSnapshot_606545; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a snapshot of a DB cluster.
  ## 
  let valid = call_606560.validator(path, query, header, formData, body)
  let scheme = call_606560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606560.url(scheme.get, call_606560.host, call_606560.base,
                         call_606560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606560, url, valid)

proc call*(call_606561: Call_GetCreateDBClusterSnapshot_606545;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## Creates a snapshot of a DB cluster.
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : The tags to be assigned to the DB cluster snapshot.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606562 = newJObject()
  add(query_606562, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_606562.add "Tags", Tags
  add(query_606562, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606562, "Action", newJString(Action))
  add(query_606562, "Version", newJString(Version))
  result = call_606561.call(nil, query_606562, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_606545(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_606546, base: "/",
    url: url_GetCreateDBClusterSnapshot_606547,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_606657 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBInstance_606659(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_606658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606660 = query.getOrDefault("Action")
  valid_606660 = validateParameter(valid_606660, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_606660 != nil:
    section.add "Action", valid_606660
  var valid_606661 = query.getOrDefault("Version")
  valid_606661 = validateParameter(valid_606661, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606661 != nil:
    section.add "Version", valid_606661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606662 = header.getOrDefault("X-Amz-Security-Token")
  valid_606662 = validateParameter(valid_606662, JString, required = false,
                                 default = nil)
  if valid_606662 != nil:
    section.add "X-Amz-Security-Token", valid_606662
  var valid_606663 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606663 = validateParameter(valid_606663, JString, required = false,
                                 default = nil)
  if valid_606663 != nil:
    section.add "X-Amz-SignedHeaders", valid_606663
  var valid_606664 = header.getOrDefault("X-Amz-Signature")
  valid_606664 = validateParameter(valid_606664, JString, required = false,
                                 default = nil)
  if valid_606664 != nil:
    section.add "X-Amz-Signature", valid_606664
  var valid_606665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606665 = validateParameter(valid_606665, JString, required = false,
                                 default = nil)
  if valid_606665 != nil:
    section.add "X-Amz-Content-Sha256", valid_606665
  var valid_606666 = header.getOrDefault("X-Amz-Date")
  valid_606666 = validateParameter(valid_606666, JString, required = false,
                                 default = nil)
  if valid_606666 != nil:
    section.add "X-Amz-Date", valid_606666
  var valid_606667 = header.getOrDefault("X-Amz-Credential")
  valid_606667 = validateParameter(valid_606667, JString, required = false,
                                 default = nil)
  if valid_606667 != nil:
    section.add "X-Amz-Credential", valid_606667
  var valid_606668 = header.getOrDefault("X-Amz-Algorithm")
  valid_606668 = validateParameter(valid_606668, JString, required = false,
                                 default = nil)
  if valid_606668 != nil:
    section.add "X-Amz-Algorithm", valid_606668
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : Not supported.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  section = newJObject()
  var valid_606669 = formData.getOrDefault("PromotionTier")
  valid_606669 = validateParameter(valid_606669, JInt, required = false, default = nil)
  if valid_606669 != nil:
    section.add "PromotionTier", valid_606669
  var valid_606670 = formData.getOrDefault("Port")
  valid_606670 = validateParameter(valid_606670, JInt, required = false, default = nil)
  if valid_606670 != nil:
    section.add "Port", valid_606670
  var valid_606671 = formData.getOrDefault("MultiAZ")
  valid_606671 = validateParameter(valid_606671, JBool, required = false, default = nil)
  if valid_606671 != nil:
    section.add "MultiAZ", valid_606671
  var valid_606672 = formData.getOrDefault("MasterUsername")
  valid_606672 = validateParameter(valid_606672, JString, required = false,
                                 default = nil)
  if valid_606672 != nil:
    section.add "MasterUsername", valid_606672
  var valid_606673 = formData.getOrDefault("MonitoringRoleArn")
  valid_606673 = validateParameter(valid_606673, JString, required = false,
                                 default = nil)
  if valid_606673 != nil:
    section.add "MonitoringRoleArn", valid_606673
  var valid_606674 = formData.getOrDefault("MonitoringInterval")
  valid_606674 = validateParameter(valid_606674, JInt, required = false, default = nil)
  if valid_606674 != nil:
    section.add "MonitoringInterval", valid_606674
  var valid_606675 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606675 = validateParameter(valid_606675, JArray, required = false,
                                 default = nil)
  if valid_606675 != nil:
    section.add "VpcSecurityGroupIds", valid_606675
  var valid_606676 = formData.getOrDefault("AvailabilityZone")
  valid_606676 = validateParameter(valid_606676, JString, required = false,
                                 default = nil)
  if valid_606676 != nil:
    section.add "AvailabilityZone", valid_606676
  var valid_606677 = formData.getOrDefault("EnablePerformanceInsights")
  valid_606677 = validateParameter(valid_606677, JBool, required = false, default = nil)
  if valid_606677 != nil:
    section.add "EnablePerformanceInsights", valid_606677
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606678 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606678 = validateParameter(valid_606678, JString, required = true,
                                 default = nil)
  if valid_606678 != nil:
    section.add "DBInstanceIdentifier", valid_606678
  var valid_606679 = formData.getOrDefault("TdeCredentialArn")
  valid_606679 = validateParameter(valid_606679, JString, required = false,
                                 default = nil)
  if valid_606679 != nil:
    section.add "TdeCredentialArn", valid_606679
  var valid_606680 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_606680 = validateParameter(valid_606680, JArray, required = false,
                                 default = nil)
  if valid_606680 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606680
  var valid_606681 = formData.getOrDefault("DBSubnetGroupName")
  valid_606681 = validateParameter(valid_606681, JString, required = false,
                                 default = nil)
  if valid_606681 != nil:
    section.add "DBSubnetGroupName", valid_606681
  var valid_606682 = formData.getOrDefault("CharacterSetName")
  valid_606682 = validateParameter(valid_606682, JString, required = false,
                                 default = nil)
  if valid_606682 != nil:
    section.add "CharacterSetName", valid_606682
  var valid_606683 = formData.getOrDefault("StorageType")
  valid_606683 = validateParameter(valid_606683, JString, required = false,
                                 default = nil)
  if valid_606683 != nil:
    section.add "StorageType", valid_606683
  var valid_606684 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_606684 = validateParameter(valid_606684, JBool, required = false, default = nil)
  if valid_606684 != nil:
    section.add "CopyTagsToSnapshot", valid_606684
  var valid_606685 = formData.getOrDefault("AllocatedStorage")
  valid_606685 = validateParameter(valid_606685, JInt, required = false, default = nil)
  if valid_606685 != nil:
    section.add "AllocatedStorage", valid_606685
  var valid_606686 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_606686 = validateParameter(valid_606686, JString, required = false,
                                 default = nil)
  if valid_606686 != nil:
    section.add "PreferredMaintenanceWindow", valid_606686
  var valid_606687 = formData.getOrDefault("DBInstanceClass")
  valid_606687 = validateParameter(valid_606687, JString, required = true,
                                 default = nil)
  if valid_606687 != nil:
    section.add "DBInstanceClass", valid_606687
  var valid_606688 = formData.getOrDefault("PreferredBackupWindow")
  valid_606688 = validateParameter(valid_606688, JString, required = false,
                                 default = nil)
  if valid_606688 != nil:
    section.add "PreferredBackupWindow", valid_606688
  var valid_606689 = formData.getOrDefault("MasterUserPassword")
  valid_606689 = validateParameter(valid_606689, JString, required = false,
                                 default = nil)
  if valid_606689 != nil:
    section.add "MasterUserPassword", valid_606689
  var valid_606690 = formData.getOrDefault("Domain")
  valid_606690 = validateParameter(valid_606690, JString, required = false,
                                 default = nil)
  if valid_606690 != nil:
    section.add "Domain", valid_606690
  var valid_606691 = formData.getOrDefault("Timezone")
  valid_606691 = validateParameter(valid_606691, JString, required = false,
                                 default = nil)
  if valid_606691 != nil:
    section.add "Timezone", valid_606691
  var valid_606692 = formData.getOrDefault("DBParameterGroupName")
  valid_606692 = validateParameter(valid_606692, JString, required = false,
                                 default = nil)
  if valid_606692 != nil:
    section.add "DBParameterGroupName", valid_606692
  var valid_606693 = formData.getOrDefault("EngineVersion")
  valid_606693 = validateParameter(valid_606693, JString, required = false,
                                 default = nil)
  if valid_606693 != nil:
    section.add "EngineVersion", valid_606693
  var valid_606694 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606694 = validateParameter(valid_606694, JBool, required = false, default = nil)
  if valid_606694 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606694
  var valid_606695 = formData.getOrDefault("BackupRetentionPeriod")
  valid_606695 = validateParameter(valid_606695, JInt, required = false, default = nil)
  if valid_606695 != nil:
    section.add "BackupRetentionPeriod", valid_606695
  var valid_606696 = formData.getOrDefault("KmsKeyId")
  valid_606696 = validateParameter(valid_606696, JString, required = false,
                                 default = nil)
  if valid_606696 != nil:
    section.add "KmsKeyId", valid_606696
  var valid_606697 = formData.getOrDefault("Engine")
  valid_606697 = validateParameter(valid_606697, JString, required = true,
                                 default = nil)
  if valid_606697 != nil:
    section.add "Engine", valid_606697
  var valid_606698 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_606698 = validateParameter(valid_606698, JBool, required = false, default = nil)
  if valid_606698 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606698
  var valid_606699 = formData.getOrDefault("TdeCredentialPassword")
  valid_606699 = validateParameter(valid_606699, JString, required = false,
                                 default = nil)
  if valid_606699 != nil:
    section.add "TdeCredentialPassword", valid_606699
  var valid_606700 = formData.getOrDefault("DBName")
  valid_606700 = validateParameter(valid_606700, JString, required = false,
                                 default = nil)
  if valid_606700 != nil:
    section.add "DBName", valid_606700
  var valid_606701 = formData.getOrDefault("Iops")
  valid_606701 = validateParameter(valid_606701, JInt, required = false, default = nil)
  if valid_606701 != nil:
    section.add "Iops", valid_606701
  var valid_606702 = formData.getOrDefault("PubliclyAccessible")
  valid_606702 = validateParameter(valid_606702, JBool, required = false, default = nil)
  if valid_606702 != nil:
    section.add "PubliclyAccessible", valid_606702
  var valid_606703 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_606703 = validateParameter(valid_606703, JString, required = false,
                                 default = nil)
  if valid_606703 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_606703
  var valid_606704 = formData.getOrDefault("LicenseModel")
  valid_606704 = validateParameter(valid_606704, JString, required = false,
                                 default = nil)
  if valid_606704 != nil:
    section.add "LicenseModel", valid_606704
  var valid_606705 = formData.getOrDefault("Tags")
  valid_606705 = validateParameter(valid_606705, JArray, required = false,
                                 default = nil)
  if valid_606705 != nil:
    section.add "Tags", valid_606705
  var valid_606706 = formData.getOrDefault("DomainIAMRoleName")
  valid_606706 = validateParameter(valid_606706, JString, required = false,
                                 default = nil)
  if valid_606706 != nil:
    section.add "DomainIAMRoleName", valid_606706
  var valid_606707 = formData.getOrDefault("OptionGroupName")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "OptionGroupName", valid_606707
  var valid_606708 = formData.getOrDefault("DBSecurityGroups")
  valid_606708 = validateParameter(valid_606708, JArray, required = false,
                                 default = nil)
  if valid_606708 != nil:
    section.add "DBSecurityGroups", valid_606708
  var valid_606709 = formData.getOrDefault("StorageEncrypted")
  valid_606709 = validateParameter(valid_606709, JBool, required = false, default = nil)
  if valid_606709 != nil:
    section.add "StorageEncrypted", valid_606709
  var valid_606710 = formData.getOrDefault("DBClusterIdentifier")
  valid_606710 = validateParameter(valid_606710, JString, required = false,
                                 default = nil)
  if valid_606710 != nil:
    section.add "DBClusterIdentifier", valid_606710
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606711: Call_PostCreateDBInstance_606657; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_606711.validator(path, query, header, formData, body)
  let scheme = call_606711.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606711.url(scheme.get, call_606711.host, call_606711.base,
                         call_606711.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606711, url, valid)

proc call*(call_606712: Call_PostCreateDBInstance_606657;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   EnablePerformanceInsights: bool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : Not supported.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  var query_606713 = newJObject()
  var formData_606714 = newJObject()
  add(formData_606714, "PromotionTier", newJInt(PromotionTier))
  add(formData_606714, "Port", newJInt(Port))
  add(formData_606714, "MultiAZ", newJBool(MultiAZ))
  add(formData_606714, "MasterUsername", newJString(MasterUsername))
  add(formData_606714, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_606714, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_606714.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606714, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_606714, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_606714, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_606714, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_606714.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606713, "Action", newJString(Action))
  add(formData_606714, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_606714, "CharacterSetName", newJString(CharacterSetName))
  add(formData_606714, "StorageType", newJString(StorageType))
  add(formData_606714, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_606714, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_606714, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_606714, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_606714, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_606714, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_606714, "Domain", newJString(Domain))
  add(formData_606714, "Timezone", newJString(Timezone))
  add(formData_606714, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_606714, "EngineVersion", newJString(EngineVersion))
  add(formData_606714, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_606714, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_606714, "KmsKeyId", newJString(KmsKeyId))
  add(formData_606714, "Engine", newJString(Engine))
  add(formData_606714, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_606714, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_606714, "DBName", newJString(DBName))
  add(formData_606714, "Iops", newJInt(Iops))
  add(formData_606714, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_606714, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_606714, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_606714.add "Tags", Tags
  add(formData_606714, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_606714, "OptionGroupName", newJString(OptionGroupName))
  add(query_606713, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_606714.add "DBSecurityGroups", DBSecurityGroups
  add(formData_606714, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606714, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606712.call(nil, query_606713, nil, formData_606714, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_606657(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_606658, base: "/",
    url: url_PostCreateDBInstance_606659, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_606582 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBInstance_606584(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_606583(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MasterUsername: JString
  ##                 : The name for the master user. Not used.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use.
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   DBName: JString
  ##         : Not supported.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CharacterSetName: JString
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_606603 = query.getOrDefault("Engine")
  valid_606603 = validateParameter(valid_606603, JString, required = true,
                                 default = nil)
  if valid_606603 != nil:
    section.add "Engine", valid_606603
  var valid_606604 = query.getOrDefault("CopyTagsToSnapshot")
  valid_606604 = validateParameter(valid_606604, JBool, required = false, default = nil)
  if valid_606604 != nil:
    section.add "CopyTagsToSnapshot", valid_606604
  var valid_606605 = query.getOrDefault("MonitoringInterval")
  valid_606605 = validateParameter(valid_606605, JInt, required = false, default = nil)
  if valid_606605 != nil:
    section.add "MonitoringInterval", valid_606605
  var valid_606606 = query.getOrDefault("KmsKeyId")
  valid_606606 = validateParameter(valid_606606, JString, required = false,
                                 default = nil)
  if valid_606606 != nil:
    section.add "KmsKeyId", valid_606606
  var valid_606607 = query.getOrDefault("MonitoringRoleArn")
  valid_606607 = validateParameter(valid_606607, JString, required = false,
                                 default = nil)
  if valid_606607 != nil:
    section.add "MonitoringRoleArn", valid_606607
  var valid_606608 = query.getOrDefault("MasterUsername")
  valid_606608 = validateParameter(valid_606608, JString, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "MasterUsername", valid_606608
  var valid_606609 = query.getOrDefault("BackupRetentionPeriod")
  valid_606609 = validateParameter(valid_606609, JInt, required = false, default = nil)
  if valid_606609 != nil:
    section.add "BackupRetentionPeriod", valid_606609
  var valid_606610 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_606610 = validateParameter(valid_606610, JArray, required = false,
                                 default = nil)
  if valid_606610 != nil:
    section.add "EnableCloudwatchLogsExports", valid_606610
  var valid_606611 = query.getOrDefault("EngineVersion")
  valid_606611 = validateParameter(valid_606611, JString, required = false,
                                 default = nil)
  if valid_606611 != nil:
    section.add "EngineVersion", valid_606611
  var valid_606612 = query.getOrDefault("Action")
  valid_606612 = validateParameter(valid_606612, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_606612 != nil:
    section.add "Action", valid_606612
  var valid_606613 = query.getOrDefault("Domain")
  valid_606613 = validateParameter(valid_606613, JString, required = false,
                                 default = nil)
  if valid_606613 != nil:
    section.add "Domain", valid_606613
  var valid_606614 = query.getOrDefault("VpcSecurityGroupIds")
  valid_606614 = validateParameter(valid_606614, JArray, required = false,
                                 default = nil)
  if valid_606614 != nil:
    section.add "VpcSecurityGroupIds", valid_606614
  var valid_606615 = query.getOrDefault("AllocatedStorage")
  valid_606615 = validateParameter(valid_606615, JInt, required = false, default = nil)
  if valid_606615 != nil:
    section.add "AllocatedStorage", valid_606615
  var valid_606616 = query.getOrDefault("EnablePerformanceInsights")
  valid_606616 = validateParameter(valid_606616, JBool, required = false, default = nil)
  if valid_606616 != nil:
    section.add "EnablePerformanceInsights", valid_606616
  var valid_606617 = query.getOrDefault("PubliclyAccessible")
  valid_606617 = validateParameter(valid_606617, JBool, required = false, default = nil)
  if valid_606617 != nil:
    section.add "PubliclyAccessible", valid_606617
  var valid_606618 = query.getOrDefault("DBName")
  valid_606618 = validateParameter(valid_606618, JString, required = false,
                                 default = nil)
  if valid_606618 != nil:
    section.add "DBName", valid_606618
  var valid_606619 = query.getOrDefault("TdeCredentialPassword")
  valid_606619 = validateParameter(valid_606619, JString, required = false,
                                 default = nil)
  if valid_606619 != nil:
    section.add "TdeCredentialPassword", valid_606619
  var valid_606620 = query.getOrDefault("StorageEncrypted")
  valid_606620 = validateParameter(valid_606620, JBool, required = false, default = nil)
  if valid_606620 != nil:
    section.add "StorageEncrypted", valid_606620
  var valid_606621 = query.getOrDefault("DBParameterGroupName")
  valid_606621 = validateParameter(valid_606621, JString, required = false,
                                 default = nil)
  if valid_606621 != nil:
    section.add "DBParameterGroupName", valid_606621
  var valid_606622 = query.getOrDefault("CharacterSetName")
  valid_606622 = validateParameter(valid_606622, JString, required = false,
                                 default = nil)
  if valid_606622 != nil:
    section.add "CharacterSetName", valid_606622
  var valid_606623 = query.getOrDefault("Tags")
  valid_606623 = validateParameter(valid_606623, JArray, required = false,
                                 default = nil)
  if valid_606623 != nil:
    section.add "Tags", valid_606623
  var valid_606624 = query.getOrDefault("DBClusterIdentifier")
  valid_606624 = validateParameter(valid_606624, JString, required = false,
                                 default = nil)
  if valid_606624 != nil:
    section.add "DBClusterIdentifier", valid_606624
  var valid_606625 = query.getOrDefault("LicenseModel")
  valid_606625 = validateParameter(valid_606625, JString, required = false,
                                 default = nil)
  if valid_606625 != nil:
    section.add "LicenseModel", valid_606625
  var valid_606626 = query.getOrDefault("DBInstanceIdentifier")
  valid_606626 = validateParameter(valid_606626, JString, required = true,
                                 default = nil)
  if valid_606626 != nil:
    section.add "DBInstanceIdentifier", valid_606626
  var valid_606627 = query.getOrDefault("TdeCredentialArn")
  valid_606627 = validateParameter(valid_606627, JString, required = false,
                                 default = nil)
  if valid_606627 != nil:
    section.add "TdeCredentialArn", valid_606627
  var valid_606628 = query.getOrDefault("PromotionTier")
  valid_606628 = validateParameter(valid_606628, JInt, required = false, default = nil)
  if valid_606628 != nil:
    section.add "PromotionTier", valid_606628
  var valid_606629 = query.getOrDefault("StorageType")
  valid_606629 = validateParameter(valid_606629, JString, required = false,
                                 default = nil)
  if valid_606629 != nil:
    section.add "StorageType", valid_606629
  var valid_606630 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_606630 = validateParameter(valid_606630, JBool, required = false, default = nil)
  if valid_606630 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_606630
  var valid_606631 = query.getOrDefault("MultiAZ")
  valid_606631 = validateParameter(valid_606631, JBool, required = false, default = nil)
  if valid_606631 != nil:
    section.add "MultiAZ", valid_606631
  var valid_606632 = query.getOrDefault("DBSecurityGroups")
  valid_606632 = validateParameter(valid_606632, JArray, required = false,
                                 default = nil)
  if valid_606632 != nil:
    section.add "DBSecurityGroups", valid_606632
  var valid_606633 = query.getOrDefault("Port")
  valid_606633 = validateParameter(valid_606633, JInt, required = false, default = nil)
  if valid_606633 != nil:
    section.add "Port", valid_606633
  var valid_606634 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_606634 = validateParameter(valid_606634, JString, required = false,
                                 default = nil)
  if valid_606634 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_606634
  var valid_606635 = query.getOrDefault("MasterUserPassword")
  valid_606635 = validateParameter(valid_606635, JString, required = false,
                                 default = nil)
  if valid_606635 != nil:
    section.add "MasterUserPassword", valid_606635
  var valid_606636 = query.getOrDefault("AvailabilityZone")
  valid_606636 = validateParameter(valid_606636, JString, required = false,
                                 default = nil)
  if valid_606636 != nil:
    section.add "AvailabilityZone", valid_606636
  var valid_606637 = query.getOrDefault("OptionGroupName")
  valid_606637 = validateParameter(valid_606637, JString, required = false,
                                 default = nil)
  if valid_606637 != nil:
    section.add "OptionGroupName", valid_606637
  var valid_606638 = query.getOrDefault("DBSubnetGroupName")
  valid_606638 = validateParameter(valid_606638, JString, required = false,
                                 default = nil)
  if valid_606638 != nil:
    section.add "DBSubnetGroupName", valid_606638
  var valid_606639 = query.getOrDefault("PreferredBackupWindow")
  valid_606639 = validateParameter(valid_606639, JString, required = false,
                                 default = nil)
  if valid_606639 != nil:
    section.add "PreferredBackupWindow", valid_606639
  var valid_606640 = query.getOrDefault("DBInstanceClass")
  valid_606640 = validateParameter(valid_606640, JString, required = true,
                                 default = nil)
  if valid_606640 != nil:
    section.add "DBInstanceClass", valid_606640
  var valid_606641 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "PreferredMaintenanceWindow", valid_606641
  var valid_606642 = query.getOrDefault("Timezone")
  valid_606642 = validateParameter(valid_606642, JString, required = false,
                                 default = nil)
  if valid_606642 != nil:
    section.add "Timezone", valid_606642
  var valid_606643 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_606643 = validateParameter(valid_606643, JBool, required = false, default = nil)
  if valid_606643 != nil:
    section.add "AutoMinorVersionUpgrade", valid_606643
  var valid_606644 = query.getOrDefault("Iops")
  valid_606644 = validateParameter(valid_606644, JInt, required = false, default = nil)
  if valid_606644 != nil:
    section.add "Iops", valid_606644
  var valid_606645 = query.getOrDefault("Version")
  valid_606645 = validateParameter(valid_606645, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606645 != nil:
    section.add "Version", valid_606645
  var valid_606646 = query.getOrDefault("DomainIAMRoleName")
  valid_606646 = validateParameter(valid_606646, JString, required = false,
                                 default = nil)
  if valid_606646 != nil:
    section.add "DomainIAMRoleName", valid_606646
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_606647 = header.getOrDefault("X-Amz-Security-Token")
  valid_606647 = validateParameter(valid_606647, JString, required = false,
                                 default = nil)
  if valid_606647 != nil:
    section.add "X-Amz-Security-Token", valid_606647
  var valid_606648 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606648 = validateParameter(valid_606648, JString, required = false,
                                 default = nil)
  if valid_606648 != nil:
    section.add "X-Amz-SignedHeaders", valid_606648
  var valid_606649 = header.getOrDefault("X-Amz-Signature")
  valid_606649 = validateParameter(valid_606649, JString, required = false,
                                 default = nil)
  if valid_606649 != nil:
    section.add "X-Amz-Signature", valid_606649
  var valid_606650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606650 = validateParameter(valid_606650, JString, required = false,
                                 default = nil)
  if valid_606650 != nil:
    section.add "X-Amz-Content-Sha256", valid_606650
  var valid_606651 = header.getOrDefault("X-Amz-Date")
  valid_606651 = validateParameter(valid_606651, JString, required = false,
                                 default = nil)
  if valid_606651 != nil:
    section.add "X-Amz-Date", valid_606651
  var valid_606652 = header.getOrDefault("X-Amz-Credential")
  valid_606652 = validateParameter(valid_606652, JString, required = false,
                                 default = nil)
  if valid_606652 != nil:
    section.add "X-Amz-Credential", valid_606652
  var valid_606653 = header.getOrDefault("X-Amz-Algorithm")
  valid_606653 = validateParameter(valid_606653, JString, required = false,
                                 default = nil)
  if valid_606653 != nil:
    section.add "X-Amz-Algorithm", valid_606653
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606654: Call_GetCreateDBInstance_606582; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_606654.validator(path, query, header, formData, body)
  let scheme = call_606654.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606654.url(scheme.get, call_606654.host, call_606654.base,
                         call_606654.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606654, url, valid)

proc call*(call_606655: Call_GetCreateDBInstance_606582; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          CharacterSetName: string = ""; Tags: JsonNode = nil;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MasterUsername: string
  ##                 : The name for the master user. Not used.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use.
  ##   Action: string (required)
  ##   Domain: string
  ##         : Specify the Active Directory Domain to create the instance in.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p>
  ##   EnablePerformanceInsights: bool
  ##                            : True to enable Performance Insights for the DB instance, and otherwise false.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   DBName: string
  ##         : Not supported.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CharacterSetName: string
  ##                   : <p>Indicates that the DB instance should be associated with the specified CharacterSet.</p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   Tags: JArray
  ##       : The tags to assign to the new instance.
  ##   DBClusterIdentifier: string
  ##                      : <p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_606656 = newJObject()
  add(query_606656, "Engine", newJString(Engine))
  add(query_606656, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_606656, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_606656, "KmsKeyId", newJString(KmsKeyId))
  add(query_606656, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_606656, "MasterUsername", newJString(MasterUsername))
  add(query_606656, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_606656.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_606656, "EngineVersion", newJString(EngineVersion))
  add(query_606656, "Action", newJString(Action))
  add(query_606656, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_606656.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_606656, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_606656, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_606656, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_606656, "DBName", newJString(DBName))
  add(query_606656, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_606656, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606656, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606656, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_606656.add "Tags", Tags
  add(query_606656, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606656, "LicenseModel", newJString(LicenseModel))
  add(query_606656, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606656, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_606656, "PromotionTier", newJInt(PromotionTier))
  add(query_606656, "StorageType", newJString(StorageType))
  add(query_606656, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_606656, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_606656.add "DBSecurityGroups", DBSecurityGroups
  add(query_606656, "Port", newJInt(Port))
  add(query_606656, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_606656, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_606656, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_606656, "OptionGroupName", newJString(OptionGroupName))
  add(query_606656, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606656, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_606656, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_606656, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_606656, "Timezone", newJString(Timezone))
  add(query_606656, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_606656, "Iops", newJInt(Iops))
  add(query_606656, "Version", newJString(Version))
  add(query_606656, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_606655.call(nil, query_606656, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_606582(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_606583, base: "/",
    url: url_GetCreateDBInstance_606584, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_606734 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBParameterGroup_606736(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_606735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606737 = query.getOrDefault("Action")
  valid_606737 = validateParameter(valid_606737, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_606737 != nil:
    section.add "Action", valid_606737
  var valid_606738 = query.getOrDefault("Version")
  valid_606738 = validateParameter(valid_606738, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606738 != nil:
    section.add "Version", valid_606738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606739 = header.getOrDefault("X-Amz-Signature")
  valid_606739 = validateParameter(valid_606739, JString, required = false,
                                 default = nil)
  if valid_606739 != nil:
    section.add "X-Amz-Signature", valid_606739
  var valid_606740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606740 = validateParameter(valid_606740, JString, required = false,
                                 default = nil)
  if valid_606740 != nil:
    section.add "X-Amz-Content-Sha256", valid_606740
  var valid_606741 = header.getOrDefault("X-Amz-Date")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "X-Amz-Date", valid_606741
  var valid_606742 = header.getOrDefault("X-Amz-Credential")
  valid_606742 = validateParameter(valid_606742, JString, required = false,
                                 default = nil)
  if valid_606742 != nil:
    section.add "X-Amz-Credential", valid_606742
  var valid_606743 = header.getOrDefault("X-Amz-Security-Token")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "X-Amz-Security-Token", valid_606743
  var valid_606744 = header.getOrDefault("X-Amz-Algorithm")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-Algorithm", valid_606744
  var valid_606745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "X-Amz-SignedHeaders", valid_606745
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_606746 = formData.getOrDefault("Description")
  valid_606746 = validateParameter(valid_606746, JString, required = true,
                                 default = nil)
  if valid_606746 != nil:
    section.add "Description", valid_606746
  var valid_606747 = formData.getOrDefault("DBParameterGroupName")
  valid_606747 = validateParameter(valid_606747, JString, required = true,
                                 default = nil)
  if valid_606747 != nil:
    section.add "DBParameterGroupName", valid_606747
  var valid_606748 = formData.getOrDefault("Tags")
  valid_606748 = validateParameter(valid_606748, JArray, required = false,
                                 default = nil)
  if valid_606748 != nil:
    section.add "Tags", valid_606748
  var valid_606749 = formData.getOrDefault("DBParameterGroupFamily")
  valid_606749 = validateParameter(valid_606749, JString, required = true,
                                 default = nil)
  if valid_606749 != nil:
    section.add "DBParameterGroupFamily", valid_606749
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606750: Call_PostCreateDBParameterGroup_606734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606750.validator(path, query, header, formData, body)
  let scheme = call_606750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606750.url(scheme.get, call_606750.host, call_606750.base,
                         call_606750.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606750, url, valid)

proc call*(call_606751: Call_PostCreateDBParameterGroup_606734;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  var query_606752 = newJObject()
  var formData_606753 = newJObject()
  add(formData_606753, "Description", newJString(Description))
  add(formData_606753, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606752, "Action", newJString(Action))
  if Tags != nil:
    formData_606753.add "Tags", Tags
  add(query_606752, "Version", newJString(Version))
  add(formData_606753, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_606751.call(nil, query_606752, nil, formData_606753, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_606734(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_606735, base: "/",
    url: url_PostCreateDBParameterGroup_606736,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_606715 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBParameterGroup_606717(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_606716(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_606718 = query.getOrDefault("DBParameterGroupFamily")
  valid_606718 = validateParameter(valid_606718, JString, required = true,
                                 default = nil)
  if valid_606718 != nil:
    section.add "DBParameterGroupFamily", valid_606718
  var valid_606719 = query.getOrDefault("DBParameterGroupName")
  valid_606719 = validateParameter(valid_606719, JString, required = true,
                                 default = nil)
  if valid_606719 != nil:
    section.add "DBParameterGroupName", valid_606719
  var valid_606720 = query.getOrDefault("Tags")
  valid_606720 = validateParameter(valid_606720, JArray, required = false,
                                 default = nil)
  if valid_606720 != nil:
    section.add "Tags", valid_606720
  var valid_606721 = query.getOrDefault("Action")
  valid_606721 = validateParameter(valid_606721, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_606721 != nil:
    section.add "Action", valid_606721
  var valid_606722 = query.getOrDefault("Description")
  valid_606722 = validateParameter(valid_606722, JString, required = true,
                                 default = nil)
  if valid_606722 != nil:
    section.add "Description", valid_606722
  var valid_606723 = query.getOrDefault("Version")
  valid_606723 = validateParameter(valid_606723, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606723 != nil:
    section.add "Version", valid_606723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606724 = header.getOrDefault("X-Amz-Signature")
  valid_606724 = validateParameter(valid_606724, JString, required = false,
                                 default = nil)
  if valid_606724 != nil:
    section.add "X-Amz-Signature", valid_606724
  var valid_606725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606725 = validateParameter(valid_606725, JString, required = false,
                                 default = nil)
  if valid_606725 != nil:
    section.add "X-Amz-Content-Sha256", valid_606725
  var valid_606726 = header.getOrDefault("X-Amz-Date")
  valid_606726 = validateParameter(valid_606726, JString, required = false,
                                 default = nil)
  if valid_606726 != nil:
    section.add "X-Amz-Date", valid_606726
  var valid_606727 = header.getOrDefault("X-Amz-Credential")
  valid_606727 = validateParameter(valid_606727, JString, required = false,
                                 default = nil)
  if valid_606727 != nil:
    section.add "X-Amz-Credential", valid_606727
  var valid_606728 = header.getOrDefault("X-Amz-Security-Token")
  valid_606728 = validateParameter(valid_606728, JString, required = false,
                                 default = nil)
  if valid_606728 != nil:
    section.add "X-Amz-Security-Token", valid_606728
  var valid_606729 = header.getOrDefault("X-Amz-Algorithm")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "X-Amz-Algorithm", valid_606729
  var valid_606730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606730 = validateParameter(valid_606730, JString, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "X-Amz-SignedHeaders", valid_606730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606731: Call_GetCreateDBParameterGroup_606715; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_606731.validator(path, query, header, formData, body)
  let scheme = call_606731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606731.url(scheme.get, call_606731.host, call_606731.base,
                         call_606731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606731, url, valid)

proc call*(call_606732: Call_GetCreateDBParameterGroup_606715;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB parameter group.
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_606733 = newJObject()
  add(query_606733, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_606733, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_606733.add "Tags", Tags
  add(query_606733, "Action", newJString(Action))
  add(query_606733, "Description", newJString(Description))
  add(query_606733, "Version", newJString(Version))
  result = call_606732.call(nil, query_606733, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_606715(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_606716, base: "/",
    url: url_GetCreateDBParameterGroup_606717,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_606773 = ref object of OpenApiRestCall_605573
proc url_PostCreateDBSubnetGroup_606775(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_606774(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606776 = query.getOrDefault("Action")
  valid_606776 = validateParameter(valid_606776, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_606776 != nil:
    section.add "Action", valid_606776
  var valid_606777 = query.getOrDefault("Version")
  valid_606777 = validateParameter(valid_606777, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606777 != nil:
    section.add "Version", valid_606777
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606778 = header.getOrDefault("X-Amz-Signature")
  valid_606778 = validateParameter(valid_606778, JString, required = false,
                                 default = nil)
  if valid_606778 != nil:
    section.add "X-Amz-Signature", valid_606778
  var valid_606779 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606779 = validateParameter(valid_606779, JString, required = false,
                                 default = nil)
  if valid_606779 != nil:
    section.add "X-Amz-Content-Sha256", valid_606779
  var valid_606780 = header.getOrDefault("X-Amz-Date")
  valid_606780 = validateParameter(valid_606780, JString, required = false,
                                 default = nil)
  if valid_606780 != nil:
    section.add "X-Amz-Date", valid_606780
  var valid_606781 = header.getOrDefault("X-Amz-Credential")
  valid_606781 = validateParameter(valid_606781, JString, required = false,
                                 default = nil)
  if valid_606781 != nil:
    section.add "X-Amz-Credential", valid_606781
  var valid_606782 = header.getOrDefault("X-Amz-Security-Token")
  valid_606782 = validateParameter(valid_606782, JString, required = false,
                                 default = nil)
  if valid_606782 != nil:
    section.add "X-Amz-Security-Token", valid_606782
  var valid_606783 = header.getOrDefault("X-Amz-Algorithm")
  valid_606783 = validateParameter(valid_606783, JString, required = false,
                                 default = nil)
  if valid_606783 != nil:
    section.add "X-Amz-Algorithm", valid_606783
  var valid_606784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606784 = validateParameter(valid_606784, JString, required = false,
                                 default = nil)
  if valid_606784 != nil:
    section.add "X-Amz-SignedHeaders", valid_606784
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_606785 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_606785 = validateParameter(valid_606785, JString, required = true,
                                 default = nil)
  if valid_606785 != nil:
    section.add "DBSubnetGroupDescription", valid_606785
  var valid_606786 = formData.getOrDefault("Tags")
  valid_606786 = validateParameter(valid_606786, JArray, required = false,
                                 default = nil)
  if valid_606786 != nil:
    section.add "Tags", valid_606786
  var valid_606787 = formData.getOrDefault("DBSubnetGroupName")
  valid_606787 = validateParameter(valid_606787, JString, required = true,
                                 default = nil)
  if valid_606787 != nil:
    section.add "DBSubnetGroupName", valid_606787
  var valid_606788 = formData.getOrDefault("SubnetIds")
  valid_606788 = validateParameter(valid_606788, JArray, required = true, default = nil)
  if valid_606788 != nil:
    section.add "SubnetIds", valid_606788
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606789: Call_PostCreateDBSubnetGroup_606773; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606789.validator(path, query, header, formData, body)
  let scheme = call_606789.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606789.url(scheme.get, call_606789.host, call_606789.base,
                         call_606789.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606789, url, valid)

proc call*(call_606790: Call_PostCreateDBSubnetGroup_606773;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_606791 = newJObject()
  var formData_606792 = newJObject()
  add(formData_606792, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606791, "Action", newJString(Action))
  if Tags != nil:
    formData_606792.add "Tags", Tags
  add(formData_606792, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606791, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_606792.add "SubnetIds", SubnetIds
  result = call_606790.call(nil, query_606791, nil, formData_606792, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_606773(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_606774, base: "/",
    url: url_PostCreateDBSubnetGroup_606775, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_606754 = ref object of OpenApiRestCall_605573
proc url_GetCreateDBSubnetGroup_606756(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_606755(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606757 = query.getOrDefault("Tags")
  valid_606757 = validateParameter(valid_606757, JArray, required = false,
                                 default = nil)
  if valid_606757 != nil:
    section.add "Tags", valid_606757
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_606758 = query.getOrDefault("SubnetIds")
  valid_606758 = validateParameter(valid_606758, JArray, required = true, default = nil)
  if valid_606758 != nil:
    section.add "SubnetIds", valid_606758
  var valid_606759 = query.getOrDefault("Action")
  valid_606759 = validateParameter(valid_606759, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_606759 != nil:
    section.add "Action", valid_606759
  var valid_606760 = query.getOrDefault("DBSubnetGroupDescription")
  valid_606760 = validateParameter(valid_606760, JString, required = true,
                                 default = nil)
  if valid_606760 != nil:
    section.add "DBSubnetGroupDescription", valid_606760
  var valid_606761 = query.getOrDefault("DBSubnetGroupName")
  valid_606761 = validateParameter(valid_606761, JString, required = true,
                                 default = nil)
  if valid_606761 != nil:
    section.add "DBSubnetGroupName", valid_606761
  var valid_606762 = query.getOrDefault("Version")
  valid_606762 = validateParameter(valid_606762, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606762 != nil:
    section.add "Version", valid_606762
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606763 = header.getOrDefault("X-Amz-Signature")
  valid_606763 = validateParameter(valid_606763, JString, required = false,
                                 default = nil)
  if valid_606763 != nil:
    section.add "X-Amz-Signature", valid_606763
  var valid_606764 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606764 = validateParameter(valid_606764, JString, required = false,
                                 default = nil)
  if valid_606764 != nil:
    section.add "X-Amz-Content-Sha256", valid_606764
  var valid_606765 = header.getOrDefault("X-Amz-Date")
  valid_606765 = validateParameter(valid_606765, JString, required = false,
                                 default = nil)
  if valid_606765 != nil:
    section.add "X-Amz-Date", valid_606765
  var valid_606766 = header.getOrDefault("X-Amz-Credential")
  valid_606766 = validateParameter(valid_606766, JString, required = false,
                                 default = nil)
  if valid_606766 != nil:
    section.add "X-Amz-Credential", valid_606766
  var valid_606767 = header.getOrDefault("X-Amz-Security-Token")
  valid_606767 = validateParameter(valid_606767, JString, required = false,
                                 default = nil)
  if valid_606767 != nil:
    section.add "X-Amz-Security-Token", valid_606767
  var valid_606768 = header.getOrDefault("X-Amz-Algorithm")
  valid_606768 = validateParameter(valid_606768, JString, required = false,
                                 default = nil)
  if valid_606768 != nil:
    section.add "X-Amz-Algorithm", valid_606768
  var valid_606769 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606769 = validateParameter(valid_606769, JString, required = false,
                                 default = nil)
  if valid_606769 != nil:
    section.add "X-Amz-SignedHeaders", valid_606769
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606770: Call_GetCreateDBSubnetGroup_606754; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606770.validator(path, query, header, formData, body)
  let scheme = call_606770.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606770.url(scheme.get, call_606770.host, call_606770.base,
                         call_606770.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606770, url, valid)

proc call*(call_606771: Call_GetCreateDBSubnetGroup_606754; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : The tags to be assigned to the new DB subnet group.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606772 = newJObject()
  if Tags != nil:
    query_606772.add "Tags", Tags
  if SubnetIds != nil:
    query_606772.add "SubnetIds", SubnetIds
  add(query_606772, "Action", newJString(Action))
  add(query_606772, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606772, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606772, "Version", newJString(Version))
  result = call_606771.call(nil, query_606772, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_606754(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_606755, base: "/",
    url: url_GetCreateDBSubnetGroup_606756, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_606815 = ref object of OpenApiRestCall_605573
proc url_PostCreateEventSubscription_606817(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_606816(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606818 = query.getOrDefault("Action")
  valid_606818 = validateParameter(valid_606818, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_606818 != nil:
    section.add "Action", valid_606818
  var valid_606819 = query.getOrDefault("Version")
  valid_606819 = validateParameter(valid_606819, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606819 != nil:
    section.add "Version", valid_606819
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606820 = header.getOrDefault("X-Amz-Signature")
  valid_606820 = validateParameter(valid_606820, JString, required = false,
                                 default = nil)
  if valid_606820 != nil:
    section.add "X-Amz-Signature", valid_606820
  var valid_606821 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606821 = validateParameter(valid_606821, JString, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "X-Amz-Content-Sha256", valid_606821
  var valid_606822 = header.getOrDefault("X-Amz-Date")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "X-Amz-Date", valid_606822
  var valid_606823 = header.getOrDefault("X-Amz-Credential")
  valid_606823 = validateParameter(valid_606823, JString, required = false,
                                 default = nil)
  if valid_606823 != nil:
    section.add "X-Amz-Credential", valid_606823
  var valid_606824 = header.getOrDefault("X-Amz-Security-Token")
  valid_606824 = validateParameter(valid_606824, JString, required = false,
                                 default = nil)
  if valid_606824 != nil:
    section.add "X-Amz-Security-Token", valid_606824
  var valid_606825 = header.getOrDefault("X-Amz-Algorithm")
  valid_606825 = validateParameter(valid_606825, JString, required = false,
                                 default = nil)
  if valid_606825 != nil:
    section.add "X-Amz-Algorithm", valid_606825
  var valid_606826 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606826 = validateParameter(valid_606826, JString, required = false,
                                 default = nil)
  if valid_606826 != nil:
    section.add "X-Amz-SignedHeaders", valid_606826
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  section = newJObject()
  var valid_606827 = formData.getOrDefault("SourceIds")
  valid_606827 = validateParameter(valid_606827, JArray, required = false,
                                 default = nil)
  if valid_606827 != nil:
    section.add "SourceIds", valid_606827
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_606828 = formData.getOrDefault("SnsTopicArn")
  valid_606828 = validateParameter(valid_606828, JString, required = true,
                                 default = nil)
  if valid_606828 != nil:
    section.add "SnsTopicArn", valid_606828
  var valid_606829 = formData.getOrDefault("Enabled")
  valid_606829 = validateParameter(valid_606829, JBool, required = false, default = nil)
  if valid_606829 != nil:
    section.add "Enabled", valid_606829
  var valid_606830 = formData.getOrDefault("SubscriptionName")
  valid_606830 = validateParameter(valid_606830, JString, required = true,
                                 default = nil)
  if valid_606830 != nil:
    section.add "SubscriptionName", valid_606830
  var valid_606831 = formData.getOrDefault("SourceType")
  valid_606831 = validateParameter(valid_606831, JString, required = false,
                                 default = nil)
  if valid_606831 != nil:
    section.add "SourceType", valid_606831
  var valid_606832 = formData.getOrDefault("EventCategories")
  valid_606832 = validateParameter(valid_606832, JArray, required = false,
                                 default = nil)
  if valid_606832 != nil:
    section.add "EventCategories", valid_606832
  var valid_606833 = formData.getOrDefault("Tags")
  valid_606833 = validateParameter(valid_606833, JArray, required = false,
                                 default = nil)
  if valid_606833 != nil:
    section.add "Tags", valid_606833
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606834: Call_PostCreateEventSubscription_606815; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_606834.validator(path, query, header, formData, body)
  let scheme = call_606834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606834.url(scheme.get, call_606834.host, call_606834.base,
                         call_606834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606834, url, valid)

proc call*(call_606835: Call_PostCreateEventSubscription_606815;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   Version: string (required)
  var query_606836 = newJObject()
  var formData_606837 = newJObject()
  if SourceIds != nil:
    formData_606837.add "SourceIds", SourceIds
  add(formData_606837, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_606837, "Enabled", newJBool(Enabled))
  add(formData_606837, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606837, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_606837.add "EventCategories", EventCategories
  add(query_606836, "Action", newJString(Action))
  if Tags != nil:
    formData_606837.add "Tags", Tags
  add(query_606836, "Version", newJString(Version))
  result = call_606835.call(nil, query_606836, nil, formData_606837, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_606815(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_606816, base: "/",
    url: url_PostCreateEventSubscription_606817,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_606793 = ref object of OpenApiRestCall_605573
proc url_GetCreateEventSubscription_606795(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_606794(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606796 = query.getOrDefault("Tags")
  valid_606796 = validateParameter(valid_606796, JArray, required = false,
                                 default = nil)
  if valid_606796 != nil:
    section.add "Tags", valid_606796
  var valid_606797 = query.getOrDefault("SourceType")
  valid_606797 = validateParameter(valid_606797, JString, required = false,
                                 default = nil)
  if valid_606797 != nil:
    section.add "SourceType", valid_606797
  var valid_606798 = query.getOrDefault("Enabled")
  valid_606798 = validateParameter(valid_606798, JBool, required = false, default = nil)
  if valid_606798 != nil:
    section.add "Enabled", valid_606798
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_606799 = query.getOrDefault("SubscriptionName")
  valid_606799 = validateParameter(valid_606799, JString, required = true,
                                 default = nil)
  if valid_606799 != nil:
    section.add "SubscriptionName", valid_606799
  var valid_606800 = query.getOrDefault("EventCategories")
  valid_606800 = validateParameter(valid_606800, JArray, required = false,
                                 default = nil)
  if valid_606800 != nil:
    section.add "EventCategories", valid_606800
  var valid_606801 = query.getOrDefault("SourceIds")
  valid_606801 = validateParameter(valid_606801, JArray, required = false,
                                 default = nil)
  if valid_606801 != nil:
    section.add "SourceIds", valid_606801
  var valid_606802 = query.getOrDefault("Action")
  valid_606802 = validateParameter(valid_606802, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_606802 != nil:
    section.add "Action", valid_606802
  var valid_606803 = query.getOrDefault("SnsTopicArn")
  valid_606803 = validateParameter(valid_606803, JString, required = true,
                                 default = nil)
  if valid_606803 != nil:
    section.add "SnsTopicArn", valid_606803
  var valid_606804 = query.getOrDefault("Version")
  valid_606804 = validateParameter(valid_606804, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606804 != nil:
    section.add "Version", valid_606804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606805 = header.getOrDefault("X-Amz-Signature")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "X-Amz-Signature", valid_606805
  var valid_606806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606806 = validateParameter(valid_606806, JString, required = false,
                                 default = nil)
  if valid_606806 != nil:
    section.add "X-Amz-Content-Sha256", valid_606806
  var valid_606807 = header.getOrDefault("X-Amz-Date")
  valid_606807 = validateParameter(valid_606807, JString, required = false,
                                 default = nil)
  if valid_606807 != nil:
    section.add "X-Amz-Date", valid_606807
  var valid_606808 = header.getOrDefault("X-Amz-Credential")
  valid_606808 = validateParameter(valid_606808, JString, required = false,
                                 default = nil)
  if valid_606808 != nil:
    section.add "X-Amz-Credential", valid_606808
  var valid_606809 = header.getOrDefault("X-Amz-Security-Token")
  valid_606809 = validateParameter(valid_606809, JString, required = false,
                                 default = nil)
  if valid_606809 != nil:
    section.add "X-Amz-Security-Token", valid_606809
  var valid_606810 = header.getOrDefault("X-Amz-Algorithm")
  valid_606810 = validateParameter(valid_606810, JString, required = false,
                                 default = nil)
  if valid_606810 != nil:
    section.add "X-Amz-Algorithm", valid_606810
  var valid_606811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606811 = validateParameter(valid_606811, JString, required = false,
                                 default = nil)
  if valid_606811 != nil:
    section.add "X-Amz-SignedHeaders", valid_606811
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606812: Call_GetCreateEventSubscription_606793; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ## 
  let valid = call_606812.validator(path, query, header, formData, body)
  let scheme = call_606812.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606812.url(scheme.get, call_606812.host, call_606812.base,
                         call_606812.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606812, url, valid)

proc call*(call_606813: Call_GetCreateEventSubscription_606793;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the new event subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_606814 = newJObject()
  if Tags != nil:
    query_606814.add "Tags", Tags
  add(query_606814, "SourceType", newJString(SourceType))
  add(query_606814, "Enabled", newJBool(Enabled))
  add(query_606814, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_606814.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_606814.add "SourceIds", SourceIds
  add(query_606814, "Action", newJString(Action))
  add(query_606814, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_606814, "Version", newJString(Version))
  result = call_606813.call(nil, query_606814, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_606793(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_606794, base: "/",
    url: url_GetCreateEventSubscription_606795,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_606856 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBCluster_606858(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_606857(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606859 = query.getOrDefault("Action")
  valid_606859 = validateParameter(valid_606859, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_606859 != nil:
    section.add "Action", valid_606859
  var valid_606860 = query.getOrDefault("Version")
  valid_606860 = validateParameter(valid_606860, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606860 != nil:
    section.add "Version", valid_606860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606861 = header.getOrDefault("X-Amz-Signature")
  valid_606861 = validateParameter(valid_606861, JString, required = false,
                                 default = nil)
  if valid_606861 != nil:
    section.add "X-Amz-Signature", valid_606861
  var valid_606862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606862 = validateParameter(valid_606862, JString, required = false,
                                 default = nil)
  if valid_606862 != nil:
    section.add "X-Amz-Content-Sha256", valid_606862
  var valid_606863 = header.getOrDefault("X-Amz-Date")
  valid_606863 = validateParameter(valid_606863, JString, required = false,
                                 default = nil)
  if valid_606863 != nil:
    section.add "X-Amz-Date", valid_606863
  var valid_606864 = header.getOrDefault("X-Amz-Credential")
  valid_606864 = validateParameter(valid_606864, JString, required = false,
                                 default = nil)
  if valid_606864 != nil:
    section.add "X-Amz-Credential", valid_606864
  var valid_606865 = header.getOrDefault("X-Amz-Security-Token")
  valid_606865 = validateParameter(valid_606865, JString, required = false,
                                 default = nil)
  if valid_606865 != nil:
    section.add "X-Amz-Security-Token", valid_606865
  var valid_606866 = header.getOrDefault("X-Amz-Algorithm")
  valid_606866 = validateParameter(valid_606866, JString, required = false,
                                 default = nil)
  if valid_606866 != nil:
    section.add "X-Amz-Algorithm", valid_606866
  var valid_606867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606867 = validateParameter(valid_606867, JString, required = false,
                                 default = nil)
  if valid_606867 != nil:
    section.add "X-Amz-SignedHeaders", valid_606867
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_606868 = formData.getOrDefault("SkipFinalSnapshot")
  valid_606868 = validateParameter(valid_606868, JBool, required = false, default = nil)
  if valid_606868 != nil:
    section.add "SkipFinalSnapshot", valid_606868
  var valid_606869 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606869 = validateParameter(valid_606869, JString, required = false,
                                 default = nil)
  if valid_606869 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606869
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606870 = formData.getOrDefault("DBClusterIdentifier")
  valid_606870 = validateParameter(valid_606870, JString, required = true,
                                 default = nil)
  if valid_606870 != nil:
    section.add "DBClusterIdentifier", valid_606870
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606871: Call_PostDeleteDBCluster_606856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_606871.validator(path, query, header, formData, body)
  let scheme = call_606871.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606871.url(scheme.get, call_606871.host, call_606871.base,
                         call_606871.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606871, url, valid)

proc call*(call_606872: Call_PostDeleteDBCluster_606856;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_606873 = newJObject()
  var formData_606874 = newJObject()
  add(query_606873, "Action", newJString(Action))
  add(formData_606874, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_606874, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_606873, "Version", newJString(Version))
  add(formData_606874, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606872.call(nil, query_606873, nil, formData_606874, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_606856(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_606857, base: "/",
    url: url_PostDeleteDBCluster_606858, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_606838 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBCluster_606840(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_606839(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606841 = query.getOrDefault("DBClusterIdentifier")
  valid_606841 = validateParameter(valid_606841, JString, required = true,
                                 default = nil)
  if valid_606841 != nil:
    section.add "DBClusterIdentifier", valid_606841
  var valid_606842 = query.getOrDefault("SkipFinalSnapshot")
  valid_606842 = validateParameter(valid_606842, JBool, required = false, default = nil)
  if valid_606842 != nil:
    section.add "SkipFinalSnapshot", valid_606842
  var valid_606843 = query.getOrDefault("Action")
  valid_606843 = validateParameter(valid_606843, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_606843 != nil:
    section.add "Action", valid_606843
  var valid_606844 = query.getOrDefault("Version")
  valid_606844 = validateParameter(valid_606844, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606844 != nil:
    section.add "Version", valid_606844
  var valid_606845 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606845 = validateParameter(valid_606845, JString, required = false,
                                 default = nil)
  if valid_606845 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606846 = header.getOrDefault("X-Amz-Signature")
  valid_606846 = validateParameter(valid_606846, JString, required = false,
                                 default = nil)
  if valid_606846 != nil:
    section.add "X-Amz-Signature", valid_606846
  var valid_606847 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606847 = validateParameter(valid_606847, JString, required = false,
                                 default = nil)
  if valid_606847 != nil:
    section.add "X-Amz-Content-Sha256", valid_606847
  var valid_606848 = header.getOrDefault("X-Amz-Date")
  valid_606848 = validateParameter(valid_606848, JString, required = false,
                                 default = nil)
  if valid_606848 != nil:
    section.add "X-Amz-Date", valid_606848
  var valid_606849 = header.getOrDefault("X-Amz-Credential")
  valid_606849 = validateParameter(valid_606849, JString, required = false,
                                 default = nil)
  if valid_606849 != nil:
    section.add "X-Amz-Credential", valid_606849
  var valid_606850 = header.getOrDefault("X-Amz-Security-Token")
  valid_606850 = validateParameter(valid_606850, JString, required = false,
                                 default = nil)
  if valid_606850 != nil:
    section.add "X-Amz-Security-Token", valid_606850
  var valid_606851 = header.getOrDefault("X-Amz-Algorithm")
  valid_606851 = validateParameter(valid_606851, JString, required = false,
                                 default = nil)
  if valid_606851 != nil:
    section.add "X-Amz-Algorithm", valid_606851
  var valid_606852 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606852 = validateParameter(valid_606852, JString, required = false,
                                 default = nil)
  if valid_606852 != nil:
    section.add "X-Amz-SignedHeaders", valid_606852
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606853: Call_GetDeleteDBCluster_606838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ## 
  let valid = call_606853.validator(path, query, header, formData, body)
  let scheme = call_606853.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606853.url(scheme.get, call_606853.host, call_606853.base,
                         call_606853.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606853, url, valid)

proc call*(call_606854: Call_GetDeleteDBCluster_606838;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_606855 = newJObject()
  add(query_606855, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606855, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_606855, "Action", newJString(Action))
  add(query_606855, "Version", newJString(Version))
  add(query_606855, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_606854.call(nil, query_606855, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_606838(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_606839,
    base: "/", url: url_GetDeleteDBCluster_606840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_606891 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBClusterParameterGroup_606893(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_606892(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606894 = query.getOrDefault("Action")
  valid_606894 = validateParameter(valid_606894, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_606894 != nil:
    section.add "Action", valid_606894
  var valid_606895 = query.getOrDefault("Version")
  valid_606895 = validateParameter(valid_606895, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606895 != nil:
    section.add "Version", valid_606895
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606896 = header.getOrDefault("X-Amz-Signature")
  valid_606896 = validateParameter(valid_606896, JString, required = false,
                                 default = nil)
  if valid_606896 != nil:
    section.add "X-Amz-Signature", valid_606896
  var valid_606897 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606897 = validateParameter(valid_606897, JString, required = false,
                                 default = nil)
  if valid_606897 != nil:
    section.add "X-Amz-Content-Sha256", valid_606897
  var valid_606898 = header.getOrDefault("X-Amz-Date")
  valid_606898 = validateParameter(valid_606898, JString, required = false,
                                 default = nil)
  if valid_606898 != nil:
    section.add "X-Amz-Date", valid_606898
  var valid_606899 = header.getOrDefault("X-Amz-Credential")
  valid_606899 = validateParameter(valid_606899, JString, required = false,
                                 default = nil)
  if valid_606899 != nil:
    section.add "X-Amz-Credential", valid_606899
  var valid_606900 = header.getOrDefault("X-Amz-Security-Token")
  valid_606900 = validateParameter(valid_606900, JString, required = false,
                                 default = nil)
  if valid_606900 != nil:
    section.add "X-Amz-Security-Token", valid_606900
  var valid_606901 = header.getOrDefault("X-Amz-Algorithm")
  valid_606901 = validateParameter(valid_606901, JString, required = false,
                                 default = nil)
  if valid_606901 != nil:
    section.add "X-Amz-Algorithm", valid_606901
  var valid_606902 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606902 = validateParameter(valid_606902, JString, required = false,
                                 default = nil)
  if valid_606902 != nil:
    section.add "X-Amz-SignedHeaders", valid_606902
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606903 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606903 = validateParameter(valid_606903, JString, required = true,
                                 default = nil)
  if valid_606903 != nil:
    section.add "DBClusterParameterGroupName", valid_606903
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606904: Call_PostDeleteDBClusterParameterGroup_606891;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_606904.validator(path, query, header, formData, body)
  let scheme = call_606904.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606904.url(scheme.get, call_606904.host, call_606904.base,
                         call_606904.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606904, url, valid)

proc call*(call_606905: Call_PostDeleteDBClusterParameterGroup_606891;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_606906 = newJObject()
  var formData_606907 = newJObject()
  add(query_606906, "Action", newJString(Action))
  add(formData_606907, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606906, "Version", newJString(Version))
  result = call_606905.call(nil, query_606906, nil, formData_606907, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_606891(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_606892, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_606893,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_606875 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBClusterParameterGroup_606877(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_606876(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606878 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606878 = validateParameter(valid_606878, JString, required = true,
                                 default = nil)
  if valid_606878 != nil:
    section.add "DBClusterParameterGroupName", valid_606878
  var valid_606879 = query.getOrDefault("Action")
  valid_606879 = validateParameter(valid_606879, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_606879 != nil:
    section.add "Action", valid_606879
  var valid_606880 = query.getOrDefault("Version")
  valid_606880 = validateParameter(valid_606880, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606880 != nil:
    section.add "Version", valid_606880
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606881 = header.getOrDefault("X-Amz-Signature")
  valid_606881 = validateParameter(valid_606881, JString, required = false,
                                 default = nil)
  if valid_606881 != nil:
    section.add "X-Amz-Signature", valid_606881
  var valid_606882 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606882 = validateParameter(valid_606882, JString, required = false,
                                 default = nil)
  if valid_606882 != nil:
    section.add "X-Amz-Content-Sha256", valid_606882
  var valid_606883 = header.getOrDefault("X-Amz-Date")
  valid_606883 = validateParameter(valid_606883, JString, required = false,
                                 default = nil)
  if valid_606883 != nil:
    section.add "X-Amz-Date", valid_606883
  var valid_606884 = header.getOrDefault("X-Amz-Credential")
  valid_606884 = validateParameter(valid_606884, JString, required = false,
                                 default = nil)
  if valid_606884 != nil:
    section.add "X-Amz-Credential", valid_606884
  var valid_606885 = header.getOrDefault("X-Amz-Security-Token")
  valid_606885 = validateParameter(valid_606885, JString, required = false,
                                 default = nil)
  if valid_606885 != nil:
    section.add "X-Amz-Security-Token", valid_606885
  var valid_606886 = header.getOrDefault("X-Amz-Algorithm")
  valid_606886 = validateParameter(valid_606886, JString, required = false,
                                 default = nil)
  if valid_606886 != nil:
    section.add "X-Amz-Algorithm", valid_606886
  var valid_606887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606887 = validateParameter(valid_606887, JString, required = false,
                                 default = nil)
  if valid_606887 != nil:
    section.add "X-Amz-SignedHeaders", valid_606887
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606888: Call_GetDeleteDBClusterParameterGroup_606875;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ## 
  let valid = call_606888.validator(path, query, header, formData, body)
  let scheme = call_606888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606888.url(scheme.get, call_606888.host, call_606888.base,
                         call_606888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606888, url, valid)

proc call*(call_606889: Call_GetDeleteDBClusterParameterGroup_606875;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606890 = newJObject()
  add(query_606890, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606890, "Action", newJString(Action))
  add(query_606890, "Version", newJString(Version))
  result = call_606889.call(nil, query_606890, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_606875(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_606876, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_606877,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_606924 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBClusterSnapshot_606926(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_606925(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606927 = query.getOrDefault("Action")
  valid_606927 = validateParameter(valid_606927, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_606927 != nil:
    section.add "Action", valid_606927
  var valid_606928 = query.getOrDefault("Version")
  valid_606928 = validateParameter(valid_606928, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606928 != nil:
    section.add "Version", valid_606928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606929 = header.getOrDefault("X-Amz-Signature")
  valid_606929 = validateParameter(valid_606929, JString, required = false,
                                 default = nil)
  if valid_606929 != nil:
    section.add "X-Amz-Signature", valid_606929
  var valid_606930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606930 = validateParameter(valid_606930, JString, required = false,
                                 default = nil)
  if valid_606930 != nil:
    section.add "X-Amz-Content-Sha256", valid_606930
  var valid_606931 = header.getOrDefault("X-Amz-Date")
  valid_606931 = validateParameter(valid_606931, JString, required = false,
                                 default = nil)
  if valid_606931 != nil:
    section.add "X-Amz-Date", valid_606931
  var valid_606932 = header.getOrDefault("X-Amz-Credential")
  valid_606932 = validateParameter(valid_606932, JString, required = false,
                                 default = nil)
  if valid_606932 != nil:
    section.add "X-Amz-Credential", valid_606932
  var valid_606933 = header.getOrDefault("X-Amz-Security-Token")
  valid_606933 = validateParameter(valid_606933, JString, required = false,
                                 default = nil)
  if valid_606933 != nil:
    section.add "X-Amz-Security-Token", valid_606933
  var valid_606934 = header.getOrDefault("X-Amz-Algorithm")
  valid_606934 = validateParameter(valid_606934, JString, required = false,
                                 default = nil)
  if valid_606934 != nil:
    section.add "X-Amz-Algorithm", valid_606934
  var valid_606935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606935 = validateParameter(valid_606935, JString, required = false,
                                 default = nil)
  if valid_606935 != nil:
    section.add "X-Amz-SignedHeaders", valid_606935
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606936 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606936 = validateParameter(valid_606936, JString, required = true,
                                 default = nil)
  if valid_606936 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606936
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606937: Call_PostDeleteDBClusterSnapshot_606924; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_606937.validator(path, query, header, formData, body)
  let scheme = call_606937.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606937.url(scheme.get, call_606937.host, call_606937.base,
                         call_606937.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606937, url, valid)

proc call*(call_606938: Call_PostDeleteDBClusterSnapshot_606924;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606939 = newJObject()
  var formData_606940 = newJObject()
  add(formData_606940, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606939, "Action", newJString(Action))
  add(query_606939, "Version", newJString(Version))
  result = call_606938.call(nil, query_606939, nil, formData_606940, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_606924(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_606925, base: "/",
    url: url_PostDeleteDBClusterSnapshot_606926,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_606908 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBClusterSnapshot_606910(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_606909(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606911 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606911 = validateParameter(valid_606911, JString, required = true,
                                 default = nil)
  if valid_606911 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606911
  var valid_606912 = query.getOrDefault("Action")
  valid_606912 = validateParameter(valid_606912, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_606912 != nil:
    section.add "Action", valid_606912
  var valid_606913 = query.getOrDefault("Version")
  valid_606913 = validateParameter(valid_606913, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606913 != nil:
    section.add "Version", valid_606913
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606914 = header.getOrDefault("X-Amz-Signature")
  valid_606914 = validateParameter(valid_606914, JString, required = false,
                                 default = nil)
  if valid_606914 != nil:
    section.add "X-Amz-Signature", valid_606914
  var valid_606915 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-Content-Sha256", valid_606915
  var valid_606916 = header.getOrDefault("X-Amz-Date")
  valid_606916 = validateParameter(valid_606916, JString, required = false,
                                 default = nil)
  if valid_606916 != nil:
    section.add "X-Amz-Date", valid_606916
  var valid_606917 = header.getOrDefault("X-Amz-Credential")
  valid_606917 = validateParameter(valid_606917, JString, required = false,
                                 default = nil)
  if valid_606917 != nil:
    section.add "X-Amz-Credential", valid_606917
  var valid_606918 = header.getOrDefault("X-Amz-Security-Token")
  valid_606918 = validateParameter(valid_606918, JString, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "X-Amz-Security-Token", valid_606918
  var valid_606919 = header.getOrDefault("X-Amz-Algorithm")
  valid_606919 = validateParameter(valid_606919, JString, required = false,
                                 default = nil)
  if valid_606919 != nil:
    section.add "X-Amz-Algorithm", valid_606919
  var valid_606920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606920 = validateParameter(valid_606920, JString, required = false,
                                 default = nil)
  if valid_606920 != nil:
    section.add "X-Amz-SignedHeaders", valid_606920
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606921: Call_GetDeleteDBClusterSnapshot_606908; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_606921.validator(path, query, header, formData, body)
  let scheme = call_606921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606921.url(scheme.get, call_606921.host, call_606921.base,
                         call_606921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606921, url, valid)

proc call*(call_606922: Call_GetDeleteDBClusterSnapshot_606908;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606923 = newJObject()
  add(query_606923, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606923, "Action", newJString(Action))
  add(query_606923, "Version", newJString(Version))
  result = call_606922.call(nil, query_606923, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_606908(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_606909, base: "/",
    url: url_GetDeleteDBClusterSnapshot_606910,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_606959 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBInstance_606961(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_606960(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606962 = query.getOrDefault("Action")
  valid_606962 = validateParameter(valid_606962, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_606962 != nil:
    section.add "Action", valid_606962
  var valid_606963 = query.getOrDefault("Version")
  valid_606963 = validateParameter(valid_606963, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606963 != nil:
    section.add "Version", valid_606963
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606964 = header.getOrDefault("X-Amz-Signature")
  valid_606964 = validateParameter(valid_606964, JString, required = false,
                                 default = nil)
  if valid_606964 != nil:
    section.add "X-Amz-Signature", valid_606964
  var valid_606965 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606965 = validateParameter(valid_606965, JString, required = false,
                                 default = nil)
  if valid_606965 != nil:
    section.add "X-Amz-Content-Sha256", valid_606965
  var valid_606966 = header.getOrDefault("X-Amz-Date")
  valid_606966 = validateParameter(valid_606966, JString, required = false,
                                 default = nil)
  if valid_606966 != nil:
    section.add "X-Amz-Date", valid_606966
  var valid_606967 = header.getOrDefault("X-Amz-Credential")
  valid_606967 = validateParameter(valid_606967, JString, required = false,
                                 default = nil)
  if valid_606967 != nil:
    section.add "X-Amz-Credential", valid_606967
  var valid_606968 = header.getOrDefault("X-Amz-Security-Token")
  valid_606968 = validateParameter(valid_606968, JString, required = false,
                                 default = nil)
  if valid_606968 != nil:
    section.add "X-Amz-Security-Token", valid_606968
  var valid_606969 = header.getOrDefault("X-Amz-Algorithm")
  valid_606969 = validateParameter(valid_606969, JString, required = false,
                                 default = nil)
  if valid_606969 != nil:
    section.add "X-Amz-Algorithm", valid_606969
  var valid_606970 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606970 = validateParameter(valid_606970, JString, required = false,
                                 default = nil)
  if valid_606970 != nil:
    section.add "X-Amz-SignedHeaders", valid_606970
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606971 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606971 = validateParameter(valid_606971, JString, required = true,
                                 default = nil)
  if valid_606971 != nil:
    section.add "DBInstanceIdentifier", valid_606971
  var valid_606972 = formData.getOrDefault("SkipFinalSnapshot")
  valid_606972 = validateParameter(valid_606972, JBool, required = false, default = nil)
  if valid_606972 != nil:
    section.add "SkipFinalSnapshot", valid_606972
  var valid_606973 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606973 = validateParameter(valid_606973, JString, required = false,
                                 default = nil)
  if valid_606973 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606973
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606974: Call_PostDeleteDBInstance_606959; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_606974.validator(path, query, header, formData, body)
  let scheme = call_606974.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606974.url(scheme.get, call_606974.host, call_606974.base,
                         call_606974.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606974, url, valid)

proc call*(call_606975: Call_PostDeleteDBInstance_606959;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  var query_606976 = newJObject()
  var formData_606977 = newJObject()
  add(formData_606977, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606976, "Action", newJString(Action))
  add(formData_606977, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_606977, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_606976, "Version", newJString(Version))
  result = call_606975.call(nil, query_606976, nil, formData_606977, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_606959(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_606960, base: "/",
    url: url_PostDeleteDBInstance_606961, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_606941 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBInstance_606943(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_606942(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606944 = query.getOrDefault("DBInstanceIdentifier")
  valid_606944 = validateParameter(valid_606944, JString, required = true,
                                 default = nil)
  if valid_606944 != nil:
    section.add "DBInstanceIdentifier", valid_606944
  var valid_606945 = query.getOrDefault("SkipFinalSnapshot")
  valid_606945 = validateParameter(valid_606945, JBool, required = false, default = nil)
  if valid_606945 != nil:
    section.add "SkipFinalSnapshot", valid_606945
  var valid_606946 = query.getOrDefault("Action")
  valid_606946 = validateParameter(valid_606946, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_606946 != nil:
    section.add "Action", valid_606946
  var valid_606947 = query.getOrDefault("Version")
  valid_606947 = validateParameter(valid_606947, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606947 != nil:
    section.add "Version", valid_606947
  var valid_606948 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606948 = validateParameter(valid_606948, JString, required = false,
                                 default = nil)
  if valid_606948 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606949 = header.getOrDefault("X-Amz-Signature")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "X-Amz-Signature", valid_606949
  var valid_606950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "X-Amz-Content-Sha256", valid_606950
  var valid_606951 = header.getOrDefault("X-Amz-Date")
  valid_606951 = validateParameter(valid_606951, JString, required = false,
                                 default = nil)
  if valid_606951 != nil:
    section.add "X-Amz-Date", valid_606951
  var valid_606952 = header.getOrDefault("X-Amz-Credential")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "X-Amz-Credential", valid_606952
  var valid_606953 = header.getOrDefault("X-Amz-Security-Token")
  valid_606953 = validateParameter(valid_606953, JString, required = false,
                                 default = nil)
  if valid_606953 != nil:
    section.add "X-Amz-Security-Token", valid_606953
  var valid_606954 = header.getOrDefault("X-Amz-Algorithm")
  valid_606954 = validateParameter(valid_606954, JString, required = false,
                                 default = nil)
  if valid_606954 != nil:
    section.add "X-Amz-Algorithm", valid_606954
  var valid_606955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606955 = validateParameter(valid_606955, JString, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "X-Amz-SignedHeaders", valid_606955
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606956: Call_GetDeleteDBInstance_606941; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ## 
  let valid = call_606956.validator(path, query, header, formData, body)
  let scheme = call_606956.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606956.url(scheme.get, call_606956.host, call_606956.base,
                         call_606956.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606956, url, valid)

proc call*(call_606957: Call_GetDeleteDBInstance_606941;
          DBInstanceIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBInstance"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul>
  var query_606958 = newJObject()
  add(query_606958, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606958, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_606958, "Action", newJString(Action))
  add(query_606958, "Version", newJString(Version))
  add(query_606958, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_606957.call(nil, query_606958, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_606941(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_606942, base: "/",
    url: url_GetDeleteDBInstance_606943, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_606994 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBParameterGroup_606996(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_606995(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606997 = query.getOrDefault("Action")
  valid_606997 = validateParameter(valid_606997, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_606997 != nil:
    section.add "Action", valid_606997
  var valid_606998 = query.getOrDefault("Version")
  valid_606998 = validateParameter(valid_606998, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606998 != nil:
    section.add "Version", valid_606998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606999 = header.getOrDefault("X-Amz-Signature")
  valid_606999 = validateParameter(valid_606999, JString, required = false,
                                 default = nil)
  if valid_606999 != nil:
    section.add "X-Amz-Signature", valid_606999
  var valid_607000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607000 = validateParameter(valid_607000, JString, required = false,
                                 default = nil)
  if valid_607000 != nil:
    section.add "X-Amz-Content-Sha256", valid_607000
  var valid_607001 = header.getOrDefault("X-Amz-Date")
  valid_607001 = validateParameter(valid_607001, JString, required = false,
                                 default = nil)
  if valid_607001 != nil:
    section.add "X-Amz-Date", valid_607001
  var valid_607002 = header.getOrDefault("X-Amz-Credential")
  valid_607002 = validateParameter(valid_607002, JString, required = false,
                                 default = nil)
  if valid_607002 != nil:
    section.add "X-Amz-Credential", valid_607002
  var valid_607003 = header.getOrDefault("X-Amz-Security-Token")
  valid_607003 = validateParameter(valid_607003, JString, required = false,
                                 default = nil)
  if valid_607003 != nil:
    section.add "X-Amz-Security-Token", valid_607003
  var valid_607004 = header.getOrDefault("X-Amz-Algorithm")
  valid_607004 = validateParameter(valid_607004, JString, required = false,
                                 default = nil)
  if valid_607004 != nil:
    section.add "X-Amz-Algorithm", valid_607004
  var valid_607005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607005 = validateParameter(valid_607005, JString, required = false,
                                 default = nil)
  if valid_607005 != nil:
    section.add "X-Amz-SignedHeaders", valid_607005
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_607006 = formData.getOrDefault("DBParameterGroupName")
  valid_607006 = validateParameter(valid_607006, JString, required = true,
                                 default = nil)
  if valid_607006 != nil:
    section.add "DBParameterGroupName", valid_607006
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607007: Call_PostDeleteDBParameterGroup_606994; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_607007.validator(path, query, header, formData, body)
  let scheme = call_607007.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607007.url(scheme.get, call_607007.host, call_607007.base,
                         call_607007.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607007, url, valid)

proc call*(call_607008: Call_PostDeleteDBParameterGroup_606994;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607009 = newJObject()
  var formData_607010 = newJObject()
  add(formData_607010, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607009, "Action", newJString(Action))
  add(query_607009, "Version", newJString(Version))
  result = call_607008.call(nil, query_607009, nil, formData_607010, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_606994(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_606995, base: "/",
    url: url_PostDeleteDBParameterGroup_606996,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_606978 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBParameterGroup_606980(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_606979(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_606981 = query.getOrDefault("DBParameterGroupName")
  valid_606981 = validateParameter(valid_606981, JString, required = true,
                                 default = nil)
  if valid_606981 != nil:
    section.add "DBParameterGroupName", valid_606981
  var valid_606982 = query.getOrDefault("Action")
  valid_606982 = validateParameter(valid_606982, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_606982 != nil:
    section.add "Action", valid_606982
  var valid_606983 = query.getOrDefault("Version")
  valid_606983 = validateParameter(valid_606983, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606983 != nil:
    section.add "Version", valid_606983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606984 = header.getOrDefault("X-Amz-Signature")
  valid_606984 = validateParameter(valid_606984, JString, required = false,
                                 default = nil)
  if valid_606984 != nil:
    section.add "X-Amz-Signature", valid_606984
  var valid_606985 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606985 = validateParameter(valid_606985, JString, required = false,
                                 default = nil)
  if valid_606985 != nil:
    section.add "X-Amz-Content-Sha256", valid_606985
  var valid_606986 = header.getOrDefault("X-Amz-Date")
  valid_606986 = validateParameter(valid_606986, JString, required = false,
                                 default = nil)
  if valid_606986 != nil:
    section.add "X-Amz-Date", valid_606986
  var valid_606987 = header.getOrDefault("X-Amz-Credential")
  valid_606987 = validateParameter(valid_606987, JString, required = false,
                                 default = nil)
  if valid_606987 != nil:
    section.add "X-Amz-Credential", valid_606987
  var valid_606988 = header.getOrDefault("X-Amz-Security-Token")
  valid_606988 = validateParameter(valid_606988, JString, required = false,
                                 default = nil)
  if valid_606988 != nil:
    section.add "X-Amz-Security-Token", valid_606988
  var valid_606989 = header.getOrDefault("X-Amz-Algorithm")
  valid_606989 = validateParameter(valid_606989, JString, required = false,
                                 default = nil)
  if valid_606989 != nil:
    section.add "X-Amz-Algorithm", valid_606989
  var valid_606990 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606990 = validateParameter(valid_606990, JString, required = false,
                                 default = nil)
  if valid_606990 != nil:
    section.add "X-Amz-SignedHeaders", valid_606990
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606991: Call_GetDeleteDBParameterGroup_606978; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_606991.validator(path, query, header, formData, body)
  let scheme = call_606991.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606991.url(scheme.get, call_606991.host, call_606991.base,
                         call_606991.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606991, url, valid)

proc call*(call_606992: Call_GetDeleteDBParameterGroup_606978;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606993 = newJObject()
  add(query_606993, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606993, "Action", newJString(Action))
  add(query_606993, "Version", newJString(Version))
  result = call_606992.call(nil, query_606993, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_606978(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_606979, base: "/",
    url: url_GetDeleteDBParameterGroup_606980,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_607027 = ref object of OpenApiRestCall_605573
proc url_PostDeleteDBSubnetGroup_607029(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_607028(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607030 = query.getOrDefault("Action")
  valid_607030 = validateParameter(valid_607030, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_607030 != nil:
    section.add "Action", valid_607030
  var valid_607031 = query.getOrDefault("Version")
  valid_607031 = validateParameter(valid_607031, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607031 != nil:
    section.add "Version", valid_607031
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607032 = header.getOrDefault("X-Amz-Signature")
  valid_607032 = validateParameter(valid_607032, JString, required = false,
                                 default = nil)
  if valid_607032 != nil:
    section.add "X-Amz-Signature", valid_607032
  var valid_607033 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607033 = validateParameter(valid_607033, JString, required = false,
                                 default = nil)
  if valid_607033 != nil:
    section.add "X-Amz-Content-Sha256", valid_607033
  var valid_607034 = header.getOrDefault("X-Amz-Date")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "X-Amz-Date", valid_607034
  var valid_607035 = header.getOrDefault("X-Amz-Credential")
  valid_607035 = validateParameter(valid_607035, JString, required = false,
                                 default = nil)
  if valid_607035 != nil:
    section.add "X-Amz-Credential", valid_607035
  var valid_607036 = header.getOrDefault("X-Amz-Security-Token")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "X-Amz-Security-Token", valid_607036
  var valid_607037 = header.getOrDefault("X-Amz-Algorithm")
  valid_607037 = validateParameter(valid_607037, JString, required = false,
                                 default = nil)
  if valid_607037 != nil:
    section.add "X-Amz-Algorithm", valid_607037
  var valid_607038 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607038 = validateParameter(valid_607038, JString, required = false,
                                 default = nil)
  if valid_607038 != nil:
    section.add "X-Amz-SignedHeaders", valid_607038
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_607039 = formData.getOrDefault("DBSubnetGroupName")
  valid_607039 = validateParameter(valid_607039, JString, required = true,
                                 default = nil)
  if valid_607039 != nil:
    section.add "DBSubnetGroupName", valid_607039
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607040: Call_PostDeleteDBSubnetGroup_607027; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607040.validator(path, query, header, formData, body)
  let scheme = call_607040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607040.url(scheme.get, call_607040.host, call_607040.base,
                         call_607040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607040, url, valid)

proc call*(call_607041: Call_PostDeleteDBSubnetGroup_607027;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607042 = newJObject()
  var formData_607043 = newJObject()
  add(query_607042, "Action", newJString(Action))
  add(formData_607043, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607042, "Version", newJString(Version))
  result = call_607041.call(nil, query_607042, nil, formData_607043, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_607027(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_607028, base: "/",
    url: url_PostDeleteDBSubnetGroup_607029, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_607011 = ref object of OpenApiRestCall_605573
proc url_GetDeleteDBSubnetGroup_607013(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_607012(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607014 = query.getOrDefault("Action")
  valid_607014 = validateParameter(valid_607014, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_607014 != nil:
    section.add "Action", valid_607014
  var valid_607015 = query.getOrDefault("DBSubnetGroupName")
  valid_607015 = validateParameter(valid_607015, JString, required = true,
                                 default = nil)
  if valid_607015 != nil:
    section.add "DBSubnetGroupName", valid_607015
  var valid_607016 = query.getOrDefault("Version")
  valid_607016 = validateParameter(valid_607016, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607016 != nil:
    section.add "Version", valid_607016
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607017 = header.getOrDefault("X-Amz-Signature")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "X-Amz-Signature", valid_607017
  var valid_607018 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607018 = validateParameter(valid_607018, JString, required = false,
                                 default = nil)
  if valid_607018 != nil:
    section.add "X-Amz-Content-Sha256", valid_607018
  var valid_607019 = header.getOrDefault("X-Amz-Date")
  valid_607019 = validateParameter(valid_607019, JString, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "X-Amz-Date", valid_607019
  var valid_607020 = header.getOrDefault("X-Amz-Credential")
  valid_607020 = validateParameter(valid_607020, JString, required = false,
                                 default = nil)
  if valid_607020 != nil:
    section.add "X-Amz-Credential", valid_607020
  var valid_607021 = header.getOrDefault("X-Amz-Security-Token")
  valid_607021 = validateParameter(valid_607021, JString, required = false,
                                 default = nil)
  if valid_607021 != nil:
    section.add "X-Amz-Security-Token", valid_607021
  var valid_607022 = header.getOrDefault("X-Amz-Algorithm")
  valid_607022 = validateParameter(valid_607022, JString, required = false,
                                 default = nil)
  if valid_607022 != nil:
    section.add "X-Amz-Algorithm", valid_607022
  var valid_607023 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607023 = validateParameter(valid_607023, JString, required = false,
                                 default = nil)
  if valid_607023 != nil:
    section.add "X-Amz-SignedHeaders", valid_607023
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607024: Call_GetDeleteDBSubnetGroup_607011; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_607024.validator(path, query, header, formData, body)
  let scheme = call_607024.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607024.url(scheme.get, call_607024.host, call_607024.base,
                         call_607024.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607024, url, valid)

proc call*(call_607025: Call_GetDeleteDBSubnetGroup_607011;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_607026 = newJObject()
  add(query_607026, "Action", newJString(Action))
  add(query_607026, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607026, "Version", newJString(Version))
  result = call_607025.call(nil, query_607026, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_607011(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_607012, base: "/",
    url: url_GetDeleteDBSubnetGroup_607013, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_607060 = ref object of OpenApiRestCall_605573
proc url_PostDeleteEventSubscription_607062(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_607061(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607063 = query.getOrDefault("Action")
  valid_607063 = validateParameter(valid_607063, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_607063 != nil:
    section.add "Action", valid_607063
  var valid_607064 = query.getOrDefault("Version")
  valid_607064 = validateParameter(valid_607064, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607064 != nil:
    section.add "Version", valid_607064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607065 = header.getOrDefault("X-Amz-Signature")
  valid_607065 = validateParameter(valid_607065, JString, required = false,
                                 default = nil)
  if valid_607065 != nil:
    section.add "X-Amz-Signature", valid_607065
  var valid_607066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607066 = validateParameter(valid_607066, JString, required = false,
                                 default = nil)
  if valid_607066 != nil:
    section.add "X-Amz-Content-Sha256", valid_607066
  var valid_607067 = header.getOrDefault("X-Amz-Date")
  valid_607067 = validateParameter(valid_607067, JString, required = false,
                                 default = nil)
  if valid_607067 != nil:
    section.add "X-Amz-Date", valid_607067
  var valid_607068 = header.getOrDefault("X-Amz-Credential")
  valid_607068 = validateParameter(valid_607068, JString, required = false,
                                 default = nil)
  if valid_607068 != nil:
    section.add "X-Amz-Credential", valid_607068
  var valid_607069 = header.getOrDefault("X-Amz-Security-Token")
  valid_607069 = validateParameter(valid_607069, JString, required = false,
                                 default = nil)
  if valid_607069 != nil:
    section.add "X-Amz-Security-Token", valid_607069
  var valid_607070 = header.getOrDefault("X-Amz-Algorithm")
  valid_607070 = validateParameter(valid_607070, JString, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "X-Amz-Algorithm", valid_607070
  var valid_607071 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607071 = validateParameter(valid_607071, JString, required = false,
                                 default = nil)
  if valid_607071 != nil:
    section.add "X-Amz-SignedHeaders", valid_607071
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_607072 = formData.getOrDefault("SubscriptionName")
  valid_607072 = validateParameter(valid_607072, JString, required = true,
                                 default = nil)
  if valid_607072 != nil:
    section.add "SubscriptionName", valid_607072
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607073: Call_PostDeleteEventSubscription_607060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_607073.validator(path, query, header, formData, body)
  let scheme = call_607073.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607073.url(scheme.get, call_607073.host, call_607073.base,
                         call_607073.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607073, url, valid)

proc call*(call_607074: Call_PostDeleteEventSubscription_607060;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607075 = newJObject()
  var formData_607076 = newJObject()
  add(formData_607076, "SubscriptionName", newJString(SubscriptionName))
  add(query_607075, "Action", newJString(Action))
  add(query_607075, "Version", newJString(Version))
  result = call_607074.call(nil, query_607075, nil, formData_607076, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_607060(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_607061, base: "/",
    url: url_PostDeleteEventSubscription_607062,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_607044 = ref object of OpenApiRestCall_605573
proc url_GetDeleteEventSubscription_607046(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_607045(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_607047 = query.getOrDefault("SubscriptionName")
  valid_607047 = validateParameter(valid_607047, JString, required = true,
                                 default = nil)
  if valid_607047 != nil:
    section.add "SubscriptionName", valid_607047
  var valid_607048 = query.getOrDefault("Action")
  valid_607048 = validateParameter(valid_607048, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_607048 != nil:
    section.add "Action", valid_607048
  var valid_607049 = query.getOrDefault("Version")
  valid_607049 = validateParameter(valid_607049, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607049 != nil:
    section.add "Version", valid_607049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607050 = header.getOrDefault("X-Amz-Signature")
  valid_607050 = validateParameter(valid_607050, JString, required = false,
                                 default = nil)
  if valid_607050 != nil:
    section.add "X-Amz-Signature", valid_607050
  var valid_607051 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607051 = validateParameter(valid_607051, JString, required = false,
                                 default = nil)
  if valid_607051 != nil:
    section.add "X-Amz-Content-Sha256", valid_607051
  var valid_607052 = header.getOrDefault("X-Amz-Date")
  valid_607052 = validateParameter(valid_607052, JString, required = false,
                                 default = nil)
  if valid_607052 != nil:
    section.add "X-Amz-Date", valid_607052
  var valid_607053 = header.getOrDefault("X-Amz-Credential")
  valid_607053 = validateParameter(valid_607053, JString, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "X-Amz-Credential", valid_607053
  var valid_607054 = header.getOrDefault("X-Amz-Security-Token")
  valid_607054 = validateParameter(valid_607054, JString, required = false,
                                 default = nil)
  if valid_607054 != nil:
    section.add "X-Amz-Security-Token", valid_607054
  var valid_607055 = header.getOrDefault("X-Amz-Algorithm")
  valid_607055 = validateParameter(valid_607055, JString, required = false,
                                 default = nil)
  if valid_607055 != nil:
    section.add "X-Amz-Algorithm", valid_607055
  var valid_607056 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607056 = validateParameter(valid_607056, JString, required = false,
                                 default = nil)
  if valid_607056 != nil:
    section.add "X-Amz-SignedHeaders", valid_607056
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607057: Call_GetDeleteEventSubscription_607044; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an event notification subscription.
  ## 
  let valid = call_607057.validator(path, query, header, formData, body)
  let scheme = call_607057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607057.url(scheme.get, call_607057.host, call_607057.base,
                         call_607057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607057, url, valid)

proc call*(call_607058: Call_GetDeleteEventSubscription_607044;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607059 = newJObject()
  add(query_607059, "SubscriptionName", newJString(SubscriptionName))
  add(query_607059, "Action", newJString(Action))
  add(query_607059, "Version", newJString(Version))
  result = call_607058.call(nil, query_607059, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_607044(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_607045, base: "/",
    url: url_GetDeleteEventSubscription_607046,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_607096 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterParameterGroups_607098(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_607097(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607099 = query.getOrDefault("Action")
  valid_607099 = validateParameter(valid_607099, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_607099 != nil:
    section.add "Action", valid_607099
  var valid_607100 = query.getOrDefault("Version")
  valid_607100 = validateParameter(valid_607100, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607100 != nil:
    section.add "Version", valid_607100
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607101 = header.getOrDefault("X-Amz-Signature")
  valid_607101 = validateParameter(valid_607101, JString, required = false,
                                 default = nil)
  if valid_607101 != nil:
    section.add "X-Amz-Signature", valid_607101
  var valid_607102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607102 = validateParameter(valid_607102, JString, required = false,
                                 default = nil)
  if valid_607102 != nil:
    section.add "X-Amz-Content-Sha256", valid_607102
  var valid_607103 = header.getOrDefault("X-Amz-Date")
  valid_607103 = validateParameter(valid_607103, JString, required = false,
                                 default = nil)
  if valid_607103 != nil:
    section.add "X-Amz-Date", valid_607103
  var valid_607104 = header.getOrDefault("X-Amz-Credential")
  valid_607104 = validateParameter(valid_607104, JString, required = false,
                                 default = nil)
  if valid_607104 != nil:
    section.add "X-Amz-Credential", valid_607104
  var valid_607105 = header.getOrDefault("X-Amz-Security-Token")
  valid_607105 = validateParameter(valid_607105, JString, required = false,
                                 default = nil)
  if valid_607105 != nil:
    section.add "X-Amz-Security-Token", valid_607105
  var valid_607106 = header.getOrDefault("X-Amz-Algorithm")
  valid_607106 = validateParameter(valid_607106, JString, required = false,
                                 default = nil)
  if valid_607106 != nil:
    section.add "X-Amz-Algorithm", valid_607106
  var valid_607107 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607107 = validateParameter(valid_607107, JString, required = false,
                                 default = nil)
  if valid_607107 != nil:
    section.add "X-Amz-SignedHeaders", valid_607107
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_607108 = formData.getOrDefault("MaxRecords")
  valid_607108 = validateParameter(valid_607108, JInt, required = false, default = nil)
  if valid_607108 != nil:
    section.add "MaxRecords", valid_607108
  var valid_607109 = formData.getOrDefault("Marker")
  valid_607109 = validateParameter(valid_607109, JString, required = false,
                                 default = nil)
  if valid_607109 != nil:
    section.add "Marker", valid_607109
  var valid_607110 = formData.getOrDefault("Filters")
  valid_607110 = validateParameter(valid_607110, JArray, required = false,
                                 default = nil)
  if valid_607110 != nil:
    section.add "Filters", valid_607110
  var valid_607111 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607111 = validateParameter(valid_607111, JString, required = false,
                                 default = nil)
  if valid_607111 != nil:
    section.add "DBClusterParameterGroupName", valid_607111
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607112: Call_PostDescribeDBClusterParameterGroups_607096;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_607112.validator(path, query, header, formData, body)
  let scheme = call_607112.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607112.url(scheme.get, call_607112.host, call_607112.base,
                         call_607112.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607112, url, valid)

proc call*(call_607113: Call_PostDescribeDBClusterParameterGroups_607096;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_607114 = newJObject()
  var formData_607115 = newJObject()
  add(formData_607115, "MaxRecords", newJInt(MaxRecords))
  add(formData_607115, "Marker", newJString(Marker))
  add(query_607114, "Action", newJString(Action))
  if Filters != nil:
    formData_607115.add "Filters", Filters
  add(formData_607115, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607114, "Version", newJString(Version))
  result = call_607113.call(nil, query_607114, nil, formData_607115, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_607096(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_607097, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_607098,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_607077 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterParameterGroups_607079(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_607078(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607080 = query.getOrDefault("Marker")
  valid_607080 = validateParameter(valid_607080, JString, required = false,
                                 default = nil)
  if valid_607080 != nil:
    section.add "Marker", valid_607080
  var valid_607081 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607081 = validateParameter(valid_607081, JString, required = false,
                                 default = nil)
  if valid_607081 != nil:
    section.add "DBClusterParameterGroupName", valid_607081
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607082 = query.getOrDefault("Action")
  valid_607082 = validateParameter(valid_607082, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_607082 != nil:
    section.add "Action", valid_607082
  var valid_607083 = query.getOrDefault("Version")
  valid_607083 = validateParameter(valid_607083, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607083 != nil:
    section.add "Version", valid_607083
  var valid_607084 = query.getOrDefault("Filters")
  valid_607084 = validateParameter(valid_607084, JArray, required = false,
                                 default = nil)
  if valid_607084 != nil:
    section.add "Filters", valid_607084
  var valid_607085 = query.getOrDefault("MaxRecords")
  valid_607085 = validateParameter(valid_607085, JInt, required = false, default = nil)
  if valid_607085 != nil:
    section.add "MaxRecords", valid_607085
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607086 = header.getOrDefault("X-Amz-Signature")
  valid_607086 = validateParameter(valid_607086, JString, required = false,
                                 default = nil)
  if valid_607086 != nil:
    section.add "X-Amz-Signature", valid_607086
  var valid_607087 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607087 = validateParameter(valid_607087, JString, required = false,
                                 default = nil)
  if valid_607087 != nil:
    section.add "X-Amz-Content-Sha256", valid_607087
  var valid_607088 = header.getOrDefault("X-Amz-Date")
  valid_607088 = validateParameter(valid_607088, JString, required = false,
                                 default = nil)
  if valid_607088 != nil:
    section.add "X-Amz-Date", valid_607088
  var valid_607089 = header.getOrDefault("X-Amz-Credential")
  valid_607089 = validateParameter(valid_607089, JString, required = false,
                                 default = nil)
  if valid_607089 != nil:
    section.add "X-Amz-Credential", valid_607089
  var valid_607090 = header.getOrDefault("X-Amz-Security-Token")
  valid_607090 = validateParameter(valid_607090, JString, required = false,
                                 default = nil)
  if valid_607090 != nil:
    section.add "X-Amz-Security-Token", valid_607090
  var valid_607091 = header.getOrDefault("X-Amz-Algorithm")
  valid_607091 = validateParameter(valid_607091, JString, required = false,
                                 default = nil)
  if valid_607091 != nil:
    section.add "X-Amz-Algorithm", valid_607091
  var valid_607092 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607092 = validateParameter(valid_607092, JString, required = false,
                                 default = nil)
  if valid_607092 != nil:
    section.add "X-Amz-SignedHeaders", valid_607092
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607093: Call_GetDescribeDBClusterParameterGroups_607077;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ## 
  let valid = call_607093.validator(path, query, header, formData, body)
  let scheme = call_607093.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607093.url(scheme.get, call_607093.host, call_607093.base,
                         call_607093.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607093, url, valid)

proc call*(call_607094: Call_GetDescribeDBClusterParameterGroups_607077;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ##  Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607095 = newJObject()
  add(query_607095, "Marker", newJString(Marker))
  add(query_607095, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607095, "Action", newJString(Action))
  add(query_607095, "Version", newJString(Version))
  if Filters != nil:
    query_607095.add "Filters", Filters
  add(query_607095, "MaxRecords", newJInt(MaxRecords))
  result = call_607094.call(nil, query_607095, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_607077(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_607078, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_607079,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_607136 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterParameters_607138(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_607137(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607139 = query.getOrDefault("Action")
  valid_607139 = validateParameter(valid_607139, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_607139 != nil:
    section.add "Action", valid_607139
  var valid_607140 = query.getOrDefault("Version")
  valid_607140 = validateParameter(valid_607140, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607140 != nil:
    section.add "Version", valid_607140
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607141 = header.getOrDefault("X-Amz-Signature")
  valid_607141 = validateParameter(valid_607141, JString, required = false,
                                 default = nil)
  if valid_607141 != nil:
    section.add "X-Amz-Signature", valid_607141
  var valid_607142 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607142 = validateParameter(valid_607142, JString, required = false,
                                 default = nil)
  if valid_607142 != nil:
    section.add "X-Amz-Content-Sha256", valid_607142
  var valid_607143 = header.getOrDefault("X-Amz-Date")
  valid_607143 = validateParameter(valid_607143, JString, required = false,
                                 default = nil)
  if valid_607143 != nil:
    section.add "X-Amz-Date", valid_607143
  var valid_607144 = header.getOrDefault("X-Amz-Credential")
  valid_607144 = validateParameter(valid_607144, JString, required = false,
                                 default = nil)
  if valid_607144 != nil:
    section.add "X-Amz-Credential", valid_607144
  var valid_607145 = header.getOrDefault("X-Amz-Security-Token")
  valid_607145 = validateParameter(valid_607145, JString, required = false,
                                 default = nil)
  if valid_607145 != nil:
    section.add "X-Amz-Security-Token", valid_607145
  var valid_607146 = header.getOrDefault("X-Amz-Algorithm")
  valid_607146 = validateParameter(valid_607146, JString, required = false,
                                 default = nil)
  if valid_607146 != nil:
    section.add "X-Amz-Algorithm", valid_607146
  var valid_607147 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607147 = validateParameter(valid_607147, JString, required = false,
                                 default = nil)
  if valid_607147 != nil:
    section.add "X-Amz-SignedHeaders", valid_607147
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_607148 = formData.getOrDefault("Source")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "Source", valid_607148
  var valid_607149 = formData.getOrDefault("MaxRecords")
  valid_607149 = validateParameter(valid_607149, JInt, required = false, default = nil)
  if valid_607149 != nil:
    section.add "MaxRecords", valid_607149
  var valid_607150 = formData.getOrDefault("Marker")
  valid_607150 = validateParameter(valid_607150, JString, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "Marker", valid_607150
  var valid_607151 = formData.getOrDefault("Filters")
  valid_607151 = validateParameter(valid_607151, JArray, required = false,
                                 default = nil)
  if valid_607151 != nil:
    section.add "Filters", valid_607151
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607152 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607152 = validateParameter(valid_607152, JString, required = true,
                                 default = nil)
  if valid_607152 != nil:
    section.add "DBClusterParameterGroupName", valid_607152
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607153: Call_PostDescribeDBClusterParameters_607136;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_607153.validator(path, query, header, formData, body)
  let scheme = call_607153.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607153.url(scheme.get, call_607153.host, call_607153.base,
                         call_607153.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607153, url, valid)

proc call*(call_607154: Call_PostDescribeDBClusterParameters_607136;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_607155 = newJObject()
  var formData_607156 = newJObject()
  add(formData_607156, "Source", newJString(Source))
  add(formData_607156, "MaxRecords", newJInt(MaxRecords))
  add(formData_607156, "Marker", newJString(Marker))
  add(query_607155, "Action", newJString(Action))
  if Filters != nil:
    formData_607156.add "Filters", Filters
  add(formData_607156, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607155, "Version", newJString(Version))
  result = call_607154.call(nil, query_607155, nil, formData_607156, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_607136(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_607137, base: "/",
    url: url_PostDescribeDBClusterParameters_607138,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_607116 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterParameters_607118(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_607117(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607119 = query.getOrDefault("Marker")
  valid_607119 = validateParameter(valid_607119, JString, required = false,
                                 default = nil)
  if valid_607119 != nil:
    section.add "Marker", valid_607119
  var valid_607120 = query.getOrDefault("Source")
  valid_607120 = validateParameter(valid_607120, JString, required = false,
                                 default = nil)
  if valid_607120 != nil:
    section.add "Source", valid_607120
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607121 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607121 = validateParameter(valid_607121, JString, required = true,
                                 default = nil)
  if valid_607121 != nil:
    section.add "DBClusterParameterGroupName", valid_607121
  var valid_607122 = query.getOrDefault("Action")
  valid_607122 = validateParameter(valid_607122, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_607122 != nil:
    section.add "Action", valid_607122
  var valid_607123 = query.getOrDefault("Version")
  valid_607123 = validateParameter(valid_607123, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607123 != nil:
    section.add "Version", valid_607123
  var valid_607124 = query.getOrDefault("Filters")
  valid_607124 = validateParameter(valid_607124, JArray, required = false,
                                 default = nil)
  if valid_607124 != nil:
    section.add "Filters", valid_607124
  var valid_607125 = query.getOrDefault("MaxRecords")
  valid_607125 = validateParameter(valid_607125, JInt, required = false, default = nil)
  if valid_607125 != nil:
    section.add "MaxRecords", valid_607125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607126 = header.getOrDefault("X-Amz-Signature")
  valid_607126 = validateParameter(valid_607126, JString, required = false,
                                 default = nil)
  if valid_607126 != nil:
    section.add "X-Amz-Signature", valid_607126
  var valid_607127 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607127 = validateParameter(valid_607127, JString, required = false,
                                 default = nil)
  if valid_607127 != nil:
    section.add "X-Amz-Content-Sha256", valid_607127
  var valid_607128 = header.getOrDefault("X-Amz-Date")
  valid_607128 = validateParameter(valid_607128, JString, required = false,
                                 default = nil)
  if valid_607128 != nil:
    section.add "X-Amz-Date", valid_607128
  var valid_607129 = header.getOrDefault("X-Amz-Credential")
  valid_607129 = validateParameter(valid_607129, JString, required = false,
                                 default = nil)
  if valid_607129 != nil:
    section.add "X-Amz-Credential", valid_607129
  var valid_607130 = header.getOrDefault("X-Amz-Security-Token")
  valid_607130 = validateParameter(valid_607130, JString, required = false,
                                 default = nil)
  if valid_607130 != nil:
    section.add "X-Amz-Security-Token", valid_607130
  var valid_607131 = header.getOrDefault("X-Amz-Algorithm")
  valid_607131 = validateParameter(valid_607131, JString, required = false,
                                 default = nil)
  if valid_607131 != nil:
    section.add "X-Amz-Algorithm", valid_607131
  var valid_607132 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "X-Amz-SignedHeaders", valid_607132
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607133: Call_GetDescribeDBClusterParameters_607116; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ## 
  let valid = call_607133.validator(path, query, header, formData, body)
  let scheme = call_607133.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607133.url(scheme.get, call_607133.host, call_607133.base,
                         call_607133.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607133, url, valid)

proc call*(call_607134: Call_GetDescribeDBClusterParameters_607116;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## Returns the detailed parameter list for a particular DB cluster parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607135 = newJObject()
  add(query_607135, "Marker", newJString(Marker))
  add(query_607135, "Source", newJString(Source))
  add(query_607135, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607135, "Action", newJString(Action))
  add(query_607135, "Version", newJString(Version))
  if Filters != nil:
    query_607135.add "Filters", Filters
  add(query_607135, "MaxRecords", newJInt(MaxRecords))
  result = call_607134.call(nil, query_607135, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_607116(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_607117, base: "/",
    url: url_GetDescribeDBClusterParameters_607118,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_607173 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterSnapshotAttributes_607175(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_607174(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607176 = query.getOrDefault("Action")
  valid_607176 = validateParameter(valid_607176, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_607176 != nil:
    section.add "Action", valid_607176
  var valid_607177 = query.getOrDefault("Version")
  valid_607177 = validateParameter(valid_607177, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607177 != nil:
    section.add "Version", valid_607177
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607178 = header.getOrDefault("X-Amz-Signature")
  valid_607178 = validateParameter(valid_607178, JString, required = false,
                                 default = nil)
  if valid_607178 != nil:
    section.add "X-Amz-Signature", valid_607178
  var valid_607179 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607179 = validateParameter(valid_607179, JString, required = false,
                                 default = nil)
  if valid_607179 != nil:
    section.add "X-Amz-Content-Sha256", valid_607179
  var valid_607180 = header.getOrDefault("X-Amz-Date")
  valid_607180 = validateParameter(valid_607180, JString, required = false,
                                 default = nil)
  if valid_607180 != nil:
    section.add "X-Amz-Date", valid_607180
  var valid_607181 = header.getOrDefault("X-Amz-Credential")
  valid_607181 = validateParameter(valid_607181, JString, required = false,
                                 default = nil)
  if valid_607181 != nil:
    section.add "X-Amz-Credential", valid_607181
  var valid_607182 = header.getOrDefault("X-Amz-Security-Token")
  valid_607182 = validateParameter(valid_607182, JString, required = false,
                                 default = nil)
  if valid_607182 != nil:
    section.add "X-Amz-Security-Token", valid_607182
  var valid_607183 = header.getOrDefault("X-Amz-Algorithm")
  valid_607183 = validateParameter(valid_607183, JString, required = false,
                                 default = nil)
  if valid_607183 != nil:
    section.add "X-Amz-Algorithm", valid_607183
  var valid_607184 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607184 = validateParameter(valid_607184, JString, required = false,
                                 default = nil)
  if valid_607184 != nil:
    section.add "X-Amz-SignedHeaders", valid_607184
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607185 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607185 = validateParameter(valid_607185, JString, required = true,
                                 default = nil)
  if valid_607185 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607185
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607186: Call_PostDescribeDBClusterSnapshotAttributes_607173;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_607186.validator(path, query, header, formData, body)
  let scheme = call_607186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607186.url(scheme.get, call_607186.host, call_607186.base,
                         call_607186.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607186, url, valid)

proc call*(call_607187: Call_PostDescribeDBClusterSnapshotAttributes_607173;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607188 = newJObject()
  var formData_607189 = newJObject()
  add(formData_607189, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607188, "Action", newJString(Action))
  add(query_607188, "Version", newJString(Version))
  result = call_607187.call(nil, query_607188, nil, formData_607189, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_607173(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_607174, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_607175,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_607157 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterSnapshotAttributes_607159(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_607158(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607160 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607160 = validateParameter(valid_607160, JString, required = true,
                                 default = nil)
  if valid_607160 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607160
  var valid_607161 = query.getOrDefault("Action")
  valid_607161 = validateParameter(valid_607161, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_607161 != nil:
    section.add "Action", valid_607161
  var valid_607162 = query.getOrDefault("Version")
  valid_607162 = validateParameter(valid_607162, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607162 != nil:
    section.add "Version", valid_607162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607163 = header.getOrDefault("X-Amz-Signature")
  valid_607163 = validateParameter(valid_607163, JString, required = false,
                                 default = nil)
  if valid_607163 != nil:
    section.add "X-Amz-Signature", valid_607163
  var valid_607164 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607164 = validateParameter(valid_607164, JString, required = false,
                                 default = nil)
  if valid_607164 != nil:
    section.add "X-Amz-Content-Sha256", valid_607164
  var valid_607165 = header.getOrDefault("X-Amz-Date")
  valid_607165 = validateParameter(valid_607165, JString, required = false,
                                 default = nil)
  if valid_607165 != nil:
    section.add "X-Amz-Date", valid_607165
  var valid_607166 = header.getOrDefault("X-Amz-Credential")
  valid_607166 = validateParameter(valid_607166, JString, required = false,
                                 default = nil)
  if valid_607166 != nil:
    section.add "X-Amz-Credential", valid_607166
  var valid_607167 = header.getOrDefault("X-Amz-Security-Token")
  valid_607167 = validateParameter(valid_607167, JString, required = false,
                                 default = nil)
  if valid_607167 != nil:
    section.add "X-Amz-Security-Token", valid_607167
  var valid_607168 = header.getOrDefault("X-Amz-Algorithm")
  valid_607168 = validateParameter(valid_607168, JString, required = false,
                                 default = nil)
  if valid_607168 != nil:
    section.add "X-Amz-Algorithm", valid_607168
  var valid_607169 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607169 = validateParameter(valid_607169, JString, required = false,
                                 default = nil)
  if valid_607169 != nil:
    section.add "X-Amz-SignedHeaders", valid_607169
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607170: Call_GetDescribeDBClusterSnapshotAttributes_607157;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ## 
  let valid = call_607170.validator(path, query, header, formData, body)
  let scheme = call_607170.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607170.url(scheme.get, call_607170.host, call_607170.base,
                         call_607170.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607170, url, valid)

proc call*(call_607171: Call_GetDescribeDBClusterSnapshotAttributes_607157;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607172 = newJObject()
  add(query_607172, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607172, "Action", newJString(Action))
  add(query_607172, "Version", newJString(Version))
  result = call_607171.call(nil, query_607172, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_607157(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_607158, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_607159,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_607213 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusterSnapshots_607215(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_607214(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607216 = query.getOrDefault("Action")
  valid_607216 = validateParameter(valid_607216, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_607216 != nil:
    section.add "Action", valid_607216
  var valid_607217 = query.getOrDefault("Version")
  valid_607217 = validateParameter(valid_607217, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607217 != nil:
    section.add "Version", valid_607217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607218 = header.getOrDefault("X-Amz-Signature")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-Signature", valid_607218
  var valid_607219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607219 = validateParameter(valid_607219, JString, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "X-Amz-Content-Sha256", valid_607219
  var valid_607220 = header.getOrDefault("X-Amz-Date")
  valid_607220 = validateParameter(valid_607220, JString, required = false,
                                 default = nil)
  if valid_607220 != nil:
    section.add "X-Amz-Date", valid_607220
  var valid_607221 = header.getOrDefault("X-Amz-Credential")
  valid_607221 = validateParameter(valid_607221, JString, required = false,
                                 default = nil)
  if valid_607221 != nil:
    section.add "X-Amz-Credential", valid_607221
  var valid_607222 = header.getOrDefault("X-Amz-Security-Token")
  valid_607222 = validateParameter(valid_607222, JString, required = false,
                                 default = nil)
  if valid_607222 != nil:
    section.add "X-Amz-Security-Token", valid_607222
  var valid_607223 = header.getOrDefault("X-Amz-Algorithm")
  valid_607223 = validateParameter(valid_607223, JString, required = false,
                                 default = nil)
  if valid_607223 != nil:
    section.add "X-Amz-Algorithm", valid_607223
  var valid_607224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607224 = validateParameter(valid_607224, JString, required = false,
                                 default = nil)
  if valid_607224 != nil:
    section.add "X-Amz-SignedHeaders", valid_607224
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_607225 = formData.getOrDefault("SnapshotType")
  valid_607225 = validateParameter(valid_607225, JString, required = false,
                                 default = nil)
  if valid_607225 != nil:
    section.add "SnapshotType", valid_607225
  var valid_607226 = formData.getOrDefault("MaxRecords")
  valid_607226 = validateParameter(valid_607226, JInt, required = false, default = nil)
  if valid_607226 != nil:
    section.add "MaxRecords", valid_607226
  var valid_607227 = formData.getOrDefault("IncludePublic")
  valid_607227 = validateParameter(valid_607227, JBool, required = false, default = nil)
  if valid_607227 != nil:
    section.add "IncludePublic", valid_607227
  var valid_607228 = formData.getOrDefault("Marker")
  valid_607228 = validateParameter(valid_607228, JString, required = false,
                                 default = nil)
  if valid_607228 != nil:
    section.add "Marker", valid_607228
  var valid_607229 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607229 = validateParameter(valid_607229, JString, required = false,
                                 default = nil)
  if valid_607229 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607229
  var valid_607230 = formData.getOrDefault("IncludeShared")
  valid_607230 = validateParameter(valid_607230, JBool, required = false, default = nil)
  if valid_607230 != nil:
    section.add "IncludeShared", valid_607230
  var valid_607231 = formData.getOrDefault("Filters")
  valid_607231 = validateParameter(valid_607231, JArray, required = false,
                                 default = nil)
  if valid_607231 != nil:
    section.add "Filters", valid_607231
  var valid_607232 = formData.getOrDefault("DBClusterIdentifier")
  valid_607232 = validateParameter(valid_607232, JString, required = false,
                                 default = nil)
  if valid_607232 != nil:
    section.add "DBClusterIdentifier", valid_607232
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607233: Call_PostDescribeDBClusterSnapshots_607213; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_607233.validator(path, query, header, formData, body)
  let scheme = call_607233.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607233.url(scheme.get, call_607233.host, call_607233.base,
                         call_607233.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607233, url, valid)

proc call*(call_607234: Call_PostDescribeDBClusterSnapshots_607213;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_607235 = newJObject()
  var formData_607236 = newJObject()
  add(formData_607236, "SnapshotType", newJString(SnapshotType))
  add(formData_607236, "MaxRecords", newJInt(MaxRecords))
  add(formData_607236, "IncludePublic", newJBool(IncludePublic))
  add(formData_607236, "Marker", newJString(Marker))
  add(formData_607236, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_607236, "IncludeShared", newJBool(IncludeShared))
  add(query_607235, "Action", newJString(Action))
  if Filters != nil:
    formData_607236.add "Filters", Filters
  add(query_607235, "Version", newJString(Version))
  add(formData_607236, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607234.call(nil, query_607235, nil, formData_607236, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_607213(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_607214, base: "/",
    url: url_PostDescribeDBClusterSnapshots_607215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_607190 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusterSnapshots_607192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_607191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607193 = query.getOrDefault("Marker")
  valid_607193 = validateParameter(valid_607193, JString, required = false,
                                 default = nil)
  if valid_607193 != nil:
    section.add "Marker", valid_607193
  var valid_607194 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607194 = validateParameter(valid_607194, JString, required = false,
                                 default = nil)
  if valid_607194 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607194
  var valid_607195 = query.getOrDefault("DBClusterIdentifier")
  valid_607195 = validateParameter(valid_607195, JString, required = false,
                                 default = nil)
  if valid_607195 != nil:
    section.add "DBClusterIdentifier", valid_607195
  var valid_607196 = query.getOrDefault("SnapshotType")
  valid_607196 = validateParameter(valid_607196, JString, required = false,
                                 default = nil)
  if valid_607196 != nil:
    section.add "SnapshotType", valid_607196
  var valid_607197 = query.getOrDefault("IncludePublic")
  valid_607197 = validateParameter(valid_607197, JBool, required = false, default = nil)
  if valid_607197 != nil:
    section.add "IncludePublic", valid_607197
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607198 = query.getOrDefault("Action")
  valid_607198 = validateParameter(valid_607198, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_607198 != nil:
    section.add "Action", valid_607198
  var valid_607199 = query.getOrDefault("IncludeShared")
  valid_607199 = validateParameter(valid_607199, JBool, required = false, default = nil)
  if valid_607199 != nil:
    section.add "IncludeShared", valid_607199
  var valid_607200 = query.getOrDefault("Version")
  valid_607200 = validateParameter(valid_607200, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607200 != nil:
    section.add "Version", valid_607200
  var valid_607201 = query.getOrDefault("Filters")
  valid_607201 = validateParameter(valid_607201, JArray, required = false,
                                 default = nil)
  if valid_607201 != nil:
    section.add "Filters", valid_607201
  var valid_607202 = query.getOrDefault("MaxRecords")
  valid_607202 = validateParameter(valid_607202, JInt, required = false, default = nil)
  if valid_607202 != nil:
    section.add "MaxRecords", valid_607202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607203 = header.getOrDefault("X-Amz-Signature")
  valid_607203 = validateParameter(valid_607203, JString, required = false,
                                 default = nil)
  if valid_607203 != nil:
    section.add "X-Amz-Signature", valid_607203
  var valid_607204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607204 = validateParameter(valid_607204, JString, required = false,
                                 default = nil)
  if valid_607204 != nil:
    section.add "X-Amz-Content-Sha256", valid_607204
  var valid_607205 = header.getOrDefault("X-Amz-Date")
  valid_607205 = validateParameter(valid_607205, JString, required = false,
                                 default = nil)
  if valid_607205 != nil:
    section.add "X-Amz-Date", valid_607205
  var valid_607206 = header.getOrDefault("X-Amz-Credential")
  valid_607206 = validateParameter(valid_607206, JString, required = false,
                                 default = nil)
  if valid_607206 != nil:
    section.add "X-Amz-Credential", valid_607206
  var valid_607207 = header.getOrDefault("X-Amz-Security-Token")
  valid_607207 = validateParameter(valid_607207, JString, required = false,
                                 default = nil)
  if valid_607207 != nil:
    section.add "X-Amz-Security-Token", valid_607207
  var valid_607208 = header.getOrDefault("X-Amz-Algorithm")
  valid_607208 = validateParameter(valid_607208, JString, required = false,
                                 default = nil)
  if valid_607208 != nil:
    section.add "X-Amz-Algorithm", valid_607208
  var valid_607209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607209 = validateParameter(valid_607209, JString, required = false,
                                 default = nil)
  if valid_607209 != nil:
    section.add "X-Amz-SignedHeaders", valid_607209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607210: Call_GetDescribeDBClusterSnapshots_607190; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ## 
  let valid = call_607210.validator(path, query, header, formData, body)
  let scheme = call_607210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607210.url(scheme.get, call_607210.host, call_607210.base,
                         call_607210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607210, url, valid)

proc call*(call_607211: Call_GetDescribeDBClusterSnapshots_607190;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## Returns information about DB cluster snapshots. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607212 = newJObject()
  add(query_607212, "Marker", newJString(Marker))
  add(query_607212, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607212, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607212, "SnapshotType", newJString(SnapshotType))
  add(query_607212, "IncludePublic", newJBool(IncludePublic))
  add(query_607212, "Action", newJString(Action))
  add(query_607212, "IncludeShared", newJBool(IncludeShared))
  add(query_607212, "Version", newJString(Version))
  if Filters != nil:
    query_607212.add "Filters", Filters
  add(query_607212, "MaxRecords", newJInt(MaxRecords))
  result = call_607211.call(nil, query_607212, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_607190(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_607191, base: "/",
    url: url_GetDescribeDBClusterSnapshots_607192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_607256 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBClusters_607258(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_607257(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607259 = query.getOrDefault("Action")
  valid_607259 = validateParameter(valid_607259, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_607259 != nil:
    section.add "Action", valid_607259
  var valid_607260 = query.getOrDefault("Version")
  valid_607260 = validateParameter(valid_607260, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607260 != nil:
    section.add "Version", valid_607260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607261 = header.getOrDefault("X-Amz-Signature")
  valid_607261 = validateParameter(valid_607261, JString, required = false,
                                 default = nil)
  if valid_607261 != nil:
    section.add "X-Amz-Signature", valid_607261
  var valid_607262 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Content-Sha256", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Date")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Date", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-Credential")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Credential", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-Security-Token")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-Security-Token", valid_607265
  var valid_607266 = header.getOrDefault("X-Amz-Algorithm")
  valid_607266 = validateParameter(valid_607266, JString, required = false,
                                 default = nil)
  if valid_607266 != nil:
    section.add "X-Amz-Algorithm", valid_607266
  var valid_607267 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607267 = validateParameter(valid_607267, JString, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "X-Amz-SignedHeaders", valid_607267
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_607268 = formData.getOrDefault("MaxRecords")
  valid_607268 = validateParameter(valid_607268, JInt, required = false, default = nil)
  if valid_607268 != nil:
    section.add "MaxRecords", valid_607268
  var valid_607269 = formData.getOrDefault("Marker")
  valid_607269 = validateParameter(valid_607269, JString, required = false,
                                 default = nil)
  if valid_607269 != nil:
    section.add "Marker", valid_607269
  var valid_607270 = formData.getOrDefault("Filters")
  valid_607270 = validateParameter(valid_607270, JArray, required = false,
                                 default = nil)
  if valid_607270 != nil:
    section.add "Filters", valid_607270
  var valid_607271 = formData.getOrDefault("DBClusterIdentifier")
  valid_607271 = validateParameter(valid_607271, JString, required = false,
                                 default = nil)
  if valid_607271 != nil:
    section.add "DBClusterIdentifier", valid_607271
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607272: Call_PostDescribeDBClusters_607256; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_607272.validator(path, query, header, formData, body)
  let scheme = call_607272.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607272.url(scheme.get, call_607272.host, call_607272.base,
                         call_607272.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607272, url, valid)

proc call*(call_607273: Call_PostDescribeDBClusters_607256; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_607274 = newJObject()
  var formData_607275 = newJObject()
  add(formData_607275, "MaxRecords", newJInt(MaxRecords))
  add(formData_607275, "Marker", newJString(Marker))
  add(query_607274, "Action", newJString(Action))
  if Filters != nil:
    formData_607275.add "Filters", Filters
  add(query_607274, "Version", newJString(Version))
  add(formData_607275, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607273.call(nil, query_607274, nil, formData_607275, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_607256(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_607257, base: "/",
    url: url_PostDescribeDBClusters_607258, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_607237 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBClusters_607239(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_607238(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607240 = query.getOrDefault("Marker")
  valid_607240 = validateParameter(valid_607240, JString, required = false,
                                 default = nil)
  if valid_607240 != nil:
    section.add "Marker", valid_607240
  var valid_607241 = query.getOrDefault("DBClusterIdentifier")
  valid_607241 = validateParameter(valid_607241, JString, required = false,
                                 default = nil)
  if valid_607241 != nil:
    section.add "DBClusterIdentifier", valid_607241
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607242 = query.getOrDefault("Action")
  valid_607242 = validateParameter(valid_607242, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_607242 != nil:
    section.add "Action", valid_607242
  var valid_607243 = query.getOrDefault("Version")
  valid_607243 = validateParameter(valid_607243, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607243 != nil:
    section.add "Version", valid_607243
  var valid_607244 = query.getOrDefault("Filters")
  valid_607244 = validateParameter(valid_607244, JArray, required = false,
                                 default = nil)
  if valid_607244 != nil:
    section.add "Filters", valid_607244
  var valid_607245 = query.getOrDefault("MaxRecords")
  valid_607245 = validateParameter(valid_607245, JInt, required = false, default = nil)
  if valid_607245 != nil:
    section.add "MaxRecords", valid_607245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607246 = header.getOrDefault("X-Amz-Signature")
  valid_607246 = validateParameter(valid_607246, JString, required = false,
                                 default = nil)
  if valid_607246 != nil:
    section.add "X-Amz-Signature", valid_607246
  var valid_607247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607247 = validateParameter(valid_607247, JString, required = false,
                                 default = nil)
  if valid_607247 != nil:
    section.add "X-Amz-Content-Sha256", valid_607247
  var valid_607248 = header.getOrDefault("X-Amz-Date")
  valid_607248 = validateParameter(valid_607248, JString, required = false,
                                 default = nil)
  if valid_607248 != nil:
    section.add "X-Amz-Date", valid_607248
  var valid_607249 = header.getOrDefault("X-Amz-Credential")
  valid_607249 = validateParameter(valid_607249, JString, required = false,
                                 default = nil)
  if valid_607249 != nil:
    section.add "X-Amz-Credential", valid_607249
  var valid_607250 = header.getOrDefault("X-Amz-Security-Token")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "X-Amz-Security-Token", valid_607250
  var valid_607251 = header.getOrDefault("X-Amz-Algorithm")
  valid_607251 = validateParameter(valid_607251, JString, required = false,
                                 default = nil)
  if valid_607251 != nil:
    section.add "X-Amz-Algorithm", valid_607251
  var valid_607252 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607252 = validateParameter(valid_607252, JString, required = false,
                                 default = nil)
  if valid_607252 != nil:
    section.add "X-Amz-SignedHeaders", valid_607252
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607253: Call_GetDescribeDBClusters_607237; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ## 
  let valid = call_607253.validator(path, query, header, formData, body)
  let scheme = call_607253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607253.url(scheme.get, call_607253.host, call_607253.base,
                         call_607253.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607253, url, valid)

proc call*(call_607254: Call_GetDescribeDBClusters_607237; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## Returns information about provisioned DB clusters. This API supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607255 = newJObject()
  add(query_607255, "Marker", newJString(Marker))
  add(query_607255, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607255, "Action", newJString(Action))
  add(query_607255, "Version", newJString(Version))
  if Filters != nil:
    query_607255.add "Filters", Filters
  add(query_607255, "MaxRecords", newJInt(MaxRecords))
  result = call_607254.call(nil, query_607255, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_607237(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_607238, base: "/",
    url: url_GetDescribeDBClusters_607239, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_607300 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBEngineVersions_607302(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_607301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607303 = query.getOrDefault("Action")
  valid_607303 = validateParameter(valid_607303, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_607303 != nil:
    section.add "Action", valid_607303
  var valid_607304 = query.getOrDefault("Version")
  valid_607304 = validateParameter(valid_607304, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607304 != nil:
    section.add "Version", valid_607304
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607305 = header.getOrDefault("X-Amz-Signature")
  valid_607305 = validateParameter(valid_607305, JString, required = false,
                                 default = nil)
  if valid_607305 != nil:
    section.add "X-Amz-Signature", valid_607305
  var valid_607306 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607306 = validateParameter(valid_607306, JString, required = false,
                                 default = nil)
  if valid_607306 != nil:
    section.add "X-Amz-Content-Sha256", valid_607306
  var valid_607307 = header.getOrDefault("X-Amz-Date")
  valid_607307 = validateParameter(valid_607307, JString, required = false,
                                 default = nil)
  if valid_607307 != nil:
    section.add "X-Amz-Date", valid_607307
  var valid_607308 = header.getOrDefault("X-Amz-Credential")
  valid_607308 = validateParameter(valid_607308, JString, required = false,
                                 default = nil)
  if valid_607308 != nil:
    section.add "X-Amz-Credential", valid_607308
  var valid_607309 = header.getOrDefault("X-Amz-Security-Token")
  valid_607309 = validateParameter(valid_607309, JString, required = false,
                                 default = nil)
  if valid_607309 != nil:
    section.add "X-Amz-Security-Token", valid_607309
  var valid_607310 = header.getOrDefault("X-Amz-Algorithm")
  valid_607310 = validateParameter(valid_607310, JString, required = false,
                                 default = nil)
  if valid_607310 != nil:
    section.add "X-Amz-Algorithm", valid_607310
  var valid_607311 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607311 = validateParameter(valid_607311, JString, required = false,
                                 default = nil)
  if valid_607311 != nil:
    section.add "X-Amz-SignedHeaders", valid_607311
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_607312 = formData.getOrDefault("DefaultOnly")
  valid_607312 = validateParameter(valid_607312, JBool, required = false, default = nil)
  if valid_607312 != nil:
    section.add "DefaultOnly", valid_607312
  var valid_607313 = formData.getOrDefault("MaxRecords")
  valid_607313 = validateParameter(valid_607313, JInt, required = false, default = nil)
  if valid_607313 != nil:
    section.add "MaxRecords", valid_607313
  var valid_607314 = formData.getOrDefault("EngineVersion")
  valid_607314 = validateParameter(valid_607314, JString, required = false,
                                 default = nil)
  if valid_607314 != nil:
    section.add "EngineVersion", valid_607314
  var valid_607315 = formData.getOrDefault("Marker")
  valid_607315 = validateParameter(valid_607315, JString, required = false,
                                 default = nil)
  if valid_607315 != nil:
    section.add "Marker", valid_607315
  var valid_607316 = formData.getOrDefault("Engine")
  valid_607316 = validateParameter(valid_607316, JString, required = false,
                                 default = nil)
  if valid_607316 != nil:
    section.add "Engine", valid_607316
  var valid_607317 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_607317 = validateParameter(valid_607317, JBool, required = false, default = nil)
  if valid_607317 != nil:
    section.add "ListSupportedCharacterSets", valid_607317
  var valid_607318 = formData.getOrDefault("ListSupportedTimezones")
  valid_607318 = validateParameter(valid_607318, JBool, required = false, default = nil)
  if valid_607318 != nil:
    section.add "ListSupportedTimezones", valid_607318
  var valid_607319 = formData.getOrDefault("Filters")
  valid_607319 = validateParameter(valid_607319, JArray, required = false,
                                 default = nil)
  if valid_607319 != nil:
    section.add "Filters", valid_607319
  var valid_607320 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607320 = validateParameter(valid_607320, JString, required = false,
                                 default = nil)
  if valid_607320 != nil:
    section.add "DBParameterGroupFamily", valid_607320
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607321: Call_PostDescribeDBEngineVersions_607300; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_607321.validator(path, query, header, formData, body)
  let scheme = call_607321.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607321.url(scheme.get, call_607321.host, call_607321.base,
                         call_607321.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607321, url, valid)

proc call*(call_607322: Call_PostDescribeDBEngineVersions_607300;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_607323 = newJObject()
  var formData_607324 = newJObject()
  add(formData_607324, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_607324, "MaxRecords", newJInt(MaxRecords))
  add(formData_607324, "EngineVersion", newJString(EngineVersion))
  add(formData_607324, "Marker", newJString(Marker))
  add(formData_607324, "Engine", newJString(Engine))
  add(formData_607324, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_607323, "Action", newJString(Action))
  add(formData_607324, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_607324.add "Filters", Filters
  add(query_607323, "Version", newJString(Version))
  add(formData_607324, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607322.call(nil, query_607323, nil, formData_607324, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_607300(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_607301, base: "/",
    url: url_PostDescribeDBEngineVersions_607302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_607276 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBEngineVersions_607278(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_607277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ListSupportedTimezones: JBool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_607279 = query.getOrDefault("Marker")
  valid_607279 = validateParameter(valid_607279, JString, required = false,
                                 default = nil)
  if valid_607279 != nil:
    section.add "Marker", valid_607279
  var valid_607280 = query.getOrDefault("ListSupportedTimezones")
  valid_607280 = validateParameter(valid_607280, JBool, required = false, default = nil)
  if valid_607280 != nil:
    section.add "ListSupportedTimezones", valid_607280
  var valid_607281 = query.getOrDefault("DBParameterGroupFamily")
  valid_607281 = validateParameter(valid_607281, JString, required = false,
                                 default = nil)
  if valid_607281 != nil:
    section.add "DBParameterGroupFamily", valid_607281
  var valid_607282 = query.getOrDefault("Engine")
  valid_607282 = validateParameter(valid_607282, JString, required = false,
                                 default = nil)
  if valid_607282 != nil:
    section.add "Engine", valid_607282
  var valid_607283 = query.getOrDefault("EngineVersion")
  valid_607283 = validateParameter(valid_607283, JString, required = false,
                                 default = nil)
  if valid_607283 != nil:
    section.add "EngineVersion", valid_607283
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607284 = query.getOrDefault("Action")
  valid_607284 = validateParameter(valid_607284, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_607284 != nil:
    section.add "Action", valid_607284
  var valid_607285 = query.getOrDefault("ListSupportedCharacterSets")
  valid_607285 = validateParameter(valid_607285, JBool, required = false, default = nil)
  if valid_607285 != nil:
    section.add "ListSupportedCharacterSets", valid_607285
  var valid_607286 = query.getOrDefault("Version")
  valid_607286 = validateParameter(valid_607286, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607286 != nil:
    section.add "Version", valid_607286
  var valid_607287 = query.getOrDefault("Filters")
  valid_607287 = validateParameter(valid_607287, JArray, required = false,
                                 default = nil)
  if valid_607287 != nil:
    section.add "Filters", valid_607287
  var valid_607288 = query.getOrDefault("MaxRecords")
  valid_607288 = validateParameter(valid_607288, JInt, required = false, default = nil)
  if valid_607288 != nil:
    section.add "MaxRecords", valid_607288
  var valid_607289 = query.getOrDefault("DefaultOnly")
  valid_607289 = validateParameter(valid_607289, JBool, required = false, default = nil)
  if valid_607289 != nil:
    section.add "DefaultOnly", valid_607289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607290 = header.getOrDefault("X-Amz-Signature")
  valid_607290 = validateParameter(valid_607290, JString, required = false,
                                 default = nil)
  if valid_607290 != nil:
    section.add "X-Amz-Signature", valid_607290
  var valid_607291 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607291 = validateParameter(valid_607291, JString, required = false,
                                 default = nil)
  if valid_607291 != nil:
    section.add "X-Amz-Content-Sha256", valid_607291
  var valid_607292 = header.getOrDefault("X-Amz-Date")
  valid_607292 = validateParameter(valid_607292, JString, required = false,
                                 default = nil)
  if valid_607292 != nil:
    section.add "X-Amz-Date", valid_607292
  var valid_607293 = header.getOrDefault("X-Amz-Credential")
  valid_607293 = validateParameter(valid_607293, JString, required = false,
                                 default = nil)
  if valid_607293 != nil:
    section.add "X-Amz-Credential", valid_607293
  var valid_607294 = header.getOrDefault("X-Amz-Security-Token")
  valid_607294 = validateParameter(valid_607294, JString, required = false,
                                 default = nil)
  if valid_607294 != nil:
    section.add "X-Amz-Security-Token", valid_607294
  var valid_607295 = header.getOrDefault("X-Amz-Algorithm")
  valid_607295 = validateParameter(valid_607295, JString, required = false,
                                 default = nil)
  if valid_607295 != nil:
    section.add "X-Amz-Algorithm", valid_607295
  var valid_607296 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607296 = validateParameter(valid_607296, JString, required = false,
                                 default = nil)
  if valid_607296 != nil:
    section.add "X-Amz-SignedHeaders", valid_607296
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607297: Call_GetDescribeDBEngineVersions_607276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_607297.validator(path, query, header, formData, body)
  let scheme = call_607297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607297.url(scheme.get, call_607297.host, call_607297.base,
                         call_607297.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607297, url, valid)

proc call*(call_607298: Call_GetDescribeDBEngineVersions_607276;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          EngineVersion: string = ""; Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   ListSupportedTimezones: bool
  ##                         : If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : Indicates that only the default version of the specified engine or engine and major version combination is returned.
  var query_607299 = newJObject()
  add(query_607299, "Marker", newJString(Marker))
  add(query_607299, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_607299, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607299, "Engine", newJString(Engine))
  add(query_607299, "EngineVersion", newJString(EngineVersion))
  add(query_607299, "Action", newJString(Action))
  add(query_607299, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_607299, "Version", newJString(Version))
  if Filters != nil:
    query_607299.add "Filters", Filters
  add(query_607299, "MaxRecords", newJInt(MaxRecords))
  add(query_607299, "DefaultOnly", newJBool(DefaultOnly))
  result = call_607298.call(nil, query_607299, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_607276(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_607277, base: "/",
    url: url_GetDescribeDBEngineVersions_607278,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_607344 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBInstances_607346(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_607345(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607347 = query.getOrDefault("Action")
  valid_607347 = validateParameter(valid_607347, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_607347 != nil:
    section.add "Action", valid_607347
  var valid_607348 = query.getOrDefault("Version")
  valid_607348 = validateParameter(valid_607348, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607348 != nil:
    section.add "Version", valid_607348
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607349 = header.getOrDefault("X-Amz-Signature")
  valid_607349 = validateParameter(valid_607349, JString, required = false,
                                 default = nil)
  if valid_607349 != nil:
    section.add "X-Amz-Signature", valid_607349
  var valid_607350 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607350 = validateParameter(valid_607350, JString, required = false,
                                 default = nil)
  if valid_607350 != nil:
    section.add "X-Amz-Content-Sha256", valid_607350
  var valid_607351 = header.getOrDefault("X-Amz-Date")
  valid_607351 = validateParameter(valid_607351, JString, required = false,
                                 default = nil)
  if valid_607351 != nil:
    section.add "X-Amz-Date", valid_607351
  var valid_607352 = header.getOrDefault("X-Amz-Credential")
  valid_607352 = validateParameter(valid_607352, JString, required = false,
                                 default = nil)
  if valid_607352 != nil:
    section.add "X-Amz-Credential", valid_607352
  var valid_607353 = header.getOrDefault("X-Amz-Security-Token")
  valid_607353 = validateParameter(valid_607353, JString, required = false,
                                 default = nil)
  if valid_607353 != nil:
    section.add "X-Amz-Security-Token", valid_607353
  var valid_607354 = header.getOrDefault("X-Amz-Algorithm")
  valid_607354 = validateParameter(valid_607354, JString, required = false,
                                 default = nil)
  if valid_607354 != nil:
    section.add "X-Amz-Algorithm", valid_607354
  var valid_607355 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607355 = validateParameter(valid_607355, JString, required = false,
                                 default = nil)
  if valid_607355 != nil:
    section.add "X-Amz-SignedHeaders", valid_607355
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_607356 = formData.getOrDefault("MaxRecords")
  valid_607356 = validateParameter(valid_607356, JInt, required = false, default = nil)
  if valid_607356 != nil:
    section.add "MaxRecords", valid_607356
  var valid_607357 = formData.getOrDefault("Marker")
  valid_607357 = validateParameter(valid_607357, JString, required = false,
                                 default = nil)
  if valid_607357 != nil:
    section.add "Marker", valid_607357
  var valid_607358 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607358 = validateParameter(valid_607358, JString, required = false,
                                 default = nil)
  if valid_607358 != nil:
    section.add "DBInstanceIdentifier", valid_607358
  var valid_607359 = formData.getOrDefault("Filters")
  valid_607359 = validateParameter(valid_607359, JArray, required = false,
                                 default = nil)
  if valid_607359 != nil:
    section.add "Filters", valid_607359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607360: Call_PostDescribeDBInstances_607344; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_607360.validator(path, query, header, formData, body)
  let scheme = call_607360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607360.url(scheme.get, call_607360.host, call_607360.base,
                         call_607360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607360, url, valid)

proc call*(call_607361: Call_PostDescribeDBInstances_607344; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_607362 = newJObject()
  var formData_607363 = newJObject()
  add(formData_607363, "MaxRecords", newJInt(MaxRecords))
  add(formData_607363, "Marker", newJString(Marker))
  add(formData_607363, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607362, "Action", newJString(Action))
  if Filters != nil:
    formData_607363.add "Filters", Filters
  add(query_607362, "Version", newJString(Version))
  result = call_607361.call(nil, query_607362, nil, formData_607363, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_607344(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_607345, base: "/",
    url: url_PostDescribeDBInstances_607346, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_607325 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBInstances_607327(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_607326(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607328 = query.getOrDefault("Marker")
  valid_607328 = validateParameter(valid_607328, JString, required = false,
                                 default = nil)
  if valid_607328 != nil:
    section.add "Marker", valid_607328
  var valid_607329 = query.getOrDefault("DBInstanceIdentifier")
  valid_607329 = validateParameter(valid_607329, JString, required = false,
                                 default = nil)
  if valid_607329 != nil:
    section.add "DBInstanceIdentifier", valid_607329
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607330 = query.getOrDefault("Action")
  valid_607330 = validateParameter(valid_607330, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_607330 != nil:
    section.add "Action", valid_607330
  var valid_607331 = query.getOrDefault("Version")
  valid_607331 = validateParameter(valid_607331, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607331 != nil:
    section.add "Version", valid_607331
  var valid_607332 = query.getOrDefault("Filters")
  valid_607332 = validateParameter(valid_607332, JArray, required = false,
                                 default = nil)
  if valid_607332 != nil:
    section.add "Filters", valid_607332
  var valid_607333 = query.getOrDefault("MaxRecords")
  valid_607333 = validateParameter(valid_607333, JInt, required = false, default = nil)
  if valid_607333 != nil:
    section.add "MaxRecords", valid_607333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607334 = header.getOrDefault("X-Amz-Signature")
  valid_607334 = validateParameter(valid_607334, JString, required = false,
                                 default = nil)
  if valid_607334 != nil:
    section.add "X-Amz-Signature", valid_607334
  var valid_607335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607335 = validateParameter(valid_607335, JString, required = false,
                                 default = nil)
  if valid_607335 != nil:
    section.add "X-Amz-Content-Sha256", valid_607335
  var valid_607336 = header.getOrDefault("X-Amz-Date")
  valid_607336 = validateParameter(valid_607336, JString, required = false,
                                 default = nil)
  if valid_607336 != nil:
    section.add "X-Amz-Date", valid_607336
  var valid_607337 = header.getOrDefault("X-Amz-Credential")
  valid_607337 = validateParameter(valid_607337, JString, required = false,
                                 default = nil)
  if valid_607337 != nil:
    section.add "X-Amz-Credential", valid_607337
  var valid_607338 = header.getOrDefault("X-Amz-Security-Token")
  valid_607338 = validateParameter(valid_607338, JString, required = false,
                                 default = nil)
  if valid_607338 != nil:
    section.add "X-Amz-Security-Token", valid_607338
  var valid_607339 = header.getOrDefault("X-Amz-Algorithm")
  valid_607339 = validateParameter(valid_607339, JString, required = false,
                                 default = nil)
  if valid_607339 != nil:
    section.add "X-Amz-Algorithm", valid_607339
  var valid_607340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607340 = validateParameter(valid_607340, JString, required = false,
                                 default = nil)
  if valid_607340 != nil:
    section.add "X-Amz-SignedHeaders", valid_607340
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607341: Call_GetDescribeDBInstances_607325; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about provisioned instances. This API supports pagination.
  ## 
  let valid = call_607341.validator(path, query, header, formData, body)
  let scheme = call_607341.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607341.url(scheme.get, call_607341.host, call_607341.base,
                         call_607341.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607341, url, valid)

proc call*(call_607342: Call_GetDescribeDBInstances_607325; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## Returns information about provisioned instances. This API supports pagination.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607343 = newJObject()
  add(query_607343, "Marker", newJString(Marker))
  add(query_607343, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607343, "Action", newJString(Action))
  add(query_607343, "Version", newJString(Version))
  if Filters != nil:
    query_607343.add "Filters", Filters
  add(query_607343, "MaxRecords", newJInt(MaxRecords))
  result = call_607342.call(nil, query_607343, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_607325(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_607326, base: "/",
    url: url_GetDescribeDBInstances_607327, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_607383 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBParameterGroups_607385(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_607384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607386 = query.getOrDefault("Action")
  valid_607386 = validateParameter(valid_607386, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_607386 != nil:
    section.add "Action", valid_607386
  var valid_607387 = query.getOrDefault("Version")
  valid_607387 = validateParameter(valid_607387, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607387 != nil:
    section.add "Version", valid_607387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607388 = header.getOrDefault("X-Amz-Signature")
  valid_607388 = validateParameter(valid_607388, JString, required = false,
                                 default = nil)
  if valid_607388 != nil:
    section.add "X-Amz-Signature", valid_607388
  var valid_607389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607389 = validateParameter(valid_607389, JString, required = false,
                                 default = nil)
  if valid_607389 != nil:
    section.add "X-Amz-Content-Sha256", valid_607389
  var valid_607390 = header.getOrDefault("X-Amz-Date")
  valid_607390 = validateParameter(valid_607390, JString, required = false,
                                 default = nil)
  if valid_607390 != nil:
    section.add "X-Amz-Date", valid_607390
  var valid_607391 = header.getOrDefault("X-Amz-Credential")
  valid_607391 = validateParameter(valid_607391, JString, required = false,
                                 default = nil)
  if valid_607391 != nil:
    section.add "X-Amz-Credential", valid_607391
  var valid_607392 = header.getOrDefault("X-Amz-Security-Token")
  valid_607392 = validateParameter(valid_607392, JString, required = false,
                                 default = nil)
  if valid_607392 != nil:
    section.add "X-Amz-Security-Token", valid_607392
  var valid_607393 = header.getOrDefault("X-Amz-Algorithm")
  valid_607393 = validateParameter(valid_607393, JString, required = false,
                                 default = nil)
  if valid_607393 != nil:
    section.add "X-Amz-Algorithm", valid_607393
  var valid_607394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607394 = validateParameter(valid_607394, JString, required = false,
                                 default = nil)
  if valid_607394 != nil:
    section.add "X-Amz-SignedHeaders", valid_607394
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607395 = formData.getOrDefault("MaxRecords")
  valid_607395 = validateParameter(valid_607395, JInt, required = false, default = nil)
  if valid_607395 != nil:
    section.add "MaxRecords", valid_607395
  var valid_607396 = formData.getOrDefault("DBParameterGroupName")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "DBParameterGroupName", valid_607396
  var valid_607397 = formData.getOrDefault("Marker")
  valid_607397 = validateParameter(valid_607397, JString, required = false,
                                 default = nil)
  if valid_607397 != nil:
    section.add "Marker", valid_607397
  var valid_607398 = formData.getOrDefault("Filters")
  valid_607398 = validateParameter(valid_607398, JArray, required = false,
                                 default = nil)
  if valid_607398 != nil:
    section.add "Filters", valid_607398
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607399: Call_PostDescribeDBParameterGroups_607383; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_607399.validator(path, query, header, formData, body)
  let scheme = call_607399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607399.url(scheme.get, call_607399.host, call_607399.base,
                         call_607399.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607399, url, valid)

proc call*(call_607400: Call_PostDescribeDBParameterGroups_607383;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607401 = newJObject()
  var formData_607402 = newJObject()
  add(formData_607402, "MaxRecords", newJInt(MaxRecords))
  add(formData_607402, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607402, "Marker", newJString(Marker))
  add(query_607401, "Action", newJString(Action))
  if Filters != nil:
    formData_607402.add "Filters", Filters
  add(query_607401, "Version", newJString(Version))
  result = call_607400.call(nil, query_607401, nil, formData_607402, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_607383(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_607384, base: "/",
    url: url_PostDescribeDBParameterGroups_607385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_607364 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBParameterGroups_607366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_607365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607367 = query.getOrDefault("Marker")
  valid_607367 = validateParameter(valid_607367, JString, required = false,
                                 default = nil)
  if valid_607367 != nil:
    section.add "Marker", valid_607367
  var valid_607368 = query.getOrDefault("DBParameterGroupName")
  valid_607368 = validateParameter(valid_607368, JString, required = false,
                                 default = nil)
  if valid_607368 != nil:
    section.add "DBParameterGroupName", valid_607368
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607369 = query.getOrDefault("Action")
  valid_607369 = validateParameter(valid_607369, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_607369 != nil:
    section.add "Action", valid_607369
  var valid_607370 = query.getOrDefault("Version")
  valid_607370 = validateParameter(valid_607370, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607370 != nil:
    section.add "Version", valid_607370
  var valid_607371 = query.getOrDefault("Filters")
  valid_607371 = validateParameter(valid_607371, JArray, required = false,
                                 default = nil)
  if valid_607371 != nil:
    section.add "Filters", valid_607371
  var valid_607372 = query.getOrDefault("MaxRecords")
  valid_607372 = validateParameter(valid_607372, JInt, required = false, default = nil)
  if valid_607372 != nil:
    section.add "MaxRecords", valid_607372
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607373 = header.getOrDefault("X-Amz-Signature")
  valid_607373 = validateParameter(valid_607373, JString, required = false,
                                 default = nil)
  if valid_607373 != nil:
    section.add "X-Amz-Signature", valid_607373
  var valid_607374 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607374 = validateParameter(valid_607374, JString, required = false,
                                 default = nil)
  if valid_607374 != nil:
    section.add "X-Amz-Content-Sha256", valid_607374
  var valid_607375 = header.getOrDefault("X-Amz-Date")
  valid_607375 = validateParameter(valid_607375, JString, required = false,
                                 default = nil)
  if valid_607375 != nil:
    section.add "X-Amz-Date", valid_607375
  var valid_607376 = header.getOrDefault("X-Amz-Credential")
  valid_607376 = validateParameter(valid_607376, JString, required = false,
                                 default = nil)
  if valid_607376 != nil:
    section.add "X-Amz-Credential", valid_607376
  var valid_607377 = header.getOrDefault("X-Amz-Security-Token")
  valid_607377 = validateParameter(valid_607377, JString, required = false,
                                 default = nil)
  if valid_607377 != nil:
    section.add "X-Amz-Security-Token", valid_607377
  var valid_607378 = header.getOrDefault("X-Amz-Algorithm")
  valid_607378 = validateParameter(valid_607378, JString, required = false,
                                 default = nil)
  if valid_607378 != nil:
    section.add "X-Amz-Algorithm", valid_607378
  var valid_607379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607379 = validateParameter(valid_607379, JString, required = false,
                                 default = nil)
  if valid_607379 != nil:
    section.add "X-Amz-SignedHeaders", valid_607379
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607380: Call_GetDescribeDBParameterGroups_607364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ## 
  let valid = call_607380.validator(path, query, header, formData, body)
  let scheme = call_607380.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607380.url(scheme.get, call_607380.host, call_607380.base,
                         call_607380.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607380, url, valid)

proc call*(call_607381: Call_GetDescribeDBParameterGroups_607364;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ## Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607382 = newJObject()
  add(query_607382, "Marker", newJString(Marker))
  add(query_607382, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607382, "Action", newJString(Action))
  add(query_607382, "Version", newJString(Version))
  if Filters != nil:
    query_607382.add "Filters", Filters
  add(query_607382, "MaxRecords", newJInt(MaxRecords))
  result = call_607381.call(nil, query_607382, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_607364(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_607365, base: "/",
    url: url_GetDescribeDBParameterGroups_607366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_607423 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBParameters_607425(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_607424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607426 = query.getOrDefault("Action")
  valid_607426 = validateParameter(valid_607426, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_607426 != nil:
    section.add "Action", valid_607426
  var valid_607427 = query.getOrDefault("Version")
  valid_607427 = validateParameter(valid_607427, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607427 != nil:
    section.add "Version", valid_607427
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607428 = header.getOrDefault("X-Amz-Signature")
  valid_607428 = validateParameter(valid_607428, JString, required = false,
                                 default = nil)
  if valid_607428 != nil:
    section.add "X-Amz-Signature", valid_607428
  var valid_607429 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607429 = validateParameter(valid_607429, JString, required = false,
                                 default = nil)
  if valid_607429 != nil:
    section.add "X-Amz-Content-Sha256", valid_607429
  var valid_607430 = header.getOrDefault("X-Amz-Date")
  valid_607430 = validateParameter(valid_607430, JString, required = false,
                                 default = nil)
  if valid_607430 != nil:
    section.add "X-Amz-Date", valid_607430
  var valid_607431 = header.getOrDefault("X-Amz-Credential")
  valid_607431 = validateParameter(valid_607431, JString, required = false,
                                 default = nil)
  if valid_607431 != nil:
    section.add "X-Amz-Credential", valid_607431
  var valid_607432 = header.getOrDefault("X-Amz-Security-Token")
  valid_607432 = validateParameter(valid_607432, JString, required = false,
                                 default = nil)
  if valid_607432 != nil:
    section.add "X-Amz-Security-Token", valid_607432
  var valid_607433 = header.getOrDefault("X-Amz-Algorithm")
  valid_607433 = validateParameter(valid_607433, JString, required = false,
                                 default = nil)
  if valid_607433 != nil:
    section.add "X-Amz-Algorithm", valid_607433
  var valid_607434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607434 = validateParameter(valid_607434, JString, required = false,
                                 default = nil)
  if valid_607434 != nil:
    section.add "X-Amz-SignedHeaders", valid_607434
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607435 = formData.getOrDefault("Source")
  valid_607435 = validateParameter(valid_607435, JString, required = false,
                                 default = nil)
  if valid_607435 != nil:
    section.add "Source", valid_607435
  var valid_607436 = formData.getOrDefault("MaxRecords")
  valid_607436 = validateParameter(valid_607436, JInt, required = false, default = nil)
  if valid_607436 != nil:
    section.add "MaxRecords", valid_607436
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_607437 = formData.getOrDefault("DBParameterGroupName")
  valid_607437 = validateParameter(valid_607437, JString, required = true,
                                 default = nil)
  if valid_607437 != nil:
    section.add "DBParameterGroupName", valid_607437
  var valid_607438 = formData.getOrDefault("Marker")
  valid_607438 = validateParameter(valid_607438, JString, required = false,
                                 default = nil)
  if valid_607438 != nil:
    section.add "Marker", valid_607438
  var valid_607439 = formData.getOrDefault("Filters")
  valid_607439 = validateParameter(valid_607439, JArray, required = false,
                                 default = nil)
  if valid_607439 != nil:
    section.add "Filters", valid_607439
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607440: Call_PostDescribeDBParameters_607423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_607440.validator(path, query, header, formData, body)
  let scheme = call_607440.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607440.url(scheme.get, call_607440.host, call_607440.base,
                         call_607440.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607440, url, valid)

proc call*(call_607441: Call_PostDescribeDBParameters_607423;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607442 = newJObject()
  var formData_607443 = newJObject()
  add(formData_607443, "Source", newJString(Source))
  add(formData_607443, "MaxRecords", newJInt(MaxRecords))
  add(formData_607443, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607443, "Marker", newJString(Marker))
  add(query_607442, "Action", newJString(Action))
  if Filters != nil:
    formData_607443.add "Filters", Filters
  add(query_607442, "Version", newJString(Version))
  result = call_607441.call(nil, query_607442, nil, formData_607443, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_607423(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_607424, base: "/",
    url: url_PostDescribeDBParameters_607425, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_607403 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBParameters_607405(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_607404(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607406 = query.getOrDefault("Marker")
  valid_607406 = validateParameter(valid_607406, JString, required = false,
                                 default = nil)
  if valid_607406 != nil:
    section.add "Marker", valid_607406
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_607407 = query.getOrDefault("DBParameterGroupName")
  valid_607407 = validateParameter(valid_607407, JString, required = true,
                                 default = nil)
  if valid_607407 != nil:
    section.add "DBParameterGroupName", valid_607407
  var valid_607408 = query.getOrDefault("Source")
  valid_607408 = validateParameter(valid_607408, JString, required = false,
                                 default = nil)
  if valid_607408 != nil:
    section.add "Source", valid_607408
  var valid_607409 = query.getOrDefault("Action")
  valid_607409 = validateParameter(valid_607409, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_607409 != nil:
    section.add "Action", valid_607409
  var valid_607410 = query.getOrDefault("Version")
  valid_607410 = validateParameter(valid_607410, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607410 != nil:
    section.add "Version", valid_607410
  var valid_607411 = query.getOrDefault("Filters")
  valid_607411 = validateParameter(valid_607411, JArray, required = false,
                                 default = nil)
  if valid_607411 != nil:
    section.add "Filters", valid_607411
  var valid_607412 = query.getOrDefault("MaxRecords")
  valid_607412 = validateParameter(valid_607412, JInt, required = false, default = nil)
  if valid_607412 != nil:
    section.add "MaxRecords", valid_607412
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607413 = header.getOrDefault("X-Amz-Signature")
  valid_607413 = validateParameter(valid_607413, JString, required = false,
                                 default = nil)
  if valid_607413 != nil:
    section.add "X-Amz-Signature", valid_607413
  var valid_607414 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607414 = validateParameter(valid_607414, JString, required = false,
                                 default = nil)
  if valid_607414 != nil:
    section.add "X-Amz-Content-Sha256", valid_607414
  var valid_607415 = header.getOrDefault("X-Amz-Date")
  valid_607415 = validateParameter(valid_607415, JString, required = false,
                                 default = nil)
  if valid_607415 != nil:
    section.add "X-Amz-Date", valid_607415
  var valid_607416 = header.getOrDefault("X-Amz-Credential")
  valid_607416 = validateParameter(valid_607416, JString, required = false,
                                 default = nil)
  if valid_607416 != nil:
    section.add "X-Amz-Credential", valid_607416
  var valid_607417 = header.getOrDefault("X-Amz-Security-Token")
  valid_607417 = validateParameter(valid_607417, JString, required = false,
                                 default = nil)
  if valid_607417 != nil:
    section.add "X-Amz-Security-Token", valid_607417
  var valid_607418 = header.getOrDefault("X-Amz-Algorithm")
  valid_607418 = validateParameter(valid_607418, JString, required = false,
                                 default = nil)
  if valid_607418 != nil:
    section.add "X-Amz-Algorithm", valid_607418
  var valid_607419 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607419 = validateParameter(valid_607419, JString, required = false,
                                 default = nil)
  if valid_607419 != nil:
    section.add "X-Amz-SignedHeaders", valid_607419
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607420: Call_GetDescribeDBParameters_607403; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_607420.validator(path, query, header, formData, body)
  let scheme = call_607420.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607420.url(scheme.get, call_607420.host, call_607420.base,
                         call_607420.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607420, url, valid)

proc call*(call_607421: Call_GetDescribeDBParameters_607403;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607422 = newJObject()
  add(query_607422, "Marker", newJString(Marker))
  add(query_607422, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607422, "Source", newJString(Source))
  add(query_607422, "Action", newJString(Action))
  add(query_607422, "Version", newJString(Version))
  if Filters != nil:
    query_607422.add "Filters", Filters
  add(query_607422, "MaxRecords", newJInt(MaxRecords))
  result = call_607421.call(nil, query_607422, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_607403(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_607404, base: "/",
    url: url_GetDescribeDBParameters_607405, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_607463 = ref object of OpenApiRestCall_605573
proc url_PostDescribeDBSubnetGroups_607465(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_607464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607466 = query.getOrDefault("Action")
  valid_607466 = validateParameter(valid_607466, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_607466 != nil:
    section.add "Action", valid_607466
  var valid_607467 = query.getOrDefault("Version")
  valid_607467 = validateParameter(valid_607467, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607467 != nil:
    section.add "Version", valid_607467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607468 = header.getOrDefault("X-Amz-Signature")
  valid_607468 = validateParameter(valid_607468, JString, required = false,
                                 default = nil)
  if valid_607468 != nil:
    section.add "X-Amz-Signature", valid_607468
  var valid_607469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607469 = validateParameter(valid_607469, JString, required = false,
                                 default = nil)
  if valid_607469 != nil:
    section.add "X-Amz-Content-Sha256", valid_607469
  var valid_607470 = header.getOrDefault("X-Amz-Date")
  valid_607470 = validateParameter(valid_607470, JString, required = false,
                                 default = nil)
  if valid_607470 != nil:
    section.add "X-Amz-Date", valid_607470
  var valid_607471 = header.getOrDefault("X-Amz-Credential")
  valid_607471 = validateParameter(valid_607471, JString, required = false,
                                 default = nil)
  if valid_607471 != nil:
    section.add "X-Amz-Credential", valid_607471
  var valid_607472 = header.getOrDefault("X-Amz-Security-Token")
  valid_607472 = validateParameter(valid_607472, JString, required = false,
                                 default = nil)
  if valid_607472 != nil:
    section.add "X-Amz-Security-Token", valid_607472
  var valid_607473 = header.getOrDefault("X-Amz-Algorithm")
  valid_607473 = validateParameter(valid_607473, JString, required = false,
                                 default = nil)
  if valid_607473 != nil:
    section.add "X-Amz-Algorithm", valid_607473
  var valid_607474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607474 = validateParameter(valid_607474, JString, required = false,
                                 default = nil)
  if valid_607474 != nil:
    section.add "X-Amz-SignedHeaders", valid_607474
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607475 = formData.getOrDefault("MaxRecords")
  valid_607475 = validateParameter(valid_607475, JInt, required = false, default = nil)
  if valid_607475 != nil:
    section.add "MaxRecords", valid_607475
  var valid_607476 = formData.getOrDefault("Marker")
  valid_607476 = validateParameter(valid_607476, JString, required = false,
                                 default = nil)
  if valid_607476 != nil:
    section.add "Marker", valid_607476
  var valid_607477 = formData.getOrDefault("DBSubnetGroupName")
  valid_607477 = validateParameter(valid_607477, JString, required = false,
                                 default = nil)
  if valid_607477 != nil:
    section.add "DBSubnetGroupName", valid_607477
  var valid_607478 = formData.getOrDefault("Filters")
  valid_607478 = validateParameter(valid_607478, JArray, required = false,
                                 default = nil)
  if valid_607478 != nil:
    section.add "Filters", valid_607478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607479: Call_PostDescribeDBSubnetGroups_607463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_607479.validator(path, query, header, formData, body)
  let scheme = call_607479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607479.url(scheme.get, call_607479.host, call_607479.base,
                         call_607479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607479, url, valid)

proc call*(call_607480: Call_PostDescribeDBSubnetGroups_607463;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607481 = newJObject()
  var formData_607482 = newJObject()
  add(formData_607482, "MaxRecords", newJInt(MaxRecords))
  add(formData_607482, "Marker", newJString(Marker))
  add(query_607481, "Action", newJString(Action))
  add(formData_607482, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_607482.add "Filters", Filters
  add(query_607481, "Version", newJString(Version))
  result = call_607480.call(nil, query_607481, nil, formData_607482, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_607463(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_607464, base: "/",
    url: url_PostDescribeDBSubnetGroups_607465,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_607444 = ref object of OpenApiRestCall_605573
proc url_GetDescribeDBSubnetGroups_607446(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_607445(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607447 = query.getOrDefault("Marker")
  valid_607447 = validateParameter(valid_607447, JString, required = false,
                                 default = nil)
  if valid_607447 != nil:
    section.add "Marker", valid_607447
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607448 = query.getOrDefault("Action")
  valid_607448 = validateParameter(valid_607448, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_607448 != nil:
    section.add "Action", valid_607448
  var valid_607449 = query.getOrDefault("DBSubnetGroupName")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "DBSubnetGroupName", valid_607449
  var valid_607450 = query.getOrDefault("Version")
  valid_607450 = validateParameter(valid_607450, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607450 != nil:
    section.add "Version", valid_607450
  var valid_607451 = query.getOrDefault("Filters")
  valid_607451 = validateParameter(valid_607451, JArray, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "Filters", valid_607451
  var valid_607452 = query.getOrDefault("MaxRecords")
  valid_607452 = validateParameter(valid_607452, JInt, required = false, default = nil)
  if valid_607452 != nil:
    section.add "MaxRecords", valid_607452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607453 = header.getOrDefault("X-Amz-Signature")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = nil)
  if valid_607453 != nil:
    section.add "X-Amz-Signature", valid_607453
  var valid_607454 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607454 = validateParameter(valid_607454, JString, required = false,
                                 default = nil)
  if valid_607454 != nil:
    section.add "X-Amz-Content-Sha256", valid_607454
  var valid_607455 = header.getOrDefault("X-Amz-Date")
  valid_607455 = validateParameter(valid_607455, JString, required = false,
                                 default = nil)
  if valid_607455 != nil:
    section.add "X-Amz-Date", valid_607455
  var valid_607456 = header.getOrDefault("X-Amz-Credential")
  valid_607456 = validateParameter(valid_607456, JString, required = false,
                                 default = nil)
  if valid_607456 != nil:
    section.add "X-Amz-Credential", valid_607456
  var valid_607457 = header.getOrDefault("X-Amz-Security-Token")
  valid_607457 = validateParameter(valid_607457, JString, required = false,
                                 default = nil)
  if valid_607457 != nil:
    section.add "X-Amz-Security-Token", valid_607457
  var valid_607458 = header.getOrDefault("X-Amz-Algorithm")
  valid_607458 = validateParameter(valid_607458, JString, required = false,
                                 default = nil)
  if valid_607458 != nil:
    section.add "X-Amz-Algorithm", valid_607458
  var valid_607459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607459 = validateParameter(valid_607459, JString, required = false,
                                 default = nil)
  if valid_607459 != nil:
    section.add "X-Amz-SignedHeaders", valid_607459
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607460: Call_GetDescribeDBSubnetGroups_607444; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ## 
  let valid = call_607460.validator(path, query, header, formData, body)
  let scheme = call_607460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607460.url(scheme.get, call_607460.host, call_607460.base,
                         call_607460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607460, url, valid)

proc call*(call_607461: Call_GetDescribeDBSubnetGroups_607444; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607462 = newJObject()
  add(query_607462, "Marker", newJString(Marker))
  add(query_607462, "Action", newJString(Action))
  add(query_607462, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607462, "Version", newJString(Version))
  if Filters != nil:
    query_607462.add "Filters", Filters
  add(query_607462, "MaxRecords", newJInt(MaxRecords))
  result = call_607461.call(nil, query_607462, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_607444(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_607445, base: "/",
    url: url_GetDescribeDBSubnetGroups_607446,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_607502 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEngineDefaultClusterParameters_607504(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_607503(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607505 = query.getOrDefault("Action")
  valid_607505 = validateParameter(valid_607505, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_607505 != nil:
    section.add "Action", valid_607505
  var valid_607506 = query.getOrDefault("Version")
  valid_607506 = validateParameter(valid_607506, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607506 != nil:
    section.add "Version", valid_607506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607507 = header.getOrDefault("X-Amz-Signature")
  valid_607507 = validateParameter(valid_607507, JString, required = false,
                                 default = nil)
  if valid_607507 != nil:
    section.add "X-Amz-Signature", valid_607507
  var valid_607508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607508 = validateParameter(valid_607508, JString, required = false,
                                 default = nil)
  if valid_607508 != nil:
    section.add "X-Amz-Content-Sha256", valid_607508
  var valid_607509 = header.getOrDefault("X-Amz-Date")
  valid_607509 = validateParameter(valid_607509, JString, required = false,
                                 default = nil)
  if valid_607509 != nil:
    section.add "X-Amz-Date", valid_607509
  var valid_607510 = header.getOrDefault("X-Amz-Credential")
  valid_607510 = validateParameter(valid_607510, JString, required = false,
                                 default = nil)
  if valid_607510 != nil:
    section.add "X-Amz-Credential", valid_607510
  var valid_607511 = header.getOrDefault("X-Amz-Security-Token")
  valid_607511 = validateParameter(valid_607511, JString, required = false,
                                 default = nil)
  if valid_607511 != nil:
    section.add "X-Amz-Security-Token", valid_607511
  var valid_607512 = header.getOrDefault("X-Amz-Algorithm")
  valid_607512 = validateParameter(valid_607512, JString, required = false,
                                 default = nil)
  if valid_607512 != nil:
    section.add "X-Amz-Algorithm", valid_607512
  var valid_607513 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607513 = validateParameter(valid_607513, JString, required = false,
                                 default = nil)
  if valid_607513 != nil:
    section.add "X-Amz-SignedHeaders", valid_607513
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_607514 = formData.getOrDefault("MaxRecords")
  valid_607514 = validateParameter(valid_607514, JInt, required = false, default = nil)
  if valid_607514 != nil:
    section.add "MaxRecords", valid_607514
  var valid_607515 = formData.getOrDefault("Marker")
  valid_607515 = validateParameter(valid_607515, JString, required = false,
                                 default = nil)
  if valid_607515 != nil:
    section.add "Marker", valid_607515
  var valid_607516 = formData.getOrDefault("Filters")
  valid_607516 = validateParameter(valid_607516, JArray, required = false,
                                 default = nil)
  if valid_607516 != nil:
    section.add "Filters", valid_607516
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607517 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607517 = validateParameter(valid_607517, JString, required = true,
                                 default = nil)
  if valid_607517 != nil:
    section.add "DBParameterGroupFamily", valid_607517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607518: Call_PostDescribeEngineDefaultClusterParameters_607502;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_607518.validator(path, query, header, formData, body)
  let scheme = call_607518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607518.url(scheme.get, call_607518.host, call_607518.base,
                         call_607518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607518, url, valid)

proc call*(call_607519: Call_PostDescribeEngineDefaultClusterParameters_607502;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_607520 = newJObject()
  var formData_607521 = newJObject()
  add(formData_607521, "MaxRecords", newJInt(MaxRecords))
  add(formData_607521, "Marker", newJString(Marker))
  add(query_607520, "Action", newJString(Action))
  if Filters != nil:
    formData_607521.add "Filters", Filters
  add(query_607520, "Version", newJString(Version))
  add(formData_607521, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607519.call(nil, query_607520, nil, formData_607521, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_607502(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_607503,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_607504,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_607483 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEngineDefaultClusterParameters_607485(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_607484(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607486 = query.getOrDefault("Marker")
  valid_607486 = validateParameter(valid_607486, JString, required = false,
                                 default = nil)
  if valid_607486 != nil:
    section.add "Marker", valid_607486
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607487 = query.getOrDefault("DBParameterGroupFamily")
  valid_607487 = validateParameter(valid_607487, JString, required = true,
                                 default = nil)
  if valid_607487 != nil:
    section.add "DBParameterGroupFamily", valid_607487
  var valid_607488 = query.getOrDefault("Action")
  valid_607488 = validateParameter(valid_607488, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_607488 != nil:
    section.add "Action", valid_607488
  var valid_607489 = query.getOrDefault("Version")
  valid_607489 = validateParameter(valid_607489, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607489 != nil:
    section.add "Version", valid_607489
  var valid_607490 = query.getOrDefault("Filters")
  valid_607490 = validateParameter(valid_607490, JArray, required = false,
                                 default = nil)
  if valid_607490 != nil:
    section.add "Filters", valid_607490
  var valid_607491 = query.getOrDefault("MaxRecords")
  valid_607491 = validateParameter(valid_607491, JInt, required = false, default = nil)
  if valid_607491 != nil:
    section.add "MaxRecords", valid_607491
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607492 = header.getOrDefault("X-Amz-Signature")
  valid_607492 = validateParameter(valid_607492, JString, required = false,
                                 default = nil)
  if valid_607492 != nil:
    section.add "X-Amz-Signature", valid_607492
  var valid_607493 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607493 = validateParameter(valid_607493, JString, required = false,
                                 default = nil)
  if valid_607493 != nil:
    section.add "X-Amz-Content-Sha256", valid_607493
  var valid_607494 = header.getOrDefault("X-Amz-Date")
  valid_607494 = validateParameter(valid_607494, JString, required = false,
                                 default = nil)
  if valid_607494 != nil:
    section.add "X-Amz-Date", valid_607494
  var valid_607495 = header.getOrDefault("X-Amz-Credential")
  valid_607495 = validateParameter(valid_607495, JString, required = false,
                                 default = nil)
  if valid_607495 != nil:
    section.add "X-Amz-Credential", valid_607495
  var valid_607496 = header.getOrDefault("X-Amz-Security-Token")
  valid_607496 = validateParameter(valid_607496, JString, required = false,
                                 default = nil)
  if valid_607496 != nil:
    section.add "X-Amz-Security-Token", valid_607496
  var valid_607497 = header.getOrDefault("X-Amz-Algorithm")
  valid_607497 = validateParameter(valid_607497, JString, required = false,
                                 default = nil)
  if valid_607497 != nil:
    section.add "X-Amz-Algorithm", valid_607497
  var valid_607498 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607498 = validateParameter(valid_607498, JString, required = false,
                                 default = nil)
  if valid_607498 != nil:
    section.add "X-Amz-SignedHeaders", valid_607498
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607499: Call_GetDescribeEngineDefaultClusterParameters_607483;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the cluster database engine.
  ## 
  let valid = call_607499.validator(path, query, header, formData, body)
  let scheme = call_607499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607499.url(scheme.get, call_607499.host, call_607499.base,
                         call_607499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607499, url, valid)

proc call*(call_607500: Call_GetDescribeEngineDefaultClusterParameters_607483;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## Returns the default engine and system parameter information for the cluster database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607501 = newJObject()
  add(query_607501, "Marker", newJString(Marker))
  add(query_607501, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607501, "Action", newJString(Action))
  add(query_607501, "Version", newJString(Version))
  if Filters != nil:
    query_607501.add "Filters", Filters
  add(query_607501, "MaxRecords", newJInt(MaxRecords))
  result = call_607500.call(nil, query_607501, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_607483(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_607484,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_607485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_607541 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEngineDefaultParameters_607543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_607542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607544 = query.getOrDefault("Action")
  valid_607544 = validateParameter(valid_607544, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607544 != nil:
    section.add "Action", valid_607544
  var valid_607545 = query.getOrDefault("Version")
  valid_607545 = validateParameter(valid_607545, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607545 != nil:
    section.add "Version", valid_607545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607546 = header.getOrDefault("X-Amz-Signature")
  valid_607546 = validateParameter(valid_607546, JString, required = false,
                                 default = nil)
  if valid_607546 != nil:
    section.add "X-Amz-Signature", valid_607546
  var valid_607547 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607547 = validateParameter(valid_607547, JString, required = false,
                                 default = nil)
  if valid_607547 != nil:
    section.add "X-Amz-Content-Sha256", valid_607547
  var valid_607548 = header.getOrDefault("X-Amz-Date")
  valid_607548 = validateParameter(valid_607548, JString, required = false,
                                 default = nil)
  if valid_607548 != nil:
    section.add "X-Amz-Date", valid_607548
  var valid_607549 = header.getOrDefault("X-Amz-Credential")
  valid_607549 = validateParameter(valid_607549, JString, required = false,
                                 default = nil)
  if valid_607549 != nil:
    section.add "X-Amz-Credential", valid_607549
  var valid_607550 = header.getOrDefault("X-Amz-Security-Token")
  valid_607550 = validateParameter(valid_607550, JString, required = false,
                                 default = nil)
  if valid_607550 != nil:
    section.add "X-Amz-Security-Token", valid_607550
  var valid_607551 = header.getOrDefault("X-Amz-Algorithm")
  valid_607551 = validateParameter(valid_607551, JString, required = false,
                                 default = nil)
  if valid_607551 != nil:
    section.add "X-Amz-Algorithm", valid_607551
  var valid_607552 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607552 = validateParameter(valid_607552, JString, required = false,
                                 default = nil)
  if valid_607552 != nil:
    section.add "X-Amz-SignedHeaders", valid_607552
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_607553 = formData.getOrDefault("MaxRecords")
  valid_607553 = validateParameter(valid_607553, JInt, required = false, default = nil)
  if valid_607553 != nil:
    section.add "MaxRecords", valid_607553
  var valid_607554 = formData.getOrDefault("Marker")
  valid_607554 = validateParameter(valid_607554, JString, required = false,
                                 default = nil)
  if valid_607554 != nil:
    section.add "Marker", valid_607554
  var valid_607555 = formData.getOrDefault("Filters")
  valid_607555 = validateParameter(valid_607555, JArray, required = false,
                                 default = nil)
  if valid_607555 != nil:
    section.add "Filters", valid_607555
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607556 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607556 = validateParameter(valid_607556, JString, required = true,
                                 default = nil)
  if valid_607556 != nil:
    section.add "DBParameterGroupFamily", valid_607556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607557: Call_PostDescribeEngineDefaultParameters_607541;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_607557.validator(path, query, header, formData, body)
  let scheme = call_607557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607557.url(scheme.get, call_607557.host, call_607557.base,
                         call_607557.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607557, url, valid)

proc call*(call_607558: Call_PostDescribeEngineDefaultParameters_607541;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_607559 = newJObject()
  var formData_607560 = newJObject()
  add(formData_607560, "MaxRecords", newJInt(MaxRecords))
  add(formData_607560, "Marker", newJString(Marker))
  add(query_607559, "Action", newJString(Action))
  if Filters != nil:
    formData_607560.add "Filters", Filters
  add(query_607559, "Version", newJString(Version))
  add(formData_607560, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607558.call(nil, query_607559, nil, formData_607560, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_607541(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_607542, base: "/",
    url: url_PostDescribeEngineDefaultParameters_607543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_607522 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEngineDefaultParameters_607524(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_607523(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607525 = query.getOrDefault("Marker")
  valid_607525 = validateParameter(valid_607525, JString, required = false,
                                 default = nil)
  if valid_607525 != nil:
    section.add "Marker", valid_607525
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607526 = query.getOrDefault("DBParameterGroupFamily")
  valid_607526 = validateParameter(valid_607526, JString, required = true,
                                 default = nil)
  if valid_607526 != nil:
    section.add "DBParameterGroupFamily", valid_607526
  var valid_607527 = query.getOrDefault("Action")
  valid_607527 = validateParameter(valid_607527, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607527 != nil:
    section.add "Action", valid_607527
  var valid_607528 = query.getOrDefault("Version")
  valid_607528 = validateParameter(valid_607528, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607528 != nil:
    section.add "Version", valid_607528
  var valid_607529 = query.getOrDefault("Filters")
  valid_607529 = validateParameter(valid_607529, JArray, required = false,
                                 default = nil)
  if valid_607529 != nil:
    section.add "Filters", valid_607529
  var valid_607530 = query.getOrDefault("MaxRecords")
  valid_607530 = validateParameter(valid_607530, JInt, required = false, default = nil)
  if valid_607530 != nil:
    section.add "MaxRecords", valid_607530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607531 = header.getOrDefault("X-Amz-Signature")
  valid_607531 = validateParameter(valid_607531, JString, required = false,
                                 default = nil)
  if valid_607531 != nil:
    section.add "X-Amz-Signature", valid_607531
  var valid_607532 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607532 = validateParameter(valid_607532, JString, required = false,
                                 default = nil)
  if valid_607532 != nil:
    section.add "X-Amz-Content-Sha256", valid_607532
  var valid_607533 = header.getOrDefault("X-Amz-Date")
  valid_607533 = validateParameter(valid_607533, JString, required = false,
                                 default = nil)
  if valid_607533 != nil:
    section.add "X-Amz-Date", valid_607533
  var valid_607534 = header.getOrDefault("X-Amz-Credential")
  valid_607534 = validateParameter(valid_607534, JString, required = false,
                                 default = nil)
  if valid_607534 != nil:
    section.add "X-Amz-Credential", valid_607534
  var valid_607535 = header.getOrDefault("X-Amz-Security-Token")
  valid_607535 = validateParameter(valid_607535, JString, required = false,
                                 default = nil)
  if valid_607535 != nil:
    section.add "X-Amz-Security-Token", valid_607535
  var valid_607536 = header.getOrDefault("X-Amz-Algorithm")
  valid_607536 = validateParameter(valid_607536, JString, required = false,
                                 default = nil)
  if valid_607536 != nil:
    section.add "X-Amz-Algorithm", valid_607536
  var valid_607537 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607537 = validateParameter(valid_607537, JString, required = false,
                                 default = nil)
  if valid_607537 != nil:
    section.add "X-Amz-SignedHeaders", valid_607537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607538: Call_GetDescribeEngineDefaultParameters_607522;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_607538.validator(path, query, header, formData, body)
  let scheme = call_607538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607538.url(scheme.get, call_607538.host, call_607538.base,
                         call_607538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607538, url, valid)

proc call*(call_607539: Call_GetDescribeEngineDefaultParameters_607522;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : Not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607540 = newJObject()
  add(query_607540, "Marker", newJString(Marker))
  add(query_607540, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607540, "Action", newJString(Action))
  add(query_607540, "Version", newJString(Version))
  if Filters != nil:
    query_607540.add "Filters", Filters
  add(query_607540, "MaxRecords", newJInt(MaxRecords))
  result = call_607539.call(nil, query_607540, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_607522(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_607523, base: "/",
    url: url_GetDescribeEngineDefaultParameters_607524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_607578 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEventCategories_607580(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_607579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607581 = query.getOrDefault("Action")
  valid_607581 = validateParameter(valid_607581, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_607581 != nil:
    section.add "Action", valid_607581
  var valid_607582 = query.getOrDefault("Version")
  valid_607582 = validateParameter(valid_607582, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607582 != nil:
    section.add "Version", valid_607582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607583 = header.getOrDefault("X-Amz-Signature")
  valid_607583 = validateParameter(valid_607583, JString, required = false,
                                 default = nil)
  if valid_607583 != nil:
    section.add "X-Amz-Signature", valid_607583
  var valid_607584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607584 = validateParameter(valid_607584, JString, required = false,
                                 default = nil)
  if valid_607584 != nil:
    section.add "X-Amz-Content-Sha256", valid_607584
  var valid_607585 = header.getOrDefault("X-Amz-Date")
  valid_607585 = validateParameter(valid_607585, JString, required = false,
                                 default = nil)
  if valid_607585 != nil:
    section.add "X-Amz-Date", valid_607585
  var valid_607586 = header.getOrDefault("X-Amz-Credential")
  valid_607586 = validateParameter(valid_607586, JString, required = false,
                                 default = nil)
  if valid_607586 != nil:
    section.add "X-Amz-Credential", valid_607586
  var valid_607587 = header.getOrDefault("X-Amz-Security-Token")
  valid_607587 = validateParameter(valid_607587, JString, required = false,
                                 default = nil)
  if valid_607587 != nil:
    section.add "X-Amz-Security-Token", valid_607587
  var valid_607588 = header.getOrDefault("X-Amz-Algorithm")
  valid_607588 = validateParameter(valid_607588, JString, required = false,
                                 default = nil)
  if valid_607588 != nil:
    section.add "X-Amz-Algorithm", valid_607588
  var valid_607589 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607589 = validateParameter(valid_607589, JString, required = false,
                                 default = nil)
  if valid_607589 != nil:
    section.add "X-Amz-SignedHeaders", valid_607589
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607590 = formData.getOrDefault("SourceType")
  valid_607590 = validateParameter(valid_607590, JString, required = false,
                                 default = nil)
  if valid_607590 != nil:
    section.add "SourceType", valid_607590
  var valid_607591 = formData.getOrDefault("Filters")
  valid_607591 = validateParameter(valid_607591, JArray, required = false,
                                 default = nil)
  if valid_607591 != nil:
    section.add "Filters", valid_607591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607592: Call_PostDescribeEventCategories_607578; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_607592.validator(path, query, header, formData, body)
  let scheme = call_607592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607592.url(scheme.get, call_607592.host, call_607592.base,
                         call_607592.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607592, url, valid)

proc call*(call_607593: Call_PostDescribeEventCategories_607578;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607594 = newJObject()
  var formData_607595 = newJObject()
  add(formData_607595, "SourceType", newJString(SourceType))
  add(query_607594, "Action", newJString(Action))
  if Filters != nil:
    formData_607595.add "Filters", Filters
  add(query_607594, "Version", newJString(Version))
  result = call_607593.call(nil, query_607594, nil, formData_607595, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_607578(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_607579, base: "/",
    url: url_PostDescribeEventCategories_607580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_607561 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEventCategories_607563(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_607562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607564 = query.getOrDefault("SourceType")
  valid_607564 = validateParameter(valid_607564, JString, required = false,
                                 default = nil)
  if valid_607564 != nil:
    section.add "SourceType", valid_607564
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607565 = query.getOrDefault("Action")
  valid_607565 = validateParameter(valid_607565, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_607565 != nil:
    section.add "Action", valid_607565
  var valid_607566 = query.getOrDefault("Version")
  valid_607566 = validateParameter(valid_607566, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607566 != nil:
    section.add "Version", valid_607566
  var valid_607567 = query.getOrDefault("Filters")
  valid_607567 = validateParameter(valid_607567, JArray, required = false,
                                 default = nil)
  if valid_607567 != nil:
    section.add "Filters", valid_607567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607568 = header.getOrDefault("X-Amz-Signature")
  valid_607568 = validateParameter(valid_607568, JString, required = false,
                                 default = nil)
  if valid_607568 != nil:
    section.add "X-Amz-Signature", valid_607568
  var valid_607569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607569 = validateParameter(valid_607569, JString, required = false,
                                 default = nil)
  if valid_607569 != nil:
    section.add "X-Amz-Content-Sha256", valid_607569
  var valid_607570 = header.getOrDefault("X-Amz-Date")
  valid_607570 = validateParameter(valid_607570, JString, required = false,
                                 default = nil)
  if valid_607570 != nil:
    section.add "X-Amz-Date", valid_607570
  var valid_607571 = header.getOrDefault("X-Amz-Credential")
  valid_607571 = validateParameter(valid_607571, JString, required = false,
                                 default = nil)
  if valid_607571 != nil:
    section.add "X-Amz-Credential", valid_607571
  var valid_607572 = header.getOrDefault("X-Amz-Security-Token")
  valid_607572 = validateParameter(valid_607572, JString, required = false,
                                 default = nil)
  if valid_607572 != nil:
    section.add "X-Amz-Security-Token", valid_607572
  var valid_607573 = header.getOrDefault("X-Amz-Algorithm")
  valid_607573 = validateParameter(valid_607573, JString, required = false,
                                 default = nil)
  if valid_607573 != nil:
    section.add "X-Amz-Algorithm", valid_607573
  var valid_607574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607574 = validateParameter(valid_607574, JString, required = false,
                                 default = nil)
  if valid_607574 != nil:
    section.add "X-Amz-SignedHeaders", valid_607574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607575: Call_GetDescribeEventCategories_607561; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ## 
  let valid = call_607575.validator(path, query, header, formData, body)
  let scheme = call_607575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607575.url(scheme.get, call_607575.host, call_607575.base,
                         call_607575.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607575, url, valid)

proc call*(call_607576: Call_GetDescribeEventCategories_607561;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_607577 = newJObject()
  add(query_607577, "SourceType", newJString(SourceType))
  add(query_607577, "Action", newJString(Action))
  add(query_607577, "Version", newJString(Version))
  if Filters != nil:
    query_607577.add "Filters", Filters
  result = call_607576.call(nil, query_607577, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_607561(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_607562, base: "/",
    url: url_GetDescribeEventCategories_607563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_607615 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEventSubscriptions_607617(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_607616(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607618 = query.getOrDefault("Action")
  valid_607618 = validateParameter(valid_607618, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_607618 != nil:
    section.add "Action", valid_607618
  var valid_607619 = query.getOrDefault("Version")
  valid_607619 = validateParameter(valid_607619, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607619 != nil:
    section.add "Version", valid_607619
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607620 = header.getOrDefault("X-Amz-Signature")
  valid_607620 = validateParameter(valid_607620, JString, required = false,
                                 default = nil)
  if valid_607620 != nil:
    section.add "X-Amz-Signature", valid_607620
  var valid_607621 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607621 = validateParameter(valid_607621, JString, required = false,
                                 default = nil)
  if valid_607621 != nil:
    section.add "X-Amz-Content-Sha256", valid_607621
  var valid_607622 = header.getOrDefault("X-Amz-Date")
  valid_607622 = validateParameter(valid_607622, JString, required = false,
                                 default = nil)
  if valid_607622 != nil:
    section.add "X-Amz-Date", valid_607622
  var valid_607623 = header.getOrDefault("X-Amz-Credential")
  valid_607623 = validateParameter(valid_607623, JString, required = false,
                                 default = nil)
  if valid_607623 != nil:
    section.add "X-Amz-Credential", valid_607623
  var valid_607624 = header.getOrDefault("X-Amz-Security-Token")
  valid_607624 = validateParameter(valid_607624, JString, required = false,
                                 default = nil)
  if valid_607624 != nil:
    section.add "X-Amz-Security-Token", valid_607624
  var valid_607625 = header.getOrDefault("X-Amz-Algorithm")
  valid_607625 = validateParameter(valid_607625, JString, required = false,
                                 default = nil)
  if valid_607625 != nil:
    section.add "X-Amz-Algorithm", valid_607625
  var valid_607626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607626 = validateParameter(valid_607626, JString, required = false,
                                 default = nil)
  if valid_607626 != nil:
    section.add "X-Amz-SignedHeaders", valid_607626
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607627 = formData.getOrDefault("MaxRecords")
  valid_607627 = validateParameter(valid_607627, JInt, required = false, default = nil)
  if valid_607627 != nil:
    section.add "MaxRecords", valid_607627
  var valid_607628 = formData.getOrDefault("Marker")
  valid_607628 = validateParameter(valid_607628, JString, required = false,
                                 default = nil)
  if valid_607628 != nil:
    section.add "Marker", valid_607628
  var valid_607629 = formData.getOrDefault("SubscriptionName")
  valid_607629 = validateParameter(valid_607629, JString, required = false,
                                 default = nil)
  if valid_607629 != nil:
    section.add "SubscriptionName", valid_607629
  var valid_607630 = formData.getOrDefault("Filters")
  valid_607630 = validateParameter(valid_607630, JArray, required = false,
                                 default = nil)
  if valid_607630 != nil:
    section.add "Filters", valid_607630
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607631: Call_PostDescribeEventSubscriptions_607615; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_607631.validator(path, query, header, formData, body)
  let scheme = call_607631.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607631.url(scheme.get, call_607631.host, call_607631.base,
                         call_607631.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607631, url, valid)

proc call*(call_607632: Call_PostDescribeEventSubscriptions_607615;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607633 = newJObject()
  var formData_607634 = newJObject()
  add(formData_607634, "MaxRecords", newJInt(MaxRecords))
  add(formData_607634, "Marker", newJString(Marker))
  add(formData_607634, "SubscriptionName", newJString(SubscriptionName))
  add(query_607633, "Action", newJString(Action))
  if Filters != nil:
    formData_607634.add "Filters", Filters
  add(query_607633, "Version", newJString(Version))
  result = call_607632.call(nil, query_607633, nil, formData_607634, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_607615(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_607616, base: "/",
    url: url_PostDescribeEventSubscriptions_607617,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_607596 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEventSubscriptions_607598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_607597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: JString
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607599 = query.getOrDefault("Marker")
  valid_607599 = validateParameter(valid_607599, JString, required = false,
                                 default = nil)
  if valid_607599 != nil:
    section.add "Marker", valid_607599
  var valid_607600 = query.getOrDefault("SubscriptionName")
  valid_607600 = validateParameter(valid_607600, JString, required = false,
                                 default = nil)
  if valid_607600 != nil:
    section.add "SubscriptionName", valid_607600
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607601 = query.getOrDefault("Action")
  valid_607601 = validateParameter(valid_607601, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_607601 != nil:
    section.add "Action", valid_607601
  var valid_607602 = query.getOrDefault("Version")
  valid_607602 = validateParameter(valid_607602, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607602 != nil:
    section.add "Version", valid_607602
  var valid_607603 = query.getOrDefault("Filters")
  valid_607603 = validateParameter(valid_607603, JArray, required = false,
                                 default = nil)
  if valid_607603 != nil:
    section.add "Filters", valid_607603
  var valid_607604 = query.getOrDefault("MaxRecords")
  valid_607604 = validateParameter(valid_607604, JInt, required = false, default = nil)
  if valid_607604 != nil:
    section.add "MaxRecords", valid_607604
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607605 = header.getOrDefault("X-Amz-Signature")
  valid_607605 = validateParameter(valid_607605, JString, required = false,
                                 default = nil)
  if valid_607605 != nil:
    section.add "X-Amz-Signature", valid_607605
  var valid_607606 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607606 = validateParameter(valid_607606, JString, required = false,
                                 default = nil)
  if valid_607606 != nil:
    section.add "X-Amz-Content-Sha256", valid_607606
  var valid_607607 = header.getOrDefault("X-Amz-Date")
  valid_607607 = validateParameter(valid_607607, JString, required = false,
                                 default = nil)
  if valid_607607 != nil:
    section.add "X-Amz-Date", valid_607607
  var valid_607608 = header.getOrDefault("X-Amz-Credential")
  valid_607608 = validateParameter(valid_607608, JString, required = false,
                                 default = nil)
  if valid_607608 != nil:
    section.add "X-Amz-Credential", valid_607608
  var valid_607609 = header.getOrDefault("X-Amz-Security-Token")
  valid_607609 = validateParameter(valid_607609, JString, required = false,
                                 default = nil)
  if valid_607609 != nil:
    section.add "X-Amz-Security-Token", valid_607609
  var valid_607610 = header.getOrDefault("X-Amz-Algorithm")
  valid_607610 = validateParameter(valid_607610, JString, required = false,
                                 default = nil)
  if valid_607610 != nil:
    section.add "X-Amz-Algorithm", valid_607610
  var valid_607611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607611 = validateParameter(valid_607611, JString, required = false,
                                 default = nil)
  if valid_607611 != nil:
    section.add "X-Amz-SignedHeaders", valid_607611
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607612: Call_GetDescribeEventSubscriptions_607596; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_607612.validator(path, query, header, formData, body)
  let scheme = call_607612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607612.url(scheme.get, call_607612.host, call_607612.base,
                         call_607612.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607612, url, valid)

proc call*(call_607613: Call_GetDescribeEventSubscriptions_607596;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   SubscriptionName: string
  ##                   : The name of the event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607614 = newJObject()
  add(query_607614, "Marker", newJString(Marker))
  add(query_607614, "SubscriptionName", newJString(SubscriptionName))
  add(query_607614, "Action", newJString(Action))
  add(query_607614, "Version", newJString(Version))
  if Filters != nil:
    query_607614.add "Filters", Filters
  add(query_607614, "MaxRecords", newJInt(MaxRecords))
  result = call_607613.call(nil, query_607614, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_607596(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_607597, base: "/",
    url: url_GetDescribeEventSubscriptions_607598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_607659 = ref object of OpenApiRestCall_605573
proc url_PostDescribeEvents_607661(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_607660(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607662 = query.getOrDefault("Action")
  valid_607662 = validateParameter(valid_607662, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607662 != nil:
    section.add "Action", valid_607662
  var valid_607663 = query.getOrDefault("Version")
  valid_607663 = validateParameter(valid_607663, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607663 != nil:
    section.add "Version", valid_607663
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607664 = header.getOrDefault("X-Amz-Signature")
  valid_607664 = validateParameter(valid_607664, JString, required = false,
                                 default = nil)
  if valid_607664 != nil:
    section.add "X-Amz-Signature", valid_607664
  var valid_607665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607665 = validateParameter(valid_607665, JString, required = false,
                                 default = nil)
  if valid_607665 != nil:
    section.add "X-Amz-Content-Sha256", valid_607665
  var valid_607666 = header.getOrDefault("X-Amz-Date")
  valid_607666 = validateParameter(valid_607666, JString, required = false,
                                 default = nil)
  if valid_607666 != nil:
    section.add "X-Amz-Date", valid_607666
  var valid_607667 = header.getOrDefault("X-Amz-Credential")
  valid_607667 = validateParameter(valid_607667, JString, required = false,
                                 default = nil)
  if valid_607667 != nil:
    section.add "X-Amz-Credential", valid_607667
  var valid_607668 = header.getOrDefault("X-Amz-Security-Token")
  valid_607668 = validateParameter(valid_607668, JString, required = false,
                                 default = nil)
  if valid_607668 != nil:
    section.add "X-Amz-Security-Token", valid_607668
  var valid_607669 = header.getOrDefault("X-Amz-Algorithm")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "X-Amz-Algorithm", valid_607669
  var valid_607670 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607670 = validateParameter(valid_607670, JString, required = false,
                                 default = nil)
  if valid_607670 != nil:
    section.add "X-Amz-SignedHeaders", valid_607670
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607671 = formData.getOrDefault("MaxRecords")
  valid_607671 = validateParameter(valid_607671, JInt, required = false, default = nil)
  if valid_607671 != nil:
    section.add "MaxRecords", valid_607671
  var valid_607672 = formData.getOrDefault("Marker")
  valid_607672 = validateParameter(valid_607672, JString, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "Marker", valid_607672
  var valid_607673 = formData.getOrDefault("SourceIdentifier")
  valid_607673 = validateParameter(valid_607673, JString, required = false,
                                 default = nil)
  if valid_607673 != nil:
    section.add "SourceIdentifier", valid_607673
  var valid_607674 = formData.getOrDefault("SourceType")
  valid_607674 = validateParameter(valid_607674, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_607674 != nil:
    section.add "SourceType", valid_607674
  var valid_607675 = formData.getOrDefault("Duration")
  valid_607675 = validateParameter(valid_607675, JInt, required = false, default = nil)
  if valid_607675 != nil:
    section.add "Duration", valid_607675
  var valid_607676 = formData.getOrDefault("EndTime")
  valid_607676 = validateParameter(valid_607676, JString, required = false,
                                 default = nil)
  if valid_607676 != nil:
    section.add "EndTime", valid_607676
  var valid_607677 = formData.getOrDefault("StartTime")
  valid_607677 = validateParameter(valid_607677, JString, required = false,
                                 default = nil)
  if valid_607677 != nil:
    section.add "StartTime", valid_607677
  var valid_607678 = formData.getOrDefault("EventCategories")
  valid_607678 = validateParameter(valid_607678, JArray, required = false,
                                 default = nil)
  if valid_607678 != nil:
    section.add "EventCategories", valid_607678
  var valid_607679 = formData.getOrDefault("Filters")
  valid_607679 = validateParameter(valid_607679, JArray, required = false,
                                 default = nil)
  if valid_607679 != nil:
    section.add "Filters", valid_607679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607680: Call_PostDescribeEvents_607659; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_607680.validator(path, query, header, formData, body)
  let scheme = call_607680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607680.url(scheme.get, call_607680.host, call_607680.base,
                         call_607680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607680, url, valid)

proc call*(call_607681: Call_PostDescribeEvents_607659; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607682 = newJObject()
  var formData_607683 = newJObject()
  add(formData_607683, "MaxRecords", newJInt(MaxRecords))
  add(formData_607683, "Marker", newJString(Marker))
  add(formData_607683, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_607683, "SourceType", newJString(SourceType))
  add(formData_607683, "Duration", newJInt(Duration))
  add(formData_607683, "EndTime", newJString(EndTime))
  add(formData_607683, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_607683.add "EventCategories", EventCategories
  add(query_607682, "Action", newJString(Action))
  if Filters != nil:
    formData_607683.add "Filters", Filters
  add(query_607682, "Version", newJString(Version))
  result = call_607681.call(nil, query_607682, nil, formData_607683, nil)

var postDescribeEvents* = Call_PostDescribeEvents_607659(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_607660, base: "/",
    url: url_PostDescribeEvents_607661, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_607635 = ref object of OpenApiRestCall_605573
proc url_GetDescribeEvents_607637(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_607636(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607638 = query.getOrDefault("Marker")
  valid_607638 = validateParameter(valid_607638, JString, required = false,
                                 default = nil)
  if valid_607638 != nil:
    section.add "Marker", valid_607638
  var valid_607639 = query.getOrDefault("SourceType")
  valid_607639 = validateParameter(valid_607639, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_607639 != nil:
    section.add "SourceType", valid_607639
  var valid_607640 = query.getOrDefault("SourceIdentifier")
  valid_607640 = validateParameter(valid_607640, JString, required = false,
                                 default = nil)
  if valid_607640 != nil:
    section.add "SourceIdentifier", valid_607640
  var valid_607641 = query.getOrDefault("EventCategories")
  valid_607641 = validateParameter(valid_607641, JArray, required = false,
                                 default = nil)
  if valid_607641 != nil:
    section.add "EventCategories", valid_607641
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607642 = query.getOrDefault("Action")
  valid_607642 = validateParameter(valid_607642, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607642 != nil:
    section.add "Action", valid_607642
  var valid_607643 = query.getOrDefault("StartTime")
  valid_607643 = validateParameter(valid_607643, JString, required = false,
                                 default = nil)
  if valid_607643 != nil:
    section.add "StartTime", valid_607643
  var valid_607644 = query.getOrDefault("Duration")
  valid_607644 = validateParameter(valid_607644, JInt, required = false, default = nil)
  if valid_607644 != nil:
    section.add "Duration", valid_607644
  var valid_607645 = query.getOrDefault("EndTime")
  valid_607645 = validateParameter(valid_607645, JString, required = false,
                                 default = nil)
  if valid_607645 != nil:
    section.add "EndTime", valid_607645
  var valid_607646 = query.getOrDefault("Version")
  valid_607646 = validateParameter(valid_607646, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607646 != nil:
    section.add "Version", valid_607646
  var valid_607647 = query.getOrDefault("Filters")
  valid_607647 = validateParameter(valid_607647, JArray, required = false,
                                 default = nil)
  if valid_607647 != nil:
    section.add "Filters", valid_607647
  var valid_607648 = query.getOrDefault("MaxRecords")
  valid_607648 = validateParameter(valid_607648, JInt, required = false, default = nil)
  if valid_607648 != nil:
    section.add "MaxRecords", valid_607648
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607649 = header.getOrDefault("X-Amz-Signature")
  valid_607649 = validateParameter(valid_607649, JString, required = false,
                                 default = nil)
  if valid_607649 != nil:
    section.add "X-Amz-Signature", valid_607649
  var valid_607650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607650 = validateParameter(valid_607650, JString, required = false,
                                 default = nil)
  if valid_607650 != nil:
    section.add "X-Amz-Content-Sha256", valid_607650
  var valid_607651 = header.getOrDefault("X-Amz-Date")
  valid_607651 = validateParameter(valid_607651, JString, required = false,
                                 default = nil)
  if valid_607651 != nil:
    section.add "X-Amz-Date", valid_607651
  var valid_607652 = header.getOrDefault("X-Amz-Credential")
  valid_607652 = validateParameter(valid_607652, JString, required = false,
                                 default = nil)
  if valid_607652 != nil:
    section.add "X-Amz-Credential", valid_607652
  var valid_607653 = header.getOrDefault("X-Amz-Security-Token")
  valid_607653 = validateParameter(valid_607653, JString, required = false,
                                 default = nil)
  if valid_607653 != nil:
    section.add "X-Amz-Security-Token", valid_607653
  var valid_607654 = header.getOrDefault("X-Amz-Algorithm")
  valid_607654 = validateParameter(valid_607654, JString, required = false,
                                 default = nil)
  if valid_607654 != nil:
    section.add "X-Amz-Algorithm", valid_607654
  var valid_607655 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607655 = validateParameter(valid_607655, JString, required = false,
                                 default = nil)
  if valid_607655 != nil:
    section.add "X-Amz-SignedHeaders", valid_607655
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607656: Call_GetDescribeEvents_607635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_607656.validator(path, query, header, formData, body)
  let scheme = call_607656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607656.url(scheme.get, call_607656.host, call_607656.base,
                         call_607656.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607656, url, valid)

proc call*(call_607657: Call_GetDescribeEvents_607635; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607658 = newJObject()
  add(query_607658, "Marker", newJString(Marker))
  add(query_607658, "SourceType", newJString(SourceType))
  add(query_607658, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_607658.add "EventCategories", EventCategories
  add(query_607658, "Action", newJString(Action))
  add(query_607658, "StartTime", newJString(StartTime))
  add(query_607658, "Duration", newJInt(Duration))
  add(query_607658, "EndTime", newJString(EndTime))
  add(query_607658, "Version", newJString(Version))
  if Filters != nil:
    query_607658.add "Filters", Filters
  add(query_607658, "MaxRecords", newJInt(MaxRecords))
  result = call_607657.call(nil, query_607658, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_607635(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_607636,
    base: "/", url: url_GetDescribeEvents_607637,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_607707 = ref object of OpenApiRestCall_605573
proc url_PostDescribeOrderableDBInstanceOptions_607709(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_607708(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607710 = query.getOrDefault("Action")
  valid_607710 = validateParameter(valid_607710, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_607710 != nil:
    section.add "Action", valid_607710
  var valid_607711 = query.getOrDefault("Version")
  valid_607711 = validateParameter(valid_607711, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607711 != nil:
    section.add "Version", valid_607711
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607712 = header.getOrDefault("X-Amz-Signature")
  valid_607712 = validateParameter(valid_607712, JString, required = false,
                                 default = nil)
  if valid_607712 != nil:
    section.add "X-Amz-Signature", valid_607712
  var valid_607713 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607713 = validateParameter(valid_607713, JString, required = false,
                                 default = nil)
  if valid_607713 != nil:
    section.add "X-Amz-Content-Sha256", valid_607713
  var valid_607714 = header.getOrDefault("X-Amz-Date")
  valid_607714 = validateParameter(valid_607714, JString, required = false,
                                 default = nil)
  if valid_607714 != nil:
    section.add "X-Amz-Date", valid_607714
  var valid_607715 = header.getOrDefault("X-Amz-Credential")
  valid_607715 = validateParameter(valid_607715, JString, required = false,
                                 default = nil)
  if valid_607715 != nil:
    section.add "X-Amz-Credential", valid_607715
  var valid_607716 = header.getOrDefault("X-Amz-Security-Token")
  valid_607716 = validateParameter(valid_607716, JString, required = false,
                                 default = nil)
  if valid_607716 != nil:
    section.add "X-Amz-Security-Token", valid_607716
  var valid_607717 = header.getOrDefault("X-Amz-Algorithm")
  valid_607717 = validateParameter(valid_607717, JString, required = false,
                                 default = nil)
  if valid_607717 != nil:
    section.add "X-Amz-Algorithm", valid_607717
  var valid_607718 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607718 = validateParameter(valid_607718, JString, required = false,
                                 default = nil)
  if valid_607718 != nil:
    section.add "X-Amz-SignedHeaders", valid_607718
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607719 = formData.getOrDefault("DBInstanceClass")
  valid_607719 = validateParameter(valid_607719, JString, required = false,
                                 default = nil)
  if valid_607719 != nil:
    section.add "DBInstanceClass", valid_607719
  var valid_607720 = formData.getOrDefault("MaxRecords")
  valid_607720 = validateParameter(valid_607720, JInt, required = false, default = nil)
  if valid_607720 != nil:
    section.add "MaxRecords", valid_607720
  var valid_607721 = formData.getOrDefault("EngineVersion")
  valid_607721 = validateParameter(valid_607721, JString, required = false,
                                 default = nil)
  if valid_607721 != nil:
    section.add "EngineVersion", valid_607721
  var valid_607722 = formData.getOrDefault("Marker")
  valid_607722 = validateParameter(valid_607722, JString, required = false,
                                 default = nil)
  if valid_607722 != nil:
    section.add "Marker", valid_607722
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_607723 = formData.getOrDefault("Engine")
  valid_607723 = validateParameter(valid_607723, JString, required = true,
                                 default = nil)
  if valid_607723 != nil:
    section.add "Engine", valid_607723
  var valid_607724 = formData.getOrDefault("Vpc")
  valid_607724 = validateParameter(valid_607724, JBool, required = false, default = nil)
  if valid_607724 != nil:
    section.add "Vpc", valid_607724
  var valid_607725 = formData.getOrDefault("LicenseModel")
  valid_607725 = validateParameter(valid_607725, JString, required = false,
                                 default = nil)
  if valid_607725 != nil:
    section.add "LicenseModel", valid_607725
  var valid_607726 = formData.getOrDefault("Filters")
  valid_607726 = validateParameter(valid_607726, JArray, required = false,
                                 default = nil)
  if valid_607726 != nil:
    section.add "Filters", valid_607726
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607727: Call_PostDescribeOrderableDBInstanceOptions_607707;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_607727.validator(path, query, header, formData, body)
  let scheme = call_607727.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607727.url(scheme.get, call_607727.host, call_607727.base,
                         call_607727.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607727, url, valid)

proc call*(call_607728: Call_PostDescribeOrderableDBInstanceOptions_607707;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607729 = newJObject()
  var formData_607730 = newJObject()
  add(formData_607730, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_607730, "MaxRecords", newJInt(MaxRecords))
  add(formData_607730, "EngineVersion", newJString(EngineVersion))
  add(formData_607730, "Marker", newJString(Marker))
  add(formData_607730, "Engine", newJString(Engine))
  add(formData_607730, "Vpc", newJBool(Vpc))
  add(query_607729, "Action", newJString(Action))
  add(formData_607730, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_607730.add "Filters", Filters
  add(query_607729, "Version", newJString(Version))
  result = call_607728.call(nil, query_607729, nil, formData_607730, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_607707(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_607708, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_607709,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_607684 = ref object of OpenApiRestCall_605573
proc url_GetDescribeOrderableDBInstanceOptions_607686(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_607685(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607687 = query.getOrDefault("Marker")
  valid_607687 = validateParameter(valid_607687, JString, required = false,
                                 default = nil)
  if valid_607687 != nil:
    section.add "Marker", valid_607687
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_607688 = query.getOrDefault("Engine")
  valid_607688 = validateParameter(valid_607688, JString, required = true,
                                 default = nil)
  if valid_607688 != nil:
    section.add "Engine", valid_607688
  var valid_607689 = query.getOrDefault("LicenseModel")
  valid_607689 = validateParameter(valid_607689, JString, required = false,
                                 default = nil)
  if valid_607689 != nil:
    section.add "LicenseModel", valid_607689
  var valid_607690 = query.getOrDefault("Vpc")
  valid_607690 = validateParameter(valid_607690, JBool, required = false, default = nil)
  if valid_607690 != nil:
    section.add "Vpc", valid_607690
  var valid_607691 = query.getOrDefault("EngineVersion")
  valid_607691 = validateParameter(valid_607691, JString, required = false,
                                 default = nil)
  if valid_607691 != nil:
    section.add "EngineVersion", valid_607691
  var valid_607692 = query.getOrDefault("Action")
  valid_607692 = validateParameter(valid_607692, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_607692 != nil:
    section.add "Action", valid_607692
  var valid_607693 = query.getOrDefault("Version")
  valid_607693 = validateParameter(valid_607693, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607693 != nil:
    section.add "Version", valid_607693
  var valid_607694 = query.getOrDefault("DBInstanceClass")
  valid_607694 = validateParameter(valid_607694, JString, required = false,
                                 default = nil)
  if valid_607694 != nil:
    section.add "DBInstanceClass", valid_607694
  var valid_607695 = query.getOrDefault("Filters")
  valid_607695 = validateParameter(valid_607695, JArray, required = false,
                                 default = nil)
  if valid_607695 != nil:
    section.add "Filters", valid_607695
  var valid_607696 = query.getOrDefault("MaxRecords")
  valid_607696 = validateParameter(valid_607696, JInt, required = false, default = nil)
  if valid_607696 != nil:
    section.add "MaxRecords", valid_607696
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607697 = header.getOrDefault("X-Amz-Signature")
  valid_607697 = validateParameter(valid_607697, JString, required = false,
                                 default = nil)
  if valid_607697 != nil:
    section.add "X-Amz-Signature", valid_607697
  var valid_607698 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607698 = validateParameter(valid_607698, JString, required = false,
                                 default = nil)
  if valid_607698 != nil:
    section.add "X-Amz-Content-Sha256", valid_607698
  var valid_607699 = header.getOrDefault("X-Amz-Date")
  valid_607699 = validateParameter(valid_607699, JString, required = false,
                                 default = nil)
  if valid_607699 != nil:
    section.add "X-Amz-Date", valid_607699
  var valid_607700 = header.getOrDefault("X-Amz-Credential")
  valid_607700 = validateParameter(valid_607700, JString, required = false,
                                 default = nil)
  if valid_607700 != nil:
    section.add "X-Amz-Credential", valid_607700
  var valid_607701 = header.getOrDefault("X-Amz-Security-Token")
  valid_607701 = validateParameter(valid_607701, JString, required = false,
                                 default = nil)
  if valid_607701 != nil:
    section.add "X-Amz-Security-Token", valid_607701
  var valid_607702 = header.getOrDefault("X-Amz-Algorithm")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "X-Amz-Algorithm", valid_607702
  var valid_607703 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "X-Amz-SignedHeaders", valid_607703
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607704: Call_GetDescribeOrderableDBInstanceOptions_607684;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_607704.validator(path, query, header, formData, body)
  let scheme = call_607704.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607704.url(scheme.get, call_607704.host, call_607704.base,
                         call_607704.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607704, url, valid)

proc call*(call_607705: Call_GetDescribeOrderableDBInstanceOptions_607684;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607706 = newJObject()
  add(query_607706, "Marker", newJString(Marker))
  add(query_607706, "Engine", newJString(Engine))
  add(query_607706, "LicenseModel", newJString(LicenseModel))
  add(query_607706, "Vpc", newJBool(Vpc))
  add(query_607706, "EngineVersion", newJString(EngineVersion))
  add(query_607706, "Action", newJString(Action))
  add(query_607706, "Version", newJString(Version))
  add(query_607706, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_607706.add "Filters", Filters
  add(query_607706, "MaxRecords", newJInt(MaxRecords))
  result = call_607705.call(nil, query_607706, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_607684(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_607685, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_607686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_607750 = ref object of OpenApiRestCall_605573
proc url_PostDescribePendingMaintenanceActions_607752(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_607751(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607753 = query.getOrDefault("Action")
  valid_607753 = validateParameter(valid_607753, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_607753 != nil:
    section.add "Action", valid_607753
  var valid_607754 = query.getOrDefault("Version")
  valid_607754 = validateParameter(valid_607754, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607754 != nil:
    section.add "Version", valid_607754
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607755 = header.getOrDefault("X-Amz-Signature")
  valid_607755 = validateParameter(valid_607755, JString, required = false,
                                 default = nil)
  if valid_607755 != nil:
    section.add "X-Amz-Signature", valid_607755
  var valid_607756 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607756 = validateParameter(valid_607756, JString, required = false,
                                 default = nil)
  if valid_607756 != nil:
    section.add "X-Amz-Content-Sha256", valid_607756
  var valid_607757 = header.getOrDefault("X-Amz-Date")
  valid_607757 = validateParameter(valid_607757, JString, required = false,
                                 default = nil)
  if valid_607757 != nil:
    section.add "X-Amz-Date", valid_607757
  var valid_607758 = header.getOrDefault("X-Amz-Credential")
  valid_607758 = validateParameter(valid_607758, JString, required = false,
                                 default = nil)
  if valid_607758 != nil:
    section.add "X-Amz-Credential", valid_607758
  var valid_607759 = header.getOrDefault("X-Amz-Security-Token")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-Security-Token", valid_607759
  var valid_607760 = header.getOrDefault("X-Amz-Algorithm")
  valid_607760 = validateParameter(valid_607760, JString, required = false,
                                 default = nil)
  if valid_607760 != nil:
    section.add "X-Amz-Algorithm", valid_607760
  var valid_607761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607761 = validateParameter(valid_607761, JString, required = false,
                                 default = nil)
  if valid_607761 != nil:
    section.add "X-Amz-SignedHeaders", valid_607761
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_607762 = formData.getOrDefault("MaxRecords")
  valid_607762 = validateParameter(valid_607762, JInt, required = false, default = nil)
  if valid_607762 != nil:
    section.add "MaxRecords", valid_607762
  var valid_607763 = formData.getOrDefault("Marker")
  valid_607763 = validateParameter(valid_607763, JString, required = false,
                                 default = nil)
  if valid_607763 != nil:
    section.add "Marker", valid_607763
  var valid_607764 = formData.getOrDefault("ResourceIdentifier")
  valid_607764 = validateParameter(valid_607764, JString, required = false,
                                 default = nil)
  if valid_607764 != nil:
    section.add "ResourceIdentifier", valid_607764
  var valid_607765 = formData.getOrDefault("Filters")
  valid_607765 = validateParameter(valid_607765, JArray, required = false,
                                 default = nil)
  if valid_607765 != nil:
    section.add "Filters", valid_607765
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607766: Call_PostDescribePendingMaintenanceActions_607750;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_607766.validator(path, query, header, formData, body)
  let scheme = call_607766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607766.url(scheme.get, call_607766.host, call_607766.base,
                         call_607766.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607766, url, valid)

proc call*(call_607767: Call_PostDescribePendingMaintenanceActions_607750;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_607768 = newJObject()
  var formData_607769 = newJObject()
  add(formData_607769, "MaxRecords", newJInt(MaxRecords))
  add(formData_607769, "Marker", newJString(Marker))
  add(formData_607769, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_607768, "Action", newJString(Action))
  if Filters != nil:
    formData_607769.add "Filters", Filters
  add(query_607768, "Version", newJString(Version))
  result = call_607767.call(nil, query_607768, nil, formData_607769, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_607750(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_607751, base: "/",
    url: url_PostDescribePendingMaintenanceActions_607752,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_607731 = ref object of OpenApiRestCall_605573
proc url_GetDescribePendingMaintenanceActions_607733(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_607732(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607734 = query.getOrDefault("ResourceIdentifier")
  valid_607734 = validateParameter(valid_607734, JString, required = false,
                                 default = nil)
  if valid_607734 != nil:
    section.add "ResourceIdentifier", valid_607734
  var valid_607735 = query.getOrDefault("Marker")
  valid_607735 = validateParameter(valid_607735, JString, required = false,
                                 default = nil)
  if valid_607735 != nil:
    section.add "Marker", valid_607735
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607736 = query.getOrDefault("Action")
  valid_607736 = validateParameter(valid_607736, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_607736 != nil:
    section.add "Action", valid_607736
  var valid_607737 = query.getOrDefault("Version")
  valid_607737 = validateParameter(valid_607737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607737 != nil:
    section.add "Version", valid_607737
  var valid_607738 = query.getOrDefault("Filters")
  valid_607738 = validateParameter(valid_607738, JArray, required = false,
                                 default = nil)
  if valid_607738 != nil:
    section.add "Filters", valid_607738
  var valid_607739 = query.getOrDefault("MaxRecords")
  valid_607739 = validateParameter(valid_607739, JInt, required = false, default = nil)
  if valid_607739 != nil:
    section.add "MaxRecords", valid_607739
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607740 = header.getOrDefault("X-Amz-Signature")
  valid_607740 = validateParameter(valid_607740, JString, required = false,
                                 default = nil)
  if valid_607740 != nil:
    section.add "X-Amz-Signature", valid_607740
  var valid_607741 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607741 = validateParameter(valid_607741, JString, required = false,
                                 default = nil)
  if valid_607741 != nil:
    section.add "X-Amz-Content-Sha256", valid_607741
  var valid_607742 = header.getOrDefault("X-Amz-Date")
  valid_607742 = validateParameter(valid_607742, JString, required = false,
                                 default = nil)
  if valid_607742 != nil:
    section.add "X-Amz-Date", valid_607742
  var valid_607743 = header.getOrDefault("X-Amz-Credential")
  valid_607743 = validateParameter(valid_607743, JString, required = false,
                                 default = nil)
  if valid_607743 != nil:
    section.add "X-Amz-Credential", valid_607743
  var valid_607744 = header.getOrDefault("X-Amz-Security-Token")
  valid_607744 = validateParameter(valid_607744, JString, required = false,
                                 default = nil)
  if valid_607744 != nil:
    section.add "X-Amz-Security-Token", valid_607744
  var valid_607745 = header.getOrDefault("X-Amz-Algorithm")
  valid_607745 = validateParameter(valid_607745, JString, required = false,
                                 default = nil)
  if valid_607745 != nil:
    section.add "X-Amz-Algorithm", valid_607745
  var valid_607746 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607746 = validateParameter(valid_607746, JString, required = false,
                                 default = nil)
  if valid_607746 != nil:
    section.add "X-Amz-SignedHeaders", valid_607746
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607747: Call_GetDescribePendingMaintenanceActions_607731;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_607747.validator(path, query, header, formData, body)
  let scheme = call_607747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607747.url(scheme.get, call_607747.host, call_607747.base,
                         call_607747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607747, url, valid)

proc call*(call_607748: Call_GetDescribePendingMaintenanceActions_607731;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607749 = newJObject()
  add(query_607749, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_607749, "Marker", newJString(Marker))
  add(query_607749, "Action", newJString(Action))
  add(query_607749, "Version", newJString(Version))
  if Filters != nil:
    query_607749.add "Filters", Filters
  add(query_607749, "MaxRecords", newJInt(MaxRecords))
  result = call_607748.call(nil, query_607749, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_607731(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_607732, base: "/",
    url: url_GetDescribePendingMaintenanceActions_607733,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_607786 = ref object of OpenApiRestCall_605573
proc url_PostDescribeValidDBInstanceModifications_607788(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_607787(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607789 = query.getOrDefault("Action")
  valid_607789 = validateParameter(valid_607789, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_607789 != nil:
    section.add "Action", valid_607789
  var valid_607790 = query.getOrDefault("Version")
  valid_607790 = validateParameter(valid_607790, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607790 != nil:
    section.add "Version", valid_607790
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607791 = header.getOrDefault("X-Amz-Signature")
  valid_607791 = validateParameter(valid_607791, JString, required = false,
                                 default = nil)
  if valid_607791 != nil:
    section.add "X-Amz-Signature", valid_607791
  var valid_607792 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607792 = validateParameter(valid_607792, JString, required = false,
                                 default = nil)
  if valid_607792 != nil:
    section.add "X-Amz-Content-Sha256", valid_607792
  var valid_607793 = header.getOrDefault("X-Amz-Date")
  valid_607793 = validateParameter(valid_607793, JString, required = false,
                                 default = nil)
  if valid_607793 != nil:
    section.add "X-Amz-Date", valid_607793
  var valid_607794 = header.getOrDefault("X-Amz-Credential")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "X-Amz-Credential", valid_607794
  var valid_607795 = header.getOrDefault("X-Amz-Security-Token")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "X-Amz-Security-Token", valid_607795
  var valid_607796 = header.getOrDefault("X-Amz-Algorithm")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "X-Amz-Algorithm", valid_607796
  var valid_607797 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607797 = validateParameter(valid_607797, JString, required = false,
                                 default = nil)
  if valid_607797 != nil:
    section.add "X-Amz-SignedHeaders", valid_607797
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607798 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607798 = validateParameter(valid_607798, JString, required = true,
                                 default = nil)
  if valid_607798 != nil:
    section.add "DBInstanceIdentifier", valid_607798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607799: Call_PostDescribeValidDBInstanceModifications_607786;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_607799.validator(path, query, header, formData, body)
  let scheme = call_607799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607799.url(scheme.get, call_607799.host, call_607799.base,
                         call_607799.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607799, url, valid)

proc call*(call_607800: Call_PostDescribeValidDBInstanceModifications_607786;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607801 = newJObject()
  var formData_607802 = newJObject()
  add(formData_607802, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607801, "Action", newJString(Action))
  add(query_607801, "Version", newJString(Version))
  result = call_607800.call(nil, query_607801, nil, formData_607802, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_607786(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_607787,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_607788,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_607770 = ref object of OpenApiRestCall_605573
proc url_GetDescribeValidDBInstanceModifications_607772(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_607771(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607773 = query.getOrDefault("DBInstanceIdentifier")
  valid_607773 = validateParameter(valid_607773, JString, required = true,
                                 default = nil)
  if valid_607773 != nil:
    section.add "DBInstanceIdentifier", valid_607773
  var valid_607774 = query.getOrDefault("Action")
  valid_607774 = validateParameter(valid_607774, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_607774 != nil:
    section.add "Action", valid_607774
  var valid_607775 = query.getOrDefault("Version")
  valid_607775 = validateParameter(valid_607775, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607775 != nil:
    section.add "Version", valid_607775
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607776 = header.getOrDefault("X-Amz-Signature")
  valid_607776 = validateParameter(valid_607776, JString, required = false,
                                 default = nil)
  if valid_607776 != nil:
    section.add "X-Amz-Signature", valid_607776
  var valid_607777 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607777 = validateParameter(valid_607777, JString, required = false,
                                 default = nil)
  if valid_607777 != nil:
    section.add "X-Amz-Content-Sha256", valid_607777
  var valid_607778 = header.getOrDefault("X-Amz-Date")
  valid_607778 = validateParameter(valid_607778, JString, required = false,
                                 default = nil)
  if valid_607778 != nil:
    section.add "X-Amz-Date", valid_607778
  var valid_607779 = header.getOrDefault("X-Amz-Credential")
  valid_607779 = validateParameter(valid_607779, JString, required = false,
                                 default = nil)
  if valid_607779 != nil:
    section.add "X-Amz-Credential", valid_607779
  var valid_607780 = header.getOrDefault("X-Amz-Security-Token")
  valid_607780 = validateParameter(valid_607780, JString, required = false,
                                 default = nil)
  if valid_607780 != nil:
    section.add "X-Amz-Security-Token", valid_607780
  var valid_607781 = header.getOrDefault("X-Amz-Algorithm")
  valid_607781 = validateParameter(valid_607781, JString, required = false,
                                 default = nil)
  if valid_607781 != nil:
    section.add "X-Amz-Algorithm", valid_607781
  var valid_607782 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607782 = validateParameter(valid_607782, JString, required = false,
                                 default = nil)
  if valid_607782 != nil:
    section.add "X-Amz-SignedHeaders", valid_607782
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607783: Call_GetDescribeValidDBInstanceModifications_607770;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_607783.validator(path, query, header, formData, body)
  let scheme = call_607783.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607783.url(scheme.get, call_607783.host, call_607783.base,
                         call_607783.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607783, url, valid)

proc call*(call_607784: Call_GetDescribeValidDBInstanceModifications_607770;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607785 = newJObject()
  add(query_607785, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607785, "Action", newJString(Action))
  add(query_607785, "Version", newJString(Version))
  result = call_607784.call(nil, query_607785, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_607770(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_607771, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_607772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_607820 = ref object of OpenApiRestCall_605573
proc url_PostFailoverDBCluster_607822(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_607821(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607823 = query.getOrDefault("Action")
  valid_607823 = validateParameter(valid_607823, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_607823 != nil:
    section.add "Action", valid_607823
  var valid_607824 = query.getOrDefault("Version")
  valid_607824 = validateParameter(valid_607824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607824 != nil:
    section.add "Version", valid_607824
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607825 = header.getOrDefault("X-Amz-Signature")
  valid_607825 = validateParameter(valid_607825, JString, required = false,
                                 default = nil)
  if valid_607825 != nil:
    section.add "X-Amz-Signature", valid_607825
  var valid_607826 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607826 = validateParameter(valid_607826, JString, required = false,
                                 default = nil)
  if valid_607826 != nil:
    section.add "X-Amz-Content-Sha256", valid_607826
  var valid_607827 = header.getOrDefault("X-Amz-Date")
  valid_607827 = validateParameter(valid_607827, JString, required = false,
                                 default = nil)
  if valid_607827 != nil:
    section.add "X-Amz-Date", valid_607827
  var valid_607828 = header.getOrDefault("X-Amz-Credential")
  valid_607828 = validateParameter(valid_607828, JString, required = false,
                                 default = nil)
  if valid_607828 != nil:
    section.add "X-Amz-Credential", valid_607828
  var valid_607829 = header.getOrDefault("X-Amz-Security-Token")
  valid_607829 = validateParameter(valid_607829, JString, required = false,
                                 default = nil)
  if valid_607829 != nil:
    section.add "X-Amz-Security-Token", valid_607829
  var valid_607830 = header.getOrDefault("X-Amz-Algorithm")
  valid_607830 = validateParameter(valid_607830, JString, required = false,
                                 default = nil)
  if valid_607830 != nil:
    section.add "X-Amz-Algorithm", valid_607830
  var valid_607831 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607831 = validateParameter(valid_607831, JString, required = false,
                                 default = nil)
  if valid_607831 != nil:
    section.add "X-Amz-SignedHeaders", valid_607831
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_607832 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_607832 = validateParameter(valid_607832, JString, required = false,
                                 default = nil)
  if valid_607832 != nil:
    section.add "TargetDBInstanceIdentifier", valid_607832
  var valid_607833 = formData.getOrDefault("DBClusterIdentifier")
  valid_607833 = validateParameter(valid_607833, JString, required = false,
                                 default = nil)
  if valid_607833 != nil:
    section.add "DBClusterIdentifier", valid_607833
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607834: Call_PostFailoverDBCluster_607820; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_607834.validator(path, query, header, formData, body)
  let scheme = call_607834.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607834.url(scheme.get, call_607834.host, call_607834.base,
                         call_607834.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607834, url, valid)

proc call*(call_607835: Call_PostFailoverDBCluster_607820;
          Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBClusterIdentifier: string = ""): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_607836 = newJObject()
  var formData_607837 = newJObject()
  add(query_607836, "Action", newJString(Action))
  add(formData_607837, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_607836, "Version", newJString(Version))
  add(formData_607837, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607835.call(nil, query_607836, nil, formData_607837, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_607820(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_607821, base: "/",
    url: url_PostFailoverDBCluster_607822, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_607803 = ref object of OpenApiRestCall_605573
proc url_GetFailoverDBCluster_607805(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_607804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_607806 = query.getOrDefault("DBClusterIdentifier")
  valid_607806 = validateParameter(valid_607806, JString, required = false,
                                 default = nil)
  if valid_607806 != nil:
    section.add "DBClusterIdentifier", valid_607806
  var valid_607807 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_607807 = validateParameter(valid_607807, JString, required = false,
                                 default = nil)
  if valid_607807 != nil:
    section.add "TargetDBInstanceIdentifier", valid_607807
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607808 = query.getOrDefault("Action")
  valid_607808 = validateParameter(valid_607808, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_607808 != nil:
    section.add "Action", valid_607808
  var valid_607809 = query.getOrDefault("Version")
  valid_607809 = validateParameter(valid_607809, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607809 != nil:
    section.add "Version", valid_607809
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607810 = header.getOrDefault("X-Amz-Signature")
  valid_607810 = validateParameter(valid_607810, JString, required = false,
                                 default = nil)
  if valid_607810 != nil:
    section.add "X-Amz-Signature", valid_607810
  var valid_607811 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607811 = validateParameter(valid_607811, JString, required = false,
                                 default = nil)
  if valid_607811 != nil:
    section.add "X-Amz-Content-Sha256", valid_607811
  var valid_607812 = header.getOrDefault("X-Amz-Date")
  valid_607812 = validateParameter(valid_607812, JString, required = false,
                                 default = nil)
  if valid_607812 != nil:
    section.add "X-Amz-Date", valid_607812
  var valid_607813 = header.getOrDefault("X-Amz-Credential")
  valid_607813 = validateParameter(valid_607813, JString, required = false,
                                 default = nil)
  if valid_607813 != nil:
    section.add "X-Amz-Credential", valid_607813
  var valid_607814 = header.getOrDefault("X-Amz-Security-Token")
  valid_607814 = validateParameter(valid_607814, JString, required = false,
                                 default = nil)
  if valid_607814 != nil:
    section.add "X-Amz-Security-Token", valid_607814
  var valid_607815 = header.getOrDefault("X-Amz-Algorithm")
  valid_607815 = validateParameter(valid_607815, JString, required = false,
                                 default = nil)
  if valid_607815 != nil:
    section.add "X-Amz-Algorithm", valid_607815
  var valid_607816 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607816 = validateParameter(valid_607816, JString, required = false,
                                 default = nil)
  if valid_607816 != nil:
    section.add "X-Amz-SignedHeaders", valid_607816
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607817: Call_GetFailoverDBCluster_607803; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ## 
  let valid = call_607817.validator(path, query, header, formData, body)
  let scheme = call_607817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607817.url(scheme.get, call_607817.host, call_607817.base,
                         call_607817.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607817, url, valid)

proc call*(call_607818: Call_GetFailoverDBCluster_607803;
          DBClusterIdentifier: string = ""; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607819 = newJObject()
  add(query_607819, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607819, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_607819, "Action", newJString(Action))
  add(query_607819, "Version", newJString(Version))
  result = call_607818.call(nil, query_607819, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_607803(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_607804, base: "/",
    url: url_GetFailoverDBCluster_607805, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_607855 = ref object of OpenApiRestCall_605573
proc url_PostListTagsForResource_607857(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_607856(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607858 = query.getOrDefault("Action")
  valid_607858 = validateParameter(valid_607858, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_607858 != nil:
    section.add "Action", valid_607858
  var valid_607859 = query.getOrDefault("Version")
  valid_607859 = validateParameter(valid_607859, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607859 != nil:
    section.add "Version", valid_607859
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607860 = header.getOrDefault("X-Amz-Signature")
  valid_607860 = validateParameter(valid_607860, JString, required = false,
                                 default = nil)
  if valid_607860 != nil:
    section.add "X-Amz-Signature", valid_607860
  var valid_607861 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607861 = validateParameter(valid_607861, JString, required = false,
                                 default = nil)
  if valid_607861 != nil:
    section.add "X-Amz-Content-Sha256", valid_607861
  var valid_607862 = header.getOrDefault("X-Amz-Date")
  valid_607862 = validateParameter(valid_607862, JString, required = false,
                                 default = nil)
  if valid_607862 != nil:
    section.add "X-Amz-Date", valid_607862
  var valid_607863 = header.getOrDefault("X-Amz-Credential")
  valid_607863 = validateParameter(valid_607863, JString, required = false,
                                 default = nil)
  if valid_607863 != nil:
    section.add "X-Amz-Credential", valid_607863
  var valid_607864 = header.getOrDefault("X-Amz-Security-Token")
  valid_607864 = validateParameter(valid_607864, JString, required = false,
                                 default = nil)
  if valid_607864 != nil:
    section.add "X-Amz-Security-Token", valid_607864
  var valid_607865 = header.getOrDefault("X-Amz-Algorithm")
  valid_607865 = validateParameter(valid_607865, JString, required = false,
                                 default = nil)
  if valid_607865 != nil:
    section.add "X-Amz-Algorithm", valid_607865
  var valid_607866 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607866 = validateParameter(valid_607866, JString, required = false,
                                 default = nil)
  if valid_607866 != nil:
    section.add "X-Amz-SignedHeaders", valid_607866
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  var valid_607867 = formData.getOrDefault("Filters")
  valid_607867 = validateParameter(valid_607867, JArray, required = false,
                                 default = nil)
  if valid_607867 != nil:
    section.add "Filters", valid_607867
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_607868 = formData.getOrDefault("ResourceName")
  valid_607868 = validateParameter(valid_607868, JString, required = true,
                                 default = nil)
  if valid_607868 != nil:
    section.add "ResourceName", valid_607868
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607869: Call_PostListTagsForResource_607855; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_607869.validator(path, query, header, formData, body)
  let scheme = call_607869.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607869.url(scheme.get, call_607869.host, call_607869.base,
                         call_607869.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607869, url, valid)

proc call*(call_607870: Call_PostListTagsForResource_607855; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_607871 = newJObject()
  var formData_607872 = newJObject()
  add(query_607871, "Action", newJString(Action))
  if Filters != nil:
    formData_607872.add "Filters", Filters
  add(query_607871, "Version", newJString(Version))
  add(formData_607872, "ResourceName", newJString(ResourceName))
  result = call_607870.call(nil, query_607871, nil, formData_607872, nil)

var postListTagsForResource* = Call_PostListTagsForResource_607855(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_607856, base: "/",
    url: url_PostListTagsForResource_607857, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_607838 = ref object of OpenApiRestCall_605573
proc url_GetListTagsForResource_607840(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_607839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_607841 = query.getOrDefault("ResourceName")
  valid_607841 = validateParameter(valid_607841, JString, required = true,
                                 default = nil)
  if valid_607841 != nil:
    section.add "ResourceName", valid_607841
  var valid_607842 = query.getOrDefault("Action")
  valid_607842 = validateParameter(valid_607842, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_607842 != nil:
    section.add "Action", valid_607842
  var valid_607843 = query.getOrDefault("Version")
  valid_607843 = validateParameter(valid_607843, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607843 != nil:
    section.add "Version", valid_607843
  var valid_607844 = query.getOrDefault("Filters")
  valid_607844 = validateParameter(valid_607844, JArray, required = false,
                                 default = nil)
  if valid_607844 != nil:
    section.add "Filters", valid_607844
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607845 = header.getOrDefault("X-Amz-Signature")
  valid_607845 = validateParameter(valid_607845, JString, required = false,
                                 default = nil)
  if valid_607845 != nil:
    section.add "X-Amz-Signature", valid_607845
  var valid_607846 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607846 = validateParameter(valid_607846, JString, required = false,
                                 default = nil)
  if valid_607846 != nil:
    section.add "X-Amz-Content-Sha256", valid_607846
  var valid_607847 = header.getOrDefault("X-Amz-Date")
  valid_607847 = validateParameter(valid_607847, JString, required = false,
                                 default = nil)
  if valid_607847 != nil:
    section.add "X-Amz-Date", valid_607847
  var valid_607848 = header.getOrDefault("X-Amz-Credential")
  valid_607848 = validateParameter(valid_607848, JString, required = false,
                                 default = nil)
  if valid_607848 != nil:
    section.add "X-Amz-Credential", valid_607848
  var valid_607849 = header.getOrDefault("X-Amz-Security-Token")
  valid_607849 = validateParameter(valid_607849, JString, required = false,
                                 default = nil)
  if valid_607849 != nil:
    section.add "X-Amz-Security-Token", valid_607849
  var valid_607850 = header.getOrDefault("X-Amz-Algorithm")
  valid_607850 = validateParameter(valid_607850, JString, required = false,
                                 default = nil)
  if valid_607850 != nil:
    section.add "X-Amz-Algorithm", valid_607850
  var valid_607851 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607851 = validateParameter(valid_607851, JString, required = false,
                                 default = nil)
  if valid_607851 != nil:
    section.add "X-Amz-SignedHeaders", valid_607851
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607852: Call_GetListTagsForResource_607838; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists all tags on an Amazon Neptune resource.
  ## 
  let valid = call_607852.validator(path, query, header, formData, body)
  let scheme = call_607852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607852.url(scheme.get, call_607852.host, call_607852.base,
                         call_607852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607852, url, valid)

proc call*(call_607853: Call_GetListTagsForResource_607838; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## Lists all tags on an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  var query_607854 = newJObject()
  add(query_607854, "ResourceName", newJString(ResourceName))
  add(query_607854, "Action", newJString(Action))
  add(query_607854, "Version", newJString(Version))
  if Filters != nil:
    query_607854.add "Filters", Filters
  result = call_607853.call(nil, query_607854, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_607838(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_607839, base: "/",
    url: url_GetListTagsForResource_607840, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_607903 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBCluster_607905(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_607904(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607906 = query.getOrDefault("Action")
  valid_607906 = validateParameter(valid_607906, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_607906 != nil:
    section.add "Action", valid_607906
  var valid_607907 = query.getOrDefault("Version")
  valid_607907 = validateParameter(valid_607907, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607907 != nil:
    section.add "Version", valid_607907
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607908 = header.getOrDefault("X-Amz-Signature")
  valid_607908 = validateParameter(valid_607908, JString, required = false,
                                 default = nil)
  if valid_607908 != nil:
    section.add "X-Amz-Signature", valid_607908
  var valid_607909 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607909 = validateParameter(valid_607909, JString, required = false,
                                 default = nil)
  if valid_607909 != nil:
    section.add "X-Amz-Content-Sha256", valid_607909
  var valid_607910 = header.getOrDefault("X-Amz-Date")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "X-Amz-Date", valid_607910
  var valid_607911 = header.getOrDefault("X-Amz-Credential")
  valid_607911 = validateParameter(valid_607911, JString, required = false,
                                 default = nil)
  if valid_607911 != nil:
    section.add "X-Amz-Credential", valid_607911
  var valid_607912 = header.getOrDefault("X-Amz-Security-Token")
  valid_607912 = validateParameter(valid_607912, JString, required = false,
                                 default = nil)
  if valid_607912 != nil:
    section.add "X-Amz-Security-Token", valid_607912
  var valid_607913 = header.getOrDefault("X-Amz-Algorithm")
  valid_607913 = validateParameter(valid_607913, JString, required = false,
                                 default = nil)
  if valid_607913 != nil:
    section.add "X-Amz-Algorithm", valid_607913
  var valid_607914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607914 = validateParameter(valid_607914, JString, required = false,
                                 default = nil)
  if valid_607914 != nil:
    section.add "X-Amz-SignedHeaders", valid_607914
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_607915 = formData.getOrDefault("Port")
  valid_607915 = validateParameter(valid_607915, JInt, required = false, default = nil)
  if valid_607915 != nil:
    section.add "Port", valid_607915
  var valid_607916 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_607916 = validateParameter(valid_607916, JString, required = false,
                                 default = nil)
  if valid_607916 != nil:
    section.add "PreferredMaintenanceWindow", valid_607916
  var valid_607917 = formData.getOrDefault("PreferredBackupWindow")
  valid_607917 = validateParameter(valid_607917, JString, required = false,
                                 default = nil)
  if valid_607917 != nil:
    section.add "PreferredBackupWindow", valid_607917
  var valid_607918 = formData.getOrDefault("MasterUserPassword")
  valid_607918 = validateParameter(valid_607918, JString, required = false,
                                 default = nil)
  if valid_607918 != nil:
    section.add "MasterUserPassword", valid_607918
  var valid_607919 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_607919 = validateParameter(valid_607919, JArray, required = false,
                                 default = nil)
  if valid_607919 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_607919
  var valid_607920 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_607920 = validateParameter(valid_607920, JArray, required = false,
                                 default = nil)
  if valid_607920 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_607920
  var valid_607921 = formData.getOrDefault("EngineVersion")
  valid_607921 = validateParameter(valid_607921, JString, required = false,
                                 default = nil)
  if valid_607921 != nil:
    section.add "EngineVersion", valid_607921
  var valid_607922 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_607922 = validateParameter(valid_607922, JArray, required = false,
                                 default = nil)
  if valid_607922 != nil:
    section.add "VpcSecurityGroupIds", valid_607922
  var valid_607923 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607923 = validateParameter(valid_607923, JBool, required = false, default = nil)
  if valid_607923 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607923
  var valid_607924 = formData.getOrDefault("BackupRetentionPeriod")
  valid_607924 = validateParameter(valid_607924, JInt, required = false, default = nil)
  if valid_607924 != nil:
    section.add "BackupRetentionPeriod", valid_607924
  var valid_607925 = formData.getOrDefault("ApplyImmediately")
  valid_607925 = validateParameter(valid_607925, JBool, required = false, default = nil)
  if valid_607925 != nil:
    section.add "ApplyImmediately", valid_607925
  var valid_607926 = formData.getOrDefault("OptionGroupName")
  valid_607926 = validateParameter(valid_607926, JString, required = false,
                                 default = nil)
  if valid_607926 != nil:
    section.add "OptionGroupName", valid_607926
  var valid_607927 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607927 = validateParameter(valid_607927, JString, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "DBClusterParameterGroupName", valid_607927
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607928 = formData.getOrDefault("DBClusterIdentifier")
  valid_607928 = validateParameter(valid_607928, JString, required = true,
                                 default = nil)
  if valid_607928 != nil:
    section.add "DBClusterIdentifier", valid_607928
  var valid_607929 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_607929 = validateParameter(valid_607929, JString, required = false,
                                 default = nil)
  if valid_607929 != nil:
    section.add "NewDBClusterIdentifier", valid_607929
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607930: Call_PostModifyDBCluster_607903; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_607930.validator(path, query, header, formData, body)
  let scheme = call_607930.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607930.url(scheme.get, call_607930.host, call_607930.base,
                         call_607930.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607930, url, valid)

proc call*(call_607931: Call_PostModifyDBCluster_607903;
          DBClusterIdentifier: string; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          EngineVersion: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          Action: string = "ModifyDBCluster"; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          NewDBClusterIdentifier: string = ""): Recallable =
  ## postModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_607932 = newJObject()
  var formData_607933 = newJObject()
  add(formData_607933, "Port", newJInt(Port))
  add(formData_607933, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_607933, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_607933, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_607933.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_607933.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_607933, "EngineVersion", newJString(EngineVersion))
  if VpcSecurityGroupIds != nil:
    formData_607933.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_607933, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_607933, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_607933, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607932, "Action", newJString(Action))
  add(formData_607933, "OptionGroupName", newJString(OptionGroupName))
  add(formData_607933, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607932, "Version", newJString(Version))
  add(formData_607933, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_607933, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  result = call_607931.call(nil, query_607932, nil, formData_607933, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_607903(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_607904, base: "/",
    url: url_PostModifyDBCluster_607905, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_607873 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBCluster_607875(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_607874(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607876 = query.getOrDefault("DBClusterIdentifier")
  valid_607876 = validateParameter(valid_607876, JString, required = true,
                                 default = nil)
  if valid_607876 != nil:
    section.add "DBClusterIdentifier", valid_607876
  var valid_607877 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607877 = validateParameter(valid_607877, JString, required = false,
                                 default = nil)
  if valid_607877 != nil:
    section.add "DBClusterParameterGroupName", valid_607877
  var valid_607878 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_607878 = validateParameter(valid_607878, JArray, required = false,
                                 default = nil)
  if valid_607878 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_607878
  var valid_607879 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_607879 = validateParameter(valid_607879, JArray, required = false,
                                 default = nil)
  if valid_607879 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_607879
  var valid_607880 = query.getOrDefault("BackupRetentionPeriod")
  valid_607880 = validateParameter(valid_607880, JInt, required = false, default = nil)
  if valid_607880 != nil:
    section.add "BackupRetentionPeriod", valid_607880
  var valid_607881 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_607881 = validateParameter(valid_607881, JBool, required = false, default = nil)
  if valid_607881 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_607881
  var valid_607882 = query.getOrDefault("EngineVersion")
  valid_607882 = validateParameter(valid_607882, JString, required = false,
                                 default = nil)
  if valid_607882 != nil:
    section.add "EngineVersion", valid_607882
  var valid_607883 = query.getOrDefault("Action")
  valid_607883 = validateParameter(valid_607883, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_607883 != nil:
    section.add "Action", valid_607883
  var valid_607884 = query.getOrDefault("ApplyImmediately")
  valid_607884 = validateParameter(valid_607884, JBool, required = false, default = nil)
  if valid_607884 != nil:
    section.add "ApplyImmediately", valid_607884
  var valid_607885 = query.getOrDefault("NewDBClusterIdentifier")
  valid_607885 = validateParameter(valid_607885, JString, required = false,
                                 default = nil)
  if valid_607885 != nil:
    section.add "NewDBClusterIdentifier", valid_607885
  var valid_607886 = query.getOrDefault("Port")
  valid_607886 = validateParameter(valid_607886, JInt, required = false, default = nil)
  if valid_607886 != nil:
    section.add "Port", valid_607886
  var valid_607887 = query.getOrDefault("VpcSecurityGroupIds")
  valid_607887 = validateParameter(valid_607887, JArray, required = false,
                                 default = nil)
  if valid_607887 != nil:
    section.add "VpcSecurityGroupIds", valid_607887
  var valid_607888 = query.getOrDefault("MasterUserPassword")
  valid_607888 = validateParameter(valid_607888, JString, required = false,
                                 default = nil)
  if valid_607888 != nil:
    section.add "MasterUserPassword", valid_607888
  var valid_607889 = query.getOrDefault("OptionGroupName")
  valid_607889 = validateParameter(valid_607889, JString, required = false,
                                 default = nil)
  if valid_607889 != nil:
    section.add "OptionGroupName", valid_607889
  var valid_607890 = query.getOrDefault("Version")
  valid_607890 = validateParameter(valid_607890, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607890 != nil:
    section.add "Version", valid_607890
  var valid_607891 = query.getOrDefault("PreferredBackupWindow")
  valid_607891 = validateParameter(valid_607891, JString, required = false,
                                 default = nil)
  if valid_607891 != nil:
    section.add "PreferredBackupWindow", valid_607891
  var valid_607892 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_607892 = validateParameter(valid_607892, JString, required = false,
                                 default = nil)
  if valid_607892 != nil:
    section.add "PreferredMaintenanceWindow", valid_607892
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607893 = header.getOrDefault("X-Amz-Signature")
  valid_607893 = validateParameter(valid_607893, JString, required = false,
                                 default = nil)
  if valid_607893 != nil:
    section.add "X-Amz-Signature", valid_607893
  var valid_607894 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607894 = validateParameter(valid_607894, JString, required = false,
                                 default = nil)
  if valid_607894 != nil:
    section.add "X-Amz-Content-Sha256", valid_607894
  var valid_607895 = header.getOrDefault("X-Amz-Date")
  valid_607895 = validateParameter(valid_607895, JString, required = false,
                                 default = nil)
  if valid_607895 != nil:
    section.add "X-Amz-Date", valid_607895
  var valid_607896 = header.getOrDefault("X-Amz-Credential")
  valid_607896 = validateParameter(valid_607896, JString, required = false,
                                 default = nil)
  if valid_607896 != nil:
    section.add "X-Amz-Credential", valid_607896
  var valid_607897 = header.getOrDefault("X-Amz-Security-Token")
  valid_607897 = validateParameter(valid_607897, JString, required = false,
                                 default = nil)
  if valid_607897 != nil:
    section.add "X-Amz-Security-Token", valid_607897
  var valid_607898 = header.getOrDefault("X-Amz-Algorithm")
  valid_607898 = validateParameter(valid_607898, JString, required = false,
                                 default = nil)
  if valid_607898 != nil:
    section.add "X-Amz-Algorithm", valid_607898
  var valid_607899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607899 = validateParameter(valid_607899, JString, required = false,
                                 default = nil)
  if valid_607899 != nil:
    section.add "X-Amz-SignedHeaders", valid_607899
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607900: Call_GetModifyDBCluster_607873; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ## 
  let valid = call_607900.validator(path, query, header, formData, body)
  let scheme = call_607900.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607900.url(scheme.get, call_607900.host, call_607900.base,
                         call_607900.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607900, url, valid)

proc call*(call_607901: Call_GetModifyDBCluster_607873;
          DBClusterIdentifier: string; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false; EngineVersion: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## getModifyDBCluster
  ## Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_607902 = newJObject()
  add(query_607902, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607902, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_607902.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_607902.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_607902, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_607902, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_607902, "EngineVersion", newJString(EngineVersion))
  add(query_607902, "Action", newJString(Action))
  add(query_607902, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_607902, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_607902, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_607902.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_607902, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_607902, "OptionGroupName", newJString(OptionGroupName))
  add(query_607902, "Version", newJString(Version))
  add(query_607902, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_607902, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_607901.call(nil, query_607902, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_607873(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_607874,
    base: "/", url: url_GetModifyDBCluster_607875,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_607951 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBClusterParameterGroup_607953(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_607952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607954 = query.getOrDefault("Action")
  valid_607954 = validateParameter(valid_607954, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_607954 != nil:
    section.add "Action", valid_607954
  var valid_607955 = query.getOrDefault("Version")
  valid_607955 = validateParameter(valid_607955, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607955 != nil:
    section.add "Version", valid_607955
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607956 = header.getOrDefault("X-Amz-Signature")
  valid_607956 = validateParameter(valid_607956, JString, required = false,
                                 default = nil)
  if valid_607956 != nil:
    section.add "X-Amz-Signature", valid_607956
  var valid_607957 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607957 = validateParameter(valid_607957, JString, required = false,
                                 default = nil)
  if valid_607957 != nil:
    section.add "X-Amz-Content-Sha256", valid_607957
  var valid_607958 = header.getOrDefault("X-Amz-Date")
  valid_607958 = validateParameter(valid_607958, JString, required = false,
                                 default = nil)
  if valid_607958 != nil:
    section.add "X-Amz-Date", valid_607958
  var valid_607959 = header.getOrDefault("X-Amz-Credential")
  valid_607959 = validateParameter(valid_607959, JString, required = false,
                                 default = nil)
  if valid_607959 != nil:
    section.add "X-Amz-Credential", valid_607959
  var valid_607960 = header.getOrDefault("X-Amz-Security-Token")
  valid_607960 = validateParameter(valid_607960, JString, required = false,
                                 default = nil)
  if valid_607960 != nil:
    section.add "X-Amz-Security-Token", valid_607960
  var valid_607961 = header.getOrDefault("X-Amz-Algorithm")
  valid_607961 = validateParameter(valid_607961, JString, required = false,
                                 default = nil)
  if valid_607961 != nil:
    section.add "X-Amz-Algorithm", valid_607961
  var valid_607962 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607962 = validateParameter(valid_607962, JString, required = false,
                                 default = nil)
  if valid_607962 != nil:
    section.add "X-Amz-SignedHeaders", valid_607962
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_607963 = formData.getOrDefault("Parameters")
  valid_607963 = validateParameter(valid_607963, JArray, required = true, default = nil)
  if valid_607963 != nil:
    section.add "Parameters", valid_607963
  var valid_607964 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607964 = validateParameter(valid_607964, JString, required = true,
                                 default = nil)
  if valid_607964 != nil:
    section.add "DBClusterParameterGroupName", valid_607964
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607965: Call_PostModifyDBClusterParameterGroup_607951;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_607965.validator(path, query, header, formData, body)
  let scheme = call_607965.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607965.url(scheme.get, call_607965.host, call_607965.base,
                         call_607965.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607965, url, valid)

proc call*(call_607966: Call_PostModifyDBClusterParameterGroup_607951;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_607967 = newJObject()
  var formData_607968 = newJObject()
  add(query_607967, "Action", newJString(Action))
  if Parameters != nil:
    formData_607968.add "Parameters", Parameters
  add(formData_607968, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607967, "Version", newJString(Version))
  result = call_607966.call(nil, query_607967, nil, formData_607968, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_607951(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_607952, base: "/",
    url: url_PostModifyDBClusterParameterGroup_607953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_607934 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBClusterParameterGroup_607936(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_607935(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_607937 = query.getOrDefault("Parameters")
  valid_607937 = validateParameter(valid_607937, JArray, required = true, default = nil)
  if valid_607937 != nil:
    section.add "Parameters", valid_607937
  var valid_607938 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607938 = validateParameter(valid_607938, JString, required = true,
                                 default = nil)
  if valid_607938 != nil:
    section.add "DBClusterParameterGroupName", valid_607938
  var valid_607939 = query.getOrDefault("Action")
  valid_607939 = validateParameter(valid_607939, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_607939 != nil:
    section.add "Action", valid_607939
  var valid_607940 = query.getOrDefault("Version")
  valid_607940 = validateParameter(valid_607940, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607940 != nil:
    section.add "Version", valid_607940
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607941 = header.getOrDefault("X-Amz-Signature")
  valid_607941 = validateParameter(valid_607941, JString, required = false,
                                 default = nil)
  if valid_607941 != nil:
    section.add "X-Amz-Signature", valid_607941
  var valid_607942 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607942 = validateParameter(valid_607942, JString, required = false,
                                 default = nil)
  if valid_607942 != nil:
    section.add "X-Amz-Content-Sha256", valid_607942
  var valid_607943 = header.getOrDefault("X-Amz-Date")
  valid_607943 = validateParameter(valid_607943, JString, required = false,
                                 default = nil)
  if valid_607943 != nil:
    section.add "X-Amz-Date", valid_607943
  var valid_607944 = header.getOrDefault("X-Amz-Credential")
  valid_607944 = validateParameter(valid_607944, JString, required = false,
                                 default = nil)
  if valid_607944 != nil:
    section.add "X-Amz-Credential", valid_607944
  var valid_607945 = header.getOrDefault("X-Amz-Security-Token")
  valid_607945 = validateParameter(valid_607945, JString, required = false,
                                 default = nil)
  if valid_607945 != nil:
    section.add "X-Amz-Security-Token", valid_607945
  var valid_607946 = header.getOrDefault("X-Amz-Algorithm")
  valid_607946 = validateParameter(valid_607946, JString, required = false,
                                 default = nil)
  if valid_607946 != nil:
    section.add "X-Amz-Algorithm", valid_607946
  var valid_607947 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607947 = validateParameter(valid_607947, JString, required = false,
                                 default = nil)
  if valid_607947 != nil:
    section.add "X-Amz-SignedHeaders", valid_607947
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607948: Call_GetModifyDBClusterParameterGroup_607934;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_607948.validator(path, query, header, formData, body)
  let scheme = call_607948.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607948.url(scheme.get, call_607948.host, call_607948.base,
                         call_607948.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607948, url, valid)

proc call*(call_607949: Call_GetModifyDBClusterParameterGroup_607934;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607950 = newJObject()
  if Parameters != nil:
    query_607950.add "Parameters", Parameters
  add(query_607950, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607950, "Action", newJString(Action))
  add(query_607950, "Version", newJString(Version))
  result = call_607949.call(nil, query_607950, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_607934(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_607935, base: "/",
    url: url_GetModifyDBClusterParameterGroup_607936,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_607988 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBClusterSnapshotAttribute_607990(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_607989(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607991 = query.getOrDefault("Action")
  valid_607991 = validateParameter(valid_607991, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_607991 != nil:
    section.add "Action", valid_607991
  var valid_607992 = query.getOrDefault("Version")
  valid_607992 = validateParameter(valid_607992, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607992 != nil:
    section.add "Version", valid_607992
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607993 = header.getOrDefault("X-Amz-Signature")
  valid_607993 = validateParameter(valid_607993, JString, required = false,
                                 default = nil)
  if valid_607993 != nil:
    section.add "X-Amz-Signature", valid_607993
  var valid_607994 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607994 = validateParameter(valid_607994, JString, required = false,
                                 default = nil)
  if valid_607994 != nil:
    section.add "X-Amz-Content-Sha256", valid_607994
  var valid_607995 = header.getOrDefault("X-Amz-Date")
  valid_607995 = validateParameter(valid_607995, JString, required = false,
                                 default = nil)
  if valid_607995 != nil:
    section.add "X-Amz-Date", valid_607995
  var valid_607996 = header.getOrDefault("X-Amz-Credential")
  valid_607996 = validateParameter(valid_607996, JString, required = false,
                                 default = nil)
  if valid_607996 != nil:
    section.add "X-Amz-Credential", valid_607996
  var valid_607997 = header.getOrDefault("X-Amz-Security-Token")
  valid_607997 = validateParameter(valid_607997, JString, required = false,
                                 default = nil)
  if valid_607997 != nil:
    section.add "X-Amz-Security-Token", valid_607997
  var valid_607998 = header.getOrDefault("X-Amz-Algorithm")
  valid_607998 = validateParameter(valid_607998, JString, required = false,
                                 default = nil)
  if valid_607998 != nil:
    section.add "X-Amz-Algorithm", valid_607998
  var valid_607999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-SignedHeaders", valid_607999
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_608000 = formData.getOrDefault("AttributeName")
  valid_608000 = validateParameter(valid_608000, JString, required = true,
                                 default = nil)
  if valid_608000 != nil:
    section.add "AttributeName", valid_608000
  var valid_608001 = formData.getOrDefault("ValuesToAdd")
  valid_608001 = validateParameter(valid_608001, JArray, required = false,
                                 default = nil)
  if valid_608001 != nil:
    section.add "ValuesToAdd", valid_608001
  var valid_608002 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608002 = validateParameter(valid_608002, JString, required = true,
                                 default = nil)
  if valid_608002 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608002
  var valid_608003 = formData.getOrDefault("ValuesToRemove")
  valid_608003 = validateParameter(valid_608003, JArray, required = false,
                                 default = nil)
  if valid_608003 != nil:
    section.add "ValuesToRemove", valid_608003
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608004: Call_PostModifyDBClusterSnapshotAttribute_607988;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_608004.validator(path, query, header, formData, body)
  let scheme = call_608004.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608004.url(scheme.get, call_608004.host, call_608004.base,
                         call_608004.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608004, url, valid)

proc call*(call_608005: Call_PostModifyDBClusterSnapshotAttribute_607988;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_608006 = newJObject()
  var formData_608007 = newJObject()
  add(formData_608007, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_608007.add "ValuesToAdd", ValuesToAdd
  add(formData_608007, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608006, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_608007.add "ValuesToRemove", ValuesToRemove
  add(query_608006, "Version", newJString(Version))
  result = call_608005.call(nil, query_608006, nil, formData_608007, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_607988(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_607989, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_607990,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_607969 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBClusterSnapshotAttribute_607971(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_607970(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_607972 = query.getOrDefault("ValuesToRemove")
  valid_607972 = validateParameter(valid_607972, JArray, required = false,
                                 default = nil)
  if valid_607972 != nil:
    section.add "ValuesToRemove", valid_607972
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607973 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607973 = validateParameter(valid_607973, JString, required = true,
                                 default = nil)
  if valid_607973 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607973
  var valid_607974 = query.getOrDefault("Action")
  valid_607974 = validateParameter(valid_607974, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_607974 != nil:
    section.add "Action", valid_607974
  var valid_607975 = query.getOrDefault("AttributeName")
  valid_607975 = validateParameter(valid_607975, JString, required = true,
                                 default = nil)
  if valid_607975 != nil:
    section.add "AttributeName", valid_607975
  var valid_607976 = query.getOrDefault("ValuesToAdd")
  valid_607976 = validateParameter(valid_607976, JArray, required = false,
                                 default = nil)
  if valid_607976 != nil:
    section.add "ValuesToAdd", valid_607976
  var valid_607977 = query.getOrDefault("Version")
  valid_607977 = validateParameter(valid_607977, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607977 != nil:
    section.add "Version", valid_607977
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607978 = header.getOrDefault("X-Amz-Signature")
  valid_607978 = validateParameter(valid_607978, JString, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "X-Amz-Signature", valid_607978
  var valid_607979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607979 = validateParameter(valid_607979, JString, required = false,
                                 default = nil)
  if valid_607979 != nil:
    section.add "X-Amz-Content-Sha256", valid_607979
  var valid_607980 = header.getOrDefault("X-Amz-Date")
  valid_607980 = validateParameter(valid_607980, JString, required = false,
                                 default = nil)
  if valid_607980 != nil:
    section.add "X-Amz-Date", valid_607980
  var valid_607981 = header.getOrDefault("X-Amz-Credential")
  valid_607981 = validateParameter(valid_607981, JString, required = false,
                                 default = nil)
  if valid_607981 != nil:
    section.add "X-Amz-Credential", valid_607981
  var valid_607982 = header.getOrDefault("X-Amz-Security-Token")
  valid_607982 = validateParameter(valid_607982, JString, required = false,
                                 default = nil)
  if valid_607982 != nil:
    section.add "X-Amz-Security-Token", valid_607982
  var valid_607983 = header.getOrDefault("X-Amz-Algorithm")
  valid_607983 = validateParameter(valid_607983, JString, required = false,
                                 default = nil)
  if valid_607983 != nil:
    section.add "X-Amz-Algorithm", valid_607983
  var valid_607984 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607984 = validateParameter(valid_607984, JString, required = false,
                                 default = nil)
  if valid_607984 != nil:
    section.add "X-Amz-SignedHeaders", valid_607984
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607985: Call_GetModifyDBClusterSnapshotAttribute_607969;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ## 
  let valid = call_607985.validator(path, query, header, formData, body)
  let scheme = call_607985.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607985.url(scheme.get, call_607985.host, call_607985.base,
                         call_607985.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607985, url, valid)

proc call*(call_607986: Call_GetModifyDBClusterSnapshotAttribute_607969;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_607987 = newJObject()
  if ValuesToRemove != nil:
    query_607987.add "ValuesToRemove", ValuesToRemove
  add(query_607987, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607987, "Action", newJString(Action))
  add(query_607987, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_607987.add "ValuesToAdd", ValuesToAdd
  add(query_607987, "Version", newJString(Version))
  result = call_607986.call(nil, query_607987, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_607969(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_607970, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_607971,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_608060 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBInstance_608062(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_608061(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608063 = query.getOrDefault("Action")
  valid_608063 = validateParameter(valid_608063, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_608063 != nil:
    section.add "Action", valid_608063
  var valid_608064 = query.getOrDefault("Version")
  valid_608064 = validateParameter(valid_608064, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608064 != nil:
    section.add "Version", valid_608064
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_608065 = header.getOrDefault("X-Amz-Security-Token")
  valid_608065 = validateParameter(valid_608065, JString, required = false,
                                 default = nil)
  if valid_608065 != nil:
    section.add "X-Amz-Security-Token", valid_608065
  var valid_608066 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608066 = validateParameter(valid_608066, JString, required = false,
                                 default = nil)
  if valid_608066 != nil:
    section.add "X-Amz-SignedHeaders", valid_608066
  var valid_608067 = header.getOrDefault("X-Amz-Signature")
  valid_608067 = validateParameter(valid_608067, JString, required = false,
                                 default = nil)
  if valid_608067 != nil:
    section.add "X-Amz-Signature", valid_608067
  var valid_608068 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608068 = validateParameter(valid_608068, JString, required = false,
                                 default = nil)
  if valid_608068 != nil:
    section.add "X-Amz-Content-Sha256", valid_608068
  var valid_608069 = header.getOrDefault("X-Amz-Date")
  valid_608069 = validateParameter(valid_608069, JString, required = false,
                                 default = nil)
  if valid_608069 != nil:
    section.add "X-Amz-Date", valid_608069
  var valid_608070 = header.getOrDefault("X-Amz-Credential")
  valid_608070 = validateParameter(valid_608070, JString, required = false,
                                 default = nil)
  if valid_608070 != nil:
    section.add "X-Amz-Credential", valid_608070
  var valid_608071 = header.getOrDefault("X-Amz-Algorithm")
  valid_608071 = validateParameter(valid_608071, JString, required = false,
                                 default = nil)
  if valid_608071 != nil:
    section.add "X-Amz-Algorithm", valid_608071
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   StorageType: JString
  ##              : Not supported.
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : Not supported.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : Not supported.
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  section = newJObject()
  var valid_608072 = formData.getOrDefault("PromotionTier")
  valid_608072 = validateParameter(valid_608072, JInt, required = false, default = nil)
  if valid_608072 != nil:
    section.add "PromotionTier", valid_608072
  var valid_608073 = formData.getOrDefault("MultiAZ")
  valid_608073 = validateParameter(valid_608073, JBool, required = false, default = nil)
  if valid_608073 != nil:
    section.add "MultiAZ", valid_608073
  var valid_608074 = formData.getOrDefault("MonitoringRoleArn")
  valid_608074 = validateParameter(valid_608074, JString, required = false,
                                 default = nil)
  if valid_608074 != nil:
    section.add "MonitoringRoleArn", valid_608074
  var valid_608075 = formData.getOrDefault("CACertificateIdentifier")
  valid_608075 = validateParameter(valid_608075, JString, required = false,
                                 default = nil)
  if valid_608075 != nil:
    section.add "CACertificateIdentifier", valid_608075
  var valid_608076 = formData.getOrDefault("MonitoringInterval")
  valid_608076 = validateParameter(valid_608076, JInt, required = false, default = nil)
  if valid_608076 != nil:
    section.add "MonitoringInterval", valid_608076
  var valid_608077 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608077 = validateParameter(valid_608077, JArray, required = false,
                                 default = nil)
  if valid_608077 != nil:
    section.add "VpcSecurityGroupIds", valid_608077
  var valid_608078 = formData.getOrDefault("EnablePerformanceInsights")
  valid_608078 = validateParameter(valid_608078, JBool, required = false, default = nil)
  if valid_608078 != nil:
    section.add "EnablePerformanceInsights", valid_608078
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608079 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608079 = validateParameter(valid_608079, JString, required = true,
                                 default = nil)
  if valid_608079 != nil:
    section.add "DBInstanceIdentifier", valid_608079
  var valid_608080 = formData.getOrDefault("TdeCredentialArn")
  valid_608080 = validateParameter(valid_608080, JString, required = false,
                                 default = nil)
  if valid_608080 != nil:
    section.add "TdeCredentialArn", valid_608080
  var valid_608081 = formData.getOrDefault("DBSubnetGroupName")
  valid_608081 = validateParameter(valid_608081, JString, required = false,
                                 default = nil)
  if valid_608081 != nil:
    section.add "DBSubnetGroupName", valid_608081
  var valid_608082 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_608082 = validateParameter(valid_608082, JBool, required = false, default = nil)
  if valid_608082 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608082
  var valid_608083 = formData.getOrDefault("StorageType")
  valid_608083 = validateParameter(valid_608083, JString, required = false,
                                 default = nil)
  if valid_608083 != nil:
    section.add "StorageType", valid_608083
  var valid_608084 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_608084 = validateParameter(valid_608084, JBool, required = false, default = nil)
  if valid_608084 != nil:
    section.add "CopyTagsToSnapshot", valid_608084
  var valid_608085 = formData.getOrDefault("AllocatedStorage")
  valid_608085 = validateParameter(valid_608085, JInt, required = false, default = nil)
  if valid_608085 != nil:
    section.add "AllocatedStorage", valid_608085
  var valid_608086 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_608086 = validateParameter(valid_608086, JString, required = false,
                                 default = nil)
  if valid_608086 != nil:
    section.add "PreferredMaintenanceWindow", valid_608086
  var valid_608087 = formData.getOrDefault("DBInstanceClass")
  valid_608087 = validateParameter(valid_608087, JString, required = false,
                                 default = nil)
  if valid_608087 != nil:
    section.add "DBInstanceClass", valid_608087
  var valid_608088 = formData.getOrDefault("PreferredBackupWindow")
  valid_608088 = validateParameter(valid_608088, JString, required = false,
                                 default = nil)
  if valid_608088 != nil:
    section.add "PreferredBackupWindow", valid_608088
  var valid_608089 = formData.getOrDefault("MasterUserPassword")
  valid_608089 = validateParameter(valid_608089, JString, required = false,
                                 default = nil)
  if valid_608089 != nil:
    section.add "MasterUserPassword", valid_608089
  var valid_608090 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608090 = validateParameter(valid_608090, JArray, required = false,
                                 default = nil)
  if valid_608090 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608090
  var valid_608091 = formData.getOrDefault("Domain")
  valid_608091 = validateParameter(valid_608091, JString, required = false,
                                 default = nil)
  if valid_608091 != nil:
    section.add "Domain", valid_608091
  var valid_608092 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608092 = validateParameter(valid_608092, JArray, required = false,
                                 default = nil)
  if valid_608092 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608092
  var valid_608093 = formData.getOrDefault("DBParameterGroupName")
  valid_608093 = validateParameter(valid_608093, JString, required = false,
                                 default = nil)
  if valid_608093 != nil:
    section.add "DBParameterGroupName", valid_608093
  var valid_608094 = formData.getOrDefault("EngineVersion")
  valid_608094 = validateParameter(valid_608094, JString, required = false,
                                 default = nil)
  if valid_608094 != nil:
    section.add "EngineVersion", valid_608094
  var valid_608095 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608095 = validateParameter(valid_608095, JBool, required = false, default = nil)
  if valid_608095 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608095
  var valid_608096 = formData.getOrDefault("BackupRetentionPeriod")
  valid_608096 = validateParameter(valid_608096, JInt, required = false, default = nil)
  if valid_608096 != nil:
    section.add "BackupRetentionPeriod", valid_608096
  var valid_608097 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_608097 = validateParameter(valid_608097, JBool, required = false, default = nil)
  if valid_608097 != nil:
    section.add "AutoMinorVersionUpgrade", valid_608097
  var valid_608098 = formData.getOrDefault("TdeCredentialPassword")
  valid_608098 = validateParameter(valid_608098, JString, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "TdeCredentialPassword", valid_608098
  var valid_608099 = formData.getOrDefault("ApplyImmediately")
  valid_608099 = validateParameter(valid_608099, JBool, required = false, default = nil)
  if valid_608099 != nil:
    section.add "ApplyImmediately", valid_608099
  var valid_608100 = formData.getOrDefault("Iops")
  valid_608100 = validateParameter(valid_608100, JInt, required = false, default = nil)
  if valid_608100 != nil:
    section.add "Iops", valid_608100
  var valid_608101 = formData.getOrDefault("PubliclyAccessible")
  valid_608101 = validateParameter(valid_608101, JBool, required = false, default = nil)
  if valid_608101 != nil:
    section.add "PubliclyAccessible", valid_608101
  var valid_608102 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_608102 = validateParameter(valid_608102, JString, required = false,
                                 default = nil)
  if valid_608102 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_608102
  var valid_608103 = formData.getOrDefault("LicenseModel")
  valid_608103 = validateParameter(valid_608103, JString, required = false,
                                 default = nil)
  if valid_608103 != nil:
    section.add "LicenseModel", valid_608103
  var valid_608104 = formData.getOrDefault("DomainIAMRoleName")
  valid_608104 = validateParameter(valid_608104, JString, required = false,
                                 default = nil)
  if valid_608104 != nil:
    section.add "DomainIAMRoleName", valid_608104
  var valid_608105 = formData.getOrDefault("OptionGroupName")
  valid_608105 = validateParameter(valid_608105, JString, required = false,
                                 default = nil)
  if valid_608105 != nil:
    section.add "OptionGroupName", valid_608105
  var valid_608106 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_608106 = validateParameter(valid_608106, JString, required = false,
                                 default = nil)
  if valid_608106 != nil:
    section.add "NewDBInstanceIdentifier", valid_608106
  var valid_608107 = formData.getOrDefault("DBSecurityGroups")
  valid_608107 = validateParameter(valid_608107, JArray, required = false,
                                 default = nil)
  if valid_608107 != nil:
    section.add "DBSecurityGroups", valid_608107
  var valid_608108 = formData.getOrDefault("DBPortNumber")
  valid_608108 = validateParameter(valid_608108, JInt, required = false, default = nil)
  if valid_608108 != nil:
    section.add "DBPortNumber", valid_608108
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608109: Call_PostModifyDBInstance_608060; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_608109.validator(path, query, header, formData, body)
  let scheme = call_608109.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608109.url(scheme.get, call_608109.host, call_608109.base,
                         call_608109.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608109, url, valid)

proc call*(call_608110: Call_PostModifyDBInstance_608060;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance"; DBSubnetGroupName: string = "";
          AllowMajorVersionUpgrade: bool = false; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = ""; DBInstanceClass: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   StorageType: string
  ##              : Not supported.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : Not supported.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : Not supported.
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  var query_608111 = newJObject()
  var formData_608112 = newJObject()
  add(formData_608112, "PromotionTier", newJInt(PromotionTier))
  add(formData_608112, "MultiAZ", newJBool(MultiAZ))
  add(formData_608112, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_608112, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_608112, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_608112.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608112, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_608112, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_608112, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_608111, "Action", newJString(Action))
  add(formData_608112, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608112, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_608112, "StorageType", newJString(StorageType))
  add(formData_608112, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_608112, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_608112, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_608112, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_608112, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_608112, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_608112.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_608112, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_608112.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_608112, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_608112, "EngineVersion", newJString(EngineVersion))
  add(formData_608112, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_608112, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_608112, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_608112, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_608112, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_608112, "Iops", newJInt(Iops))
  add(formData_608112, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_608112, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_608112, "LicenseModel", newJString(LicenseModel))
  add(formData_608112, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_608112, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608112, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_608111, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_608112.add "DBSecurityGroups", DBSecurityGroups
  add(formData_608112, "DBPortNumber", newJInt(DBPortNumber))
  result = call_608110.call(nil, query_608111, nil, formData_608112, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_608060(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_608061, base: "/",
    url: url_PostModifyDBInstance_608062, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_608008 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBInstance_608010(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_608009(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CopyTagsToSnapshot: JBool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : Not supported.
  ##   PubliclyAccessible: JBool
  ##                     : This flag should no longer be used.
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   LicenseModel: JString
  ##               : Not supported.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: JBool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : Not applicable.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : Not supported.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   DomainIAMRoleName: JString
  ##                    : Not supported
  section = newJObject()
  var valid_608011 = query.getOrDefault("CopyTagsToSnapshot")
  valid_608011 = validateParameter(valid_608011, JBool, required = false, default = nil)
  if valid_608011 != nil:
    section.add "CopyTagsToSnapshot", valid_608011
  var valid_608012 = query.getOrDefault("MonitoringInterval")
  valid_608012 = validateParameter(valid_608012, JInt, required = false, default = nil)
  if valid_608012 != nil:
    section.add "MonitoringInterval", valid_608012
  var valid_608013 = query.getOrDefault("MonitoringRoleArn")
  valid_608013 = validateParameter(valid_608013, JString, required = false,
                                 default = nil)
  if valid_608013 != nil:
    section.add "MonitoringRoleArn", valid_608013
  var valid_608014 = query.getOrDefault("DBPortNumber")
  valid_608014 = validateParameter(valid_608014, JInt, required = false, default = nil)
  if valid_608014 != nil:
    section.add "DBPortNumber", valid_608014
  var valid_608015 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608015 = validateParameter(valid_608015, JArray, required = false,
                                 default = nil)
  if valid_608015 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608015
  var valid_608016 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608016 = validateParameter(valid_608016, JArray, required = false,
                                 default = nil)
  if valid_608016 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608016
  var valid_608017 = query.getOrDefault("BackupRetentionPeriod")
  valid_608017 = validateParameter(valid_608017, JInt, required = false, default = nil)
  if valid_608017 != nil:
    section.add "BackupRetentionPeriod", valid_608017
  var valid_608018 = query.getOrDefault("EngineVersion")
  valid_608018 = validateParameter(valid_608018, JString, required = false,
                                 default = nil)
  if valid_608018 != nil:
    section.add "EngineVersion", valid_608018
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608019 = query.getOrDefault("Action")
  valid_608019 = validateParameter(valid_608019, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_608019 != nil:
    section.add "Action", valid_608019
  var valid_608020 = query.getOrDefault("Domain")
  valid_608020 = validateParameter(valid_608020, JString, required = false,
                                 default = nil)
  if valid_608020 != nil:
    section.add "Domain", valid_608020
  var valid_608021 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608021 = validateParameter(valid_608021, JArray, required = false,
                                 default = nil)
  if valid_608021 != nil:
    section.add "VpcSecurityGroupIds", valid_608021
  var valid_608022 = query.getOrDefault("AllocatedStorage")
  valid_608022 = validateParameter(valid_608022, JInt, required = false, default = nil)
  if valid_608022 != nil:
    section.add "AllocatedStorage", valid_608022
  var valid_608023 = query.getOrDefault("EnablePerformanceInsights")
  valid_608023 = validateParameter(valid_608023, JBool, required = false, default = nil)
  if valid_608023 != nil:
    section.add "EnablePerformanceInsights", valid_608023
  var valid_608024 = query.getOrDefault("PubliclyAccessible")
  valid_608024 = validateParameter(valid_608024, JBool, required = false, default = nil)
  if valid_608024 != nil:
    section.add "PubliclyAccessible", valid_608024
  var valid_608025 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_608025 = validateParameter(valid_608025, JString, required = false,
                                 default = nil)
  if valid_608025 != nil:
    section.add "NewDBInstanceIdentifier", valid_608025
  var valid_608026 = query.getOrDefault("TdeCredentialPassword")
  valid_608026 = validateParameter(valid_608026, JString, required = false,
                                 default = nil)
  if valid_608026 != nil:
    section.add "TdeCredentialPassword", valid_608026
  var valid_608027 = query.getOrDefault("DBParameterGroupName")
  valid_608027 = validateParameter(valid_608027, JString, required = false,
                                 default = nil)
  if valid_608027 != nil:
    section.add "DBParameterGroupName", valid_608027
  var valid_608028 = query.getOrDefault("LicenseModel")
  valid_608028 = validateParameter(valid_608028, JString, required = false,
                                 default = nil)
  if valid_608028 != nil:
    section.add "LicenseModel", valid_608028
  var valid_608029 = query.getOrDefault("DBInstanceIdentifier")
  valid_608029 = validateParameter(valid_608029, JString, required = true,
                                 default = nil)
  if valid_608029 != nil:
    section.add "DBInstanceIdentifier", valid_608029
  var valid_608030 = query.getOrDefault("TdeCredentialArn")
  valid_608030 = validateParameter(valid_608030, JString, required = false,
                                 default = nil)
  if valid_608030 != nil:
    section.add "TdeCredentialArn", valid_608030
  var valid_608031 = query.getOrDefault("PromotionTier")
  valid_608031 = validateParameter(valid_608031, JInt, required = false, default = nil)
  if valid_608031 != nil:
    section.add "PromotionTier", valid_608031
  var valid_608032 = query.getOrDefault("CACertificateIdentifier")
  valid_608032 = validateParameter(valid_608032, JString, required = false,
                                 default = nil)
  if valid_608032 != nil:
    section.add "CACertificateIdentifier", valid_608032
  var valid_608033 = query.getOrDefault("StorageType")
  valid_608033 = validateParameter(valid_608033, JString, required = false,
                                 default = nil)
  if valid_608033 != nil:
    section.add "StorageType", valid_608033
  var valid_608034 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608034 = validateParameter(valid_608034, JBool, required = false, default = nil)
  if valid_608034 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608034
  var valid_608035 = query.getOrDefault("MultiAZ")
  valid_608035 = validateParameter(valid_608035, JBool, required = false, default = nil)
  if valid_608035 != nil:
    section.add "MultiAZ", valid_608035
  var valid_608036 = query.getOrDefault("DBSecurityGroups")
  valid_608036 = validateParameter(valid_608036, JArray, required = false,
                                 default = nil)
  if valid_608036 != nil:
    section.add "DBSecurityGroups", valid_608036
  var valid_608037 = query.getOrDefault("ApplyImmediately")
  valid_608037 = validateParameter(valid_608037, JBool, required = false, default = nil)
  if valid_608037 != nil:
    section.add "ApplyImmediately", valid_608037
  var valid_608038 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_608038 = validateParameter(valid_608038, JBool, required = false, default = nil)
  if valid_608038 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608038
  var valid_608039 = query.getOrDefault("MasterUserPassword")
  valid_608039 = validateParameter(valid_608039, JString, required = false,
                                 default = nil)
  if valid_608039 != nil:
    section.add "MasterUserPassword", valid_608039
  var valid_608040 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_608040 = validateParameter(valid_608040, JString, required = false,
                                 default = nil)
  if valid_608040 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_608040
  var valid_608041 = query.getOrDefault("OptionGroupName")
  valid_608041 = validateParameter(valid_608041, JString, required = false,
                                 default = nil)
  if valid_608041 != nil:
    section.add "OptionGroupName", valid_608041
  var valid_608042 = query.getOrDefault("Version")
  valid_608042 = validateParameter(valid_608042, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608042 != nil:
    section.add "Version", valid_608042
  var valid_608043 = query.getOrDefault("DBSubnetGroupName")
  valid_608043 = validateParameter(valid_608043, JString, required = false,
                                 default = nil)
  if valid_608043 != nil:
    section.add "DBSubnetGroupName", valid_608043
  var valid_608044 = query.getOrDefault("DBInstanceClass")
  valid_608044 = validateParameter(valid_608044, JString, required = false,
                                 default = nil)
  if valid_608044 != nil:
    section.add "DBInstanceClass", valid_608044
  var valid_608045 = query.getOrDefault("PreferredBackupWindow")
  valid_608045 = validateParameter(valid_608045, JString, required = false,
                                 default = nil)
  if valid_608045 != nil:
    section.add "PreferredBackupWindow", valid_608045
  var valid_608046 = query.getOrDefault("Iops")
  valid_608046 = validateParameter(valid_608046, JInt, required = false, default = nil)
  if valid_608046 != nil:
    section.add "Iops", valid_608046
  var valid_608047 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_608047 = validateParameter(valid_608047, JString, required = false,
                                 default = nil)
  if valid_608047 != nil:
    section.add "PreferredMaintenanceWindow", valid_608047
  var valid_608048 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_608048 = validateParameter(valid_608048, JBool, required = false, default = nil)
  if valid_608048 != nil:
    section.add "AutoMinorVersionUpgrade", valid_608048
  var valid_608049 = query.getOrDefault("DomainIAMRoleName")
  valid_608049 = validateParameter(valid_608049, JString, required = false,
                                 default = nil)
  if valid_608049 != nil:
    section.add "DomainIAMRoleName", valid_608049
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_608050 = header.getOrDefault("X-Amz-Security-Token")
  valid_608050 = validateParameter(valid_608050, JString, required = false,
                                 default = nil)
  if valid_608050 != nil:
    section.add "X-Amz-Security-Token", valid_608050
  var valid_608051 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608051 = validateParameter(valid_608051, JString, required = false,
                                 default = nil)
  if valid_608051 != nil:
    section.add "X-Amz-SignedHeaders", valid_608051
  var valid_608052 = header.getOrDefault("X-Amz-Signature")
  valid_608052 = validateParameter(valid_608052, JString, required = false,
                                 default = nil)
  if valid_608052 != nil:
    section.add "X-Amz-Signature", valid_608052
  var valid_608053 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608053 = validateParameter(valid_608053, JString, required = false,
                                 default = nil)
  if valid_608053 != nil:
    section.add "X-Amz-Content-Sha256", valid_608053
  var valid_608054 = header.getOrDefault("X-Amz-Date")
  valid_608054 = validateParameter(valid_608054, JString, required = false,
                                 default = nil)
  if valid_608054 != nil:
    section.add "X-Amz-Date", valid_608054
  var valid_608055 = header.getOrDefault("X-Amz-Credential")
  valid_608055 = validateParameter(valid_608055, JString, required = false,
                                 default = nil)
  if valid_608055 != nil:
    section.add "X-Amz-Credential", valid_608055
  var valid_608056 = header.getOrDefault("X-Amz-Algorithm")
  valid_608056 = validateParameter(valid_608056, JString, required = false,
                                 default = nil)
  if valid_608056 != nil:
    section.add "X-Amz-Algorithm", valid_608056
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608057: Call_GetModifyDBInstance_608008; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ## 
  let valid = call_608057.validator(path, query, header, formData, body)
  let scheme = call_608057.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608057.url(scheme.get, call_608057.host, call_608057.base,
                         call_608057.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608057, url, valid)

proc call*(call_608058: Call_GetModifyDBInstance_608008;
          DBInstanceIdentifier: string; CopyTagsToSnapshot: bool = false;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0; EngineVersion: string = "";
          Action: string = "ModifyDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          DBParameterGroupName: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          CACertificateIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; ApplyImmediately: bool = false;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          PerformanceInsightsKMSKeyId: string = ""; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSubnetGroupName: string = "";
          DBInstanceClass: string = ""; PreferredBackupWindow: string = "";
          Iops: int = 0; PreferredMaintenanceWindow: string = "";
          AutoMinorVersionUpgrade: bool = false; DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
  ##   CopyTagsToSnapshot: bool
  ##                     : True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p>
  ##   EnablePerformanceInsights: bool
  ##                            : Not supported.
  ##   PubliclyAccessible: bool
  ##                     : This flag should no longer be used.
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   LicenseModel: string
  ##               : Not supported.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : Not supported.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p>
  ##   MultiAZ: bool
  ##          : Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : Not applicable.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : Not supported.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.
  ##   DomainIAMRoleName: string
  ##                    : Not supported
  var query_608059 = newJObject()
  add(query_608059, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_608059, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_608059, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_608059, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_608059.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_608059.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_608059, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_608059, "EngineVersion", newJString(EngineVersion))
  add(query_608059, "Action", newJString(Action))
  add(query_608059, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_608059.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608059, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_608059, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_608059, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_608059, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_608059, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_608059, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608059, "LicenseModel", newJString(LicenseModel))
  add(query_608059, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608059, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_608059, "PromotionTier", newJInt(PromotionTier))
  add(query_608059, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_608059, "StorageType", newJString(StorageType))
  add(query_608059, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_608059, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_608059.add "DBSecurityGroups", DBSecurityGroups
  add(query_608059, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_608059, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_608059, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_608059, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_608059, "OptionGroupName", newJString(OptionGroupName))
  add(query_608059, "Version", newJString(Version))
  add(query_608059, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608059, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_608059, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_608059, "Iops", newJInt(Iops))
  add(query_608059, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_608059, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_608059, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_608058.call(nil, query_608059, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_608008(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_608009, base: "/",
    url: url_GetModifyDBInstance_608010, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_608130 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBParameterGroup_608132(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_608131(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608133 = query.getOrDefault("Action")
  valid_608133 = validateParameter(valid_608133, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_608133 != nil:
    section.add "Action", valid_608133
  var valid_608134 = query.getOrDefault("Version")
  valid_608134 = validateParameter(valid_608134, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608134 != nil:
    section.add "Version", valid_608134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608135 = header.getOrDefault("X-Amz-Signature")
  valid_608135 = validateParameter(valid_608135, JString, required = false,
                                 default = nil)
  if valid_608135 != nil:
    section.add "X-Amz-Signature", valid_608135
  var valid_608136 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608136 = validateParameter(valid_608136, JString, required = false,
                                 default = nil)
  if valid_608136 != nil:
    section.add "X-Amz-Content-Sha256", valid_608136
  var valid_608137 = header.getOrDefault("X-Amz-Date")
  valid_608137 = validateParameter(valid_608137, JString, required = false,
                                 default = nil)
  if valid_608137 != nil:
    section.add "X-Amz-Date", valid_608137
  var valid_608138 = header.getOrDefault("X-Amz-Credential")
  valid_608138 = validateParameter(valid_608138, JString, required = false,
                                 default = nil)
  if valid_608138 != nil:
    section.add "X-Amz-Credential", valid_608138
  var valid_608139 = header.getOrDefault("X-Amz-Security-Token")
  valid_608139 = validateParameter(valid_608139, JString, required = false,
                                 default = nil)
  if valid_608139 != nil:
    section.add "X-Amz-Security-Token", valid_608139
  var valid_608140 = header.getOrDefault("X-Amz-Algorithm")
  valid_608140 = validateParameter(valid_608140, JString, required = false,
                                 default = nil)
  if valid_608140 != nil:
    section.add "X-Amz-Algorithm", valid_608140
  var valid_608141 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608141 = validateParameter(valid_608141, JString, required = false,
                                 default = nil)
  if valid_608141 != nil:
    section.add "X-Amz-SignedHeaders", valid_608141
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_608142 = formData.getOrDefault("DBParameterGroupName")
  valid_608142 = validateParameter(valid_608142, JString, required = true,
                                 default = nil)
  if valid_608142 != nil:
    section.add "DBParameterGroupName", valid_608142
  var valid_608143 = formData.getOrDefault("Parameters")
  valid_608143 = validateParameter(valid_608143, JArray, required = true, default = nil)
  if valid_608143 != nil:
    section.add "Parameters", valid_608143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608144: Call_PostModifyDBParameterGroup_608130; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_608144.validator(path, query, header, formData, body)
  let scheme = call_608144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608144.url(scheme.get, call_608144.host, call_608144.base,
                         call_608144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608144, url, valid)

proc call*(call_608145: Call_PostModifyDBParameterGroup_608130;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_608146 = newJObject()
  var formData_608147 = newJObject()
  add(formData_608147, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608146, "Action", newJString(Action))
  if Parameters != nil:
    formData_608147.add "Parameters", Parameters
  add(query_608146, "Version", newJString(Version))
  result = call_608145.call(nil, query_608146, nil, formData_608147, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_608130(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_608131, base: "/",
    url: url_PostModifyDBParameterGroup_608132,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_608113 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBParameterGroup_608115(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_608114(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_608116 = query.getOrDefault("DBParameterGroupName")
  valid_608116 = validateParameter(valid_608116, JString, required = true,
                                 default = nil)
  if valid_608116 != nil:
    section.add "DBParameterGroupName", valid_608116
  var valid_608117 = query.getOrDefault("Parameters")
  valid_608117 = validateParameter(valid_608117, JArray, required = true, default = nil)
  if valid_608117 != nil:
    section.add "Parameters", valid_608117
  var valid_608118 = query.getOrDefault("Action")
  valid_608118 = validateParameter(valid_608118, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_608118 != nil:
    section.add "Action", valid_608118
  var valid_608119 = query.getOrDefault("Version")
  valid_608119 = validateParameter(valid_608119, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608119 != nil:
    section.add "Version", valid_608119
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608120 = header.getOrDefault("X-Amz-Signature")
  valid_608120 = validateParameter(valid_608120, JString, required = false,
                                 default = nil)
  if valid_608120 != nil:
    section.add "X-Amz-Signature", valid_608120
  var valid_608121 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608121 = validateParameter(valid_608121, JString, required = false,
                                 default = nil)
  if valid_608121 != nil:
    section.add "X-Amz-Content-Sha256", valid_608121
  var valid_608122 = header.getOrDefault("X-Amz-Date")
  valid_608122 = validateParameter(valid_608122, JString, required = false,
                                 default = nil)
  if valid_608122 != nil:
    section.add "X-Amz-Date", valid_608122
  var valid_608123 = header.getOrDefault("X-Amz-Credential")
  valid_608123 = validateParameter(valid_608123, JString, required = false,
                                 default = nil)
  if valid_608123 != nil:
    section.add "X-Amz-Credential", valid_608123
  var valid_608124 = header.getOrDefault("X-Amz-Security-Token")
  valid_608124 = validateParameter(valid_608124, JString, required = false,
                                 default = nil)
  if valid_608124 != nil:
    section.add "X-Amz-Security-Token", valid_608124
  var valid_608125 = header.getOrDefault("X-Amz-Algorithm")
  valid_608125 = validateParameter(valid_608125, JString, required = false,
                                 default = nil)
  if valid_608125 != nil:
    section.add "X-Amz-Algorithm", valid_608125
  var valid_608126 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608126 = validateParameter(valid_608126, JString, required = false,
                                 default = nil)
  if valid_608126 != nil:
    section.add "X-Amz-SignedHeaders", valid_608126
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608127: Call_GetModifyDBParameterGroup_608113; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_608127.validator(path, query, header, formData, body)
  let scheme = call_608127.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608127.url(scheme.get, call_608127.host, call_608127.base,
                         call_608127.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608127, url, valid)

proc call*(call_608128: Call_GetModifyDBParameterGroup_608113;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608129 = newJObject()
  add(query_608129, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_608129.add "Parameters", Parameters
  add(query_608129, "Action", newJString(Action))
  add(query_608129, "Version", newJString(Version))
  result = call_608128.call(nil, query_608129, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_608113(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_608114, base: "/",
    url: url_GetModifyDBParameterGroup_608115,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_608166 = ref object of OpenApiRestCall_605573
proc url_PostModifyDBSubnetGroup_608168(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_608167(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608169 = query.getOrDefault("Action")
  valid_608169 = validateParameter(valid_608169, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_608169 != nil:
    section.add "Action", valid_608169
  var valid_608170 = query.getOrDefault("Version")
  valid_608170 = validateParameter(valid_608170, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608170 != nil:
    section.add "Version", valid_608170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608171 = header.getOrDefault("X-Amz-Signature")
  valid_608171 = validateParameter(valid_608171, JString, required = false,
                                 default = nil)
  if valid_608171 != nil:
    section.add "X-Amz-Signature", valid_608171
  var valid_608172 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608172 = validateParameter(valid_608172, JString, required = false,
                                 default = nil)
  if valid_608172 != nil:
    section.add "X-Amz-Content-Sha256", valid_608172
  var valid_608173 = header.getOrDefault("X-Amz-Date")
  valid_608173 = validateParameter(valid_608173, JString, required = false,
                                 default = nil)
  if valid_608173 != nil:
    section.add "X-Amz-Date", valid_608173
  var valid_608174 = header.getOrDefault("X-Amz-Credential")
  valid_608174 = validateParameter(valid_608174, JString, required = false,
                                 default = nil)
  if valid_608174 != nil:
    section.add "X-Amz-Credential", valid_608174
  var valid_608175 = header.getOrDefault("X-Amz-Security-Token")
  valid_608175 = validateParameter(valid_608175, JString, required = false,
                                 default = nil)
  if valid_608175 != nil:
    section.add "X-Amz-Security-Token", valid_608175
  var valid_608176 = header.getOrDefault("X-Amz-Algorithm")
  valid_608176 = validateParameter(valid_608176, JString, required = false,
                                 default = nil)
  if valid_608176 != nil:
    section.add "X-Amz-Algorithm", valid_608176
  var valid_608177 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608177 = validateParameter(valid_608177, JString, required = false,
                                 default = nil)
  if valid_608177 != nil:
    section.add "X-Amz-SignedHeaders", valid_608177
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_608178 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_608178 = validateParameter(valid_608178, JString, required = false,
                                 default = nil)
  if valid_608178 != nil:
    section.add "DBSubnetGroupDescription", valid_608178
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_608179 = formData.getOrDefault("DBSubnetGroupName")
  valid_608179 = validateParameter(valid_608179, JString, required = true,
                                 default = nil)
  if valid_608179 != nil:
    section.add "DBSubnetGroupName", valid_608179
  var valid_608180 = formData.getOrDefault("SubnetIds")
  valid_608180 = validateParameter(valid_608180, JArray, required = true, default = nil)
  if valid_608180 != nil:
    section.add "SubnetIds", valid_608180
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608181: Call_PostModifyDBSubnetGroup_608166; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_608181.validator(path, query, header, formData, body)
  let scheme = call_608181.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608181.url(scheme.get, call_608181.host, call_608181.base,
                         call_608181.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608181, url, valid)

proc call*(call_608182: Call_PostModifyDBSubnetGroup_608166;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_608183 = newJObject()
  var formData_608184 = newJObject()
  add(formData_608184, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_608183, "Action", newJString(Action))
  add(formData_608184, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608183, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_608184.add "SubnetIds", SubnetIds
  result = call_608182.call(nil, query_608183, nil, formData_608184, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_608166(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_608167, base: "/",
    url: url_PostModifyDBSubnetGroup_608168, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_608148 = ref object of OpenApiRestCall_605573
proc url_GetModifyDBSubnetGroup_608150(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_608149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_608151 = query.getOrDefault("SubnetIds")
  valid_608151 = validateParameter(valid_608151, JArray, required = true, default = nil)
  if valid_608151 != nil:
    section.add "SubnetIds", valid_608151
  var valid_608152 = query.getOrDefault("Action")
  valid_608152 = validateParameter(valid_608152, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_608152 != nil:
    section.add "Action", valid_608152
  var valid_608153 = query.getOrDefault("DBSubnetGroupDescription")
  valid_608153 = validateParameter(valid_608153, JString, required = false,
                                 default = nil)
  if valid_608153 != nil:
    section.add "DBSubnetGroupDescription", valid_608153
  var valid_608154 = query.getOrDefault("DBSubnetGroupName")
  valid_608154 = validateParameter(valid_608154, JString, required = true,
                                 default = nil)
  if valid_608154 != nil:
    section.add "DBSubnetGroupName", valid_608154
  var valid_608155 = query.getOrDefault("Version")
  valid_608155 = validateParameter(valid_608155, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608155 != nil:
    section.add "Version", valid_608155
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608156 = header.getOrDefault("X-Amz-Signature")
  valid_608156 = validateParameter(valid_608156, JString, required = false,
                                 default = nil)
  if valid_608156 != nil:
    section.add "X-Amz-Signature", valid_608156
  var valid_608157 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608157 = validateParameter(valid_608157, JString, required = false,
                                 default = nil)
  if valid_608157 != nil:
    section.add "X-Amz-Content-Sha256", valid_608157
  var valid_608158 = header.getOrDefault("X-Amz-Date")
  valid_608158 = validateParameter(valid_608158, JString, required = false,
                                 default = nil)
  if valid_608158 != nil:
    section.add "X-Amz-Date", valid_608158
  var valid_608159 = header.getOrDefault("X-Amz-Credential")
  valid_608159 = validateParameter(valid_608159, JString, required = false,
                                 default = nil)
  if valid_608159 != nil:
    section.add "X-Amz-Credential", valid_608159
  var valid_608160 = header.getOrDefault("X-Amz-Security-Token")
  valid_608160 = validateParameter(valid_608160, JString, required = false,
                                 default = nil)
  if valid_608160 != nil:
    section.add "X-Amz-Security-Token", valid_608160
  var valid_608161 = header.getOrDefault("X-Amz-Algorithm")
  valid_608161 = validateParameter(valid_608161, JString, required = false,
                                 default = nil)
  if valid_608161 != nil:
    section.add "X-Amz-Algorithm", valid_608161
  var valid_608162 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608162 = validateParameter(valid_608162, JString, required = false,
                                 default = nil)
  if valid_608162 != nil:
    section.add "X-Amz-SignedHeaders", valid_608162
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608163: Call_GetModifyDBSubnetGroup_608148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_608163.validator(path, query, header, formData, body)
  let scheme = call_608163.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608163.url(scheme.get, call_608163.host, call_608163.base,
                         call_608163.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608163, url, valid)

proc call*(call_608164: Call_GetModifyDBSubnetGroup_608148; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_608165 = newJObject()
  if SubnetIds != nil:
    query_608165.add "SubnetIds", SubnetIds
  add(query_608165, "Action", newJString(Action))
  add(query_608165, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_608165, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608165, "Version", newJString(Version))
  result = call_608164.call(nil, query_608165, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_608148(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_608149, base: "/",
    url: url_GetModifyDBSubnetGroup_608150, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_608205 = ref object of OpenApiRestCall_605573
proc url_PostModifyEventSubscription_608207(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_608206(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608208 = query.getOrDefault("Action")
  valid_608208 = validateParameter(valid_608208, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_608208 != nil:
    section.add "Action", valid_608208
  var valid_608209 = query.getOrDefault("Version")
  valid_608209 = validateParameter(valid_608209, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608209 != nil:
    section.add "Version", valid_608209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608210 = header.getOrDefault("X-Amz-Signature")
  valid_608210 = validateParameter(valid_608210, JString, required = false,
                                 default = nil)
  if valid_608210 != nil:
    section.add "X-Amz-Signature", valid_608210
  var valid_608211 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608211 = validateParameter(valid_608211, JString, required = false,
                                 default = nil)
  if valid_608211 != nil:
    section.add "X-Amz-Content-Sha256", valid_608211
  var valid_608212 = header.getOrDefault("X-Amz-Date")
  valid_608212 = validateParameter(valid_608212, JString, required = false,
                                 default = nil)
  if valid_608212 != nil:
    section.add "X-Amz-Date", valid_608212
  var valid_608213 = header.getOrDefault("X-Amz-Credential")
  valid_608213 = validateParameter(valid_608213, JString, required = false,
                                 default = nil)
  if valid_608213 != nil:
    section.add "X-Amz-Credential", valid_608213
  var valid_608214 = header.getOrDefault("X-Amz-Security-Token")
  valid_608214 = validateParameter(valid_608214, JString, required = false,
                                 default = nil)
  if valid_608214 != nil:
    section.add "X-Amz-Security-Token", valid_608214
  var valid_608215 = header.getOrDefault("X-Amz-Algorithm")
  valid_608215 = validateParameter(valid_608215, JString, required = false,
                                 default = nil)
  if valid_608215 != nil:
    section.add "X-Amz-Algorithm", valid_608215
  var valid_608216 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608216 = validateParameter(valid_608216, JString, required = false,
                                 default = nil)
  if valid_608216 != nil:
    section.add "X-Amz-SignedHeaders", valid_608216
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  section = newJObject()
  var valid_608217 = formData.getOrDefault("SnsTopicArn")
  valid_608217 = validateParameter(valid_608217, JString, required = false,
                                 default = nil)
  if valid_608217 != nil:
    section.add "SnsTopicArn", valid_608217
  var valid_608218 = formData.getOrDefault("Enabled")
  valid_608218 = validateParameter(valid_608218, JBool, required = false, default = nil)
  if valid_608218 != nil:
    section.add "Enabled", valid_608218
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_608219 = formData.getOrDefault("SubscriptionName")
  valid_608219 = validateParameter(valid_608219, JString, required = true,
                                 default = nil)
  if valid_608219 != nil:
    section.add "SubscriptionName", valid_608219
  var valid_608220 = formData.getOrDefault("SourceType")
  valid_608220 = validateParameter(valid_608220, JString, required = false,
                                 default = nil)
  if valid_608220 != nil:
    section.add "SourceType", valid_608220
  var valid_608221 = formData.getOrDefault("EventCategories")
  valid_608221 = validateParameter(valid_608221, JArray, required = false,
                                 default = nil)
  if valid_608221 != nil:
    section.add "EventCategories", valid_608221
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608222: Call_PostModifyEventSubscription_608205; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_608222.validator(path, query, header, formData, body)
  let scheme = call_608222.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608222.url(scheme.get, call_608222.host, call_608222.base,
                         call_608222.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608222, url, valid)

proc call*(call_608223: Call_PostModifyEventSubscription_608205;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608224 = newJObject()
  var formData_608225 = newJObject()
  add(formData_608225, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_608225, "Enabled", newJBool(Enabled))
  add(formData_608225, "SubscriptionName", newJString(SubscriptionName))
  add(formData_608225, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_608225.add "EventCategories", EventCategories
  add(query_608224, "Action", newJString(Action))
  add(query_608224, "Version", newJString(Version))
  result = call_608223.call(nil, query_608224, nil, formData_608225, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_608205(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_608206, base: "/",
    url: url_PostModifyEventSubscription_608207,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_608185 = ref object of OpenApiRestCall_605573
proc url_GetModifyEventSubscription_608187(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_608186(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_608188 = query.getOrDefault("SourceType")
  valid_608188 = validateParameter(valid_608188, JString, required = false,
                                 default = nil)
  if valid_608188 != nil:
    section.add "SourceType", valid_608188
  var valid_608189 = query.getOrDefault("Enabled")
  valid_608189 = validateParameter(valid_608189, JBool, required = false, default = nil)
  if valid_608189 != nil:
    section.add "Enabled", valid_608189
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_608190 = query.getOrDefault("SubscriptionName")
  valid_608190 = validateParameter(valid_608190, JString, required = true,
                                 default = nil)
  if valid_608190 != nil:
    section.add "SubscriptionName", valid_608190
  var valid_608191 = query.getOrDefault("EventCategories")
  valid_608191 = validateParameter(valid_608191, JArray, required = false,
                                 default = nil)
  if valid_608191 != nil:
    section.add "EventCategories", valid_608191
  var valid_608192 = query.getOrDefault("Action")
  valid_608192 = validateParameter(valid_608192, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_608192 != nil:
    section.add "Action", valid_608192
  var valid_608193 = query.getOrDefault("SnsTopicArn")
  valid_608193 = validateParameter(valid_608193, JString, required = false,
                                 default = nil)
  if valid_608193 != nil:
    section.add "SnsTopicArn", valid_608193
  var valid_608194 = query.getOrDefault("Version")
  valid_608194 = validateParameter(valid_608194, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608194 != nil:
    section.add "Version", valid_608194
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608195 = header.getOrDefault("X-Amz-Signature")
  valid_608195 = validateParameter(valid_608195, JString, required = false,
                                 default = nil)
  if valid_608195 != nil:
    section.add "X-Amz-Signature", valid_608195
  var valid_608196 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608196 = validateParameter(valid_608196, JString, required = false,
                                 default = nil)
  if valid_608196 != nil:
    section.add "X-Amz-Content-Sha256", valid_608196
  var valid_608197 = header.getOrDefault("X-Amz-Date")
  valid_608197 = validateParameter(valid_608197, JString, required = false,
                                 default = nil)
  if valid_608197 != nil:
    section.add "X-Amz-Date", valid_608197
  var valid_608198 = header.getOrDefault("X-Amz-Credential")
  valid_608198 = validateParameter(valid_608198, JString, required = false,
                                 default = nil)
  if valid_608198 != nil:
    section.add "X-Amz-Credential", valid_608198
  var valid_608199 = header.getOrDefault("X-Amz-Security-Token")
  valid_608199 = validateParameter(valid_608199, JString, required = false,
                                 default = nil)
  if valid_608199 != nil:
    section.add "X-Amz-Security-Token", valid_608199
  var valid_608200 = header.getOrDefault("X-Amz-Algorithm")
  valid_608200 = validateParameter(valid_608200, JString, required = false,
                                 default = nil)
  if valid_608200 != nil:
    section.add "X-Amz-Algorithm", valid_608200
  var valid_608201 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608201 = validateParameter(valid_608201, JString, required = false,
                                 default = nil)
  if valid_608201 != nil:
    section.add "X-Amz-SignedHeaders", valid_608201
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608202: Call_GetModifyEventSubscription_608185; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_608202.validator(path, query, header, formData, body)
  let scheme = call_608202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608202.url(scheme.get, call_608202.host, call_608202.base,
                         call_608202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608202, url, valid)

proc call*(call_608203: Call_GetModifyEventSubscription_608185;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A Boolean value; set to <b>true</b> to activate the subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_608204 = newJObject()
  add(query_608204, "SourceType", newJString(SourceType))
  add(query_608204, "Enabled", newJBool(Enabled))
  add(query_608204, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_608204.add "EventCategories", EventCategories
  add(query_608204, "Action", newJString(Action))
  add(query_608204, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_608204, "Version", newJString(Version))
  result = call_608203.call(nil, query_608204, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_608185(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_608186, base: "/",
    url: url_GetModifyEventSubscription_608187,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_608242 = ref object of OpenApiRestCall_605573
proc url_PostPromoteReadReplicaDBCluster_608244(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_608243(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608245 = query.getOrDefault("Action")
  valid_608245 = validateParameter(valid_608245, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_608245 != nil:
    section.add "Action", valid_608245
  var valid_608246 = query.getOrDefault("Version")
  valid_608246 = validateParameter(valid_608246, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608246 != nil:
    section.add "Version", valid_608246
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608247 = header.getOrDefault("X-Amz-Signature")
  valid_608247 = validateParameter(valid_608247, JString, required = false,
                                 default = nil)
  if valid_608247 != nil:
    section.add "X-Amz-Signature", valid_608247
  var valid_608248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608248 = validateParameter(valid_608248, JString, required = false,
                                 default = nil)
  if valid_608248 != nil:
    section.add "X-Amz-Content-Sha256", valid_608248
  var valid_608249 = header.getOrDefault("X-Amz-Date")
  valid_608249 = validateParameter(valid_608249, JString, required = false,
                                 default = nil)
  if valid_608249 != nil:
    section.add "X-Amz-Date", valid_608249
  var valid_608250 = header.getOrDefault("X-Amz-Credential")
  valid_608250 = validateParameter(valid_608250, JString, required = false,
                                 default = nil)
  if valid_608250 != nil:
    section.add "X-Amz-Credential", valid_608250
  var valid_608251 = header.getOrDefault("X-Amz-Security-Token")
  valid_608251 = validateParameter(valid_608251, JString, required = false,
                                 default = nil)
  if valid_608251 != nil:
    section.add "X-Amz-Security-Token", valid_608251
  var valid_608252 = header.getOrDefault("X-Amz-Algorithm")
  valid_608252 = validateParameter(valid_608252, JString, required = false,
                                 default = nil)
  if valid_608252 != nil:
    section.add "X-Amz-Algorithm", valid_608252
  var valid_608253 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608253 = validateParameter(valid_608253, JString, required = false,
                                 default = nil)
  if valid_608253 != nil:
    section.add "X-Amz-SignedHeaders", valid_608253
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608254 = formData.getOrDefault("DBClusterIdentifier")
  valid_608254 = validateParameter(valid_608254, JString, required = true,
                                 default = nil)
  if valid_608254 != nil:
    section.add "DBClusterIdentifier", valid_608254
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608255: Call_PostPromoteReadReplicaDBCluster_608242;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_608255.validator(path, query, header, formData, body)
  let scheme = call_608255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608255.url(scheme.get, call_608255.host, call_608255.base,
                         call_608255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608255, url, valid)

proc call*(call_608256: Call_PostPromoteReadReplicaDBCluster_608242;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  var query_608257 = newJObject()
  var formData_608258 = newJObject()
  add(query_608257, "Action", newJString(Action))
  add(query_608257, "Version", newJString(Version))
  add(formData_608258, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608256.call(nil, query_608257, nil, formData_608258, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_608242(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_608243, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_608244,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_608226 = ref object of OpenApiRestCall_605573
proc url_GetPromoteReadReplicaDBCluster_608228(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_608227(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Not supported.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : Not supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608229 = query.getOrDefault("DBClusterIdentifier")
  valid_608229 = validateParameter(valid_608229, JString, required = true,
                                 default = nil)
  if valid_608229 != nil:
    section.add "DBClusterIdentifier", valid_608229
  var valid_608230 = query.getOrDefault("Action")
  valid_608230 = validateParameter(valid_608230, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_608230 != nil:
    section.add "Action", valid_608230
  var valid_608231 = query.getOrDefault("Version")
  valid_608231 = validateParameter(valid_608231, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608231 != nil:
    section.add "Version", valid_608231
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608232 = header.getOrDefault("X-Amz-Signature")
  valid_608232 = validateParameter(valid_608232, JString, required = false,
                                 default = nil)
  if valid_608232 != nil:
    section.add "X-Amz-Signature", valid_608232
  var valid_608233 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608233 = validateParameter(valid_608233, JString, required = false,
                                 default = nil)
  if valid_608233 != nil:
    section.add "X-Amz-Content-Sha256", valid_608233
  var valid_608234 = header.getOrDefault("X-Amz-Date")
  valid_608234 = validateParameter(valid_608234, JString, required = false,
                                 default = nil)
  if valid_608234 != nil:
    section.add "X-Amz-Date", valid_608234
  var valid_608235 = header.getOrDefault("X-Amz-Credential")
  valid_608235 = validateParameter(valid_608235, JString, required = false,
                                 default = nil)
  if valid_608235 != nil:
    section.add "X-Amz-Credential", valid_608235
  var valid_608236 = header.getOrDefault("X-Amz-Security-Token")
  valid_608236 = validateParameter(valid_608236, JString, required = false,
                                 default = nil)
  if valid_608236 != nil:
    section.add "X-Amz-Security-Token", valid_608236
  var valid_608237 = header.getOrDefault("X-Amz-Algorithm")
  valid_608237 = validateParameter(valid_608237, JString, required = false,
                                 default = nil)
  if valid_608237 != nil:
    section.add "X-Amz-Algorithm", valid_608237
  var valid_608238 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608238 = validateParameter(valid_608238, JString, required = false,
                                 default = nil)
  if valid_608238 != nil:
    section.add "X-Amz-SignedHeaders", valid_608238
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608239: Call_GetPromoteReadReplicaDBCluster_608226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Not supported.
  ## 
  let valid = call_608239.validator(path, query, header, formData, body)
  let scheme = call_608239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608239.url(scheme.get, call_608239.host, call_608239.base,
                         call_608239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608239, url, valid)

proc call*(call_608240: Call_GetPromoteReadReplicaDBCluster_608226;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## Not supported.
  ##   DBClusterIdentifier: string (required)
  ##                      : Not supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608241 = newJObject()
  add(query_608241, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608241, "Action", newJString(Action))
  add(query_608241, "Version", newJString(Version))
  result = call_608240.call(nil, query_608241, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_608226(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_608227, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_608228,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_608276 = ref object of OpenApiRestCall_605573
proc url_PostRebootDBInstance_608278(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_608277(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608279 = query.getOrDefault("Action")
  valid_608279 = validateParameter(valid_608279, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_608279 != nil:
    section.add "Action", valid_608279
  var valid_608280 = query.getOrDefault("Version")
  valid_608280 = validateParameter(valid_608280, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608280 != nil:
    section.add "Version", valid_608280
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608281 = header.getOrDefault("X-Amz-Signature")
  valid_608281 = validateParameter(valid_608281, JString, required = false,
                                 default = nil)
  if valid_608281 != nil:
    section.add "X-Amz-Signature", valid_608281
  var valid_608282 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608282 = validateParameter(valid_608282, JString, required = false,
                                 default = nil)
  if valid_608282 != nil:
    section.add "X-Amz-Content-Sha256", valid_608282
  var valid_608283 = header.getOrDefault("X-Amz-Date")
  valid_608283 = validateParameter(valid_608283, JString, required = false,
                                 default = nil)
  if valid_608283 != nil:
    section.add "X-Amz-Date", valid_608283
  var valid_608284 = header.getOrDefault("X-Amz-Credential")
  valid_608284 = validateParameter(valid_608284, JString, required = false,
                                 default = nil)
  if valid_608284 != nil:
    section.add "X-Amz-Credential", valid_608284
  var valid_608285 = header.getOrDefault("X-Amz-Security-Token")
  valid_608285 = validateParameter(valid_608285, JString, required = false,
                                 default = nil)
  if valid_608285 != nil:
    section.add "X-Amz-Security-Token", valid_608285
  var valid_608286 = header.getOrDefault("X-Amz-Algorithm")
  valid_608286 = validateParameter(valid_608286, JString, required = false,
                                 default = nil)
  if valid_608286 != nil:
    section.add "X-Amz-Algorithm", valid_608286
  var valid_608287 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608287 = validateParameter(valid_608287, JString, required = false,
                                 default = nil)
  if valid_608287 != nil:
    section.add "X-Amz-SignedHeaders", valid_608287
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_608288 = formData.getOrDefault("ForceFailover")
  valid_608288 = validateParameter(valid_608288, JBool, required = false, default = nil)
  if valid_608288 != nil:
    section.add "ForceFailover", valid_608288
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608289 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608289 = validateParameter(valid_608289, JString, required = true,
                                 default = nil)
  if valid_608289 != nil:
    section.add "DBInstanceIdentifier", valid_608289
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608290: Call_PostRebootDBInstance_608276; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_608290.validator(path, query, header, formData, body)
  let scheme = call_608290.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608290.url(scheme.get, call_608290.host, call_608290.base,
                         call_608290.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608290, url, valid)

proc call*(call_608291: Call_PostRebootDBInstance_608276;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608292 = newJObject()
  var formData_608293 = newJObject()
  add(formData_608293, "ForceFailover", newJBool(ForceFailover))
  add(formData_608293, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608292, "Action", newJString(Action))
  add(query_608292, "Version", newJString(Version))
  result = call_608291.call(nil, query_608292, nil, formData_608293, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_608276(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_608277, base: "/",
    url: url_PostRebootDBInstance_608278, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_608259 = ref object of OpenApiRestCall_605573
proc url_GetRebootDBInstance_608261(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_608260(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608262 = query.getOrDefault("ForceFailover")
  valid_608262 = validateParameter(valid_608262, JBool, required = false, default = nil)
  if valid_608262 != nil:
    section.add "ForceFailover", valid_608262
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608263 = query.getOrDefault("DBInstanceIdentifier")
  valid_608263 = validateParameter(valid_608263, JString, required = true,
                                 default = nil)
  if valid_608263 != nil:
    section.add "DBInstanceIdentifier", valid_608263
  var valid_608264 = query.getOrDefault("Action")
  valid_608264 = validateParameter(valid_608264, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_608264 != nil:
    section.add "Action", valid_608264
  var valid_608265 = query.getOrDefault("Version")
  valid_608265 = validateParameter(valid_608265, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608265 != nil:
    section.add "Version", valid_608265
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608266 = header.getOrDefault("X-Amz-Signature")
  valid_608266 = validateParameter(valid_608266, JString, required = false,
                                 default = nil)
  if valid_608266 != nil:
    section.add "X-Amz-Signature", valid_608266
  var valid_608267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608267 = validateParameter(valid_608267, JString, required = false,
                                 default = nil)
  if valid_608267 != nil:
    section.add "X-Amz-Content-Sha256", valid_608267
  var valid_608268 = header.getOrDefault("X-Amz-Date")
  valid_608268 = validateParameter(valid_608268, JString, required = false,
                                 default = nil)
  if valid_608268 != nil:
    section.add "X-Amz-Date", valid_608268
  var valid_608269 = header.getOrDefault("X-Amz-Credential")
  valid_608269 = validateParameter(valid_608269, JString, required = false,
                                 default = nil)
  if valid_608269 != nil:
    section.add "X-Amz-Credential", valid_608269
  var valid_608270 = header.getOrDefault("X-Amz-Security-Token")
  valid_608270 = validateParameter(valid_608270, JString, required = false,
                                 default = nil)
  if valid_608270 != nil:
    section.add "X-Amz-Security-Token", valid_608270
  var valid_608271 = header.getOrDefault("X-Amz-Algorithm")
  valid_608271 = validateParameter(valid_608271, JString, required = false,
                                 default = nil)
  if valid_608271 != nil:
    section.add "X-Amz-Algorithm", valid_608271
  var valid_608272 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608272 = validateParameter(valid_608272, JString, required = false,
                                 default = nil)
  if valid_608272 != nil:
    section.add "X-Amz-SignedHeaders", valid_608272
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608273: Call_GetRebootDBInstance_608259; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ## 
  let valid = call_608273.validator(path, query, header, formData, body)
  let scheme = call_608273.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608273.url(scheme.get, call_608273.host, call_608273.base,
                         call_608273.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608273, url, valid)

proc call*(call_608274: Call_GetRebootDBInstance_608259;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
  ##   ForceFailover: bool
  ##                : <p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608275 = newJObject()
  add(query_608275, "ForceFailover", newJBool(ForceFailover))
  add(query_608275, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608275, "Action", newJString(Action))
  add(query_608275, "Version", newJString(Version))
  result = call_608274.call(nil, query_608275, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_608259(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_608260, base: "/",
    url: url_GetRebootDBInstance_608261, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_608311 = ref object of OpenApiRestCall_605573
proc url_PostRemoveRoleFromDBCluster_608313(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_608312(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608314 = query.getOrDefault("Action")
  valid_608314 = validateParameter(valid_608314, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_608314 != nil:
    section.add "Action", valid_608314
  var valid_608315 = query.getOrDefault("Version")
  valid_608315 = validateParameter(valid_608315, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608315 != nil:
    section.add "Version", valid_608315
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608316 = header.getOrDefault("X-Amz-Signature")
  valid_608316 = validateParameter(valid_608316, JString, required = false,
                                 default = nil)
  if valid_608316 != nil:
    section.add "X-Amz-Signature", valid_608316
  var valid_608317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608317 = validateParameter(valid_608317, JString, required = false,
                                 default = nil)
  if valid_608317 != nil:
    section.add "X-Amz-Content-Sha256", valid_608317
  var valid_608318 = header.getOrDefault("X-Amz-Date")
  valid_608318 = validateParameter(valid_608318, JString, required = false,
                                 default = nil)
  if valid_608318 != nil:
    section.add "X-Amz-Date", valid_608318
  var valid_608319 = header.getOrDefault("X-Amz-Credential")
  valid_608319 = validateParameter(valid_608319, JString, required = false,
                                 default = nil)
  if valid_608319 != nil:
    section.add "X-Amz-Credential", valid_608319
  var valid_608320 = header.getOrDefault("X-Amz-Security-Token")
  valid_608320 = validateParameter(valid_608320, JString, required = false,
                                 default = nil)
  if valid_608320 != nil:
    section.add "X-Amz-Security-Token", valid_608320
  var valid_608321 = header.getOrDefault("X-Amz-Algorithm")
  valid_608321 = validateParameter(valid_608321, JString, required = false,
                                 default = nil)
  if valid_608321 != nil:
    section.add "X-Amz-Algorithm", valid_608321
  var valid_608322 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608322 = validateParameter(valid_608322, JString, required = false,
                                 default = nil)
  if valid_608322 != nil:
    section.add "X-Amz-SignedHeaders", valid_608322
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_608323 = formData.getOrDefault("RoleArn")
  valid_608323 = validateParameter(valid_608323, JString, required = true,
                                 default = nil)
  if valid_608323 != nil:
    section.add "RoleArn", valid_608323
  var valid_608324 = formData.getOrDefault("DBClusterIdentifier")
  valid_608324 = validateParameter(valid_608324, JString, required = true,
                                 default = nil)
  if valid_608324 != nil:
    section.add "DBClusterIdentifier", valid_608324
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608325: Call_PostRemoveRoleFromDBCluster_608311; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_608325.validator(path, query, header, formData, body)
  let scheme = call_608325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608325.url(scheme.get, call_608325.host, call_608325.base,
                         call_608325.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608325, url, valid)

proc call*(call_608326: Call_PostRemoveRoleFromDBCluster_608311; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_608327 = newJObject()
  var formData_608328 = newJObject()
  add(formData_608328, "RoleArn", newJString(RoleArn))
  add(query_608327, "Action", newJString(Action))
  add(query_608327, "Version", newJString(Version))
  add(formData_608328, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608326.call(nil, query_608327, nil, formData_608328, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_608311(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_608312, base: "/",
    url: url_PostRemoveRoleFromDBCluster_608313,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_608294 = ref object of OpenApiRestCall_605573
proc url_GetRemoveRoleFromDBCluster_608296(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_608295(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_608297 = query.getOrDefault("RoleArn")
  valid_608297 = validateParameter(valid_608297, JString, required = true,
                                 default = nil)
  if valid_608297 != nil:
    section.add "RoleArn", valid_608297
  var valid_608298 = query.getOrDefault("DBClusterIdentifier")
  valid_608298 = validateParameter(valid_608298, JString, required = true,
                                 default = nil)
  if valid_608298 != nil:
    section.add "DBClusterIdentifier", valid_608298
  var valid_608299 = query.getOrDefault("Action")
  valid_608299 = validateParameter(valid_608299, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_608299 != nil:
    section.add "Action", valid_608299
  var valid_608300 = query.getOrDefault("Version")
  valid_608300 = validateParameter(valid_608300, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608300 != nil:
    section.add "Version", valid_608300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608301 = header.getOrDefault("X-Amz-Signature")
  valid_608301 = validateParameter(valid_608301, JString, required = false,
                                 default = nil)
  if valid_608301 != nil:
    section.add "X-Amz-Signature", valid_608301
  var valid_608302 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608302 = validateParameter(valid_608302, JString, required = false,
                                 default = nil)
  if valid_608302 != nil:
    section.add "X-Amz-Content-Sha256", valid_608302
  var valid_608303 = header.getOrDefault("X-Amz-Date")
  valid_608303 = validateParameter(valid_608303, JString, required = false,
                                 default = nil)
  if valid_608303 != nil:
    section.add "X-Amz-Date", valid_608303
  var valid_608304 = header.getOrDefault("X-Amz-Credential")
  valid_608304 = validateParameter(valid_608304, JString, required = false,
                                 default = nil)
  if valid_608304 != nil:
    section.add "X-Amz-Credential", valid_608304
  var valid_608305 = header.getOrDefault("X-Amz-Security-Token")
  valid_608305 = validateParameter(valid_608305, JString, required = false,
                                 default = nil)
  if valid_608305 != nil:
    section.add "X-Amz-Security-Token", valid_608305
  var valid_608306 = header.getOrDefault("X-Amz-Algorithm")
  valid_608306 = validateParameter(valid_608306, JString, required = false,
                                 default = nil)
  if valid_608306 != nil:
    section.add "X-Amz-Algorithm", valid_608306
  var valid_608307 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608307 = validateParameter(valid_608307, JString, required = false,
                                 default = nil)
  if valid_608307 != nil:
    section.add "X-Amz-SignedHeaders", valid_608307
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608308: Call_GetRemoveRoleFromDBCluster_608294; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ## 
  let valid = call_608308.validator(path, query, header, formData, body)
  let scheme = call_608308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608308.url(scheme.get, call_608308.host, call_608308.base,
                         call_608308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608308, url, valid)

proc call*(call_608309: Call_GetRemoveRoleFromDBCluster_608294; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## Disassociates an Identity and Access Management (IAM) role from a DB cluster.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608310 = newJObject()
  add(query_608310, "RoleArn", newJString(RoleArn))
  add(query_608310, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608310, "Action", newJString(Action))
  add(query_608310, "Version", newJString(Version))
  result = call_608309.call(nil, query_608310, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_608294(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_608295, base: "/",
    url: url_GetRemoveRoleFromDBCluster_608296,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_608346 = ref object of OpenApiRestCall_605573
proc url_PostRemoveSourceIdentifierFromSubscription_608348(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_608347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608349 = query.getOrDefault("Action")
  valid_608349 = validateParameter(valid_608349, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_608349 != nil:
    section.add "Action", valid_608349
  var valid_608350 = query.getOrDefault("Version")
  valid_608350 = validateParameter(valid_608350, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608350 != nil:
    section.add "Version", valid_608350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608351 = header.getOrDefault("X-Amz-Signature")
  valid_608351 = validateParameter(valid_608351, JString, required = false,
                                 default = nil)
  if valid_608351 != nil:
    section.add "X-Amz-Signature", valid_608351
  var valid_608352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608352 = validateParameter(valid_608352, JString, required = false,
                                 default = nil)
  if valid_608352 != nil:
    section.add "X-Amz-Content-Sha256", valid_608352
  var valid_608353 = header.getOrDefault("X-Amz-Date")
  valid_608353 = validateParameter(valid_608353, JString, required = false,
                                 default = nil)
  if valid_608353 != nil:
    section.add "X-Amz-Date", valid_608353
  var valid_608354 = header.getOrDefault("X-Amz-Credential")
  valid_608354 = validateParameter(valid_608354, JString, required = false,
                                 default = nil)
  if valid_608354 != nil:
    section.add "X-Amz-Credential", valid_608354
  var valid_608355 = header.getOrDefault("X-Amz-Security-Token")
  valid_608355 = validateParameter(valid_608355, JString, required = false,
                                 default = nil)
  if valid_608355 != nil:
    section.add "X-Amz-Security-Token", valid_608355
  var valid_608356 = header.getOrDefault("X-Amz-Algorithm")
  valid_608356 = validateParameter(valid_608356, JString, required = false,
                                 default = nil)
  if valid_608356 != nil:
    section.add "X-Amz-Algorithm", valid_608356
  var valid_608357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608357 = validateParameter(valid_608357, JString, required = false,
                                 default = nil)
  if valid_608357 != nil:
    section.add "X-Amz-SignedHeaders", valid_608357
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_608358 = formData.getOrDefault("SubscriptionName")
  valid_608358 = validateParameter(valid_608358, JString, required = true,
                                 default = nil)
  if valid_608358 != nil:
    section.add "SubscriptionName", valid_608358
  var valid_608359 = formData.getOrDefault("SourceIdentifier")
  valid_608359 = validateParameter(valid_608359, JString, required = true,
                                 default = nil)
  if valid_608359 != nil:
    section.add "SourceIdentifier", valid_608359
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608360: Call_PostRemoveSourceIdentifierFromSubscription_608346;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_608360.validator(path, query, header, formData, body)
  let scheme = call_608360.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608360.url(scheme.get, call_608360.host, call_608360.base,
                         call_608360.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608360, url, valid)

proc call*(call_608361: Call_PostRemoveSourceIdentifierFromSubscription_608346;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608362 = newJObject()
  var formData_608363 = newJObject()
  add(formData_608363, "SubscriptionName", newJString(SubscriptionName))
  add(formData_608363, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_608362, "Action", newJString(Action))
  add(query_608362, "Version", newJString(Version))
  result = call_608361.call(nil, query_608362, nil, formData_608363, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_608346(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_608347,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_608348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_608329 = ref object of OpenApiRestCall_605573
proc url_GetRemoveSourceIdentifierFromSubscription_608331(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_608330(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_608332 = query.getOrDefault("SourceIdentifier")
  valid_608332 = validateParameter(valid_608332, JString, required = true,
                                 default = nil)
  if valid_608332 != nil:
    section.add "SourceIdentifier", valid_608332
  var valid_608333 = query.getOrDefault("SubscriptionName")
  valid_608333 = validateParameter(valid_608333, JString, required = true,
                                 default = nil)
  if valid_608333 != nil:
    section.add "SubscriptionName", valid_608333
  var valid_608334 = query.getOrDefault("Action")
  valid_608334 = validateParameter(valid_608334, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_608334 != nil:
    section.add "Action", valid_608334
  var valid_608335 = query.getOrDefault("Version")
  valid_608335 = validateParameter(valid_608335, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608335 != nil:
    section.add "Version", valid_608335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608336 = header.getOrDefault("X-Amz-Signature")
  valid_608336 = validateParameter(valid_608336, JString, required = false,
                                 default = nil)
  if valid_608336 != nil:
    section.add "X-Amz-Signature", valid_608336
  var valid_608337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608337 = validateParameter(valid_608337, JString, required = false,
                                 default = nil)
  if valid_608337 != nil:
    section.add "X-Amz-Content-Sha256", valid_608337
  var valid_608338 = header.getOrDefault("X-Amz-Date")
  valid_608338 = validateParameter(valid_608338, JString, required = false,
                                 default = nil)
  if valid_608338 != nil:
    section.add "X-Amz-Date", valid_608338
  var valid_608339 = header.getOrDefault("X-Amz-Credential")
  valid_608339 = validateParameter(valid_608339, JString, required = false,
                                 default = nil)
  if valid_608339 != nil:
    section.add "X-Amz-Credential", valid_608339
  var valid_608340 = header.getOrDefault("X-Amz-Security-Token")
  valid_608340 = validateParameter(valid_608340, JString, required = false,
                                 default = nil)
  if valid_608340 != nil:
    section.add "X-Amz-Security-Token", valid_608340
  var valid_608341 = header.getOrDefault("X-Amz-Algorithm")
  valid_608341 = validateParameter(valid_608341, JString, required = false,
                                 default = nil)
  if valid_608341 != nil:
    section.add "X-Amz-Algorithm", valid_608341
  var valid_608342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608342 = validateParameter(valid_608342, JString, required = false,
                                 default = nil)
  if valid_608342 != nil:
    section.add "X-Amz-SignedHeaders", valid_608342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608343: Call_GetRemoveSourceIdentifierFromSubscription_608329;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing event notification subscription.
  ## 
  let valid = call_608343.validator(path, query, header, formData, body)
  let scheme = call_608343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608343.url(scheme.get, call_608343.host, call_608343.base,
                         call_608343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608343, url, valid)

proc call*(call_608344: Call_GetRemoveSourceIdentifierFromSubscription_608329;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.
  ##   SubscriptionName: string (required)
  ##                   : The name of the event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608345 = newJObject()
  add(query_608345, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_608345, "SubscriptionName", newJString(SubscriptionName))
  add(query_608345, "Action", newJString(Action))
  add(query_608345, "Version", newJString(Version))
  result = call_608344.call(nil, query_608345, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_608329(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_608330,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_608331,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_608381 = ref object of OpenApiRestCall_605573
proc url_PostRemoveTagsFromResource_608383(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_608382(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608384 = query.getOrDefault("Action")
  valid_608384 = validateParameter(valid_608384, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_608384 != nil:
    section.add "Action", valid_608384
  var valid_608385 = query.getOrDefault("Version")
  valid_608385 = validateParameter(valid_608385, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608385 != nil:
    section.add "Version", valid_608385
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608386 = header.getOrDefault("X-Amz-Signature")
  valid_608386 = validateParameter(valid_608386, JString, required = false,
                                 default = nil)
  if valid_608386 != nil:
    section.add "X-Amz-Signature", valid_608386
  var valid_608387 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608387 = validateParameter(valid_608387, JString, required = false,
                                 default = nil)
  if valid_608387 != nil:
    section.add "X-Amz-Content-Sha256", valid_608387
  var valid_608388 = header.getOrDefault("X-Amz-Date")
  valid_608388 = validateParameter(valid_608388, JString, required = false,
                                 default = nil)
  if valid_608388 != nil:
    section.add "X-Amz-Date", valid_608388
  var valid_608389 = header.getOrDefault("X-Amz-Credential")
  valid_608389 = validateParameter(valid_608389, JString, required = false,
                                 default = nil)
  if valid_608389 != nil:
    section.add "X-Amz-Credential", valid_608389
  var valid_608390 = header.getOrDefault("X-Amz-Security-Token")
  valid_608390 = validateParameter(valid_608390, JString, required = false,
                                 default = nil)
  if valid_608390 != nil:
    section.add "X-Amz-Security-Token", valid_608390
  var valid_608391 = header.getOrDefault("X-Amz-Algorithm")
  valid_608391 = validateParameter(valid_608391, JString, required = false,
                                 default = nil)
  if valid_608391 != nil:
    section.add "X-Amz-Algorithm", valid_608391
  var valid_608392 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608392 = validateParameter(valid_608392, JString, required = false,
                                 default = nil)
  if valid_608392 != nil:
    section.add "X-Amz-SignedHeaders", valid_608392
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_608393 = formData.getOrDefault("TagKeys")
  valid_608393 = validateParameter(valid_608393, JArray, required = true, default = nil)
  if valid_608393 != nil:
    section.add "TagKeys", valid_608393
  var valid_608394 = formData.getOrDefault("ResourceName")
  valid_608394 = validateParameter(valid_608394, JString, required = true,
                                 default = nil)
  if valid_608394 != nil:
    section.add "ResourceName", valid_608394
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608395: Call_PostRemoveTagsFromResource_608381; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_608395.validator(path, query, header, formData, body)
  let scheme = call_608395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608395.url(scheme.get, call_608395.host, call_608395.base,
                         call_608395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608395, url, valid)

proc call*(call_608396: Call_PostRemoveTagsFromResource_608381; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  var query_608397 = newJObject()
  var formData_608398 = newJObject()
  if TagKeys != nil:
    formData_608398.add "TagKeys", TagKeys
  add(query_608397, "Action", newJString(Action))
  add(query_608397, "Version", newJString(Version))
  add(formData_608398, "ResourceName", newJString(ResourceName))
  result = call_608396.call(nil, query_608397, nil, formData_608398, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_608381(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_608382, base: "/",
    url: url_PostRemoveTagsFromResource_608383,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_608364 = ref object of OpenApiRestCall_605573
proc url_GetRemoveTagsFromResource_608366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_608365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_608367 = query.getOrDefault("ResourceName")
  valid_608367 = validateParameter(valid_608367, JString, required = true,
                                 default = nil)
  if valid_608367 != nil:
    section.add "ResourceName", valid_608367
  var valid_608368 = query.getOrDefault("TagKeys")
  valid_608368 = validateParameter(valid_608368, JArray, required = true, default = nil)
  if valid_608368 != nil:
    section.add "TagKeys", valid_608368
  var valid_608369 = query.getOrDefault("Action")
  valid_608369 = validateParameter(valid_608369, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_608369 != nil:
    section.add "Action", valid_608369
  var valid_608370 = query.getOrDefault("Version")
  valid_608370 = validateParameter(valid_608370, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608370 != nil:
    section.add "Version", valid_608370
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608371 = header.getOrDefault("X-Amz-Signature")
  valid_608371 = validateParameter(valid_608371, JString, required = false,
                                 default = nil)
  if valid_608371 != nil:
    section.add "X-Amz-Signature", valid_608371
  var valid_608372 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608372 = validateParameter(valid_608372, JString, required = false,
                                 default = nil)
  if valid_608372 != nil:
    section.add "X-Amz-Content-Sha256", valid_608372
  var valid_608373 = header.getOrDefault("X-Amz-Date")
  valid_608373 = validateParameter(valid_608373, JString, required = false,
                                 default = nil)
  if valid_608373 != nil:
    section.add "X-Amz-Date", valid_608373
  var valid_608374 = header.getOrDefault("X-Amz-Credential")
  valid_608374 = validateParameter(valid_608374, JString, required = false,
                                 default = nil)
  if valid_608374 != nil:
    section.add "X-Amz-Credential", valid_608374
  var valid_608375 = header.getOrDefault("X-Amz-Security-Token")
  valid_608375 = validateParameter(valid_608375, JString, required = false,
                                 default = nil)
  if valid_608375 != nil:
    section.add "X-Amz-Security-Token", valid_608375
  var valid_608376 = header.getOrDefault("X-Amz-Algorithm")
  valid_608376 = validateParameter(valid_608376, JString, required = false,
                                 default = nil)
  if valid_608376 != nil:
    section.add "X-Amz-Algorithm", valid_608376
  var valid_608377 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608377 = validateParameter(valid_608377, JString, required = false,
                                 default = nil)
  if valid_608377 != nil:
    section.add "X-Amz-SignedHeaders", valid_608377
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608378: Call_GetRemoveTagsFromResource_608364; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Removes metadata tags from an Amazon Neptune resource.
  ## 
  let valid = call_608378.validator(path, query, header, formData, body)
  let scheme = call_608378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608378.url(scheme.get, call_608378.host, call_608378.base,
                         call_608378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608378, url, valid)

proc call*(call_608379: Call_GetRemoveTagsFromResource_608364;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## Removes metadata tags from an Amazon Neptune resource.
  ##   ResourceName: string (required)
  ##               : The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608380 = newJObject()
  add(query_608380, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_608380.add "TagKeys", TagKeys
  add(query_608380, "Action", newJString(Action))
  add(query_608380, "Version", newJString(Version))
  result = call_608379.call(nil, query_608380, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_608364(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_608365, base: "/",
    url: url_GetRemoveTagsFromResource_608366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_608417 = ref object of OpenApiRestCall_605573
proc url_PostResetDBClusterParameterGroup_608419(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_608418(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608420 = query.getOrDefault("Action")
  valid_608420 = validateParameter(valid_608420, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_608420 != nil:
    section.add "Action", valid_608420
  var valid_608421 = query.getOrDefault("Version")
  valid_608421 = validateParameter(valid_608421, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608421 != nil:
    section.add "Version", valid_608421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608422 = header.getOrDefault("X-Amz-Signature")
  valid_608422 = validateParameter(valid_608422, JString, required = false,
                                 default = nil)
  if valid_608422 != nil:
    section.add "X-Amz-Signature", valid_608422
  var valid_608423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608423 = validateParameter(valid_608423, JString, required = false,
                                 default = nil)
  if valid_608423 != nil:
    section.add "X-Amz-Content-Sha256", valid_608423
  var valid_608424 = header.getOrDefault("X-Amz-Date")
  valid_608424 = validateParameter(valid_608424, JString, required = false,
                                 default = nil)
  if valid_608424 != nil:
    section.add "X-Amz-Date", valid_608424
  var valid_608425 = header.getOrDefault("X-Amz-Credential")
  valid_608425 = validateParameter(valid_608425, JString, required = false,
                                 default = nil)
  if valid_608425 != nil:
    section.add "X-Amz-Credential", valid_608425
  var valid_608426 = header.getOrDefault("X-Amz-Security-Token")
  valid_608426 = validateParameter(valid_608426, JString, required = false,
                                 default = nil)
  if valid_608426 != nil:
    section.add "X-Amz-Security-Token", valid_608426
  var valid_608427 = header.getOrDefault("X-Amz-Algorithm")
  valid_608427 = validateParameter(valid_608427, JString, required = false,
                                 default = nil)
  if valid_608427 != nil:
    section.add "X-Amz-Algorithm", valid_608427
  var valid_608428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608428 = validateParameter(valid_608428, JString, required = false,
                                 default = nil)
  if valid_608428 != nil:
    section.add "X-Amz-SignedHeaders", valid_608428
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_608429 = formData.getOrDefault("ResetAllParameters")
  valid_608429 = validateParameter(valid_608429, JBool, required = false, default = nil)
  if valid_608429 != nil:
    section.add "ResetAllParameters", valid_608429
  var valid_608430 = formData.getOrDefault("Parameters")
  valid_608430 = validateParameter(valid_608430, JArray, required = false,
                                 default = nil)
  if valid_608430 != nil:
    section.add "Parameters", valid_608430
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_608431 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608431 = validateParameter(valid_608431, JString, required = true,
                                 default = nil)
  if valid_608431 != nil:
    section.add "DBClusterParameterGroupName", valid_608431
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608432: Call_PostResetDBClusterParameterGroup_608417;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_608432.validator(path, query, header, formData, body)
  let scheme = call_608432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608432.url(scheme.get, call_608432.host, call_608432.base,
                         call_608432.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608432, url, valid)

proc call*(call_608433: Call_PostResetDBClusterParameterGroup_608417;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_608434 = newJObject()
  var formData_608435 = newJObject()
  add(formData_608435, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_608434, "Action", newJString(Action))
  if Parameters != nil:
    formData_608435.add "Parameters", Parameters
  add(formData_608435, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608434, "Version", newJString(Version))
  result = call_608433.call(nil, query_608434, nil, formData_608435, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_608417(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_608418, base: "/",
    url: url_PostResetDBClusterParameterGroup_608419,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_608399 = ref object of OpenApiRestCall_605573
proc url_GetResetDBClusterParameterGroup_608401(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_608400(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608402 = query.getOrDefault("Parameters")
  valid_608402 = validateParameter(valid_608402, JArray, required = false,
                                 default = nil)
  if valid_608402 != nil:
    section.add "Parameters", valid_608402
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_608403 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608403 = validateParameter(valid_608403, JString, required = true,
                                 default = nil)
  if valid_608403 != nil:
    section.add "DBClusterParameterGroupName", valid_608403
  var valid_608404 = query.getOrDefault("ResetAllParameters")
  valid_608404 = validateParameter(valid_608404, JBool, required = false, default = nil)
  if valid_608404 != nil:
    section.add "ResetAllParameters", valid_608404
  var valid_608405 = query.getOrDefault("Action")
  valid_608405 = validateParameter(valid_608405, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_608405 != nil:
    section.add "Action", valid_608405
  var valid_608406 = query.getOrDefault("Version")
  valid_608406 = validateParameter(valid_608406, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608406 != nil:
    section.add "Version", valid_608406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608407 = header.getOrDefault("X-Amz-Signature")
  valid_608407 = validateParameter(valid_608407, JString, required = false,
                                 default = nil)
  if valid_608407 != nil:
    section.add "X-Amz-Signature", valid_608407
  var valid_608408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608408 = validateParameter(valid_608408, JString, required = false,
                                 default = nil)
  if valid_608408 != nil:
    section.add "X-Amz-Content-Sha256", valid_608408
  var valid_608409 = header.getOrDefault("X-Amz-Date")
  valid_608409 = validateParameter(valid_608409, JString, required = false,
                                 default = nil)
  if valid_608409 != nil:
    section.add "X-Amz-Date", valid_608409
  var valid_608410 = header.getOrDefault("X-Amz-Credential")
  valid_608410 = validateParameter(valid_608410, JString, required = false,
                                 default = nil)
  if valid_608410 != nil:
    section.add "X-Amz-Credential", valid_608410
  var valid_608411 = header.getOrDefault("X-Amz-Security-Token")
  valid_608411 = validateParameter(valid_608411, JString, required = false,
                                 default = nil)
  if valid_608411 != nil:
    section.add "X-Amz-Security-Token", valid_608411
  var valid_608412 = header.getOrDefault("X-Amz-Algorithm")
  valid_608412 = validateParameter(valid_608412, JString, required = false,
                                 default = nil)
  if valid_608412 != nil:
    section.add "X-Amz-Algorithm", valid_608412
  var valid_608413 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608413 = validateParameter(valid_608413, JString, required = false,
                                 default = nil)
  if valid_608413 != nil:
    section.add "X-Amz-SignedHeaders", valid_608413
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608414: Call_GetResetDBClusterParameterGroup_608399;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ## 
  let valid = call_608414.validator(path, query, header, formData, body)
  let scheme = call_608414.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608414.url(scheme.get, call_608414.host, call_608414.base,
                         call_608414.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608414, url, valid)

proc call*(call_608415: Call_GetResetDBClusterParameterGroup_608399;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608416 = newJObject()
  if Parameters != nil:
    query_608416.add "Parameters", Parameters
  add(query_608416, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608416, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_608416, "Action", newJString(Action))
  add(query_608416, "Version", newJString(Version))
  result = call_608415.call(nil, query_608416, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_608399(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_608400, base: "/",
    url: url_GetResetDBClusterParameterGroup_608401,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_608454 = ref object of OpenApiRestCall_605573
proc url_PostResetDBParameterGroup_608456(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_608455(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608457 = query.getOrDefault("Action")
  valid_608457 = validateParameter(valid_608457, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_608457 != nil:
    section.add "Action", valid_608457
  var valid_608458 = query.getOrDefault("Version")
  valid_608458 = validateParameter(valid_608458, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608458 != nil:
    section.add "Version", valid_608458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608459 = header.getOrDefault("X-Amz-Signature")
  valid_608459 = validateParameter(valid_608459, JString, required = false,
                                 default = nil)
  if valid_608459 != nil:
    section.add "X-Amz-Signature", valid_608459
  var valid_608460 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608460 = validateParameter(valid_608460, JString, required = false,
                                 default = nil)
  if valid_608460 != nil:
    section.add "X-Amz-Content-Sha256", valid_608460
  var valid_608461 = header.getOrDefault("X-Amz-Date")
  valid_608461 = validateParameter(valid_608461, JString, required = false,
                                 default = nil)
  if valid_608461 != nil:
    section.add "X-Amz-Date", valid_608461
  var valid_608462 = header.getOrDefault("X-Amz-Credential")
  valid_608462 = validateParameter(valid_608462, JString, required = false,
                                 default = nil)
  if valid_608462 != nil:
    section.add "X-Amz-Credential", valid_608462
  var valid_608463 = header.getOrDefault("X-Amz-Security-Token")
  valid_608463 = validateParameter(valid_608463, JString, required = false,
                                 default = nil)
  if valid_608463 != nil:
    section.add "X-Amz-Security-Token", valid_608463
  var valid_608464 = header.getOrDefault("X-Amz-Algorithm")
  valid_608464 = validateParameter(valid_608464, JString, required = false,
                                 default = nil)
  if valid_608464 != nil:
    section.add "X-Amz-Algorithm", valid_608464
  var valid_608465 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608465 = validateParameter(valid_608465, JString, required = false,
                                 default = nil)
  if valid_608465 != nil:
    section.add "X-Amz-SignedHeaders", valid_608465
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_608466 = formData.getOrDefault("ResetAllParameters")
  valid_608466 = validateParameter(valid_608466, JBool, required = false, default = nil)
  if valid_608466 != nil:
    section.add "ResetAllParameters", valid_608466
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_608467 = formData.getOrDefault("DBParameterGroupName")
  valid_608467 = validateParameter(valid_608467, JString, required = true,
                                 default = nil)
  if valid_608467 != nil:
    section.add "DBParameterGroupName", valid_608467
  var valid_608468 = formData.getOrDefault("Parameters")
  valid_608468 = validateParameter(valid_608468, JArray, required = false,
                                 default = nil)
  if valid_608468 != nil:
    section.add "Parameters", valid_608468
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608469: Call_PostResetDBParameterGroup_608454; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_608469.validator(path, query, header, formData, body)
  let scheme = call_608469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608469.url(scheme.get, call_608469.host, call_608469.base,
                         call_608469.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608469, url, valid)

proc call*(call_608470: Call_PostResetDBParameterGroup_608454;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_608471 = newJObject()
  var formData_608472 = newJObject()
  add(formData_608472, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_608472, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608471, "Action", newJString(Action))
  if Parameters != nil:
    formData_608472.add "Parameters", Parameters
  add(query_608471, "Version", newJString(Version))
  result = call_608470.call(nil, query_608471, nil, formData_608472, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_608454(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_608455, base: "/",
    url: url_PostResetDBParameterGroup_608456,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_608436 = ref object of OpenApiRestCall_605573
proc url_GetResetDBParameterGroup_608438(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_608437(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_608439 = query.getOrDefault("DBParameterGroupName")
  valid_608439 = validateParameter(valid_608439, JString, required = true,
                                 default = nil)
  if valid_608439 != nil:
    section.add "DBParameterGroupName", valid_608439
  var valid_608440 = query.getOrDefault("Parameters")
  valid_608440 = validateParameter(valid_608440, JArray, required = false,
                                 default = nil)
  if valid_608440 != nil:
    section.add "Parameters", valid_608440
  var valid_608441 = query.getOrDefault("ResetAllParameters")
  valid_608441 = validateParameter(valid_608441, JBool, required = false, default = nil)
  if valid_608441 != nil:
    section.add "ResetAllParameters", valid_608441
  var valid_608442 = query.getOrDefault("Action")
  valid_608442 = validateParameter(valid_608442, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_608442 != nil:
    section.add "Action", valid_608442
  var valid_608443 = query.getOrDefault("Version")
  valid_608443 = validateParameter(valid_608443, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608443 != nil:
    section.add "Version", valid_608443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608444 = header.getOrDefault("X-Amz-Signature")
  valid_608444 = validateParameter(valid_608444, JString, required = false,
                                 default = nil)
  if valid_608444 != nil:
    section.add "X-Amz-Signature", valid_608444
  var valid_608445 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608445 = validateParameter(valid_608445, JString, required = false,
                                 default = nil)
  if valid_608445 != nil:
    section.add "X-Amz-Content-Sha256", valid_608445
  var valid_608446 = header.getOrDefault("X-Amz-Date")
  valid_608446 = validateParameter(valid_608446, JString, required = false,
                                 default = nil)
  if valid_608446 != nil:
    section.add "X-Amz-Date", valid_608446
  var valid_608447 = header.getOrDefault("X-Amz-Credential")
  valid_608447 = validateParameter(valid_608447, JString, required = false,
                                 default = nil)
  if valid_608447 != nil:
    section.add "X-Amz-Credential", valid_608447
  var valid_608448 = header.getOrDefault("X-Amz-Security-Token")
  valid_608448 = validateParameter(valid_608448, JString, required = false,
                                 default = nil)
  if valid_608448 != nil:
    section.add "X-Amz-Security-Token", valid_608448
  var valid_608449 = header.getOrDefault("X-Amz-Algorithm")
  valid_608449 = validateParameter(valid_608449, JString, required = false,
                                 default = nil)
  if valid_608449 != nil:
    section.add "X-Amz-Algorithm", valid_608449
  var valid_608450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608450 = validateParameter(valid_608450, JString, required = false,
                                 default = nil)
  if valid_608450 != nil:
    section.add "X-Amz-SignedHeaders", valid_608450
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608451: Call_GetResetDBParameterGroup_608436; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ## 
  let valid = call_608451.validator(path, query, header, formData, body)
  let scheme = call_608451.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608451.url(scheme.get, call_608451.host, call_608451.base,
                         call_608451.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608451, url, valid)

proc call*(call_608452: Call_GetResetDBParameterGroup_608436;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     : <p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608453 = newJObject()
  add(query_608453, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_608453.add "Parameters", Parameters
  add(query_608453, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_608453, "Action", newJString(Action))
  add(query_608453, "Version", newJString(Version))
  result = call_608452.call(nil, query_608453, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_608436(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_608437, base: "/",
    url: url_GetResetDBParameterGroup_608438, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_608503 = ref object of OpenApiRestCall_605573
proc url_PostRestoreDBClusterFromSnapshot_608505(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_608504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608506 = query.getOrDefault("Action")
  valid_608506 = validateParameter(valid_608506, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_608506 != nil:
    section.add "Action", valid_608506
  var valid_608507 = query.getOrDefault("Version")
  valid_608507 = validateParameter(valid_608507, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608507 != nil:
    section.add "Version", valid_608507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608508 = header.getOrDefault("X-Amz-Signature")
  valid_608508 = validateParameter(valid_608508, JString, required = false,
                                 default = nil)
  if valid_608508 != nil:
    section.add "X-Amz-Signature", valid_608508
  var valid_608509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608509 = validateParameter(valid_608509, JString, required = false,
                                 default = nil)
  if valid_608509 != nil:
    section.add "X-Amz-Content-Sha256", valid_608509
  var valid_608510 = header.getOrDefault("X-Amz-Date")
  valid_608510 = validateParameter(valid_608510, JString, required = false,
                                 default = nil)
  if valid_608510 != nil:
    section.add "X-Amz-Date", valid_608510
  var valid_608511 = header.getOrDefault("X-Amz-Credential")
  valid_608511 = validateParameter(valid_608511, JString, required = false,
                                 default = nil)
  if valid_608511 != nil:
    section.add "X-Amz-Credential", valid_608511
  var valid_608512 = header.getOrDefault("X-Amz-Security-Token")
  valid_608512 = validateParameter(valid_608512, JString, required = false,
                                 default = nil)
  if valid_608512 != nil:
    section.add "X-Amz-Security-Token", valid_608512
  var valid_608513 = header.getOrDefault("X-Amz-Algorithm")
  valid_608513 = validateParameter(valid_608513, JString, required = false,
                                 default = nil)
  if valid_608513 != nil:
    section.add "X-Amz-Algorithm", valid_608513
  var valid_608514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608514 = validateParameter(valid_608514, JString, required = false,
                                 default = nil)
  if valid_608514 != nil:
    section.add "X-Amz-SignedHeaders", valid_608514
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  var valid_608515 = formData.getOrDefault("Port")
  valid_608515 = validateParameter(valid_608515, JInt, required = false, default = nil)
  if valid_608515 != nil:
    section.add "Port", valid_608515
  var valid_608516 = formData.getOrDefault("EngineVersion")
  valid_608516 = validateParameter(valid_608516, JString, required = false,
                                 default = nil)
  if valid_608516 != nil:
    section.add "EngineVersion", valid_608516
  var valid_608517 = formData.getOrDefault("DatabaseName")
  valid_608517 = validateParameter(valid_608517, JString, required = false,
                                 default = nil)
  if valid_608517 != nil:
    section.add "DatabaseName", valid_608517
  var valid_608518 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608518 = validateParameter(valid_608518, JArray, required = false,
                                 default = nil)
  if valid_608518 != nil:
    section.add "VpcSecurityGroupIds", valid_608518
  var valid_608519 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608519 = validateParameter(valid_608519, JBool, required = false, default = nil)
  if valid_608519 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608519
  var valid_608520 = formData.getOrDefault("AvailabilityZones")
  valid_608520 = validateParameter(valid_608520, JArray, required = false,
                                 default = nil)
  if valid_608520 != nil:
    section.add "AvailabilityZones", valid_608520
  var valid_608521 = formData.getOrDefault("KmsKeyId")
  valid_608521 = validateParameter(valid_608521, JString, required = false,
                                 default = nil)
  if valid_608521 != nil:
    section.add "KmsKeyId", valid_608521
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_608522 = formData.getOrDefault("Engine")
  valid_608522 = validateParameter(valid_608522, JString, required = true,
                                 default = nil)
  if valid_608522 != nil:
    section.add "Engine", valid_608522
  var valid_608523 = formData.getOrDefault("SnapshotIdentifier")
  valid_608523 = validateParameter(valid_608523, JString, required = true,
                                 default = nil)
  if valid_608523 != nil:
    section.add "SnapshotIdentifier", valid_608523
  var valid_608524 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_608524 = validateParameter(valid_608524, JArray, required = false,
                                 default = nil)
  if valid_608524 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608524
  var valid_608525 = formData.getOrDefault("Tags")
  valid_608525 = validateParameter(valid_608525, JArray, required = false,
                                 default = nil)
  if valid_608525 != nil:
    section.add "Tags", valid_608525
  var valid_608526 = formData.getOrDefault("DBSubnetGroupName")
  valid_608526 = validateParameter(valid_608526, JString, required = false,
                                 default = nil)
  if valid_608526 != nil:
    section.add "DBSubnetGroupName", valid_608526
  var valid_608527 = formData.getOrDefault("OptionGroupName")
  valid_608527 = validateParameter(valid_608527, JString, required = false,
                                 default = nil)
  if valid_608527 != nil:
    section.add "OptionGroupName", valid_608527
  var valid_608528 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608528 = validateParameter(valid_608528, JString, required = false,
                                 default = nil)
  if valid_608528 != nil:
    section.add "DBClusterParameterGroupName", valid_608528
  var valid_608529 = formData.getOrDefault("DBClusterIdentifier")
  valid_608529 = validateParameter(valid_608529, JString, required = true,
                                 default = nil)
  if valid_608529 != nil:
    section.add "DBClusterIdentifier", valid_608529
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608530: Call_PostRestoreDBClusterFromSnapshot_608503;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_608530.validator(path, query, header, formData, body)
  let scheme = call_608530.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608530.url(scheme.get, call_608530.host, call_608530.base,
                         call_608530.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608530, url, valid)

proc call*(call_608531: Call_PostRestoreDBClusterFromSnapshot_608503;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; EngineVersion: string = ""; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   DatabaseName: string
  ##               : Not supported.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  var query_608532 = newJObject()
  var formData_608533 = newJObject()
  add(formData_608533, "Port", newJInt(Port))
  add(formData_608533, "EngineVersion", newJString(EngineVersion))
  add(formData_608533, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_608533.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608533, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_608533.add "AvailabilityZones", AvailabilityZones
  add(formData_608533, "KmsKeyId", newJString(KmsKeyId))
  add(formData_608533, "Engine", newJString(Engine))
  add(formData_608533, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_608533.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608532, "Action", newJString(Action))
  if Tags != nil:
    formData_608533.add "Tags", Tags
  add(formData_608533, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608533, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608533, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608532, "Version", newJString(Version))
  add(formData_608533, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608531.call(nil, query_608532, nil, formData_608533, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_608503(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_608504, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_608505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_608473 = ref object of OpenApiRestCall_605573
proc url_GetRestoreDBClusterFromSnapshot_608475(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_608474(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : Not supported.
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EngineVersion: JString
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_608476 = query.getOrDefault("DatabaseName")
  valid_608476 = validateParameter(valid_608476, JString, required = false,
                                 default = nil)
  if valid_608476 != nil:
    section.add "DatabaseName", valid_608476
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_608477 = query.getOrDefault("Engine")
  valid_608477 = validateParameter(valid_608477, JString, required = true,
                                 default = nil)
  if valid_608477 != nil:
    section.add "Engine", valid_608477
  var valid_608478 = query.getOrDefault("SnapshotIdentifier")
  valid_608478 = validateParameter(valid_608478, JString, required = true,
                                 default = nil)
  if valid_608478 != nil:
    section.add "SnapshotIdentifier", valid_608478
  var valid_608479 = query.getOrDefault("Tags")
  valid_608479 = validateParameter(valid_608479, JArray, required = false,
                                 default = nil)
  if valid_608479 != nil:
    section.add "Tags", valid_608479
  var valid_608480 = query.getOrDefault("KmsKeyId")
  valid_608480 = validateParameter(valid_608480, JString, required = false,
                                 default = nil)
  if valid_608480 != nil:
    section.add "KmsKeyId", valid_608480
  var valid_608481 = query.getOrDefault("DBClusterIdentifier")
  valid_608481 = validateParameter(valid_608481, JString, required = true,
                                 default = nil)
  if valid_608481 != nil:
    section.add "DBClusterIdentifier", valid_608481
  var valid_608482 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608482 = validateParameter(valid_608482, JString, required = false,
                                 default = nil)
  if valid_608482 != nil:
    section.add "DBClusterParameterGroupName", valid_608482
  var valid_608483 = query.getOrDefault("AvailabilityZones")
  valid_608483 = validateParameter(valid_608483, JArray, required = false,
                                 default = nil)
  if valid_608483 != nil:
    section.add "AvailabilityZones", valid_608483
  var valid_608484 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608484 = validateParameter(valid_608484, JBool, required = false, default = nil)
  if valid_608484 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608484
  var valid_608485 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_608485 = validateParameter(valid_608485, JArray, required = false,
                                 default = nil)
  if valid_608485 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608485
  var valid_608486 = query.getOrDefault("EngineVersion")
  valid_608486 = validateParameter(valid_608486, JString, required = false,
                                 default = nil)
  if valid_608486 != nil:
    section.add "EngineVersion", valid_608486
  var valid_608487 = query.getOrDefault("Action")
  valid_608487 = validateParameter(valid_608487, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_608487 != nil:
    section.add "Action", valid_608487
  var valid_608488 = query.getOrDefault("Port")
  valid_608488 = validateParameter(valid_608488, JInt, required = false, default = nil)
  if valid_608488 != nil:
    section.add "Port", valid_608488
  var valid_608489 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608489 = validateParameter(valid_608489, JArray, required = false,
                                 default = nil)
  if valid_608489 != nil:
    section.add "VpcSecurityGroupIds", valid_608489
  var valid_608490 = query.getOrDefault("OptionGroupName")
  valid_608490 = validateParameter(valid_608490, JString, required = false,
                                 default = nil)
  if valid_608490 != nil:
    section.add "OptionGroupName", valid_608490
  var valid_608491 = query.getOrDefault("DBSubnetGroupName")
  valid_608491 = validateParameter(valid_608491, JString, required = false,
                                 default = nil)
  if valid_608491 != nil:
    section.add "DBSubnetGroupName", valid_608491
  var valid_608492 = query.getOrDefault("Version")
  valid_608492 = validateParameter(valid_608492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608492 != nil:
    section.add "Version", valid_608492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608493 = header.getOrDefault("X-Amz-Signature")
  valid_608493 = validateParameter(valid_608493, JString, required = false,
                                 default = nil)
  if valid_608493 != nil:
    section.add "X-Amz-Signature", valid_608493
  var valid_608494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608494 = validateParameter(valid_608494, JString, required = false,
                                 default = nil)
  if valid_608494 != nil:
    section.add "X-Amz-Content-Sha256", valid_608494
  var valid_608495 = header.getOrDefault("X-Amz-Date")
  valid_608495 = validateParameter(valid_608495, JString, required = false,
                                 default = nil)
  if valid_608495 != nil:
    section.add "X-Amz-Date", valid_608495
  var valid_608496 = header.getOrDefault("X-Amz-Credential")
  valid_608496 = validateParameter(valid_608496, JString, required = false,
                                 default = nil)
  if valid_608496 != nil:
    section.add "X-Amz-Credential", valid_608496
  var valid_608497 = header.getOrDefault("X-Amz-Security-Token")
  valid_608497 = validateParameter(valid_608497, JString, required = false,
                                 default = nil)
  if valid_608497 != nil:
    section.add "X-Amz-Security-Token", valid_608497
  var valid_608498 = header.getOrDefault("X-Amz-Algorithm")
  valid_608498 = validateParameter(valid_608498, JString, required = false,
                                 default = nil)
  if valid_608498 != nil:
    section.add "X-Amz-Algorithm", valid_608498
  var valid_608499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608499 = validateParameter(valid_608499, JString, required = false,
                                 default = nil)
  if valid_608499 != nil:
    section.add "X-Amz-SignedHeaders", valid_608499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608500: Call_GetRestoreDBClusterFromSnapshot_608473;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ## 
  let valid = call_608500.validator(path, query, header, formData, body)
  let scheme = call_608500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608500.url(scheme.get, call_608500.host, call_608500.base,
                         call_608500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608500, url, valid)

proc call*(call_608501: Call_GetRestoreDBClusterFromSnapshot_608473;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; Tags: JsonNode = nil; KmsKeyId: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
  ##   DatabaseName: string
  ##               : Not supported.
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : The tags to be assigned to the restored DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
  ##   EngineVersion: string
  ##                : The version of the database engine to use for the new DB cluster.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_608502 = newJObject()
  add(query_608502, "DatabaseName", newJString(DatabaseName))
  add(query_608502, "Engine", newJString(Engine))
  add(query_608502, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_608502.add "Tags", Tags
  add(query_608502, "KmsKeyId", newJString(KmsKeyId))
  add(query_608502, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608502, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_608502.add "AvailabilityZones", AvailabilityZones
  add(query_608502, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_608502.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608502, "EngineVersion", newJString(EngineVersion))
  add(query_608502, "Action", newJString(Action))
  add(query_608502, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_608502.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608502, "OptionGroupName", newJString(OptionGroupName))
  add(query_608502, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608502, "Version", newJString(Version))
  result = call_608501.call(nil, query_608502, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_608473(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_608474, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_608475,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_608563 = ref object of OpenApiRestCall_605573
proc url_PostRestoreDBClusterToPointInTime_608565(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_608564(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608566 = query.getOrDefault("Action")
  valid_608566 = validateParameter(valid_608566, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_608566 != nil:
    section.add "Action", valid_608566
  var valid_608567 = query.getOrDefault("Version")
  valid_608567 = validateParameter(valid_608567, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608567 != nil:
    section.add "Version", valid_608567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608568 = header.getOrDefault("X-Amz-Signature")
  valid_608568 = validateParameter(valid_608568, JString, required = false,
                                 default = nil)
  if valid_608568 != nil:
    section.add "X-Amz-Signature", valid_608568
  var valid_608569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608569 = validateParameter(valid_608569, JString, required = false,
                                 default = nil)
  if valid_608569 != nil:
    section.add "X-Amz-Content-Sha256", valid_608569
  var valid_608570 = header.getOrDefault("X-Amz-Date")
  valid_608570 = validateParameter(valid_608570, JString, required = false,
                                 default = nil)
  if valid_608570 != nil:
    section.add "X-Amz-Date", valid_608570
  var valid_608571 = header.getOrDefault("X-Amz-Credential")
  valid_608571 = validateParameter(valid_608571, JString, required = false,
                                 default = nil)
  if valid_608571 != nil:
    section.add "X-Amz-Credential", valid_608571
  var valid_608572 = header.getOrDefault("X-Amz-Security-Token")
  valid_608572 = validateParameter(valid_608572, JString, required = false,
                                 default = nil)
  if valid_608572 != nil:
    section.add "X-Amz-Security-Token", valid_608572
  var valid_608573 = header.getOrDefault("X-Amz-Algorithm")
  valid_608573 = validateParameter(valid_608573, JString, required = false,
                                 default = nil)
  if valid_608573 != nil:
    section.add "X-Amz-Algorithm", valid_608573
  var valid_608574 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608574 = validateParameter(valid_608574, JString, required = false,
                                 default = nil)
  if valid_608574 != nil:
    section.add "X-Amz-SignedHeaders", valid_608574
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  var valid_608575 = formData.getOrDefault("Port")
  valid_608575 = validateParameter(valid_608575, JInt, required = false, default = nil)
  if valid_608575 != nil:
    section.add "Port", valid_608575
  var valid_608576 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608576 = validateParameter(valid_608576, JArray, required = false,
                                 default = nil)
  if valid_608576 != nil:
    section.add "VpcSecurityGroupIds", valid_608576
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_608577 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_608577 = validateParameter(valid_608577, JString, required = true,
                                 default = nil)
  if valid_608577 != nil:
    section.add "SourceDBClusterIdentifier", valid_608577
  var valid_608578 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608578 = validateParameter(valid_608578, JBool, required = false, default = nil)
  if valid_608578 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608578
  var valid_608579 = formData.getOrDefault("KmsKeyId")
  valid_608579 = validateParameter(valid_608579, JString, required = false,
                                 default = nil)
  if valid_608579 != nil:
    section.add "KmsKeyId", valid_608579
  var valid_608580 = formData.getOrDefault("RestoreType")
  valid_608580 = validateParameter(valid_608580, JString, required = false,
                                 default = nil)
  if valid_608580 != nil:
    section.add "RestoreType", valid_608580
  var valid_608581 = formData.getOrDefault("UseLatestRestorableTime")
  valid_608581 = validateParameter(valid_608581, JBool, required = false, default = nil)
  if valid_608581 != nil:
    section.add "UseLatestRestorableTime", valid_608581
  var valid_608582 = formData.getOrDefault("RestoreToTime")
  valid_608582 = validateParameter(valid_608582, JString, required = false,
                                 default = nil)
  if valid_608582 != nil:
    section.add "RestoreToTime", valid_608582
  var valid_608583 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_608583 = validateParameter(valid_608583, JArray, required = false,
                                 default = nil)
  if valid_608583 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608583
  var valid_608584 = formData.getOrDefault("Tags")
  valid_608584 = validateParameter(valid_608584, JArray, required = false,
                                 default = nil)
  if valid_608584 != nil:
    section.add "Tags", valid_608584
  var valid_608585 = formData.getOrDefault("DBSubnetGroupName")
  valid_608585 = validateParameter(valid_608585, JString, required = false,
                                 default = nil)
  if valid_608585 != nil:
    section.add "DBSubnetGroupName", valid_608585
  var valid_608586 = formData.getOrDefault("OptionGroupName")
  valid_608586 = validateParameter(valid_608586, JString, required = false,
                                 default = nil)
  if valid_608586 != nil:
    section.add "OptionGroupName", valid_608586
  var valid_608587 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608587 = validateParameter(valid_608587, JString, required = false,
                                 default = nil)
  if valid_608587 != nil:
    section.add "DBClusterParameterGroupName", valid_608587
  var valid_608588 = formData.getOrDefault("DBClusterIdentifier")
  valid_608588 = validateParameter(valid_608588, JString, required = true,
                                 default = nil)
  if valid_608588 != nil:
    section.add "DBClusterIdentifier", valid_608588
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608589: Call_PostRestoreDBClusterToPointInTime_608563;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_608589.validator(path, query, header, formData, body)
  let scheme = call_608589.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608589.url(scheme.get, call_608589.host, call_608589.base,
                         call_608589.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608589, url, valid)

proc call*(call_608590: Call_PostRestoreDBClusterToPointInTime_608563;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_608591 = newJObject()
  var formData_608592 = newJObject()
  add(formData_608592, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_608592.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608592, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_608592, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_608592, "KmsKeyId", newJString(KmsKeyId))
  add(formData_608592, "RestoreType", newJString(RestoreType))
  add(formData_608592, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_608592, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_608592.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608591, "Action", newJString(Action))
  if Tags != nil:
    formData_608592.add "Tags", Tags
  add(formData_608592, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608592, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608592, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608591, "Version", newJString(Version))
  add(formData_608592, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608590.call(nil, query_608591, nil, formData_608592, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_608563(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_608564, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_608565,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_608534 = ref object of OpenApiRestCall_605573
proc url_GetRestoreDBClusterToPointInTime_608536(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_608535(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_608537 = query.getOrDefault("RestoreType")
  valid_608537 = validateParameter(valid_608537, JString, required = false,
                                 default = nil)
  if valid_608537 != nil:
    section.add "RestoreType", valid_608537
  var valid_608538 = query.getOrDefault("UseLatestRestorableTime")
  valid_608538 = validateParameter(valid_608538, JBool, required = false, default = nil)
  if valid_608538 != nil:
    section.add "UseLatestRestorableTime", valid_608538
  var valid_608539 = query.getOrDefault("Tags")
  valid_608539 = validateParameter(valid_608539, JArray, required = false,
                                 default = nil)
  if valid_608539 != nil:
    section.add "Tags", valid_608539
  var valid_608540 = query.getOrDefault("KmsKeyId")
  valid_608540 = validateParameter(valid_608540, JString, required = false,
                                 default = nil)
  if valid_608540 != nil:
    section.add "KmsKeyId", valid_608540
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608541 = query.getOrDefault("DBClusterIdentifier")
  valid_608541 = validateParameter(valid_608541, JString, required = true,
                                 default = nil)
  if valid_608541 != nil:
    section.add "DBClusterIdentifier", valid_608541
  var valid_608542 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_608542 = validateParameter(valid_608542, JString, required = true,
                                 default = nil)
  if valid_608542 != nil:
    section.add "SourceDBClusterIdentifier", valid_608542
  var valid_608543 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608543 = validateParameter(valid_608543, JString, required = false,
                                 default = nil)
  if valid_608543 != nil:
    section.add "DBClusterParameterGroupName", valid_608543
  var valid_608544 = query.getOrDefault("RestoreToTime")
  valid_608544 = validateParameter(valid_608544, JString, required = false,
                                 default = nil)
  if valid_608544 != nil:
    section.add "RestoreToTime", valid_608544
  var valid_608545 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608545 = validateParameter(valid_608545, JBool, required = false, default = nil)
  if valid_608545 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608545
  var valid_608546 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_608546 = validateParameter(valid_608546, JArray, required = false,
                                 default = nil)
  if valid_608546 != nil:
    section.add "EnableCloudwatchLogsExports", valid_608546
  var valid_608547 = query.getOrDefault("Action")
  valid_608547 = validateParameter(valid_608547, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_608547 != nil:
    section.add "Action", valid_608547
  var valid_608548 = query.getOrDefault("Port")
  valid_608548 = validateParameter(valid_608548, JInt, required = false, default = nil)
  if valid_608548 != nil:
    section.add "Port", valid_608548
  var valid_608549 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608549 = validateParameter(valid_608549, JArray, required = false,
                                 default = nil)
  if valid_608549 != nil:
    section.add "VpcSecurityGroupIds", valid_608549
  var valid_608550 = query.getOrDefault("OptionGroupName")
  valid_608550 = validateParameter(valid_608550, JString, required = false,
                                 default = nil)
  if valid_608550 != nil:
    section.add "OptionGroupName", valid_608550
  var valid_608551 = query.getOrDefault("DBSubnetGroupName")
  valid_608551 = validateParameter(valid_608551, JString, required = false,
                                 default = nil)
  if valid_608551 != nil:
    section.add "DBSubnetGroupName", valid_608551
  var valid_608552 = query.getOrDefault("Version")
  valid_608552 = validateParameter(valid_608552, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608552 != nil:
    section.add "Version", valid_608552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608553 = header.getOrDefault("X-Amz-Signature")
  valid_608553 = validateParameter(valid_608553, JString, required = false,
                                 default = nil)
  if valid_608553 != nil:
    section.add "X-Amz-Signature", valid_608553
  var valid_608554 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608554 = validateParameter(valid_608554, JString, required = false,
                                 default = nil)
  if valid_608554 != nil:
    section.add "X-Amz-Content-Sha256", valid_608554
  var valid_608555 = header.getOrDefault("X-Amz-Date")
  valid_608555 = validateParameter(valid_608555, JString, required = false,
                                 default = nil)
  if valid_608555 != nil:
    section.add "X-Amz-Date", valid_608555
  var valid_608556 = header.getOrDefault("X-Amz-Credential")
  valid_608556 = validateParameter(valid_608556, JString, required = false,
                                 default = nil)
  if valid_608556 != nil:
    section.add "X-Amz-Credential", valid_608556
  var valid_608557 = header.getOrDefault("X-Amz-Security-Token")
  valid_608557 = validateParameter(valid_608557, JString, required = false,
                                 default = nil)
  if valid_608557 != nil:
    section.add "X-Amz-Security-Token", valid_608557
  var valid_608558 = header.getOrDefault("X-Amz-Algorithm")
  valid_608558 = validateParameter(valid_608558, JString, required = false,
                                 default = nil)
  if valid_608558 != nil:
    section.add "X-Amz-Algorithm", valid_608558
  var valid_608559 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608559 = validateParameter(valid_608559, JString, required = false,
                                 default = nil)
  if valid_608559 != nil:
    section.add "X-Amz-SignedHeaders", valid_608559
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608560: Call_GetRestoreDBClusterToPointInTime_608534;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ## 
  let valid = call_608560.validator(path, query, header, formData, body)
  let scheme = call_608560.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608560.url(scheme.get, call_608560.host, call_608560.base,
                         call_608560.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608560, url, valid)

proc call*(call_608561: Call_GetRestoreDBClusterToPointInTime_608534;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = "";
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Tags: JArray
  ##       : The tags to be applied to the restored DB cluster.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_608562 = newJObject()
  add(query_608562, "RestoreType", newJString(RestoreType))
  add(query_608562, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  if Tags != nil:
    query_608562.add "Tags", Tags
  add(query_608562, "KmsKeyId", newJString(KmsKeyId))
  add(query_608562, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608562, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_608562, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608562, "RestoreToTime", newJString(RestoreToTime))
  add(query_608562, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_608562.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_608562, "Action", newJString(Action))
  add(query_608562, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_608562.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608562, "OptionGroupName", newJString(OptionGroupName))
  add(query_608562, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608562, "Version", newJString(Version))
  result = call_608561.call(nil, query_608562, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_608534(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_608535, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_608536,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  ## the hook is a terrible earworm
  var headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
  let
    body = input.getOrDefault("body")
    text = if body == nil:
      "" elif body.kind == JString:
      body.getStr else:
      $body
  if body != nil and body.kind != JString:
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)
